{"version":3,"file":"index-frS7XoLY.js","sources":["../../src/pages/scenario-analysis-sensitivity-tools/components/ResultsVisualizationPanel.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/ScenarioConfigPanel.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/SimulationControlBar.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/StatisticalSummaryTable.jsx","../../src/services/advancedSimulationEngine.js","../../src/pages/scenario-analysis-sensitivity-tools/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  Line,\n  Area,\n  AreaChart\n} from 'recharts';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst ResultsVisualizationPanel = ({ simulationResults, isSimulating }) => {\n  const [activeChart, setActiveChart] = useState('distribution');\n  const [selectedMetric, setSelectedMetric] = useState('enterprise_value');\n\n  // Mock simulation results data\n  const mockResults = {\n    summary: {\n      mean: 2847.5,\n      median: 2823.1,\n      stdDev: 456.2,\n      min: 1654.3,\n      max: 4521.8,\n      percentile5: 2156.7,\n      percentile95: 3687.4,\n      iterations: 10000\n    },\n    distribution: Array.from({ length: 50 }, (_, i) => ({\n      value: 1500 + i * 60,\n      frequency: Math.max(0, Math.round(200 * Math.exp(-Math.pow((i - 25) / 10, 2))))\n    })),\n    tornado: [\n      { variable: 'Revenue Growth', impact: 847.2, direction: 'positive' },\n      { variable: 'Terminal Growth', impact: 623.8, direction: 'positive' },\n      { variable: 'WACC', impact: -567.4, direction: 'negative' },\n      { variable: 'Margin Expansion', impact: 445.6, direction: 'positive' },\n      { variable: 'CapEx Ratio', impact: -334.2, direction: 'negative' },\n      { variable: 'Working Capital', impact: -187.9, direction: 'negative' }\n    ],\n    scatter: Array.from({ length: 1000 }, (_, i) => ({\n      revenueGrowth: 0.05 + Math.random() * 0.3,\n      enterpriseValue: 1800 + Math.random() * 2000 + (Math.random() - 0.5) * 500\n    })),\n    timeSeries: Array.from({ length: 20 }, (_, i) => ({\n      iteration: (i + 1) * 500,\n      mean: 2800 + Math.sin(i * 0.5) * 50 + Math.random() * 20,\n      confidence95: 3600 + Math.sin(i * 0.5) * 60 + Math.random() * 30,\n      confidence5: 2000 + Math.sin(i * 0.5) * 40 + Math.random() * 20\n    }))\n  };\n\n  const results = simulationResults || mockResults;\n\n  const chartTypes = [\n    { value: 'distribution', label: 'Distribution', icon: 'BarChart3' },\n    { value: 'tornado', label: 'Tornado Chart', icon: 'BarChart2' },\n    { value: 'scatter', label: 'Scatter Plot', icon: 'Scatter3D' },\n    { value: 'convergence', label: 'Convergence', icon: 'TrendingUp' }\n  ];\n\n  const metricOptions = [\n    { value: 'enterprise_value', label: 'Enterprise Value ($M)' },\n    { value: 'equity_value', label: 'Equity Value ($M)' },\n    { value: 'share_price', label: 'Share Price ($)' },\n    { value: 'irr', label: 'Internal Rate of Return (%)' },\n    { value: 'multiple', label: 'EV/EBITDA Multiple' }\n  ];\n\n  const exportOptions = [\n    { value: 'pdf', label: 'PDF Report' },\n    { value: 'excel', label: 'Excel Workbook' },\n    { value: 'csv', label: 'CSV Data' },\n    { value: 'png', label: 'PNG Image' }\n  ];\n\n  const renderDistributionChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Value Distribution</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ZoomIn\" />\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ZoomOut\" />\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"RotateCcw\" />\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={results.distribution}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"value\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <YAxis stroke=\"var(--color-muted-foreground)\" fontSize={12} />\n            <Tooltip\n              formatter={(value, name) => [`${value} simulations`, 'Frequency']}\n              labelFormatter={value => `Value: $${(value / 1000).toFixed(1)}B`}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Bar dataKey=\"frequency\" fill=\"var(--color-primary)\" radius={[2, 2, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderTornadoChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Sensitivity Analysis</h3>\n        <Select\n          options={[\n            { value: 'absolute', label: 'Absolute Impact' },\n            { value: 'percentage', label: 'Percentage Impact' }\n          ]}\n          value=\"absolute\"\n          onChange={() => {}}\n          className=\"w-40\"\n        />\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={results.tornado} layout=\"horizontal\" margin={{ left: 100 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              type=\"number\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${Math.abs(value).toFixed(0)}M`}\n            />\n            <YAxis\n              type=\"category\"\n              dataKey=\"variable\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              width={90}\n            />\n            <Tooltip\n              formatter={(value, name) => [`$${Math.abs(value).toFixed(1)}M`, 'Impact']}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Bar\n              dataKey=\"impact\"\n              fill={entry =>\n                entry.direction === 'positive' ? 'var(--color-success)' : 'var(--color-error)'\n              }\n              radius={[0, 2, 2, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderScatterChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Variable Correlation</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Select\n            options={[\n              { value: 'revenue_growth', label: 'Revenue Growth' },\n              { value: 'margin_expansion', label: 'Margin Expansion' },\n              { value: 'terminal_growth', label: 'Terminal Growth' }\n            ]}\n            value=\"revenue_growth\"\n            onChange={() => {}}\n            className=\"w-40\"\n          />\n          <span className=\"text-sm text-muted-foreground\">vs</span>\n          <Select\n            options={metricOptions}\n            value={selectedMetric}\n            onChange={setSelectedMetric}\n            className=\"w-40\"\n          />\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ScatterChart data={results.scatter}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"revenueGrowth\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `${(value * 100).toFixed(0)}%`}\n            />\n            <YAxis\n              dataKey=\"enterpriseValue\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <Tooltip\n              formatter={(value, name) => [\n                name === 'revenueGrowth'\n                  ? `${(value * 100).toFixed(1)}%`\n                  : `$${(value / 1000).toFixed(1)}B`,\n                name === 'revenueGrowth' ? 'Revenue Growth' : 'Enterprise Value'\n              ]}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Scatter dataKey=\"enterpriseValue\" fill=\"var(--color-secondary)\" fillOpacity={0.6} />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderConvergenceChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Monte Carlo Convergence</h3>\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n          <Icon name=\"TrendingUp\" size={16} />\n          <span>Convergence achieved at 8,500 iterations</span>\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={results.timeSeries}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"iteration\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `${(value / 1000).toFixed(0)}K`}\n            />\n            <YAxis\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <Tooltip\n              formatter={(value, name) => [`$${(value / 1000).toFixed(2)}B`, name]}\n              labelFormatter={value => `Iteration: ${value.toLocaleString()}`}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Area\n              dataKey=\"confidence95\"\n              stroke=\"var(--color-primary)\"\n              fill=\"var(--color-primary)\"\n              fillOpacity={0.1}\n            />\n            <Area\n              dataKey=\"confidence5\"\n              stroke=\"var(--color-primary)\"\n              fill=\"var(--color-background)\"\n              fillOpacity={1}\n            />\n            <Line\n              dataKey=\"mean\" stroke=\"var(--color-primary)\" strokeWidth={2}\n              dot={false}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col bg-card\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Simulation Results</h2>\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={metricOptions}\n              value={selectedMetric}\n              onChange={setSelectedMetric}\n              className=\"w-48\"\n              disabled={isSimulating}\n            />\n            <Select\n              options={exportOptions}\n              value=\"pdf\"\n              onChange={() => {}}\n              className=\"w-32\"\n              disabled={isSimulating}\n            />\n            <Button variant=\"outline\" iconName=\"Download\" disabled={isSimulating}>\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Type Selector */}\n      <div className=\"border-b border-border\">\n        <div className=\"flex\">\n          {chartTypes.map(chart => (\n            <button\n              key={chart.value}\n              onClick={() => setActiveChart(chart.value)}\n              className={`flex items-center space-x-2 px-6 py-3 text-sm font-medium transition-smooth ${\n                activeChart === chart.value\n                  ? 'border-b-2 border-primary text-primary'\n                  : 'text-muted-foreground hover:text-foreground'\n              }`}\n              disabled={isSimulating}\n            >\n              <Icon name={chart.icon} size={16} />\n              <span>{chart.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Results Summary */}\n      <div className=\"p-6 border-b border-border bg-muted/30\">\n        <div className=\"grid grid-cols-6 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ${(results.summary.mean / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Mean Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ${(results.summary.median / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Median Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ±${(results.summary.stdDev / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Std Deviation</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-success\">\n              ${(results.summary.percentile95 / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">95th Percentile</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-error\">\n              ${(results.summary.percentile5 / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">5th Percentile</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              {results.summary.iterations.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Iterations</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {isSimulating ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n              <div className=\"text-lg font-medium text-foreground\">Running Simulation...</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Calculating Monte Carlo scenarios with {results.summary.iterations.toLocaleString()}{' '}\n                iterations\n              </div>\n            </div>\n          </div>\n        ) : (\n          <>\n            {activeChart === 'distribution' && renderDistributionChart()}\n            {activeChart === 'tornado' && renderTornadoChart()}\n            {activeChart === 'scatter' && renderScatterChart()}\n            {activeChart === 'convergence' && renderConvergenceChart()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsVisualizationPanel;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst ScenarioConfigPanel = ({ onScenarioUpdate, isSimulating }) => {\n  const [activeTab, setActiveTab] = useState('variables');\n  const [scenarios, setScenarios] = useState([\n    {\n      id: 1,\n      name: 'Base Case',\n      probability: 0.4,\n      variables: {\n        revenueGrowth: 0.15,\n        marginExpansion: 0.02,\n        capexRatio: 0.08,\n        terminalGrowth: 0.025\n      }\n    },\n    {\n      id: 2,\n      name: 'Bull Case',\n      probability: 0.3,\n      variables: {\n        revenueGrowth: 0.25,\n        marginExpansion: 0.05,\n        capexRatio: 0.06,\n        terminalGrowth: 0.035\n      }\n    },\n    {\n      id: 3,\n      name: 'Bear Case',\n      probability: 0.3,\n      variables: {\n        revenueGrowth: 0.05,\n        marginExpansion: -0.01,\n        capexRatio: 0.12,\n        terminalGrowth: 0.015\n      }\n    }\n  ]);\n\n  const [selectedScenario, setSelectedScenario] = useState(scenarios[0]);\n  const [correlationMatrix, setCorrelationMatrix] = useState([\n    { var1: 'Revenue Growth', var2: 'Margin Expansion', correlation: 0.65 },\n    { var1: 'Revenue Growth', var2: 'CapEx Ratio', correlation: -0.45 },\n    { var1: 'Margin Expansion', var2: 'Terminal Growth', correlation: 0.35 }\n  ]);\n\n  const distributionTypes = [\n    { value: 'normal', label: 'Normal Distribution' },\n    { value: 'triangular', label: 'Triangular Distribution' },\n    { value: 'uniform', label: 'Uniform Distribution' },\n    { value: 'lognormal', label: 'Log-Normal Distribution' }\n  ];\n\n  const variableTemplates = [\n    { value: 'dcf_standard', label: 'DCF Standard Variables' },\n    { value: 'lbo_analysis', label: 'LBO Analysis Variables' },\n    { value: 'comps_analysis', label: 'Comparable Analysis Variables' },\n    { value: 'custom', label: 'Custom Variable Set' }\n  ];\n\n  const tabs = [\n    { id: 'variables', label: 'Variables', icon: 'Settings' },\n    { id: 'distributions', label: 'Distributions', icon: 'BarChart3' },\n    { id: 'correlations', label: 'Correlations', icon: 'Network' },\n    { id: 'templates', label: 'Templates', icon: 'FileTemplate' }\n  ];\n\n  const handleVariableChange = (variableName, value) => {\n    const updatedScenario = {\n      ...selectedScenario,\n      variables: {\n        ...selectedScenario.variables,\n        [variableName]: parseFloat(value)\n      }\n    };\n    setSelectedScenario(updatedScenario);\n\n    const updatedScenarios = scenarios.map(s =>\n      s.id === selectedScenario.id ? updatedScenario : s\n    );\n    setScenarios(updatedScenarios);\n    onScenarioUpdate(updatedScenarios);\n  };\n\n  const addNewScenario = () => {\n    const newScenario = {\n      id: scenarios.length + 1,\n      name: `Scenario ${scenarios.length + 1}`,\n      probability: 0.1,\n      variables: { ...selectedScenario.variables }\n    };\n    setScenarios([...scenarios, newScenario]);\n  };\n\n  const renderVariablesTab = () => (\n    <div className=\"space-y-6\">\n      {/* Scenario Selector */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Scenario Configuration</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={addNewScenario}\n            disabled={isSimulating}\n          >\n            Add Scenario\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-2\">\n          {scenarios.map(scenario => (\n            <button\n              key={scenario.id}\n              onClick={() => setSelectedScenario(scenario)}\n              className={`p-3 rounded-lg border text-left transition-smooth ${\n                selectedScenario.id === scenario.id\n                  ? 'border-primary bg-primary/5 text-primary'\n                  : 'border-border hover:border-primary/50'\n              }`}\n              disabled={isSimulating}\n            >\n              <div className=\"font-medium text-sm\">{scenario.name}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                P: {(scenario.probability * 100).toFixed(0)}%\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Variable Inputs */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Key Variables</h4>\n        <div className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Revenue Growth Rate\"\n              type=\"number\"\n              value={selectedScenario.variables.revenueGrowth}\n              onChange={e => handleVariableChange('revenueGrowth', e.target.value)}\n              placeholder=\"0.15\"\n              disabled={isSimulating}\n              description=\"Annual revenue growth rate\"\n            />\n            <Input\n              label=\"Margin Expansion\"\n              type=\"number\"\n              value={selectedScenario.variables.marginExpansion}\n              onChange={e => handleVariableChange('marginExpansion', e.target.value)}\n              placeholder=\"0.02\"\n              disabled={isSimulating}\n              description=\"EBITDA margin improvement\"\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"CapEx Ratio\"\n              type=\"number\"\n              value={selectedScenario.variables.capexRatio}\n              onChange={e => handleVariableChange('capexRatio', e.target.value)}\n              placeholder=\"0.08\"\n              disabled={isSimulating}\n              description=\"CapEx as % of revenue\"\n            />\n            <Input\n              label=\"Terminal Growth Rate\"\n              type=\"number\"\n              value={selectedScenario.variables.terminalGrowth}\n              onChange={e => handleVariableChange('terminalGrowth', e.target.value)}\n              placeholder=\"0.025\"\n              disabled={isSimulating}\n              description=\"Long-term growth rate\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Probability Weights */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Probability Weights</h4>\n        <div className=\"space-y-2\">\n          {scenarios.map(scenario => (\n            <div\n              key={scenario.id}\n              className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n            >\n              <span className=\"font-medium text-sm\">{scenario.name}</span>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"number\"\n                  value={scenario.probability}\n                  onChange={e => {\n                    const updatedScenarios = scenarios.map(s =>\n                      s.id === scenario.id ? { ...s, probability: parseFloat(e.target.value) } : s\n                    );\n                    setScenarios(updatedScenarios);\n                  }}\n                  className=\"w-20\"\n                  disabled={isSimulating}\n                />\n                <span className=\"text-sm text-muted-foreground\">%</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDistributionsTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Distribution Parameters</h3>\n\n      <div className=\"space-y-4\">\n        {Object.keys(selectedScenario.variables).map(variable => (\n          <div key={variable} className=\"p-4 border border-border rounded-lg space-y-3\">\n            <h4 className=\"font-medium text-foreground capitalize\">\n              {variable.replace(/([A-Z])/g, ' $1').trim()}\n            </h4>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Select\n                label=\"Distribution Type\"\n                options={distributionTypes}\n                value=\"normal\"\n                onChange={() => {}}\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Standard Deviation\"\n                type=\"number\"\n                placeholder=\"0.05\"\n                disabled={isSimulating}\n                description=\"Volatility parameter\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Input\n                label=\"Min Value\" type=\"number\" placeholder=\"-0.1\"\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Most Likely\"\n                type=\"number\"\n                value={selectedScenario.variables[variable]}\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Max Value\" type=\"number\" placeholder=\"0.5\"\n                disabled={isSimulating}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderCorrelationsTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Variable Correlations</h3>\n\n      <div className=\"space-y-4\">\n        {correlationMatrix.map((correlation, index) => (\n          <div\n            key={index}\n            className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n          >\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm\">{correlation.var1}</div>\n              <div className=\"text-xs text-muted-foreground\">vs {correlation.var2}</div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"number\"\n                value={correlation.correlation}\n                onChange={e => {\n                  const updatedMatrix = correlationMatrix.map((c, i) =>\n                    i === index ? { ...c, correlation: parseFloat(e.target.value) } : c\n                  );\n                  setCorrelationMatrix(updatedMatrix);\n                }}\n                className=\"w-24\"\n                disabled={isSimulating}\n                min=\"-1\"\n                max=\"1\"\n                step=\"0.01\"\n              />\n              <div\n                className={`w-3 h-3 rounded-full ${\n                  correlation.correlation > 0.5\n                    ? 'bg-success'\n                    : correlation.correlation < -0.5\n                      ? 'bg-error'\n                      : 'bg-warning'\n                }`}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <Button\n        variant=\"outline\" iconName=\"Plus\" disabled={isSimulating}\n        className=\"w-full\"\n      >\n        Add Correlation Pair\n      </Button>\n    </div>\n  );\n\n  const renderTemplatesTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Scenario Templates</h3>\n\n      <Select\n        label=\"Load Template\"\n        options={variableTemplates}\n        value=\"dcf_standard\"\n        onChange={() => {}}\n        disabled={isSimulating}\n        description=\"Pre-configured variable sets for common analyses\"\n      />\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Template Actions</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Button\n            variant=\"outline\" iconName=\"Download\" disabled={isSimulating}\n            className=\"w-full\"\n          >\n            Import from Excel\n          </Button>\n          <Button\n            variant=\"outline\" iconName=\"Upload\" disabled={isSimulating}\n            className=\"w-full\"\n          >\n            Export Template\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Saved Templates</h4>\n        <div className=\"space-y-2\">\n          {['Tech Company DCF', 'REIT Analysis', 'Energy Sector Model'].map((template, index) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n            >\n              <div>\n                <div className=\"font-medium text-sm\">{template}</div>\n                <div className=\"text-xs text-muted-foreground\">Last modified: 2 days ago</div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\" size=\"sm\" iconName=\"Eye\"\n                  disabled={isSimulating}\n                />\n                <Button\n                  variant=\"ghost\" size=\"sm\" iconName=\"Download\"\n                  disabled={isSimulating}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col bg-card border-r border-border\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Scenario Configuration</h2>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-2 h-2 rounded-full ${isSimulating ? 'bg-warning' : 'bg-success'}`} />\n            <span className=\"text-sm text-muted-foreground\">\n              {isSimulating ? 'Simulating...' : 'Ready'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-border\">\n        <div className=\"flex\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n                activeTab === tab.id\n                  ? 'border-b-2 border-primary text-primary'\n                  : 'text-muted-foreground hover:text-foreground'\n              }`}\n              disabled={isSimulating}\n            >\n              <Icon name={tab.icon} size={16} />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {activeTab === 'variables' && renderVariablesTab()}\n        {activeTab === 'distributions' && renderDistributionsTab()}\n        {activeTab === 'correlations' && renderCorrelationsTab()}\n        {activeTab === 'templates' && renderTemplatesTab()}\n      </div>\n    </div>\n  );\n};\n\nexport default ScenarioConfigPanel;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst SimulationControlBar = ({ onRunSimulation, isSimulating, progress, onStopSimulation }) => {\n  const [simulationParams, setSimulationParams] = useState({\n    iterations: 10000,\n    confidenceLevel: 0.95,\n    randomSeed: 12345,\n    method: 'monte_carlo'\n  });\n\n  const iterationOptions = [\n    { value: 1000, label: '1,000 iterations' },\n    { value: 5000, label: '5,000 iterations' },\n    { value: 10000, label: '10,000 iterations' },\n    { value: 25000, label: '25,000 iterations' },\n    { value: 50000, label: '50,000 iterations' },\n    { value: 100000, label: '100,000 iterations' }\n  ];\n\n  const methodOptions = [\n    { value: 'monte_carlo', label: 'Monte Carlo Simulation' },\n    { value: 'latin_hypercube', label: 'Latin Hypercube Sampling' },\n    { value: 'sobol_sequence', label: 'Sobol Sequence' },\n    { value: 'halton_sequence', label: 'Halton Sequence' }\n  ];\n\n  const confidenceOptions = [\n    { value: 0.9, label: '90% Confidence' },\n    { value: 0.95, label: '95% Confidence' },\n    { value: 0.99, label: '99% Confidence' }\n  ];\n\n  const handleRunSimulation = () => {\n    onRunSimulation(simulationParams);\n  };\n\n  const getEstimatedTime = () => {\n    const baseTime = simulationParams.iterations / 1000; // seconds per 1000 iterations\n    return baseTime < 60 ? `~${Math.ceil(baseTime)}s` : `~${Math.ceil(baseTime / 60)}m`;\n  };\n\n  return (\n    <div className=\"bg-card border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Left Section - Simulation Parameters */}\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={iterationOptions}\n              value={simulationParams.iterations}\n              onChange={value => setSimulationParams(prev => ({ ...prev, iterations: value }))}\n              disabled={isSimulating}\n              className=\"w-48\"\n            />\n\n            <Select\n              options={methodOptions}\n              value={simulationParams.method}\n              onChange={value => setSimulationParams(prev => ({ ...prev, method: value }))}\n              disabled={isSimulating}\n              className=\"w-56\"\n            />\n\n            <Select\n              options={confidenceOptions}\n              value={simulationParams.confidenceLevel}\n              onChange={value => setSimulationParams(prev => ({ ...prev, confidenceLevel: value }))}\n              disabled={isSimulating}\n              className=\"w-40\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              type=\"number\"\n              value={simulationParams.randomSeed}\n              onChange={e =>\n                setSimulationParams(prev => ({ ...prev, randomSeed: parseInt(e.target.value) }))\n              }\n              disabled={isSimulating}\n              className=\"w-24\"\n              placeholder=\"Seed\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Shuffle\"\n              onClick={() =>\n                setSimulationParams(prev => ({\n                  ...prev,\n                  randomSeed: Math.floor(Math.random() * 100000)\n                }))\n              }\n              disabled={isSimulating}\n              title=\"Generate random seed\"\n            />\n          </div>\n        </div>\n\n        {/* Center Section - Progress */}\n        {isSimulating && (\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-32 h-2 bg-muted rounded-full overflow-hidden\">\n                <div\n                  className=\"h-full bg-primary transition-all duration-300\"\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n              <span className=\"text-sm font-mono text-muted-foreground\">\n                {progress.toFixed(1)}%\n              </span>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\">\n              <span className=\"font-mono\">\n                {Math.floor((progress / 100) * simulationParams.iterations).toLocaleString()}\n              </span>\n              <span className=\"mx-1\">/</span>\n              <span className=\"font-mono\">{simulationParams.iterations.toLocaleString()}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Right Section - Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {!isSimulating && (\n            <div className=\"text-sm text-muted-foreground\">Est. time: {getEstimatedTime()}</div>\n          )}\n\n          <div className=\"flex items-center space-x-2\">\n            {isSimulating ? (\n              <Button variant=\"destructive\" iconName=\"Square\" onClick={onStopSimulation}>\n                Stop Simulation\n              </Button>\n            ) : (\n              <Button variant=\"default\" iconName=\"Play\" onClick={handleRunSimulation}>\n                Run Simulation\n              </Button>\n            )}\n\n            <Button\n              variant=\"outline\"\n              iconName=\"RotateCcw\"\n              disabled={isSimulating}\n              title=\"Reset parameters\"\n              onClick={() =>\n                setSimulationParams({\n                  iterations: 10000,\n                  confidenceLevel: 0.95,\n                  randomSeed: 12345,\n                  method: 'monte_carlo'\n                })\n              }\n            />\n\n            <Button\n              variant=\"outline\"\n              iconName=\"Settings\"\n              disabled={isSimulating}\n              title=\"Advanced settings\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Info Bar */}\n      <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border\">\n        <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Cpu\" size={16} />\n            <span>Web Workers: 4 active</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"MemoryStick\" size={16} />\n            <span>Memory: 245MB allocated</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={16} />\n            <span>Last run: 2 min ago</span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\" size=\"sm\" iconName=\"Download\"\n            disabled={isSimulating}\n          >\n            Export Config\n          </Button>\n          <Button\n            variant=\"ghost\" size=\"sm\" iconName=\"Upload\"\n            disabled={isSimulating}\n          >\n            Import Config\n          </Button>\n          <Button\n            variant=\"ghost\" size=\"sm\" iconName=\"History\"\n            disabled={isSimulating}\n          >\n            Run History\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SimulationControlBar;\n","import React, { useState } from 'react';\n\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst StatisticalSummaryTable = ({ simulationResults, isSimulating }) => {\n  const [selectedMetric, setSelectedMetric] = useState('enterprise_value');\n  const [viewMode, setViewMode] = useState('summary');\n\n  // Get actual statistics from simulation results\n  const getStatistics = () => {\n    if (!simulationResults || simulationResults.error) {\n      return null;\n    }\n\n    const summary = simulationResults.summary;\n    return {\n      enterprise_value: {\n        descriptive: {\n          count: summary.iterations,\n          mean: summary.mean,\n          median: summary.median,\n          stdDev: summary.stdDev,\n          skewness: summary.skewness || 0,\n          kurtosis: summary.kurtosis || 0,\n          min: summary.min,\n          max: summary.max,\n          range: summary.max - summary.min,\n          method: simulationResults.method\n        },\n        percentiles: {\n          p1: summary.percentile1,\n          p5: summary.percentile5,\n          p10: simulationResults.summary.percentile10 || summary.percentile5 * 1.1,\n          p25: simulationResults.summary.percentile25 || summary.percentile5 * 1.2,\n          p50: summary.median,\n          p75: simulationResults.summary.percentile75 || summary.percentile95 * 0.8,\n          p90: simulationResults.summary.percentile90 || summary.percentile95 * 0.9,\n          p95: summary.percentile95,\n          p99: summary.percentile99\n        },\n        confidence: simulationResults.confidenceInterval,\n        convergence: simulationResults.convergence,\n        performance: simulationResults.performance,\n        quality: simulationResults.quality\n      }\n    };\n  };\n\n  // Mock statistical data\n  const mockStatistics = {\n    enterprise_value: {\n      descriptive: {\n        count: 10000,\n        mean: 2847.5,\n        median: 2823.1,\n        mode: 2798.3,\n        stdDev: 456.2,\n        variance: 208118.44,\n        skewness: 0.12,\n        kurtosis: 2.98,\n        min: 1654.3,\n        max: 4521.8,\n        range: 2867.5,\n        iqr: 615.7\n      },\n      percentiles: {\n        p1: 1876.4,\n        p5: 2156.7,\n        p10: 2287.9,\n        p25: 2534.2,\n        p50: 2823.1,\n        p75: 3149.9,\n        p90: 3456.8,\n        p95: 3687.4,\n        p99: 4123.6\n      },\n      confidence: {\n        ci90_lower: 2156.7,\n        ci90_upper: 3687.4,\n        ci95_lower: 2034.8,\n        ci95_upper: 3798.2,\n        ci99_lower: 1789.3,\n        ci99_upper: 4021.7\n      },\n      risk: {\n        var95: 1034.8,\n        var99: 1456.2,\n        cvar95: 1287.6,\n        cvar99: 1678.9,\n        probabilityOfLoss: 0.023,\n        expectedShortfall: 1456.8\n      }\n    }\n  };\n\n  const metricOptions = [\n    { value: 'enterprise_value', label: 'Enterprise Value ($M)' },\n    { value: 'equity_value', label: 'Equity Value ($M)' },\n    { value: 'share_price', label: 'Share Price ($)' },\n    { value: 'irr', label: 'Internal Rate of Return (%)' },\n    { value: 'multiple', label: 'EV/EBITDA Multiple' }\n  ];\n\n  const viewModeOptions = [\n    { value: 'summary', label: 'Summary Statistics' },\n    { value: 'percentiles', label: 'Percentile Analysis' },\n    { value: 'confidence', label: 'Confidence Intervals' },\n    { value: 'risk', label: 'Risk Metrics' }\n  ];\n\n  const actualStatistics = getStatistics();\n  const statistics = actualStatistics ? actualStatistics[selectedMetric] : mockStatistics[selectedMetric];\n\n  const formatValue = (value, metric = selectedMetric) => {\n    if (metric === 'irr') return `${(value * 100).toFixed(2)}%`;\n    if (metric === 'multiple') return `${value.toFixed(2)}x`;\n    if (metric === 'share_price') return `$${value.toFixed(2)}`;\n    return `$${(value / 1000).toFixed(1)}B`;\n  };\n\n  const renderSummaryStatistics = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Descriptive Statistics</h3>\n        {actualStatistics && (\n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <span>Method:</span>\n            <span className=\"px-2 py-1 bg-primary/10 rounded text-primary font-medium\">\n              {statistics.descriptive.method?.replace('_', ' ').toUpperCase() || 'Monte Carlo'}\n            </span>\n            {actualStatistics.enterprise_value.quality && (\n              <span className=\"px-2 py-1 bg-green-100 text-green-700 rounded text-xs\">\n                {actualStatistics.enterprise_value.quality.efficiency} Efficiency\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Central Tendency */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Central Tendency</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Mean</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.mean)}</span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Median</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.median)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Mode</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.mode)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Dispersion */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Dispersion</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Standard Deviation</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.stdDev)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Variance</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.variance)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Range</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.range)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Shape */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Distribution Shape</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Skewness</span>\n              <span className=\"font-mono text-sm\">\n                {statistics.descriptive.skewness.toFixed(3)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Kurtosis</span>\n              <span className=\"font-mono text-sm\">\n                {statistics.descriptive.kurtosis.toFixed(3)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Extremes */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Extremes</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Minimum</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.descriptive.min)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Maximum</span>\n              <span className=\"font-mono text-sm text-success\">\n                {formatValue(statistics.descriptive.max)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPercentileAnalysis = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Percentile Analysis</h3>\n\n      <div className=\"space-y-4\">\n        {Object.entries(statistics.percentiles).map(([percentile, value]) => {\n          const pct = percentile.replace('p', '');\n          const isExtreme = pct === '1' || pct === '99';\n          const isQuartile = ['25', '50', '75'].includes(pct);\n\n          return (\n            <div\n              key={percentile}\n              className={`flex justify-between items-center p-4 rounded-lg border ${\n                isExtreme\n                  ? 'border-warning bg-warning/5'\n                  : isQuartile\n                    ? 'border-primary bg-primary/5'\n                    : 'border-border bg-muted'\n              }`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-sm font-medium\">\n                  {pct === '50' ? 'Median' : `${pct}th Percentile`}\n                </span>\n                {isQuartile && (\n                  <div className=\"px-2 py-1 bg-primary text-primary-foreground text-xs rounded\">\n                    Q{pct === '25' ? '1' : pct === '50' ? '2' : '3'}\n                  </div>\n                )}\n              </div>\n              <span className=\"font-mono text-sm font-medium\">{formatValue(value)}</span>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Interpretation</h4>\n        <div className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• 50% of outcomes fall below {formatValue(statistics.percentiles.p50)}</p>\n          <p>\n            • 90% of outcomes fall between {formatValue(statistics.percentiles.p5)} and{' '}\n            {formatValue(statistics.percentiles.p95)}\n          </p>\n          <p>• Interquartile range: {formatValue(statistics.descriptive.iqr)}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderConfidenceIntervals = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Confidence Intervals</h3>\n\n      <div className=\"space-y-4\">\n        {[\n          {\n            level: '90%',\n            lower: statistics.confidence.ci90_lower,\n            upper: statistics.confidence.ci90_upper\n          },\n          {\n            level: '95%',\n            lower: statistics.confidence.ci95_lower,\n            upper: statistics.confidence.ci95_upper\n          },\n          {\n            level: '99%',\n            lower: statistics.confidence.ci99_lower,\n            upper: statistics.confidence.ci99_upper\n          }\n        ].map(ci => (\n          <div key={ci.level} className=\"p-4 border border-border rounded-lg\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"font-medium text-foreground\">{ci.level} Confidence Interval</span>\n              <span className=\"text-sm text-muted-foreground\">\n                Width: {formatValue(ci.upper - ci.lower)}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Lower Bound</div>\n                <div className=\"font-mono text-sm font-medium text-error\">\n                  {formatValue(ci.lower)}\n                </div>\n              </div>\n              <div className=\"flex-1 mx-4\">\n                <div className=\"h-2 bg-muted rounded-full relative\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-error via-warning to-success rounded-full\" />\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Upper Bound</div>\n                <div className=\"font-mono text-sm font-medium text-success\">\n                  {formatValue(ci.upper)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderRiskMetrics = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Risk Assessment</h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Value at Risk */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Value at Risk (VaR)</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-error/10 border border-error/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">95% VaR</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.risk.var95)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-error/10 border border-error/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">99% VaR</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.risk.var99)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Conditional VaR */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Conditional VaR (CVaR)</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">95% CVaR</span>\n              <span className=\"font-mono text-sm text-warning\">\n                {formatValue(statistics.risk.cvar95)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">99% CVaR</span>\n              <span className=\"font-mono text-sm text-warning\">\n                {formatValue(statistics.risk.cvar99)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Risk Metrics */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Additional Risk Metrics</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n            <span className=\"text-sm font-medium\">Probability of Loss</span>\n            <span className=\"font-mono text-sm\">\n              {(statistics.risk.probabilityOfLoss * 100).toFixed(2)}%\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n            <span className=\"text-sm font-medium\">Expected Shortfall</span>\n            <span className=\"font-mono text-sm\">\n              {formatValue(statistics.risk.expectedShortfall)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Risk Interpretation</h4>\n        <div className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• There is a 5% chance of losing more than {formatValue(statistics.risk.var95)}</p>\n          <p>\n            • In the worst 5% of scenarios, average loss is {formatValue(statistics.risk.cvar95)}\n          </p>\n          <p>• Probability of any loss: {(statistics.risk.probabilityOfLoss * 100).toFixed(1)}%</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (isSimulating) {\n    return (\n      <div className=\"h-full flex items-center justify-center bg-card\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <div className=\"text-lg font-medium text-foreground\">Calculating Statistics...</div>\n          <div className=\"text-sm text-muted-foreground\">\n            Processing simulation results and computing risk metrics\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-card\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Statistical Analysis</h2>\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={metricOptions}\n              value={selectedMetric}\n              onChange={setSelectedMetric}\n              className=\"w-48\"\n            />\n            <Select\n              options={viewModeOptions}\n              value={viewMode}\n              onChange={setViewMode}\n              className=\"w-48\"\n            />\n            <Button variant=\"outline\" iconName=\"Download\" size=\"sm\">\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {viewMode === 'summary' && renderSummaryStatistics()}\n        {viewMode === 'percentiles' && renderPercentileAnalysis()}\n        {viewMode === 'confidence' && renderConfidenceIntervals()}\n        {viewMode === 'risk' && renderRiskMetrics()}\n      </div>\n    </div>\n  );\n};\n\nexport default StatisticalSummaryTable;\n","/**\n * Advanced Simulation Engine\n * Supports multiple sampling methods: Monte Carlo, Latin Hypercube, Sobol, Halton sequences\n */\n\nclass AdvancedSimulationEngine {\n  constructor() {\n    this.workers = [];\n    this.isRunning = false;\n    this.currentSimulation = null;\n    this.sobolSequence = null;\n    this.haltonIndices = {};\n  }\n\n  /**\n   * Run simulation with specified method\n   * @param {Object} params - Simulation parameters\n   * @param {Object} distributions - Variable distributions\n   * @param {Object} baseInputs - Base model inputs\n   * @param {Function} progressCallback - Progress update callback\n   * @returns {Promise<Object>} Simulation results\n   */\n  async runSimulation(params, distributions, baseInputs, progressCallback) {\n    const {\n      method = 'monte_carlo',\n      iterations = 10000,\n      confidenceLevel = 0.95,\n      randomSeed = null,\n      correlationMatrix = null\n    } = params;\n\n    this.isRunning = true;\n    const startTime = Date.now();\n\n    try {\n      // Initialize random seed if provided\n      if (randomSeed) {\n        this.setSeed(randomSeed);\n      }\n\n      let samples;\n      \n      // Generate samples based on method\n      switch (method) {\n        case 'latin_hypercube':\n          samples = await this.generateLatinHypercubeSamples(\n            distributions, iterations, correlationMatrix, progressCallback\n          );\n          break;\n        case 'sobol_sequence':\n          samples = await this.generateSobolSamples(\n            distributions, iterations, correlationMatrix, progressCallback\n          );\n          break;\n        case 'halton_sequence':\n          samples = await this.generateHaltonSamples(\n            distributions, iterations, correlationMatrix, progressCallback\n          );\n          break;\n        default: // monte_carlo\n          samples = await this.generateMonteCarloSamples(\n            distributions, iterations, correlationMatrix, progressCallback\n          );\n      }\n\n      // Run model evaluations\n      const results = await this.evaluateModel(samples, baseInputs, progressCallback);\n      \n      // Calculate statistics\n      const statistics = this.calculateStatistics(results, confidenceLevel);\n      \n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n\n      return {\n        method,\n        parameters: params,\n        statistics,\n        results: results.slice(0, 1000), // Limit results for memory\n        convergence: this.analyzeConvergence(results),\n        performance: {\n          executionTime,\n          iterationsPerSecond: iterations / (executionTime / 1000),\n          memoryUsed: this.estimateMemoryUsage(iterations)\n        },\n        quality: this.assessSampleQuality(samples, method),\n        completedAt: new Date()\n      };\n\n    } catch (error) {\n      this.isRunning = false;\n      throw error;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Generate Latin Hypercube Samples\n   */\n  async generateLatinHypercubeSamples(distributions, iterations, correlationMatrix, progressCallback) {\n    const variables = Object.keys(distributions);\n    const numVars = variables.length;\n    const samples = [];\n\n    // Generate Latin Hypercube design\n    const lhsMatrix = this.generateLHSMatrix(numVars, iterations);\n    \n    for (let i = 0; i < iterations; i++) {\n      const sample = {};\n      \n      variables.forEach((variable, varIndex) => {\n        const dist = distributions[variable];\n        const uniformValue = lhsMatrix[i][varIndex];\n        sample[variable] = this.inverseCDF(uniformValue, dist);\n      });\n      \n      samples.push(sample);\n      \n      // Update progress\n      if (i % Math.floor(iterations / 20) === 0 && progressCallback) {\n        progressCallback((i / iterations) * 50); // First 50% for sampling\n      }\n    }\n\n    // Apply correlation if provided\n    if (correlationMatrix) {\n      return this.applyCorrelationToSamples(samples, correlationMatrix, variables);\n    }\n\n    return samples;\n  }\n\n  /**\n   * Generate Sobol Sequence Samples\n   */\n  async generateSobolSamples(distributions, iterations, correlationMatrix, progressCallback) {\n    const variables = Object.keys(distributions);\n    const numVars = variables.length;\n    const samples = [];\n\n    // Initialize Sobol sequence\n    this.initializeSobolSequence(numVars);\n    \n    for (let i = 0; i < iterations; i++) {\n      const sample = {};\n      const sobolPoint = this.getNextSobolPoint(numVars);\n      \n      variables.forEach((variable, varIndex) => {\n        const dist = distributions[variable];\n        const uniformValue = sobolPoint[varIndex];\n        sample[variable] = this.inverseCDF(uniformValue, dist);\n      });\n      \n      samples.push(sample);\n      \n      // Update progress\n      if (i % Math.floor(iterations / 20) === 0 && progressCallback) {\n        progressCallback((i / iterations) * 50);\n      }\n    }\n\n    if (correlationMatrix) {\n      return this.applyCorrelationToSamples(samples, correlationMatrix, variables);\n    }\n\n    return samples;\n  }\n\n  /**\n   * Generate Halton Sequence Samples\n   */\n  async generateHaltonSamples(distributions, iterations, correlationMatrix, progressCallback) {\n    const variables = Object.keys(distributions);\n    const numVars = variables.length;\n    const samples = [];\n    \n    // Prime numbers for Halton sequence\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];\n    \n    for (let i = 0; i < iterations; i++) {\n      const sample = {};\n      \n      variables.forEach((variable, varIndex) => {\n        const dist = distributions[variable];\n        const prime = primes[varIndex % primes.length];\n        const uniformValue = this.haltonNumber(i + 1, prime);\n        sample[variable] = this.inverseCDF(uniformValue, dist);\n      });\n      \n      samples.push(sample);\n      \n      // Update progress\n      if (i % Math.floor(iterations / 20) === 0 && progressCallback) {\n        progressCallback((i / iterations) * 50);\n      }\n    }\n\n    if (correlationMatrix) {\n      return this.applyCorrelationToSamples(samples, correlationMatrix, variables);\n    }\n\n    return samples;\n  }\n\n  /**\n   * Generate Monte Carlo Samples (standard random sampling)\n   */\n  async generateMonteCarloSamples(distributions, iterations, correlationMatrix, progressCallback) {\n    const variables = Object.keys(distributions);\n    const samples = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const sample = {};\n      \n      variables.forEach(variable => {\n        const dist = distributions[variable];\n        sample[variable] = this.sampleFromDistribution(dist);\n      });\n      \n      samples.push(sample);\n      \n      // Update progress\n      if (i % Math.floor(iterations / 20) === 0 && progressCallback) {\n        progressCallback((i / iterations) * 50);\n      }\n    }\n\n    if (correlationMatrix) {\n      return this.applyCorrelationToSamples(samples, correlationMatrix, variables);\n    }\n\n    return samples;\n  }\n\n  /**\n   * Generate Latin Hypercube Design Matrix\n   */\n  generateLHSMatrix(numVars, iterations) {\n    const matrix = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      matrix[i] = [];\n    }\n    \n    // For each variable\n    for (let varIndex = 0; varIndex < numVars; varIndex++) {\n      // Create equally spaced intervals\n      const intervals = [];\n      for (let i = 0; i < iterations; i++) {\n        intervals.push((i + Math.random()) / iterations);\n      }\n      \n      // Shuffle the intervals\n      this.shuffleArray(intervals);\n      \n      // Assign to matrix\n      for (let i = 0; i < iterations; i++) {\n        matrix[i][varIndex] = intervals[i];\n      }\n    }\n    \n    return matrix;\n  }\n\n  /**\n   * Initialize Sobol sequence (simplified implementation)\n   */\n  initializeSobolSequence(dimensions) {\n    this.sobolSequence = {\n      dimensions,\n      index: 0,\n      direction: Array(dimensions).fill(0).map(() => Array(32).fill(0))\n    };\n    \n    // Initialize direction numbers (simplified)\n    for (let d = 0; d < dimensions; d++) {\n      this.sobolSequence.direction[d][0] = 1;\n      for (let i = 1; i < 32; i++) {\n        this.sobolSequence.direction[d][i] = this.sobolSequence.direction[d][i-1] * 2;\n      }\n    }\n  }\n\n  /**\n   * Get next point in Sobol sequence\n   */\n  getNextSobolPoint(dimensions) {\n    const point = new Array(dimensions);\n    const index = this.sobolSequence.index++;\n    \n    for (let d = 0; d < dimensions; d++) {\n      let value = 0;\n      let i = index;\n      let j = 0;\n      \n      while (i > 0) {\n        if (i & 1) {\n          value ^= this.sobolSequence.direction[d][j];\n        }\n        i >>= 1;\n        j++;\n      }\n      \n      point[d] = value / Math.pow(2, 32);\n    }\n    \n    return point;\n  }\n\n  /**\n   * Calculate Halton number\n   */\n  haltonNumber(index, base) {\n    let result = 0;\n    let fraction = 1.0 / base;\n    let i = index;\n    \n    while (i > 0) {\n      result += (i % base) * fraction;\n      i = Math.floor(i / base);\n      fraction /= base;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Inverse CDF for different distributions\n   */\n  inverseCDF(u, distribution) {\n    const { type, params } = distribution;\n    \n    switch (type) {\n      case 'normal':\n        return this.inverseNormalCDF(u, params.mean, params.std);\n      case 'lognormal':\n        const normalValue = this.inverseNormalCDF(u, params.logMean, params.logStd);\n        return Math.exp(normalValue);\n      case 'uniform':\n        return params.min + u * (params.max - params.min);\n      case 'triangular':\n        return this.inverseTriangularCDF(u, params.min, params.mode, params.max);\n      case 'beta':\n        return this.inverseBetaCDF(u, params.alpha, params.beta);\n      default:\n        throw new Error(`Unsupported distribution type: ${type}`);\n    }\n  }\n\n  /**\n   * Inverse normal CDF (Box-Muller approximation)\n   */\n  inverseNormalCDF(u, mean = 0, std = 1) {\n    // Beasley-Springer-Moro algorithm approximation\n    const a0 = 2.50662823884;\n    const a1 = -18.61500062529;\n    const a2 = 41.39119773534;\n    const a3 = -25.44106049637;\n    const b1 = -8.47351093090;\n    const b2 = 23.08336743743;\n    const b3 = -21.06224101826;\n    const b4 = 3.13082909833;\n    const c0 = -2.78718931138;\n    const c1 = -2.29796479134;\n    const c2 = 4.85014127135;\n    const c3 = 2.32121276858;\n    const d1 = 3.54388924762;\n    const d2 = 1.63706781897;\n\n    let y = u - 0.5;\n    let r, x;\n\n    if (Math.abs(y) < 0.42) {\n      r = y * y;\n      x = y * (((a3 * r + a2) * r + a1) * r + a0) / ((((b4 * r + b3) * r + b2) * r + b1) * r + 1);\n    } else {\n      r = u;\n      if (y > 0) r = 1 - u;\n      r = Math.log(-Math.log(r));\n      x = c0 + r * (c1 + r * (c2 + r * c3)) / (1 + r * (d1 + r * d2));\n      if (y < 0) x = -x;\n    }\n\n    return mean + x * std;\n  }\n\n  /**\n   * Inverse triangular CDF\n   */\n  inverseTriangularCDF(u, min, mode, max) {\n    const fc = (mode - min) / (max - min);\n    \n    if (u < fc) {\n      return min + Math.sqrt(u * (max - min) * (mode - min));\n    } else {\n      return max - Math.sqrt((1 - u) * (max - min) * (max - mode));\n    }\n  }\n\n  /**\n   * Inverse Beta CDF (approximation)\n   */\n  inverseBetaCDF(u, alpha, beta) {\n    // Simple approximation for Beta distribution\n    // In practice, would use more sophisticated algorithms\n    if (alpha === 1 && beta === 1) return u;\n    \n    // Use normal approximation for large parameters\n    if (alpha > 10 && beta > 10) {\n      const mean = alpha / (alpha + beta);\n      const variance = (alpha * beta) / ((alpha + beta) ** 2 * (alpha + beta + 1));\n      const normalValue = this.inverseNormalCDF(u, mean, Math.sqrt(variance));\n      return Math.max(0, Math.min(1, normalValue));\n    }\n    \n    // Fallback to uniform for simplicity\n    return u;\n  }\n\n  /**\n   * Sample from distribution (for Monte Carlo)\n   */\n  sampleFromDistribution(distribution) {\n    return this.inverseCDF(Math.random(), distribution);\n  }\n\n  /**\n   * Apply correlation to samples using Cholesky decomposition\n   */\n  applyCorrelationToSamples(samples, correlationMatrix, variables) {\n    const numVars = variables.length;\n    const choleskyMatrix = this.choleskyDecomposition(correlationMatrix);\n    const correlatedSamples = [];\n\n    samples.forEach(sample => {\n      // Convert to normal scores\n      const normalScores = variables.map(variable => {\n        const value = sample[variable];\n        const dist = { type: 'normal', params: { mean: 0, std: 1 } };\n        // Convert to uniform then to normal\n        const uniform = this.cdfValue(value, sample, variable);\n        return this.inverseNormalCDF(uniform, 0, 1);\n      });\n\n      // Apply Cholesky transformation\n      const correlatedNormal = this.matrixVectorMultiply(choleskyMatrix, normalScores);\n\n      // Convert back to original distributions\n      const correlatedSample = {};\n      variables.forEach((variable, index) => {\n        const uniform = this.normalCDF(correlatedNormal[index]);\n        const originalDist = this.getOriginalDistribution(variable);\n        correlatedSample[variable] = this.inverseCDF(uniform, originalDist);\n      });\n\n      correlatedSamples.push(correlatedSample);\n    });\n\n    return correlatedSamples;\n  }\n\n  /**\n   * Evaluate model for all samples\n   */\n  async evaluateModel(samples, baseInputs, progressCallback) {\n    const results = [];\n    const batchSize = 100;\n    const totalSamples = samples.length;\n\n    for (let i = 0; i < totalSamples; i += batchSize) {\n      const batch = samples.slice(i, Math.min(i + batchSize, totalSamples));\n      \n      const batchResults = batch.map(sample => {\n        // Merge sample with base inputs\n        const modelInputs = { ...baseInputs, ...sample };\n        \n        // Calculate DCF value (simplified)\n        const dcfValue = this.calculateDCFValue(modelInputs);\n        \n        return {\n          inputs: modelInputs,\n          dcfValue,\n          npv: dcfValue,\n          irr: this.calculateIRR(modelInputs),\n          paybackPeriod: this.calculatePaybackPeriod(modelInputs)\n        };\n      });\n      \n      results.push(...batchResults);\n      \n      // Update progress\n      if (progressCallback) {\n        const progress = 50 + ((i + batchSize) / totalSamples) * 50;\n        progressCallback(Math.min(progress, 100));\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Calculate DCF value (simplified model)\n   */\n  calculateDCFValue(inputs) {\n    const {\n      initialRevenue = 1000000,\n      revenueGrowthRate = 0.1,\n      ebitdaMargin = 0.25,\n      taxRate = 0.21,\n      capexPercent = 0.05,\n      workingCapitalPercent = 0.02,\n      discountRate = 0.12,\n      terminalGrowthRate = 0.03,\n      forecastYears = 5\n    } = inputs;\n\n    let fcfSum = 0;\n    let revenue = initialRevenue;\n\n    // Calculate FCF for forecast period\n    for (let year = 1; year <= forecastYears; year++) {\n      revenue *= (1 + revenueGrowthRate);\n      const ebitda = revenue * ebitdaMargin;\n      const tax = ebitda * taxRate;\n      const nopat = ebitda - tax;\n      const capex = revenue * capexPercent;\n      const workingCapital = revenue * workingCapitalPercent;\n      const fcf = nopat - capex - workingCapital;\n      \n      fcfSum += fcf / Math.pow(1 + discountRate, year);\n    }\n\n    // Terminal value\n    const terminalFCF = (revenue * ebitdaMargin * (1 - taxRate)) * (1 + terminalGrowthRate);\n    const terminalValue = terminalFCF / (discountRate - terminalGrowthRate);\n    const pvTerminalValue = terminalValue / Math.pow(1 + discountRate, forecastYears);\n\n    return fcfSum + pvTerminalValue;\n  }\n\n  /**\n   * Calculate statistics from results\n   */\n  calculateStatistics(results, confidenceLevel) {\n    const values = results.map(r => r.dcfValue).sort((a, b) => a - b);\n    const n = values.length;\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / n;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / (n - 1);\n    const stdDev = Math.sqrt(variance);\n    \n    const lowerPercentile = (1 - confidenceLevel) / 2;\n    const upperPercentile = 1 - lowerPercentile;\n    \n    return {\n      mean,\n      median: values[Math.floor(n / 2)],\n      stdDev,\n      variance,\n      min: values[0],\n      max: values[n - 1],\n      skewness: this.calculateSkewness(values, mean, stdDev),\n      kurtosis: this.calculateKurtosis(values, mean, stdDev),\n      percentiles: {\n        p1: values[Math.floor(n * 0.01)],\n        p5: values[Math.floor(n * 0.05)],\n        p10: values[Math.floor(n * 0.10)],\n        p25: values[Math.floor(n * 0.25)],\n        p75: values[Math.floor(n * 0.75)],\n        p90: values[Math.floor(n * 0.90)],\n        p95: values[Math.floor(n * 0.95)],\n        p99: values[Math.floor(n * 0.99)],\n        lowerCI: values[Math.floor(n * lowerPercentile)],\n        upperCI: values[Math.floor(n * upperPercentile)]\n      },\n      confidenceInterval: {\n        level: confidenceLevel,\n        lower: values[Math.floor(n * lowerPercentile)],\n        upper: values[Math.floor(n * upperPercentile)]\n      }\n    };\n  }\n\n  /**\n   * Analyze convergence of simulation\n   */\n  analyzeConvergence(results) {\n    const values = results.map(r => r.dcfValue);\n    const n = values.length;\n    const batchSize = Math.floor(n / 10);\n    const batchMeans = [];\n    \n    for (let i = 0; i < 10; i++) {\n      const start = i * batchSize;\n      const end = Math.min(start + batchSize, n);\n      const batch = values.slice(start, end);\n      const mean = batch.reduce((sum, val) => sum + val, 0) / batch.length;\n      batchMeans.push(mean);\n    }\n    \n    const overallMean = values.reduce((sum, val) => sum + val, 0) / n;\n    const variance = batchMeans.reduce((sum, mean) => sum + Math.pow(mean - overallMean, 2), 0) / 9;\n    const standardError = Math.sqrt(variance);\n    \n    return {\n      converged: standardError / Math.abs(overallMean) < 0.01, // 1% threshold\n      standardError,\n      relativeError: standardError / Math.abs(overallMean),\n      batchMeans\n    };\n  }\n\n  /**\n   * Assess sample quality based on method\n   */\n  assessSampleQuality(samples, method) {\n    const n = samples.length;\n    \n    switch (method) {\n      case 'latin_hypercube':\n        return {\n          method,\n          efficiency: 'High',\n          coverage: 'Excellent',\n          convergenceRate: 'O(1/n)',\n          description: 'Latin Hypercube ensures better coverage of input space'\n        };\n      case 'sobol_sequence':\n        return {\n          method,\n          efficiency: 'Very High',\n          coverage: 'Excellent',\n          convergenceRate: 'O((log n)^d/n)',\n          description: 'Sobol sequence provides excellent equidistribution'\n        };\n      case 'halton_sequence':\n        return {\n          method,\n          efficiency: 'High',\n          coverage: 'Good',\n          convergenceRate: 'O((log n)^d/n)',\n          description: 'Halton sequence offers good low-discrepancy properties'\n        };\n      default:\n        return {\n          method,\n          efficiency: 'Standard',\n          coverage: 'Good',\n          convergenceRate: 'O(1/√n)',\n          description: 'Standard Monte Carlo with random sampling'\n        };\n    }\n  }\n\n  /**\n   * Utility functions\n   */\n  setSeed(seed) {\n    // Simple linear congruential generator for reproducible results\n    this.rng = {\n      seed: seed % 2147483647,\n      next() {\n        this.seed = (this.seed * 16807) % 2147483647;\n        return (this.seed - 1) / 2147483646;\n      }\n    };\n    \n    // Override Math.random temporarily\n    const originalRandom = Math.random;\n    Math.random = () => this.rng.next();\n    \n    // Restore after use\n    setTimeout(() => {\n      Math.random = originalRandom;\n    }, 100);\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  choleskyDecomposition(matrix) {\n    const n = matrix.length;\n    const L = Array(n).fill(0).map(() => Array(n).fill(0));\n    \n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j <= i; j++) {\n        if (i === j) {\n          let sum = 0;\n          for (let k = 0; k < j; k++) {\n            sum += L[j][k] * L[j][k];\n          }\n          L[j][j] = Math.sqrt(matrix[j][j] - sum);\n        } else {\n          let sum = 0;\n          for (let k = 0; k < j; k++) {\n            sum += L[i][k] * L[j][k];\n          }\n          L[i][j] = (matrix[i][j] - sum) / L[j][j];\n        }\n      }\n    }\n    \n    return L;\n  }\n\n  matrixVectorMultiply(matrix, vector) {\n    return matrix.map(row => \n      row.reduce((sum, val, index) => sum + val * vector[index], 0)\n    );\n  }\n\n  normalCDF(x) {\n    return 0.5 * (1 + this.erf(x / Math.sqrt(2)));\n  }\n\n  erf(x) {\n    // Abramowitz and Stegun approximation\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n\n    const sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n\n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n    return sign * y;\n  }\n\n  calculateSkewness(values, mean, stdDev) {\n    const n = values.length;\n    const sum = values.reduce((acc, val) => acc + Math.pow((val - mean) / stdDev, 3), 0);\n    return (n / ((n - 1) * (n - 2))) * sum;\n  }\n\n  calculateKurtosis(values, mean, stdDev) {\n    const n = values.length;\n    const sum = values.reduce((acc, val) => acc + Math.pow((val - mean) / stdDev, 4), 0);\n    return ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * sum - (3 * (n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n  }\n\n  calculateIRR(inputs) {\n    // Simplified IRR calculation\n    return inputs.discountRate + 0.02; // Placeholder\n  }\n\n  calculatePaybackPeriod(inputs) {\n    // Simplified payback calculation\n    return 5.5; // Placeholder\n  }\n\n  estimateMemoryUsage(iterations) {\n    return Math.round((iterations * 200) / 1024 / 1024); // MB estimate\n  }\n\n  cdfValue(value, sample, variable) {\n    // Simplified CDF calculation\n    return 0.5; // Placeholder\n  }\n\n  getOriginalDistribution(variable) {\n    // Return default distribution\n    return { type: 'normal', params: { mean: 0, std: 1 } };\n  }\n\n  stopSimulation() {\n    this.isRunning = false;\n    this.currentSimulation = null;\n  }\n}\n\nexport default AdvancedSimulationEngine;","import React, { useState, useEffect } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport SEOHead from '../../components/SEO/SEOHead';\nimport Breadcrumbs from '../../components/ui/Breadcrumbs';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport ResultsVisualizationPanel from './components/ResultsVisualizationPanel';\nimport ScenarioConfigPanel from './components/ScenarioConfigPanel';\nimport SimulationControlBar from './components/SimulationControlBar';\nimport StatisticalSummaryTable from './components/StatisticalSummaryTable';\nimport AdvancedSimulationEngine from '../../services/advancedSimulationEngine';\n\nconst ScenarioAnalysisSensitivityTools = () => {\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [simulationProgress, setSimulationProgress] = useState(0);\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [scenarios, setScenarios] = useState([]);\n  const [rightPanelView, setRightPanelView] = useState('visualization');\n  const [modelSyncStatus, setModelSyncStatus] = useState({\n    connected: true,\n    lastSync: new Date(Date.now() - 120000), // 2 minutes ago\n    baseModel: 'DCF_Analysis_v2.3'\n  });\n  const [simulationEngine] = useState(() => new AdvancedSimulationEngine());\n\n  // Run advanced simulation with selected method\n  const runSimulation = async params => {\n    setIsSimulating(true);\n    setSimulationProgress(0);\n    setSimulationResults(null);\n\n    try {\n      // Define sample distributions for DCF variables\n      const distributions = {\n        initialRevenue: {\n          type: 'normal',\n          params: { mean: 1000000, std: 150000 }\n        },\n        revenueGrowthRate: {\n          type: 'triangular',\n          params: { min: 0.05, mode: 0.12, max: 0.25 }\n        },\n        ebitdaMargin: {\n          type: 'triangular',\n          params: { min: 0.15, mode: 0.25, max: 0.35 }\n        },\n        discountRate: {\n          type: 'triangular',\n          params: { min: 0.08, mode: 0.12, max: 0.18 }\n        },\n        terminalGrowthRate: {\n          type: 'triangular',\n          params: { min: 0.02, mode: 0.03, max: 0.05 }\n        }\n      };\n\n      // Base DCF inputs\n      const baseInputs = {\n        taxRate: 0.21,\n        capexPercent: 0.05,\n        workingCapitalPercent: 0.02,\n        forecastYears: 5\n      };\n\n      // Progress callback\n      const progressCallback = (progress) => {\n        setSimulationProgress(progress);\n      };\n\n      // Run the simulation\n      const results = await simulationEngine.runSimulation(\n        params,\n        distributions,\n        baseInputs,\n        progressCallback\n      );\n\n      // Format results for display\n      const formattedResults = {\n        method: results.method,\n        summary: {\n          mean: results.statistics.mean,\n          median: results.statistics.median,\n          stdDev: results.statistics.stdDev,\n          min: results.statistics.min,\n          max: results.statistics.max,\n          percentile5: results.statistics.percentiles.p5,\n          percentile95: results.statistics.percentiles.p95,\n          percentile1: results.statistics.percentiles.p1,\n          percentile99: results.statistics.percentiles.p99,\n          iterations: params.iterations,\n          skewness: results.statistics.skewness,\n          kurtosis: results.statistics.kurtosis\n        },\n        confidenceInterval: results.statistics.confidenceInterval,\n        convergence: results.convergence,\n        performance: results.performance,\n        quality: results.quality,\n        completedAt: results.completedAt,\n        parameters: params,\n        rawResults: results.results.slice(0, 100) // Sample for visualization\n      };\n\n      setSimulationResults(formattedResults);\n      setSimulationProgress(100);\n      \n    } catch (error) {\n      console.error('Simulation failed:', error);\n      setSimulationResults({\n        error: true,\n        message: error.message,\n        parameters: params\n      });\n    } finally {\n      setIsSimulating(false);\n    }\n  };\n\n  const stopSimulation = () => {\n    simulationEngine.stopSimulation();\n    setIsSimulating(false);\n    setSimulationProgress(0);\n  };\n\n  const handleScenarioUpdate = updatedScenarios => {\n    setScenarios(updatedScenarios);\n  };\n\n  const rightPanelViews = [\n    { id: 'visualization', label: 'Charts', icon: 'BarChart3' },\n    { id: 'statistics', label: 'Statistics', icon: 'Calculator' }\n  ];\n\n  useEffect(() => {\n    // Simulate model sync status updates\n    const syncInterval = setInterval(() => {\n      setModelSyncStatus(prev => ({\n        ...prev,\n        lastSync: new Date()\n      }));\n    }, 60000); // Update every minute\n\n    return () => clearInterval(syncInterval);\n  }, []);\n\n  const formatTimeAgo = date => {\n    const seconds = Math.floor((new Date() - date) / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <SEOHead\n        title=\"Scenario Analysis & Sensitivity Tools | Valor-IVX\"\n        description=\"Run Monte Carlo simulations, sensitivity analysis, and visualize statistical outcomes for robust financial decision-making.\"\n        canonical=\"/scenario-analysis-sensitivity-tools\"\n      />\n      <Header />\n\n      <div className=\"pt-[60px] h-screen flex flex-col\">\n        {/* Breadcrumbs and accessible page heading */}\n        <div className=\"px-6 py-2 bg-background border-b border-border\">\n          <h1 className=\"sr-only\">Scenario Analysis & Sensitivity Tools</h1>\n          <Breadcrumbs />\n        </div>\n        {/* Simulation Control Bar */}\n        <SimulationControlBar\n          onRunSimulation={runSimulation}\n          isSimulating={isSimulating}\n          progress={simulationProgress}\n          onStopSimulation={stopSimulation}\n        />\n\n        {/* Model Sync Status Bar */}\n        <div className=\"bg-muted/50 border-b border-border px-6 py-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-2 h-2 rounded-full ${modelSyncStatus.connected ? 'bg-success' : 'bg-error'}`}\n                />\n                <span className=\"text-sm text-muted-foreground\">\n                  Base Model: {modelSyncStatus.baseModel}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"RefreshCw\" size={14} className=\"text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  Last sync: {formatTimeAgo(modelSyncStatus.lastSync)}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Users\" size={14} className=\"text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">3 collaborators active</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\" size=\"sm\" iconName=\"Sync\"\n                disabled={isSimulating}\n              >\n                Sync Now\n              </Button>\n              <Button\n                variant=\"ghost\" size=\"sm\" iconName=\"History\"\n                disabled={isSimulating}\n              >\n                Version History\n              </Button>\n              <Button\n                variant=\"ghost\" size=\"sm\" iconName=\"Share2\"\n                disabled={isSimulating}\n              >\n                Share Analysis\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel - Scenario Configuration (40%) */}\n          <div className=\"w-2/5 min-w-[480px]\">\n            <ScenarioConfigPanel\n              onScenarioUpdate={handleScenarioUpdate}\n              isSimulating={isSimulating}\n            />\n          </div>\n\n          {/* Right Panel - Results (60%) */}\n          <div className=\"flex-1 flex flex-col\">\n            {/* Right Panel Header */}\n            <div className=\"bg-card border-b border-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-1\">\n                  {rightPanelViews.map(view => (\n                    <button\n                      key={view.id}\n                      onClick={() => setRightPanelView(view.id)}\n                      className={`flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-lg transition-smooth ${\n                        rightPanelView === view.id\n                          ? 'bg-primary text-primary-foreground'\n                          : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                      }`}\n                      disabled={isSimulating}\n                    >\n                      <Icon name={view.icon} size={16} />\n                      <span>{view.label}</span>\n                    </button>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  {simulationResults && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      Completed: {simulationResults.completedAt.toLocaleTimeString()}\n                    </div>\n                  )}\n                  <Button\n                    variant=\"ghost\" size=\"sm\" iconName=\"Maximize2\"\n                    title=\"Fullscreen view\"\n                  />\n                  <Button\n                    variant=\"ghost\" size=\"sm\" iconName=\"Settings\"\n                    title=\"Display settings\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Right Panel Content */}\n            <div className=\"flex-1 overflow-hidden\">\n              {rightPanelView === 'visualization' ? (\n                <ResultsVisualizationPanel\n                  simulationResults={simulationResults}\n                  isSimulating={isSimulating}\n                />\n              ) : (\n                <StatisticalSummaryTable\n                  simulationResults={simulationResults}\n                  isSimulating={isSimulating}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Status Bar */}\n        <div className=\"bg-muted/30 border-t border-border px-6 py-2\">\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-6\">\n              <span>Scenarios: {scenarios.length}</span>\n              <span>Variables: 4 active</span>\n              <span>Correlations: 3 defined</span>\n              {simulationResults && (\n                <span>Iterations: {simulationResults.summary.iterations.toLocaleString()}</span>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <span>© {new Date().getFullYear()} Valor-IVX</span>\n              <span>•</span>\n              <span>SOX Compliant</span>\n              <span>•</span>\n              <span>Audit Trail: Enabled</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScenarioAnalysisSensitivityTools;\n"],"names":["ResultsVisualizationPanel","simulationResults","isSimulating","activeChart","setActiveChart","useState","selectedMetric","setSelectedMetric","mockResults","summary","mean","median","stdDev","percentile5","percentile95","iterations","distribution","Array","from","length","_","i","value","frequency","Math","max","round","exp","pow","tornado","variable","impact","direction","scatter","revenueGrowth","random","enterpriseValue","timeSeries","iteration","sin","confidence95","confidence5","results","metricOptions","label","jsxs","className","children","jsx","Select","options","onChange","disabled","Button","variant","iconName","icon","map","chart","onClick","Icon","name","size","toFixed","toLocaleString","Fragment","ResponsiveContainer","width","height","BarChart","data","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","tickFormatter","YAxis","Tooltip","formatter","labelFormatter","contentStyle","backgroundColor","border","borderRadius","Bar","fill","radius","layout","margin","left","type","abs","entry","ScatterChart","Scatter","fillOpacity","AreaChart","Area","Line","strokeWidth","dot","ScenarioConfigPanel","onScenarioUpdate","activeTab","setActiveTab","scenarios","setScenarios","id","probability","variables","marginExpansion","capexRatio","terminalGrowth","selectedScenario","setSelectedScenario","correlationMatrix","setCorrelationMatrix","var1","var2","correlation","distributionTypes","handleVariableChange","variableName","updatedScenario","parseFloat","updatedScenarios","s","tab","newScenario","scenario","Input","e","target","placeholder","description","keys","replace","trim","index","updatedMatrix","c","min","step","template","SimulationControlBar","onRunSimulation","progress","onStopSimulation","simulationParams","setSimulationParams","confidenceLevel","randomSeed","method","prev","parseInt","floor","title","style","baseTime","ceil","getEstimatedTime","StatisticalSummaryTable","viewMode","setViewMode","actualStatistics","error","enterprise_value","descriptive","count","skewness","kurtosis","range","percentiles","p1","percentile1","p5","p10","percentile10","p25","percentile25","p50","p75","percentile75","p90","percentile90","p95","p99","percentile99","confidence","confidenceInterval","convergence","performance","quality","getStatistics","statistics","mode","variance","iqr","ci90_lower","ci90_upper","ci95_lower","ci95_upper","ci99_lower","ci99_upper","risk","var95","var99","cvar95","cvar99","probabilityOfLoss","expectedShortfall","formatValue","metric","toUpperCase","efficiency","entries","percentile","pct","isExtreme","isQuartile","includes","level","lower","upper","ci","AdvancedSimulationEngine","constructor","this","workers","isRunning","currentSimulation","sobolSequence","haltonIndices","runSimulation","params","distributions","baseInputs","progressCallback","startTime","Date","now","samples","setSeed","generateLatinHypercubeSamples","generateSobolSamples","generateHaltonSamples","generateMonteCarloSamples","evaluateModel","calculateStatistics","executionTime","parameters","slice","analyzeConvergence","iterationsPerSecond","memoryUsed","estimateMemoryUsage","assessSampleQuality","completedAt","Object","numVars","lhsMatrix","generateLHSMatrix","sample","forEach","varIndex","dist","uniformValue","inverseCDF","push","applyCorrelationToSamples","initializeSobolSequence","sobolPoint","getNextSobolPoint","primes","prime","haltonNumber","sampleFromDistribution","matrix","intervals","shuffleArray","dimensions","d","point","j","base","result","fraction","u","inverseNormalCDF","std","normalValue","logMean","logStd","inverseTriangularCDF","inverseBetaCDF","alpha","beta","Error","r","x","y","log","sqrt","choleskyMatrix","choleskyDecomposition","correlatedSamples","normalScores","uniform","cdfValue","correlatedNormal","matrixVectorMultiply","correlatedSample","normalCDF","originalDist","getOriginalDistribution","totalSamples","batchResults","modelInputs","dcfValue","calculateDCFValue","inputs","npv","irr","calculateIRR","paybackPeriod","calculatePaybackPeriod","initialRevenue","revenueGrowthRate","ebitdaMargin","taxRate","capexPercent","workingCapitalPercent","discountRate","terminalGrowthRate","forecastYears","fcfSum","revenue","year","ebitda","values","sort","a","b","n","reduce","sum","val","lowerPercentile","upperPercentile","calculateSkewness","calculateKurtosis","lowerCI","upperCI","batchSize","batchMeans","start","end","batch","overallMean","standardError","converged","relativeError","coverage","convergenceRate","seed","rng","next","originalRandom","setTimeout","array","L","k","vector","row","erf","sign","t","acc","stopSimulation","ScenarioAnalysisSensitivityTools","setIsSimulating","simulationProgress","setSimulationProgress","setSimulationResults","rightPanelView","setRightPanelView","modelSyncStatus","setModelSyncStatus","connected","lastSync","baseModel","simulationEngine","useEffect","syncInterval","setInterval","clearInterval","SEOHead","canonical","Header","Breadcrumbs","async","formattedResults","rawResults","message","date","seconds","minutes","formatTimeAgo","view","toLocaleTimeString","getFullYear"],"mappings":"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"}
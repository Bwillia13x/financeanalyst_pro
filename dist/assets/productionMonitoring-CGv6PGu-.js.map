{"version":3,"file":"productionMonitoring-CGv6PGu-.js","sources":["../../src/services/productionMonitoring.js"],"sourcesContent":["/**\n * Production Monitoring and Error Tracking Service\n * Comprehensive monitoring solution for production deployment\n */\n\nclass ProductionMonitoring {\n  constructor() {\n    this.isInitialized = false;\n    this.userId = null;\n    this.sessionId = this.generateSessionId();\n    this.startTime = Date.now();\n    this.errorQueue = [];\n    this.performanceQueue = [];\n    this.userActivityQueue = [];\n\n    // Check if we're in an automated test environment\n    const isAutomatedEnv = this.detectAutomatedEnvironment();\n\n    // Only initialize if not in automated test environment\n    if (!isAutomatedEnv) {\n      this.init();\n    }\n  }\n\n  detectAutomatedEnvironment() {\n    try {\n      return (\n        (typeof navigator !== 'undefined' && navigator.webdriver === true) ||\n        (typeof window !== 'undefined' && window.location &&\n          new URLSearchParams(window.location.search).has('lhci')) ||\n        (typeof window !== 'undefined' && window.location &&\n          new URLSearchParams(window.location.search).has('ci')) ||\n        (typeof window !== 'undefined' && window.location &&\n          new URLSearchParams(window.location.search).has('audit'))\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  init() {\n    if (this.isInitialized) return;\n\n    try {\n      // Initialize Sentry if available\n      this.initSentry();\n\n      // Setup error listeners\n      this.setupErrorListeners();\n\n      // Setup performance monitoring\n      this.setupPerformanceMonitoring();\n\n      // Setup user activity tracking\n      this.setupUserActivityTracking();\n\n      // Setup periodic health checks\n      this.setupHealthChecks();\n\n      this.isInitialized = true;\n      console.log('ðŸš€ Production monitoring initialized');\n\n    } catch (error) {\n      console.warn('Failed to initialize monitoring:', error);\n    }\n  }\n\n  initSentry() {\n    if (typeof window !== 'undefined' && window.Sentry) {\n      window.Sentry.init({\n        dsn: process.env.VITE_SENTRY_DSN,\n        environment: process.env.VITE_APP_ENV || 'development',\n        tracesSampleRate: 0.1,\n        beforeSend: (event, _hint) => {\n          // Filter out known non-critical errors\n          const ignoredErrors = [\n            'ResizeObserver loop limit exceeded',\n            'Non-Error promise rejection captured',\n            'Network request failed'\n          ];\n\n          if (ignoredErrors.some(ignored =>\n            event.exception?.values?.[0]?.value?.includes(ignored)\n          )) {\n            return null;\n          }\n\n          return event;\n        }\n      });\n\n      // Set user context if available\n      if (this.userId) {\n        window.Sentry.setUser({ id: this.userId });\n      }\n    }\n  }\n\n  setupErrorListeners() {\n    // Global error handler\n    window.addEventListener('error', (event) => {\n      this.logError({\n        type: 'javascript',\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: event.error?.stack,\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Promise rejection handler\n    window.addEventListener('unhandledrejection', (event) => {\n      this.logError({\n        type: 'promise',\n        message: event.reason?.message || 'Unhandled promise rejection',\n        stack: event.reason?.stack,\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Resource loading errors\n    window.addEventListener('error', (event) => {\n      if (event.target !== window) {\n        this.logError({\n          type: 'resource',\n          message: `Failed to load ${event.target.tagName}: ${event.target.src || event.target.href}`,\n          element: event.target.tagName,\n          source: event.target.src || event.target.href,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }, true);\n  }\n\n  setupPerformanceMonitoring() {\n    // Web Vitals\n    if ('PerformanceObserver' in window) {\n      // Cumulative Layout Shift\n      new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          if (!entry.hadRecentInput) {\n            this.logPerformance({\n              metric: 'CLS',\n              value: entry.value,\n              timestamp: new Date().toISOString()\n            });\n          }\n        }\n      }).observe({ entryTypes: ['layout-shift'] });\n\n      // Largest Contentful Paint\n      new PerformanceObserver((entryList) => {\n        const entries = entryList.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        this.logPerformance({\n          metric: 'LCP',\n          value: lastEntry.startTime,\n          timestamp: new Date().toISOString()\n        });\n      }).observe({ entryTypes: ['largest-contentful-paint'] });\n\n      // First Input Delay\n      new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          this.logPerformance({\n            metric: 'FID',\n            value: entry.processingStart - entry.startTime,\n            timestamp: new Date().toISOString()\n          });\n        }\n      }).observe({ entryTypes: ['first-input'] });\n    }\n\n    // Page load metrics\n    window.addEventListener('load', () => {\n      setTimeout(() => {\n        const navigation = performance.getEntriesByType('navigation')[0];\n        const paint = performance.getEntriesByType('paint');\n\n        this.logPerformance({\n          metric: 'page_load',\n          domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n          loadComplete: navigation.loadEventEnd - navigation.loadEventStart,\n          firstPaint: paint.find(p => p.name === 'first-paint')?.startTime,\n          firstContentfulPaint: paint.find(p => p.name === 'first-contentful-paint')?.startTime,\n          timestamp: new Date().toISOString()\n        });\n      }, 0);\n    });\n  }\n\n  setupUserActivityTracking() {\n    let lastActivity = Date.now();\n    let isActive = true;\n\n    const trackActivity = () => {\n      lastActivity = Date.now();\n      if (!isActive) {\n        isActive = true;\n        this.logUserActivity({\n          type: 'session_resume',\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n\n    // Track user interactions\n    ['click', 'scroll', 'keypress', 'mousemove'].forEach(event => {\n      document.addEventListener(event, trackActivity, { passive: true });\n    });\n\n    // Check for inactivity\n    setInterval(() => {\n      if (Date.now() - lastActivity > 300000 && isActive) { // 5 minutes\n        isActive = false;\n        this.logUserActivity({\n          type: 'session_idle',\n          duration: Date.now() - lastActivity,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }, 60000); // Check every minute\n\n    // Track page visibility\n    document.addEventListener('visibilitychange', () => {\n      this.logUserActivity({\n        type: document.hidden ? 'page_hidden' : 'page_visible',\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Track page unload\n    window.addEventListener('beforeunload', () => {\n      this.logUserActivity({\n        type: 'page_unload',\n        sessionDuration: Date.now() - this.startTime,\n        timestamp: new Date().toISOString()\n      });\n      this.flush(); // Send queued data\n    });\n  }\n\n  setupHealthChecks() {\n    // Periodic health check\n    setInterval(() => {\n      this.logHealthCheck({\n        memoryUsage: this.getMemoryUsage(),\n        connectionType: this.getConnectionType(),\n        timestamp: new Date().toISOString()\n      });\n    }, 300000); // Every 5 minutes\n  }\n\n  // Public API methods\n  logError(errorData) {\n    const enhancedError = {\n      ...errorData,\n      sessionId: this.sessionId,\n      userId: this.userId,\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      timestamp: errorData.timestamp || new Date().toISOString()\n    };\n\n    this.errorQueue.push(enhancedError);\n\n    // Send to Sentry if available\n    if (window.Sentry) {\n      window.Sentry.captureException(new Error(errorData.message), {\n        extra: enhancedError\n      });\n    }\n\n    // Flush if queue is getting large\n    if (this.errorQueue.length >= 10) {\n      this.flushErrors();\n    }\n  }\n\n  logPerformance(performanceData) {\n    const enhancedData = {\n      ...performanceData,\n      sessionId: this.sessionId,\n      userId: this.userId,\n      url: window.location.href\n    };\n\n    this.performanceQueue.push(enhancedData);\n\n    // Flush periodically\n    if (this.performanceQueue.length >= 20) {\n      this.flushPerformance();\n    }\n  }\n\n  logUserActivity(activityData) {\n    const enhancedData = {\n      ...activityData,\n      sessionId: this.sessionId,\n      userId: this.userId,\n      url: window.location.href\n    };\n\n    this.userActivityQueue.push(enhancedData);\n\n    // Flush periodically\n    if (this.userActivityQueue.length >= 50) {\n      this.flushUserActivity();\n    }\n  }\n\n  logHealthCheck(healthData) {\n    this.sendToEndpoint('/api/health', {\n      ...healthData,\n      sessionId: this.sessionId,\n      userId: this.userId\n    });\n  }\n\n  // Set user context\n  setUser(userId, userData = {}) {\n    this.userId = userId;\n\n    if (window.Sentry) {\n      window.Sentry.setUser({ id: userId, ...userData });\n    }\n  }\n\n  // Flush methods\n  flushErrors() {\n    if (this.errorQueue.length > 0) {\n      this.sendToEndpoint('/api/errors', this.errorQueue);\n      this.errorQueue = [];\n    }\n  }\n\n  flushPerformance() {\n    if (this.performanceQueue.length > 0) {\n      this.sendToEndpoint('/api/performance', this.performanceQueue);\n      this.performanceQueue = [];\n    }\n  }\n\n  flushUserActivity() {\n    if (this.userActivityQueue.length > 0) {\n      this.sendToEndpoint('/api/user-activity', this.userActivityQueue);\n      this.userActivityQueue = [];\n    }\n  }\n\n  flush() {\n    this.flushErrors();\n    this.flushPerformance();\n    this.flushUserActivity();\n  }\n\n  // Utility methods\n  generateSessionId() {\n    return `session-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  getMemoryUsage() {\n    if ('memory' in performance) {\n      return {\n        usedJSHeapSize: performance.memory.usedJSHeapSize,\n        totalJSHeapSize: performance.memory.totalJSHeapSize,\n        jsHeapSizeLimit: performance.memory.jsHeapSizeLimit\n      };\n    }\n    return null;\n  }\n\n  getConnectionType() {\n    if ('connection' in navigator) {\n      return {\n        effectiveType: navigator.connection.effectiveType,\n        downlink: navigator.connection.downlink,\n        rtt: navigator.connection.rtt\n      };\n    }\n    return null;\n  }\n\n  async sendToEndpoint(endpoint, data) {\n    try {\n      await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n    } catch (error) {\n      console.warn(`Failed to send data to ${endpoint}:`, error);\n    }\n  }\n\n  // React Error Boundary integration\n  captureErrorBoundary(error, errorInfo, errorId) {\n    this.logError({\n      type: 'react_error_boundary',\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      errorId,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Feature flag tracking\n  trackFeatureUsage(featureName, context = {}) {\n    this.logUserActivity({\n      type: 'feature_usage',\n      feature: featureName,\n      context,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Performance mark for custom metrics\n  mark(name) {\n    if ('performance' in window && 'mark' in performance) {\n      performance.mark(name);\n    }\n  }\n\n  measure(name, startMark, endMark) {\n    if ('performance' in window && 'measure' in performance) {\n      try {\n        performance.measure(name, startMark, endMark);\n        const measure = performance.getEntriesByName(name, 'measure')[0];\n\n        this.logPerformance({\n          metric: 'custom_measure',\n          name,\n          duration: measure.duration,\n          timestamp: new Date().toISOString()\n        });\n      } catch (error) {\n        console.warn('Failed to measure performance:', error);\n      }\n    }\n  }\n}\n\n// Create singleton instance\nconst productionMonitoring = new ProductionMonitoring();\n\nexport default productionMonitoring;\n"],"names":["productionMonitoring","constructor","this","isInitialized","userId","sessionId","generateSessionId","startTime","Date","now","errorQueue","performanceQueue","userActivityQueue","detectAutomatedEnvironment","init","navigator","webdriver","window","location","URLSearchParams","search","has","initSentry","setupErrorListeners","setupPerformanceMonitoring","setupUserActivityTracking","setupHealthChecks","error","Sentry","dsn","define_process_env_default","VITE_SENTRY_DSN","environment","VITE_APP_ENV","tracesSampleRate","beforeSend","event","_hint","some","ignored","exception","values","value","includes","setUser","id","addEventListener","logError","type","message","filename","lineno","colno","stack","timestamp","toISOString","reason","target","tagName","src","href","element","source","PerformanceObserver","entryList","entry","getEntries","hadRecentInput","logPerformance","metric","observe","entryTypes","entries","lastEntry","length","processingStart","setTimeout","navigation","performance","getEntriesByType","paint","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","loadComplete","loadEventEnd","loadEventStart","firstPaint","find","p","name","firstContentfulPaint","lastActivity","isActive","trackActivity","logUserActivity","forEach","document","passive","setInterval","duration","hidden","sessionDuration","flush","logHealthCheck","memoryUsage","getMemoryUsage","connectionType","getConnectionType","errorData","enhancedError","url","userAgent","push","captureException","Error","extra","flushErrors","performanceData","enhancedData","flushPerformance","activityData","flushUserActivity","healthData","sendToEndpoint","userData","Math","random","toString","substring","usedJSHeapSize","memory","totalJSHeapSize","jsHeapSizeLimit","effectiveType","connection","downlink","rtt","endpoint","data","fetch","method","headers","body","JSON","stringify","captureErrorBoundary","errorInfo","errorId","componentStack","trackFeatureUsage","featureName","context","feature","mark","measure","startMark","endMark","getEntriesByName"],"mappings":"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"}
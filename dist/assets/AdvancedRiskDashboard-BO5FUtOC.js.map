{"version":3,"file":"AdvancedRiskDashboard-BO5FUtOC.js","sources":["../../src/services/riskManagementEngine.js","../../src/components/RiskManagement/AdvancedRiskDashboard.jsx"],"sourcesContent":["/**\n * Advanced Risk Management Engine\n * VaR, stress testing, portfolio risk analytics, and regulatory risk measures\n */\n\nclass RiskManagementEngine {\n  constructor() {\n    this.historicalData = new Map();\n    this.correlationMatrix = new Map();\n    this.riskModels = new Map();\n    this.stressScenarios = new Map();\n  }\n\n  /**\n   * Value at Risk (VaR) Calculations\n   */\n\n  // Historical VaR using historical simulation\n  calculateHistoricalVaR(returns, confidenceLevel = 0.95, holdingPeriod = 1) {\n    if (!returns || returns.length === 0) {\n      throw new Error('No return data provided');\n    }\n\n    const sortedReturns = [...returns].sort((a, b) => a - b);\n    const percentileIndex = Math.floor((1 - confidenceLevel) * sortedReturns.length);\n    const var_ = -sortedReturns[percentileIndex];\n\n    // Scale for holding period\n    const scaledVaR = var_ * Math.sqrt(holdingPeriod);\n\n    // Calculate Expected Shortfall (Conditional VaR)\n    const tailReturns = sortedReturns.slice(0, percentileIndex + 1);\n    const expectedShortfall = -tailReturns.reduce((sum, ret) => sum + ret, 0) / tailReturns.length;\n\n    return {\n      var: scaledVaR,\n      expectedShortfall: expectedShortfall * Math.sqrt(holdingPeriod),\n      confidenceLevel,\n      holdingPeriod,\n      worstReturn: -sortedReturns[0],\n      percentileReturn: -sortedReturns[percentileIndex],\n      sampleSize: returns.length,\n      method: 'Historical Simulation'\n    };\n  }\n\n  // Parametric VaR using normal distribution\n  calculateParametricVaR(mean, volatility, confidenceLevel = 0.95, holdingPeriod = 1) {\n    const zScore = this.getZScore(confidenceLevel);\n    const var_ = -(mean * holdingPeriod - zScore * volatility * Math.sqrt(holdingPeriod));\n    \n    // Expected Shortfall for normal distribution\n    const phi = this.normalPDF(zScore);\n    const expectedShortfall = -(mean * holdingPeriod) + (volatility * Math.sqrt(holdingPeriod) * phi) / (1 - confidenceLevel);\n\n    return {\n      var: var_,\n      expectedShortfall,\n      confidenceLevel,\n      holdingPeriod,\n      mean,\n      volatility,\n      zScore,\n      method: 'Parametric (Normal)'\n    };\n  }\n\n  // Monte Carlo VaR\n  calculateMonteCarloVaR(mean, volatility, confidenceLevel = 0.95, holdingPeriod = 1, simulations = 10000) {\n    const returns = [];\n    \n    for (let i = 0; i < simulations; i++) {\n      const randomReturns = this.generateRandomPath(mean, volatility, holdingPeriod);\n      const totalReturn = randomReturns.reduce((sum, ret) => sum + ret, 0);\n      returns.push(totalReturn);\n    }\n\n    return this.calculateHistoricalVaR(returns, confidenceLevel, 1);\n  }\n\n  /**\n   * Portfolio Risk Analytics\n   */\n\n  calculatePortfolioRisk(positions, covarianceMatrix, confidenceLevel = 0.95) {\n    const weights = positions.map(pos => pos.weight);\n    const expectedReturns = positions.map(pos => pos.expectedReturn);\n    \n    // Portfolio expected return\n    const portfolioReturn = weights.reduce((sum, weight, i) => sum + weight * expectedReturns[i], 0);\n    \n    // Portfolio variance using matrix multiplication: w^T * Î£ * w\n    let portfolioVariance = 0;\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights.length; j++) {\n        portfolioVariance += weights[i] * weights[j] * covarianceMatrix[i][j];\n      }\n    }\n    \n    const portfolioVolatility = Math.sqrt(portfolioVariance);\n    \n    // Component VaR - marginal contribution to portfolio risk\n    const componentVaR = weights.map((weight, i) => {\n      let marginalVaR = 0;\n      for (let j = 0; j < weights.length; j++) {\n        marginalVaR += weights[j] * covarianceMatrix[i][j];\n      }\n      return (weight * marginalVaR) / portfolioVariance;\n    });\n\n    // Risk attribution\n    const totalMarketValue = positions.reduce((sum, pos) => sum + pos.marketValue, 0);\n    const riskContribution = positions.map((pos, i) => ({\n      asset: pos.symbol,\n      weight: pos.weight,\n      marketValue: pos.marketValue,\n      componentVaR: componentVaR[i],\n      percentageContribution: (componentVaR[i] / portfolioVariance) * 100,\n      marginalVaR: this.calculateMarginalVaR(positions, covarianceMatrix, i),\n      beta: this.calculatePortfolioBeta(positions, covarianceMatrix, i)\n    }));\n\n    const portfolioVaR = this.calculateParametricVaR(portfolioReturn, portfolioVolatility, confidenceLevel);\n    \n    return {\n      portfolioMetrics: {\n        expectedReturn: portfolioReturn,\n        volatility: portfolioVolatility,\n        sharpeRatio: portfolioReturn / portfolioVolatility,\n        ...portfolioVaR\n      },\n      riskContribution,\n      diversificationRatio: this.calculateDiversificationRatio(weights, covarianceMatrix),\n      concentrationRisk: this.calculateConcentrationRisk(weights)\n    };\n  }\n\n  /**\n   * Stress Testing\n   */\n\n  // Historical stress testing\n  performHistoricalStressTest(portfolio, stressEvents) {\n    const results = stressEvents.map(event => {\n      const scenarioReturns = event.assetReturns;\n      let portfolioReturn = 0;\n      \n      portfolio.forEach((position, index) => {\n        portfolioReturn += position.weight * (scenarioReturns[index] || 0);\n      });\n\n      return {\n        eventName: event.name,\n        eventDate: event.date,\n        portfolioReturn,\n        portfolioValue: portfolio.reduce((sum, pos) => sum + pos.marketValue, 0) * (1 + portfolioReturn),\n        description: event.description\n      };\n    });\n\n    return {\n      stressTestResults: results,\n      worstCase: results.reduce((worst, current) => \n        current.portfolioReturn < worst.portfolioReturn ? current : worst\n      ),\n      averageStressReturn: results.reduce((sum, result) => sum + result.portfolioReturn, 0) / results.length\n    };\n  }\n\n  // Monte Carlo stress testing\n  performMonteCarloStressTest(portfolio, stressParameters, simulations = 1000) {\n    const results = [];\n    \n    for (let i = 0; i < simulations; i++) {\n      let portfolioReturn = 0;\n      const assetReturns = [];\n      \n      portfolio.forEach((position, index) => {\n        // Generate stressed return based on parameters\n        const stressedReturn = this.generateStressedReturn(\n          position.expectedReturn,\n          position.volatility,\n          stressParameters.shocks[index] || { factor: 1, correlation: 0 }\n        );\n        \n        assetReturns.push(stressedReturn);\n        portfolioReturn += position.weight * stressedReturn;\n      });\n      \n      results.push({\n        simulation: i + 1,\n        portfolioReturn,\n        assetReturns\n      });\n    }\n    \n    // Analyze results\n    const sortedReturns = results.map(r => r.portfolioReturn).sort((a, b) => a - b);\n    \n    return {\n      simulations: results.length,\n      worstCase: sortedReturns[0],\n      bestCase: sortedReturns[sortedReturns.length - 1],\n      percentiles: {\n        p1: sortedReturns[Math.floor(0.01 * sortedReturns.length)],\n        p5: sortedReturns[Math.floor(0.05 * sortedReturns.length)],\n        p10: sortedReturns[Math.floor(0.10 * sortedReturns.length)]\n      },\n      meanReturn: sortedReturns.reduce((sum, ret) => sum + ret, 0) / sortedReturns.length,\n      volatility: this.calculateVolatility(sortedReturns)\n    };\n  }\n\n  /**\n   * Risk Factor Models\n   */\n\n  // Multi-factor risk model\n  buildFactorModel(assetReturns, factorReturns) {\n    const factors = Object.keys(factorReturns);\n    const assets = Object.keys(assetReturns);\n    \n    const factorLoadings = {};\n    const specificRisk = {};\n    \n    assets.forEach(asset => {\n      const regression = this.multipleRegression(\n        assetReturns[asset],\n        factors.map(factor => factorReturns[factor])\n      );\n      \n      factorLoadings[asset] = {\n        alpha: regression.alpha,\n        betas: regression.betas,\n        rSquared: regression.rSquared,\n        tStats: regression.tStats\n      };\n      \n      specificRisk[asset] = regression.residualVolatility;\n    });\n    \n    return {\n      factorLoadings,\n      specificRisk,\n      factors,\n      factorCovariance: this.calculateFactorCovariance(factorReturns),\n      riskAttribution: this.calculateFactorRiskAttribution(factorLoadings, factorReturns)\n    };\n  }\n\n  /**\n   * Liquidity Risk\n   */\n\n  calculateLiquidityRisk(positions, marketData) {\n    return positions.map(position => {\n      const market = marketData[position.symbol] || {};\n      \n      const bidAskSpread = (market.ask - market.bid) / market.mid;\n      const volumeRatio = position.marketValue / (market.avgVolume * market.price);\n      \n      // Liquidity-adjusted VaR\n      const liquidityHorizon = this.calculateLiquidityHorizon(volumeRatio, market.avgVolume);\n      const liquidityPremium = bidAskSpread * 0.5 + Math.sqrt(liquidityHorizon) * 0.01;\n      \n      return {\n        symbol: position.symbol,\n        liquidityScore: this.calculateLiquidityScore(market),\n        bidAskSpread,\n        volumeRatio,\n        liquidityHorizon,\n        liquidityPremium,\n        liquidityAdjustedVaR: position.var * (1 + liquidityPremium),\n        marketImpactCost: this.calculateMarketImpact(position.marketValue, market)\n      };\n    });\n  }\n\n  /**\n   * Regulatory Risk Measures\n   */\n\n  // Basel III risk metrics\n  calculateBaselIIIMetrics(portfolio, riskWeights) {\n    const riskWeightedAssets = portfolio.reduce((total, position) => {\n      const riskWeight = riskWeights[position.assetClass] || 1.0;\n      return total + position.marketValue * riskWeight;\n    }, 0);\n\n    const tier1Capital = portfolio.reduce((total, position) => {\n      return total + (position.tier1Eligible ? position.marketValue : 0);\n    }, 0);\n\n    return {\n      riskWeightedAssets,\n      tier1Capital,\n      tier1Ratio: tier1Capital / riskWeightedAssets,\n      leverageRatio: tier1Capital / portfolio.reduce((sum, pos) => sum + pos.marketValue, 0),\n      minimumCapitalRequirement: riskWeightedAssets * 0.08,\n      capitalSurplus: tier1Capital - (riskWeightedAssets * 0.08)\n    };\n  }\n\n  /**\n   * Credit Risk\n   */\n\n  calculateCreditRisk(creditExposures) {\n    return creditExposures.map(exposure => {\n      const pd = exposure.probabilityOfDefault;\n      const lgd = exposure.lossGivenDefault;\n      const ead = exposure.exposureAtDefault;\n      \n      const expectedLoss = pd * lgd * ead;\n      const unexpectedLoss = Math.sqrt(pd * (1 - pd)) * lgd * ead;\n      \n      return {\n        counterparty: exposure.counterparty,\n        rating: exposure.rating,\n        expectedLoss,\n        unexpectedLoss,\n        capitalCharge: unexpectedLoss * 12.5, // Basel capital multiplier\n        riskContribution: expectedLoss / creditExposures.reduce((sum, exp) => sum + exp.exposureAtDefault, 0)\n      };\n    });\n  }\n\n  /**\n   * Utility Functions\n   */\n\n  generateRandomPath(mean, volatility, periods) {\n    const path = [];\n    for (let i = 0; i < periods; i++) {\n      const random = this.boxMullerRandom();\n      path.push(mean + volatility * random);\n    }\n    return path;\n  }\n\n  generateStressedReturn(expectedReturn, volatility, shock) {\n    const baseReturn = expectedReturn + volatility * this.boxMullerRandom();\n    return baseReturn * shock.factor + shock.correlation * volatility;\n  }\n\n  calculateMarginalVaR(positions, covarianceMatrix, assetIndex) {\n    let marginal = 0;\n    for (let j = 0; j < positions.length; j++) {\n      marginal += positions[j].weight * covarianceMatrix[assetIndex][j];\n    }\n    return marginal;\n  }\n\n  calculatePortfolioBeta(positions, covarianceMatrix, assetIndex) {\n    const portfolioVariance = this.calculatePortfolioVariance(positions, covarianceMatrix);\n    const covariance = this.calculateMarginalVaR(positions, covarianceMatrix, assetIndex);\n    return covariance / portfolioVariance;\n  }\n\n  calculatePortfolioVariance(positions, covarianceMatrix) {\n    const weights = positions.map(pos => pos.weight);\n    let variance = 0;\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights.length; j++) {\n        variance += weights[i] * weights[j] * covarianceMatrix[i][j];\n      }\n    }\n    return variance;\n  }\n\n  calculateDiversificationRatio(weights, covarianceMatrix) {\n    const weightedAvgVol = weights.reduce((sum, weight, i) => \n      sum + weight * Math.sqrt(covarianceMatrix[i][i]), 0\n    );\n    const portfolioVol = Math.sqrt(this.calculatePortfolioVariance(\n      weights.map((w, i) => ({ weight: w })), \n      covarianceMatrix\n    ));\n    return weightedAvgVol / portfolioVol;\n  }\n\n  calculateConcentrationRisk(weights) {\n    const herfindahlIndex = weights.reduce((sum, weight) => sum + weight * weight, 0);\n    return {\n      herfindahlIndex,\n      effectiveNumberOfAssets: 1 / herfindahlIndex,\n      maxWeight: Math.max(...weights),\n      top5Concentration: weights\n        .sort((a, b) => b - a)\n        .slice(0, 5)\n        .reduce((sum, weight) => sum + weight, 0)\n    };\n  }\n\n  calculateVolatility(returns) {\n    const mean = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;\n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - mean, 2), 0) / (returns.length - 1);\n    return Math.sqrt(variance);\n  }\n\n  calculateLiquidityScore(marketData) {\n    const volumeScore = Math.min(marketData.avgVolume / 1000000, 1); // Normalize to $1M\n    const spreadScore = Math.max(0, 1 - (marketData.bidAskSpread || 0.02) / 0.05);\n    const depthScore = Math.min((marketData.marketDepth || 100000) / 1000000, 1);\n    \n    return (volumeScore + spreadScore + depthScore) / 3;\n  }\n\n  calculateLiquidityHorizon(volumeRatio, avgVolume) {\n    if (volumeRatio <= 0.1) return 1; // Can liquidate in 1 day\n    if (volumeRatio <= 0.25) return 5; // 1 week\n    if (volumeRatio <= 0.5) return 20; // 1 month\n    return 60; // 3 months\n  }\n\n  calculateMarketImpact(tradeSize, marketData) {\n    const volumeRatio = tradeSize / (marketData.avgVolume * marketData.price);\n    return Math.sqrt(volumeRatio) * (marketData.bidAskSpread || 0.02) * 0.5;\n  }\n\n  multipleRegression(dependentVar, independentVars) {\n    // Simplified multiple regression - in practice would use proper matrix operations\n    const n = dependentVar.length;\n    const k = independentVars.length;\n    \n    // This is a placeholder - real implementation would use matrix algebra\n    const betas = independentVars.map(() => Math.random() * 0.1);\n    const alpha = Math.random() * 0.01;\n    \n    return {\n      alpha,\n      betas,\n      rSquared: 0.7, // Placeholder\n      tStats: betas.map(() => 2.5), // Placeholder\n      residualVolatility: 0.15 // Placeholder\n    };\n  }\n\n  calculateFactorCovariance(factorReturns) {\n    // Calculate covariance matrix of factor returns\n    const factors = Object.keys(factorReturns);\n    const matrix = {};\n    \n    factors.forEach(factor1 => {\n      matrix[factor1] = {};\n      factors.forEach(factor2 => {\n        matrix[factor1][factor2] = this.calculateCovariance(\n          factorReturns[factor1],\n          factorReturns[factor2]\n        );\n      });\n    });\n    \n    return matrix;\n  }\n\n  calculateFactorRiskAttribution(factorLoadings, factorReturns) {\n    // Calculate risk contribution from each factor\n    return Object.keys(factorLoadings).map(asset => ({\n      asset,\n      factorRisk: Object.keys(factorReturns).reduce((risk, factor, index) => {\n        const beta = factorLoadings[asset].betas[index];\n        const factorVol = this.calculateVolatility(factorReturns[factor]);\n        return risk + Math.pow(beta * factorVol, 2);\n      }, 0),\n      specificRisk: Math.pow(factorLoadings[asset].residualVolatility || 0.1, 2)\n    }));\n  }\n\n  calculateCovariance(series1, series2) {\n    const n = Math.min(series1.length, series2.length);\n    const mean1 = series1.slice(0, n).reduce((sum, val) => sum + val, 0) / n;\n    const mean2 = series2.slice(0, n).reduce((sum, val) => sum + val, 0) / n;\n    \n    return series1.slice(0, n).reduce((sum, val, i) => {\n      return sum + (val - mean1) * (series2[i] - mean2);\n    }, 0) / (n - 1);\n  }\n\n  getZScore(confidenceLevel) {\n    // Approximate inverse normal distribution\n    const z_scores = {\n      0.90: 1.282,\n      0.95: 1.645,\n      0.99: 2.326\n    };\n    return z_scores[confidenceLevel] || 1.645;\n  }\n\n  normalPDF(x) {\n    return Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);\n  }\n\n  boxMullerRandom() {\n    if (this.spare !== undefined) {\n      const value = this.spare;\n      this.spare = undefined;\n      return value;\n    }\n\n    const u = Math.random();\n    const v = Math.random();\n    const mag = Math.sqrt(-2 * Math.log(u));\n    \n    this.spare = mag * Math.cos(2 * Math.PI * v);\n    return mag * Math.sin(2 * Math.PI * v);\n  }\n}\n\nexport default RiskManagementEngine;","/**\n * Advanced Risk Management Dashboard\n * VaR, stress testing, portfolio risk analytics, and regulatory risk measures\n */\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  BarChart, Bar, ScatterChart, Scatter, AreaChart, Area, PieChart, Pie, Cell, Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis\n} from 'recharts';\nimport {\n  Shield, AlertTriangle, TrendingDown, BarChart3, Target, \n  Activity, Clock, DollarSign, Percent, Zap, Users, FileText\n} from 'lucide-react';\n\nimport RiskManagementEngine from '../../services/riskManagementEngine';\n\nconst AdvancedRiskDashboard = () => {\n  const [portfolio, setPortfolio] = useState([]);\n  const [riskMetrics, setRiskMetrics] = useState(null);\n  const [stressTestResults, setStressTestResults] = useState(null);\n  const [activeTab, setActiveTab] = useState('var');\n  const [selectedRiskModel, setSelectedRiskModel] = useState('historical');\n  const [confidenceLevel, setConfidenceLevel] = useState(0.95);\n\n  const engine = useMemo(() => new RiskManagementEngine(), []);\n\n  // Sample portfolio data\n  const samplePortfolio = [\n    {\n      symbol: 'AAPL',\n      name: 'Apple Inc.',\n      marketValue: 500000,\n      weight: 0.25,\n      expectedReturn: 0.12,\n      volatility: 0.25,\n      beta: 1.2,\n      assetClass: 'equity',\n      tier1Eligible: false,\n      sector: 'Technology',\n      var: 15000\n    },\n    {\n      symbol: 'GOOGL',\n      name: 'Alphabet Inc.',\n      marketValue: 400000,\n      weight: 0.20,\n      expectedReturn: 0.14,\n      volatility: 0.28,\n      beta: 1.1,\n      assetClass: 'equity',\n      tier1Eligible: false,\n      sector: 'Technology',\n      var: 14000\n    },\n    {\n      symbol: 'MSFT',\n      name: 'Microsoft Corp.',\n      marketValue: 350000,\n      weight: 0.175,\n      expectedReturn: 0.13,\n      volatility: 0.22,\n      beta: 0.9,\n      assetClass: 'equity',\n      tier1Eligible: false,\n      sector: 'Technology',\n      var: 9500\n    },\n    {\n      symbol: 'JPM',\n      name: 'JPMorgan Chase',\n      marketValue: 300000,\n      weight: 0.15,\n      expectedReturn: 0.10,\n      volatility: 0.30,\n      beta: 1.4,\n      assetClass: 'equity',\n      tier1Eligible: false,\n      sector: 'Financial',\n      var: 12000\n    },\n    {\n      symbol: 'UST_10Y',\n      name: 'US Treasury 10Y',\n      marketValue: 450000,\n      weight: 0.225,\n      expectedReturn: 0.04,\n      volatility: 0.08,\n      beta: -0.2,\n      assetClass: 'fixed_income',\n      tier1Eligible: true,\n      sector: 'Government',\n      var: 2500\n    }\n  ];\n\n  const covarianceMatrix = [\n    [0.0625, 0.0400, 0.0350, 0.0450, -0.0050],\n    [0.0400, 0.0784, 0.0380, 0.0520, -0.0040],\n    [0.0350, 0.0380, 0.0484, 0.0420, -0.0035],\n    [0.0450, 0.0520, 0.0420, 0.0900, -0.0020],\n    [-0.0050, -0.0040, -0.0035, -0.0020, 0.0064]\n  ];\n\n  useEffect(() => {\n    setPortfolio(samplePortfolio);\n    \n    // Calculate portfolio risk metrics\n    const portfolioRisk = engine.calculatePortfolioRisk(samplePortfolio, covarianceMatrix, confidenceLevel);\n    \n    // Generate historical returns for VaR calculation\n    const historicalReturns = Array.from({ length: 252 }, () => \n      Math.random() * 0.06 - 0.03 // Random returns between -3% and 3%\n    );\n    \n    const historicalVaR = engine.calculateHistoricalVaR(historicalReturns, confidenceLevel);\n    const parametricVaR = engine.calculateParametricVaR(\n      portfolioRisk.portfolioMetrics.expectedReturn,\n      portfolioRisk.portfolioMetrics.volatility,\n      confidenceLevel\n    );\n    \n    setRiskMetrics({\n      ...portfolioRisk,\n      historicalVaR,\n      parametricVaR,\n      totalPortfolioValue: samplePortfolio.reduce((sum, pos) => sum + pos.marketValue, 0)\n    });\n\n    // Perform stress testing\n    const stressEvents = [\n      {\n        name: '2008 Financial Crisis',\n        date: '2008-09-15',\n        description: 'Lehman Brothers collapse scenario',\n        assetReturns: [-0.35, -0.40, -0.32, -0.55, 0.15] // Bonds performed well\n      },\n      {\n        name: 'COVID-19 Pandemic',\n        date: '2020-03-20',\n        description: 'Market crash due to pandemic',\n        assetReturns: [-0.25, -0.22, -0.20, -0.38, 0.08]\n      },\n      {\n        name: 'Tech Bubble Burst',\n        date: '2000-03-10',\n        description: 'Dot-com bubble collapse',\n        assetReturns: [-0.45, -0.50, -0.42, -0.15, 0.12]\n      }\n    ];\n\n    const stressResults = engine.performHistoricalStressTest(samplePortfolio, stressEvents);\n    setStressTestResults(stressResults);\n  }, [engine, confidenceLevel]);\n\n  const VaRAnalysis = () => {\n    if (!riskMetrics) return null;\n\n    const varComparison = [\n      { \n        method: 'Historical VaR', \n        value: riskMetrics.historicalVaR.var * riskMetrics.totalPortfolioValue,\n        percentage: (riskMetrics.historicalVaR.var * 100).toFixed(2)\n      },\n      { \n        method: 'Parametric VaR', \n        value: riskMetrics.parametricVaR.var * riskMetrics.totalPortfolioValue,\n        percentage: (riskMetrics.parametricVaR.var * 100).toFixed(2)\n      },\n      { \n        method: 'Expected Shortfall', \n        value: riskMetrics.historicalVaR.expectedShortfall * riskMetrics.totalPortfolioValue,\n        percentage: (riskMetrics.historicalVaR.expectedShortfall * 100).toFixed(2)\n      }\n    ];\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-lg shadow-lg p-6\"\n      >\n        <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n          <Shield className=\"mr-2\" />\n          Value at Risk Analysis\n        </h3>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold mb-3\">VaR Comparison ({(confidenceLevel * 100)}% Confidence)</h4>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <BarChart data={varComparison}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"method\" />\n                <YAxis tickFormatter={(value) => `$${(value / 1000).toFixed(0)}K`} />\n                <Tooltip formatter={(value) => [`$${value.toLocaleString()}`, 'VaR']} />\n                <Bar dataKey=\"value\" fill=\"#ef4444\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Risk Metrics Summary</h4>\n            <div className=\"space-y-3\">\n              {[\n                { \n                  label: '1-Day VaR (95%)', \n                  value: `$${(riskMetrics.historicalVaR.var * riskMetrics.totalPortfolioValue).toLocaleString()}`,\n                  subtext: `${(riskMetrics.historicalVaR.var * 100).toFixed(2)}% of portfolio`\n                },\n                { \n                  label: 'Expected Shortfall', \n                  value: `$${(riskMetrics.historicalVaR.expectedShortfall * riskMetrics.totalPortfolioValue).toLocaleString()}`,\n                  subtext: 'Average loss beyond VaR'\n                },\n                { \n                  label: 'Portfolio Volatility', \n                  value: `${(riskMetrics.portfolioMetrics.volatility * 100).toFixed(2)}%`,\n                  subtext: 'Annualized standard deviation'\n                },\n                { \n                  label: 'Sharpe Ratio', \n                  value: riskMetrics.portfolioMetrics.sharpeRatio.toFixed(2),\n                  subtext: 'Risk-adjusted return'\n                }\n              ].map((metric) => (\n                <div key={metric.label} className=\"p-3 bg-gray-50 rounded\">\n                  <div className=\"flex justify-between items-start\">\n                    <span className=\"text-sm text-gray-600\">{metric.label}</span>\n                    <span className=\"font-bold text-lg\">{metric.value}</span>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">{metric.subtext}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6\">\n          <h4 className=\"font-semibold mb-3\">Risk Contribution by Asset</h4>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full table-auto\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-2\">Asset</th>\n                  <th className=\"text-left py-2\">Weight</th>\n                  <th className=\"text-left py-2\">Component VaR</th>\n                  <th className=\"text-left py-2\">% Contribution</th>\n                  <th className=\"text-left py-2\">Marginal VaR</th>\n                  <th className=\"text-left py-2\">Beta</th>\n                </tr>\n              </thead>\n              <tbody>\n                {riskMetrics.riskContribution.map((asset) => (\n                  <tr key={asset.asset} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"py-2 font-medium\">{asset.asset}</td>\n                    <td className=\"py-2\">{(asset.weight * 100).toFixed(1)}%</td>\n                    <td className=\"py-2\">{asset.componentVaR.toFixed(4)}</td>\n                    <td className=\"py-2\">{asset.percentageContribution.toFixed(1)}%</td>\n                    <td className=\"py-2\">{asset.marginalVaR.toFixed(4)}</td>\n                    <td className=\"py-2\">{asset.beta.toFixed(2)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  const StressTesting = () => {\n    if (!stressTestResults) return null;\n\n    const stressChartData = stressTestResults.stressTestResults.map(result => ({\n      scenario: result.eventName,\n      return: (result.portfolioReturn * 100).toFixed(2),\n      value: result.portfolioValue\n    }));\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-lg shadow-lg p-6\"\n      >\n        <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n          <AlertTriangle className=\"mr-2\" />\n          Stress Testing Analysis\n        </h3>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold mb-3\">Historical Stress Scenarios</h4>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <BarChart data={stressChartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"scenario\" angle={-45} textAnchor=\"end\" height={100} />\n                <YAxis tickFormatter={(value) => `${value}%`} />\n                <Tooltip formatter={(value) => [`${value}%`, 'Portfolio Return']} />\n                <Bar dataKey=\"return\" fill=\"#dc2626\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Stress Test Summary</h4>\n            <div className=\"space-y-3\">\n              <div className=\"p-4 border-2 border-red-200 bg-red-50 rounded-lg\">\n                <h5 className=\"font-semibold text-red-800 mb-2\">Worst Case Scenario</h5>\n                <p className=\"text-sm text-red-700\">{stressTestResults.worstCase.eventName}</p>\n                <p className=\"text-lg font-bold text-red-800\">\n                  {(stressTestResults.worstCase.portfolioReturn * 100).toFixed(2)}% loss\n                </p>\n                <p className=\"text-sm text-red-600\">\n                  Portfolio Value: ${stressTestResults.worstCase.portfolioValue.toLocaleString()}\n                </p>\n              </div>\n\n              <div className=\"p-3 bg-gray-50 rounded\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Average Stress Return:</span>\n                  <span className=\"font-bold text-red-600\">\n                    {(stressTestResults.averageStressReturn * 100).toFixed(2)}%\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"p-3 bg-gray-50 rounded\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Scenarios Tested:</span>\n                  <span className=\"font-bold\">{stressTestResults.stressTestResults.length}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6\">\n          <h4 className=\"font-semibold mb-3\">Detailed Scenario Analysis</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {stressTestResults.stressTestResults.map((result) => (\n              <div key={result.eventName} className=\"p-4 border rounded-lg\">\n                <h5 className=\"font-semibold mb-1\">{result.eventName}</h5>\n                <p className=\"text-sm text-gray-600 mb-2\">{result.description}</p>\n                <p className=\"text-lg font-bold text-red-600\">\n                  {(result.portfolioReturn * 100).toFixed(2)}% loss\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  Value: ${result.portfolioValue.toLocaleString()}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  const LiquidityRisk = () => {\n    const liquidityData = portfolio.map(position => ({\n      symbol: position.symbol,\n      liquidityScore: Math.random() * 0.8 + 0.2, // Mock liquidity score\n      bidAskSpread: Math.random() * 0.02,\n      volumeRatio: Math.random() * 0.5,\n      liquidityHorizon: Math.floor(Math.random() * 30) + 1\n    }));\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-lg shadow-lg p-6\"\n      >\n        <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n          <Activity className=\"mr-2\" />\n          Liquidity Risk Analysis\n        </h3>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold mb-3\">Liquidity Scores by Asset</h4>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <BarChart data={liquidityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"symbol\" />\n                <YAxis domain={[0, 1]} />\n                <Tooltip formatter={(value) => [value.toFixed(2), 'Liquidity Score']} />\n                <Bar dataKey=\"liquidityScore\" fill=\"#10b981\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Liquidity Metrics</h4>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full table-auto\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-2\">Asset</th>\n                    <th className=\"text-left py-2\">Score</th>\n                    <th className=\"text-left py-2\">Spread</th>\n                    <th className=\"text-left py-2\">Horizon</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {liquidityData.map((asset) => (\n                    <tr key={asset.symbol} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"py-2 font-medium\">{asset.symbol}</td>\n                      <td className=\"py-2\">\n                        <span className={`px-2 py-1 rounded text-xs ${\n                          asset.liquidityScore > 0.7 ? 'bg-green-100 text-green-800' :\n                          asset.liquidityScore > 0.4 ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {asset.liquidityScore.toFixed(2)}\n                        </span>\n                      </td>\n                      <td className=\"py-2\">{(asset.bidAskSpread * 100).toFixed(2)}%</td>\n                      <td className=\"py-2\">{asset.liquidityHorizon} days</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  const RegulatoryCapital = () => {\n    const riskWeights = {\n      equity: 1.0,\n      fixed_income: 0.2,\n      cash: 0.0\n    };\n\n    const baselMetrics = riskMetrics ? \n      engine.calculateBaselIIIMetrics(portfolio, riskWeights) : null;\n\n    if (!baselMetrics) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-lg shadow-lg p-6\"\n      >\n        <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n          <FileText className=\"mr-2\" />\n          Regulatory Capital Requirements\n        </h3>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold mb-3\">Basel III Ratios</h4>\n            <div className=\"space-y-4\">\n              {[\n                {\n                  label: 'Tier 1 Capital Ratio',\n                  value: (baselMetrics.tier1Ratio * 100).toFixed(2),\n                  threshold: 6.0,\n                  current: baselMetrics.tier1Ratio * 100\n                },\n                {\n                  label: 'Leverage Ratio',\n                  value: (baselMetrics.leverageRatio * 100).toFixed(2),\n                  threshold: 3.0,\n                  current: baselMetrics.leverageRatio * 100\n                }\n              ].map((ratio) => (\n                <div key={ratio.label} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"font-medium\">{ratio.label}</span>\n                    <span className={`font-bold text-lg ${\n                      ratio.current >= ratio.threshold ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {ratio.value}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full ${\n                        ratio.current >= ratio.threshold ? 'bg-green-500' : 'bg-red-500'\n                      }`}\n                      style={{ width: `${Math.min(ratio.current / ratio.threshold * 100, 100)}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Minimum: {ratio.threshold}%\n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Capital Adequacy</h4>\n            <div className=\"space-y-3\">\n              <div className=\"p-3 bg-gray-50 rounded\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Risk-Weighted Assets:</span>\n                  <span className=\"font-bold\">${baselMetrics.riskWeightedAssets.toLocaleString()}</span>\n                </div>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Tier 1 Capital:</span>\n                  <span className=\"font-bold\">${baselMetrics.tier1Capital.toLocaleString()}</span>\n                </div>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Minimum Capital:</span>\n                  <span className=\"font-bold\">${baselMetrics.minimumCapitalRequirement.toLocaleString()}</span>\n                </div>\n              </div>\n              <div className={`p-3 rounded ${\n                baselMetrics.capitalSurplus > 0 ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n              }`}>\n                <div className=\"flex justify-between\">\n                  <span className={baselMetrics.capitalSurplus > 0 ? 'text-green-700' : 'text-red-700'}>\n                    Capital {baselMetrics.capitalSurplus > 0 ? 'Surplus' : 'Deficit'}:\n                  </span>\n                  <span className={`font-bold ${baselMetrics.capitalSurplus > 0 ? 'text-green-700' : 'text-red-700'}`}>\n                    ${Math.abs(baselMetrics.capitalSurplus).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <header className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Advanced Risk Management</h1>\n          <p className=\"text-gray-600\">Comprehensive portfolio risk analytics, VaR, stress testing, and regulatory compliance</p>\n        </header>\n\n        {/* Risk Controls */}\n        <div className=\"mb-6 bg-white rounded-lg shadow p-4\">\n          <div className=\"flex flex-wrap gap-4 items-center\">\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium\">Confidence Level:</label>\n              <select \n                value={confidenceLevel}\n                onChange={(e) => setConfidenceLevel(parseFloat(e.target.value))}\n                className=\"border rounded px-2 py-1\"\n              >\n                <option value={0.90}>90%</option>\n                <option value={0.95}>95%</option>\n                <option value={0.99}>99%</option>\n              </select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium\">Risk Model:</label>\n              <select \n                value={selectedRiskModel}\n                onChange={(e) => setSelectedRiskModel(e.target.value)}\n                className=\"border rounded px-2 py-1\"\n              >\n                <option value=\"historical\">Historical</option>\n                <option value=\"parametric\">Parametric</option>\n                <option value=\"monte_carlo\">Monte Carlo</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"mb-6\">\n          <nav className=\"flex space-x-1 bg-blue-50 p-1 rounded-lg\">\n            {[\n              { id: 'var', label: 'VaR Analysis', icon: Shield },\n              { id: 'stress', label: 'Stress Testing', icon: AlertTriangle },\n              { id: 'liquidity', label: 'Liquidity Risk', icon: Activity },\n              { id: 'regulatory', label: 'Regulatory Capital', icon: FileText }\n            ].map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center px-4 py-2 rounded-md font-medium transition-colors ${\n                    activeTab === tab.id\n                      ? 'bg-white text-blue-600 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4 mr-2\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <AnimatePresence mode=\"wait\">\n          {activeTab === 'var' && <VaRAnalysis />}\n          {activeTab === 'stress' && <StressTesting />}\n          {activeTab === 'liquidity' && <LiquidityRisk />}\n          {activeTab === 'regulatory' && <RegulatoryCapital />}\n        </AnimatePresence>\n\n        {/* Risk Summary Cards */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mt-8 grid grid-cols-1 md:grid-cols-4 gap-4\"\n        >\n          {riskMetrics && [\n            { \n              label: 'Portfolio VaR (1D)', \n              value: `$${(riskMetrics.historicalVaR.var * riskMetrics.totalPortfolioValue).toLocaleString()}`, \n              icon: Shield, \n              color: 'red',\n              risk: true\n            },\n            { \n              label: 'Expected Shortfall', \n              value: `$${(riskMetrics.historicalVaR.expectedShortfall * riskMetrics.totalPortfolioValue).toLocaleString()}`, \n              icon: TrendingDown, \n              color: 'red',\n              risk: true\n            },\n            { \n              label: 'Sharpe Ratio', \n              value: riskMetrics.portfolioMetrics.sharpeRatio.toFixed(2), \n              icon: Target, \n              color: 'green'\n            },\n            { \n              label: 'Portfolio Beta', \n              value: '1.08', \n              icon: BarChart3, \n              color: 'blue'\n            }\n          ].map((metric) => {\n            const Icon = metric.icon;\n            return (\n              <div key={metric.label} className={`bg-white rounded-lg shadow p-4 ${\n                metric.risk ? 'border-l-4 border-red-500' : ''\n              }`}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">{metric.label}</p>\n                    <p className=\"text-xl font-bold\">{metric.value}</p>\n                  </div>\n                  <Icon className={`w-8 h-8 text-${metric.color}-600`} />\n                </div>\n              </div>\n            );\n          })}\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdvancedRiskDashboard;"],"names":["RiskManagementEngine","constructor","this","historicalData","Map","correlationMatrix","riskModels","stressScenarios","calculateHistoricalVaR","returns","confidenceLevel","holdingPeriod","length","Error","sortedReturns","sort","a","b","percentileIndex","Math","floor","scaledVaR","sqrt","tailReturns","slice","var","expectedShortfall","reduce","sum","ret","worstReturn","percentileReturn","sampleSize","method","calculateParametricVaR","mean","volatility","zScore","getZScore","var_","phi","normalPDF","calculateMonteCarloVaR","simulations","i","totalReturn","generateRandomPath","push","calculatePortfolioRisk","positions","covarianceMatrix","weights","map","pos","weight","expectedReturns","expectedReturn","portfolioReturn","portfolioVariance","j","portfolioVolatility","componentVaR","marginalVaR","marketValue","riskContribution","asset","symbol","percentageContribution","calculateMarginalVaR","beta","calculatePortfolioBeta","portfolioMetrics","sharpeRatio","diversificationRatio","calculateDiversificationRatio","concentrationRisk","calculateConcentrationRisk","performHistoricalStressTest","portfolio","stressEvents","results","event","scenarioReturns","assetReturns","forEach","position","index","eventName","name","eventDate","date","portfolioValue","description","stressTestResults","worstCase","worst","current","averageStressReturn","result","performMonteCarloStressTest","stressParameters","stressedReturn","generateStressedReturn","shocks","factor","correlation","simulation","r","bestCase","percentiles","p1","p5","p10","meanReturn","calculateVolatility","buildFactorModel","factorReturns","factors","Object","keys","assets","factorLoadings","specificRisk","regression","multipleRegression","alpha","betas","rSquared","tStats","residualVolatility","factorCovariance","calculateFactorCovariance","riskAttribution","calculateFactorRiskAttribution","calculateLiquidityRisk","marketData","market","bidAskSpread","ask","bid","mid","volumeRatio","avgVolume","price","liquidityHorizon","calculateLiquidityHorizon","liquidityPremium","liquidityScore","calculateLiquidityScore","liquidityAdjustedVaR","marketImpactCost","calculateMarketImpact","calculateBaselIIIMetrics","riskWeights","riskWeightedAssets","total","riskWeight","assetClass","tier1Capital","tier1Eligible","tier1Ratio","leverageRatio","minimumCapitalRequirement","capitalSurplus","calculateCreditRisk","creditExposures","exposure","pd","probabilityOfDefault","lgd","lossGivenDefault","ead","exposureAtDefault","expectedLoss","unexpectedLoss","counterparty","rating","capitalCharge","exp","periods","path","random","boxMullerRandom","shock","assetIndex","marginal","calculatePortfolioVariance","variance","w","herfindahlIndex","effectiveNumberOfAssets","maxWeight","max","top5Concentration","pow","min","marketDepth","tradeSize","dependentVar","independentVars","matrix","factor1","factor2","calculateCovariance","factorRisk","risk","factorVol","series1","series2","n","mean1","val","mean2","x","PI","undefined","spare","value","u","v","mag","log","cos","sin","AdvancedRiskDashboard","setPortfolio","useState","riskMetrics","setRiskMetrics","setStressTestResults","activeTab","setActiveTab","selectedRiskModel","setSelectedRiskModel","setConfidenceLevel","engine","useMemo","samplePortfolio","sector","useEffect","portfolioRisk","historicalReturns","Array","from","historicalVaR","parametricVaR","totalPortfolioValue","stressResults","VaRAnalysis","varComparison","percentage","toFixed","jsxs","motion","div","initial","opacity","y","animate","className","children","jsx","Shield","ResponsiveContainer","width","height","BarChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","tickFormatter","Tooltip","formatter","toLocaleString","Bar","fill","label","subtext","metric","StressTesting","stressChartData","scenario","return","AlertTriangle","angle","textAnchor","LiquidityRisk","liquidityData","Activity","domain","RegulatoryCapital","baselMetrics","equity","fixed_income","cash","FileText","threshold","ratio","style","abs","onChange","e","parseFloat","target","id","icon","tab","Icon","onClick","AnimatePresence","mode","color","TrendingDown","Target","BarChart3"],"mappings":"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"}
{"version":3,"file":"dataFetching-CrSJiL9f.js","sources":["../../src/utils/apiKeyValidator.js","../../src/utils/apiLogger.js","../../src/services/financialModelingEngine.js","../../src/services/lboModelingEngine.js","../../src/services/dataFetching.js"],"sourcesContent":["// API Key Validation Utility\n// Validates API keys and provides helpful feedback for setup\n\nimport axios from 'axios';\n\nexport class ApiKeyValidator {\n  constructor() {\n    this.validationResults = new Map();\n    this.lastValidation = null;\n  }\n\n  /**\n   * Validate all configured API keys\n   * @returns {Promise<Object>} Validation results for all services\n   */\n  async validateAllKeys() {\n    const results = {\n      timestamp: new Date(),\n      overall: 'unknown',\n      services: {},\n      recommendations: []\n    };\n\n    // Get all API keys from environment\n    const apiKeys = {\n      alphaVantage: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY,\n      fmp: import.meta.env.VITE_FMP_API_KEY,\n      quandl: import.meta.env.VITE_QUANDL_API_KEY,\n      fred: import.meta.env.VITE_FRED_API_KEY\n    };\n\n    // Validate each service\n    const validationPromises = [\n      this.validateAlphaVantage(apiKeys.alphaVantage),\n      this.validateFMP(apiKeys.fmp),\n      this.validateQuandl(apiKeys.quandl),\n      this.validateFRED(apiKeys.fred)\n    ];\n\n    try {\n      const [alphaVantage, fmp, quandl, fred] = await Promise.allSettled(validationPromises);\n\n      results.services = {\n        alphaVantage: this.processValidationResult(alphaVantage),\n        fmp: this.processValidationResult(fmp),\n        quandl: this.processValidationResult(quandl),\n        fred: this.processValidationResult(fred)\n      };\n\n      // Determine overall status\n      const validServices = Object.values(results.services).filter(\n        s => s.status === 'valid'\n      ).length;\n      const configuredServices = Object.values(results.services).filter(\n        s => s.status !== 'missing'\n      ).length;\n      const totalServices = Object.keys(results.services).length;\n\n      if (validServices === 0) {\n        results.overall = 'demo';\n        results.recommendations.push(\n          'No valid API keys found. Running in demo mode with mock data.'\n        );\n        results.recommendations.push(\n          'Add at least one API key (Alpha Vantage or FMP recommended) for live data.'\n        );\n      } else if (validServices < configuredServices || configuredServices < totalServices) {\n        results.overall = 'partial';\n        results.recommendations.push(\n          `${validServices}/${configuredServices} configured API keys are valid. Some features may use demo data.`\n        );\n      } else {\n        results.overall = 'complete';\n        results.recommendations.push('All API keys are valid. Full functionality available.');\n      }\n\n      this.lastValidation = results;\n      return results;\n    } catch (error) {\n      results.overall = 'error';\n      results.error = error.message;\n      results.recommendations.push('Error validating API keys. Check your internet connection.');\n      return results;\n    }\n  }\n\n  /**\n   * Validate Alpha Vantage API key\n   */\n  async validateAlphaVantage(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://www.alphavantage.co/query', {\n        params: {\n          function: 'GLOBAL_QUOTE',\n          symbol: 'AAPL',\n          apikey: apiKey\n        },\n        timeout: 10000\n      });\n\n      if (response.data['Error Message']) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data['Note']) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n\n      if (response.data['Global Quote']) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Financial Modeling Prep API key\n   */\n  async validateFMP(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://financialmodelingprep.com/api/v3/profile/AAPL', {\n        params: { apikey: apiKey },\n        timeout: 10000\n      });\n\n      if (response.data.error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Quandl API key\n   */\n  async validateQuandl(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://data.nasdaq.com/api/v3/datasets/WIKI/AAPL.json', {\n        params: { api_key: apiKey, rows: 1 },\n        timeout: 10000\n      });\n\n      if (response.data.quandl_error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.dataset) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate FRED API key\n   */\n  async validateFRED(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://api.stlouisfed.org/fred/series', {\n        params: {\n          series_id: 'GDP',\n          api_key: apiKey,\n          file_type: 'json'\n        },\n        timeout: 10000\n      });\n\n      if (response.data.error_message) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.seriess) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 400) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Process validation result from Promise.allSettled\n   */\n  processValidationResult(result) {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return { status: 'error', message: result.reason.message };\n    }\n  }\n\n  /**\n   * Get validation status for a specific service\n   */\n  getServiceStatus(serviceName) {\n    if (!this.lastValidation) {\n      return { status: 'unknown', message: 'Validation not run yet' };\n    }\n    return (\n      this.lastValidation.services[serviceName] || {\n        status: 'unknown',\n        message: 'Service not found'\n      }\n    );\n  }\n\n  /**\n   * Get overall validation status\n   */\n  getOverallStatus() {\n    if (!this.lastValidation) {\n      return 'unknown';\n    }\n    return this.lastValidation.overall;\n  }\n\n  /**\n   * Get recommendations for improving API setup\n   */\n  getRecommendations() {\n    if (!this.lastValidation) {\n      return ['Run API key validation first'];\n    }\n    return this.lastValidation.recommendations;\n  }\n\n  /**\n   * Check if demo mode should be used\n   */\n  shouldUseDemoMode() {\n    const status = this.getOverallStatus();\n    return status === 'demo' || status === 'unknown';\n  }\n}\n\n// Export singleton instance\nexport const apiKeyValidator = new ApiKeyValidator();\nexport default ApiKeyValidator;\n","/**\n * Enhanced API logging and monitoring utility\n * Provides comprehensive logging, metrics collection, and performance monitoring\n */\n\n// Log levels\nconst LOG_LEVELS = {\n  ERROR: 0,\n  WARN: 1,\n  INFO: 2,\n  DEBUG: 3,\n  TRACE: 4\n};\n\n// Default configuration\nconst DEFAULT_CONFIG = {\n  logLevel: LOG_LEVELS.INFO,\n  enableMetrics: true,\n  enablePerformanceTracking: true,\n  enableErrorTracking: true,\n  maxLogHistory: 1000,\n  metricsRetentionPeriod: 24 * 60 * 60 * 1000 // 24 hours\n};\n\n/**\n * API Logger class for comprehensive monitoring\n */\nclass ApiLogger {\n  constructor(config = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.logs = [];\n    this.metrics = new Map();\n    this.performanceData = new Map();\n    this.errorCounts = new Map();\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Log a message with specified level\n   * @param {string} level - Log level\n   * @param {string} message - Log message\n   * @param {Object} metadata - Additional metadata\n   */\n  log(level, message, metadata = {}) {\n    const levelValue = LOG_LEVELS[level.toUpperCase()] || LOG_LEVELS.INFO;\n\n    if (levelValue <= this.config.logLevel) {\n      const logEntry = {\n        timestamp: new Date().toISOString(),\n        level: level.toUpperCase(),\n        message,\n        metadata,\n        id: this.generateLogId()\n      };\n\n      this.logs.push(logEntry);\n      this.trimLogs();\n\n      // Console output with formatting\n      this.outputToConsole(logEntry);\n    }\n  }\n\n  /**\n   * Log API request start\n   * @param {string} service - Service name (e.g., 'FMP', 'ALPHA_VANTAGE')\n   * @param {string} endpoint - API endpoint\n   * @param {Object} params - Request parameters\n   * @returns {string} Request ID for tracking\n   */\n  logApiRequest(service, endpoint, params = {}) {\n    const requestId = this.generateRequestId();\n    const startTime = Date.now();\n\n    this.log('INFO', '🚀 API Request Started', {\n      requestId,\n      service,\n      endpoint,\n      params: this.sanitizeParams(params),\n      startTime\n    });\n\n    // Store performance tracking data\n    this.performanceData.set(requestId, {\n      service,\n      endpoint,\n      startTime,\n      params: this.sanitizeParams(params)\n    });\n\n    return requestId;\n  }\n\n  /**\n   * Log API request completion\n   * @param {string} requestId - Request ID from logApiRequest\n   * @param {boolean} success - Whether request was successful\n   * @param {Object} response - Response data (will be sanitized)\n   * @param {Error} error - Error object if request failed\n   */\n  logApiResponse(requestId, success, response = null, error = null) {\n    const performanceData = this.performanceData.get(requestId);\n    if (!performanceData) {\n      this.log('WARN', 'No performance data found for request', { requestId });\n      return;\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - performanceData.startTime;\n    const { service, endpoint } = performanceData;\n\n    if (success) {\n      this.log('INFO', '✅ API Request Completed', {\n        requestId,\n        service,\n        endpoint,\n        duration,\n        responseSize: this.getResponseSize(response),\n        success: true\n      });\n\n      this.recordMetric(service, 'success', 1);\n    } else {\n      this.log('ERROR', '❌ API Request Failed', {\n        requestId,\n        service,\n        endpoint,\n        duration,\n        error: error\n          ? {\n            message: error.message,\n            code: error.code,\n            status: error.response?.status,\n            statusText: error.response?.statusText\n          }\n          : null,\n        success: false\n      });\n\n      this.recordMetric(service, 'error', 1);\n      this.recordError(service, error);\n    }\n\n    // Record performance metrics\n    this.recordMetric(service, 'duration', duration);\n    this.recordMetric(service, 'requests', 1);\n\n    // Clean up performance data\n    this.performanceData.delete(requestId);\n  }\n\n  /**\n   * Log rate limiting events\n   * @param {string} service - Service name\n   * @param {number} waitTime - Time to wait in milliseconds\n   * @param {number} remainingRequests - Remaining requests in current period\n   */\n  logRateLimit(service, waitTime, remainingRequests = null) {\n    this.log('WARN', '⏱️ Rate Limit Hit', {\n      service,\n      waitTime,\n      remainingRequests,\n      action: 'throttling'\n    });\n\n    this.recordMetric(service, 'rateLimitHits', 1);\n  }\n\n  /**\n   * Log circuit breaker events\n   * @param {string} service - Service name\n   * @param {string} state - Circuit breaker state\n   * @param {string} action - Action taken\n   * @param {Object} metadata - Additional metadata\n   */\n  logCircuitBreaker(service, state, action, metadata = {}) {\n    const emoji =\n      {\n        OPEN: '🚨',\n        HALF_OPEN: '🔄',\n        CLOSED: '✅'\n      }[state] || '🔧';\n\n    this.log('WARN', `${emoji} Circuit Breaker ${action}`, {\n      service,\n      state,\n      action,\n      ...metadata\n    });\n\n    this.recordMetric(service, `circuitBreaker_${state.toLowerCase()}`, 1);\n  }\n\n  /**\n   * Log cache events\n   * @param {string} operation - Cache operation (hit, miss, set, clear)\n   * @param {string} key - Cache key\n   * @param {Object} metadata - Additional metadata\n   */\n  logCache(operation, key, metadata = {}) {\n    const emoji =\n      {\n        hit: '🎯',\n        miss: '❌',\n        set: '💾',\n        clear: '🗑️'\n      }[operation] || '📦';\n\n    this.log('DEBUG', `${emoji} Cache ${operation.toUpperCase()}`, {\n      operation,\n      key: this.sanitizeCacheKey(key),\n      ...metadata\n    });\n\n    this.recordMetric('cache', operation, 1);\n  }\n\n  /**\n   * Record a metric\n   * @param {string} service - Service name\n   * @param {string} metric - Metric name\n   * @param {number} value - Metric value\n   */\n  recordMetric(service, metric, value) {\n    if (!this.config.enableMetrics) return;\n\n    const key = `${service}.${metric}`;\n    const now = Date.now();\n\n    if (!this.metrics.has(key)) {\n      this.metrics.set(key, {\n        values: [],\n        total: 0,\n        count: 0,\n        min: Infinity,\n        max: -Infinity,\n        avg: 0\n      });\n    }\n\n    const metricData = this.metrics.get(key);\n    metricData.values.push({ value, timestamp: now });\n    metricData.total += value;\n    metricData.count += 1;\n    metricData.min = Math.min(metricData.min, value);\n    metricData.max = Math.max(metricData.max, value);\n    metricData.avg = metricData.total / metricData.count;\n\n    // Clean old metrics\n    this.cleanOldMetrics(key);\n  }\n\n  /**\n   * Record an error for tracking\n   * @param {string} service - Service name\n   * @param {Error} error - Error object\n   */\n  recordError(service, error) {\n    if (!this.config.enableErrorTracking || !error) return;\n\n    const errorKey = `${service}.${error.message}`;\n    const count = this.errorCounts.get(errorKey) || 0;\n    this.errorCounts.set(errorKey, count + 1);\n  }\n\n  /**\n   * Get comprehensive metrics summary\n   * @returns {Object} Metrics summary\n   */\n  getMetrics() {\n    const summary = {\n      uptime: Date.now() - this.startTime,\n      totalLogs: this.logs.length,\n      services: {},\n      cache: {},\n      errors: {}\n    };\n\n    // Process service metrics\n    for (const [key, data] of this.metrics.entries()) {\n      const [service, metric] = key.split('.');\n\n      if (service === 'cache') {\n        summary.cache[metric] = {\n          total: data.total,\n          count: data.count,\n          avg: data.avg\n        };\n      } else {\n        if (!summary.services[service]) {\n          summary.services[service] = {};\n        }\n\n        summary.services[service][metric] = {\n          total: data.total,\n          count: data.count,\n          min: data.min === Infinity ? 0 : data.min,\n          max: data.max === -Infinity ? 0 : data.max,\n          avg: data.avg\n        };\n      }\n    }\n\n    // Process error counts\n    for (const [errorKey, count] of this.errorCounts.entries()) {\n      const [service, ...messageParts] = errorKey.split('.');\n      const message = messageParts.join('.');\n\n      if (!summary.errors[service]) {\n        summary.errors[service] = {};\n      }\n\n      summary.errors[service][message] = count;\n    }\n\n    return summary;\n  }\n\n  /**\n   * Get recent logs\n   * @param {number} limit - Maximum number of logs to return\n   * @param {string} level - Filter by log level\n   * @returns {Array} Recent log entries\n   */\n  getRecentLogs(limit = 100, level = null) {\n    let logs = [...this.logs];\n\n    if (level) {\n      logs = logs.filter(log => log.level === level.toUpperCase());\n    }\n\n    return logs.slice(-limit).reverse();\n  }\n\n  /**\n   * Clear all logs and metrics\n   */\n  clear() {\n    this.logs = [];\n    this.metrics.clear();\n    this.performanceData.clear();\n    this.errorCounts.clear();\n    this.startTime = Date.now();\n  }\n\n  // Private helper methods\n  generateLogId() {\n    return `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateRequestId() {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  sanitizeParams(params) {\n    const sanitized = { ...params };\n    // Remove sensitive data\n    if (sanitized.apikey) sanitized.apikey = '***';\n    if (sanitized.api_key) sanitized.api_key = '***';\n    if (sanitized.token) sanitized.token = '***';\n    return sanitized;\n  }\n\n  sanitizeCacheKey(key) {\n    // Truncate long cache keys for readability\n    return key.length > 50 ? `${key.substring(0, 47)}...` : key;\n  }\n\n  getResponseSize(response) {\n    if (!response) return 0;\n    try {\n      return JSON.stringify(response).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  trimLogs() {\n    if (this.logs.length > this.config.maxLogHistory) {\n      this.logs = this.logs.slice(-this.config.maxLogHistory);\n    }\n  }\n\n  cleanOldMetrics(key) {\n    const metricData = this.metrics.get(key);\n    const cutoff = Date.now() - this.config.metricsRetentionPeriod;\n\n    metricData.values = metricData.values.filter(item => item.timestamp > cutoff);\n  }\n\n  outputToConsole(logEntry) {\n    // Skip console output in production\n    if (import.meta.env.PROD) {\n      return;\n    }\n\n    const { level, message, metadata } = logEntry;\n    const timestamp = new Date(logEntry.timestamp).toLocaleTimeString();\n\n    const colors = {\n      ERROR: '\\x1b[31m', // Red\n      WARN: '\\x1b[33m', // Yellow\n      INFO: '\\x1b[36m', // Cyan\n      DEBUG: '\\x1b[35m', // Magenta\n      TRACE: '\\x1b[37m' // White\n    };\n\n    const reset = '\\x1b[0m';\n    const color = colors[level] || colors.INFO;\n\n    // eslint-disable-next-line no-console\n    console.log(\n      `${color}[${timestamp}] ${level}:${reset} ${message}`,\n      Object.keys(metadata).length > 0 ? metadata : ''\n    );\n  }\n}\n\n// Export singleton instance\nexport const apiLogger = new ApiLogger();\nexport default ApiLogger;\n","// import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced Financial Modeling Engine\n * Provides comprehensive DCF, LBO, and valuation modeling capabilities\n */\nclass FinancialModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default financial modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      dcf: {\n        projectionYears: 5,\n        terminalGrowthRate: 0.025,\n        riskFreeRate: 0.045,\n        marketPremium: 0.065,\n        taxRate: 0.21,\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.05,\n        depreciationAsPercentOfRevenue: 0.025\n      },\n      lbo: {\n        holdingPeriod: 5,\n        debtMultiples: { senior: 4.0, subordinated: 1.5, total: 5.5 },\n        interestRates: { senior: 0.055, subordinated: 0.095 },\n        managementFeeRate: 0.02,\n        carriedInterestRate: 0.2,\n        ebitdaGrowthRate: 0.05,\n        debtPaydownRate: 0.5\n      },\n      monte_carlo: {\n        iterations: 10000,\n        confidenceIntervals: [0.05, 0.25, 0.5, 0.75, 0.95],\n        correlationMatrix: null\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive DCF model with multiple scenarios\n   * @param {Object} inputs - DCF model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete DCF analysis\n   */\n  buildDCFModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      _currentRevenue,\n      _historicalGrowthRates = [],\n      _margins = {},\n      _balanceSheetData = {},\n      _marketData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions.dcf, ...assumptions };\n\n    // Build base case scenario\n    const baseCase = this.calculateDCFScenario(inputs, modelAssumptions, 'Base Case');\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Bull case: Higher growth, lower discount rate\n    if (scenarios.bull !== false) {\n      const bullAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 1.3,\n        terminalGrowthRate: Math.min(modelAssumptions.terminalGrowthRate * 1.2, 0.04),\n        wacc: (modelAssumptions.wacc || 0.1) * 0.9\n      };\n      scenarioResults.bull = this.calculateDCFScenario(inputs, bullAssumptions, 'Bull Case');\n    }\n\n    // Bear case: Lower growth, higher discount rate\n    if (scenarios.bear !== false) {\n      const bearAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 0.7,\n        terminalGrowthRate: Math.max(modelAssumptions.terminalGrowthRate * 0.8, 0.015),\n        wacc: (modelAssumptions.wacc || 0.1) * 1.1\n      };\n      scenarioResults.bear = this.calculateDCFScenario(inputs, bearAssumptions, 'Bear Case');\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performDCFSensitivityAnalysis(inputs, modelAssumptions);\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'DCF',\n      timestamp: new Date().toISOString(),\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateDCFSummary(baseCase, scenarioResults, inputs.currentPrice)\n    };\n  }\n\n  /**\n   * Calculate DCF for a specific scenario\n   * @param {Object} inputs - Model inputs\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} DCF calculation results\n   */\n  calculateDCFScenario(inputs, assumptions, scenarioName) {\n    const {\n      currentRevenue,\n      currentPrice,\n      sharesOutstanding,\n      totalDebt = 0,\n      cash = 0\n    } = inputs;\n\n    // Project revenues\n    const revenueProjections = this.projectRevenues(\n      currentRevenue,\n      assumptions.revenueGrowthRate || 0.1,\n      assumptions.projectionYears\n    );\n\n    // Project operating metrics\n    const operatingProjections = this.projectOperatingMetrics(\n      revenueProjections,\n      assumptions\n    );\n\n    // Calculate free cash flows\n    const fcfProjections = this.calculateFreeCashFlows(\n      operatingProjections,\n      assumptions\n    );\n\n    // Calculate terminal value\n    const terminalValue = this.calculateTerminalValue(\n      fcfProjections[fcfProjections.length - 1],\n      assumptions.terminalGrowthRate,\n      assumptions.wacc\n    );\n\n    // Calculate present values\n    const pvOfCashFlows = this.calculatePresentValue(fcfProjections, assumptions.wacc);\n    const pvOfTerminalValue = this.calculatePresentValue([terminalValue], assumptions.wacc, assumptions.projectionYears);\n\n    // Calculate enterprise and equity values\n    const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n    const equityValue = enterpriseValue - totalDebt + cash;\n    const pricePerShare = equityValue / sharesOutstanding;\n\n    // Calculate valuation metrics\n    const upside = currentPrice ? ((pricePerShare - currentPrice) / currentPrice) * 100 : null;\n\n    return {\n      scenarioName,\n      revenueProjections,\n      operatingProjections,\n      fcfProjections,\n      terminalValue,\n      pvOfCashFlows,\n      pvOfTerminalValue,\n      enterpriseValue,\n      equityValue,\n      pricePerShare,\n      currentPrice,\n      upside,\n      wacc: assumptions.wacc,\n      terminalGrowthRate: assumptions.terminalGrowthRate,\n      impliedMultiples: this.calculateImpliedMultiples(enterpriseValue, operatingProjections)\n    };\n  }\n\n  /**\n   * Project revenue growth over multiple years\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number|Array} growthRates - Growth rate(s)\n   * @param {number} years - Number of years to project\n   * @returns {Array} Revenue projections\n   */\n  projectRevenues(baseRevenue, growthRates, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n\n    for (let i = 0; i < years; i++) {\n      const growthRate = Array.isArray(growthRates)\n        ? growthRates[i] || growthRates[growthRates.length - 1]\n        : growthRates * Math.pow(0.95, i); // Declining growth rate\n\n      currentRevenue *= (1 + growthRate);\n      projections.push({\n        year: i + 1,\n        revenue: currentRevenue,\n        growthRate\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Project operating metrics (EBITDA, margins, etc.)\n   * @param {Array} revenueProjections - Revenue projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Operating projections\n   */\n  projectOperatingMetrics(revenueProjections, assumptions) {\n    return revenueProjections.map((projection, _index) => {\n      const ebitdaMargin = assumptions.ebitdaMargin || 0.2;\n      const ebitda = projection.revenue * ebitdaMargin;\n      const depreciation = projection.revenue * assumptions.depreciationAsPercentOfRevenue;\n      const ebit = ebitda - depreciation;\n      const taxes = ebit * assumptions.taxRate;\n      const nopat = ebit - taxes;\n\n      return {\n        ...projection,\n        ebitda,\n        ebitdaMargin,\n        depreciation,\n        ebit,\n        taxes,\n        nopat\n      };\n    });\n  }\n\n  /**\n   * Calculate free cash flows\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Free cash flow projections\n   */\n  calculateFreeCashFlows(operatingProjections, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      const capex = projection.revenue * assumptions.capexAsPercentOfRevenue;\n      const nwcChange = index === 0\n        ? projection.revenue * assumptions.nwcAsPercentOfRevenue\n        : (projection.revenue - operatingProjections[index - 1].revenue) * assumptions.nwcAsPercentOfRevenue;\n\n      const fcf = projection.nopat + projection.depreciation - capex - nwcChange;\n\n      return fcf;\n    });\n  }\n\n  /**\n   * Calculate terminal value using Gordon Growth Model\n   * @param {number} finalFCF - Final year free cash flow\n   * @param {number} terminalGrowthRate - Terminal growth rate\n   * @param {number} discountRate - Discount rate (WACC)\n   * @returns {number} Terminal value\n   */\n  calculateTerminalValue(finalFCF, terminalGrowthRate, discountRate) {\n    if (discountRate <= terminalGrowthRate) {\n      throw new Error('Discount rate must be greater than terminal growth rate');\n    }\n    return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n  }\n\n  /**\n   * Calculate present value of cash flows\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {number} discountRate - Discount rate\n   * @param {number} startYear - Starting year for discounting\n   * @returns {number} Present value\n   */\n  calculatePresentValue(cashFlows, discountRate, startYear = 0) {\n    return cashFlows.reduce((pv, cf, index) => {\n      const year = startYear + index + 1;\n      return pv + cf / Math.pow(1 + discountRate, year);\n    }, 0);\n  }\n\n  /**\n   * Calculate implied valuation multiples\n   * @param {number} enterpriseValue - Enterprise value\n   * @param {Array} operatingProjections - Operating projections\n   * @returns {Object} Implied multiples\n   */\n  calculateImpliedMultiples(enterpriseValue, operatingProjections) {\n    const currentYearEbitda = operatingProjections[0]?.ebitda || 0;\n    const nextYearEbitda = operatingProjections[1]?.ebitda || 0;\n\n    return {\n      evToCurrentEbitda: currentYearEbitda ? enterpriseValue / currentYearEbitda : null,\n      evToForwardEbitda: nextYearEbitda ? enterpriseValue / nextYearEbitda : null\n    };\n  }\n\n  /**\n   * Perform sensitivity analysis on key variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performDCFSensitivityAnalysis(inputs, baseAssumptions) {\n    const sensitivityVars = {\n      revenueGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      wacc: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      terminalGrowthRate: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      ebitdaMargin: [-0.02, -0.01, 0, 0.01, 0.02]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = {\n          ...baseAssumptions,\n          [variable]: (baseAssumptions[variable] || 0) + variation\n        };\n\n        try {\n          const scenario = this.calculateDCFScenario(inputs, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            pricePerShare: scenario.pricePerShare,\n            upside: scenario.upside\n          };\n        } catch (error) {\n          return {\n            variation,\n            pricePerShare: null,\n            upside: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate DCF model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Model summary\n   */\n  generateDCFSummary(baseCase, scenarios, currentPrice) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const pricesPerShare = allScenarios.map(s => s.pricePerShare).filter(p => p !== null);\n\n    return {\n      priceRange: {\n        min: Math.min(...pricesPerShare),\n        max: Math.max(...pricesPerShare),\n        average: pricesPerShare.reduce((sum, p) => sum + p, 0) / pricesPerShare.length\n      },\n      recommendation: this.generateRecommendation(baseCase, currentPrice),\n      keyMetrics: {\n        baseCase: {\n          pricePerShare: baseCase.pricePerShare,\n          upside: baseCase.upside,\n          enterpriseValue: baseCase.enterpriseValue\n        },\n        currentPrice,\n        impliedReturn: baseCase.upside\n      }\n    };\n  }\n\n  /**\n   * Generate investment recommendation\n   * @param {Object} baseCase - Base case DCF results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Investment recommendation\n   */\n  generateRecommendation(baseCase, currentPrice) {\n    if (!currentPrice || !baseCase.pricePerShare) {\n      return { rating: 'INSUFFICIENT_DATA', confidence: 0 };\n    }\n\n    const upside = baseCase.upside;\n    let rating, confidence;\n\n    if (upside > 20) {\n      rating = 'STRONG_BUY';\n      confidence = Math.min(95, 70 + (upside - 20) * 1.25);\n    } else if (upside > 10) {\n      rating = 'BUY';\n      confidence = Math.min(85, 60 + (upside - 10) * 2);\n    } else if (upside > -10) {\n      rating = 'HOLD';\n      confidence = Math.min(75, 50 + Math.abs(upside) * 2.5);\n    } else if (upside > -20) {\n      rating = 'SELL';\n      confidence = Math.min(85, 60 + Math.abs(upside + 10) * 2);\n    } else {\n      rating = 'STRONG_SELL';\n      confidence = Math.min(95, 70 + Math.abs(upside + 20) * 1.25);\n    }\n\n    return {\n      rating,\n      confidence: Math.round(confidence),\n      upside,\n      reasoning: this.generateRecommendationReasoning(rating, upside)\n    };\n  }\n\n  /**\n   * Generate reasoning for investment recommendation\n   * @param {string} rating - Investment rating\n   * @param {number} upside - Upside percentage\n   * @returns {string} Recommendation reasoning\n   */\n  generateRecommendationReasoning(rating, upside) {\n    const upsideAbs = Math.abs(upside);\n\n    switch (rating) {\n      case 'STRONG_BUY':\n        return `Strong upside potential of ${upside.toFixed(1)}% suggests significant undervaluation based on DCF analysis.`;\n      case 'BUY':\n        return `Moderate upside of ${upside.toFixed(1)}% indicates the stock is undervalued relative to intrinsic value.`;\n      case 'HOLD':\n        return `Fair valuation with ${upside >= 0 ? 'limited upside' : 'modest downside'} of ${upsideAbs.toFixed(1)}%.`;\n      case 'SELL':\n        return `Downside risk of ${upsideAbs.toFixed(1)}% suggests the stock is overvalued based on fundamental analysis.`;\n      case 'STRONG_SELL':\n        return `Significant downside of ${upsideAbs.toFixed(1)}% indicates substantial overvaluation.`;\n      default:\n        return 'Insufficient data for reliable recommendation.';\n    }\n  }\n}\n\n// Export singleton instance\nexport const financialModelingEngine = new FinancialModelingEngine();\nexport default FinancialModelingEngine;\n","// import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced LBO (Leveraged Buyout) Modeling Engine\n * Provides comprehensive LBO analysis with debt schedules and cash flow waterfalls\n */\nclass LBOModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default LBO modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      transaction: {\n        holdingPeriod: 5,\n        managementRollover: 0.1, // 10% management rollover\n        transactionFees: 0.02, // 2% of transaction value\n        financingFees: 0.015 // 1.5% of debt\n      },\n      debt: {\n        seniorDebtMultiple: 4.0,\n        subordinatedDebtMultiple: 1.5,\n        totalDebtMultiple: 5.5,\n        seniorInterestRate: 0.055, // 5.5%\n        subordinatedInterestRate: 0.095, // 9.5%\n        mandatoryPaydown: 0.05, // 5% annually\n        cashSweep: 0.5 // 50% of excess cash\n      },\n      operating: {\n        ebitdaGrowthRate: 0.05, // 5% annually\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.02,\n        taxRate: 0.21\n      },\n      exit: {\n        exitMultiple: null, // Will use peer average\n        exitMultipleRange: [0.8, 1.2], // 80% to 120% of peer average\n        publicMarketDiscount: 0.1 // 10% discount for public exit\n      },\n      fees: {\n        managementFeeRate: 0.02, // 2% annually\n        carriedInterestRate: 0.2, // 20%\n        hurdle: 0.08 // 8% preferred return\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {Object} inputs - LBO model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete LBO analysis\n   */\n  buildLBOModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      purchasePrice,\n      ebitda,\n      _revenue,\n      _marketData = {},\n      _peerData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions, ...assumptions };\n\n    // Calculate transaction structure\n    const transactionStructure = this.calculateTransactionStructure(\n      purchasePrice,\n      ebitda,\n      modelAssumptions\n    );\n\n    // Build base case scenario\n    const baseCase = this.calculateLBOScenario(\n      inputs,\n      transactionStructure,\n      modelAssumptions,\n      'Base Case'\n    );\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Upside case: Higher growth and exit multiple\n    if (scenarios.upside !== false) {\n      const upsideAssumptions = {\n        ...modelAssumptions,\n        operating: {\n          ...modelAssumptions.operating,\n          ebitdaGrowthRate: modelAssumptions.operating.ebitdaGrowthRate * 1.3\n        },\n        exit: {\n          ...modelAssumptions.exit,\n          exitMultiple: (modelAssumptions.exit.exitMultiple || 10) * 1.1\n        }\n      };\n      scenarioResults.upside = this.calculateLBOScenario(\n        inputs,\n        transactionStructure,\n        upsideAssumptions,\n        'Upside Case'\n      );\n    }\n\n    // Downside case: Lower growth and exit multiple\n    if (scenarios.downside !== false) {\n      const downsideAssumptions = {\n        ...modelAssumptions,\n        operating: {\n          ...modelAssumptions.operating,\n          ebitdaGrowthRate: modelAssumptions.operating.ebitdaGrowthRate * 0.7\n        },\n        exit: {\n          ...modelAssumptions.exit,\n          exitMultiple: (modelAssumptions.exit.exitMultiple || 10) * 0.9\n        }\n      };\n      scenarioResults.downside = this.calculateLBOScenario(\n        inputs,\n        transactionStructure,\n        downsideAssumptions,\n        'Downside Case'\n      );\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performLBOSensitivityAnalysis(\n      inputs,\n      transactionStructure,\n      modelAssumptions\n    );\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'LBO',\n      timestamp: new Date().toISOString(),\n      transactionStructure,\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateLBOSummary(baseCase, scenarioResults, transactionStructure)\n    };\n  }\n\n  /**\n   * Calculate transaction structure and financing\n   * @param {number} purchasePrice - Total purchase price\n   * @param {number} ebitda - Current EBITDA\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Object} Transaction structure\n   */\n  calculateTransactionStructure(purchasePrice, ebitda, assumptions) {\n    const { debt, transaction } = assumptions;\n\n    // Calculate debt capacity based on EBITDA multiples\n    const seniorDebt = ebitda * debt.seniorDebtMultiple;\n    const subordinatedDebt = ebitda * debt.subordinatedDebtMultiple;\n    const totalDebt = seniorDebt + subordinatedDebt;\n\n    // Calculate transaction costs\n    const transactionFees = purchasePrice * transaction.transactionFees;\n    const financingFees = totalDebt * transaction.financingFees;\n    const totalUses = purchasePrice + transactionFees + financingFees;\n\n    // Calculate equity requirement (ensure it's positive)\n    const equityContribution = Math.max(totalUses - totalDebt, totalUses * 0.2); // Minimum 20% equity\n    const managementRollover = purchasePrice * transaction.managementRollover;\n    const sponsorEquity = Math.max(equityContribution - managementRollover, 0);\n\n    // Recalculate total debt if equity was adjusted\n    const adjustedTotalDebt = totalUses - equityContribution;\n    const adjustedSeniorDebt = Math.min(seniorDebt, adjustedTotalDebt * 0.8); // Max 80% senior\n    const adjustedSubordinatedDebt = adjustedTotalDebt - adjustedSeniorDebt;\n\n    return {\n      purchasePrice,\n      transactionFees,\n      financingFees,\n      totalUses,\n      seniorDebt: adjustedSeniorDebt,\n      subordinatedDebt: adjustedSubordinatedDebt,\n      totalDebt: adjustedTotalDebt,\n      equityContribution,\n      sponsorEquity,\n      managementRollover,\n      debtToEbitda: adjustedTotalDebt / ebitda,\n      equityToTotalCapital: equityContribution / totalUses\n    };\n  }\n\n  /**\n   * Calculate LBO scenario with detailed cash flow projections\n   * @param {Object} inputs - Model inputs\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} LBO scenario results\n   */\n  calculateLBOScenario(inputs, transactionStructure, assumptions, scenarioName) {\n    const { ebitda, revenue } = inputs;\n    const { holdingPeriod } = assumptions.transaction;\n\n    // Project operating performance\n    const operatingProjections = this.projectLBOOperatingPerformance(\n      revenue,\n      ebitda,\n      assumptions.operating,\n      holdingPeriod\n    );\n\n    // Calculate debt schedule\n    const debtSchedule = this.calculateDebtSchedule(\n      transactionStructure,\n      operatingProjections,\n      assumptions.debt,\n      holdingPeriod\n    );\n\n    // Calculate cash flow to equity\n    const equityCashFlows = this.calculateEquityCashFlows(\n      operatingProjections,\n      debtSchedule,\n      assumptions\n    );\n\n    // Calculate exit value and returns\n    const exitAnalysis = this.calculateExitAnalysis(\n      operatingProjections[holdingPeriod - 1],\n      debtSchedule[holdingPeriod - 1],\n      transactionStructure,\n      assumptions\n    );\n\n    // Calculate returns metrics\n    const returnsAnalysis = this.calculateReturnsMetrics(\n      transactionStructure.sponsorEquity,\n      equityCashFlows,\n      exitAnalysis.netProceeds,\n      holdingPeriod\n    );\n\n    return {\n      scenarioName,\n      operatingProjections,\n      debtSchedule,\n      equityCashFlows,\n      exitAnalysis,\n      returnsAnalysis,\n      keyMetrics: this.calculateLBOKeyMetrics(\n        transactionStructure,\n        exitAnalysis,\n        returnsAnalysis\n      )\n    };\n  }\n\n  /**\n   * Project operating performance over holding period\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number} baseEbitda - Starting EBITDA\n   * @param {Object} operatingAssumptions - Operating assumptions\n   * @param {number} years - Number of years\n   * @returns {Array} Operating projections\n   */\n  projectLBOOperatingPerformance(baseRevenue, baseEbitda, operatingAssumptions, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n    let currentEbitda = baseEbitda;\n\n    for (let year = 1; year <= years; year++) {\n      // Assume revenue grows in line with EBITDA\n      const ebitdaGrowth = operatingAssumptions.ebitdaGrowthRate;\n      currentEbitda *= (1 + ebitdaGrowth);\n      currentRevenue *= (1 + ebitdaGrowth);\n\n      const ebitdaMargin = currentEbitda / currentRevenue;\n      const capex = currentRevenue * operatingAssumptions.capexAsPercentOfRevenue;\n      const nwcChange = year === 1\n        ? currentRevenue * operatingAssumptions.nwcAsPercentOfRevenue\n        : (currentRevenue - projections[year - 2].revenue) * operatingAssumptions.nwcAsPercentOfRevenue;\n\n      const taxes = currentEbitda * operatingAssumptions.taxRate;\n      const unleveredFCF = currentEbitda - taxes - capex - nwcChange;\n\n      projections.push({\n        year,\n        revenue: currentRevenue,\n        ebitda: currentEbitda,\n        ebitdaMargin,\n        capex,\n        nwcChange,\n        taxes,\n        unleveredFCF\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Calculate debt schedule with amortization\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} debtAssumptions - Debt assumptions\n   * @param {number} years - Number of years\n   * @returns {Array} Debt schedule\n   */\n  calculateDebtSchedule(transactionStructure, operatingProjections, debtAssumptions, years) {\n    const schedule = [];\n    let seniorDebtBalance = transactionStructure.seniorDebt;\n    let subordinatedDebtBalance = transactionStructure.subordinatedDebt;\n\n    for (let year = 1; year <= years; year++) {\n      const projection = operatingProjections[year - 1];\n\n      // Calculate interest expense\n      const seniorInterest = seniorDebtBalance * debtAssumptions.seniorInterestRate;\n      const subordinatedInterest = subordinatedDebtBalance * debtAssumptions.subordinatedInterestRate;\n      const totalInterest = seniorInterest + subordinatedInterest;\n\n      // Calculate available cash for debt paydown\n      const cashAvailableForDebt = projection.unleveredFCF - totalInterest;\n\n      // Mandatory amortization\n      const mandatoryPaydown = Math.min(\n        seniorDebtBalance * debtAssumptions.mandatoryPaydown,\n        seniorDebtBalance\n      );\n\n      // Cash sweep (excess cash after mandatory paydown)\n      const excessCash = Math.max(0, cashAvailableForDebt - mandatoryPaydown);\n      const cashSweep = excessCash * debtAssumptions.cashSweep;\n\n      // Total debt paydown\n      const totalPaydown = mandatoryPaydown + cashSweep;\n      const seniorPaydown = Math.min(totalPaydown, seniorDebtBalance);\n      const subordinatedPaydown = Math.max(0, totalPaydown - seniorPaydown);\n\n      // Update balances\n      seniorDebtBalance = Math.max(0, seniorDebtBalance - seniorPaydown);\n      subordinatedDebtBalance = Math.max(0, subordinatedDebtBalance - subordinatedPaydown);\n\n      schedule.push({\n        year,\n        beginningBalance: {\n          senior: year === 1 ? transactionStructure.seniorDebt : schedule[year - 2].endingBalance.senior,\n          subordinated: year === 1 ? transactionStructure.subordinatedDebt : schedule[year - 2].endingBalance.subordinated\n        },\n        interestExpense: {\n          senior: seniorInterest,\n          subordinated: subordinatedInterest,\n          total: totalInterest\n        },\n        principalPayment: {\n          senior: seniorPaydown,\n          subordinated: subordinatedPaydown,\n          total: totalPaydown\n        },\n        endingBalance: {\n          senior: seniorDebtBalance,\n          subordinated: subordinatedDebtBalance,\n          total: seniorDebtBalance + subordinatedDebtBalance\n        },\n        cashAvailableForDebt,\n        excessCash: excessCash - cashSweep\n      });\n    }\n\n    return schedule;\n  }\n\n  /**\n   * Calculate cash flows to equity holders\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Array} debtSchedule - Debt schedule\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Equity cash flows\n   */\n  calculateEquityCashFlows(operatingProjections, debtSchedule, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      const debt = debtSchedule[index];\n      const managementFees = assumptions.fees.managementFeeRate *\n        (assumptions.transaction.sponsorEquity || 0);\n\n      const cashFlowToEquity = debt.excessCash - managementFees;\n\n      return {\n        year: projection.year,\n        unleveredFCF: projection.unleveredFCF,\n        interestExpense: debt.interestExpense.total,\n        principalPayment: debt.principalPayment.total,\n        managementFees,\n        cashFlowToEquity: Math.max(0, cashFlowToEquity)\n      };\n    });\n  }\n\n  /**\n   * Calculate exit analysis and proceeds\n   * @param {Object} finalYearProjection - Final year operating projection\n   * @param {Object} finalYearDebt - Final year debt schedule\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Object} Exit analysis\n   */\n  calculateExitAnalysis(finalYearProjection, finalYearDebt, transactionStructure, assumptions) {\n    const exitMultiple = assumptions.exit.exitMultiple || 10;\n    const exitEbitda = finalYearProjection.ebitda;\n\n    const enterpriseValue = exitEbitda * exitMultiple;\n    const totalDebtAtExit = finalYearDebt.endingBalance.total;\n    const grossProceeds = enterpriseValue - totalDebtAtExit;\n\n    // Calculate carried interest\n    const totalReturn = grossProceeds;\n    const investedCapital = transactionStructure.sponsorEquity;\n    const profit = Math.max(0, totalReturn - investedCapital);\n    const carriedInterest = profit * assumptions.fees.carriedInterestRate;\n\n    const netProceeds = grossProceeds - carriedInterest;\n\n    return {\n      exitEbitda,\n      exitMultiple,\n      enterpriseValue,\n      totalDebtAtExit,\n      grossProceeds,\n      carriedInterest,\n      netProceeds,\n      managementProceeds: grossProceeds * (transactionStructure.managementRollover / transactionStructure.equityContribution)\n    };\n  }\n\n  /**\n   * Calculate returns metrics (IRR, MOIC, etc.)\n   * @param {number} initialInvestment - Initial equity investment\n   * @param {Array} equityCashFlows - Annual equity cash flows\n   * @param {number} exitProceeds - Exit proceeds\n   * @param {number} holdingPeriod - Holding period in years\n   * @returns {Object} Returns analysis\n   */\n  calculateReturnsMetrics(initialInvestment, equityCashFlows, exitProceeds, holdingPeriod) {\n    // Validate inputs\n    if (!initialInvestment || initialInvestment <= 0) {\n      return {\n        irr: NaN,\n        moic: NaN,\n        totalCashReturned: 0,\n        initialInvestment: initialInvestment || 0,\n        holdingPeriod,\n        annualizedReturn: NaN\n      };\n    }\n\n    // Calculate total cash flows (negative initial investment, positive distributions and exit)\n    const cashFlows = [-Math.abs(initialInvestment)]; // Ensure initial investment is negative\n\n    // Add annual cash flows\n    equityCashFlows.forEach(cf => {\n      cashFlows.push(cf.cashFlowToEquity || 0);\n    });\n\n    // Add exit proceeds to final year\n    if (cashFlows.length > 1) {\n      cashFlows[cashFlows.length - 1] += (exitProceeds || 0);\n    } else {\n      cashFlows.push(exitProceeds || 0);\n    }\n\n    // Calculate IRR using Newton-Raphson method\n    const irr = this.calculateIRR(cashFlows);\n\n    // Calculate MOIC (Multiple of Invested Capital)\n    const totalCashReturned = equityCashFlows.reduce((sum, cf) => sum + (cf.cashFlowToEquity || 0), 0) + (exitProceeds || 0);\n    const moic = totalCashReturned / Math.abs(initialInvestment);\n\n    return {\n      irr: isNaN(irr) ? 0 : irr, // Default to 0% if IRR calculation fails\n      moic: isNaN(moic) ? 0 : moic,\n      totalCashReturned,\n      initialInvestment: Math.abs(initialInvestment),\n      holdingPeriod,\n      annualizedReturn: isNaN(moic) || moic <= 0 ? 0 : Math.pow(moic, 1 / holdingPeriod) - 1,\n      cashFlows // Include for debugging\n    };\n  }\n\n  /**\n   * Calculate IRR using Newton-Raphson method\n   * @param {Array} cashFlows - Array of cash flows\n   * @returns {number} IRR as decimal\n   */\n  calculateIRR(cashFlows) {\n    // Validate cash flows\n    if (!cashFlows || cashFlows.length < 2) {\n      return NaN;\n    }\n\n    // Check if all cash flows are zero\n    if (cashFlows.every(cf => cf === 0)) {\n      return 0;\n    }\n\n    // Check if there's no sign change (no valid IRR)\n    const signChanges = cashFlows.slice(1).reduce((count, cf, i) => {\n      return count + (Math.sign(cf) !== Math.sign(cashFlows[i]) ? 1 : 0);\n    }, 0);\n\n    if (signChanges === 0) {\n      return cashFlows[0] < 0 ? -1 : Infinity; // No valid IRR\n    }\n\n    let rate = 0.1; // Initial guess: 10%\n    const tolerance = 1e-6;\n    const maxIterations = 100;\n\n    for (let i = 0; i < maxIterations; i++) {\n      let npv = 0;\n      let dnpv = 0;\n\n      for (let j = 0; j < cashFlows.length; j++) {\n        const factor = Math.pow(1 + rate, j);\n        npv += cashFlows[j] / factor;\n        if (j > 0) {\n          dnpv -= j * cashFlows[j] / (factor * (1 + rate));\n        }\n      }\n\n      if (Math.abs(npv) < tolerance) {\n        return rate;\n      }\n\n      if (Math.abs(dnpv) < tolerance) {\n        break; // Avoid division by zero\n      }\n\n      const newRate = rate - npv / dnpv;\n\n      // Prevent rate from going too negative or too high\n      if (newRate < -0.99) {\n        rate = -0.99;\n      } else if (newRate > 10) {\n        rate = 10;\n      } else {\n        rate = newRate;\n      }\n    }\n\n    return rate;\n  }\n\n  /**\n   * Calculate key LBO metrics summary\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} exitAnalysis - Exit analysis\n   * @param {Object} returnsAnalysis - Returns analysis\n   * @returns {Object} Key metrics\n   */\n  calculateLBOKeyMetrics(transactionStructure, exitAnalysis, returnsAnalysis) {\n    return {\n      entryMultiple: transactionStructure.purchasePrice / (transactionStructure.purchasePrice / transactionStructure.debtToEbitda),\n      exitMultiple: exitAnalysis.exitMultiple,\n      debtToEbitda: transactionStructure.debtToEbitda,\n      equityContribution: transactionStructure.equityContribution,\n      irr: returnsAnalysis.irr,\n      moic: returnsAnalysis.moic,\n      totalReturn: returnsAnalysis.totalCashReturned,\n      leverageReduction: transactionStructure.totalDebt - exitAnalysis.totalDebtAtExit\n    };\n  }\n\n  /**\n   * Perform sensitivity analysis on key LBO variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performLBOSensitivityAnalysis(inputs, transactionStructure, baseAssumptions) {\n    const sensitivityVars = {\n      ebitdaGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      exitMultiple: [-1, -0.5, 0, 0.5, 1],\n      debtMultiple: [-0.5, -0.25, 0, 0.25, 0.5]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = { ...baseAssumptions };\n\n        if (variable === 'ebitdaGrowthRate') {\n          adjustedAssumptions.operating.ebitdaGrowthRate += variation;\n        } else if (variable === 'exitMultiple') {\n          adjustedAssumptions.exit.exitMultiple = (adjustedAssumptions.exit.exitMultiple || 10) + variation;\n        } else if (variable === 'debtMultiple') {\n          // Adjust transaction structure for debt multiple sensitivity\n          const newDebtMultiple = transactionStructure.debtToEbitda + variation;\n          const adjustedStructure = {\n            ...transactionStructure,\n            totalDebt: (inputs.ebitda * newDebtMultiple),\n            debtToEbitda: newDebtMultiple\n          };\n          adjustedStructure.equityContribution = transactionStructure.totalUses - adjustedStructure.totalDebt;\n        }\n\n        try {\n          const scenario = this.calculateLBOScenario(inputs, transactionStructure, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            irr: scenario.returnsAnalysis.irr,\n            moic: scenario.returnsAnalysis.moic\n          };\n        } catch (error) {\n          return {\n            variation,\n            irr: null,\n            moic: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate LBO model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Object} Model summary\n   */\n  generateLBOSummary(baseCase, scenarios, transactionStructure) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const irrs = allScenarios.map(s => s.returnsAnalysis.irr).filter(irr => irr !== null);\n    const moics = allScenarios.map(s => s.returnsAnalysis.moic).filter(moic => moic !== null);\n\n    return {\n      returnRange: {\n        irrMin: Math.min(...irrs),\n        irrMax: Math.max(...irrs),\n        irrAverage: irrs.reduce((sum, irr) => sum + irr, 0) / irrs.length,\n        moicMin: Math.min(...moics),\n        moicMax: Math.max(...moics),\n        moicAverage: moics.reduce((sum, moic) => sum + moic, 0) / moics.length\n      },\n      investmentHighlights: this.generateInvestmentHighlights(baseCase, transactionStructure),\n      riskFactors: this.generateRiskFactors(baseCase, transactionStructure)\n    };\n  }\n\n  /**\n   * Generate investment highlights\n   * @param {Object} baseCase - Base case results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Array} Investment highlights\n   */\n  generateInvestmentHighlights(baseCase, transactionStructure) {\n    const highlights = [];\n    const irr = baseCase.returnsAnalysis.irr;\n    const moic = baseCase.returnsAnalysis.moic;\n\n    if (irr > 0.2) {\n      highlights.push(`Strong projected IRR of ${(irr * 100).toFixed(1)}%`);\n    }\n\n    if (moic > 2.5) {\n      highlights.push(`Attractive multiple of ${moic.toFixed(1)}x invested capital`);\n    }\n\n    if (transactionStructure.debtToEbitda < 5) {\n      highlights.push(`Conservative leverage at ${transactionStructure.debtToEbitda.toFixed(1)}x EBITDA`);\n    }\n\n    return highlights;\n  }\n\n  /**\n   * Generate risk factors\n   * @param {Object} baseCase - Base case results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Array} Risk factors\n   */\n  generateRiskFactors(baseCase, transactionStructure) {\n    const risks = [];\n\n    if (transactionStructure.debtToEbitda > 6) {\n      risks.push(`High leverage at ${transactionStructure.debtToEbitda.toFixed(1)}x EBITDA`);\n    }\n\n    if (baseCase.returnsAnalysis.irr < 0.15) {\n      risks.push(`Below-target IRR of ${(baseCase.returnsAnalysis.irr * 100).toFixed(1)}%`);\n    }\n\n    return risks;\n  }\n}\n\n// Export singleton instance\nexport const lboModelingEngine = new LBOModelingEngine();\nexport default LBOModelingEngine;\n","import axios from 'axios';\n\nimport { apiKeyValidator } from '../utils/apiKeyValidator.js';\nimport { apiLogger } from '../utils/apiLogger.js';\n\nimport { financialModelingEngine } from './financialModelingEngine.js';\nimport { lboModelingEngine } from './lboModelingEngine.js';\nimport { monteCarloEngine } from './monteCarloEngine.js';\n\n// Data source configurations - Updated for Vite environment variables\nconst DATA_SOURCES = {\n  ALPHA_VANTAGE: {\n    baseURL: 'https://www.alphavantage.co/query',\n    apiKey: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY || 'demo'\n  },\n  FMP: {\n    baseURL: 'https://financialmodelingprep.com/api/v3',\n    apiKey: import.meta.env.VITE_FMP_API_KEY || 'demo'\n  },\n  SEC_EDGAR: {\n    baseURL: 'https://data.sec.gov',\n    headers: {\n      'User-Agent': 'FinanceAnalyst-Pro (contact@financeanalyst.com)'\n    }\n  },\n  YAHOO_FINANCE: {\n    baseURL: 'https://query1.finance.yahoo.com/v8/finance/chart',\n    fallbackURL: 'https://query2.finance.yahoo.com/v8/finance/chart'\n  }\n};\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  ALPHA_VANTAGE: { requests: 5, period: 60000 }, // 5 requests per minute\n  FMP: { requests: 250, period: 86400000 }, // 250 requests per day\n  SEC_EDGAR: { requests: 10, period: 1000 } // 10 requests per second\n};\n\n// Advanced retry configuration\nconst RETRY_CONFIG = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second base delay\n  maxDelay: 30000, // 30 seconds max delay\n  exponentialBase: 2,\n  jitterFactor: 0.1, // 10% jitter\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT']\n};\n\n/**\n * Circuit breaker configuration\n */\nconst CIRCUIT_BREAKER_CONFIG = {\n  failureThreshold: 5, // Number of failures before opening circuit\n  recoveryTimeout: 30000, // 30 seconds before attempting to close circuit\n  monitoringPeriod: 60000, // 1 minute monitoring window\n  halfOpenMaxCalls: 3 // Max calls to test in half-open state\n};\n\n/**\n * Circuit breaker states\n */\nconst CIRCUIT_STATES = {\n  CLOSED: 'CLOSED', // Normal operation\n  OPEN: 'OPEN', // Circuit is open, failing fast\n  HALF_OPEN: 'HALF_OPEN' // Testing if service has recovered\n};\n\n/**\n * Circuit breaker implementation to prevent cascading failures\n */\nclass CircuitBreaker {\n  constructor(name, config = CIRCUIT_BREAKER_CONFIG) {\n    this.name = name;\n    this.config = { ...CIRCUIT_BREAKER_CONFIG, ...config };\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.halfOpenCallCount = 0;\n    this.successCount = 0;\n    this.totalCalls = 0;\n  }\n\n  /**\n   * Check if circuit breaker allows the call\n   * @returns {boolean} Whether the call is allowed\n   */\n  canExecute() {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        return true;\n\n      case CIRCUIT_STATES.OPEN:\n        // Check if recovery timeout has passed\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.state = CIRCUIT_STATES.HALF_OPEN;\n          this.halfOpenCallCount = 0;\n          console.log(`🔄 Circuit breaker ${this.name} transitioning to HALF_OPEN`);\n          return true;\n        }\n        return false;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        return this.halfOpenCallCount < this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Record a successful call\n   */\n  recordSuccess() {\n    this.successCount++;\n    this.totalCalls++;\n\n    switch (this.state) {\n      case CIRCUIT_STATES.HALF_OPEN:\n        this.halfOpenCallCount++;\n        // If we've successfully completed enough calls in half-open, close the circuit\n        if (this.halfOpenCallCount >= this.config.halfOpenMaxCalls) {\n          this.state = CIRCUIT_STATES.CLOSED;\n          this.failureCount = 0;\n          this.halfOpenCallCount = 0;\n          console.log(`✅ Circuit breaker ${this.name} closed - service recovered`);\n        }\n        break;\n\n      case CIRCUIT_STATES.CLOSED:\n        // Reset failure count on success\n        this.failureCount = 0;\n        break;\n    }\n  }\n\n  /**\n   * Record a failed call\n   */\n  recordFailure() {\n    this.failureCount++;\n    this.totalCalls++;\n    this.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        if (this.failureCount >= this.config.failureThreshold) {\n          this.state = CIRCUIT_STATES.OPEN;\n          console.warn(\n            `🚨 Circuit breaker ${this.name} opened - too many failures (${this.failureCount})`\n          );\n        }\n        break;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        // Any failure in half-open state reopens the circuit\n        this.state = CIRCUIT_STATES.OPEN;\n        this.halfOpenCallCount = 0;\n        console.warn(`🚨 Circuit breaker ${this.name} reopened - failure during recovery test`);\n        break;\n    }\n  }\n\n  /**\n   * Get circuit breaker status\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls: this.totalCalls,\n      failureRate: this.totalCalls > 0 ? this.failureCount / this.totalCalls : 0,\n      lastFailureTime: this.lastFailureTime,\n      isOpen: this.state === CIRCUIT_STATES.OPEN,\n      nextRetryTime:\n        this.state === CIRCUIT_STATES.OPEN\n          ? this.lastFailureTime + this.config.recoveryTimeout\n          : null\n    };\n  }\n\n  /**\n   * Execute function with circuit breaker protection\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    if (!this.canExecute()) {\n      const error = new Error(`Circuit breaker ${this.name} is OPEN - failing fast`);\n      error.circuitBreakerOpen = true;\n      throw error;\n    }\n\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (error) {\n      this.recordFailure();\n      throw error;\n    }\n  }\n}\n\n/**\n * Advanced retry utility with exponential backoff and jitter\n */\nclass RetryManager {\n  constructor(config = RETRY_CONFIG) {\n    this.config = { ...RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Calculate delay with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    const exponentialDelay = this.config.baseDelay * Math.pow(this.config.exponentialBase, attempt);\n    const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n    const delay = exponentialDelay + jitter;\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  /**\n   * Check if error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error is retryable\n   */\n  isRetryableError(error) {\n    // Check for network errors\n    if (error.code && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    // Check for HTTP status codes\n    if (\n      error.response?.status &&\n      this.config.retryableStatusCodes.includes(error.response.status)\n    ) {\n      return true;\n    }\n\n    // Check for timeout errors\n    if (error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute function with retry logic\n   * @param {Function} fn - Async function to execute\n   * @param {string} operation - Operation name for logging\n   * @returns {Promise} Result of the function\n   */\n  async executeWithRetry(fn, operation = 'API call') {\n    let lastError;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const result = await fn();\n\n        // Log successful retry if this wasn't the first attempt\n        if (attempt > 0) {\n          console.log(`✅ ${operation} succeeded on attempt ${attempt + 1}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error)) {\n          console.warn(`❌ ${operation} failed with non-retryable error:`, error.message);\n          throw error;\n        }\n\n        const delay = this.calculateDelay(attempt);\n        console.warn(\n          `⚠️ ${operation} failed (attempt ${attempt + 1}/${this.config.maxRetries + 1}), retrying in ${delay}ms:`,\n          error.message\n        );\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    // All retries exhausted\n    console.error(\n      `❌ ${operation} failed after ${this.config.maxRetries + 1} attempts:`,\n      lastError.message\n    );\n    throw lastError;\n  }\n}\n\nclass DataFetchingService {\n  constructor(\n    env = import.meta.env,\n    customRateLimits = null,\n    retryConfig = null,\n    circuitBreakerConfig = null\n  ) {\n    this.rateLimiters = {};\n    this.cache = new Map();\n    this.cacheExpiry = new Map();\n    this.env = env;\n    this.customRateLimits = customRateLimits;\n    this.demoMode = this.isDemoMode(env);\n    this.retryManager = new RetryManager(retryConfig);\n    this.circuitBreakers = this.initializeCircuitBreakers(circuitBreakerConfig);\n    this.logger = apiLogger;\n    this.initializeRateLimiters();\n\n    // Log service initialization\n    this.logger.log('INFO', '🚀 DataFetchingService initialized', {\n      demoMode: this.demoMode,\n      environment: env.VITE_APP_ENV || 'development'\n    });\n  }\n\n  isDemoMode(env = import.meta.env) {\n    // Check if we're forcing demo mode\n    if (env.VITE_FORCE_DEMO_MODE === 'true') {\n      return true;\n    }\n\n    // Check if we're using demo API keys\n    const hasValidKeys =\n      (env.VITE_ALPHA_VANTAGE_API_KEY && env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo') ||\n      (env.VITE_FMP_API_KEY && env.VITE_FMP_API_KEY !== 'demo');\n    return !hasValidKeys;\n  }\n\n  initializeCircuitBreakers(config) {\n    const circuitBreakers = {};\n    const sources = ['ALPHA_VANTAGE', 'FMP', 'SEC_EDGAR', 'YAHOO_FINANCE'];\n\n    sources.forEach(source => {\n      circuitBreakers[source] = new CircuitBreaker(source, config);\n    });\n\n    return circuitBreakers;\n  }\n\n  initializeRateLimiters() {\n    const rateLimits = this.customRateLimits || RATE_LIMITS;\n    Object.keys(rateLimits).forEach(source => {\n      this.rateLimiters[source] = {\n        requests: [],\n        limit: rateLimits[source].requests,\n        period: rateLimits[source].period\n      };\n    });\n  }\n\n  async checkRateLimit(source) {\n    const limiter = this.rateLimiters[source];\n    if (!limiter) return true;\n\n    const now = Date.now();\n    limiter.requests = limiter.requests.filter(time => now - time < limiter.period);\n\n    if (limiter.requests.length >= limiter.limit) {\n      const oldestRequest = Math.min(...limiter.requests);\n      const waitTime = limiter.period - (now - oldestRequest);\n\n      // Log rate limiting event\n      this.logger.logRateLimit(source, waitTime, limiter.limit - limiter.requests.length);\n\n      throw new Error(\n        `Rate limit exceeded for ${source}. Please wait ${Math.ceil(waitTime / 1000)} seconds.`\n      );\n    }\n\n    limiter.requests.push(now);\n    return true;\n  }\n\n  getCacheKey(method, params) {\n    return `${method}_${JSON.stringify(params)}`;\n  }\n\n  getFromCache(key) {\n    const expiry = this.cacheExpiry.get(key);\n    if (expiry && Date.now() > expiry) {\n      this.cache.delete(key);\n      this.cacheExpiry.delete(key);\n      this.logger.logCache('miss', key, { reason: 'expired' });\n      return null;\n    }\n    const cached = this.cache.get(key);\n    if (cached !== undefined) {\n      this.logger.logCache('hit', key, { size: JSON.stringify(cached).length });\n      return cached;\n    }\n    this.logger.logCache('miss', key, { reason: 'not_found' });\n    return null;\n  }\n\n  setCache(key, data, ttlMinutes = 60) {\n    this.cache.set(key, data);\n    this.cacheExpiry.set(key, Date.now() + ttlMinutes * 60 * 1000);\n    this.logger.logCache('set', key, {\n      ttlMinutes,\n      size: JSON.stringify(data).length,\n      expiresAt: new Date(Date.now() + ttlMinutes * 60 * 1000).toISOString()\n    });\n  }\n\n  generateMockData(ticker, dataType) {\n    // Generate realistic mock data for demo purposes\n    const basePrice = 100 + Math.random() * 200;\n    const marketCap = 1000000000 + Math.random() * 10000000000;\n\n    // Map common tickers to realistic company names\n    const companyNames = {\n      AAPL: 'Apple Inc.',\n      MSFT: 'Microsoft Corporation',\n      GOOGL: 'Alphabet Inc.',\n      AMZN: 'Amazon.com Inc.',\n      META: 'Meta Platforms Inc.',\n      TSLA: 'Tesla Inc.',\n      NVDA: 'NVIDIA Corporation'\n    };\n\n    switch (dataType) {\n      case 'profile':\n        return {\n          symbol: ticker,\n          companyName: companyNames[ticker] || `${ticker} Corporation`,\n          mktCap: marketCap,\n          pe: 15 + Math.random() * 20,\n          pb: 1 + Math.random() * 4,\n          beta: 0.8 + Math.random() * 0.8,\n          sector: 'Technology',\n          industry: 'Software',\n          sharesOutstanding: marketCap / basePrice,\n          enterpriseValueOverEBITDA: 10 + Math.random() * 15,\n          debtToEquity: Math.random() * 2,\n          revenueTTM: marketCap * 0.8,\n          grossProfitMargin: 0.3 + Math.random() * 0.4,\n          netProfitMargin: 0.1 + Math.random() * 0.2,\n          returnOnEquityTTM: 0.1 + Math.random() * 0.2,\n          returnOnAssetsTTM: 0.05 + Math.random() * 0.15,\n          effectiveTaxRateTTM: 0.21,\n          fullTimeEmployees: 1000 + Math.random() * 50000,\n          ipoDate: '2010-01-01',\n          range: `$${(basePrice * 0.8).toFixed(2)} - $${(basePrice * 1.3).toFixed(2)}`\n        };\n\n      case 'marketData':\n        return {\n          symbol: ticker,\n          currentPrice: basePrice,\n          previousClose: basePrice * (0.98 + Math.random() * 0.04),\n          marketCap,\n          volume: 1000000 + Math.random() * 5000000,\n          currency: 'USD'\n        };\n\n      case 'incomeStatement':\n      case 'income':\n        const revenue = marketCap * 0.8;\n        return [\n          {\n            revenue,\n            ebitda: revenue * 0.25,\n            netIncome: revenue * 0.15,\n            capex: revenue * 0.05,\n            interestExpense: revenue * 0.02,\n            grossProfitMargin: 0.6\n          }\n        ];\n\n      case 'balanceSheet':\n        return [\n          {\n            totalDebt: marketCap * 0.3,\n            cashAndCashEquivalents: marketCap * 0.1,\n            totalCurrentAssets: marketCap * 0.4,\n            totalCurrentLiabilities: marketCap * 0.2\n          }\n        ];\n\n      case 'cashFlow':\n        return [\n          {\n            freeCashFlow: marketCap * 0.12\n          }\n        ];\n\n      default:\n        return null;\n    }\n  }\n\n  async fetchCompanyProfile(ticker) {\n    const cacheKey = this.getCacheKey('profile', { ticker });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock data for', ticker);\n      const mockData = this.generateMockData(ticker, 'profile');\n      this.setCache(cacheKey, mockData, 1440);\n      return mockData;\n    }\n\n    return this.circuitBreakers.FMP.execute(async() => {\n      return this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        // Log API request start\n        const requestId = this.logger.logApiRequest('FMP', `/profile/${ticker}`, { ticker });\n\n        try {\n          const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/profile/${ticker}`, {\n            params: { apikey: DATA_SOURCES.FMP.apiKey },\n            timeout: 10000\n          });\n\n          if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          const profile = response.data[0];\n          if (!profile || typeof profile !== 'object') {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          // Log successful API response\n          this.logger.logApiResponse(requestId, true, {\n            profileFound: true,\n            ticker: profile.symbol\n          });\n\n          this.setCache(cacheKey, profile, 1440); // Cache for 24 hours\n          return profile;\n        } catch (error) {\n          // Log failed API response\n          this.logger.logApiResponse(requestId, false, null, error);\n          throw error;\n        }\n      }, `Company profile fetch for ${ticker}`);\n    }).catch(error => {\n      // Handle circuit breaker errors - preserve the circuitBreakerOpen property\n      if (error.circuitBreakerOpen) {\n        throw error;\n      }\n\n      // Handle authentication errors with fallback to demo mode\n      if (error.response?.status === 403 || error.response?.status === 401) {\n        console.warn('API key invalid, falling back to demo mode');\n        const mockData = this.generateMockData(ticker, 'profile');\n        this.setCache(cacheKey, mockData, 1440);\n        return mockData;\n      }\n      throw new Error(`Failed to fetch company profile: ${error.message}`);\n    });\n  }\n\n  async fetchFinancialStatements(\n    ticker,\n    statement = 'income-statement',\n    period = 'annual',\n    limit = 5\n  ) {\n    const cacheKey = this.getCacheKey('financials', { ticker, statement, period, limit });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock financial data for', ticker);\n      const mockData = this.generateMockData(\n        ticker,\n        statement.replace('-statement', '').replace('-', '')\n      );\n      this.setCache(cacheKey, mockData, 360);\n      return mockData;\n    }\n\n    return this.retryManager\n      .executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/${statement}/${ticker}`, {\n          params: {\n            apikey: DATA_SOURCES.FMP.apiKey,\n            period,\n            limit\n          },\n          timeout: 15000\n        });\n\n        if (!response.data || response.data.length === 0) {\n          throw new Error(`No ${statement} data found for ${ticker}`);\n        }\n\n        this.setCache(cacheKey, response.data, 360); // Cache for 6 hours\n        return response.data;\n      }, `Financial statements fetch for ${ticker} (${statement})`)\n      .catch(error => {\n        // Handle authentication errors with fallback to demo mode\n        if (error.response?.status === 403 || error.response?.status === 401) {\n          console.warn('API key invalid, falling back to demo mode');\n          const mockData = this.generateMockData(\n            ticker,\n            statement.replace('-statement', '').replace('-', '')\n          );\n          this.setCache(cacheKey, mockData, 360);\n          return mockData;\n        }\n        throw new Error(`Failed to fetch ${statement}: ${error.message}`);\n      });\n  }\n\n  async fetchMarketData(ticker, range = '1y') {\n    const cacheKey = this.getCacheKey('market', { ticker, range });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock market data for', ticker);\n      const mockData = this.generateMockData(ticker, 'marketData');\n      this.setCache(cacheKey, mockData, 15);\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        // Try Yahoo Finance first (no API key required)\n        const response = await axios.get(`${DATA_SOURCES.YAHOO_FINANCE.baseURL}/${ticker}`, {\n          params: { range, interval: '1d' },\n          timeout: 10000\n        });\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        const marketData = {\n          symbol: result.meta.symbol,\n          currentPrice: result.meta.regularMarketPrice,\n          previousClose: result.meta.previousClose,\n          marketCap: result.meta.marketCap,\n          volume: result.meta.regularMarketVolume,\n          timestamps: result.timestamp,\n          prices: result.indicators.quote[0],\n          currency: result.meta.currency\n        };\n\n        this.setCache(cacheKey, marketData, 15); // Cache for 15 minutes\n        return marketData;\n      }, `Market data fetch for ${ticker}`);\n    } catch (error) {\n      // Fallback to Alpha Vantage or demo mode\n      console.warn(`Primary market data source failed for ${ticker}, trying alternative`);\n      return this.fetchMarketDataAlternative(ticker);\n    }\n  }\n\n  async fetchMarketDataAlternative(ticker) {\n    if (this.demoMode) {\n      const mockData = this.generateMockData(ticker, 'marketData');\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('ALPHA_VANTAGE');\n\n        const response = await axios.get(DATA_SOURCES.ALPHA_VANTAGE.baseURL, {\n          params: {\n            function: 'GLOBAL_QUOTE',\n            symbol: ticker,\n            apikey: DATA_SOURCES.ALPHA_VANTAGE.apiKey\n          },\n          timeout: 10000\n        });\n\n        const quote = response.data['Global Quote'];\n        if (!quote || Object.keys(quote).length === 0) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        return {\n          symbol: quote['01. symbol'],\n          currentPrice: parseFloat(quote['05. price']),\n          previousClose: parseFloat(quote['08. previous close']),\n          volume: parseInt(quote['06. volume']),\n          change: parseFloat(quote['09. change']),\n          changePercent: quote['10. change percent']\n        };\n      }, `Alternative market data fetch for ${ticker}`);\n    } catch (error) {\n      console.warn('Alternative market data API failed, using demo data');\n      return this.generateMockData(ticker, 'marketData');\n    }\n  }\n\n  async fetchSECFilings(ticker, filingType = '10-K', count = 5) {\n    const cacheKey = this.getCacheKey('sec', { ticker, filingType, count });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('SEC filings not available in demo mode');\n        return [\n          {\n            form: filingType,\n            filingDate: '2023-12-31',\n            accessionNumber: '0000000000-00-000000',\n            reportDate: '2023-12-31',\n            acceptanceDateTime: '2024-01-15T16:30:00',\n            act: '34',\n            primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n            url: '#demo-filing'\n          }\n        ];\n      }\n\n      await this.checkRateLimit('SEC_EDGAR');\n\n      // This would need proper CIK lookup implementation\n      // For now, return demo data\n      return [\n        {\n          form: filingType,\n          filingDate: '2023-12-31',\n          accessionNumber: '0000000000-00-000000',\n          reportDate: '2023-12-31',\n          acceptanceDateTime: '2024-01-15T16:30:00',\n          act: '34',\n          primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n          url: '#demo-filing'\n        }\n      ];\n    } catch (error) {\n      throw new Error(`Failed to fetch SEC filings: ${error.message}`);\n    }\n  }\n\n  async fetchPeerComparables(ticker, industryCode = null) {\n    const cacheKey = this.getCacheKey('peers', { ticker, industryCode });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('Using demo peer data');\n        const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n        const peers = peerTickers.slice(0, 5).map(peerTicker => {\n          const basePrice = 100 + Math.random() * 200;\n          const marketCap = 1000000000 + Math.random() * 2000000000;\n          return {\n            symbol: peerTicker,\n            name: `${peerTicker} Corporation`,\n            marketCap,\n            currentPrice: basePrice,\n            sector: 'Technology',\n            industry: 'Software',\n            peRatio: 15 + Math.random() * 20,\n            evToEbitda: 10 + Math.random() * 15,\n            priceToBook: 1 + Math.random() * 4,\n            debtToEquity: Math.random() * 2\n          };\n        });\n        this.setCache(cacheKey, peers, 240);\n        return peers;\n      }\n\n      await this.checkRateLimit('FMP');\n\n      // Get company profile first to determine industry\n      const profile = await this.fetchCompanyProfile(ticker);\n\n      // For demo, use hardcoded peer list\n      const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n\n      // Fetch key metrics for peer analysis\n      const peerData = await Promise.allSettled(\n        peerTickers.slice(0, 5).map(async peerTicker => {\n          const peerProfile = await this.fetchCompanyProfile(peerTicker);\n          const peerMarket = await this.fetchMarketData(peerTicker);\n\n          return {\n            symbol: peerTicker,\n            name: peerProfile.companyName,\n            marketCap: peerProfile.mktCap,\n            currentPrice: peerMarket.currentPrice,\n            sector: peerProfile.sector,\n            industry: peerProfile.industry,\n            peRatio: peerProfile.pe,\n            evToEbitda: peerProfile.enterpriseValueOverEBITDA,\n            priceToBook: peerProfile.pb,\n            debtToEquity: peerProfile.debtToEquity\n          };\n        })\n      );\n\n      const validPeers = peerData\n        .filter(result => result.status === 'fulfilled')\n        .map(result => result.value);\n\n      this.setCache(cacheKey, validPeers, 240); // Cache for 4 hours\n      return validPeers;\n    } catch (error) {\n      throw new Error(`Failed to fetch peer comparables: ${error.message}`);\n    }\n  }\n\n  async fetchDCFInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, cashFlows, marketData] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'cash-flow-statement', 'annual', 5),\n        this.fetchMarketData(ticker)\n      ]);\n\n      // Calculate historical growth rates\n      const revenues = Array.isArray(incomeStatements)\n        ? incomeStatements.map(stmt => stmt.revenue).reverse()\n        : [incomeStatements.revenue];\n      const revenueGrowthRates = [];\n      for (let i = 1; i < revenues.length; i++) {\n        if (revenues[i - 1] && revenues[i]) {\n          revenueGrowthRates.push((revenues[i] - revenues[i - 1]) / revenues[i - 1]);\n        }\n      }\n      const avgRevenueGrowth =\n        revenueGrowthRates.length > 0\n          ? revenueGrowthRates.reduce((a, b) => a + b, 0) / revenueGrowthRates.length\n          : 0.05; // Default 5% growth\n\n      // Calculate free cash flow margin\n      const latestCashFlow = Array.isArray(cashFlows) ? cashFlows[0] : cashFlows;\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const fcfMargin = latestCashFlow.freeCashFlow / latestIncome.revenue;\n\n      // Estimate WACC components\n      const riskFreeRate = 0.045; // 4.5% - this should come from treasury rates API\n      const marketPremium = 0.065; // 6.5% historical market premium\n      const beta = profile.beta || 1.0;\n      const costOfEquity = riskFreeRate + beta * marketPremium;\n\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n      const totalDebt = latestBalance.totalDebt || 0;\n      const marketCap = marketData.marketCap || marketData.currentPrice * profile.sharesOutstanding;\n      const debtRatio = totalDebt / (totalDebt + marketCap);\n      const taxRate = profile.effectiveTaxRateTTM || 0.21;\n\n      const wacc = costOfEquity * (1 - debtRatio) + 0.04 * debtRatio * (1 - taxRate); // Assuming 4% cost of debt\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentRevenue: latestIncome.revenue,\n        revenueGrowthRate: avgRevenueGrowth,\n        fcfMargin,\n        wacc,\n        terminalGrowthRate: 0.025, // 2.5% long-term GDP growth assumption\n        currentPrice: marketData.currentPrice,\n        sharesOutstanding: profile.sharesOutstanding,\n        marketCap,\n        totalDebt,\n        cash: latestBalance.cashAndCashEquivalents || 0,\n        beta,\n        peRatio: profile.pe,\n        historicalData: {\n          revenues,\n          revenueGrowthRates,\n          freeCashFlows: Array.isArray(cashFlows)\n            ? cashFlows.map(cf => cf.freeCashFlow).reverse()\n            : [latestCashFlow.freeCashFlow],\n          margins: Array.isArray(incomeStatements)\n            ? incomeStatements.map(stmt => stmt.grossProfitMargin).reverse()\n            : [latestIncome.grossProfitMargin]\n        }\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch DCF inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async fetchLBOInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, marketData, peers] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 3),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 3),\n        this.fetchMarketData(ticker),\n        this.fetchPeerComparables(ticker)\n      ]);\n\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n\n      // Calculate key LBO metrics\n      const ebitda = latestIncome.ebitda;\n      const currentEV =\n        marketData.marketCap + latestBalance.totalDebt - latestBalance.cashAndCashEquivalents;\n      const evEbitdaMultiple = currentEV / ebitda;\n\n      // Peer multiples for exit assumptions\n      const peerEvEbitdaMultiples = peers\n        .filter(peer => peer.evToEbitda && peer.evToEbitda > 0)\n        .map(peer => peer.evToEbitda);\n      const avgPeerMultiple =\n        peerEvEbitdaMultiples.length > 0\n          ? peerEvEbitdaMultiples.reduce((a, b) => a + b, 0) / peerEvEbitdaMultiples.length\n          : evEbitdaMultiple;\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentPrice: marketData.currentPrice,\n        marketCap: marketData.marketCap,\n        enterpriseValue: currentEV,\n        ebitda,\n        evEbitdaMultiple,\n        revenue: latestIncome.revenue,\n        netIncome: latestIncome.netIncome,\n        totalDebt: latestBalance.totalDebt,\n        cash: latestBalance.cashAndCashEquivalents,\n        workingCapital: latestBalance.totalCurrentAssets - latestBalance.totalCurrentLiabilities,\n        capex: Math.abs(latestIncome.capex || 0),\n        debtToEbitda: latestBalance.totalDebt / ebitda,\n        interestCoverage: ebitda / (latestIncome.interestExpense || 1),\n        avgPeerMultiple,\n        suggestedPurchasePrice: ebitda * avgPeerMultiple,\n        maxDebtCapacity: ebitda * 6, // 6x EBITDA debt capacity assumption\n        sharesOutstanding: profile.sharesOutstanding\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch LBO inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async validateTicker(ticker) {\n    try {\n      // In demo mode, only validate known tickers\n      if (this.demoMode) {\n        const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA'];\n        return knownTickers.includes(ticker);\n      }\n\n      await this.fetchCompanyProfile(ticker);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Add method to check API status\n  async getApiStatus() {\n    const validationResults = await apiKeyValidator.validateAllKeys();\n    const metrics = this.logger.getMetrics();\n\n    return {\n      demoMode: this.demoMode,\n      cacheSize: this.cache.size,\n      validation: validationResults,\n      circuitBreakers: this.getCircuitBreakerStatus(),\n      metrics,\n      performance: {\n        uptime: metrics.uptime,\n        totalRequests: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.requests?.total || 0),\n          0\n        ),\n        totalErrors: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.error?.total || 0),\n          0\n        ),\n        averageResponseTime: this.calculateAverageResponseTime(metrics.services),\n        cacheHitRate: this.calculateCacheHitRate(metrics.cache)\n      },\n      availableKeys: {\n        alphaVantage: !!(\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY &&\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo'\n        ),\n        fmp: !!(import.meta.env.VITE_FMP_API_KEY && import.meta.env.VITE_FMP_API_KEY !== 'demo'),\n        quandl: !!(\n          import.meta.env.VITE_QUANDL_API_KEY && import.meta.env.VITE_QUANDL_API_KEY !== 'demo'\n        ),\n        fred: !!(import.meta.env.VITE_FRED_API_KEY && import.meta.env.VITE_FRED_API_KEY !== 'demo')\n      },\n      recommendations: validationResults.recommendations\n    };\n  }\n\n  // Get circuit breaker status for all services\n  getCircuitBreakerStatus() {\n    const status = {};\n    Object.keys(this.circuitBreakers).forEach(service => {\n      status[service] = this.circuitBreakers[service].getStatus();\n    });\n    return status;\n  }\n\n  // Calculate average response time across all services\n  calculateAverageResponseTime(services) {\n    let totalDuration = 0;\n    let totalRequests = 0;\n\n    Object.values(services).forEach(service => {\n      if (service.duration) {\n        totalDuration += service.duration.total;\n        totalRequests += service.duration.count;\n      }\n    });\n\n    return totalRequests > 0 ? Math.round(totalDuration / totalRequests) : 0;\n  }\n\n  // Calculate cache hit rate\n  calculateCacheHitRate(cache) {\n    const hits = cache.hit?.total || 0;\n    const misses = cache.miss?.total || 0;\n    const total = hits + misses;\n\n    return total > 0 ? Math.round((hits / total) * 100) : 0;\n  }\n\n  // Get recent logs for debugging\n  getRecentLogs(limit = 50, level = null) {\n    return this.logger.getRecentLogs(limit, level);\n  }\n\n  // Clear all metrics and logs\n  clearMetrics() {\n    this.logger.clear();\n  }\n\n  // Add method to validate API keys on demand\n  async validateApiKeys() {\n    return await apiKeyValidator.validateAllKeys();\n  }\n\n  /**\n   * Build comprehensive DCF model with advanced scenarios\n   * @param {string} symbol - Stock symbol\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete DCF analysis\n   */\n  async buildAdvancedDCFModel(symbol, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol)\n      ]);\n\n      // Prepare DCF inputs\n      const dcfInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        currentRevenue: financials.revenue || 0,\n        currentPrice: marketData.price || 0,\n        sharesOutstanding: profile.sharesOutstanding || 0,\n        totalDebt: profile.totalDebt || 0,\n        cash: profile.cash || 0,\n        historicalGrowthRates: this.calculateHistoricalGrowthRates(financials),\n        margins: {\n          ebitdaMargin: (financials.ebitda || 0) / (financials.revenue || 1)\n        },\n        balanceSheetData: financials,\n        marketData,\n        assumptions: {\n          ...assumptions,\n          wacc: assumptions.wacc || this.calculateWACC(profile, marketData),\n          revenueGrowthRate: assumptions.revenueGrowthRate || this.estimateGrowthRate(financials)\n        }\n      };\n\n      // Build comprehensive DCF model\n      const dcfModel = financialModelingEngine.buildDCFModel(dcfInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced DCF model built for ${symbol}`, {\n        baseCase: dcfModel.baseCase.pricePerShare,\n        scenarios: Object.keys(dcfModel.scenarios).length\n      });\n\n      return dcfModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build DCF model for ${symbol}`, { error: error.message });\n      throw new Error(`DCF modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {string} symbol - Stock symbol\n   * @param {Object} transactionInputs - Transaction parameters\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete LBO analysis\n   */\n  async buildAdvancedLBOModel(symbol, transactionInputs, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData, peerData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol),\n        this.fetchPeerComparison(symbol)\n      ]);\n\n      // Prepare LBO inputs\n      const lboInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        purchasePrice: transactionInputs.purchasePrice || marketData.marketCap,\n        ebitda: financials.ebitda || 0,\n        revenue: financials.revenue || 0,\n        marketData,\n        peerData,\n        assumptions: {\n          ...assumptions,\n          exit: {\n            ...assumptions.exit,\n            exitMultiple: assumptions.exit?.exitMultiple || this.calculatePeerAverageMultiple(peerData)\n          }\n        }\n      };\n\n      // Build comprehensive LBO model\n      const lboModel = lboModelingEngine.buildLBOModel(lboInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced LBO model built for ${symbol}`, {\n        baseCase: lboModel.baseCase.returnsAnalysis.irr,\n        scenarios: Object.keys(lboModel.scenarios).length\n      });\n\n      return lboModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build LBO model for ${symbol}`, { error: error.message });\n      throw new Error(`LBO modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate historical growth rates from financial data\n   * @param {Object} financials - Financial statements data\n   * @returns {Array} Historical growth rates\n   */\n  calculateHistoricalGrowthRates(financials) {\n    // This would analyze historical financial data to calculate growth rates\n    // Simplified implementation for now\n    return [0.15, 0.12, 0.10, 0.08, 0.06]; // Example declining growth rates\n  }\n\n  /**\n   * Estimate growth rate based on historical data\n   * @param {Object} financials - Financial statements data\n   * @returns {number} Estimated growth rate\n   */\n  estimateGrowthRate(financials) {\n    // Simplified growth rate estimation\n    // In practice, this would analyze multiple years of data\n    return 0.10; // 10% default growth rate\n  }\n\n  /**\n   * Calculate peer average multiple\n   * @param {Object} peerData - Peer comparison data\n   * @returns {number} Average peer multiple\n   */\n  calculatePeerAverageMultiple(peerData) {\n    if (!peerData || !peerData.peers) {\n      return 10; // Default multiple\n    }\n\n    const multiples = peerData.peers\n      .map(peer => peer.evToEbitda)\n      .filter(multiple => multiple && multiple > 0);\n\n    if (multiples.length === 0) {\n      return 10;\n    }\n\n    return multiples.reduce((sum, multiple) => sum + multiple, 0) / multiples.length;\n  }\n}\n\n// Export singleton instance\nexport const dataFetchingService = new DataFetchingService();\nexport default DataFetchingService;\n"],"names":["apiKeyValidator","constructor","this","validationResults","Map","lastValidation","validateAllKeys","results","timestamp","Date","overall","services","recommendations","apiKeys","alphaVantage","fmp","quandl","undefined","fred","validationPromises","validateAlphaVantage","validateFMP","validateQuandl","validateFRED","Promise","allSettled","processValidationResult","validServices","Object","values","filter","s","status","length","configuredServices","totalServices","keys","push","error","message","apiKey","response","axios","get","params","function","symbol","apikey","timeout","data","code","Array","isArray","api_key","rows","quandl_error","dataset","series_id","file_type","error_message","seriess","result","value","reason","getServiceStatus","serviceName","getOverallStatus","getRecommendations","shouldUseDemoMode","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","TRACE","DEFAULT_CONFIG","logLevel","enableMetrics","enablePerformanceTracking","enableErrorTracking","maxLogHistory","metricsRetentionPeriod","apiLogger","config","logs","metrics","performanceData","errorCounts","startTime","now","log","level","metadata","toUpperCase","logEntry","toISOString","id","generateLogId","trimLogs","outputToConsole","logApiRequest","service","endpoint","requestId","generateRequestId","sanitizeParams","set","logApiResponse","success","duration","responseSize","getResponseSize","recordMetric","statusText","recordError","delete","logRateLimit","waitTime","remainingRequests","action","logCircuitBreaker","state","emoji","OPEN","HALF_OPEN","CLOSED","toLowerCase","logCache","operation","key","hit","miss","clear","sanitizeCacheKey","metric","has","total","count","min","Infinity","max","avg","metricData","Math","cleanOldMetrics","errorKey","getMetrics","summary","uptime","totalLogs","cache","errors","entries","split","messageParts","join","getRecentLogs","limit","slice","reverse","random","toString","substr","sanitized","token","substring","JSON","stringify","cutoff","item","financialModelingEngine","modelCache","assumptions","getDefaultAssumptions","dcf","projectionYears","terminalGrowthRate","riskFreeRate","marketPremium","taxRate","capexAsPercentOfRevenue","nwcAsPercentOfRevenue","depreciationAsPercentOfRevenue","lbo","holdingPeriod","debtMultiples","senior","subordinated","interestRates","managementFeeRate","carriedInterestRate","ebitdaGrowthRate","debtPaydownRate","monte_carlo","iterations","confidenceIntervals","correlationMatrix","buildDCFModel","inputs","scenarios","companyName","_currentRevenue","_historicalGrowthRates","_margins","_balanceSheetData","_marketData","modelAssumptions","baseCase","calculateDCFScenario","scenarioResults","bull","bullAssumptions","revenueGrowthRate","wacc","bear","bearAssumptions","sensitivityAnalysis","performDCFSensitivityAnalysis","modelType","generateDCFSummary","currentPrice","scenarioName","currentRevenue","sharesOutstanding","totalDebt","cash","revenueProjections","projectRevenues","operatingProjections","projectOperatingMetrics","fcfProjections","calculateFreeCashFlows","terminalValue","calculateTerminalValue","pvOfCashFlows","calculatePresentValue","pvOfTerminalValue","enterpriseValue","equityValue","pricePerShare","upside","impliedMultiples","calculateImpliedMultiples","baseRevenue","growthRates","years","projections","i","growthRate","pow","year","revenue","map","projection","_index","ebitdaMargin","ebitda","depreciation","ebit","taxes","nopat","index","capex","nwcChange","finalFCF","discountRate","Error","cashFlows","startYear","reduce","pv","cf","currentYearEbitda","nextYearEbitda","evToCurrentEbitda","evToForwardEbitda","baseAssumptions","forEach","variable","variations","variation","adjustedAssumptions","scenario","pricesPerShare","p","priceRange","average","sum","recommendation","generateRecommendation","keyMetrics","impliedReturn","rating","confidence","abs","round","reasoning","generateRecommendationReasoning","upsideAbs","toFixed","lboModelingEngine","transaction","managementRollover","transactionFees","financingFees","debt","seniorDebtMultiple","subordinatedDebtMultiple","totalDebtMultiple","seniorInterestRate","subordinatedInterestRate","mandatoryPaydown","cashSweep","operating","exit","exitMultiple","exitMultipleRange","publicMarketDiscount","fees","hurdle","buildLBOModel","purchasePrice","_revenue","_peerData","transactionStructure","calculateTransactionStructure","calculateLBOScenario","upsideAssumptions","downside","downsideAssumptions","performLBOSensitivityAnalysis","generateLBOSummary","seniorDebt","totalUses","equityContribution","sponsorEquity","adjustedTotalDebt","adjustedSeniorDebt","subordinatedDebt","debtToEbitda","equityToTotalCapital","projectLBOOperatingPerformance","debtSchedule","calculateDebtSchedule","equityCashFlows","calculateEquityCashFlows","exitAnalysis","calculateExitAnalysis","returnsAnalysis","calculateReturnsMetrics","netProceeds","calculateLBOKeyMetrics","baseEbitda","operatingAssumptions","currentEbitda","ebitdaGrowth","unleveredFCF","debtAssumptions","schedule","seniorDebtBalance","subordinatedDebtBalance","seniorInterest","subordinatedInterest","totalInterest","cashAvailableForDebt","excessCash","totalPaydown","seniorPaydown","subordinatedPaydown","beginningBalance","endingBalance","interestExpense","principalPayment","managementFees","cashFlowToEquity","finalYearProjection","finalYearDebt","exitEbitda","totalDebtAtExit","grossProceeds","totalReturn","investedCapital","carriedInterest","managementProceeds","initialInvestment","exitProceeds","irr","NaN","moic","totalCashReturned","annualizedReturn","calculateIRR","isNaN","every","sign","rate","tolerance","npv","dnpv","j","factor","newRate","entryMultiple","leverageReduction","debtMultiple","newDebtMultiple","adjustedStructure","allScenarios","irrs","moics","returnRange","irrMin","irrMax","irrAverage","moicMin","moicMax","moicAverage","investmentHighlights","generateInvestmentHighlights","riskFactors","generateRiskFactors","highlights","risks","DATA_SOURCES","baseURL","fallbackURL","RATE_LIMITS","ALPHA_VANTAGE","requests","period","FMP","SEC_EDGAR","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","exponentialBase","jitterFactor","retryableStatusCodes","retryableErrors","CIRCUIT_BREAKER_CONFIG","failureThreshold","recoveryTimeout","monitoringPeriod","halfOpenMaxCalls","CIRCUIT_STATES","CircuitBreaker","name","failureCount","lastFailureTime","halfOpenCallCount","successCount","totalCalls","canExecute","recordSuccess","recordFailure","getStatus","failureRate","isOpen","nextRetryTime","execute","fn","circuitBreakerOpen","RetryManager","calculateDelay","attempt","exponentialDelay","delay","isRetryableError","includes","executeWithRetry","lastError","resolve","setTimeout","dataFetchingService","env","__vite_import_meta_env__","customRateLimits","retryConfig","circuitBreakerConfig","rateLimiters","cacheExpiry","demoMode","isDemoMode","retryManager","circuitBreakers","initializeCircuitBreakers","logger","initializeRateLimiters","environment","VITE_APP_ENV","VITE_FORCE_DEMO_MODE","VITE_ALPHA_VANTAGE_API_KEY","VITE_FMP_API_KEY","source","rateLimits","checkRateLimit","limiter","time","oldestRequest","ceil","getCacheKey","method","getFromCache","expiry","cached","size","setCache","ttlMinutes","expiresAt","generateMockData","ticker","dataType","basePrice","marketCap","companyNames","AAPL","MSFT","GOOGL","AMZN","META","TSLA","NVDA","mktCap","pe","pb","beta","sector","industry","enterpriseValueOverEBITDA","debtToEquity","revenueTTM","grossProfitMargin","netProfitMargin","returnOnEquityTTM","returnOnAssetsTTM","effectiveTaxRateTTM","fullTimeEmployees","ipoDate","range","previousClose","volume","currency","netIncome","cashAndCashEquivalents","totalCurrentAssets","totalCurrentLiabilities","freeCashFlow","fetchCompanyProfile","cacheKey","mockData","async","profile","profileFound","catch","fetchFinancialStatements","statement","replace","fetchMarketData","interval","chart","marketData","meta","regularMarketPrice","regularMarketVolume","timestamps","prices","indicators","quote","fetchMarketDataAlternative","parseFloat","parseInt","change","changePercent","fetchSECFilings","filingType","form","filingDate","accessionNumber","reportDate","acceptanceDateTime","act","primaryDocument","url","fetchPeerComparables","industryCode","peers","t","peerTicker","peRatio","evToEbitda","priceToBook","peerTickers","validPeers","peerProfile","peerMarket","fetchDCFInputs","incomeStatements","balanceSheets","all","revenues","stmt","revenueGrowthRates","avgRevenueGrowth","a","b","latestCashFlow","latestIncome","fcfMargin","costOfEquity","latestBalance","debtRatio","historicalData","freeCashFlows","margins","fetchLBOInputs","currentEV","evEbitdaMultiple","peerEvEbitdaMultiples","peer","avgPeerMultiple","workingCapital","interestCoverage","suggestedPurchasePrice","maxDebtCapacity","validateTicker","getApiStatus","cacheSize","validation","getCircuitBreakerStatus","performance","totalRequests","totalErrors","averageResponseTime","calculateAverageResponseTime","cacheHitRate","calculateCacheHitRate","availableKeys","totalDuration","hits","clearMetrics","validateApiKeys","buildAdvancedDCFModel","financials","dcfInputs","price","historicalGrowthRates","calculateHistoricalGrowthRates","balanceSheetData","calculateWACC","estimateGrowthRate","dcfModel","buildAdvancedLBOModel","transactionInputs","peerData","fetchPeerComparison","lboInputs","calculatePeerAverageMultiple","lboModel","multiples","multiple"],"mappings":"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"}
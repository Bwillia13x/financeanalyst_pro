{"version":3,"file":"index-wLxS2JA9.js","sources":["../../src/pages/scenario-analysis-sensitivity-tools/components/ResultsVisualizationPanel.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/ScenarioConfigPanel.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/SimulationControlBar.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/StatisticalSummaryTable.jsx","../../src/pages/scenario-analysis-sensitivity-tools/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  Line,\n  Area,\n  AreaChart\n} from 'recharts';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst ResultsVisualizationPanel = ({ simulationResults, isSimulating }) => {\n  const [activeChart, setActiveChart] = useState('distribution');\n  const [selectedMetric, setSelectedMetric] = useState('enterprise_value');\n\n  // Mock simulation results data\n  const mockResults = {\n    summary: {\n      mean: 2847.5,\n      median: 2823.1,\n      stdDev: 456.2,\n      min: 1654.3,\n      max: 4521.8,\n      percentile5: 2156.7,\n      percentile95: 3687.4,\n      iterations: 10000\n    },\n    distribution: Array.from({ length: 50 }, (_, i) => ({\n      value: 1500 + i * 60,\n      frequency: Math.max(0, Math.round(200 * Math.exp(-Math.pow((i - 25) / 10, 2))))\n    })),\n    tornado: [\n      { variable: 'Revenue Growth', impact: 847.2, direction: 'positive' },\n      { variable: 'Terminal Growth', impact: 623.8, direction: 'positive' },\n      { variable: 'WACC', impact: -567.4, direction: 'negative' },\n      { variable: 'Margin Expansion', impact: 445.6, direction: 'positive' },\n      { variable: 'CapEx Ratio', impact: -334.2, direction: 'negative' },\n      { variable: 'Working Capital', impact: -187.9, direction: 'negative' }\n    ],\n    scatter: Array.from({ length: 1000 }, (_, _i) => ({\n      revenueGrowth: 0.05 + Math.random() * 0.3,\n      enterpriseValue: 1800 + Math.random() * 2000 + (Math.random() - 0.5) * 500\n    })),\n    timeSeries: Array.from({ length: 20 }, (_, i) => ({\n      iteration: (i + 1) * 500,\n      mean: 2800 + Math.sin(i * 0.5) * 50 + Math.random() * 20,\n      confidence95: 3600 + Math.sin(i * 0.5) * 60 + Math.random() * 30,\n      confidence5: 2000 + Math.sin(i * 0.5) * 40 + Math.random() * 20\n    }))\n  };\n\n  const results = simulationResults || mockResults;\n\n  const chartTypes = [\n    { value: 'distribution', label: 'Distribution', icon: 'BarChart3' },\n    { value: 'tornado', label: 'Tornado Chart', icon: 'BarChart2' },\n    { value: 'scatter', label: 'Scatter Plot', icon: 'Scatter3D' },\n    { value: 'convergence', label: 'Convergence', icon: 'TrendingUp' }\n  ];\n\n  const metricOptions = [\n    { value: 'enterprise_value', label: 'Enterprise Value ($M)' },\n    { value: 'equity_value', label: 'Equity Value ($M)' },\n    { value: 'share_price', label: 'Share Price ($)' },\n    { value: 'irr', label: 'Internal Rate of Return (%)' },\n    { value: 'multiple', label: 'EV/EBITDA Multiple' }\n  ];\n\n  const exportOptions = [\n    { value: 'pdf', label: 'PDF Report' },\n    { value: 'excel', label: 'Excel Workbook' },\n    { value: 'csv', label: 'CSV Data' },\n    { value: 'png', label: 'PNG Image' }\n  ];\n\n  const renderDistributionChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Value Distribution</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ZoomIn\" />\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ZoomOut\" />\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"RotateCcw\" />\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={results.distribution}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"value\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <YAxis stroke=\"var(--color-muted-foreground)\" fontSize={12} />\n            <Tooltip\n              formatter={(value, _name) => [`${value} simulations`, 'Frequency']}\n              labelFormatter={value => `Value: $${(value / 1000).toFixed(1)}B`}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Bar dataKey=\"frequency\" fill=\"var(--color-primary)\" radius={[2, 2, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderTornadoChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Sensitivity Analysis</h3>\n        <Select\n          options={[\n            { value: 'absolute', label: 'Absolute Impact' },\n            { value: 'percentage', label: 'Percentage Impact' }\n          ]}\n          value=\"absolute\"\n          onChange={() => {}}\n          className=\"w-40\"\n        />\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={results.tornado} layout=\"horizontal\" margin={{ left: 100 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              type=\"number\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${Math.abs(value).toFixed(0)}M`}\n            />\n            <YAxis\n              type=\"category\"\n              dataKey=\"variable\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              width={90}\n            />\n            <Tooltip\n              formatter={(value, _name) => [`$${Math.abs(value).toFixed(1)}M`, 'Impact']}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Bar\n              dataKey=\"impact\"\n              fill={entry =>\n                entry.direction === 'positive' ? 'var(--color-success)' : 'var(--color-error)'\n              }\n              radius={[0, 2, 2, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderScatterChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Variable Correlation</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Select\n            options={[\n              { value: 'revenue_growth', label: 'Revenue Growth' },\n              { value: 'margin_expansion', label: 'Margin Expansion' },\n              { value: 'terminal_growth', label: 'Terminal Growth' }\n            ]}\n            value=\"revenue_growth\"\n            onChange={() => {}}\n            className=\"w-40\"\n          />\n          <span className=\"text-sm text-muted-foreground\">vs</span>\n          <Select\n            options={metricOptions}\n            value={selectedMetric}\n            onChange={setSelectedMetric}\n            className=\"w-40\"\n          />\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ScatterChart data={results.scatter}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"revenueGrowth\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `${(value * 100).toFixed(0)}%`}\n            />\n            <YAxis\n              dataKey=\"enterpriseValue\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <Tooltip\n              formatter={(value, name) => [\n                name === 'revenueGrowth'\n                  ? `${(value * 100).toFixed(1)}%`\n                  : `$${(value / 1000).toFixed(1)}B`,\n                name === 'revenueGrowth' ? 'Revenue Growth' : 'Enterprise Value'\n              ]}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Scatter dataKey=\"enterpriseValue\" fill=\"var(--color-secondary)\" fillOpacity={0.6} />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderConvergenceChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Monte Carlo Convergence</h3>\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n          <Icon name=\"TrendingUp\" size={16} />\n          <span>Convergence achieved at 8,500 iterations</span>\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={results.timeSeries}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"iteration\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `${(value / 1000).toFixed(0)}K`}\n            />\n            <YAxis\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <Tooltip\n              formatter={(value, name) => [`$${(value / 1000).toFixed(2)}B`, name]}\n              labelFormatter={value => `Iteration: ${value.toLocaleString()}`}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Area\n              dataKey=\"confidence95\"\n              stroke=\"var(--color-primary)\"\n              fill=\"var(--color-primary)\"\n              fillOpacity={0.1}\n            />\n            <Area\n              dataKey=\"confidence5\"\n              stroke=\"var(--color-primary)\"\n              fill=\"var(--color-background)\"\n              fillOpacity={1}\n            />\n            <Line\n              dataKey=\"mean\" stroke=\"var(--color-primary)\" strokeWidth={2}\n              dot={false}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col bg-card\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Simulation Results</h2>\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={metricOptions}\n              value={selectedMetric}\n              onChange={setSelectedMetric}\n              className=\"w-48\"\n              disabled={isSimulating}\n            />\n            <Select\n              options={exportOptions}\n              value=\"pdf\"\n              onChange={() => {}}\n              className=\"w-32\"\n              disabled={isSimulating}\n            />\n            <Button variant=\"outline\" iconName=\"Download\" disabled={isSimulating}>\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Type Selector */}\n      <div className=\"border-b border-border\">\n        <div className=\"flex\">\n          {chartTypes.map(chart => (\n            <button\n              key={chart.value}\n              onClick={() => setActiveChart(chart.value)}\n              className={`flex items-center space-x-2 px-6 py-3 text-sm font-medium transition-smooth ${\n                activeChart === chart.value\n                  ? 'border-b-2 border-primary text-primary'\n                  : 'text-muted-foreground hover:text-foreground'\n              }`}\n              disabled={isSimulating}\n            >\n              <Icon name={chart.icon} size={16} />\n              <span>{chart.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Results Summary */}\n      <div className=\"p-6 border-b border-border bg-muted/30\">\n        <div className=\"grid grid-cols-6 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ${(results.summary.mean / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Mean Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ${(results.summary.median / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Median Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ±${(results.summary.stdDev / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Std Deviation</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-success\">\n              ${(results.summary.percentile95 / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">95th Percentile</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-error\">\n              ${(results.summary.percentile5 / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">5th Percentile</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              {results.summary.iterations.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Iterations</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {isSimulating ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n              <div className=\"text-lg font-medium text-foreground\">Running Simulation...</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Calculating Monte Carlo scenarios with {results.summary.iterations.toLocaleString()}{' '}\n                iterations\n              </div>\n            </div>\n          </div>\n        ) : (\n          <>\n            {activeChart === 'distribution' && renderDistributionChart()}\n            {activeChart === 'tornado' && renderTornadoChart()}\n            {activeChart === 'scatter' && renderScatterChart()}\n            {activeChart === 'convergence' && renderConvergenceChart()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsVisualizationPanel;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst ScenarioConfigPanel = ({ onScenarioUpdate, isSimulating }) => {\n  const [activeTab, setActiveTab] = useState('variables');\n  const [scenarios, setScenarios] = useState([\n    {\n      id: 1,\n      name: 'Base Case',\n      probability: 0.4,\n      variables: {\n        revenueGrowth: 0.15,\n        marginExpansion: 0.02,\n        capexRatio: 0.08,\n        terminalGrowth: 0.025\n      }\n    },\n    {\n      id: 2,\n      name: 'Bull Case',\n      probability: 0.3,\n      variables: {\n        revenueGrowth: 0.25,\n        marginExpansion: 0.05,\n        capexRatio: 0.06,\n        terminalGrowth: 0.035\n      }\n    },\n    {\n      id: 3,\n      name: 'Bear Case',\n      probability: 0.3,\n      variables: {\n        revenueGrowth: 0.05,\n        marginExpansion: -0.01,\n        capexRatio: 0.12,\n        terminalGrowth: 0.015\n      }\n    }\n  ]);\n\n  const [selectedScenario, setSelectedScenario] = useState(scenarios[0]);\n  const [correlationMatrix, setCorrelationMatrix] = useState([\n    { var1: 'Revenue Growth', var2: 'Margin Expansion', correlation: 0.65 },\n    { var1: 'Revenue Growth', var2: 'CapEx Ratio', correlation: -0.45 },\n    { var1: 'Margin Expansion', var2: 'Terminal Growth', correlation: 0.35 }\n  ]);\n\n  const distributionTypes = [\n    { value: 'normal', label: 'Normal Distribution' },\n    { value: 'triangular', label: 'Triangular Distribution' },\n    { value: 'uniform', label: 'Uniform Distribution' },\n    { value: 'lognormal', label: 'Log-Normal Distribution' }\n  ];\n\n  const variableTemplates = [\n    { value: 'dcf_standard', label: 'DCF Standard Variables' },\n    { value: 'lbo_analysis', label: 'LBO Analysis Variables' },\n    { value: 'comps_analysis', label: 'Comparable Analysis Variables' },\n    { value: 'custom', label: 'Custom Variable Set' }\n  ];\n\n  const tabs = [\n    { id: 'variables', label: 'Variables', icon: 'Settings' },\n    { id: 'distributions', label: 'Distributions', icon: 'BarChart3' },\n    { id: 'correlations', label: 'Correlations', icon: 'Network' },\n    { id: 'templates', label: 'Templates', icon: 'FileTemplate' }\n  ];\n\n  const handleVariableChange = (variableName, value) => {\n    const updatedScenario = {\n      ...selectedScenario,\n      variables: {\n        ...selectedScenario.variables,\n        [variableName]: parseFloat(value)\n      }\n    };\n    setSelectedScenario(updatedScenario);\n\n    const updatedScenarios = scenarios.map(s =>\n      s.id === selectedScenario.id ? updatedScenario : s\n    );\n    setScenarios(updatedScenarios);\n    onScenarioUpdate(updatedScenarios);\n  };\n\n  const addNewScenario = () => {\n    const newScenario = {\n      id: scenarios.length + 1,\n      name: `Scenario ${scenarios.length + 1}`,\n      probability: 0.1,\n      variables: { ...selectedScenario.variables }\n    };\n    setScenarios([...scenarios, newScenario]);\n  };\n\n  const renderVariablesTab = () => (\n    <div className=\"space-y-6\">\n      {/* Scenario Selector */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Scenario Configuration</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={addNewScenario}\n            disabled={isSimulating}\n          >\n            Add Scenario\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-2\">\n          {scenarios.map(scenario => (\n            <button\n              key={scenario.id}\n              onClick={() => setSelectedScenario(scenario)}\n              className={`p-3 rounded-lg border text-left transition-smooth ${\n                selectedScenario.id === scenario.id\n                  ? 'border-primary bg-primary/5 text-primary'\n                  : 'border-border hover:border-primary/50'\n              }`}\n              disabled={isSimulating}\n            >\n              <div className=\"font-medium text-sm\">{scenario.name}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                P: {(scenario.probability * 100).toFixed(0)}%\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Variable Inputs */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Key Variables</h4>\n        <div className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Revenue Growth Rate\"\n              type=\"number\"\n              value={selectedScenario.variables.revenueGrowth}\n              onChange={e => handleVariableChange('revenueGrowth', e.target.value)}\n              placeholder=\"0.15\"\n              disabled={isSimulating}\n              description=\"Annual revenue growth rate\"\n            />\n            <Input\n              label=\"Margin Expansion\"\n              type=\"number\"\n              value={selectedScenario.variables.marginExpansion}\n              onChange={e => handleVariableChange('marginExpansion', e.target.value)}\n              placeholder=\"0.02\"\n              disabled={isSimulating}\n              description=\"EBITDA margin improvement\"\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"CapEx Ratio\"\n              type=\"number\"\n              value={selectedScenario.variables.capexRatio}\n              onChange={e => handleVariableChange('capexRatio', e.target.value)}\n              placeholder=\"0.08\"\n              disabled={isSimulating}\n              description=\"CapEx as % of revenue\"\n            />\n            <Input\n              label=\"Terminal Growth Rate\"\n              type=\"number\"\n              value={selectedScenario.variables.terminalGrowth}\n              onChange={e => handleVariableChange('terminalGrowth', e.target.value)}\n              placeholder=\"0.025\"\n              disabled={isSimulating}\n              description=\"Long-term growth rate\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Probability Weights */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Probability Weights</h4>\n        <div className=\"space-y-2\">\n          {scenarios.map(scenario => (\n            <div\n              key={scenario.id}\n              className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n            >\n              <span className=\"font-medium text-sm\">{scenario.name}</span>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"number\"\n                  value={scenario.probability}\n                  onChange={e => {\n                    const updatedScenarios = scenarios.map(s =>\n                      s.id === scenario.id ? { ...s, probability: parseFloat(e.target.value) } : s\n                    );\n                    setScenarios(updatedScenarios);\n                  }}\n                  className=\"w-20\"\n                  disabled={isSimulating}\n                />\n                <span className=\"text-sm text-muted-foreground\">%</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDistributionsTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Distribution Parameters</h3>\n\n      <div className=\"space-y-4\">\n        {Object.keys(selectedScenario.variables).map(variable => (\n          <div key={variable} className=\"p-4 border border-border rounded-lg space-y-3\">\n            <h4 className=\"font-medium text-foreground capitalize\">\n              {variable.replace(/([A-Z])/g, ' $1').trim()}\n            </h4>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Select\n                label=\"Distribution Type\"\n                options={distributionTypes}\n                value=\"normal\"\n                onChange={() => {}}\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Standard Deviation\"\n                type=\"number\"\n                placeholder=\"0.05\"\n                disabled={isSimulating}\n                description=\"Volatility parameter\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Input\n                label=\"Min Value\" type=\"number\" placeholder=\"-0.1\"\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Most Likely\"\n                type=\"number\"\n                value={selectedScenario.variables[variable]}\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Max Value\" type=\"number\" placeholder=\"0.5\"\n                disabled={isSimulating}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderCorrelationsTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Variable Correlations</h3>\n\n      <div className=\"space-y-4\">\n        {correlationMatrix.map((correlation, index) => (\n          <div\n            key={index}\n            className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n          >\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm\">{correlation.var1}</div>\n              <div className=\"text-xs text-muted-foreground\">vs {correlation.var2}</div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"number\"\n                value={correlation.correlation}\n                onChange={e => {\n                  const updatedMatrix = correlationMatrix.map((c, i) =>\n                    i === index ? { ...c, correlation: parseFloat(e.target.value) } : c\n                  );\n                  setCorrelationMatrix(updatedMatrix);\n                }}\n                className=\"w-24\"\n                disabled={isSimulating}\n                min=\"-1\"\n                max=\"1\"\n                step=\"0.01\"\n              />\n              <div\n                className={`w-3 h-3 rounded-full ${\n                  correlation.correlation > 0.5\n                    ? 'bg-success'\n                    : correlation.correlation < -0.5\n                      ? 'bg-error'\n                      : 'bg-warning'\n                }`}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <Button\n        variant=\"outline\" iconName=\"Plus\" disabled={isSimulating}\n        className=\"w-full\"\n      >\n        Add Correlation Pair\n      </Button>\n    </div>\n  );\n\n  const renderTemplatesTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Scenario Templates</h3>\n\n      <Select\n        label=\"Load Template\"\n        options={variableTemplates}\n        value=\"dcf_standard\"\n        onChange={() => {}}\n        disabled={isSimulating}\n        description=\"Pre-configured variable sets for common analyses\"\n      />\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Template Actions</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Button\n            variant=\"outline\" iconName=\"Download\" disabled={isSimulating}\n            className=\"w-full\"\n          >\n            Import from Excel\n          </Button>\n          <Button\n            variant=\"outline\" iconName=\"Upload\" disabled={isSimulating}\n            className=\"w-full\"\n          >\n            Export Template\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Saved Templates</h4>\n        <div className=\"space-y-2\">\n          {['Tech Company DCF', 'REIT Analysis', 'Energy Sector Model'].map((template, index) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n            >\n              <div>\n                <div className=\"font-medium text-sm\">{template}</div>\n                <div className=\"text-xs text-muted-foreground\">Last modified: 2 days ago</div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\" size=\"sm\" iconName=\"Eye\"\n                  disabled={isSimulating}\n                />\n                <Button\n                  variant=\"ghost\" size=\"sm\" iconName=\"Download\"\n                  disabled={isSimulating}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col bg-card border-r border-border\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Scenario Configuration</h2>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-2 h-2 rounded-full ${isSimulating ? 'bg-warning' : 'bg-success'}`} />\n            <span className=\"text-sm text-muted-foreground\">\n              {isSimulating ? 'Simulating...' : 'Ready'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-border\">\n        <div className=\"flex\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n                activeTab === tab.id\n                  ? 'border-b-2 border-primary text-primary'\n                  : 'text-muted-foreground hover:text-foreground'\n              }`}\n              disabled={isSimulating}\n            >\n              <Icon name={tab.icon} size={16} />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {activeTab === 'variables' && renderVariablesTab()}\n        {activeTab === 'distributions' && renderDistributionsTab()}\n        {activeTab === 'correlations' && renderCorrelationsTab()}\n        {activeTab === 'templates' && renderTemplatesTab()}\n      </div>\n    </div>\n  );\n};\n\nexport default ScenarioConfigPanel;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst SimulationControlBar = ({ onRunSimulation, isSimulating, progress, onStopSimulation }) => {\n  const [simulationParams, setSimulationParams] = useState({\n    iterations: 10000,\n    confidenceLevel: 0.95,\n    randomSeed: 12345,\n    method: 'monte_carlo'\n  });\n\n  const iterationOptions = [\n    { value: 1000, label: '1,000 iterations' },\n    { value: 5000, label: '5,000 iterations' },\n    { value: 10000, label: '10,000 iterations' },\n    { value: 25000, label: '25,000 iterations' },\n    { value: 50000, label: '50,000 iterations' },\n    { value: 100000, label: '100,000 iterations' }\n  ];\n\n  const methodOptions = [\n    { value: 'monte_carlo', label: 'Monte Carlo Simulation' },\n    { value: 'latin_hypercube', label: 'Latin Hypercube Sampling' },\n    { value: 'sobol_sequence', label: 'Sobol Sequence' },\n    { value: 'halton_sequence', label: 'Halton Sequence' }\n  ];\n\n  const confidenceOptions = [\n    { value: 0.9, label: '90% Confidence' },\n    { value: 0.95, label: '95% Confidence' },\n    { value: 0.99, label: '99% Confidence' }\n  ];\n\n  const handleRunSimulation = () => {\n    onRunSimulation(simulationParams);\n  };\n\n  const getEstimatedTime = () => {\n    const baseTime = simulationParams.iterations / 1000; // seconds per 1000 iterations\n    return baseTime < 60 ? `~${Math.ceil(baseTime)}s` : `~${Math.ceil(baseTime / 60)}m`;\n  };\n\n  return (\n    <div className=\"bg-card border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Left Section - Simulation Parameters */}\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={iterationOptions}\n              value={simulationParams.iterations}\n              onChange={value => setSimulationParams(prev => ({ ...prev, iterations: value }))}\n              disabled={isSimulating}\n              className=\"w-48\"\n            />\n\n            <Select\n              options={methodOptions}\n              value={simulationParams.method}\n              onChange={value => setSimulationParams(prev => ({ ...prev, method: value }))}\n              disabled={isSimulating}\n              className=\"w-56\"\n            />\n\n            <Select\n              options={confidenceOptions}\n              value={simulationParams.confidenceLevel}\n              onChange={value => setSimulationParams(prev => ({ ...prev, confidenceLevel: value }))}\n              disabled={isSimulating}\n              className=\"w-40\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              type=\"number\"\n              value={simulationParams.randomSeed}\n              onChange={e =>\n                setSimulationParams(prev => ({ ...prev, randomSeed: parseInt(e.target.value) }))\n              }\n              disabled={isSimulating}\n              className=\"w-24\"\n              placeholder=\"Seed\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Shuffle\"\n              onClick={() =>\n                setSimulationParams(prev => ({\n                  ...prev,\n                  randomSeed: Math.floor(Math.random() * 100000)\n                }))\n              }\n              disabled={isSimulating}\n              title=\"Generate random seed\"\n            />\n          </div>\n        </div>\n\n        {/* Center Section - Progress */}\n        {isSimulating && (\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-32 h-2 bg-muted rounded-full overflow-hidden\">\n                <div\n                  className=\"h-full bg-primary transition-all duration-300\"\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n              <span className=\"text-sm font-mono text-muted-foreground\">\n                {progress.toFixed(1)}%\n              </span>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\">\n              <span className=\"font-mono\">\n                {Math.floor((progress / 100) * simulationParams.iterations).toLocaleString()}\n              </span>\n              <span className=\"mx-1\">/</span>\n              <span className=\"font-mono\">{simulationParams.iterations.toLocaleString()}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Right Section - Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {!isSimulating && (\n            <div className=\"text-sm text-muted-foreground\">Est. time: {getEstimatedTime()}</div>\n          )}\n\n          <div className=\"flex items-center space-x-2\">\n            {isSimulating ? (\n              <Button variant=\"destructive\" iconName=\"Square\" onClick={onStopSimulation}>\n                Stop Simulation\n              </Button>\n            ) : (\n              <Button variant=\"default\" iconName=\"Play\" onClick={handleRunSimulation}>\n                Run Simulation\n              </Button>\n            )}\n\n            <Button\n              variant=\"outline\"\n              iconName=\"RotateCcw\"\n              disabled={isSimulating}\n              title=\"Reset parameters\"\n              onClick={() =>\n                setSimulationParams({\n                  iterations: 10000,\n                  confidenceLevel: 0.95,\n                  randomSeed: 12345,\n                  method: 'monte_carlo'\n                })\n              }\n            />\n\n            <Button\n              variant=\"outline\"\n              iconName=\"Settings\"\n              disabled={isSimulating}\n              title=\"Advanced settings\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Info Bar */}\n      <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border\">\n        <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Cpu\" size={16} />\n            <span>Web Workers: 4 active</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"MemoryStick\" size={16} />\n            <span>Memory: 245MB allocated</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={16} />\n            <span>Last run: 2 min ago</span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\" size=\"sm\" iconName=\"Download\"\n            disabled={isSimulating}\n          >\n            Export Config\n          </Button>\n          <Button\n            variant=\"ghost\" size=\"sm\" iconName=\"Upload\"\n            disabled={isSimulating}\n          >\n            Import Config\n          </Button>\n          <Button\n            variant=\"ghost\" size=\"sm\" iconName=\"History\"\n            disabled={isSimulating}\n          >\n            Run History\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SimulationControlBar;\n","import React, { useState } from 'react';\n\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst StatisticalSummaryTable = ({ simulationResults, isSimulating }) => {\n  const [selectedMetric, setSelectedMetric] = useState('enterprise_value');\n  const [viewMode, setViewMode] = useState('summary');\n\n  // Mock statistical data\n  const mockStatistics = {\n    enterprise_value: {\n      descriptive: {\n        count: 10000,\n        mean: 2847.5,\n        median: 2823.1,\n        mode: 2798.3,\n        stdDev: 456.2,\n        variance: 208118.44,\n        skewness: 0.12,\n        kurtosis: 2.98,\n        min: 1654.3,\n        max: 4521.8,\n        range: 2867.5,\n        iqr: 615.7\n      },\n      percentiles: {\n        p1: 1876.4,\n        p5: 2156.7,\n        p10: 2287.9,\n        p25: 2534.2,\n        p50: 2823.1,\n        p75: 3149.9,\n        p90: 3456.8,\n        p95: 3687.4,\n        p99: 4123.6\n      },\n      confidence: {\n        ci90_lower: 2156.7,\n        ci90_upper: 3687.4,\n        ci95_lower: 2034.8,\n        ci95_upper: 3798.2,\n        ci99_lower: 1789.3,\n        ci99_upper: 4021.7\n      },\n      risk: {\n        var95: 1034.8,\n        var99: 1456.2,\n        cvar95: 1287.6,\n        cvar99: 1678.9,\n        probabilityOfLoss: 0.023,\n        expectedShortfall: 1456.8\n      }\n    }\n  };\n\n  const metricOptions = [\n    { value: 'enterprise_value', label: 'Enterprise Value ($M)' },\n    { value: 'equity_value', label: 'Equity Value ($M)' },\n    { value: 'share_price', label: 'Share Price ($)' },\n    { value: 'irr', label: 'Internal Rate of Return (%)' },\n    { value: 'multiple', label: 'EV/EBITDA Multiple' }\n  ];\n\n  const viewModeOptions = [\n    { value: 'summary', label: 'Summary Statistics' },\n    { value: 'percentiles', label: 'Percentile Analysis' },\n    { value: 'confidence', label: 'Confidence Intervals' },\n    { value: 'risk', label: 'Risk Metrics' }\n  ];\n\n  const statistics = simulationResults?.statistics || mockStatistics[selectedMetric];\n\n  const formatValue = (value, metric = selectedMetric) => {\n    if (metric === 'irr') return `${(value * 100).toFixed(2)}%`;\n    if (metric === 'multiple') return `${value.toFixed(2)}x`;\n    if (metric === 'share_price') return `$${value.toFixed(2)}`;\n    return `$${(value / 1000).toFixed(1)}B`;\n  };\n\n  const renderSummaryStatistics = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Descriptive Statistics</h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Central Tendency */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Central Tendency</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Mean</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.mean)}</span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Median</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.median)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Mode</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.mode)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Dispersion */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Dispersion</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Standard Deviation</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.stdDev)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Variance</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.variance)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Range</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.range)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Shape */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Distribution Shape</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Skewness</span>\n              <span className=\"font-mono text-sm\">\n                {statistics.descriptive.skewness.toFixed(3)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Kurtosis</span>\n              <span className=\"font-mono text-sm\">\n                {statistics.descriptive.kurtosis.toFixed(3)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Extremes */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Extremes</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Minimum</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.descriptive.min)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Maximum</span>\n              <span className=\"font-mono text-sm text-success\">\n                {formatValue(statistics.descriptive.max)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPercentileAnalysis = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Percentile Analysis</h3>\n\n      <div className=\"space-y-4\">\n        {Object.entries(statistics.percentiles).map(([percentile, value]) => {\n          const pct = percentile.replace('p', '');\n          const isExtreme = pct === '1' || pct === '99';\n          const isQuartile = ['25', '50', '75'].includes(pct);\n\n          return (\n            <div\n              key={percentile}\n              className={`flex justify-between items-center p-4 rounded-lg border ${\n                isExtreme\n                  ? 'border-warning bg-warning/5'\n                  : isQuartile\n                    ? 'border-primary bg-primary/5'\n                    : 'border-border bg-muted'\n              }`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-sm font-medium\">\n                  {pct === '50' ? 'Median' : `${pct}th Percentile`}\n                </span>\n                {isQuartile && (\n                  <div className=\"px-2 py-1 bg-primary text-primary-foreground text-xs rounded\">\n                    Q{pct === '25' ? '1' : pct === '50' ? '2' : '3'}\n                  </div>\n                )}\n              </div>\n              <span className=\"font-mono text-sm font-medium\">{formatValue(value)}</span>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Interpretation</h4>\n        <div className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• 50% of outcomes fall below {formatValue(statistics.percentiles.p50)}</p>\n          <p>\n            • 90% of outcomes fall between {formatValue(statistics.percentiles.p5)} and{' '}\n            {formatValue(statistics.percentiles.p95)}\n          </p>\n          <p>• Interquartile range: {formatValue(statistics.descriptive.iqr)}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderConfidenceIntervals = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Confidence Intervals</h3>\n\n      <div className=\"space-y-4\">\n        {[\n          {\n            level: '90%',\n            lower: statistics.confidence.ci90_lower,\n            upper: statistics.confidence.ci90_upper\n          },\n          {\n            level: '95%',\n            lower: statistics.confidence.ci95_lower,\n            upper: statistics.confidence.ci95_upper\n          },\n          {\n            level: '99%',\n            lower: statistics.confidence.ci99_lower,\n            upper: statistics.confidence.ci99_upper\n          }\n        ].map(ci => (\n          <div key={ci.level} className=\"p-4 border border-border rounded-lg\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"font-medium text-foreground\">{ci.level} Confidence Interval</span>\n              <span className=\"text-sm text-muted-foreground\">\n                Width: {formatValue(ci.upper - ci.lower)}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Lower Bound</div>\n                <div className=\"font-mono text-sm font-medium text-error\">\n                  {formatValue(ci.lower)}\n                </div>\n              </div>\n              <div className=\"flex-1 mx-4\">\n                <div className=\"h-2 bg-muted rounded-full relative\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-error via-warning to-success rounded-full\" />\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Upper Bound</div>\n                <div className=\"font-mono text-sm font-medium text-success\">\n                  {formatValue(ci.upper)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderRiskMetrics = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Risk Assessment</h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Value at Risk */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Value at Risk (VaR)</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-error/10 border border-error/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">95% VaR</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.risk.var95)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-error/10 border border-error/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">99% VaR</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.risk.var99)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Conditional VaR */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Conditional VaR (CVaR)</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">95% CVaR</span>\n              <span className=\"font-mono text-sm text-warning\">\n                {formatValue(statistics.risk.cvar95)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">99% CVaR</span>\n              <span className=\"font-mono text-sm text-warning\">\n                {formatValue(statistics.risk.cvar99)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Risk Metrics */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Additional Risk Metrics</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n            <span className=\"text-sm font-medium\">Probability of Loss</span>\n            <span className=\"font-mono text-sm\">\n              {(statistics.risk.probabilityOfLoss * 100).toFixed(2)}%\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n            <span className=\"text-sm font-medium\">Expected Shortfall</span>\n            <span className=\"font-mono text-sm\">\n              {formatValue(statistics.risk.expectedShortfall)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Risk Interpretation</h4>\n        <div className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• There is a 5% chance of losing more than {formatValue(statistics.risk.var95)}</p>\n          <p>\n            • In the worst 5% of scenarios, average loss is {formatValue(statistics.risk.cvar95)}\n          </p>\n          <p>• Probability of any loss: {(statistics.risk.probabilityOfLoss * 100).toFixed(1)}%</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (isSimulating) {\n    return (\n      <div className=\"h-full flex items-center justify-center bg-card\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <div className=\"text-lg font-medium text-foreground\">Calculating Statistics...</div>\n          <div className=\"text-sm text-muted-foreground\">\n            Processing simulation results and computing risk metrics\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-card\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Statistical Analysis</h2>\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={metricOptions}\n              value={selectedMetric}\n              onChange={setSelectedMetric}\n              className=\"w-48\"\n            />\n            <Select\n              options={viewModeOptions}\n              value={viewMode}\n              onChange={setViewMode}\n              className=\"w-48\"\n            />\n            <Button variant=\"outline\" iconName=\"Download\" size=\"sm\">\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {viewMode === 'summary' && renderSummaryStatistics()}\n        {viewMode === 'percentiles' && renderPercentileAnalysis()}\n        {viewMode === 'confidence' && renderConfidenceIntervals()}\n        {viewMode === 'risk' && renderRiskMetrics()}\n      </div>\n    </div>\n  );\n};\n\nexport default StatisticalSummaryTable;\n","import React, { useState, useEffect } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport ResultsVisualizationPanel from './components/ResultsVisualizationPanel';\nimport ScenarioConfigPanel from './components/ScenarioConfigPanel';\nimport SimulationControlBar from './components/SimulationControlBar';\nimport StatisticalSummaryTable from './components/StatisticalSummaryTable';\n\nconst ScenarioAnalysisSensitivityTools = () => {\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [simulationProgress, setSimulationProgress] = useState(0);\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [scenarios, setScenarios] = useState([]);\n  const [rightPanelView, setRightPanelView] = useState('visualization');\n  const [modelSyncStatus, setModelSyncStatus] = useState({\n    connected: true,\n    lastSync: new Date(Date.now() - 120000), // 2 minutes ago\n    baseModel: 'DCF_Analysis_v2.3'\n  });\n\n  // Simulate Monte Carlo calculation with Web Workers\n  const runSimulation = async params => {\n    setIsSimulating(true);\n    setSimulationProgress(0);\n    setSimulationResults(null);\n\n    // Simulate progress updates\n    const progressInterval = setInterval(() => {\n      setSimulationProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(progressInterval);\n          return 100;\n        }\n        return prev + Math.random() * 5;\n      });\n    }, 200);\n\n    // Simulate completion after progress reaches 100%\n    setTimeout(() => {\n      clearInterval(progressInterval);\n      setSimulationProgress(100);\n\n      // Mock results\n      const mockResults = {\n        summary: {\n          mean: 2847.5,\n          median: 2823.1,\n          stdDev: 456.2,\n          min: 1654.3,\n          max: 4521.8,\n          percentile5: 2156.7,\n          percentile95: 3687.4,\n          iterations: params.iterations\n        },\n        completedAt: new Date(),\n        parameters: params\n      };\n\n      setSimulationResults(mockResults);\n      setIsSimulating(false);\n    }, 8000);\n  };\n\n  const stopSimulation = () => {\n    setIsSimulating(false);\n    setSimulationProgress(0);\n  };\n\n  const handleScenarioUpdate = updatedScenarios => {\n    setScenarios(updatedScenarios);\n  };\n\n  const rightPanelViews = [\n    { id: 'visualization', label: 'Charts', icon: 'BarChart3' },\n    { id: 'statistics', label: 'Statistics', icon: 'Calculator' }\n  ];\n\n  useEffect(() => {\n    // Simulate model sync status updates\n    const syncInterval = setInterval(() => {\n      setModelSyncStatus(prev => ({\n        ...prev,\n        lastSync: new Date()\n      }));\n    }, 60000); // Update every minute\n\n    return () => clearInterval(syncInterval);\n  }, []);\n\n  const formatTimeAgo = date => {\n    const seconds = Math.floor((new Date() - date) / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <div className=\"pt-[60px] h-screen flex flex-col\">\n        {/* Simulation Control Bar */}\n        <SimulationControlBar\n          onRunSimulation={runSimulation}\n          isSimulating={isSimulating}\n          progress={simulationProgress}\n          onStopSimulation={stopSimulation}\n        />\n\n        {/* Model Sync Status Bar */}\n        <div className=\"bg-muted/50 border-b border-border px-6 py-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-2 h-2 rounded-full ${modelSyncStatus.connected ? 'bg-success' : 'bg-error'}`}\n                />\n                <span className=\"text-sm text-muted-foreground\">\n                  Base Model: {modelSyncStatus.baseModel}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"RefreshCw\" size={14} className=\"text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  Last sync: {formatTimeAgo(modelSyncStatus.lastSync)}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Users\" size={14} className=\"text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">3 collaborators active</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\" size=\"sm\" iconName=\"Sync\"\n                disabled={isSimulating}\n              >\n                Sync Now\n              </Button>\n              <Button\n                variant=\"ghost\" size=\"sm\" iconName=\"History\"\n                disabled={isSimulating}\n              >\n                Version History\n              </Button>\n              <Button\n                variant=\"ghost\" size=\"sm\" iconName=\"Share2\"\n                disabled={isSimulating}\n              >\n                Share Analysis\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel - Scenario Configuration (40%) */}\n          <div className=\"w-2/5 min-w-[480px]\">\n            <ScenarioConfigPanel\n              onScenarioUpdate={handleScenarioUpdate}\n              isSimulating={isSimulating}\n            />\n          </div>\n\n          {/* Right Panel - Results (60%) */}\n          <div className=\"flex-1 flex flex-col\">\n            {/* Right Panel Header */}\n            <div className=\"bg-card border-b border-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-1\">\n                  {rightPanelViews.map(view => (\n                    <button\n                      key={view.id}\n                      onClick={() => setRightPanelView(view.id)}\n                      className={`flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-lg transition-smooth ${\n                        rightPanelView === view.id\n                          ? 'bg-primary text-primary-foreground'\n                          : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                      }`}\n                      disabled={isSimulating}\n                    >\n                      <Icon name={view.icon} size={16} />\n                      <span>{view.label}</span>\n                    </button>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  {simulationResults && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      Completed: {simulationResults.completedAt.toLocaleTimeString()}\n                    </div>\n                  )}\n                  <Button\n                    variant=\"ghost\" size=\"sm\" iconName=\"Maximize2\"\n                    title=\"Fullscreen view\"\n                  />\n                  <Button\n                    variant=\"ghost\" size=\"sm\" iconName=\"Settings\"\n                    title=\"Display settings\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Right Panel Content */}\n            <div className=\"flex-1 overflow-hidden\">\n              {rightPanelView === 'visualization' ? (\n                <ResultsVisualizationPanel\n                  simulationResults={simulationResults}\n                  isSimulating={isSimulating}\n                />\n              ) : (\n                <StatisticalSummaryTable\n                  simulationResults={simulationResults}\n                  isSimulating={isSimulating}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Status Bar */}\n        <div className=\"bg-muted/30 border-t border-border px-6 py-2\">\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-6\">\n              <span>Scenarios: {scenarios.length}</span>\n              <span>Variables: 4 active</span>\n              <span>Correlations: 3 defined</span>\n              {simulationResults && (\n                <span>Iterations: {simulationResults.summary.iterations.toLocaleString()}</span>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <span>© {new Date().getFullYear()} FinanceAnalyst Pro</span>\n              <span>•</span>\n              <span>SOX Compliant</span>\n              <span>•</span>\n              <span>Audit Trail: Enabled</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScenarioAnalysisSensitivityTools;\n"],"names":["ResultsVisualizationPanel","simulationResults","isSimulating","activeChart","setActiveChart","useState","selectedMetric","setSelectedMetric","mockResults","summary","mean","median","stdDev","percentile5","percentile95","iterations","distribution","Array","from","length","_","i","value","frequency","Math","max","round","exp","pow","tornado","variable","impact","direction","scatter","_i","revenueGrowth","random","enterpriseValue","timeSeries","iteration","sin","confidence95","confidence5","results","metricOptions","label","jsxs","className","children","jsx","Select","options","onChange","disabled","Button","variant","iconName","icon","map","chart","onClick","Icon","name","size","toFixed","toLocaleString","Fragment","ResponsiveContainer","width","height","BarChart","data","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","tickFormatter","YAxis","Tooltip","formatter","_name","labelFormatter","contentStyle","backgroundColor","border","borderRadius","Bar","fill","radius","layout","margin","left","type","abs","entry","ScatterChart","Scatter","fillOpacity","AreaChart","Area","Line","strokeWidth","dot","ScenarioConfigPanel","onScenarioUpdate","activeTab","setActiveTab","scenarios","setScenarios","id","probability","variables","marginExpansion","capexRatio","terminalGrowth","selectedScenario","setSelectedScenario","correlationMatrix","setCorrelationMatrix","var1","var2","correlation","distributionTypes","handleVariableChange","variableName","updatedScenario","parseFloat","updatedScenarios","s","tab","newScenario","scenario","Input","e","target","placeholder","description","keys","replace","trim","index","updatedMatrix","c","min","step","template","SimulationControlBar","onRunSimulation","progress","onStopSimulation","simulationParams","setSimulationParams","confidenceLevel","randomSeed","method","prev","parseInt","floor","title","style","baseTime","ceil","getEstimatedTime","StatisticalSummaryTable","viewMode","setViewMode","statistics","enterprise_value","descriptive","count","mode","variance","skewness","kurtosis","range","iqr","percentiles","p1","p5","p10","p25","p50","p75","p90","p95","p99","confidence","ci90_lower","ci90_upper","ci95_lower","ci95_upper","ci99_lower","ci99_upper","risk","var95","var99","cvar95","cvar99","probabilityOfLoss","expectedShortfall","formatValue","metric","entries","percentile","pct","isExtreme","isQuartile","includes","level","lower","upper","ci","ScenarioAnalysisSensitivityTools","setIsSimulating","simulationProgress","setSimulationProgress","setSimulationResults","rightPanelView","setRightPanelView","modelSyncStatus","setModelSyncStatus","connected","lastSync","Date","now","baseModel","useEffect","syncInterval","setInterval","clearInterval","Header","async","params","progressInterval","setTimeout","completedAt","parameters","date","seconds","minutes","formatTimeAgo","view","toLocaleTimeString","getFullYear"],"mappings":"izBAoBA,MAAMA,EAA4B,EAAGC,oBAAmBC,mBACtD,MAAOC,EAAaC,GAAkBC,EAAAA,SAAS,iBACxCC,EAAgBC,GAAqBF,EAAAA,SAAS,oBAG/CG,EAAc,CAClBC,QAAS,CACPC,KAAM,OACNC,OAAQ,OACRC,OAAQ,MAGRC,YAAa,OACbC,aAAc,OACdC,WAAY,KAEdC,aAAcC,MAAMC,KAAK,CAAEC,OAAQ,IAAM,CAACC,EAAGC,KAAA,CAC3CC,MAAO,KAAW,GAAJD,EACdE,UAAWC,KAAKC,IAAI,EAAGD,KAAKE,MAAM,IAAMF,KAAKG,KAAKH,KAAKI,KAAKP,EAAI,IAAM,GAAI,SAE5EQ,QAAS,CACP,CAAEC,SAAU,iBAAkBC,OAAQ,MAAOC,UAAW,YACxD,CAAEF,SAAU,kBAAmBC,OAAQ,MAAOC,UAAW,YACzD,CAAEF,SAAU,OAAQC,QAAQ,MAAQC,UAAW,YAC/C,CAAEF,SAAU,mBAAoBC,OAAQ,MAAOC,UAAW,YAC1D,CAAEF,SAAU,cAAeC,QAAQ,MAAQC,UAAW,YACtD,CAAEF,SAAU,kBAAmBC,QAAQ,MAAQC,UAAW,aAE5DC,QAAShB,MAAMC,KAAK,CAAEC,OAAQ,KAAQ,CAACC,EAAGc,KAAA,CACxCC,cAAe,IAAuB,GAAhBX,KAAKY,SAC3BC,gBAAiB,KAAuB,IAAhBb,KAAKY,SAA0C,KAAvBZ,KAAKY,SAAW,OAElEE,WAAYrB,MAAMC,KAAK,CAAEC,OAAQ,IAAM,CAACC,EAAGC,KAAA,CACzCkB,UAAqB,KAATlB,EAAI,GAChBX,KAAM,KAA2B,GAApBc,KAAKgB,IAAQ,GAAJnB,GAAgC,GAAhBG,KAAKY,SAC3CK,aAAc,KAA2B,GAApBjB,KAAKgB,IAAQ,GAAJnB,GAAgC,GAAhBG,KAAKY,SACnDM,YAAa,IAA2B,GAApBlB,KAAKgB,IAAQ,GAAJnB,GAAgC,GAAhBG,KAAKY,aAIhDO,EAAU1C,GAAqBO,EAS/BoC,EAAgB,CACpB,CAAEtB,MAAO,mBAAoBuB,MAAO,yBACpC,CAAEvB,MAAO,eAAgBuB,MAAO,qBAChC,CAAEvB,MAAO,cAAeuB,MAAO,mBAC/B,CAAEvB,MAAO,MAAOuB,MAAO,+BACvB,CAAEvB,MAAO,WAAYuB,MAAO,uBA0N9B,OACEC,EAAAA,KAAC,MAAA,CAAIC,UAAU,+BAEbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,6BACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,uBACtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACC,EAAA,CACCC,QAASP,EACTtB,MAAOhB,EACP8C,SAAU7C,EACVwC,UAAU,OACVM,SAAUnD,IAEZ+C,EAAAA,IAACC,EAAA,CACCC,QAtOU,CACpB,CAAE7B,MAAO,MAAOuB,MAAO,cACvB,CAAEvB,MAAO,QAASuB,MAAO,kBACzB,CAAEvB,MAAO,MAAOuB,MAAO,YACvB,CAAEvB,MAAO,MAAOuB,MAAO,cAmObvB,MAAM,MACN8B,SAAU,OACVL,UAAU,OACVM,SAAUnD,IAEZ+C,EAAAA,IAACK,GAAOC,QAAQ,UAAUC,SAAS,WAAWH,SAAUnD,EAAc8C,SAAA,mBAQ5EC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yBACbC,SAAAC,EAAAA,IAAC,OAAIF,UAAU,OACZC,SArQU,CACjB,CAAE1B,MAAO,eAAgBuB,MAAO,eAAgBY,KAAM,aACtD,CAAEnC,MAAO,UAAWuB,MAAO,gBAAiBY,KAAM,aAClD,CAAEnC,MAAO,UAAWuB,MAAO,eAAgBY,KAAM,aACjD,CAAEnC,MAAO,cAAeuB,MAAO,cAAeY,KAAM,eAiQlCC,IAAIC,GACdb,EAAAA,KAAC,SAAA,CAECc,QAAS,IAAMxD,EAAeuD,EAAMrC,OACpCyB,UAAW,gFACT5C,IAAgBwD,EAAMrC,MAClB,yCACA,+CAEN+B,SAAUnD,EAEV8C,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAMH,EAAMF,KAAMM,KAAM,KAC9Bd,EAAAA,IAAC,OAAA,CAAMD,SAAAW,EAAMd,UAVRc,EAAMrC,kBAiBlB,MAAA,CAAIyB,UAAU,yCACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,qCAAqCC,SAAA,CAAA,KAC/CL,EAAQlC,QAAQC,KAAO,KAAMsD,QAAQ,GAAG,OAE7Cf,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,kBAEjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,qCAAqCC,SAAA,CAAA,KAC/CL,EAAQlC,QAAQE,OAAS,KAAMqD,QAAQ,GAAG,OAE/Cf,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,oBAEjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,qCAAqCC,SAAA,CAAA,MAC9CL,EAAQlC,QAAQG,OAAS,KAAMoD,QAAQ,GAAG,OAEhDf,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,qBAEjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,kCAAkCC,SAAA,CAAA,KAC5CL,EAAQlC,QAAQK,aAAe,KAAMkD,QAAQ,GAAG,OAErDf,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,uBAEjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCAAgCC,SAAA,CAAA,KAC1CL,EAAQlC,QAAQI,YAAc,KAAMmD,QAAQ,GAAG,OAEpDf,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,sBAEjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,qCACZC,WAAQvC,QAAQM,WAAWkD,mBAE9BhB,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,uBAMrDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,6BACZC,SAAA9C,EACC+C,EAAAA,IAAC,MAAA,CAAIF,UAAU,0CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,6FACfE,EAAAA,IAAC,MAAA,CAAIF,UAAU,sCAAsCC,SAAA,0BACrDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCAAgCC,SAAA,CAAA,0CACLL,EAAQlC,QAAQM,WAAWkD,iBAAkB,IAAI,qBAM/FnB,EAAAA,KAAAoB,EAAAA,SAAA,CACGlB,SAAA,CAAgB,iBAAhB7C,GAzTT2C,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,uBACtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,MAACK,GAAOC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,iBAC1CF,EAAA,CAAOC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,kBAC1CF,EAAA,CAAOC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,oBAI/CP,MAAC,MAAA,CAAIF,UAAU,OACbC,eAACmB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCrB,SAAAF,OAACwB,EAAA,CAASC,KAAM5B,EAAQ3B,aACtBgC,SAAA,CAAAC,EAAAA,IAACuB,EAAA,CAAcC,gBAAgB,MAAMC,OAAO,wBAC5CzB,EAAAA,IAAC0B,EAAA,CACCC,QAAQ,QACRF,OAAO,gCACPG,SAAU,GACVC,cAAexD,GAAS,KAAKA,EAAQ,KAAM0C,QAAQ,QAErDf,EAAAA,IAAC8B,EAAA,CAAML,OAAO,gCAAgCG,SAAU,KACxD5B,EAAAA,IAAC+B,EAAA,CACCC,UAAW,CAAC3D,EAAO4D,IAAU,CAAC,GAAG5D,gBAAqB,aACtD6D,eAAgB7D,GAAS,YAAYA,EAAQ,KAAM0C,QAAQ,MAC3DoB,aAAc,CACZC,gBAAiB,uBACjBC,OAAQ,gCACRC,aAAc,SAGlBtC,EAAAA,IAACuC,EAAA,CAAIZ,QAAQ,YAAYa,KAAK,uBAAuBC,OAAQ,CAAC,EAAG,EAAG,EAAG,eA4RtD,YAAhBvF,GApRT2C,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,yBACtDC,EAAAA,IAACC,EAAA,CACCC,QAAS,CACP,CAAE7B,MAAO,WAAYuB,MAAO,mBAC5B,CAAEvB,MAAO,aAAcuB,MAAO,sBAEhCvB,MAAM,WACN8B,SAAU,OACVL,UAAU,YAIdE,EAAAA,IAAC,OAAIF,UAAU,OACbC,eAACmB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCrB,gBAACsB,EAAA,CAASC,KAAM5B,EAAQd,QAAS8D,OAAO,aAAaC,OAAQ,CAAEC,KAAM,KACnE7C,SAAA,CAAAC,EAAAA,IAACuB,EAAA,CAAcC,gBAAgB,MAAMC,OAAO,wBAC5CzB,EAAAA,IAAC0B,EAAA,CACCmB,KAAK,SACLpB,OAAO,gCACPG,SAAU,GACVC,iBAAwB,IAAItD,KAAKuE,IAAIzE,GAAO0C,QAAQ,QAEtDf,EAAAA,IAAC8B,EAAA,CACCe,KAAK,WACLlB,QAAQ,WACRF,OAAO,gCACPG,SAAU,GACVT,MAAO,KAETnB,EAAAA,IAAC+B,EAAA,CACCC,UAAW,CAAC3D,EAAO4D,IAAU,CAAC,IAAI1D,KAAKuE,IAAIzE,GAAO0C,QAAQ,MAAO,UACjEoB,aAAc,CACZC,gBAAiB,uBACjBC,OAAQ,gCACRC,aAAc,SAGlBtC,EAAAA,IAACuC,EAAA,CACCZ,QAAQ,SACRa,KAAMO,GACgB,aAApBA,EAAMhE,UAA2B,uBAAyB,qBAE5D0D,OAAQ,CAAC,EAAG,EAAG,EAAG,eAyOH,YAAhBvF,GAhOT2C,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,yBACtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACC,EAAA,CACCC,QAAS,CACP,CAAE7B,MAAO,iBAAkBuB,MAAO,kBAClC,CAAEvB,MAAO,mBAAoBuB,MAAO,oBACpC,CAAEvB,MAAO,kBAAmBuB,MAAO,oBAErCvB,MAAM,iBACN8B,SAAU,OACVL,UAAU,SAEZE,EAAAA,IAAC,OAAA,CAAKF,UAAU,gCAAgCC,SAAA,OAChDC,EAAAA,IAACC,EAAA,CACCC,QAASP,EACTtB,MAAOhB,EACP8C,SAAU7C,EACVwC,UAAU,eAKhBE,MAAC,MAAA,CAAIF,UAAU,OACbC,eAACmB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCrB,SAAAF,OAACmD,EAAA,CAAa1B,KAAM5B,EAAQV,QAC1Be,SAAA,CAAAC,EAAAA,IAACuB,EAAA,CAAcC,gBAAgB,MAAMC,OAAO,wBAC5CzB,EAAAA,IAAC0B,EAAA,CACCC,QAAQ,gBACRF,OAAO,gCACPG,SAAU,GACVC,cAAexD,GAAS,IAAY,IAARA,GAAa0C,QAAQ,QAEnDf,EAAAA,IAAC8B,EAAA,CACCH,QAAQ,kBACRF,OAAO,gCACPG,SAAU,GACVC,cAAexD,GAAS,KAAKA,EAAQ,KAAM0C,QAAQ,QAErDf,EAAAA,IAAC+B,EAAA,CACCC,UAAW,CAAC3D,EAAOwC,IAAS,CACjB,kBAATA,EACI,IAAY,IAARxC,GAAa0C,QAAQ,MACzB,KAAK1C,EAAQ,KAAM0C,QAAQ,MACtB,kBAATF,EAA2B,iBAAmB,oBAEhDsB,aAAc,CACZC,gBAAiB,uBACjBC,OAAQ,gCACRC,aAAc,eAGjBW,EAAA,CAAQtB,QAAQ,kBAAkBa,KAAK,yBAAyBU,YAAa,eA4K7D,gBAAhBhG,GApKT2C,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,4BACtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAK,aAAaC,KAAM,KAC9Bd,EAAAA,IAAC,QAAKD,SAAA,mDAIVC,MAAC,MAAA,CAAIF,UAAU,OACbC,eAACmB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCrB,SAAAF,OAACsD,EAAA,CAAU7B,KAAM5B,EAAQL,WACvBU,SAAA,CAAAC,EAAAA,IAACuB,EAAA,CAAcC,gBAAgB,MAAMC,OAAO,wBAC5CzB,EAAAA,IAAC0B,EAAA,CACCC,QAAQ,YACRF,OAAO,gCACPG,SAAU,GACVC,cAAexD,GAAS,IAAIA,EAAQ,KAAM0C,QAAQ,QAEpDf,EAAAA,IAAC8B,EAAA,CACCL,OAAO,gCACPG,SAAU,GACVC,cAAexD,GAAS,KAAKA,EAAQ,KAAM0C,QAAQ,QAErDf,EAAAA,IAAC+B,EAAA,CACCC,UAAW,CAAC3D,EAAOwC,IAAS,CAAC,KAAKxC,EAAQ,KAAM0C,QAAQ,MAAOF,GAC/DqB,eAAgB7D,GAAS,cAAcA,EAAM2C,mBAC7CmB,aAAc,CACZC,gBAAiB,uBACjBC,OAAQ,gCACRC,aAAc,SAGlBtC,EAAAA,IAACoD,EAAA,CACCzB,QAAQ,eACRF,OAAO,uBACPe,KAAK,uBACLU,YAAa,KAEflD,EAAAA,IAACoD,EAAA,CACCzB,QAAQ,cACRF,OAAO,uBACPe,KAAK,0BACLU,YAAa,IAEflD,EAAAA,IAACqD,EAAA,CACC1B,QAAQ,OAAOF,OAAO,uBAAuB6B,YAAa,EAC1DC,KAAK,uBCrRbC,EAAsB,EAAGC,mBAAkBxG,mBAC/C,MAAOyG,EAAWC,GAAgBvG,EAAAA,SAAS,cACpCwG,EAAWC,GAAgBzG,WAAS,CACzC,CACE0G,GAAI,EACJjD,KAAM,YACNkD,YAAa,GACbC,UAAW,CACT9E,cAAe,IACf+E,gBAAiB,IACjBC,WAAY,IACZC,eAAgB,OAGpB,CACEL,GAAI,EACJjD,KAAM,YACNkD,YAAa,GACbC,UAAW,CACT9E,cAAe,IACf+E,gBAAiB,IACjBC,WAAY,IACZC,eAAgB,OAGpB,CACEL,GAAI,EACJjD,KAAM,YACNkD,YAAa,GACbC,UAAW,CACT9E,cAAe,IACf+E,iBAAiB,IACjBC,WAAY,IACZC,eAAgB,UAKfC,EAAkBC,GAAuBjH,EAAAA,SAASwG,EAAU,KAC5DU,EAAmBC,GAAwBnH,WAAS,CACzD,CAAEoH,KAAM,iBAAkBC,KAAM,mBAAoBC,YAAa,KACjE,CAAEF,KAAM,iBAAkBC,KAAM,cAAeC,aAAa,KAC5D,CAAEF,KAAM,mBAAoBC,KAAM,kBAAmBC,YAAa,OAG9DC,EAAoB,CACxB,CAAEtG,MAAO,SAAUuB,MAAO,uBAC1B,CAAEvB,MAAO,aAAcuB,MAAO,2BAC9B,CAAEvB,MAAO,UAAWuB,MAAO,wBAC3B,CAAEvB,MAAO,YAAauB,MAAO,4BAiBzBgF,EAAuB,CAACC,EAAcxG,KAC1C,MAAMyG,EAAkB,IACnBV,EACHJ,UAAW,IACNI,EAAiBJ,UACpBa,CAACA,GAAeE,WAAW1G,KAG/BgG,EAAoBS,GAEpB,MAAME,EAAmBpB,EAAUnD,IAAIwE,GACrCA,EAAEnB,KAAOM,EAAiBN,GAAKgB,EAAkBG,GAEnDpB,EAAamB,GACbvB,EAAiBuB,IAqSnB,OACEnF,EAAAA,KAAC,MAAA,CAAIC,UAAU,sDAEbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,6BACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,2BACtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,MAAC,OAAIF,UAAW,yBAAwB7C,EAAe,aAAe,sBACrE,OAAA,CAAK6C,UAAU,gCACbC,SAAA9C,EAAe,gBAAkB,kBAO1C+C,EAAAA,IAAC,MAAA,CAAIF,UAAU,yBACbC,SAAAC,EAAAA,IAAC,OAAIF,UAAU,OACZC,SA5UI,CACX,CAAE+D,GAAI,YAAalE,MAAO,YAAaY,KAAM,YAC7C,CAAEsD,GAAI,gBAAiBlE,MAAO,gBAAiBY,KAAM,aACrD,CAAEsD,GAAI,eAAgBlE,MAAO,eAAgBY,KAAM,WACnD,CAAEsD,GAAI,YAAalE,MAAO,YAAaY,KAAM,iBAwUjCC,IAAIyE,GACRrF,EAAAA,KAAC,SAAA,CAECc,QAAS,IAAMgD,EAAauB,EAAIpB,IAChChE,UAAW,gFACT4D,IAAcwB,EAAIpB,GACd,yCACA,+CAEN1D,SAAUnD,EAEV8C,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAMqE,EAAI1E,KAAMM,KAAM,KAC5Bd,EAAAA,IAAC,OAAA,CAAMD,SAAAmF,EAAItF,UAVNsF,EAAIpB,SAiBjBjE,EAAAA,KAAC,MAAA,CAAIC,UAAU,6BACZC,SAAA,CAAc,cAAd2D,GA7TL7D,OAAC,MAAA,CAAIC,UAAU,YAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,2BACtDC,EAAAA,IAACK,EAAA,CACCC,QAAQ,UACRQ,KAAK,KACLP,SAAS,OACTI,QApBa,KACrB,MAAMwE,EAAc,CAClBrB,GAAIF,EAAU1F,OAAS,EACvB2C,KAAM,YAAY+C,EAAU1F,OAAS,IACrC6F,YAAa,GACbC,UAAW,IAAKI,EAAiBJ,YAEnCH,EAAa,IAAID,EAAWuB,KAcpB/E,SAAUnD,EACX8C,SAAA,0BAKF,MAAA,CAAID,UAAU,yBACZC,SAAA6D,EAAUnD,IAAI2E,GACbvF,EAAAA,KAAC,SAAA,CAECc,QAAS,IAAM0D,EAAoBe,GACnCtF,UAAW,sDACTsE,EAAiBN,KAAOsB,EAAStB,GAC7B,2CACA,yCAEN1D,SAAUnD,EAEV8C,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,sBAAuBC,SAAAqF,EAASvE,OAC/ChB,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCAAgCC,SAAA,CAAA,OACjB,IAAvBqF,EAASrB,aAAmBhD,QAAQ,GAAG,SAXzCqE,EAAStB,UAmBtBjE,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,kBAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAC,EAAAA,IAACqF,EAAA,CACCzF,MAAM,sBACNiD,KAAK,SACLxE,MAAO+F,EAAiBJ,UAAU9E,cAClCiB,SAAUmF,GAAKV,EAAqB,gBAAiBU,EAAEC,OAAOlH,OAC9DmH,YAAY,OACZpF,SAAUnD,EACVwI,YAAY,+BAEdzF,EAAAA,IAACqF,EAAA,CACCzF,MAAM,mBACNiD,KAAK,SACLxE,MAAO+F,EAAiBJ,UAAUC,gBAClC9D,SAAUmF,GAAKV,EAAqB,kBAAmBU,EAAEC,OAAOlH,OAChEmH,YAAY,OACZpF,SAAUnD,EACVwI,YAAY,iCAGhB5F,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAC,EAAAA,IAACqF,EAAA,CACCzF,MAAM,cACNiD,KAAK,SACLxE,MAAO+F,EAAiBJ,UAAUE,WAClC/D,SAAUmF,GAAKV,EAAqB,aAAcU,EAAEC,OAAOlH,OAC3DmH,YAAY,OACZpF,SAAUnD,EACVwI,YAAY,0BAEdzF,EAAAA,IAACqF,EAAA,CACCzF,MAAM,uBACNiD,KAAK,SACLxE,MAAO+F,EAAiBJ,UAAUG,eAClChE,SAAUmF,GAAKV,EAAqB,iBAAkBU,EAAEC,OAAOlH,OAC/DmH,YAAY,QACZpF,SAAUnD,EACVwI,YAAY,mCAOpB5F,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,8BAC3C,MAAA,CAAID,UAAU,YACZC,SAAA6D,EAAUnD,IAAI2E,GACbvF,EAAAA,KAAC,MAAA,CAECC,UAAU,4DAEVC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAuBC,SAAAqF,EAASvE,OAChDhB,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACqF,EAAA,CACCxC,KAAK,SACLxE,MAAO+G,EAASrB,YAChB5D,SAAUmF,IACR,MAAMN,EAAmBpB,EAAUnD,IAAIwE,GACrCA,EAAEnB,KAAOsB,EAAStB,GAAK,IAAKmB,EAAGlB,YAAagB,WAAWO,EAAEC,OAAOlH,QAAW4G,GAE7EpB,EAAamB,IAEflF,UAAU,OACVM,SAAUnD,IAEZ+C,EAAAA,IAAC,OAAA,CAAKF,UAAU,gCAAgCC,SAAA,WAjB7CqF,EAAStB,aAoOL,kBAAdJ,GAzML7D,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,4BAEtDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,gBAAO2F,KAAKtB,EAAiBJ,WAAWvD,IAAI5B,GAC3CgB,EAAAA,KAAC,MAAA,CAAmBC,UAAU,gDAC5BC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,yCACXC,SAAAlB,EAAS8G,QAAQ,WAAY,OAAOC,SAGvC/F,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAC,EAAAA,IAACC,EAAA,CACCL,MAAM,oBACNM,QAASyE,EACTtG,MAAM,SACN8B,SAAU,OACVC,SAAUnD,IAEZ+C,EAAAA,IAACqF,EAAA,CACCzF,MAAM,qBACNiD,KAAK,SACL2C,YAAY,OACZpF,SAAUnD,EACVwI,YAAY,4BAIhB5F,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAC,EAAAA,IAACqF,EAAA,CACCzF,MAAM,YAAYiD,KAAK,SAAS2C,YAAY,OAC5CpF,SAAUnD,IAEZ+C,EAAAA,IAACqF,EAAA,CACCzF,MAAM,cACNiD,KAAK,SACLxE,MAAO+F,EAAiBJ,UAAUnF,GAClCuB,SAAUnD,IAEZ+C,EAAAA,IAACqF,EAAA,CACCzF,MAAM,YAAYiD,KAAK,SAAS2C,YAAY,MAC5CpF,SAAUnD,SAnCN4B,SAqMG,iBAAd6E,GAxJL7D,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,0BAEtDC,EAAAA,IAAC,OAAIF,UAAU,YACZC,WAAkBU,IAAI,CAACiE,EAAamB,IACnChG,EAAAA,KAAC,MAAA,CAECC,UAAU,wEAEVC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,SACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,sBAAuBC,SAAA2E,EAAYF,OAClD3E,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCAAgCC,SAAA,CAAA,MAAI2E,EAAYD,WAEjE5E,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACqF,EAAA,CACCxC,KAAK,SACLxE,MAAOqG,EAAYA,YACnBvE,SAAUmF,IACR,MAAMQ,EAAgBxB,EAAkB7D,IAAI,CAACsF,EAAG3H,IAC9CA,IAAMyH,EAAQ,IAAKE,EAAGrB,YAAaK,WAAWO,EAAEC,OAAOlH,QAAW0H,GAEpExB,EAAqBuB,IAEvBhG,UAAU,OACVM,SAAUnD,EACV+I,IAAI,KACJxH,IAAI,IACJyH,KAAK,SAEPjG,EAAAA,IAAC,MAAA,CACCF,UAAW,yBACT4E,EAAYA,YAAc,GACtB,aACAA,EAAYA,gBACV,WACA,qBA7BPmB,MAqCX7F,EAAAA,IAACK,EAAA,CACCC,QAAQ,UAAUC,SAAS,OAAOH,SAAUnD,EAC5C6C,UAAU,SACXC,SAAA,4BA2GgB,cAAd2D,GApGL7D,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,uBAEtDC,EAAAA,IAACC,EAAA,CACCL,MAAM,gBACNM,QA3QoB,CACxB,CAAE7B,MAAO,eAAgBuB,MAAO,0BAChC,CAAEvB,MAAO,eAAgBuB,MAAO,0BAChC,CAAEvB,MAAO,iBAAkBuB,MAAO,iCAClC,CAAEvB,MAAO,SAAUuB,MAAO,wBAwQtBvB,MAAM,eACN8B,SAAU,OACVC,SAAUnD,EACVwI,YAAY,qDAGd5F,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,qBAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAC,EAAAA,IAACK,EAAA,CACCC,QAAQ,UAAUC,SAAS,WAAWH,SAAUnD,EAChD6C,UAAU,SACXC,SAAA,sBAGDC,EAAAA,IAACK,EAAA,CACCC,QAAQ,UAAUC,SAAS,SAASH,SAAUnD,EAC9C6C,UAAU,SACXC,SAAA,0BAMLF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,oBAC5CC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,SAAA,CAAC,mBAAoB,gBAAiB,uBAAuBU,IAAI,CAACyF,EAAUL,IAC3EhG,EAAAA,KAAC,MAAA,CAECC,UAAU,wEAEVC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,sBAAuBC,SAAAmG,IACtClG,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,iCAEjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,MACnCH,SAAUnD,IAEZ+C,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,WACnCH,SAAUnD,SAdT4I,mBC7VbM,EAAuB,EAAGC,kBAAiBnJ,eAAcoJ,WAAUC,uBACvE,MAAOC,EAAkBC,GAAuBpJ,WAAS,CACvDU,WAAY,IACZ2I,gBAAiB,IACjBC,WAAY,MACZC,OAAQ,gBAkCV,OACE9G,EAAAA,KAAC,MAAA,CAAIC,UAAU,qCACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACC,EAAA,CACCC,QAtCa,CACvB,CAAE7B,MAAO,IAAMuB,MAAO,oBACtB,CAAEvB,MAAO,IAAMuB,MAAO,oBACtB,CAAEvB,MAAO,IAAOuB,MAAO,qBACvB,CAAEvB,MAAO,KAAOuB,MAAO,qBACvB,CAAEvB,MAAO,IAAOuB,MAAO,qBACvB,CAAEvB,MAAO,IAAQuB,MAAO,uBAiCdvB,MAAOkI,EAAiBzI,WACxBqC,YAAmBqG,EAAoBI,QAAcA,EAAM9I,WAAYO,KACvE+B,SAAUnD,EACV6C,UAAU,SAGZE,EAAAA,IAACC,EAAA,CACCC,QArCU,CACpB,CAAE7B,MAAO,cAAeuB,MAAO,0BAC/B,CAAEvB,MAAO,kBAAmBuB,MAAO,4BACnC,CAAEvB,MAAO,iBAAkBuB,MAAO,kBAClC,CAAEvB,MAAO,kBAAmBuB,MAAO,oBAkCzBvB,MAAOkI,EAAiBI,OACxBxG,YAAmBqG,EAAoBI,QAAcA,EAAMD,OAAQtI,KACnE+B,SAAUnD,EACV6C,UAAU,SAGZE,EAAAA,IAACC,EAAA,CACCC,QAtCc,CACxB,CAAE7B,MAAO,GAAKuB,MAAO,kBACrB,CAAEvB,MAAO,IAAMuB,MAAO,kBACtB,CAAEvB,MAAO,IAAMuB,MAAO,mBAoCZvB,MAAOkI,EAAiBE,gBACxBtG,YAAmBqG,EAAoBI,QAAcA,EAAMH,gBAAiBpI,KAC5E+B,SAAUnD,EACV6C,UAAU,YAIdD,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACqF,EAAA,CACCxC,KAAK,SACLxE,MAAOkI,EAAiBG,WACxBvG,SAAUmF,GACRkB,EAAoBI,IAAA,IAAcA,EAAMF,WAAYG,SAASvB,EAAEC,OAAOlH,UAExE+B,SAAUnD,EACV6C,UAAU,OACV0F,YAAY,SAEdxF,EAAAA,IAACK,EAAA,CACCC,QAAQ,QACRQ,KAAK,KACLP,SAAS,UACTI,QAAS,IACP6F,EAAoBI,IAAA,IACfA,EACHF,WAAYnI,KAAKuI,MAAsB,IAAhBvI,KAAKY,aAGhCiB,SAAUnD,EACV8J,MAAM,+BAMX9J,GACC4C,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,iDACbC,SAAAC,EAAAA,IAAC,MAAA,CACCF,UAAU,gDACVkH,MAAO,CAAE7F,MAAO,GAAGkF,UAGvBxG,EAAAA,KAAC,OAAA,CAAKC,UAAU,0CACbC,SAAA,CAAAsG,EAAStF,QAAQ,GAAG,UAIzBlB,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,YACbC,SAAAxB,KAAKuI,MAAOT,EAAW,IAAOE,EAAiBzI,YAAYkD,mBAE9DhB,EAAAA,IAAC,OAAA,CAAKF,UAAU,OAAOC,SAAA,YACtB,OAAA,CAAKD,UAAU,YAAaC,SAAAwG,EAAiBzI,WAAWkD,yBAM/DnB,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACZC,SAAA,EAAC9C,GACA4C,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCAAgCC,SAAA,CAAA,cA3FhC,MACvB,MAAMkH,EAAWV,EAAiBzI,WAAa,IAC/C,OAAOmJ,EAAW,GAAK,IAAI1I,KAAK2I,KAAKD,MAAe,IAAI1I,KAAK2I,KAAKD,EAAW,QAyFVE,MAG7DtH,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACZC,SAAA,CAAA9C,QACEoD,EAAA,CAAOC,QAAQ,cAAcC,SAAS,SAASI,QAAS2F,EAAkBvG,SAAA,oBAI3EC,EAAAA,IAACK,GAAOC,QAAQ,UAAUC,SAAS,OAAOI,QAxG1B,KAC1ByF,EAAgBG,IAuGkExG,SAAA,mBAK1EC,EAAAA,IAACK,EAAA,CACCC,QAAQ,UACRC,SAAS,YACTH,SAAUnD,EACV8J,MAAM,mBACNpG,QAAS,IACP6F,EAAoB,CAClB1I,WAAY,IACZ2I,gBAAiB,IACjBC,WAAY,MACZC,OAAQ,kBAKd3G,EAAAA,IAACK,EAAA,CACCC,QAAQ,UACRC,SAAS,WACTH,SAAUnD,EACV8J,MAAM,+BAOdlH,EAAAA,KAAC,MAAA,CAAIC,UAAU,qEACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAK,MAAMC,KAAM,KACvBd,EAAAA,IAAC,QAAKD,SAAA,6BAERF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAK,cAAcC,KAAM,KAC/Bd,EAAAA,IAAC,QAAKD,SAAA,+BAERF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAK,QAAQC,KAAM,KACzBd,EAAAA,IAAC,QAAKD,SAAA,8BAIVF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,WACnCH,SAAUnD,EACX8C,SAAA,kBAGDC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,SACnCH,SAAUnD,EACX8C,SAAA,kBAGDC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,UACnCH,SAAUnD,EACX8C,SAAA,0BCvMLqH,EAA0B,EAAGpK,oBAAmBC,mBACpD,MAAOI,EAAgBC,GAAqBF,EAAAA,SAAS,qBAC9CiK,EAAUC,GAAelK,EAAAA,SAAS,WAgEnCmK,EAAavK,GAAmBuK,YA7Df,CACrBC,iBAAkB,CAChBC,YAAa,CACXC,MAAO,IACPjK,KAAM,OACNC,OAAQ,OACRiK,KAAM,OACNhK,OAAQ,MACRiK,SAAU,UACVC,SAAU,IACVC,SAAU,KACV9B,IAAK,OACLxH,IAAK,OACLuJ,MAAO,OACPC,IAAK,OAEPC,YAAa,CACXC,GAAI,OACJC,GAAI,OACJC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,QAEPC,WAAY,CACVC,WAAY,OACZC,WAAY,OACZC,WAAY,OACZC,WAAY,OACZC,WAAY,OACZC,WAAY,QAEdC,KAAM,CACJC,MAAO,OACPC,MAAO,OACPC,OAAQ,OACRC,OAAQ,OACRC,kBAAmB,KACnBC,kBAAmB,UAoB0CnM,GAE7DoM,EAAc,CAACpL,EAAOqL,EAASrM,IACpB,QAAXqM,EAAyB,IAAY,IAARrL,GAAa0C,QAAQ,MACvC,aAAX2I,EAA8B,GAAGrL,EAAM0C,QAAQ,MACpC,gBAAX2I,EAAiC,IAAIrL,EAAM0C,QAAQ,KAChD,KAAK1C,EAAQ,KAAM0C,QAAQ,MAkRpC,OAAI9D,QAEC,MAAA,CAAI6C,UAAU,kDACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,6FACfE,EAAAA,IAAC,MAAA,CAAIF,UAAU,sCAAsCC,SAAA,8BACrDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,kEASrDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,+BAEbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,6BACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,yBACtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACC,EAAA,CACCC,QA7TU,CACpB,CAAE7B,MAAO,mBAAoBuB,MAAO,yBACpC,CAAEvB,MAAO,eAAgBuB,MAAO,qBAChC,CAAEvB,MAAO,cAAeuB,MAAO,mBAC/B,CAAEvB,MAAO,MAAOuB,MAAO,+BACvB,CAAEvB,MAAO,WAAYuB,MAAO,uBAyTlBvB,MAAOhB,EACP8C,SAAU7C,EACVwC,UAAU,SAEZE,EAAAA,IAACC,EAAA,CACCC,QA3TY,CACtB,CAAE7B,MAAO,UAAWuB,MAAO,sBAC3B,CAAEvB,MAAO,cAAeuB,MAAO,uBAC/B,CAAEvB,MAAO,aAAcuB,MAAO,wBAC9B,CAAEvB,MAAO,OAAQuB,MAAO,iBAwTdvB,MAAOgJ,EACPlH,SAAUmH,EACVxH,UAAU,SAEZE,EAAAA,IAACK,GAAOC,QAAQ,UAAUC,SAAS,WAAWO,KAAK,KAAKf,SAAA,mBAQ9DF,EAAAA,KAAC,MAAA,CAAIC,UAAU,6BACZC,SAAA,CAAa,YAAbsH,GAxTLxH,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,2BAEtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,qBAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,SACtCC,MAAC,QAAKF,UAAU,oBAAqBC,WAAYwH,EAAWE,YAAYhK,WAE1EoC,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,WACtCC,MAAC,QAAKF,UAAU,oBACbC,WAAYwH,EAAWE,YAAY/J,aAGxCmC,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,SACtCC,MAAC,QAAKF,UAAU,oBAAqBC,WAAYwH,EAAWE,YAAYE,iBAM9E9H,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,eAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,uBACtCC,MAAC,QAAKF,UAAU,oBACbC,WAAYwH,EAAWE,YAAY9J,aAGxCkC,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,aACtCC,MAAC,QAAKF,UAAU,oBACbC,WAAYwH,EAAWE,YAAYG,eAGxC/H,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,UACtCC,MAAC,QAAKF,UAAU,oBAAqBC,WAAYwH,EAAWE,YAAYM,kBAM9ElI,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,uBAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,aACtCC,EAAAA,IAAC,QAAKF,UAAU,oBACbC,WAAW0H,YAAYI,SAAS9G,QAAQ,QAG7ClB,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,aACtCC,EAAAA,IAAC,QAAKF,UAAU,oBACbC,WAAW0H,YAAYK,SAAS/G,QAAQ,cAOjDlB,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,aAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,YACtCC,MAAC,QAAKF,UAAU,+BACbC,WAAYwH,EAAWE,YAAYzB,UAGxCnG,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,YACtCC,MAAC,QAAKF,UAAU,iCACbC,WAAYwH,EAAWE,YAAYjJ,sBAyO9B,gBAAb6I,GA/NLxH,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,wBAEtDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,gBAAO4J,QAAQpC,EAAWU,aAAaxH,IAAI,EAAEmJ,EAAYvL,MACxD,MAAMwL,EAAMD,EAAWjE,QAAQ,IAAK,IAC9BmE,EAAoB,MAARD,GAAuB,OAARA,EAC3BE,EAAa,CAAC,KAAM,KAAM,MAAMC,SAASH,GAE/C,OACEhK,EAAAA,KAAC,MAAA,CAECC,UAAW,4DACTgK,EACI,8BACAC,EACE,8BACA,0BAGRhK,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBACbC,SAAQ,OAAR8J,EAAe,SAAW,GAAGA,mBAE/BE,GACClK,EAAAA,KAAC,MAAA,CAAIC,UAAU,+DAA+DC,SAAA,CAAA,IAClE,OAAR8J,EAAe,IAAc,OAARA,EAAe,IAAM,gBAIjD,OAAA,CAAK/J,UAAU,gCAAiCC,SAAA0J,EAAYpL,OAnBxDuL,OAyBb/J,EAAAA,KAAC,MAAA,CAAIC,UAAU,+BACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,mCAAmCC,SAAA,mBACjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,0CACbC,SAAA,CAAAF,OAAC,IAAA,CAAEE,SAAA,CAAA,gCAA8B0J,EAAYlC,EAAWU,YAAYK,eACnE,IAAA,CAAEvI,SAAA,CAAA,kCAC+B0J,EAAYlC,EAAWU,YAAYE,IAAI,OAAK,IAC3EsB,EAAYlC,EAAWU,YAAYQ,eAErC,IAAA,CAAE1I,SAAA,CAAA,0BAAwB0J,EAAYlC,EAAWE,YAAYO,iBAoLlD,eAAbX,GA7KLxH,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,yBAEtDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,SAAA,CACC,CACEkK,MAAO,MACPC,MAAO3C,EAAWoB,WAAWC,WAC7BuB,MAAO5C,EAAWoB,WAAWE,YAE/B,CACEoB,MAAO,MACPC,MAAO3C,EAAWoB,WAAWG,WAC7BqB,MAAO5C,EAAWoB,WAAWI,YAE/B,CACEkB,MAAO,MACPC,MAAO3C,EAAWoB,WAAWK,WAC7BmB,MAAO5C,EAAWoB,WAAWM,aAE/BxI,IAAI2J,GACJvK,EAAAA,KAAC,MAAA,CAAmBC,UAAU,sCAC5BC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yCACbC,SAAA,CAAAF,EAAAA,KAAC,OAAA,CAAKC,UAAU,8BAA+BC,SAAA,CAAAqK,EAAGH,MAAM,0BACxDpK,EAAAA,KAAC,OAAA,CAAKC,UAAU,gCAAgCC,SAAA,CAAA,UACtC0J,EAAYW,EAAGD,MAAQC,EAAGF,aAGtCrK,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,sBAC9C,MAAA,CAAID,UAAU,2CACZC,SAAA0J,EAAYW,EAAGF,YAGpBlK,EAAAA,IAAC,MAAA,CAAIF,UAAU,cACbC,SAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,qCACbC,SAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yFAGnBD,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,gCAAgCC,SAAA,sBAC9C,MAAA,CAAID,UAAU,6CACZC,SAAA0J,EAAYW,EAAGD,iBAtBdC,EAAGH,aAyJD,SAAb5C,GAxHLxH,OAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,wCAAwCC,SAAA,oBAEtDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,wBAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,sFACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,YACtCC,MAAC,QAAKF,UAAU,+BACbC,WAAYwH,EAAW2B,KAAKC,YAGjCtJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,sFACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,YACtCC,MAAC,QAAKF,UAAU,+BACbC,WAAYwH,EAAW2B,KAAKE,kBAOrCvJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,2BAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,0FACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,aACtCC,MAAC,QAAKF,UAAU,iCACbC,WAAYwH,EAAW2B,KAAKG,aAGjCxJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,0FACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,aACtCC,MAAC,QAAKF,UAAU,iCACbC,WAAYwH,EAAW2B,KAAKI,sBAQvCzJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,8BAA8BC,SAAA,4BAC5CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,wBACtCF,EAAAA,KAAC,OAAA,CAAKC,UAAU,oBACZC,SAAA,EAAoC,IAApCwH,EAAW2B,KAAKK,mBAAyBxI,QAAQ,GAAG,UAG1DlB,EAAAA,KAAC,MAAA,CAAIC,UAAU,4DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAsBC,SAAA,uBACtCC,MAAC,QAAKF,UAAU,oBACbC,WAAYwH,EAAW2B,KAAKM,8BAMrC3J,EAAAA,KAAC,MAAA,CAAIC,UAAU,0BACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,mCAAmCC,SAAA,wBACjDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,0CACbC,SAAA,CAAAF,OAAC,IAAA,CAAEE,SAAA,CAAA,8CAA4C0J,EAAYlC,EAAW2B,KAAKC,iBAC1E,IAAA,CAAEpJ,SAAA,CAAA,mDACgD0J,EAAYlC,EAAW2B,KAAKG,kBAE9E,IAAA,CAAEtJ,SAAA,CAAA,+BAAiE,IAApCwH,EAAW2B,KAAKK,mBAAyBxI,QAAQ,GAAG,uBC9UxFsJ,EAAmC,KACvC,MAAOpN,EAAcqN,GAAmBlN,EAAAA,UAAS,IAC1CmN,EAAoBC,GAAyBpN,EAAAA,SAAS,IACtDJ,EAAmByN,GAAwBrN,EAAAA,SAAS,OACpDwG,EAAWC,GAAgBzG,EAAAA,SAAS,KACpCsN,EAAgBC,GAAqBvN,EAAAA,SAAS,kBAC9CwN,EAAiBC,GAAsBzN,WAAS,CACrD0N,WAAW,EACXC,SAAU,IAAIC,KAAKA,KAAKC,MAAQ,MAChCC,UAAW,sBAiFb,OArBAC,EAAAA,UAAU,KAER,MAAMC,EAAeC,YAAY,KAC/BR,EAAmBjE,IAAA,IACdA,EACHmE,aAAcC,SAEf,KAEH,MAAO,IAAMM,cAAcF,IAC1B,IAYDvL,EAAAA,KAAC,MAAA,CAAIC,UAAU,6BACbC,SAAA,CAAAC,EAAAA,IAACuL,EAAA,IAED1L,EAAAA,KAAC,MAAA,CAAIC,UAAU,mCAEbC,SAAA,CAAAC,EAAAA,IAACmG,EAAA,CACCC,gBApFcoF,MAAMC,IAC1BnB,GAAgB,GAChBE,EAAsB,GACtBC,EAAqB,MAGrB,MAAMiB,EAAmBL,YAAY,KACnCb,EAAsB5D,GAChBA,GAAQ,KACV0E,cAAcI,GACP,KAEF9E,EAAuB,EAAhBrI,KAAKY,WAEpB,KAGHwM,WAAW,KACTL,cAAcI,GACdlB,EAAsB,KAGtB,MAAMjN,EAAc,CAClBC,QAAS,CACPC,KAAM,OACNC,OAAQ,OACRC,OAAQ,MACRqI,IAAK,OACLxH,IAAK,OACLZ,YAAa,OACbC,aAAc,OACdC,WAAY2N,EAAO3N,YAErB8N,gBAAiBZ,KACjBa,WAAYJ,GAGdhB,EAAqBlN,GACrB+M,GAAgB,IACf,MA8CGrN,eACAoJ,SAAUkE,EACVjE,iBA7Ce,KACrBgE,GAAgB,GAChBE,EAAsB,YA+CjB,MAAA,CAAI1K,UAAU,+CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CACCF,UAAW,yBAAwB8K,EAAgBE,UAAY,aAAe,cAEhFjL,EAAAA,KAAC,OAAA,CAAKC,UAAU,gCAAgCC,SAAA,CAAA,eACjC6K,EAAgBM,gBAGjCrL,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,MAACY,GAAKC,KAAK,YAAYC,KAAM,GAAIhB,UAAU,0BAC3CD,EAAAA,KAAC,OAAA,CAAKC,UAAU,gCAAgCC,SAAA,CAAA,cApCxC,CAAA+L,IACpB,MAAMC,EAAUxN,KAAKuI,WAAWkE,KAASc,GAAQ,KACjD,GAAIC,EAAU,GAAI,MAAO,GAAGA,SAC5B,MAAMC,EAAUzN,KAAKuI,MAAMiF,EAAU,IACrC,OAAIC,EAAU,GAAW,GAAGA,SAErB,GADOzN,KAAKuI,MAAMkF,EAAU,YAgCTC,CAAcrB,EAAgBG,gBAG9ClL,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,MAACY,GAAKC,KAAK,QAAQC,KAAM,GAAIhB,UAAU,0BACvCE,EAAAA,IAAC,OAAA,CAAKF,UAAU,gCAAgCC,SAAA,iCAIpDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,OACnCH,SAAUnD,EACX8C,SAAA,aAGDC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,UACnCH,SAAUnD,EACX8C,SAAA,oBAGDC,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,SACnCH,SAAUnD,EACX8C,SAAA,2BAQPF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BAEbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,sBACbC,SAAAC,EAAAA,IAACwD,EAAA,CACCC,iBA/FiBuB,IAC3BnB,EAAamB,IA+FH/H,mBAKJ4C,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAEbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,qCACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,MAAC,MAAA,CAAIF,UAAU,8BACZC,SAtGO,CACtB,CAAE+D,GAAI,gBAAiBlE,MAAO,SAAUY,KAAM,aAC9C,CAAEsD,GAAI,aAAclE,MAAO,aAAcY,KAAM,eAoGhBC,IAAIyL,GACnBrM,EAAAA,KAAC,SAAA,CAECc,QAAS,IAAMgK,EAAkBuB,EAAKpI,IACtChE,UAAW,2FACT4K,IAAmBwB,EAAKpI,GACpB,qCACA,8DAEN1D,SAAUnD,EAEV8C,SAAA,CAAAC,EAAAA,IAACY,EAAA,CAAKC,KAAMqL,EAAK1L,KAAMM,KAAM,KAC7Bd,EAAAA,IAAC,OAAA,CAAMD,SAAAmM,EAAKtM,UAVPsM,EAAKpI,OAehBjE,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACZC,SAAA,CAAA/C,GACC6C,EAAAA,KAAC,MAAA,CAAIC,UAAU,gCAAgCC,SAAA,CAAA,cACjC/C,EAAkB4O,YAAYO,wBAG9CnM,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,YACnCwG,MAAM,oBAER/G,EAAAA,IAACK,EAAA,CACCC,QAAQ,QAAQQ,KAAK,KAAKP,SAAS,WACnCwG,MAAM,6BAOd/G,EAAAA,IAAC,MAAA,CAAIF,UAAU,yBACZC,SAAmB,oBAClBC,EAAAA,IAACjD,EAAA,CACCC,oBACAC,iBAGF+C,EAAAA,IAACoH,EAAA,CACCpK,oBACAC,+BAQT,MAAA,CAAI6C,UAAU,+CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,kEACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,OAAC,OAAA,CAAKE,SAAA,CAAA,cAAY6D,EAAU1F,UAC5B8B,EAAAA,IAAC,QAAKD,SAAA,wBACNC,EAAAA,IAAC,QAAKD,SAAA,4BACL/C,UACE,OAAA,CAAK+C,SAAA,CAAA,eAAa/C,EAAkBQ,QAAQM,WAAWkD,uBAI5DnB,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,OAAC,OAAA,CAAKE,SAAA,CAAA,MAAA,IAAOiL,MAAOoB,cAAc,yBAClCpM,EAAAA,IAAC,QAAKD,SAAA,MACNC,EAAAA,IAAC,QAAKD,SAAA,kBACNC,EAAAA,IAAC,QAAKD,SAAA,MACNC,EAAAA,IAAC,QAAKD,SAAA"}
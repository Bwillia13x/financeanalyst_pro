{"version":3,"file":"index-Dxgq5Qus.js","sources":["../../src/pages/financial-model-workspace/components/AuditTrail.jsx","../../src/pages/financial-model-workspace/components/CalculationResults.jsx","../../src/pages/financial-model-workspace/components/FormulaBuilder.jsx","../../src/pages/financial-model-workspace/components/ModelTemplates.jsx","../../src/services/commandRegistry.js","../../src/services/utils/CryptoUtils.js","../../src/services/utils/CompressionUtils.js","../../src/services/persistence/LocalStorageService.js","../../src/services/persistence/IndexedDBService.js","../../src/services/persistence/SessionManager.js","../../src/services/persistence/DataMigrationService.js","../../src/services/persistence/PersistenceManager.js","../../src/services/commandProcessor.js","../../src/services/commands/coreCommands.js","../../src/services/commands/portfolioCommands.js","../../src/services/commands/valuationCommands.js","../../src/services/commands/technicalCommands.js","../../src/services/commands/esgCommands.js","../../src/services/commands/automationCommands.js","../../src/services/commands/dataCommands.js","../../src/services/commands/systemCommands.js","../../src/services/persistence/BackupService.js","../../src/services/persistence/PrivacyService.js","../../src/services/persistence/SyncService.js","../../src/services/persistence/PersistenceTestSuite.js","../../src/services/commands/persistenceCommands.js","../../src/services/commands/privateAnalysisCommands.js","../../src/services/commandInitializer.js","../../src/pages/financial-model-workspace/components/TerminalInterface.jsx","../../src/pages/financial-model-workspace/components/VariableInputs.jsx","../../src/pages/financial-model-workspace/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst AuditTrail = ({ calculations, errors, warnings }) => {\n  const [activeTab, setActiveTab] = useState('calculations');\n  const [expandedItems, setExpandedItems] = useState(new Set());\n  const [filterLevel, setFilterLevel] = useState('all');\n\n  const mockAuditData = {\n    calculations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 300000),\n        type: 'calculation',\n        operation: 'DCF Valuation',\n        formula: 'NPV(FCFF_2024:2028, WACC)',\n        result: 2547.5,\n        inputs: {\n          FCFF_2024: 187.5,\n          FCFF_2025: 206.3,\n          FCFF_2026: 226.9,\n          FCFF_2027: 249.6,\n          FCFF_2028: 274.6,\n          WACC: 0.098\n        },\n        executionTime: 0.045,\n        status: 'success'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 600000),\n        type: 'calculation',\n        operation: 'WACC Calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        result: 0.098,\n        inputs: {\n          cost_equity: 0.123,\n          cost_debt: 0.045,\n          tax_rate: 0.25,\n          debt_ratio: 0.4\n        },\n        executionTime: 0.012,\n        status: 'success'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 900000),\n        type: 'calculation',\n        operation: 'Terminal Value',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        result: 1247.3,\n        inputs: {\n          FCF_final: 274.6,\n          terminal_growth: 0.025,\n          WACC: 0.098\n        },\n        executionTime: 0.008,\n        status: 'success'\n      }\n    ],\n    errors: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 1200000),\n        type: 'error',\n        severity: 'high',\n        message: 'Division by zero in WACC calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        location: 'Cell B15',\n        suggestion: 'Ensure debt_ratio is not equal to 1.0',\n        resolved: true\n      }\n    ],\n    warnings: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 180000),\n        type: 'warning',\n        severity: 'medium',\n        message: 'Beta coefficient (1.15) is above industry average (0.95)',\n        formula: 'CAPM(risk_free, beta, market_premium)',\n        location: 'Assumptions',\n        suggestion: 'Consider reviewing beta calculation or using industry average',\n        acknowledged: false\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 420000),\n        type: 'warning',\n        severity: 'low',\n        message: 'Terminal growth rate (2.5%) close to discount rate component',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        location: 'Terminal Value',\n        suggestion: 'Ensure terminal growth rate is reasonable for long-term GDP growth',\n        acknowledged: true\n      }\n    ],\n    validations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 60000),\n        type: 'validation',\n        check: 'Circular Reference Check',\n        status: 'passed',\n        details: 'No circular references detected in model'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 120000),\n        type: 'validation',\n        check: 'Balance Sheet Check',\n        status: 'passed',\n        details: 'Assets = Liabilities + Equity for all projection years'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 240000),\n        type: 'validation',\n        check: 'Cash Flow Consistency',\n        status: 'warning',\n        details: 'Minor rounding differences in cash flow statements (<$0.1M)'\n      }\n    ]\n  };\n\n  const tabs = [\n    {\n      id: 'calculations',\n      label: 'Calculations',\n      icon: 'Calculator',\n      count: mockAuditData.calculations.length\n    },\n    { id: 'errors', label: 'Errors', icon: 'XCircle', count: mockAuditData.errors.length },\n    {\n      id: 'warnings',\n      label: 'Warnings',\n      icon: 'AlertTriangle',\n      count: mockAuditData.warnings.length\n    },\n    {\n      id: 'validations',\n      label: 'Validations',\n      icon: 'CheckCircle',\n      count: mockAuditData.validations.length\n    }\n  ];\n\n  const toggleExpanded = id => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'success':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      case 'error':\n        return { icon: 'XCircle', color: 'text-destructive' };\n      case 'warning':\n        return { icon: 'AlertTriangle', color: 'text-warning' };\n      case 'passed':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      default:\n        return { icon: 'Info', color: 'text-muted-foreground' };\n    }\n  };\n\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'high':\n        return 'text-destructive bg-destructive/10';\n      case 'medium':\n        return 'text-warning bg-warning/10';\n      case 'low':\n        return 'text-muted-foreground bg-muted';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const formatExecutionTime = time => {\n    if (time < 0.001) return '<1ms';\n    if (time < 1) return `${(time * 1000).toFixed(0)}ms`;\n    return `${time.toFixed(2)}s`;\n  };\n\n  const renderCalculations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.calculations.map(calc => (\n        <div key={calc.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Icon name=\"Calculator\" size={16} className=\"text-primary\" />\n                <span className=\"font-medium text-foreground\">{calc.operation}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(calc.status).color} bg-current/10`}\n                >\n                  {calc.status}\n                </span>\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {calc.formula}\n              </code>\n              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                <span>{calc.timestamp.toLocaleTimeString()}</span>\n                <span>Execution: {formatExecutionTime(calc.executionTime)}</span>\n                <span>Result: ${calc.result.toFixed(2)}M</span>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName={expandedItems.has(calc.id) ? 'ChevronUp' : 'ChevronDown'}\n              onClick={() => toggleExpanded(calc.id)}\n            />\n          </div>\n\n          {expandedItems.has(calc.id) && (\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <h5 className=\"text-sm font-medium text-foreground mb-2\">Input Values</h5>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Object.entries(calc.inputs).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">{key}:</span>\n                    <span className=\"text-foreground font-mono\">\n                      {typeof value === 'number' ? value.toFixed(3) : value}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderErrors = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.errors.map(error => (\n        <div key={error.id} className=\"p-4 bg-background border border-destructive/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"XCircle\" size={16} className=\"text-destructive mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{error.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(error.severity)}`}\n                >\n                  {error.severity}\n                </span>\n                {error.resolved && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-success bg-success/10\">\n                    Resolved\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {error.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {error.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {error.suggestion}\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                {error.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderWarnings = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.warnings.map(warning => (\n        <div key={warning.id} className=\"p-4 bg-background border border-warning/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"AlertTriangle\" size={16} className=\"text-warning mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{warning.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(warning.severity)}`}\n                >\n                  {warning.severity}\n                </span>\n                {warning.acknowledged && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-muted-foreground bg-muted\">\n                    Acknowledged\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {warning.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {warning.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {warning.suggestion}\n              </div>\n              <div className=\"flex items-center justify-between mt-3\">\n                <div className=\"text-xs text-muted-foreground\">\n                  {warning.timestamp.toLocaleString()}\n                </div>\n                {!warning.acknowledged && (\n                  <Button variant=\"outline\" size=\"sm\">\n                    Acknowledge\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderValidations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.validations.map(validation => (\n        <div key={validation.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon\n              name={getStatusIcon(validation.status).icon}\n              size={16}\n              className={`${getStatusIcon(validation.status).color} mt-0.5`}\n            />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{validation.check}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(validation.status).color} bg-current/10`}\n                >\n                  {validation.status}\n                </span>\n              </div>\n              <div className=\"text-sm text-muted-foreground mb-2\">{validation.details}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {validation.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'calculations':\n        return renderCalculations();\n      case 'errors':\n        return renderErrors();\n      case 'warnings':\n        return renderWarnings();\n      case 'validations':\n        return renderValidations();\n      default:\n        return renderCalculations();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Audit Trail</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Download\">\n            Export Log\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"RefreshCw\">\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n            {tab.count > 0 && (\n              <span className=\"px-2 py-1 bg-current/20 rounded-full text-xs\">{tab.count}</span>\n            )}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Audit logging active</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuditTrail;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst CalculationResults = ({ results, onExport }) => {\n  const [activeTab, setActiveTab] = useState('summary');\n  const [expandedSections, setExpandedSections] = useState(new Set(['valuation']));\n\n  const mockResults = {\n    summary: {\n      enterpriseValue: 2847.5,\n      equityValue: 2547.5,\n      sharePrice: 127.38,\n      impliedReturn: 0.156,\n      confidence: 0.87\n    },\n    cashFlows: [\n      { year: 2024, revenue: 1250, ebitda: 312.5, fcf: 187.5, pv: 170.5 },\n      { year: 2025, revenue: 1375, ebitda: 343.8, fcf: 206.3, pv: 172.8 },\n      { year: 2026, revenue: 1513, ebitda: 378.2, fcf: 226.9, pv: 175.2 },\n      { year: 2027, revenue: 1664, ebitda: 416.0, fcf: 249.6, pv: 177.7 },\n      { year: 2028, revenue: 1830, ebitda: 457.6, fcf: 274.6, pv: 180.3 }\n    ],\n    sensitivity: {\n      wacc: [0.08, 0.09, 0.1, 0.11, 0.12],\n      growth: [0.015, 0.02, 0.025, 0.03, 0.035],\n      matrix: [\n        [145.2, 138.7, 132.8, 127.4, 122.5],\n        [152.1, 144.9, 138.2, 132.1, 126.4],\n        [159.8, 151.9, 144.6, 137.8, 131.6],\n        [168.4, 159.7, 151.8, 144.4, 137.6],\n        [178.1, 168.4, 159.7, 151.8, 144.4]\n      ]\n    },\n    scenarios: [\n      { name: 'Base Case', probability: 0.6, sharePrice: 127.38, irr: 0.156 },\n      { name: 'Bull Case', probability: 0.25, sharePrice: 145.67, irr: 0.189 },\n      { name: 'Bear Case', probability: 0.15, sharePrice: 98.42, irr: 0.087 }\n    ],\n    multiples: [\n      { metric: 'EV/Revenue', current: 2.3, peer_avg: 2.8, premium: -17.9 },\n      { metric: 'EV/EBITDA', current: 9.1, peer_avg: 11.2, premium: -18.8 },\n      { metric: 'P/E Ratio', current: 18.5, peer_avg: 22.1, premium: -16.3 },\n      { metric: 'P/B Ratio', current: 2.1, peer_avg: 2.6, premium: -19.2 }\n    ]\n  };\n\n  const tabs = [\n    { id: 'summary', label: 'Summary', icon: 'BarChart3' },\n    { id: 'cashflows', label: 'Cash Flows', icon: 'TrendingUp' },\n    { id: 'sensitivity', label: 'Sensitivity', icon: 'Target' },\n    { id: 'scenarios', label: 'Scenarios', icon: 'GitBranch' },\n    { id: 'multiples', label: 'Multiples', icon: 'Layers' }\n  ];\n\n  const toggleSection = section => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const formatCurrency = (value, decimals = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(value);\n  };\n\n  const formatPercent = (value, decimals = 1) => {\n    return `${(value * 100).toFixed(decimals)}%`;\n  };\n\n  const renderSummary = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Enterprise Value</span>\n            <Icon name=\"Building\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.enterpriseValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Equity Value</span>\n            <Icon name=\"PieChart\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.equityValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Share Price</span>\n            <Icon name=\"DollarSign\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.sharePrice)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Implied Return</span>\n            <Icon name=\"TrendingUp\" size={16} className=\"text-success\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-success\">\n              {formatPercent(mockResults.summary.impliedReturn)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Indicator */}\n      <div className=\"p-4 bg-background border border-border rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-sm font-medium text-foreground\">Model Confidence</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {formatPercent(mockResults.summary.confidence)}\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2\">\n          <div\n            className=\"bg-success h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${mockResults.summary.confidence * 100}%` }}\n          />\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Based on data quality, assumption validity, and sensitivity analysis\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderCashFlows = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Year</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Revenue</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">EBITDA</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">FCF</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Present Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.cashFlows.map((cf, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{cf.year}</td>\n                <td className=\"py-3 text-right text-foreground\">\n                  {formatCurrency(cf.revenue, 0)}M\n                </td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.ebitda, 1)}M</td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.fcf, 1)}M</td>\n                <td className=\"py-3 text-right text-success font-medium\">\n                  {formatCurrency(cf.pv, 1)}M\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-foreground\">Terminal Value</span>\n          <span className=\"text-lg font-bold text-foreground\">{formatCurrency(1247.3, 1)}M</span>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          2.5% perpetual growth rate applied to 2028 FCF\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderSensitivity = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h4 className=\"text-sm font-medium text-foreground mb-2\">\n          Share Price Sensitivity Analysis\n        </h4>\n        <p className=\"text-xs text-muted-foreground\">WACC vs Terminal Growth Rate</p>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-xs\">\n          <thead>\n            <tr>\n              <th className=\"p-2 text-left text-muted-foreground\">WACC \\ Growth</th>\n              {mockResults.sensitivity.growth.map((growth, index) => (\n                <th key={index} className=\"p-2 text-center text-muted-foreground\">\n                  {formatPercent(growth)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.sensitivity.wacc.map((wacc, rowIndex) => (\n              <tr key={rowIndex} className=\"border-t border-border/50\">\n                <td className=\"p-2 text-muted-foreground font-medium\">{formatPercent(wacc)}</td>\n                {mockResults.sensitivity.matrix[rowIndex].map((value, colIndex) => (\n                  <td\n                    key={colIndex}\n                    className={`p-2 text-center font-medium ${\n                      Math.abs(value - 127.38) < 5\n                        ? 'bg-primary/20 text-primary'\n                        : 'text-foreground'\n                    }`}\n                  >\n                    {formatCurrency(value)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderScenarios = () => (\n    <div className=\"space-y-4\">\n      {mockResults.scenarios.map((scenario, index) => (\n        <div key={index} className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-medium text-foreground\">{scenario.name}</span>\n              <span className=\"text-xs bg-background px-2 py-1 rounded text-muted-foreground\">\n                {formatPercent(scenario.probability)} probability\n              </span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-foreground\">\n                {formatCurrency(scenario.sharePrice)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{formatPercent(scenario.irr)} IRR</div>\n            </div>\n          </div>\n          <div className=\"w-full bg-background rounded-full h-1\">\n            <div\n              className=\"bg-primary h-1 rounded-full\"\n              style={{ width: `${scenario.probability * 100}%` }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderMultiples = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Multiple</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Current</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Peer Avg</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">\n                Premium/Discount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.multiples.map((multiple, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{multiple.metric}</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.current}x</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.peer_avg}x</td>\n                <td\n                  className={`py-3 text-right font-medium ${\n                    multiple.premium > 0 ? 'text-success' : 'text-destructive'\n                  }`}\n                >\n                  {multiple.premium > 0 ? '+' : ''}\n                  {multiple.premium.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'summary':\n        return renderSummary();\n      case 'cashflows':\n        return renderCashFlows();\n      case 'sensitivity':\n        return renderSensitivity();\n      case 'scenarios':\n        return renderScenarios();\n      case 'multiples':\n        return renderMultiples();\n      default:\n        return renderSummary();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Calculation Results</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Download\"\n            onClick={() => onExport && onExport('excel')}\n          >\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Share2\">\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last Updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Calculations current</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalculationResults;\n","import React, { useState, useRef } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FormulaBuilder = ({ onFormulaCreate, variables }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [draggedFunction, setDraggedFunction] = useState(null);\n  const [currentFormula, setCurrentFormula] = useState('');\n  const [formulaName, setFormulaName] = useState('');\n  const [isBuilding, setIsBuilding] = useState(false);\n  const dropZoneRef = useRef(null);\n\n  const functionCategories = {\n    valuation: {\n      name: 'Valuation',\n      icon: 'TrendingUp',\n      functions: [\n        {\n          name: 'DCF',\n          syntax: 'DCF(fcf_array, discount_rate, terminal_growth)',\n          description: 'Discounted Cash Flow valuation'\n        },\n        {\n          name: 'NPV',\n          syntax: 'NPV(cash_flows, discount_rate)',\n          description: 'Net Present Value calculation'\n        },\n        { name: 'IRR', syntax: 'IRR(cash_flows)', description: 'Internal Rate of Return' },\n        {\n          name: 'TERMINAL_VALUE',\n          syntax: 'TERMINAL_VALUE(final_fcf, growth_rate, discount_rate)',\n          description: 'Terminal value calculation'\n        },\n        {\n          name: 'WACC',\n          syntax: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n          description: 'Weighted Average Cost of Capital'\n        }\n      ]\n    },\n    financial: {\n      name: 'Financial Ratios',\n      icon: 'Calculator',\n      functions: [\n        {\n          name: 'ROE',\n          syntax: 'ROE(net_income, shareholders_equity)',\n          description: 'Return on Equity'\n        },\n        { name: 'ROA', syntax: 'ROA(net_income, total_assets)', description: 'Return on Assets' },\n        {\n          name: 'DEBT_TO_EQUITY',\n          syntax: 'DEBT_TO_EQUITY(total_debt, total_equity)',\n          description: 'Debt to Equity ratio'\n        },\n        {\n          name: 'CURRENT_RATIO',\n          syntax: 'CURRENT_RATIO(current_assets, current_liabilities)',\n          description: 'Current ratio calculation'\n        },\n        {\n          name: 'QUICK_RATIO',\n          syntax: 'QUICK_RATIO(quick_assets, current_liabilities)',\n          description: 'Quick ratio calculation'\n        }\n      ]\n    },\n    statistical: {\n      name: 'Statistical',\n      icon: 'BarChart3',\n      functions: [\n        {\n          name: 'CORRELATION',\n          syntax: 'CORRELATION(dataset1, dataset2)',\n          description: 'Correlation coefficient'\n        },\n        {\n          name: 'REGRESSION',\n          syntax: 'REGRESSION(dependent_var, independent_var)',\n          description: 'Linear regression analysis'\n        },\n        {\n          name: 'VOLATILITY',\n          syntax: 'VOLATILITY(returns, period)',\n          description: 'Historical volatility'\n        },\n        {\n          name: 'BETA',\n          syntax: 'BETA(stock_returns, market_returns)',\n          description: 'Beta coefficient calculation'\n        },\n        {\n          name: 'SHARPE_RATIO',\n          syntax: 'SHARPE_RATIO(returns, risk_free_rate)',\n          description: 'Risk-adjusted return metric'\n        }\n      ]\n    },\n    mathematical: {\n      name: 'Mathematical',\n      icon: 'Sigma',\n      functions: [\n        { name: 'SUM', syntax: 'SUM(range)', description: 'Sum of values' },\n        { name: 'AVERAGE', syntax: 'AVERAGE(range)', description: 'Average of values' },\n        { name: 'MEDIAN', syntax: 'MEDIAN(range)', description: 'Median value' },\n        { name: 'STDEV', syntax: 'STDEV(range)', description: 'Standard deviation' },\n        {\n          name: 'PERCENTILE',\n          syntax: 'PERCENTILE(range, percentile)',\n          description: 'Percentile calculation'\n        }\n      ]\n    }\n  };\n\n  const savedFormulas = [\n    {\n      name: 'Custom_DCF_Tech',\n      formula: 'DCF(FCFF_PROJECTIONS, WACC(0.12, 0.04, 0.25, 0.3), 0.025)',\n      category: 'Custom'\n    },\n    {\n      name: 'LBO_Returns',\n      formula: 'IRR([INITIAL_INVESTMENT * -1, EXIT_VALUE])',\n      category: 'Custom'\n    },\n    {\n      name: 'Comp_Multiple',\n      formula: 'AVERAGE(PEER_EV_REVENUE) * TARGET_REVENUE',\n      category: 'Custom'\n    }\n  ];\n\n  const handleDragStart = (e, func) => {\n    setDraggedFunction(func);\n    e.dataTransfer.effectAllowed = 'copy';\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    if (draggedFunction) {\n      const newFormula = currentFormula + (currentFormula ? ' + ' : '') + draggedFunction.syntax;\n      setCurrentFormula(newFormula);\n      setDraggedFunction(null);\n    }\n  };\n\n  const addFunction = func => {\n    const newFormula = currentFormula + (currentFormula ? ' + ' : '') + func.syntax;\n    setCurrentFormula(newFormula);\n  };\n\n  const clearFormula = () => {\n    setCurrentFormula('');\n    setFormulaName('');\n  };\n\n  const saveFormula = () => {\n    if (formulaName && currentFormula) {\n      if (onFormulaCreate) {\n        onFormulaCreate({\n          name: formulaName,\n          formula: currentFormula,\n          timestamp: new Date()\n        });\n      }\n      setFormulaName('');\n      setCurrentFormula('');\n      setIsBuilding(false);\n    }\n  };\n\n  const validateFormula = () => {\n    // Simple validation - check for balanced parentheses\n    const openParens = (currentFormula.match(/\\(/g) || []).length;\n    const closeParens = (currentFormula.match(/\\)/g) || []).length;\n    return openParens === closeParens;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Wrench\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Formula Builder</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={() => setIsBuilding(!isBuilding)}\n          >\n            New Formula\n          </Button>\n        </div>\n      </div>\n\n      {/* Function Categories */}\n      <div className=\"flex border-b border-border\">\n        {Object.entries(functionCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Function Library */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-3\">\n          {functionCategories[selectedCategory].functions.map((func, index) => (\n            <div\n              key={index}\n              draggable\n              onDragStart={e => handleDragStart(e, func)}\n              className=\"p-3 bg-muted rounded-lg border border-border cursor-move hover:bg-muted/80 transition-smooth group\"\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon\n                      name=\"Move\"\n                      size={14}\n                      className=\"text-muted-foreground group-hover:text-foreground\"\n                    />\n                    <span className=\"font-medium text-foreground\">{func.name}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{func.description}</p>\n                  <code className=\"text-xs bg-background px-2 py-1 rounded mt-2 block font-mono text-foreground\">\n                    {func.syntax}\n                  </code>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"Plus\"\n                  onClick={() => addFunction(func)}\n                  className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Saved Formulas */}\n        <div className=\"border-t border-border p-4\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n            <Icon name=\"BookOpen\" size={16} />\n            <span>Saved Formulas</span>\n          </h4>\n          <div className=\"space-y-2\">\n            {savedFormulas.map((formula, index) => (\n              <div\n                key={index}\n                className=\"p-3 bg-background rounded-lg border border-border hover:bg-muted/50 transition-smooth cursor-pointer\"\n                onClick={() => setCurrentFormula(formula.formula)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-foreground\">{formula.name}</span>\n                  <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n                    {formula.category}\n                  </span>\n                </div>\n                <code className=\"text-xs text-muted-foreground mt-1 block font-mono\">\n                  {formula.formula}\n                </code>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Formula Builder Panel */}\n      {isBuilding && (\n        <div className=\"border-t border-border bg-background\">\n          <div className=\"p-4 space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Formula Name</label>\n              <input\n                type=\"text\"\n                value={formulaName}\n                onChange={e => setFormulaName(e.target.value)}\n                placeholder=\"Enter formula name...\"\n                className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                Formula Expression\n              </label>\n              <div\n                ref={dropZoneRef}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n                className=\"min-h-[100px] p-3 bg-input border-2 border-dashed border-border rounded-lg focus-within:border-ring transition-colors\"\n              >\n                <textarea\n                  value={currentFormula}\n                  onChange={e => setCurrentFormula(e.target.value)}\n                  placeholder=\"Drag functions here or type formula manually...\"\n                  className=\"w-full h-20 bg-transparent text-foreground placeholder-muted-foreground resize-none outline-none font-mono text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between mt-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {validateFormula() ? (\n                    <div className=\"flex items-center space-x-1 text-success\">\n                      <Icon name=\"CheckCircle\" size={14} />\n                      <span className=\"text-xs\">Valid syntax</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-1 text-destructive\">\n                      <Icon name=\"XCircle\" size={14} />\n                      <span className=\"text-xs\">Invalid syntax</span>\n                    </div>\n                  )}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {currentFormula.length} characters\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\" size=\"sm\" iconName=\"Trash2\"\n                onClick={clearFormula}\n              >\n                Clear\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\" size=\"sm\" iconName=\"Eye\"\n                  disabled={!validateFormula()}\n                >\n                  Preview\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  iconName=\"Save\"\n                  onClick={saveFormula}\n                  disabled={!formulaName || !currentFormula || !validateFormula()}\n                >\n                  Save Formula\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormulaBuilder;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ModelTemplates = ({ onTemplateSelect, onTemplateCreate }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const templateCategories = {\n    valuation: {\n      name: 'Valuation Models',\n      icon: 'TrendingUp',\n      templates: [\n        {\n          id: 'dcf_standard',\n          name: 'DCF - Standard',\n          description:\n            'Traditional discounted cash flow model with 5-year projections and terminal value',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-10',\n          popularity: 95,\n          features: [\n            '5-year projections',\n            'Terminal value',\n            'Sensitivity analysis',\n            'WACC calculation'\n          ]\n        },\n        {\n          id: 'dcf_tech',\n          name: 'DCF - Technology',\n          description: 'Specialized DCF for high-growth technology companies with adjusted metrics',\n          complexity: 'Advanced',\n          timeToComplete: '60 min',\n          lastUsed: '2024-07-08',\n          popularity: 87,\n          features: ['SaaS metrics', 'User-based projections', 'Churn analysis', 'Rule of 40']\n        },\n        {\n          id: 'sum_of_parts',\n          name: 'Sum-of-the-Parts',\n          description: 'Multi-business valuation with segment-specific assumptions and multiples',\n          complexity: 'Advanced',\n          timeToComplete: '90 min',\n          lastUsed: '2024-07-05',\n          popularity: 73,\n          features: [\n            'Segment analysis',\n            'Multiple approaches',\n            'Holding company discount',\n            'Synergy modeling'\n          ]\n        }\n      ]\n    },\n    lbo: {\n      name: 'LBO Models',\n      icon: 'Layers',\n      templates: [\n        {\n          id: 'lbo_standard',\n          name: 'LBO - Standard',\n          description: 'Complete leveraged buyout model with debt sizing and returns analysis',\n          complexity: 'Advanced',\n          timeToComplete: '120 min',\n          lastUsed: '2024-07-09',\n          popularity: 91,\n          features: ['Debt capacity', 'Returns waterfall', 'Management rollover', 'Exit scenarios']\n        },\n        {\n          id: 'lbo_growth',\n          name: 'LBO - Growth Equity',\n          description: 'Growth-focused LBO with minority investment and expansion capital',\n          complexity: 'Advanced',\n          timeToComplete: '100 min',\n          lastUsed: '2024-07-06',\n          popularity: 68,\n          features: [\n            'Growth capital',\n            'Minority stake',\n            'Management incentives',\n            'Expansion modeling'\n          ]\n        }\n      ]\n    },\n    comps: {\n      name: 'Comparable Analysis',\n      icon: 'BarChart3',\n      templates: [\n        {\n          id: 'trading_comps',\n          name: 'Trading Comparables',\n          description: 'Public company multiple analysis with statistical benchmarking',\n          complexity: 'Beginner',\n          timeToComplete: '30 min',\n          lastUsed: '2024-07-11',\n          popularity: 98,\n          features: [\n            'Multiple analysis',\n            'Statistical metrics',\n            'Peer screening',\n            'Premium/discount analysis'\n          ]\n        },\n        {\n          id: 'transaction_comps',\n          name: 'Transaction Comparables',\n          description: 'M&A transaction analysis with control premiums and synergies',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-07',\n          popularity: 82,\n          features: [\n            'M&A multiples',\n            'Control premiums',\n            'Synergy analysis',\n            'Transaction screening'\n          ]\n        }\n      ]\n    },\n    merger: {\n      name: 'M&A Models',\n      icon: 'GitMerge',\n      templates: [\n        {\n          id: 'merger_model',\n          name: 'Merger Model',\n          description:\n            'Comprehensive merger analysis with accretion/dilution and pro forma statements',\n          complexity: 'Expert',\n          timeToComplete: '180 min',\n          lastUsed: '2024-07-04',\n          popularity: 76,\n          features: [\n            'Accretion/dilution',\n            'Pro forma statements',\n            'Synergy modeling',\n            'Financing structure'\n          ]\n        },\n        {\n          id: 'acquisition_model',\n          name: 'Acquisition Model',\n          description: 'Strategic acquisition analysis with integration costs and value creation',\n          complexity: 'Expert',\n          timeToComplete: '150 min',\n          lastUsed: '2024-07-03',\n          popularity: 71,\n          features: ['Integration costs', 'Value creation', 'Financing options', 'Risk analysis']\n        }\n      ]\n    }\n  };\n\n  const recentTemplates = [\n    { id: 'dcf_standard', name: 'DCF - Standard', lastUsed: '2024-07-11 14:30' },\n    { id: 'trading_comps', name: 'Trading Comparables', lastUsed: '2024-07-11 09:15' },\n    { id: 'lbo_standard', name: 'LBO - Standard', lastUsed: '2024-07-10 16:45' }\n  ];\n\n  const getComplexityColor = complexity => {\n    switch (complexity) {\n      case 'Beginner':\n        return 'text-success bg-success/10';\n      case 'Intermediate':\n        return 'text-warning bg-warning/10';\n      case 'Advanced':\n        return 'text-accent bg-accent/10';\n      case 'Expert':\n        return 'text-destructive bg-destructive/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const filteredTemplates = () => {\n    const templates = templateCategories[selectedCategory]?.templates || [];\n    if (!searchTerm) return templates;\n\n    return templates.filter(\n      template =>\n        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  };\n\n  const handleTemplateSelect = template => {\n    if (onTemplateSelect) {\n      onTemplateSelect(template);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileTemplate\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Model Templates</h3>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          iconName=\"Plus\"\n          onClick={() => setShowCreateModal(true)}\n        >\n          Create Template\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search templates...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Categories */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {Object.entries(templateCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {/* Recent Templates */}\n        {!searchTerm && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n              <Icon name=\"Clock\" size={16} />\n              <span>Recently Used</span>\n            </h4>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {recentTemplates.map(template => (\n                <div\n                  key={template.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-smooth cursor-pointer\"\n                  onClick={() => handleTemplateSelect(template)}\n                >\n                  <div>\n                    <span className=\"font-medium text-foreground\">{template.name}</span>\n                    <p className=\"text-xs text-muted-foreground\">Last used: {template.lastUsed}</p>\n                  </div>\n                  <Icon name=\"ChevronRight\" size={16} className=\"text-muted-foreground\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Template Cards */}\n        <div className=\"space-y-4\">\n          {filteredTemplates().map(template => (\n            <div\n              key={template.id}\n              className=\"p-4 bg-background border border-border rounded-lg hover:border-primary/50 transition-smooth cursor-pointer group\"\n              onClick={() => handleTemplateSelect(template)}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h5 className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">\n                      {template.name}\n                    </h5>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(template.complexity)}`}\n                    >\n                      {template.complexity}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                    <Icon name=\"Star\" size={12} />\n                    <span>{template.popularity}%</span>\n                  </div>\n                  <Icon\n                    name=\"ChevronRight\"\n                    size={16}\n                    className=\"text-muted-foreground group-hover:text-primary transition-colors\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Clock\" size={12} />\n                    <span>{template.timeToComplete}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Calendar\" size={12} />\n                    <span>Last used: {template.lastUsed}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2\">\n                {template.features.map((feature, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-muted text-xs text-muted-foreground rounded\"\n                  >\n                    {feature}\n                  </span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTemplates().length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"FileX\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No templates found</h4>\n            <p className=\"text-muted-foreground\">\n              {searchTerm\n                ? 'Try adjusting your search terms'\n                : 'No templates available in this category'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Create Template Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg shadow-elevation-2 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between p-4 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Create New Template</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"X\"\n                onClick={() => setShowCreateModal(false)}\n              />\n            </div>\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Template Name\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter template name...\"\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Description\n                </label>\n                <textarea\n                  placeholder=\"Describe your template...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">Category</label>\n                <select className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-ring\">\n                  <option value=\"valuation\">Valuation Models</option>\n                  <option value=\"lbo\">LBO Models</option>\n                  <option value=\"comps\">Comparable Analysis</option>\n                  <option value=\"merger\">M&A Models</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowCreateModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  if (onTemplateCreate) onTemplateCreate();\n                }}\n              >\n                Create Template\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTemplates;\n","/**\n * Command Registry for FinanceAnalyst Pro Terminal\n * Manages all available commands with categorization and metadata\n */\n\nexport class CommandRegistry {\n  constructor() {\n    this.commands = new Map();\n    this.categories = new Map();\n    this.aliases = new Map();\n    this.initializeCategories();\n  }\n\n  /**\n   * Initialize command categories\n   */\n  initializeCategories() {\n    this.categories.set('CORE', {\n      name: 'Core Analysis',\n      description: 'Fundamental financial analysis commands',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('PORTFOLIO', {\n      name: 'Portfolio & Risk',\n      description: 'Portfolio analysis and risk management',\n      icon: '🎯',\n      commands: []\n    });\n\n    this.categories.set('VALUATION', {\n      name: 'Advanced Valuation',\n      description: 'Sophisticated valuation models',\n      icon: '📈',\n      commands: []\n    });\n\n    this.categories.set('TECHNICAL', {\n      name: 'Technical Analysis',\n      description: 'Technical analysis and market intelligence',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('FIXED_INCOME', {\n      name: 'Fixed Income & Derivatives',\n      description: 'Bond analysis and derivatives pricing',\n      icon: '🏦',\n      commands: []\n    });\n\n    this.categories.set('ESG', {\n      name: 'ESG & Alternative Data',\n      description: 'Environmental, social, governance metrics',\n      icon: '🌱',\n      commands: []\n    });\n\n    this.categories.set('AUTOMATION', {\n      name: 'Automation & Workflows',\n      description: 'Automated analysis and workflows',\n      icon: '🤖',\n      commands: []\n    });\n\n    this.categories.set('DATA', {\n      name: 'Data Management',\n      description: 'Data import, export, and management',\n      icon: '💾',\n      commands: []\n    });\n\n    this.categories.set('REPORTING', {\n      name: 'Reporting & Visualization',\n      description: 'Reports, charts, and visualizations',\n      icon: '📋',\n      commands: []\n    });\n\n    this.categories.set('SYSTEM', {\n      name: 'System & Performance',\n      description: 'System monitoring and configuration',\n      icon: '🔧',\n      commands: []\n    });\n\n    this.categories.set('ANALYTICS', {\n      name: 'Advanced Analytics',\n      description: 'Machine learning and advanced analytics',\n      icon: '💡',\n      commands: []\n    });\n\n    this.categories.set('MARKET_DATA', {\n      name: 'Market Data Extensions',\n      description: 'Extended market data and economic indicators',\n      icon: '🌐',\n      commands: []\n    });\n\n    this.categories.set('UTILITY', {\n      name: 'Utility Commands',\n      description: 'General utility and helper commands',\n      icon: '🛠️',\n      commands: []\n    });\n  }\n\n  /**\n   * Register a command\n   * @param {string} name - Command name\n   * @param {Object} handler - Command handler\n   * @param {Object} metadata - Command metadata\n   */\n  register(name, handler, metadata = {}) {\n    const commandName = name.toUpperCase();\n    \n    const commandInfo = {\n      name: commandName,\n      handler,\n      category: metadata.category || 'UTILITY',\n      description: metadata.description || 'No description available',\n      usage: metadata.usage || `${commandName}()`,\n      examples: metadata.examples || [],\n      parameterSchema: metadata.parameterSchema || null,\n      aliases: metadata.aliases || [],\n      tags: metadata.tags || [],\n      version: metadata.version || '1.0.0',\n      deprecated: metadata.deprecated || false,\n      experimental: metadata.experimental || false\n    };\n\n    // Register main command\n    this.commands.set(commandName, commandInfo);\n\n    // Register aliases\n    if (metadata.aliases) {\n      metadata.aliases.forEach(alias => {\n        this.aliases.set(alias.toUpperCase(), commandName);\n      });\n    }\n\n    // Add to category\n    const category = this.categories.get(commandInfo.category);\n    if (category) {\n      category.commands.push(commandName);\n    }\n\n    return this;\n  }\n\n  /**\n   * Get command handler\n   * @param {string} name - Command name or alias\n   * @returns {Object|null} Command handler\n   */\n  getHandler(name) {\n    const commandName = name.toUpperCase();\n    \n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command.handler;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      const aliasCommand = this.commands.get(aliasTarget);\n      return aliasCommand ? aliasCommand.handler : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get command info\n   * @param {string} name - Command name\n   * @returns {Object|null} Command information\n   */\n  getCommandInfo(name) {\n    const commandName = name.toUpperCase();\n    \n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      return this.commands.get(aliasTarget);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all commands in a category\n   * @param {string} category - Category name\n   * @returns {Array} Commands in category\n   */\n  getCommandsByCategory(category) {\n    const categoryInfo = this.categories.get(category.toUpperCase());\n    if (!categoryInfo) return [];\n\n    return categoryInfo.commands.map(cmdName => this.commands.get(cmdName));\n  }\n\n  /**\n   * Get all command names\n   * @returns {Array} All command names\n   */\n  getAllCommands() {\n    return Array.from(this.commands.keys());\n  }\n\n  /**\n   * Get all categories\n   * @returns {Array} All categories\n   */\n  getAllCategories() {\n    return Array.from(this.categories.entries()).map(([key, value]) => ({\n      key,\n      ...value\n    }));\n  }\n\n  /**\n   * Search commands\n   * @param {string} query - Search query\n   * @returns {Array} Matching commands\n   */\n  searchCommands(query) {\n    const searchTerm = query.toLowerCase();\n    const results = [];\n\n    for (const [name, command] of this.commands) {\n      const score = this.calculateSearchScore(command, searchTerm);\n      if (score > 0) {\n        results.push({ ...command, score });\n      }\n    }\n\n    return results.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Calculate search relevance score\n   * @param {Object} command - Command object\n   * @param {string} searchTerm - Search term\n   * @returns {number} Relevance score\n   */\n  calculateSearchScore(command, searchTerm) {\n    let score = 0;\n\n    // Exact name match\n    if (command.name.toLowerCase() === searchTerm) {\n      score += 100;\n    }\n\n    // Name contains search term\n    if (command.name.toLowerCase().includes(searchTerm)) {\n      score += 50;\n    }\n\n    // Description contains search term\n    if (command.description.toLowerCase().includes(searchTerm)) {\n      score += 25;\n    }\n\n    // Tags contain search term\n    if (command.tags.some(tag => tag.toLowerCase().includes(searchTerm))) {\n      score += 15;\n    }\n\n    // Aliases contain search term\n    if (command.aliases.some(alias => alias.toLowerCase().includes(searchTerm))) {\n      score += 10;\n    }\n\n    return score;\n  }\n\n  /**\n   * Get command suggestions based on partial input\n   * @param {string} partial - Partial command input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(partial) {\n    const partialLower = partial.toLowerCase();\n    const suggestions = [];\n\n    for (const [name, command] of this.commands) {\n      if (name.toLowerCase().startsWith(partialLower)) {\n        suggestions.push({\n          name: command.name,\n          description: command.description,\n          usage: command.usage,\n          category: command.category\n        });\n      }\n    }\n\n    return suggestions.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  /**\n   * Validate command exists\n   * @param {string} name - Command name\n   * @returns {boolean} Whether command exists\n   */\n  hasCommand(name) {\n    const commandName = name.toUpperCase();\n    return this.commands.has(commandName) || this.aliases.has(commandName);\n  }\n\n  /**\n   * Get command count by category\n   * @returns {Object} Command counts by category\n   */\n  getCommandStats() {\n    const stats = {};\n    \n    for (const [categoryKey, category] of this.categories) {\n      stats[categoryKey] = {\n        name: category.name,\n        count: category.commands.length,\n        icon: category.icon\n      };\n    }\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const commandRegistry = new CommandRegistry();\n","/**\n * Crypto Utils\n * Provides encryption and decryption utilities for data persistence\n */\n\nexport class CryptoUtils {\n  constructor() {\n    this.algorithm = 'AES-GCM';\n    this.keyLength = 256;\n    this.ivLength = 12; // 96 bits for GCM\n    this.tagLength = 16; // 128 bits for GCM\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n    \n    // Generate or retrieve encryption key\n    this.initializeKey();\n  }\n\n  /**\n   * Initialize encryption key\n   */\n  async initializeKey() {\n    try {\n      // Try to get existing key from localStorage\n      const storedKey = localStorage.getItem('financeanalyst_crypto_key');\n      \n      if (storedKey) {\n        // Import existing key\n        const keyData = this.base64ToArrayBuffer(storedKey);\n        this.cryptoKey = await crypto.subtle.importKey(\n          'raw',\n          keyData,\n          { name: this.algorithm },\n          false,\n          ['encrypt', 'decrypt']\n        );\n      } else {\n        // Generate new key\n        this.cryptoKey = await crypto.subtle.generateKey(\n          {\n            name: this.algorithm,\n            length: this.keyLength\n          },\n          true,\n          ['encrypt', 'decrypt']\n        );\n\n        // Store key for future use\n        const exportedKey = await crypto.subtle.exportKey('raw', this.cryptoKey);\n        const keyString = this.arrayBufferToBase64(exportedKey);\n        localStorage.setItem('financeanalyst_crypto_key', keyString);\n      }\n\n      console.log('✅ Crypto key initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize crypto key:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Encrypt data\n   */\n  async encrypt(data) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert string to ArrayBuffer\n      const dataBuffer = this.textEncoder.encode(data);\n      \n      // Generate random IV\n      const iv = crypto.getRandomValues(new Uint8Array(this.ivLength));\n      \n      // Encrypt data\n      const encryptedBuffer = await crypto.subtle.encrypt(\n        {\n          name: this.algorithm,\n          iv: iv\n        },\n        this.cryptoKey,\n        dataBuffer\n      );\n\n      // Combine IV and encrypted data\n      const combined = new Uint8Array(iv.length + encryptedBuffer.byteLength);\n      combined.set(iv, 0);\n      combined.set(new Uint8Array(encryptedBuffer), iv.length);\n\n      // Convert to base64 for storage\n      return this.arrayBufferToBase64(combined.buffer);\n\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt data\n   */\n  async decrypt(encryptedData) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert base64 to ArrayBuffer\n      const combined = this.base64ToArrayBuffer(encryptedData);\n      \n      // Extract IV and encrypted data\n      const iv = combined.slice(0, this.ivLength);\n      const encryptedBuffer = combined.slice(this.ivLength);\n\n      // Decrypt data\n      const decryptedBuffer = await crypto.subtle.decrypt(\n        {\n          name: this.algorithm,\n          iv: iv\n        },\n        this.cryptoKey,\n        encryptedBuffer\n      );\n\n      // Convert back to string\n      return this.textDecoder.decode(decryptedBuffer);\n\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate hash of data\n   */\n  async hash(data) {\n    try {\n      const dataBuffer = this.textEncoder.encode(data);\n      const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n      return this.arrayBufferToBase64(hashBuffer);\n    } catch (error) {\n      console.error('Hashing failed:', error);\n      throw new Error(`Hashing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verify data integrity\n   */\n  async verifyIntegrity(data, expectedHash) {\n    try {\n      const actualHash = await this.hash(data);\n      return actualHash === expectedHash;\n    } catch (error) {\n      console.error('Integrity verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate secure random string\n   */\n  generateRandomString(length = 32) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return this.arrayBufferToBase64(array.buffer).substring(0, length);\n  }\n\n  /**\n   * Derive key from password (for future use)\n   */\n  async deriveKeyFromPassword(password, salt) {\n    try {\n      const passwordBuffer = this.textEncoder.encode(password);\n      const saltBuffer = this.textEncoder.encode(salt);\n\n      // Import password as key material\n      const keyMaterial = await crypto.subtle.importKey(\n        'raw',\n        passwordBuffer,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveKey']\n      );\n\n      // Derive key using PBKDF2\n      const derivedKey = await crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: saltBuffer,\n          iterations: 100000,\n          hash: 'SHA-256'\n        },\n        keyMaterial,\n        {\n          name: this.algorithm,\n          length: this.keyLength\n        },\n        false,\n        ['encrypt', 'decrypt']\n      );\n\n      return derivedKey;\n\n    } catch (error) {\n      console.error('Key derivation failed:', error);\n      throw new Error(`Key derivation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if Web Crypto API is available\n   */\n  isAvailable() {\n    return !!(window.crypto && window.crypto.subtle);\n  }\n\n  /**\n   * Get encryption info\n   */\n  getInfo() {\n    return {\n      algorithm: this.algorithm,\n      keyLength: this.keyLength,\n      ivLength: this.ivLength,\n      available: this.isAvailable(),\n      keyInitialized: !!this.cryptoKey\n    };\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Securely clear sensitive data from memory\n   */\n  clearSensitiveData(data) {\n    if (data instanceof ArrayBuffer) {\n      const view = new Uint8Array(data);\n      crypto.getRandomValues(view);\n    } else if (typeof data === 'string') {\n      // For strings, we can't directly clear memory in JavaScript\n      // but we can at least overwrite the reference\n      data = null;\n    }\n  }\n\n  /**\n   * Test encryption/decryption performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable()) {\n      return null;\n    }\n\n    const testData = JSON.stringify({\n      test: 'performance',\n      data: new Array(1000).fill('test data for performance testing'),\n      timestamp: Date.now()\n    });\n\n    const iterations = 50;\n\n    try {\n      // Test encryption performance\n      const encryptStart = performance.now();\n      let encrypted;\n      for (let i = 0; i < iterations; i++) {\n        encrypted = await this.encrypt(testData);\n      }\n      const encryptTime = performance.now() - encryptStart;\n\n      // Test decryption performance\n      const decryptStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decrypt(encrypted);\n      }\n      const decryptTime = performance.now() - decryptStart;\n\n      return {\n        encryptTime: encryptTime / iterations,\n        decryptTime: decryptTime / iterations,\n        totalTime: encryptTime + decryptTime,\n        dataSize: testData.length,\n        encryptedSize: encrypted.length,\n        compressionRatio: encrypted.length / testData.length,\n        iterations\n      };\n\n    } catch (error) {\n      console.error('Crypto performance test failed:', error);\n      return null;\n    }\n  }\n}\n","/**\n * Compression Utils\n * Provides data compression utilities for efficient storage\n */\n\nexport class CompressionUtils {\n  constructor() {\n    this.compressionFormat = 'gzip';\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n  }\n\n  /**\n   * Compress data using browser's native compression\n   */\n  async compress(data) {\n    try {\n      // Check if CompressionStream is available (modern browsers)\n      if ('CompressionStream' in window) {\n        return await this.compressWithStream(data);\n      } else {\n        // Fallback to LZ-string compression\n        return await this.compressWithLZString(data);\n      }\n    } catch (error) {\n      console.error('Compression failed:', error);\n      // Return original data if compression fails\n      return data;\n    }\n  }\n\n  /**\n   * Decompress data\n   */\n  async decompress(compressedData) {\n    try {\n      // Try native decompression first\n      if ('DecompressionStream' in window && this.isNativeCompressed(compressedData)) {\n        return await this.decompressWithStream(compressedData);\n      } else {\n        // Try LZ-string decompression\n        return await this.decompressWithLZString(compressedData);\n      }\n    } catch (error) {\n      console.error('Decompression failed:', error);\n      // Return original data if decompression fails\n      return compressedData;\n    }\n  }\n\n  /**\n   * Compress using native CompressionStream\n   */\n  async compressWithStream(data) {\n    const stream = new CompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write data to compression stream\n    const dataBuffer = this.textEncoder.encode(data);\n    writer.write(dataBuffer);\n    writer.close();\n\n    // Read compressed data\n    const chunks = [];\n    let done = false;\n    \n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to base64\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n    \n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    // Add marker to identify native compression\n    return 'NATIVE_GZIP:' + this.arrayBufferToBase64(combined.buffer);\n  }\n\n  /**\n   * Decompress using native DecompressionStream\n   */\n  async decompressWithStream(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('NATIVE_GZIP:', '');\n    const compressedBuffer = this.base64ToArrayBuffer(data);\n\n    const stream = new DecompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write compressed data to decompression stream\n    writer.write(new Uint8Array(compressedBuffer));\n    writer.close();\n\n    // Read decompressed data\n    const chunks = [];\n    let done = false;\n    \n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to string\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n    \n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return this.textDecoder.decode(combined);\n  }\n\n  /**\n   * Compress using LZ-string algorithm (fallback)\n   */\n  async compressWithLZString(data) {\n    // Simple LZ77-style compression implementation\n    const dictionary = new Map();\n    const result = [];\n    let dictSize = 256;\n    \n    // Initialize dictionary with single characters\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(String.fromCharCode(i), i);\n    }\n\n    let current = '';\n    for (let i = 0; i < data.length; i++) {\n      const char = data[i];\n      const combined = current + char;\n      \n      if (dictionary.has(combined)) {\n        current = combined;\n      } else {\n        result.push(dictionary.get(current));\n        dictionary.set(combined, dictSize++);\n        current = char;\n      }\n    }\n    \n    if (current) {\n      result.push(dictionary.get(current));\n    }\n\n    // Convert to base64\n    const compressed = new Uint16Array(result);\n    return 'LZ_STRING:' + this.arrayBufferToBase64(compressed.buffer);\n  }\n\n  /**\n   * Decompress LZ-string compressed data\n   */\n  async decompressWithLZString(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('LZ_STRING:', '');\n    const buffer = this.base64ToArrayBuffer(data);\n    const compressed = new Uint16Array(buffer);\n\n    const dictionary = new Map();\n    let dictSize = 256;\n    \n    // Initialize dictionary\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(i, String.fromCharCode(i));\n    }\n\n    let result = '';\n    let previous = String.fromCharCode(compressed[0]);\n    result += previous;\n\n    for (let i = 1; i < compressed.length; i++) {\n      const code = compressed[i];\n      let current;\n      \n      if (dictionary.has(code)) {\n        current = dictionary.get(code);\n      } else if (code === dictSize) {\n        current = previous + previous[0];\n      } else {\n        throw new Error('Invalid compressed data');\n      }\n      \n      result += current;\n      dictionary.set(dictSize++, previous + current[0]);\n      previous = current;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if data is compressed with native compression\n   */\n  isNativeCompressed(data) {\n    return typeof data === 'string' && data.startsWith('NATIVE_GZIP:');\n  }\n\n  /**\n   * Check if data is compressed with LZ-string\n   */\n  isLZStringCompressed(data) {\n    return typeof data === 'string' && data.startsWith('LZ_STRING:');\n  }\n\n  /**\n   * Check if data appears to be compressed\n   */\n  isCompressed(data) {\n    return this.isNativeCompressed(data) || this.isLZStringCompressed(data);\n  }\n\n  /**\n   * Get compression ratio\n   */\n  getCompressionRatio(originalData, compressedData) {\n    const originalSize = new Blob([originalData]).size;\n    const compressedSize = new Blob([compressedData]).size;\n    return compressedSize / originalSize;\n  }\n\n  /**\n   * Estimate compression benefit\n   */\n  async estimateCompressionBenefit(data) {\n    try {\n      const originalSize = new Blob([data]).size;\n      const compressed = await this.compress(data);\n      const compressedSize = new Blob([compressed]).size;\n      \n      return {\n        originalSize,\n        compressedSize,\n        ratio: compressedSize / originalSize,\n        savings: originalSize - compressedSize,\n        savingsPercentage: ((originalSize - compressedSize) / originalSize) * 100,\n        worthCompressing: compressedSize < originalSize * 0.9 // 10% savings threshold\n      };\n    } catch (error) {\n      return {\n        originalSize: new Blob([data]).size,\n        compressedSize: new Blob([data]).size,\n        ratio: 1,\n        savings: 0,\n        savingsPercentage: 0,\n        worthCompressing: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if compression is available\n   */\n  isAvailable() {\n    return 'CompressionStream' in window || true; // LZ-string fallback always available\n  }\n\n  /**\n   * Get compression info\n   */\n  getInfo() {\n    return {\n      nativeCompressionAvailable: 'CompressionStream' in window,\n      fallbackAvailable: true,\n      defaultFormat: this.compressionFormat,\n      available: this.isAvailable()\n    };\n  }\n\n  /**\n   * Test compression performance\n   */\n  async performanceTest() {\n    const testData = JSON.stringify({\n      test: 'compression performance',\n      data: new Array(1000).fill('This is test data for compression performance testing. '.repeat(10)),\n      numbers: new Array(100).fill(0).map((_, i) => i),\n      timestamp: Date.now()\n    });\n\n    const iterations = 20;\n\n    try {\n      // Test compression performance\n      const compressStart = performance.now();\n      let compressed;\n      for (let i = 0; i < iterations; i++) {\n        compressed = await this.compress(testData);\n      }\n      const compressTime = performance.now() - compressStart;\n\n      // Test decompression performance\n      const decompressStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decompress(compressed);\n      }\n      const decompressTime = performance.now() - decompressStart;\n\n      const compressionRatio = this.getCompressionRatio(testData, compressed);\n\n      return {\n        compressTime: compressTime / iterations,\n        decompressTime: decompressTime / iterations,\n        totalTime: compressTime + decompressTime,\n        originalSize: testData.length,\n        compressedSize: compressed.length,\n        compressionRatio,\n        savingsPercentage: (1 - compressionRatio) * 100,\n        iterations,\n        method: this.isNativeCompressed(compressed) ? 'native' : 'lz-string'\n      };\n\n    } catch (error) {\n      console.error('Compression performance test failed:', error);\n      return null;\n    }\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n}\n","/**\n * Local Storage Service\n * Manages localStorage operations with encryption, compression, and data validation\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class LocalStorageService {\n  constructor() {\n    this.prefix = 'financeanalyst_';\n    this.isAvailable = false;\n    this.maxSize = 5 * 1024 * 1024; // 5MB typical localStorage limit\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n  }\n\n  /**\n   * Initialize the localStorage service\n   */\n  async initialize() {\n    try {\n      // Test localStorage availability\n      const testKey = this.prefix + 'test';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      \n      this.isAvailable = true;\n      console.log('✅ LocalStorage service initialized');\n      \n      return { success: true, available: true };\n    } catch (error) {\n      console.warn('⚠️ LocalStorage not available:', error);\n      this.isAvailable = false;\n      return { success: false, available: false, error: error.message };\n    }\n  }\n\n  /**\n   * Store data in localStorage\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const {\n      encrypt = false,\n      compress = false,\n      ttl = null,\n      validate = true\n    } = options;\n\n    try {\n      // Validate data if requested\n      if (validate && !this.validateData(data)) {\n        throw new Error('Invalid data format');\n      }\n\n      // Prepare storage object\n      const storageObject = {\n        data,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0',\n          encrypted: encrypt,\n          compressed: compress,\n          ttl,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      let serializedData = JSON.stringify(storageObject);\n\n      // Compress if requested\n      if (compress) {\n        serializedData = await this.compressionUtils.compress(serializedData);\n        storageObject.metadata.compressedSize = serializedData.length;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        serializedData = await this.cryptoUtils.encrypt(serializedData);\n      }\n\n      // Check size limits\n      if (serializedData.length > this.maxSize) {\n        throw new Error(`Data too large: ${serializedData.length} bytes exceeds ${this.maxSize} bytes`);\n      }\n\n      // Store in localStorage\n      const storageKey = this.prefix + key;\n      localStorage.setItem(storageKey, serializedData);\n\n      return {\n        success: true,\n        key: storageKey,\n        size: serializedData.length,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to store data in localStorage for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from localStorage\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { decrypt = false, validateTTL = true } = options;\n\n    try {\n      const storageKey = this.prefix + key;\n      let serializedData = localStorage.getItem(storageKey);\n\n      if (!serializedData) {\n        return null;\n      }\n\n      // Decrypt if needed\n      if (decrypt) {\n        serializedData = await this.cryptoUtils.decrypt(serializedData);\n      }\n\n      // Decompress if needed\n      let storageObject;\n      try {\n        storageObject = JSON.parse(serializedData);\n      } catch (parseError) {\n        // Try decompression first\n        try {\n          const decompressed = await this.compressionUtils.decompress(serializedData);\n          storageObject = JSON.parse(decompressed);\n        } catch (decompressError) {\n          throw new Error('Failed to parse stored data');\n        }\n      }\n\n      // Validate TTL\n      if (validateTTL && storageObject.metadata && storageObject.metadata.ttl) {\n        const now = Date.now();\n        const expiry = storageObject.metadata.timestamp + storageObject.metadata.ttl;\n        \n        if (now > expiry) {\n          await this.remove(key);\n          return null;\n        }\n      }\n\n      return {\n        data: storageObject.data,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to retrieve data from localStorage for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from localStorage\n   */\n  async remove(key) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const storageKey = this.prefix + key;\n      localStorage.removeItem(storageKey);\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove data from localStorage for key \"${key}\":`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all application data from localStorage\n   */\n  async clear() {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      const appKeys = keys.filter(key => key.startsWith(this.prefix));\n      \n      appKeys.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Failed to clear localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys for this application\n   */\n  async getKeys() {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      return keys\n        .filter(key => key.startsWith(this.prefix))\n        .map(key => key.substring(this.prefix.length));\n    } catch (error) {\n      console.error('Failed to get localStorage keys:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, used: 0, keys: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let totalSize = 0;\n      let itemCount = 0;\n      const itemSizes = {};\n\n      for (const key of keys) {\n        const storageKey = this.prefix + key;\n        const data = localStorage.getItem(storageKey);\n        if (data) {\n          const size = data.length;\n          totalSize += size;\n          itemCount++;\n          itemSizes[key] = size;\n        }\n      }\n\n      return {\n        available: true,\n        used: totalSize,\n        keys: itemCount,\n        maxSize: this.maxSize,\n        usagePercentage: (totalSize / this.maxSize) * 100,\n        itemSizes,\n        largestItem: Object.entries(itemSizes).reduce((max, [key, size]) => \n          size > max.size ? { key, size } : max, { key: null, size: 0 })\n      };\n\n    } catch (error) {\n      console.error('Failed to get localStorage stats:', error);\n      return { available: false, used: 0, keys: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Export all application data\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const keys = await this.getKeys();\n      const exportData = {};\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: false });\n        if (data) {\n          exportData[key] = data;\n        }\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Failed to export localStorage data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into localStorage\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [key, data] of Object.entries(importData)) {\n        try {\n          // Check if key exists and overwrite setting\n          const existing = await this.retrieve(key, { validateTTL: false });\n          if (existing && !overwrite) {\n            results.skipped++;\n            continue;\n          }\n\n          // Import the data\n          await this.store(key, data.data, {\n            encrypt: data.metadata?.encrypted || false,\n            compress: data.metadata?.compressed || false,\n            ttl: data.metadata?.ttl || null\n          });\n\n          results.imported++;\n        } catch (error) {\n          console.error(`Failed to import key \"${key}\":`, error);\n          results.errors++;\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Failed to import localStorage data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if localStorage has enough space for data\n   */\n  async hasSpace(dataSize) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const stats = await this.getStats();\n      return (stats.used + dataSize) <= this.maxSize;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Cleanup expired items\n   */\n  async cleanup() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let cleaned = 0;\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: true });\n        if (!data) {\n          cleaned++; // Item was expired and removed\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      console.error('Failed to cleanup localStorage:', error);\n      return { cleaned: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Validate data before storage\n   */\n  validateData(data) {\n    try {\n      // Check if data is serializable\n      JSON.stringify(data);\n      \n      // Check for circular references\n      const seen = new WeakSet();\n      const checkCircular = (obj) => {\n        if (obj !== null && typeof obj === 'object') {\n          if (seen.has(obj)) {\n            return false;\n          }\n          seen.add(obj);\n          for (const key in obj) {\n            if (!checkCircular(obj[key])) {\n              return false;\n            }\n          }\n        }\n        return true;\n      };\n\n      return checkCircular(data);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get localStorage availability status\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Test localStorage performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const testData = { test: 'performance', data: new Array(1000).fill('test') };\n    const iterations = 100;\n    \n    try {\n      // Test write performance\n      const writeStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.store(`perf_test_${i}`, testData);\n      }\n      const writeTime = performance.now() - writeStart;\n\n      // Test read performance\n      const readStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.retrieve(`perf_test_${i}`);\n      }\n      const readTime = performance.now() - readStart;\n\n      // Cleanup test data\n      for (let i = 0; i < iterations; i++) {\n        await this.remove(`perf_test_${i}`);\n      }\n\n      return {\n        writeTime: writeTime / iterations,\n        readTime: readTime / iterations,\n        totalTime: writeTime + readTime,\n        iterations\n      };\n\n    } catch (error) {\n      console.error('Performance test failed:', error);\n      return null;\n    }\n  }\n}\n","/**\n * IndexedDB Service\n * Manages IndexedDB operations for complex data storage with versioning and transactions\n */\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class IndexedDBService {\n  constructor() {\n    this.dbName = 'FinanceAnalystPro';\n    this.dbVersion = 1;\n    this.db = null;\n    this.isAvailable = false;\n    this.compressionUtils = new CompressionUtils();\n    \n    // Define object stores\n    this.stores = {\n      watchlists: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name', unique: true },\n          { name: 'created', keyPath: 'created' },\n          { name: 'lastUpdated', keyPath: 'lastUpdated' }\n        ]\n      },\n      analysis_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'analysisType', keyPath: 'analysisType' },\n          { name: 'timestamp', keyPath: 'timestamp' }\n        ]\n      },\n      command_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'command', keyPath: 'command' },\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'success', keyPath: 'success' }\n        ]\n      },\n      alerts: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'condition', keyPath: 'condition' },\n          { name: 'created', keyPath: 'created' },\n          { name: 'triggered', keyPath: 'triggered' }\n        ]\n      },\n      cached_data: {\n        keyPath: 'key',\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'expiry', keyPath: 'expiry' },\n          { name: 'dataType', keyPath: 'dataType' }\n        ]\n      },\n      user_models: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name' },\n          { name: 'type', keyPath: 'type' },\n          { name: 'created', keyPath: 'created' }\n        ]\n      },\n      export_data: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'type', keyPath: 'type' }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Initialize IndexedDB service\n   */\n  async initialize() {\n    if (!window.indexedDB) {\n      console.warn('⚠️ IndexedDB not available');\n      this.isAvailable = false;\n      return { success: false, available: false };\n    }\n\n    try {\n      this.db = await this.openDatabase();\n      this.isAvailable = true;\n      console.log('✅ IndexedDB service initialized');\n      \n      // Cleanup expired data\n      await this.cleanupExpiredData();\n      \n      return { success: true, available: true, version: this.dbVersion };\n    } catch (error) {\n      console.error('❌ Failed to initialize IndexedDB:', error);\n      this.isAvailable = false;\n      return { success: false, available: false, error: error.message };\n    }\n  }\n\n  /**\n   * Open IndexedDB database\n   */\n  async openDatabase() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => {\n        reject(new Error(`Failed to open database: ${request.error}`));\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        this.createObjectStores(db);\n      };\n    });\n  }\n\n  /**\n   * Create object stores during database upgrade\n   */\n  createObjectStores(db) {\n    // Remove existing stores if they exist\n    for (const storeName of Object.keys(this.stores)) {\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n    }\n\n    // Create new stores\n    for (const [storeName, config] of Object.entries(this.stores)) {\n      const store = db.createObjectStore(storeName, {\n        keyPath: config.keyPath,\n        autoIncrement: config.autoIncrement\n      });\n\n      // Create indexes\n      if (config.indexes) {\n        config.indexes.forEach(index => {\n          store.createIndex(index.name, index.keyPath, { unique: index.unique || false });\n        });\n      }\n    }\n\n    console.log('✅ IndexedDB object stores created');\n  }\n\n  /**\n   * Store data in IndexedDB\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const {\n      storeName = 'cached_data',\n      metadata = {},\n      compress = false\n    } = options;\n\n    try {\n      // Prepare data object\n      const dataObject = {\n        key,\n        data,\n        timestamp: Date.now(),\n        metadata: {\n          ...metadata,\n          compressed: compress,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      // Compress if requested\n      if (compress) {\n        const compressed = await this.compressionUtils.compress(JSON.stringify(data));\n        dataObject.data = compressed;\n        dataObject.metadata.compressedSize = compressed.length;\n      }\n\n      // Store in IndexedDB\n      const result = await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.put(dataObject);\n      });\n\n      return {\n        success: true,\n        key: result,\n        storeName,\n        size: JSON.stringify(dataObject).length,\n        metadata: dataObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to store data in IndexedDB for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from IndexedDB\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      const result = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.get(key);\n      });\n\n      if (!result) {\n        return null;\n      }\n\n      // Check expiry if applicable\n      if (result.metadata && result.metadata.expiry && Date.now() > result.metadata.expiry) {\n        await this.remove(key, { storeName });\n        return null;\n      }\n\n      // Decompress if needed\n      let data = result.data;\n      if (result.metadata && result.metadata.compressed) {\n        data = JSON.parse(await this.compressionUtils.decompress(data));\n      }\n\n      return {\n        data,\n        metadata: result.metadata,\n        timestamp: result.timestamp\n      };\n\n    } catch (error) {\n      console.error(`Failed to retrieve data from IndexedDB for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from IndexedDB\n   */\n  async remove(key, options = {}) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.delete(key);\n      });\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove data from IndexedDB for key \"${key}\":`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all data from a store\n   */\n  async clear(storeName = null) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      if (storeName) {\n        // Clear specific store\n        await this.performTransaction(storeName, 'readwrite', (store) => {\n          return store.clear();\n        });\n      } else {\n        // Clear all stores\n        for (const store of Object.keys(this.stores)) {\n          await this.performTransaction(store, 'readwrite', (storeObj) => {\n            return storeObj.clear();\n          });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to clear IndexedDB:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys from a store\n   */\n  async getKeys(storeName = 'cached_data') {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAllKeys();\n      });\n    } catch (error) {\n      console.error(`Failed to get keys from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get all data from a store\n   */\n  async getAll(storeName = 'cached_data', options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null, filter = null } = options;\n\n    try {\n      const results = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAll();\n      });\n\n      let filteredResults = results;\n\n      // Apply filter if provided\n      if (filter) {\n        filteredResults = results.filter(filter);\n      }\n\n      // Apply limit if provided\n      if (limit) {\n        filteredResults = filteredResults.slice(0, limit);\n      }\n\n      return filteredResults;\n    } catch (error) {\n      console.error(`Failed to get all data from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Query data using an index\n   */\n  async query(storeName, indexName, value, options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null } = options;\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        const index = store.index(indexName);\n        const request = limit ? index.getAll(value, limit) : index.getAll(value);\n        return request;\n      });\n    } catch (error) {\n      console.error(`Failed to query IndexedDB store \"${storeName}\" with index \"${indexName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, stores: {}, total: { records: 0, size: 0 } };\n    }\n\n    try {\n      const stats = {\n        available: true,\n        stores: {},\n        total: { records: 0, size: 0 }\n      };\n\n      for (const storeName of Object.keys(this.stores)) {\n        const records = await this.getAll(storeName);\n        const recordCount = records.length;\n        const storeSize = records.reduce((size, record) => {\n          return size + JSON.stringify(record).length;\n        }, 0);\n\n        stats.stores[storeName] = {\n          records: recordCount,\n          size: storeSize\n        };\n\n        stats.total.records += recordCount;\n        stats.total.size += storeSize;\n      }\n\n      return stats;\n    } catch (error) {\n      console.error('Failed to get IndexedDB stats:', error);\n      return { available: false, error: error.message };\n    }\n  }\n\n  /**\n   * Export all data from IndexedDB\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const exportData = {};\n\n      for (const storeName of Object.keys(this.stores)) {\n        exportData[storeName] = await this.getAll(storeName);\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Failed to export IndexedDB data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into IndexedDB\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [storeName, records] of Object.entries(importData)) {\n        if (!this.stores[storeName]) {\n          console.warn(`Unknown store: ${storeName}`);\n          continue;\n        }\n\n        for (const record of records) {\n          try {\n            if (!overwrite) {\n              // Check if record exists\n              const existing = await this.retrieve(record.key || record.id, { storeName });\n              if (existing) {\n                results.skipped++;\n                continue;\n              }\n            }\n\n            await this.performTransaction(storeName, 'readwrite', (store) => {\n              return store.put(record);\n            });\n\n            results.imported++;\n          } catch (error) {\n            console.error(`Failed to import record to store \"${storeName}\":`, error);\n            results.errors++;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Failed to import IndexedDB data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cleanup expired data\n   */\n  async cleanupExpiredData() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      let cleaned = 0;\n      const now = Date.now();\n\n      // Cleanup cached_data store\n      const cachedData = await this.getAll('cached_data');\n      for (const record of cachedData) {\n        if (record.metadata && record.metadata.expiry && now > record.metadata.expiry) {\n          await this.remove(record.key, { storeName: 'cached_data' });\n          cleaned++;\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      return { cleaned: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Perform IndexedDB transaction\n   */\n  async performTransaction(storeName, mode, operation) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([storeName], mode);\n      const store = transaction.objectStore(storeName);\n\n      transaction.onerror = () => {\n        reject(new Error(`Transaction failed: ${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        // Transaction completed successfully\n      };\n\n      const request = operation(store);\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = () => {\n        reject(new Error(`Operation failed: ${request.error}`));\n      };\n    });\n  }\n\n  /**\n   * Check if IndexedDB is available\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Get database info\n   */\n  getInfo() {\n    return {\n      dbName: this.dbName,\n      dbVersion: this.dbVersion,\n      available: this.isAvailable,\n      stores: Object.keys(this.stores),\n      storeCount: Object.keys(this.stores).length\n    };\n  }\n}\n","/**\n * Session Manager\n * Manages user sessions, authentication state, and session persistence\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nexport class SessionManager {\n  constructor() {\n    this.sessionKey = 'financeanalyst_session';\n    this.userKey = 'financeanalyst_user';\n    this.preferencesKey = 'financeanalyst_preferences';\n    this.cryptoUtils = new CryptoUtils();\n    \n    this.currentSession = null;\n    this.currentUser = null;\n    this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n    this.listeners = new Set();\n    \n    // Default user preferences\n    this.defaultPreferences = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD',\n      theme: 'dark',\n      notifications: true,\n      autoSave: true,\n      commandHistory: true,\n      dataRetention: 30, // days\n      privacy: {\n        analytics: false,\n        crashReporting: true,\n        dataSharing: false\n      }\n    };\n  }\n\n  /**\n   * Initialize session manager\n   */\n  async initialize() {\n    try {\n      // Load existing session\n      await this.loadSession();\n      \n      // Setup session monitoring\n      this.setupSessionMonitoring();\n      \n      console.log('✅ Session Manager initialized');\n      return { success: true, hasSession: !!this.currentSession };\n    } catch (error) {\n      console.error('❌ Failed to initialize Session Manager:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Create a new session\n   */\n  async createSession(userInfo = {}) {\n    try {\n      const sessionId = this.generateSessionId();\n      const now = Date.now();\n      \n      const session = {\n        id: sessionId,\n        userId: userInfo.id || this.generateUserId(),\n        created: now,\n        lastActivity: now,\n        expires: now + this.sessionTimeout,\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        version: '1.0'\n      };\n\n      const user = {\n        id: session.userId,\n        name: userInfo.name || 'Anonymous User',\n        email: userInfo.email || null,\n        created: userInfo.created || now,\n        lastLogin: now,\n        loginCount: (userInfo.loginCount || 0) + 1,\n        preferences: { ...this.defaultPreferences, ...userInfo.preferences }\n      };\n\n      // Store session and user data\n      await this.storeSession(session);\n      await this.storeUser(user);\n      \n      this.currentSession = session;\n      this.currentUser = user;\n      \n      // Notify listeners\n      this.notifyListeners('sessionCreated', { session, user });\n      \n      return {\n        success: true,\n        session,\n        user\n      };\n\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load existing session\n   */\n  async loadSession() {\n    try {\n      const sessionData = localStorage.getItem(this.sessionKey);\n      const userData = localStorage.getItem(this.userKey);\n      \n      if (!sessionData || !userData) {\n        return null;\n      }\n\n      const session = JSON.parse(sessionData);\n      const user = JSON.parse(userData);\n      \n      // Check if session is expired\n      if (Date.now() > session.expires) {\n        await this.destroySession();\n        return null;\n      }\n\n      // Update last activity\n      session.lastActivity = Date.now();\n      await this.storeSession(session);\n      \n      this.currentSession = session;\n      this.currentUser = user;\n      \n      // Notify listeners\n      this.notifyListeners('sessionLoaded', { session, user });\n      \n      return { session, user };\n\n    } catch (error) {\n      console.error('Failed to load session:', error);\n      // Clear corrupted session data\n      await this.destroySession();\n      return null;\n    }\n  }\n\n  /**\n   * Update session activity\n   */\n  async updateActivity() {\n    if (!this.currentSession) {\n      return false;\n    }\n\n    try {\n      this.currentSession.lastActivity = Date.now();\n      \n      // Extend session if needed\n      const timeUntilExpiry = this.currentSession.expires - Date.now();\n      if (timeUntilExpiry < this.sessionTimeout * 0.1) { // Extend if less than 10% time left\n        this.currentSession.expires = Date.now() + this.sessionTimeout;\n      }\n\n      await this.storeSession(this.currentSession);\n      return true;\n\n    } catch (error) {\n      console.error('Failed to update session activity:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Destroy current session\n   */\n  async destroySession() {\n    try {\n      const session = this.currentSession;\n      const user = this.currentUser;\n      \n      // Clear session data\n      localStorage.removeItem(this.sessionKey);\n      \n      this.currentSession = null;\n      this.currentUser = null;\n      \n      // Notify listeners\n      this.notifyListeners('sessionDestroyed', { session, user });\n      \n      return true;\n\n    } catch (error) {\n      console.error('Failed to destroy session:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current session\n   */\n  getSession() {\n    return this.currentSession;\n  }\n\n  /**\n   * Get current user\n   */\n  getUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    return !!(this.currentSession && Date.now() < this.currentSession.expires);\n  }\n\n  /**\n   * Get user preferences\n   */\n  getPreferences() {\n    return this.currentUser ? this.currentUser.preferences : this.defaultPreferences;\n  }\n\n  /**\n   * Update user preferences\n   */\n  async updatePreferences(newPreferences) {\n    if (!this.currentUser) {\n      throw new Error('No active user session');\n    }\n\n    try {\n      this.currentUser.preferences = {\n        ...this.currentUser.preferences,\n        ...newPreferences\n      };\n\n      await this.storeUser(this.currentUser);\n      \n      // Also store preferences separately for quick access\n      localStorage.setItem(this.preferencesKey, JSON.stringify(this.currentUser.preferences));\n      \n      // Notify listeners\n      this.notifyListeners('preferencesUpdated', { preferences: this.currentUser.preferences });\n      \n      return this.currentUser.preferences;\n\n    } catch (error) {\n      console.error('Failed to update preferences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get session statistics\n   */\n  getSessionStats() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    const now = Date.now();\n    const sessionDuration = now - this.currentSession.created;\n    const timeUntilExpiry = this.currentSession.expires - now;\n    const lastActivityAge = now - this.currentSession.lastActivity;\n\n    return {\n      sessionId: this.currentSession.id,\n      userId: this.currentUser.id,\n      userName: this.currentUser.name,\n      sessionDuration,\n      timeUntilExpiry,\n      lastActivityAge,\n      loginCount: this.currentUser.loginCount,\n      userCreated: this.currentUser.created,\n      isExpired: timeUntilExpiry <= 0,\n      isActive: lastActivityAge < 5 * 60 * 1000 // Active if activity within 5 minutes\n    };\n  }\n\n  /**\n   * Export session data\n   */\n  async exportSessionData() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    return {\n      session: { ...this.currentSession },\n      user: { ...this.currentUser },\n      preferences: { ...this.currentUser.preferences },\n      exportTimestamp: Date.now()\n    };\n  }\n\n  /**\n   * Import session data\n   */\n  async importSessionData(sessionData) {\n    try {\n      if (!sessionData || !sessionData.session || !sessionData.user) {\n        throw new Error('Invalid session data format');\n      }\n\n      // Validate session data\n      const session = sessionData.session;\n      const user = sessionData.user;\n\n      // Update timestamps\n      session.lastActivity = Date.now();\n      session.expires = Date.now() + this.sessionTimeout;\n      user.lastLogin = Date.now();\n\n      // Store imported data\n      await this.storeSession(session);\n      await this.storeUser(user);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionImported', { session, user });\n\n      return { success: true, session, user };\n\n    } catch (error) {\n      console.error('Failed to import session data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add session event listener\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove session event listener\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  /**\n   * Store session data\n   */\n  async storeSession(session) {\n    try {\n      localStorage.setItem(this.sessionKey, JSON.stringify(session));\n    } catch (error) {\n      console.error('Failed to store session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Store user data\n   */\n  async storeUser(user) {\n    try {\n      localStorage.setItem(this.userKey, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to store user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  generateSessionId() {\n    return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Generate unique user ID\n   */\n  generateUserId() {\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Setup session monitoring\n   */\n  setupSessionMonitoring() {\n    // Update activity on user interaction\n    const events = ['click', 'keypress', 'scroll', 'mousemove'];\n    let lastActivity = Date.now();\n\n    const throttledUpdate = this.throttle(() => {\n      const now = Date.now();\n      if (now - lastActivity > 60000) { // Update every minute\n        this.updateActivity();\n        lastActivity = now;\n      }\n    }, 1000);\n\n    events.forEach(event => {\n      document.addEventListener(event, throttledUpdate, { passive: true });\n    });\n\n    // Check session expiry periodically\n    setInterval(() => {\n      if (this.currentSession && Date.now() > this.currentSession.expires) {\n        this.destroySession();\n      }\n    }, 60000); // Check every minute\n\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        this.updateActivity();\n      }\n    });\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n      this.updateActivity();\n    });\n  }\n\n  /**\n   * Throttle function calls\n   */\n  throttle(func, limit) {\n    let inThrottle;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Notify event listeners\n   */\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in session event listener:', error);\n      }\n    });\n  }\n}\n","/**\n * Data Migration Service\n * Handles data migrations between different versions and storage formats\n */\n\nexport class DataMigrationService {\n  constructor() {\n    this.currentVersion = '1.0.0';\n    this.migrationKey = 'financeanalyst_migration_version';\n    this.backupKey = 'financeanalyst_migration_backup';\n    \n    // Define migration paths\n    this.migrations = {\n      '0.0.0': {\n        to: '1.0.0',\n        description: 'Initial migration to structured persistence layer',\n        migrate: this.migrateToV1_0_0.bind(this)\n      }\n      // Future migrations will be added here\n    };\n  }\n\n  /**\n   * Check if migration is needed and perform it\n   */\n  async checkAndMigrate() {\n    try {\n      const currentStoredVersion = localStorage.getItem(this.migrationKey);\n      \n      if (!currentStoredVersion) {\n        // First time setup - check for legacy data\n        await this.performInitialMigration();\n      } else if (currentStoredVersion !== this.currentVersion) {\n        // Version mismatch - perform migration\n        await this.performVersionMigration(currentStoredVersion, this.currentVersion);\n      }\n\n      // Update stored version\n      localStorage.setItem(this.migrationKey, this.currentVersion);\n      \n      console.log(`✅ Data migration complete - version ${this.currentVersion}`);\n      return { success: true, version: this.currentVersion };\n\n    } catch (error) {\n      console.error('❌ Data migration failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Perform initial migration from legacy data\n   */\n  async performInitialMigration() {\n    console.log('🔄 Performing initial data migration...');\n    \n    try {\n      // Check for legacy data patterns\n      const legacyData = await this.detectLegacyData();\n      \n      if (Object.keys(legacyData).length > 0) {\n        // Create backup before migration\n        await this.createMigrationBackup(legacyData);\n        \n        // Migrate legacy data to new format\n        await this.migrateToV1_0_0(legacyData);\n        \n        console.log('✅ Legacy data migrated successfully');\n      } else {\n        console.log('ℹ️ No legacy data found - clean installation');\n      }\n\n    } catch (error) {\n      console.error('Failed to perform initial migration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform version-to-version migration\n   */\n  async performVersionMigration(fromVersion, toVersion) {\n    console.log(`🔄 Migrating data from ${fromVersion} to ${toVersion}...`);\n    \n    try {\n      // Find migration path\n      const migrationPath = this.findMigrationPath(fromVersion, toVersion);\n      \n      if (!migrationPath.length) {\n        throw new Error(`No migration path found from ${fromVersion} to ${toVersion}`);\n      }\n\n      // Create backup before migration\n      const currentData = await this.exportCurrentData();\n      await this.createMigrationBackup(currentData, fromVersion);\n\n      // Execute migrations in sequence\n      for (const migration of migrationPath) {\n        console.log(`🔄 Applying migration: ${migration.description}`);\n        await migration.migrate();\n      }\n\n      console.log('✅ Version migration completed successfully');\n\n    } catch (error) {\n      console.error('Failed to perform version migration:', error);\n      \n      // Attempt to restore from backup\n      await this.restoreFromBackup();\n      throw error;\n    }\n  }\n\n  /**\n   * Detect legacy data in localStorage\n   */\n  async detectLegacyData() {\n    const legacyData = {};\n    \n    try {\n      // Check for old command processor data\n      const oldVariables = localStorage.getItem('commandProcessor_variables');\n      if (oldVariables) {\n        legacyData.variables = JSON.parse(oldVariables);\n      }\n\n      // Check for old settings\n      const oldSettings = localStorage.getItem('commandProcessor_settings');\n      if (oldSettings) {\n        legacyData.settings = JSON.parse(oldSettings);\n      }\n\n      // Check for old watchlists (if stored differently)\n      const oldWatchlists = localStorage.getItem('watchlists');\n      if (oldWatchlists) {\n        legacyData.watchlists = JSON.parse(oldWatchlists);\n      }\n\n      // Check for old alerts\n      const oldAlerts = localStorage.getItem('alerts');\n      if (oldAlerts) {\n        legacyData.alerts = JSON.parse(oldAlerts);\n      }\n\n      // Check for any other financeanalyst_ prefixed items\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('financeanalyst_') && \n            !key.includes('migration') && \n            !key.includes('session') && \n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          try {\n            legacyData[key] = JSON.parse(localStorage.getItem(key));\n          } catch (e) {\n            legacyData[key] = localStorage.getItem(key);\n          }\n        }\n      });\n\n      return legacyData;\n\n    } catch (error) {\n      console.error('Failed to detect legacy data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Migration to version 1.0.0\n   */\n  async migrateToV1_0_0(legacyData = null) {\n    try {\n      const dataToMigrate = legacyData || await this.detectLegacyData();\n      \n      // Migrate watchlists to new format\n      if (dataToMigrate.watchlists) {\n        const migratedWatchlists = this.migrateWatchlistsFormat(dataToMigrate.watchlists);\n        localStorage.setItem('financeanalyst_watchlists', JSON.stringify(migratedWatchlists));\n      }\n\n      // Migrate alerts to new format\n      if (dataToMigrate.alerts) {\n        const migratedAlerts = this.migrateAlertsFormat(dataToMigrate.alerts);\n        localStorage.setItem('financeanalyst_alerts', JSON.stringify(migratedAlerts));\n      }\n\n      // Migrate user preferences\n      if (dataToMigrate.settings) {\n        const migratedPreferences = this.migratePreferencesFormat(dataToMigrate.settings);\n        localStorage.setItem('financeanalyst_preferences', JSON.stringify(migratedPreferences));\n      }\n\n      // Migrate variables to new storage\n      if (dataToMigrate.variables) {\n        const migratedVariables = this.migrateVariablesFormat(dataToMigrate.variables);\n        localStorage.setItem('financeanalyst_user_variables', JSON.stringify(migratedVariables));\n      }\n\n      // Clean up old data\n      await this.cleanupLegacyData(dataToMigrate);\n\n      console.log('✅ Migration to v1.0.0 completed');\n\n    } catch (error) {\n      console.error('Failed to migrate to v1.0.0:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Migrate watchlists to new format\n   */\n  migrateWatchlistsFormat(oldWatchlists) {\n    const migrated = {};\n    \n    if (Array.isArray(oldWatchlists)) {\n      // Old format was array, convert to object\n      oldWatchlists.forEach((watchlist, index) => {\n        const name = watchlist.name || `Watchlist ${index + 1}`;\n        migrated[name] = {\n          tickers: watchlist.tickers || watchlist.stocks || [],\n          created: watchlist.created || new Date().toISOString().split('T')[0],\n          lastUpdated: watchlist.lastUpdated || null\n        };\n      });\n    } else if (typeof oldWatchlists === 'object') {\n      // Already in object format, just ensure structure\n      Object.entries(oldWatchlists).forEach(([name, data]) => {\n        migrated[name] = {\n          tickers: data.tickers || data.stocks || [],\n          created: data.created || new Date().toISOString().split('T')[0],\n          lastUpdated: data.lastUpdated || null\n        };\n      });\n    }\n\n    return migrated;\n  }\n\n  /**\n   * Migrate alerts to new format\n   */\n  migrateAlertsFormat(oldAlerts) {\n    if (!Array.isArray(oldAlerts)) {\n      return [];\n    }\n\n    return oldAlerts.map(alert => ({\n      id: alert.id || Date.now() + Math.random(),\n      ticker: alert.ticker,\n      condition: alert.condition,\n      value: alert.value,\n      created: alert.created || new Date().toISOString().split('T')[0],\n      triggered: alert.triggered || false\n    }));\n  }\n\n  /**\n   * Migrate preferences to new format\n   */\n  migratePreferencesFormat(oldSettings) {\n    return {\n      currency: oldSettings.currency || 'USD',\n      precision: oldSettings.precision || 2,\n      dateFormat: oldSettings.dateFormat || 'YYYY-MM-DD',\n      theme: oldSettings.theme || 'dark',\n      notifications: oldSettings.notifications !== false,\n      autoSave: oldSettings.autoSave !== false,\n      commandHistory: oldSettings.commandHistory !== false,\n      dataRetention: oldSettings.dataRetention || 30,\n      privacy: {\n        analytics: oldSettings.analytics || false,\n        crashReporting: oldSettings.crashReporting !== false,\n        dataSharing: oldSettings.dataSharing || false\n      }\n    };\n  }\n\n  /**\n   * Migrate variables to new format\n   */\n  migrateVariablesFormat(oldVariables) {\n    // Variables format should remain mostly the same\n    return { ...oldVariables };\n  }\n\n  /**\n   * Clean up legacy data after migration\n   */\n  async cleanupLegacyData(legacyData) {\n    try {\n      // Remove old localStorage keys\n      const keysToRemove = [\n        'commandProcessor_variables',\n        'commandProcessor_settings',\n        'watchlists',\n        'alerts'\n      ];\n\n      keysToRemove.forEach(key => {\n        if (localStorage.getItem(key)) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      // Remove other legacy keys found in detection\n      Object.keys(legacyData).forEach(key => {\n        if (key.startsWith('financeanalyst_') && \n            !key.includes('migration') && \n            !key.includes('session') && \n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      console.log('✅ Legacy data cleanup completed');\n\n    } catch (error) {\n      console.error('Failed to cleanup legacy data:', error);\n      // Don't throw - cleanup failure shouldn't break migration\n    }\n  }\n\n  /**\n   * Create backup before migration\n   */\n  async createMigrationBackup(data, version = 'legacy') {\n    try {\n      const backup = {\n        version,\n        timestamp: new Date().toISOString(),\n        data\n      };\n\n      localStorage.setItem(this.backupKey, JSON.stringify(backup));\n      console.log(`✅ Migration backup created for version ${version}`);\n\n    } catch (error) {\n      console.error('Failed to create migration backup:', error);\n      // Don't throw - backup failure shouldn't prevent migration\n    }\n  }\n\n  /**\n   * Restore from migration backup\n   */\n  async restoreFromBackup() {\n    try {\n      const backupData = localStorage.getItem(this.backupKey);\n      if (!backupData) {\n        throw new Error('No migration backup found');\n      }\n\n      const backup = JSON.parse(backupData);\n      \n      // Restore data based on backup version\n      if (backup.version === 'legacy') {\n        // Restore legacy format\n        Object.entries(backup.data).forEach(([key, value]) => {\n          localStorage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\n        });\n      }\n\n      console.log('✅ Data restored from migration backup');\n      return true;\n\n    } catch (error) {\n      console.error('Failed to restore from backup:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Export current data for backup\n   */\n  async exportCurrentData() {\n    const data = {};\n    \n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('financeanalyst_')) {\n        try {\n          data[key] = JSON.parse(localStorage.getItem(key));\n        } catch (e) {\n          data[key] = localStorage.getItem(key);\n        }\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Find migration path between versions\n   */\n  findMigrationPath(fromVersion, toVersion) {\n    // For now, simple direct migration\n    // In the future, this could handle complex migration chains\n    const migration = this.migrations[fromVersion];\n    \n    if (migration && migration.to === toVersion) {\n      return [migration];\n    }\n\n    return [];\n  }\n\n  /**\n   * Get migration status\n   */\n  getMigrationStatus() {\n    const storedVersion = localStorage.getItem(this.migrationKey);\n    const hasBackup = !!localStorage.getItem(this.backupKey);\n    \n    return {\n      currentVersion: this.currentVersion,\n      storedVersion,\n      needsMigration: storedVersion !== this.currentVersion,\n      hasBackup,\n      availableMigrations: Object.keys(this.migrations)\n    };\n  }\n\n  /**\n   * Clear migration backup\n   */\n  clearBackup() {\n    localStorage.removeItem(this.backupKey);\n    console.log('✅ Migration backup cleared');\n  }\n}\n","/**\n * Persistence Manager - Central data persistence orchestrator\n * Manages multiple storage layers and provides unified API for data persistence\n */\n\nimport { LocalStorageService } from './LocalStorageService';\nimport { IndexedDBService } from './IndexedDBService';\nimport { SessionManager } from './SessionManager';\nimport { DataMigrationService } from './DataMigrationService';\n\nexport class PersistenceManager {\n  constructor() {\n    this.localStorage = new LocalStorageService();\n    this.indexedDB = new IndexedDBService();\n    this.sessionManager = new SessionManager();\n    this.migrationService = new DataMigrationService();\n    \n    this.isInitialized = false;\n    this.storageQuota = null;\n    this.listeners = new Map();\n    \n    // Storage strategy configuration\n    this.storageStrategy = {\n      // Small, frequently accessed data -> localStorage\n      localStorage: [\n        'user_preferences',\n        'session_data',\n        'ui_state',\n        'recent_commands',\n        'quick_settings'\n      ],\n      // Large, complex data -> IndexedDB\n      indexedDB: [\n        'watchlists',\n        'analysis_history',\n        'command_history',\n        'alerts',\n        'cached_data',\n        'user_models',\n        'export_data'\n      ]\n    };\n  }\n\n  /**\n   * Initialize the persistence manager\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      // Check storage availability\n      await this.checkStorageAvailability();\n      \n      // Initialize storage services\n      await Promise.all([\n        this.localStorage.initialize(),\n        this.indexedDB.initialize(),\n        this.sessionManager.initialize()\n      ]);\n\n      // Check for data migrations\n      await this.migrationService.checkAndMigrate();\n\n      // Estimate storage quota\n      await this.estimateStorageQuota();\n\n      this.isInitialized = true;\n      console.log('✅ Persistence Manager initialized successfully');\n      \n      return {\n        success: true,\n        storageQuota: this.storageQuota,\n        availableStorage: await this.getAvailableStorage()\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize Persistence Manager:', error);\n      throw new Error(`Persistence initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Store data using appropriate storage layer\n   */\n  async store(key, data, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      encrypt = false,\n      compress = false,\n      ttl = null\n    } = options;\n\n    try {\n      const metadata = {\n        timestamp: Date.now(),\n        version: '1.0',\n        encrypted: encrypt,\n        compressed: compress,\n        ttl,\n        size: JSON.stringify(data).length\n      };\n\n      let result;\n      \n      if (storage === 'localStorage') {\n        result = await this.localStorage.store(key, data, { encrypt, ttl });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.store(key, data, { metadata, compress });\n      } else {\n        throw new Error(`Unknown storage layer: ${storage}`);\n      }\n\n      // Notify listeners\n      this.notifyListeners('store', { key, storage, metadata });\n\n      return result;\n\n    } catch (error) {\n      console.error(`Failed to store data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from appropriate storage layer\n   */\n  async retrieve(key, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      decrypt = false\n    } = options;\n\n    try {\n      let result;\n\n      if (storage === 'localStorage') {\n        result = await this.localStorage.retrieve(key, { decrypt });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.retrieve(key);\n      } else {\n        // Try both storage layers\n        result = await this.localStorage.retrieve(key, { decrypt }) ||\n                 await this.indexedDB.retrieve(key);\n      }\n\n      // Check TTL if applicable\n      if (result && result.metadata && result.metadata.ttl) {\n        const now = Date.now();\n        const expiry = result.metadata.timestamp + result.metadata.ttl;\n        \n        if (now > expiry) {\n          await this.remove(key, { storage });\n          return null;\n        }\n      }\n\n      return result ? result.data || result : null;\n\n    } catch (error) {\n      console.error(`Failed to retrieve data for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from storage\n   */\n  async remove(key, options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both' } = options;\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.remove(key));\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.remove(key));\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('remove', { key, storage });\n\n      return true;\n\n    } catch (error) {\n      console.error(`Failed to remove data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear all data from storage\n   */\n  async clear(options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both', confirm = false } = options;\n\n    if (!confirm) {\n      throw new Error('Clear operation requires explicit confirmation');\n    }\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.clear());\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.clear());\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('clear', { storage });\n\n      return true;\n\n    } catch (error) {\n      console.error('Failed to clear storage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStorageStats() {\n    await this.ensureInitialized();\n\n    try {\n      const [localStorageStats, indexedDBStats] = await Promise.all([\n        this.localStorage.getStats(),\n        this.indexedDB.getStats()\n      ]);\n\n      const totalUsed = localStorageStats.used + indexedDBStats.used;\n      const totalAvailable = await this.getAvailableStorage();\n\n      return {\n        localStorage: localStorageStats,\n        indexedDB: indexedDBStats,\n        total: {\n          used: totalUsed,\n          available: totalAvailable,\n          quota: this.storageQuota,\n          usagePercentage: this.storageQuota ? (totalUsed / this.storageQuota) * 100 : 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to get storage stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Export all user data\n   */\n  async exportData(options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      format = 'json',\n      includeMetadata = true,\n      compress = false\n    } = options;\n\n    try {\n      const [localStorageData, indexedDBData] = await Promise.all([\n        this.localStorage.exportAll(),\n        this.indexedDB.exportAll()\n      ]);\n\n      const exportData = {\n        version: '1.0',\n        timestamp: new Date().toISOString(),\n        localStorage: localStorageData,\n        indexedDB: indexedDBData\n      };\n\n      if (includeMetadata) {\n        exportData.metadata = {\n          userAgent: navigator.userAgent,\n          storageStats: await this.getStorageStats(),\n          exportOptions: options\n        };\n      }\n\n      return {\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import user data\n   */\n  async importData(importData, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      overwrite = false,\n      validate = true,\n      backup = true\n    } = options;\n\n    try {\n      // Validate import data\n      if (validate && !this.validateImportData(importData)) {\n        throw new Error('Invalid import data format');\n      }\n\n      // Create backup if requested\n      if (backup) {\n        const backupData = await this.exportData();\n        await this.store('backup_before_import', backupData, {\n          storage: 'indexedDB',\n          ttl: 7 * 24 * 60 * 60 * 1000 // 7 days\n        });\n      }\n\n      // Import localStorage data\n      if (importData.localStorage) {\n        await this.localStorage.importData(importData.localStorage, { overwrite });\n      }\n\n      // Import IndexedDB data\n      if (importData.indexedDB) {\n        await this.indexedDB.importData(importData.indexedDB, { overwrite });\n      }\n\n      // Notify listeners\n      this.notifyListeners('import', { size: JSON.stringify(importData).length });\n\n      return {\n        success: true,\n        imported: {\n          localStorage: Object.keys(importData.localStorage || {}).length,\n          indexedDB: Object.keys(importData.indexedDB || {}).length\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add event listener for storage events\n   */\n  addEventListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n\n  // Private methods\n\n  async ensureInitialized() {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  determineStorageLayer(key) {\n    if (this.storageStrategy.localStorage.includes(key)) {\n      return 'localStorage';\n    }\n    if (this.storageStrategy.indexedDB.includes(key)) {\n      return 'indexedDB';\n    }\n    // Default to localStorage for small data\n    return 'localStorage';\n  }\n\n  async checkStorageAvailability() {\n    // Check localStorage\n    if (!window.localStorage) {\n      throw new Error('localStorage is not available');\n    }\n\n    // Check IndexedDB\n    if (!window.indexedDB) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    return true;\n  }\n\n  async estimateStorageQuota() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      this.storageQuota = estimate.quota;\n      return estimate;\n    }\n    return null;\n  }\n\n  async getAvailableStorage() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return estimate.quota - estimate.usage;\n    }\n    return null;\n  }\n\n  validateImportData(data) {\n    return data && \n           typeof data === 'object' && \n           data.version && \n           (data.localStorage || data.indexedDB);\n  }\n\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in storage event listener:', error);\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const persistenceManager = new PersistenceManager();\n","/**\n * Enhanced Command Processor for FinanceAnalyst Pro Terminal\n * Provides modular, extensible command processing with categorization\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { dataFetchingService } from './dataFetching';\nimport { persistenceManager } from './persistence/PersistenceManager';\n\nexport class CommandProcessor {\n  constructor() {\n    this.commandHistory = [];\n    this.variables = new Map();\n    this.settings = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD'\n    };\n    this.persistenceInitialized = false;\n    this.maxHistorySize = 1000;\n  }\n\n  /**\n   * Initialize persistence layer\n   */\n  async initializePersistence() {\n    if (this.persistenceInitialized) return;\n\n    try {\n      await persistenceManager.initialize();\n\n      // Load persisted data\n      await this.loadPersistedData();\n\n      this.persistenceInitialized = true;\n      console.log('✅ Command processor persistence initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize persistence:', error);\n      // Continue without persistence\n    }\n  }\n\n  /**\n   * Load persisted data\n   */\n  async loadPersistedData() {\n    try {\n      // Load command history\n      const history = await persistenceManager.retrieve('command_history');\n      if (history && Array.isArray(history)) {\n        this.commandHistory = history.slice(-this.maxHistorySize);\n      }\n\n      // Load variables\n      const variables = await persistenceManager.retrieve('user_variables');\n      if (variables && typeof variables === 'object') {\n        this.variables = new Map(Object.entries(variables));\n      }\n\n      // Load settings\n      const settings = await persistenceManager.retrieve('user_preferences');\n      if (settings && typeof settings === 'object') {\n        this.settings = { ...this.settings, ...settings };\n      }\n\n    } catch (error) {\n      console.error('Failed to load persisted data:', error);\n    }\n  }\n\n  /**\n   * Save data to persistence layer\n   */\n  async saveData() {\n    if (!this.persistenceInitialized) return;\n\n    try {\n      // Save command history\n      await persistenceManager.store('command_history', this.commandHistory, {\n        storage: 'indexedDB'\n      });\n\n      // Save variables\n      const variablesObj = Object.fromEntries(this.variables);\n      await persistenceManager.store('user_variables', variablesObj, {\n        storage: 'localStorage'\n      });\n\n      // Save settings\n      await persistenceManager.store('user_preferences', this.settings, {\n        storage: 'localStorage'\n      });\n\n    } catch (error) {\n      console.error('Failed to save data:', error);\n    }\n  }\n\n  /**\n   * Process a command input and return structured response\n   * @param {string} input - Raw command input\n   * @param {Object} context - Execution context\n   * @returns {Promise<Object>} Command response\n   */\n  async processCommand(input, context = {}) {\n    const startTime = Date.now();\n\n    try {\n      // Initialize persistence if not already done\n      if (!this.persistenceInitialized) {\n        await this.initializePersistence();\n      }\n\n      // Parse command\n      const parsedCommand = this.parseCommand(input);\n\n      // Add to history\n      const historyEntry = {\n        input,\n        timestamp: new Date(),\n        success: false,\n        ...parsedCommand\n      };\n      this.commandHistory.push(historyEntry);\n\n      // Trim history if too long\n      if (this.commandHistory.length > this.maxHistorySize) {\n        this.commandHistory = this.commandHistory.slice(-this.maxHistorySize);\n      }\n\n      // Get command handler\n      const handler = commandRegistry.getHandler(parsedCommand.command);\n      \n      if (!handler) {\n        return this.createErrorResponse(`Unknown command: \"${parsedCommand.command}\"`, input);\n      }\n\n      // Validate parameters\n      const validationResult = this.validateParameters(handler, parsedCommand);\n      if (!validationResult.valid) {\n        return this.createErrorResponse(validationResult.error, input);\n      }\n\n      // Execute command\n      const result = await handler.execute(parsedCommand, context, this);\n\n      // Mark command as successful in history\n      historyEntry.success = result.type !== 'error';\n      historyEntry.executionTime = Date.now() - startTime;\n\n      // Add execution metadata\n      result.executionTime = Date.now() - startTime;\n      result.timestamp = new Date();\n\n      // Save data asynchronously (don't wait)\n      this.saveData().catch(error => {\n        console.error('Failed to save command processor data:', error);\n      });\n\n      return result;\n\n    } catch (error) {\n      return this.createErrorResponse(`Command execution failed: ${error.message}`, input);\n    }\n  }\n\n  /**\n   * Parse command input into structured format\n   * @param {string} input - Raw command input\n   * @returns {Object} Parsed command object\n   */\n  parseCommand(input) {\n    const trimmed = input.trim();\n    \n    // Handle function-style commands: COMMAND(param1, param2)\n    const functionMatch = trimmed.match(/^([A-Z_]+)\\s*\\(\\s*([^)]*)\\s*\\)$/i);\n    if (functionMatch) {\n      const [, command, paramString] = functionMatch;\n      const parameters = this.parseParameters(paramString);\n      return {\n        command: command.toUpperCase(),\n        parameters,\n        rawInput: trimmed,\n        style: 'function'\n      };\n    }\n\n    // Handle space-separated commands: COMMAND param1 param2\n    const parts = trimmed.split(/\\s+/);\n    const command = parts[0].toUpperCase();\n    const parameters = parts.slice(1);\n\n    return {\n      command,\n      parameters,\n      rawInput: trimmed,\n      style: 'space-separated'\n    };\n  }\n\n  /**\n   * Parse function parameters from string\n   * @param {string} paramString - Parameter string\n   * @returns {Array} Parsed parameters\n   */\n  parseParameters(paramString) {\n    if (!paramString.trim()) return [];\n\n    const params = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = 0;\n    let quoteChar = '';\n\n    for (let i = 0; i < paramString.length; i++) {\n      const char = paramString[i];\n      \n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        inQuotes = false;\n        quoteChar = '';\n      } else if (char === '[' && !inQuotes) {\n        inBrackets++;\n        current += char;\n      } else if (char === ']' && !inQuotes) {\n        inBrackets--;\n        current += char;\n      } else if (char === ',' && !inQuotes && inBrackets === 0) {\n        params.push(this.parseParameterValue(current.trim()));\n        current = '';\n        continue;\n      } else {\n        current += char;\n      }\n    }\n\n    if (current.trim()) {\n      params.push(this.parseParameterValue(current.trim()));\n    }\n\n    return params;\n  }\n\n  /**\n   * Parse individual parameter value\n   * @param {string} value - Parameter value string\n   * @returns {*} Parsed value\n   */\n  parseParameterValue(value) {\n    // Remove quotes\n    if ((value.startsWith('\"') && value.endsWith('\"')) || \n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      return value.slice(1, -1);\n    }\n\n    // Parse arrays\n    if (value.startsWith('[') && value.endsWith(']')) {\n      const arrayContent = value.slice(1, -1);\n      if (!arrayContent.trim()) return [];\n      return arrayContent.split(',').map(item => this.parseParameterValue(item.trim()));\n    }\n\n    // Parse numbers\n    if (/^-?\\d+\\.?\\d*$/.test(value)) {\n      return parseFloat(value);\n    }\n\n    // Parse booleans\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n\n    // Return as string\n    return value;\n  }\n\n  /**\n   * Validate command parameters\n   * @param {Object} handler - Command handler\n   * @param {Object} parsedCommand - Parsed command\n   * @returns {Object} Validation result\n   */\n  validateParameters(handler, parsedCommand) {\n    if (!handler.parameterSchema) {\n      return { valid: true };\n    }\n\n    const { required = [], optional = [] } = handler.parameterSchema;\n    const { parameters } = parsedCommand;\n\n    // Check required parameters\n    if (parameters.length < required.length) {\n      return {\n        valid: false,\n        error: `Missing required parameters. Expected: ${required.join(', ')}`\n      };\n    }\n\n    // Check maximum parameters\n    const maxParams = required.length + optional.length;\n    if (parameters.length > maxParams) {\n      return {\n        valid: false,\n        error: `Too many parameters. Maximum: ${maxParams}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Create error response\n   * @param {string} message - Error message\n   * @param {string} input - Original input\n   * @returns {Object} Error response\n   */\n  createErrorResponse(message, input) {\n    return {\n      type: 'error',\n      content: message,\n      suggestions: this.getSuggestions(input),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Get command suggestions for invalid input\n   * @param {string} input - Original input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(input) {\n    const command = input.split(/[\\s(]/)[0].toUpperCase();\n    const allCommands = commandRegistry.getAllCommands();\n    \n    return allCommands\n      .filter(cmd => cmd.includes(command.substring(0, 3)) || \n                     cmd.toLowerCase().includes(command.toLowerCase()))\n      .slice(0, 5);\n  }\n\n  /**\n   * Get command history\n   * @param {number} limit - Number of recent commands\n   * @returns {Array} Command history\n   */\n  getHistory(limit = 10) {\n    return this.commandHistory.slice(-limit);\n  }\n\n  /**\n   * Clear command history\n   */\n  clearHistory() {\n    this.commandHistory = [];\n  }\n\n  /**\n   * Set variable value\n   * @param {string} name - Variable name\n   * @param {*} value - Variable value\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n\n    // Save variables asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save variables:', error);\n      });\n    }\n  }\n\n  /**\n   * Get variable value\n   * @param {string} name - Variable name\n   * @returns {*} Variable value\n   */\n  getVariable(name) {\n    return this.variables.get(name);\n  }\n\n  /**\n   * Get all variables\n   * @returns {Object} All variables\n   */\n  getAllVariables() {\n    return Object.fromEntries(this.variables);\n  }\n\n  /**\n   * Update settings\n   * @param {string} key - Setting key\n   * @param {*} value - Setting value\n   */\n  updateSetting(key, value) {\n    this.settings[key] = value;\n\n    // Save settings asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save settings:', error);\n      });\n    }\n  }\n\n  /**\n   * Get setting value\n   * @param {string} key - Setting key\n   * @returns {*} Setting value\n   */\n  getSetting(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Get all settings\n   * @returns {Object} All settings\n   */\n  getAllSettings() {\n    return { ...this.settings };\n  }\n}\n\n// Export singleton instance\nexport const commandProcessor = new CommandProcessor();\n","/**\n * Core Financial Analysis Commands\n * DCF, LBO, COMP, and other fundamental analysis commands\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { \n  calculateDCFValuation, \n  calculateLBOReturns, \n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation';\n\nexport const coreCommands = {\n  DCF: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DCF command requires a ticker symbol. Usage: DCF(AAPL)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building DCF model for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating free cash flows\\n• Determining terminal value\\n• Computing present values...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        // This would be called from the terminal to show loading\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const dcfInputs = await dataFetchingService.fetchDCFInputs(ticker.toUpperCase());\n        const dcfResults = calculateDCFValuation(dcfInputs);\n\n        const content = `DCF Valuation Analysis for ${dcfInputs.companyName} (${ticker.toUpperCase()})\\n\\n📊 VALUATION SUMMARY:\\n• Current Price: ${formatCurrency(dcfInputs.currentPrice)}\\n• Fair Value: ${formatCurrency(dcfResults.fairValue)}\\n• Upside/Downside: ${formatPercentage(dcfResults.upside / 100)}\\n\\n💰 KEY METRICS:\\n• Enterprise Value: ${formatCurrency(dcfResults.enterpriseValue, 'USD', true)}\\n• Equity Value: ${formatCurrency(dcfResults.equityValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(dcfResults.terminalValue, 'USD', true)}\\n• WACC: ${formatPercentage(dcfResults.wacc)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${dcfResults.projections.map((proj, i) => `Year ${i + 1}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}`).join('\\n')}\\n\\n🎯 RECOMMENDATION: ${dcfResults.recommendation}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'dcf',\n            ticker: ticker.toUpperCase(),\n            results: dcfResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  LBO: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'LBO command requires a ticker symbol. Usage: LBO(TSLA)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Analyzing LBO potential for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating debt capacity\\n• Analyzing peer multiples\\n• Computing returns scenarios...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, financials] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement')\n        ]);\n\n        const lboInputs = {\n          companyName: profile.companyName,\n          currentPrice: profile.price,\n          marketCap: profile.mktCap,\n          ebitda: financials[0]?.ebitda || profile.mktCap * 0.15,\n          revenue: financials[0]?.revenue || profile.mktCap * 2,\n          debt: profile.totalDebt || 0,\n          cash: profile.totalCash || 0\n        };\n\n        const lboResults = calculateLBOReturns(lboInputs);\n\n        const content = `LBO Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💼 TRANSACTION SUMMARY:\\n• Purchase Price: ${formatCurrency(lboResults.purchasePrice, 'USD', true)}\\n• Equity Investment: ${formatCurrency(lboResults.equityInvestment, 'USD', true)}\\n• Total Debt: ${formatCurrency(lboResults.totalDebt, 'USD', true)}\\n• Debt/Equity Ratio: ${formatNumber(lboResults.debtToEquity, 1)}x\\n\\n📈 PROJECTED RETURNS (5-year hold):\\n• Exit Equity Value: ${formatCurrency(lboResults.exitEquityValue, 'USD', true)}\\n• Total Return: ${formatCurrency(lboResults.totalReturn, 'USD', true)}\\n• IRR: ${formatPercentage(lboResults.irr)}\\n• MOIC: ${formatNumber(lboResults.moic, 1)}x\\n\\n🎯 EXIT ASSUMPTIONS:\\n• Exit EBITDA: ${formatCurrency(lboResults.exitEbitda, 'USD', true)}\\n• Exit Multiple: ${formatNumber(lboResults.exitMultiple, 1)}x\\n• Exit Enterprise Value: ${formatCurrency(lboResults.exitEnterpriseValue, 'USD', true)}\\n\\n💰 FEES & CARRY:\\n• Management Fees: ${formatCurrency(lboResults.managementFees, 'USD', true)}\\n• Carried Interest: ${formatCurrency(lboResults.carriedInterest, 'USD', true)}\\n• Net Return: ${formatCurrency(lboResults.netReturn, 'USD', true)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'lbo',\n            ticker: ticker.toUpperCase(),\n            results: lboResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `LBO analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  COMP: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'COMP command requires a ticker symbol. Usage: COMP(MSFT)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building comparable company analysis for ${ticker.toUpperCase()}...\\n• Identifying peer companies\\n• Fetching peer financial data\\n• Calculating valuation multiples\\n• Generating relative analysis...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, peers] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchPeerComparables(ticker.toUpperCase())\n        ]);\n\n        const companyData = {\n          symbol: ticker.toUpperCase(),\n          name: profile.companyName,\n          marketCap: profile.mktCap,\n          peRatio: profile.pe,\n          evToEbitda: profile.enterpriseValueOverEBITDA,\n          priceToBook: profile.pb,\n          debtToEquity: profile.debtToEquity\n        };\n\n        const compAnalysis = calculateComparableMetrics(companyData, peers);\n\n        const content = `Comparable Company Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 PEER GROUP (${peers.length} companies):\\n${peers.slice(0, 5).map(peer => `• ${peer.symbol}: ${peer.name}`).join('\\n')}\\n\\n📊 VALUATION MULTIPLES:\\n• P/E Ratio: ${formatNumber(companyData.peRatio, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x)\\n• EV/EBITDA: ${formatNumber(companyData.evToEbitda, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.evToEbitda.median, 1)}x)\\n• P/B Ratio: ${formatNumber(companyData.priceToBook, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.priceToBook.median, 1)}x)\\n\\n📈 RELATIVE VALUATION:\\n• P/E vs Peers: ${formatPercentage((compAnalysis.relativeValuation.peRatioRelative - 1))}\\n• EV/EBITDA vs Peers: ${formatPercentage((compAnalysis.relativeValuation.evEbitdaRelative - 1))}\\n• P/B vs Peers: ${formatPercentage((compAnalysis.relativeValuation.priceToBookRelative - 1))}\\n\\n💰 MARKET POSITION:\\n• Market Cap Percentile: ${formatNumber(compAnalysis.relativeValuation.marketCapPercentile)}th\\n• Size: ${companyData.marketCap > compAnalysis.peerStatistics.marketCap.median ? 'Above' : 'Below'} peer median\\n\\n🎯 PEER VALUATION RANGE:\\n• Min P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.min, 1)}x\\n• Max P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.max, 1)}x\\n• Median P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'comparable',\n            ticker: ticker.toUpperCase(),\n            results: compAnalysis\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Comparable analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  FETCH: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'FETCH command requires a ticker symbol. Usage: FETCH(GOOGL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        const content = `Company Data for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 COMPANY PROFILE:\\n• Industry: ${profile.industry}\\n• Sector: ${profile.sector}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• Employees: ${formatNumber(profile.fullTimeEmployees, 0)}\\n\\n💰 FINANCIAL METRICS:\\n• Price: ${formatCurrency(profile.price)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}\\n• EPS: ${formatCurrency(profile.eps)}\\n• Revenue (TTM): ${formatCurrency(profile.revenue, 'USD', true)}\\n• Profit Margin: ${formatPercentage(profile.profitMargin)}\\n\\n📊 VALUATION RATIOS:\\n• Price/Book: ${formatNumber(profile.pb, 2)}\\n• Price/Sales: ${formatNumber(profile.ps, 2)}\\n• EV/EBITDA: ${formatNumber(profile.enterpriseValueOverEBITDA, 1)}\\n• EV/Revenue: ${formatNumber(profile.enterpriseValueOverRevenue, 1)}\\n\\n💼 BALANCE SHEET:\\n• Total Debt: ${formatCurrency(profile.totalDebt, 'USD', true)}\\n• Total Cash: ${formatCurrency(profile.totalCash, 'USD', true)}\\n• Book Value: ${formatCurrency(profile.bookValue, 'USD', true)}\\n• Debt/Equity: ${formatNumber(profile.debtToEquity, 2)}\\n\\n📈 PERFORMANCE:\\n• 52W High: ${formatCurrency(profile.priceHigh52)}\\n• 52W Low: ${formatCurrency(profile.priceLow52)}\\n• Beta: ${formatNumber(profile.beta, 2)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live data.' : '✅ Data from live market sources'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'profile',\n            ticker: ticker.toUpperCase(),\n            results: profile\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data fetch failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Portfolio & Risk Management Commands\n * Portfolio analysis, risk metrics, and optimization commands\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const portfolioCommands = {\n  PORTFOLIO: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers, weights] = parsedCommand.parameters;\n      \n      if (!tickers || !weights) {\n        return {\n          type: 'error',\n          content: 'PORTFOLIO command requires tickers and weights. Usage: PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])'\n        };\n      }\n\n      try {\n        const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n        const weightArray = Array.isArray(weights) ? weights : [weights];\n\n        if (tickerArray.length !== weightArray.length) {\n          return {\n            type: 'error',\n            content: 'Number of tickers must match number of weights'\n          };\n        }\n\n        const totalWeight = weightArray.reduce((sum, w) => sum + w, 0);\n        if (Math.abs(totalWeight - 1.0) > 0.01) {\n          return {\n            type: 'error',\n            content: `Weights must sum to 1.0 (currently sum to ${totalWeight})`\n          };\n        }\n\n        // Fetch data for all tickers\n        const portfolioData = await Promise.all(\n          tickerArray.map(async (ticker, index) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              weight: weightArray[index],\n              price: profile.price,\n              marketCap: profile.mktCap,\n              beta: profile.beta || 1.0,\n              pe: profile.pe,\n              dividendYield: profile.dividendYield || 0\n            };\n          })\n        );\n\n        // Calculate portfolio metrics\n        const portfolioValue = portfolioData.reduce((sum, stock) => sum + (stock.marketCap * stock.weight), 0);\n        const weightedBeta = portfolioData.reduce((sum, stock) => sum + (stock.beta * stock.weight), 0);\n        const weightedPE = portfolioData.reduce((sum, stock) => sum + (stock.pe * stock.weight), 0);\n        const weightedDividendYield = portfolioData.reduce((sum, stock) => sum + (stock.dividendYield * stock.weight), 0);\n\n        // Calculate diversification metrics\n        const maxWeight = Math.max(...weightArray);\n        const minWeight = Math.min(...weightArray);\n        const concentrationRatio = maxWeight / minWeight;\n\n        const content = `Portfolio Analysis\\n\\n📊 PORTFOLIO COMPOSITION:\\n${portfolioData.map(stock => \n          `• ${stock.ticker} (${stock.name}): ${formatPercentage(stock.weight)} - ${formatCurrency(stock.price)}`\n        ).join('\\n')}\\n\\n📈 PORTFOLIO METRICS:\\n• Total Portfolio Value: ${formatCurrency(portfolioValue, 'USD', true)}\\n• Weighted Beta: ${formatNumber(weightedBeta, 2)}\\n• Weighted P/E: ${formatNumber(weightedPE, 1)}x\\n• Weighted Dividend Yield: ${formatPercentage(weightedDividendYield)}\\n\\n🎯 DIVERSIFICATION:\\n• Number of Holdings: ${tickerArray.length}\\n• Max Position: ${formatPercentage(maxWeight)}\\n• Min Position: ${formatPercentage(minWeight)}\\n• Concentration Ratio: ${formatNumber(concentrationRatio, 1)}\\n\\n⚖️ RISK PROFILE:\\n• Portfolio Beta: ${weightedBeta > 1.2 ? 'High Risk' : weightedBeta > 0.8 ? 'Moderate Risk' : 'Low Risk'}\\n• Diversification: ${tickerArray.length >= 10 ? 'Well Diversified' : tickerArray.length >= 5 ? 'Moderately Diversified' : 'Concentrated'}\\n• Concentration Risk: ${maxWeight > 0.3 ? 'High' : maxWeight > 0.2 ? 'Moderate' : 'Low'}\\n\\n💡 RECOMMENDATIONS:\\n${maxWeight > 0.4 ? '• Consider reducing concentration in largest position\\n' : ''}${tickerArray.length < 5 ? '• Consider adding more holdings for diversification\\n' : ''}${weightedBeta > 1.5 ? '• Portfolio has high market risk exposure\\n' : ''}${weightedDividendYield < 0.02 ? '• Consider adding dividend-paying stocks for income\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'portfolio',\n            holdings: portfolioData,\n            metrics: {\n              portfolioValue,\n              weightedBeta,\n              weightedPE,\n              weightedDividendYield,\n              concentrationRatio\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Portfolio analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  },\n\n  RISK_METRICS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RISK_METRICS command requires a ticker symbol. Usage: RISK_METRICS(AAPL, 252)'\n        };\n      }\n\n      try {\n        // Fetch historical data and calculate risk metrics\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock risk calculations (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16; // Approximate volatility based on beta\n        const sharpeRatio = (0.08 - 0.02) / volatility; // Assuming 8% return, 2% risk-free rate\n        const var95 = volatility * 1.645; // 95% VaR\n        const var99 = volatility * 2.326; // 99% VaR\n        const maxDrawdown = volatility * 2.5; // Estimated max drawdown\n        const sortinoRatio = sharpeRatio * 1.2; // Sortino typically higher than Sharpe\n\n        const content = `Risk Metrics for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 VOLATILITY MEASURES:\\n• Annualized Volatility: ${formatPercentage(volatility)}\\n• Beta (vs S&P 500): ${formatNumber(profile.beta, 2)}\\n• Standard Deviation: ${formatPercentage(volatility)}\\n\\n⚠️ VALUE AT RISK (VaR):\\n• 1-Day VaR (95%): ${formatPercentage(var95 / Math.sqrt(252))}\\n• 1-Day VaR (99%): ${formatPercentage(var99 / Math.sqrt(252))}\\n• 1-Month VaR (95%): ${formatPercentage(var95 / Math.sqrt(12))}\\n• 1-Year VaR (95%): ${formatPercentage(var95)}\\n\\n📈 RISK-ADJUSTED RETURNS:\\n• Sharpe Ratio: ${formatNumber(sharpeRatio, 2)}\\n• Sortino Ratio: ${formatNumber(sortinoRatio, 2)}\\n• Information Ratio: ${formatNumber(sharpeRatio * 0.8, 2)}\\n• Treynor Ratio: ${formatNumber((0.08 - 0.02) / profile.beta, 3)}\\n\\n📉 DOWNSIDE RISK:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Downside Deviation: ${formatPercentage(volatility * 0.7)}\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)}\\n\\n🎯 RISK ASSESSMENT:\\n• Risk Level: ${volatility > 0.3 ? 'High' : volatility > 0.2 ? 'Moderate' : 'Low'}\\n• Sharpe Quality: ${sharpeRatio > 1.0 ? 'Excellent' : sharpeRatio > 0.5 ? 'Good' : 'Poor'}\\n• Beta Classification: ${profile.beta > 1.2 ? 'Aggressive' : profile.beta > 0.8 ? 'Market' : 'Defensive'}\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated risk metrics. Configure API keys for historical data.' : '✅ Based on historical market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'risk_metrics',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              volatility,\n              beta: profile.beta,\n              sharpeRatio,\n              sortinoRatio,\n              var95,\n              var99,\n              maxDrawdown\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Risk metrics calculation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  },\n\n  CORRELATION_MATRIX: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers] = parsedCommand.parameters;\n      \n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'CORRELATION_MATRIX command requires an array of tickers. Usage: CORRELATION_MATRIX([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Correlation matrix requires at least 2 tickers'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async (ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              beta: profile.beta || 1.0,\n              sector: profile.sector\n            };\n          })\n        );\n\n        // Generate mock correlation matrix (in real implementation, would use historical returns)\n        const correlationMatrix = {};\n        for (let i = 0; i < stockData.length; i++) {\n          correlationMatrix[stockData[i].ticker] = {};\n          for (let j = 0; j < stockData.length; j++) {\n            if (i === j) {\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = 1.0;\n            } else {\n              // Mock correlation based on sector similarity and beta similarity\n              const sectorCorr = stockData[i].sector === stockData[j].sector ? 0.3 : 0.1;\n              const betaCorr = 1 - Math.abs(stockData[i].beta - stockData[j].beta) * 0.2;\n              const correlation = Math.min(0.95, Math.max(-0.5, sectorCorr + betaCorr * 0.4 + (Math.random() - 0.5) * 0.3));\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = correlation;\n            }\n          }\n        }\n\n        // Calculate average correlations\n        let totalCorr = 0;\n        let count = 0;\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            totalCorr += correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            count++;\n          }\n        }\n        const avgCorrelation = totalCorr / count;\n\n        // Find highest and lowest correlations\n        let maxCorr = -1, minCorr = 1;\n        let maxPair = '', minPair = '';\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            const corr = correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            if (corr > maxCorr) {\n              maxCorr = corr;\n              maxPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n            if (corr < minCorr) {\n              minCorr = corr;\n              minPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n          }\n        }\n\n        const matrixDisplay = stockData.map(stock => \n          `${stock.ticker.padEnd(6)} ${stockData.map(s => \n            formatNumber(correlationMatrix[stock.ticker][s.ticker], 2).padStart(6)\n          ).join(' ')}`\n        ).join('\\n');\n\n        const content = `Correlation Matrix Analysis\\n\\n📊 CORRELATION MATRIX:\\n       ${stockData.map(s => s.ticker.padStart(6)).join(' ')}\\n${matrixDisplay}\\n\\n📈 CORRELATION STATISTICS:\\n• Average Correlation: ${formatNumber(avgCorrelation, 3)}\\n• Highest Correlation: ${formatNumber(maxCorr, 3)} (${maxPair})\\n• Lowest Correlation: ${formatNumber(minCorr, 3)} (${minPair})\\n\\n🎯 DIVERSIFICATION ANALYSIS:\\n• Portfolio Diversification: ${avgCorrelation < 0.3 ? 'Excellent' : avgCorrelation < 0.5 ? 'Good' : avgCorrelation < 0.7 ? 'Moderate' : 'Poor'}\\n• Risk Reduction Benefit: ${formatPercentage(1 - avgCorrelation)}\\n• Concentration Risk: ${maxCorr > 0.8 ? 'High' : maxCorr > 0.6 ? 'Moderate' : 'Low'}\\n\\n🏢 SECTOR BREAKDOWN:\\n${stockData.map(stock => `• ${stock.ticker}: ${stock.sector}`).join('\\n')}\\n\\n💡 INSIGHTS:\\n${avgCorrelation > 0.7 ? '• High correlations suggest limited diversification benefits\\n' : ''}${minCorr < 0 ? '• Negative correlations provide excellent hedging opportunities\\n' : ''}${maxCorr > 0.9 ? '• Some holdings are highly correlated - consider reducing overlap\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'correlation_matrix',\n            tickers: tickers.map(t => t.toUpperCase()),\n            correlationMatrix,\n            statistics: {\n              avgCorrelation,\n              maxCorr,\n              minCorr,\n              maxPair,\n              minPair\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Correlation analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  EFFICIENT_FRONTIER: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'EFFICIENT_FRONTIER command requires an array of tickers. Usage: EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Efficient frontier requires at least 2 assets'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async (ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              expectedReturn: (profile.beta || 1.0) * 0.08 + 0.02, // CAPM approximation\n              volatility: (profile.beta || 1.0) * 0.16, // Market volatility scaled by beta\n              beta: profile.beta || 1.0\n            };\n          })\n        );\n\n        // Generate efficient frontier points (simplified calculation)\n        const frontierPoints = [];\n        for (let targetReturn = 0.05; targetReturn <= 0.20; targetReturn += 0.01) {\n          // Simplified optimization - equal weights adjusted for target return\n          const weights = stockData.map(stock => {\n            const baseWeight = 1 / stockData.length;\n            const returnAdjustment = (targetReturn - 0.08) * (stock.expectedReturn - 0.08) * 2;\n            return Math.max(0.05, Math.min(0.95, baseWeight + returnAdjustment));\n          });\n\n          // Normalize weights\n          const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n          const normalizedWeights = weights.map(w => w / totalWeight);\n\n          // Calculate portfolio metrics\n          const portfolioReturn = stockData.reduce((sum, stock, i) =>\n            sum + normalizedWeights[i] * stock.expectedReturn, 0);\n          const portfolioVolatility = Math.sqrt(stockData.reduce((sum, stock, i) =>\n            sum + Math.pow(normalizedWeights[i] * stock.volatility, 2), 0));\n          const sharpeRatio = (portfolioReturn - 0.02) / portfolioVolatility;\n\n          frontierPoints.push({\n            return: portfolioReturn,\n            volatility: portfolioVolatility,\n            sharpeRatio,\n            weights: normalizedWeights\n          });\n        }\n\n        // Find optimal portfolio (max Sharpe ratio)\n        const optimalPortfolio = frontierPoints.reduce((best, current) =>\n          current.sharpeRatio > best.sharpeRatio ? current : best);\n\n        const content = `Efficient Frontier Analysis\\n\\n📊 ASSET UNIVERSE:\\n${stockData.map(stock =>\n          `• ${stock.ticker}: Expected Return ${formatPercentage(stock.expectedReturn)}, Volatility ${formatPercentage(stock.volatility)}`\n        ).join('\\n')}\\n\\n🎯 OPTIMAL PORTFOLIO (Max Sharpe Ratio):\\n• Expected Return: ${formatPercentage(optimalPortfolio.return)}\\n• Volatility: ${formatPercentage(optimalPortfolio.volatility)}\\n• Sharpe Ratio: ${formatNumber(optimalPortfolio.sharpeRatio, 2)}\\n\\n⚖️ OPTIMAL WEIGHTS:\\n${stockData.map((stock, i) =>\n          `• ${stock.ticker}: ${formatPercentage(optimalPortfolio.weights[i])}`\n        ).join('\\n')}\\n\\n📈 FRONTIER STATISTICS:\\n• Minimum Volatility: ${formatPercentage(Math.min(...frontierPoints.map(p => p.volatility)))}\\n• Maximum Return: ${formatPercentage(Math.max(...frontierPoints.map(p => p.return)))}\\n• Best Sharpe Ratio: ${formatNumber(Math.max(...frontierPoints.map(p => p.sharpeRatio)), 2)}\\n• Frontier Points: ${frontierPoints.length}\\n\\n💡 INSIGHTS:\\n• Diversification reduces portfolio risk below individual asset volatilities\\n• Optimal portfolio balances return and risk for maximum risk-adjusted return\\n• Consider rebalancing periodically to maintain target allocation\\n\\n⚠️ Note: Analysis uses simplified assumptions. Real optimization requires historical correlation data.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'efficient_frontier',\n            assets: stockData,\n            frontierPoints,\n            optimalPortfolio\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Efficient frontier analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  DRAWDOWN: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DRAWDOWN command requires a ticker symbol. Usage: DRAWDOWN(AAPL, 252)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock drawdown analysis (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16;\n        const maxDrawdown = volatility * 2.5; // Estimated based on volatility\n        const avgDrawdown = maxDrawdown * 0.4;\n        const drawdownFrequency = volatility * 12; // Drawdowns per year\n        const recoveryTime = maxDrawdown * 100; // Days to recover\n\n        // Generate mock drawdown periods\n        const drawdownPeriods = [\n          { start: '2023-03-01', end: '2023-04-15', magnitude: maxDrawdown * 0.8, duration: 45 },\n          { start: '2023-07-10', end: '2023-08-20', magnitude: maxDrawdown * 0.6, duration: 41 },\n          { start: '2023-11-05', end: '2023-12-01', magnitude: maxDrawdown * 0.4, duration: 26 },\n          { start: '2024-02-15', end: '2024-03-10', magnitude: maxDrawdown * 0.7, duration: 24 }\n        ];\n\n        const content = `Drawdown Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📉 DRAWDOWN STATISTICS:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Average Drawdown: ${formatPercentage(avgDrawdown)}\\n• Drawdown Frequency: ${formatNumber(drawdownFrequency, 1)} per year\\n• Average Recovery Time: ${formatNumber(recoveryTime, 0)} days\\n\\n📊 HISTORICAL DRAWDOWNS:\\n${drawdownPeriods.map((dd, i) =>\n          `${i + 1}. ${dd.start} to ${dd.end}: ${formatPercentage(dd.magnitude)} (${dd.duration} days)`\n        ).join('\\n')}\\n\\n⚠️ RISK ASSESSMENT:\\n• Drawdown Risk: ${maxDrawdown > 0.3 ? 'High' : maxDrawdown > 0.2 ? 'Moderate' : 'Low'}\\n• Recovery Speed: ${recoveryTime < 60 ? 'Fast' : recoveryTime < 120 ? 'Moderate' : 'Slow'}\\n• Volatility Impact: ${volatility > 0.25 ? 'High volatility increases drawdown risk' : 'Moderate volatility profile'}\\n\\n📈 PERFORMANCE METRICS:\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)} (Annual Return / Max Drawdown)\\n• Pain Index: ${formatNumber(avgDrawdown * drawdownFrequency, 2)}\\n• Ulcer Index: ${formatNumber(Math.sqrt(avgDrawdown), 3)}\\n\\n💡 INSIGHTS:\\n• Drawdowns are normal part of investing - focus on recovery patterns\\n• Diversification can help reduce maximum drawdown magnitude\\n• Consider position sizing based on maximum acceptable drawdown\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated drawdown metrics. Configure API keys for historical data.' : '✅ Based on historical price data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'drawdown',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              maxDrawdown,\n              avgDrawdown,\n              drawdownFrequency,\n              recoveryTime,\n              drawdownPeriods\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Drawdown analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  }\n};\n","/**\n * Advanced Valuation Model Commands\n * DDM, Residual Income, Asset-Based, and other sophisticated valuation techniques\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const valuationCommands = {\n  DDM: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DDM command requires a ticker symbol. Usage: DDM(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // DDM calculations\n        const currentDividend = profile.dividendYield * profile.price || 0;\n        const dividendGrowthRate = 0.05; // Assumed 5% growth\n        const requiredReturn = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        \n        if (currentDividend === 0) {\n          return {\n            type: 'warning',\n            content: `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n⚠️ NO DIVIDEND ANALYSIS:\\n• Current Dividend: $0.00\\n• Dividend Yield: 0.00%\\n• Company does not pay dividends\\n\\n💡 ALTERNATIVE VALUATION METHODS:\\n• Consider using DCF(${ticker.toUpperCase()}) for non-dividend paying stocks\\n• Growth companies often reinvest earnings rather than pay dividends\\n• Use COMP(${ticker.toUpperCase()}) for relative valuation\\n\\n📊 COMPANY METRICS:\\n• Current Price: ${formatCurrency(profile.price)}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}x\\n• Beta: ${formatNumber(profile.beta, 2)}`\n          };\n        }\n\n        // Gordon Growth Model\n        const gordonValue = currentDividend * (1 + dividendGrowthRate) / (requiredReturn - dividendGrowthRate);\n        \n        // Two-stage DDM\n        const highGrowthYears = 5;\n        const highGrowthRate = dividendGrowthRate * 1.5;\n        const terminalGrowthRate = 0.03;\n        \n        let presentValueHighGrowth = 0;\n        for (let year = 1; year <= highGrowthYears; year++) {\n          const dividend = currentDividend * Math.pow(1 + highGrowthRate, year);\n          const presentValue = dividend / Math.pow(1 + requiredReturn, year);\n          presentValueHighGrowth += presentValue;\n        }\n        \n        const terminalDividend = currentDividend * Math.pow(1 + highGrowthRate, highGrowthYears) * (1 + terminalGrowthRate);\n        const terminalValue = terminalDividend / (requiredReturn - terminalGrowthRate);\n        const presentValueTerminal = terminalValue / Math.pow(1 + requiredReturn, highGrowthYears);\n        \n        const twoStageValue = presentValueHighGrowth + presentValueTerminal;\n        \n        // Calculate upside/downside\n        const gordonUpside = ((gordonValue - profile.price) / profile.price) * 100;\n        const twoStageUpside = ((twoStageValue - profile.price) / profile.price) * 100;\n\n        const content = `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💰 DIVIDEND INFORMATION:\\n• Current Annual Dividend: ${formatCurrency(currentDividend)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n• Estimated Growth Rate: ${formatPercentage(dividendGrowthRate)}\\n• Required Return (CAPM): ${formatPercentage(requiredReturn)}\\n\\n📊 GORDON GROWTH MODEL:\\n• Fair Value: ${formatCurrency(gordonValue)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(gordonUpside / 100)}\\n\\n📈 TWO-STAGE DDM:\\n• High Growth Period: ${highGrowthYears} years at ${formatPercentage(highGrowthRate)}\\n• Terminal Growth: ${formatPercentage(terminalGrowthRate)}\\n• PV of High Growth Dividends: ${formatCurrency(presentValueHighGrowth)}\\n• PV of Terminal Value: ${formatCurrency(presentValueTerminal)}\\n• Total Fair Value: ${formatCurrency(twoStageValue)}\\n• Upside/(Downside): ${formatPercentage(twoStageUpside / 100)}\\n\\n🎯 VALUATION SUMMARY:\\n• Gordon Model: ${gordonUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(gordonUpside) / 100)}\\n• Two-Stage Model: ${twoStageUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(twoStageUpside) / 100)}\\n• Average Fair Value: ${formatCurrency((gordonValue + twoStageValue) / 2)}\\n\\n⚠️ KEY ASSUMPTIONS:\\n• Dividend growth rates are estimates\\n• Required return based on CAPM\\n• Terminal growth rate of ${formatPercentage(terminalGrowthRate)} assumed\\n• Model assumes dividends grow in perpetuity\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'ddm',\n            ticker: ticker.toUpperCase(),\n            results: {\n              currentDividend,\n              gordonValue,\n              twoStageValue,\n              gordonUpside,\n              twoStageUpside,\n              requiredReturn,\n              dividendGrowthRate\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DDM analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  RESIDUAL_INCOME: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RESIDUAL_INCOME command requires a ticker symbol. Usage: RESIDUAL_INCOME(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // Residual Income calculations\n        const bookValue = profile.bookValue || profile.mktCap / 2; // Fallback estimate\n        const roe = profile.returnOnEquityTTM || 0.15; // Fallback 15%\n        const costOfEquity = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        const netIncome = financials[0]?.netIncome || profile.mktCap * 0.08; // Fallback estimate\n        \n        // Calculate residual income\n        const normalIncome = bookValue * costOfEquity;\n        const residualIncome = netIncome - normalIncome;\n        \n        // Project residual income for 5 years\n        const projectionYears = 5;\n        const residualIncomeGrowth = Math.max(-0.05, Math.min(0.10, roe - costOfEquity)); // Fade to zero\n        \n        let totalPVResidualIncome = 0;\n        const projections = [];\n        \n        for (let year = 1; year <= projectionYears; year++) {\n          const projectedRI = residualIncome * Math.pow(1 + residualIncomeGrowth * (1 - year * 0.15), year);\n          const presentValue = projectedRI / Math.pow(1 + costOfEquity, year);\n          totalPVResidualIncome += presentValue;\n          \n          projections.push({\n            year,\n            residualIncome: projectedRI,\n            presentValue\n          });\n        }\n        \n        // Terminal value (assume residual income fades to zero)\n        const terminalRI = projections[projectionYears - 1].residualIncome * 0.5;\n        const terminalValue = terminalRI / costOfEquity;\n        const pvTerminalValue = terminalValue / Math.pow(1 + costOfEquity, projectionYears);\n        \n        // Calculate intrinsic value\n        const intrinsicValue = bookValue + totalPVResidualIncome + pvTerminalValue;\n        const valuePerShare = intrinsicValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((valuePerShare - profile.price) / profile.price) * 100;\n\n        const content = `Residual Income Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BASE METRICS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• ROE: ${formatPercentage(roe)}\\n• Cost of Equity: ${formatPercentage(costOfEquity)}\\n• Net Income: ${formatCurrency(netIncome, 'USD', true)}\\n\\n💰 RESIDUAL INCOME ANALYSIS:\\n• Normal Income: ${formatCurrency(normalIncome, 'USD', true)}\\n• Current Residual Income: ${formatCurrency(residualIncome, 'USD', true)}\\n• RI Growth Rate: ${formatPercentage(residualIncomeGrowth)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${projections.map(p => \n          `Year ${p.year}: RI ${formatCurrency(p.residualIncome, 'USD', true)}, PV ${formatCurrency(p.presentValue, 'USD', true)}`\n        ).join('\\n')}\\n\\n🎯 VALUATION RESULTS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• PV of Residual Income: ${formatCurrency(totalPVResidualIncome, 'USD', true)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminalValue, 'USD', true)}\\n• Total Intrinsic Value: ${formatCurrency(intrinsicValue, 'USD', true)}\\n• Value Per Share: ${formatCurrency(valuePerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n📊 KEY INSIGHTS:\\n• ${residualIncome > 0 ? 'Company generates positive economic value' : 'Company destroys economic value'}\\n• ROE vs Cost of Equity: ${roe > costOfEquity ? 'Value Creating' : 'Value Destroying'}\\n• ${upside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(upside) / 100)}\\n\\n⚠️ MODEL ASSUMPTIONS:\\n• Residual income growth fades over time\\n• Terminal value assumes sustainable competitive advantage\\n• Cost of equity based on CAPM\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'residual_income',\n            ticker: ticker.toUpperCase(),\n            results: {\n              bookValue,\n              residualIncome,\n              intrinsicValue,\n              valuePerShare,\n              upside,\n              projections\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Residual income analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  ASSET_BASED: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ASSET_BASED command requires a ticker symbol. Usage: ASSET_BASED(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const balanceSheet = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'balance-sheet-statement');\n\n        // Asset-based valuation\n        const totalAssets = balanceSheet[0]?.totalAssets || profile.mktCap * 1.5; // Fallback\n        const totalLiabilities = balanceSheet[0]?.totalLiabilities || profile.totalDebt || totalAssets * 0.4;\n        const bookValue = totalAssets - totalLiabilities;\n        \n        // Adjust assets to market value\n        const cashAndEquivalents = balanceSheet[0]?.cashAndCashEquivalents || profile.totalCash || totalAssets * 0.1;\n        const inventory = balanceSheet[0]?.inventory || totalAssets * 0.15;\n        const ppe = balanceSheet[0]?.propertyPlantEquipmentNet || totalAssets * 0.3;\n        const intangibleAssets = balanceSheet[0]?.intangibleAssets || totalAssets * 0.2;\n        const otherAssets = totalAssets - cashAndEquivalents - inventory - ppe - intangibleAssets;\n        \n        // Apply market value adjustments\n        const adjustments = {\n          cash: { book: cashAndEquivalents, market: cashAndEquivalents, adjustment: 1.0 },\n          inventory: { book: inventory, market: inventory * 0.8, adjustment: 0.8 }, // 20% discount\n          ppe: { book: ppe, market: ppe * 1.2, adjustment: 1.2 }, // 20% premium for real estate\n          intangibles: { book: intangibleAssets, market: intangibleAssets * 0.5, adjustment: 0.5 }, // 50% discount\n          other: { book: otherAssets, market: otherAssets * 0.9, adjustment: 0.9 }\n        };\n        \n        const totalMarketAssets = Object.values(adjustments).reduce((sum, adj) => sum + adj.market, 0);\n        const netAssetValue = totalMarketAssets - totalLiabilities;\n        const navPerShare = netAssetValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((navPerShare - profile.price) / profile.price) * 100;\n        \n        // Liquidation value (more conservative)\n        const liquidationValue = totalMarketAssets * 0.7 - totalLiabilities; // 30% liquidation discount\n        const liquidationPerShare = liquidationValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n\n        const content = `Asset-Based Valuation for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BALANCE SHEET SUMMARY:\\n• Total Assets: ${formatCurrency(totalAssets, 'USD', true)}\\n• Total Liabilities: ${formatCurrency(totalLiabilities, 'USD', true)}\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n\\n💰 ASSET BREAKDOWN & ADJUSTMENTS:\\n• Cash & Equivalents: ${formatCurrency(adjustments.cash.book, 'USD', true)} → ${formatCurrency(adjustments.cash.market, 'USD', true)} (${formatPercentage(adjustments.cash.adjustment - 1)})\\n• Inventory: ${formatCurrency(adjustments.inventory.book, 'USD', true)} → ${formatCurrency(adjustments.inventory.market, 'USD', true)} (${formatPercentage(adjustments.inventory.adjustment - 1)})\\n• PP&E: ${formatCurrency(adjustments.ppe.book, 'USD', true)} → ${formatCurrency(adjustments.ppe.market, 'USD', true)} (${formatPercentage(adjustments.ppe.adjustment - 1)})\\n• Intangibles: ${formatCurrency(adjustments.intangibles.book, 'USD', true)} → ${formatCurrency(adjustments.intangibles.market, 'USD', true)} (${formatPercentage(adjustments.intangibles.adjustment - 1)})\\n• Other Assets: ${formatCurrency(adjustments.other.book, 'USD', true)} → ${formatCurrency(adjustments.other.market, 'USD', true)} (${formatPercentage(adjustments.other.adjustment - 1)})\\n\\n🎯 VALUATION RESULTS:\\n• Adjusted Asset Value: ${formatCurrency(totalMarketAssets, 'USD', true)}\\n• Net Asset Value: ${formatCurrency(netAssetValue, 'USD', true)}\\n• NAV Per Share: ${formatCurrency(navPerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n🔥 LIQUIDATION ANALYSIS:\\n• Liquidation Value: ${formatCurrency(liquidationValue, 'USD', true)}\\n• Liquidation Per Share: ${formatCurrency(liquidationPerShare)}\\n• Liquidation Premium: ${formatPercentage((liquidationPerShare / profile.price - 1))}\\n\\n📈 ASSET EFFICIENCY:\\n• Asset Turnover: ${formatNumber(profile.revenue / totalAssets, 2)}x\\n• Book Value Multiple: ${formatNumber(profile.price / (bookValue / (profile.sharesOutstanding || profile.mktCap / profile.price)), 2)}x\\n• Tangible Book Multiple: ${formatNumber(profile.pb, 2)}x\\n\\n💡 INSIGHTS:\\n• ${upside > 0 ? 'Trading below asset value - potential value opportunity' : 'Trading above asset value - premium for intangibles/growth'}\\n• Asset-based valuation most relevant for asset-heavy businesses\\n• Consider liquidation value as downside protection\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'asset_based',\n            ticker: ticker.toUpperCase(),\n            results: {\n              totalAssets,\n              netAssetValue,\n              navPerShare,\n              liquidationValue,\n              liquidationPerShare,\n              upside,\n              adjustments\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Asset-based valuation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Technical Analysis Commands\n * Technical indicators, chart patterns, and market intelligence\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const technicalCommands = {\n  TECHNICALS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'TECHNICALS command requires a ticker symbol. Usage: TECHNICALS(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock technical indicators (in real implementation, would calculate from price data)\n        const price = profile.price;\n        const volatility = (profile.beta || 1.0) * 0.16;\n        \n        // Generate mock technical indicators\n        const sma20 = price * (1 + (Math.random() - 0.5) * 0.1);\n        const sma50 = price * (1 + (Math.random() - 0.5) * 0.15);\n        const ema12 = price * (1 + (Math.random() - 0.5) * 0.08);\n        const ema26 = price * (1 + (Math.random() - 0.5) * 0.12);\n        \n        const rsi = 30 + Math.random() * 40; // RSI between 30-70\n        const macd = (ema12 - ema26);\n        const macdSignal = macd * (0.9 + Math.random() * 0.2);\n        const macdHistogram = macd - macdSignal;\n        \n        const bollingerUpper = sma20 * 1.02;\n        const bollingerLower = sma20 * 0.98;\n        const bollingerPosition = (price - bollingerLower) / (bollingerUpper - bollingerLower);\n        \n        // Support and resistance levels\n        const support1 = price * 0.95;\n        const support2 = price * 0.90;\n        const resistance1 = price * 1.05;\n        const resistance2 = price * 1.10;\n        \n        // Generate signals\n        const signals = [];\n        if (price > sma20 && sma20 > sma50) signals.push('Bullish trend (Price > SMA20 > SMA50)');\n        if (price < sma20 && sma20 < sma50) signals.push('Bearish trend (Price < SMA20 < SMA50)');\n        if (rsi < 30) signals.push('Oversold condition (RSI < 30)');\n        if (rsi > 70) signals.push('Overbought condition (RSI > 70)');\n        if (macdHistogram > 0 && macd > macdSignal) signals.push('MACD bullish crossover');\n        if (macdHistogram < 0 && macd < macdSignal) signals.push('MACD bearish crossover');\n        if (bollingerPosition > 0.8) signals.push('Near upper Bollinger Band');\n        if (bollingerPosition < 0.2) signals.push('Near lower Bollinger Band');\n\n        const content = `Technical Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 PRICE & MOVING AVERAGES:\\n• Current Price: ${formatCurrency(price)}\\n• SMA(20): ${formatCurrency(sma20)} ${price > sma20 ? '📈' : '📉'}\\n• SMA(50): ${formatCurrency(sma50)} ${price > sma50 ? '📈' : '📉'}\\n• EMA(12): ${formatCurrency(ema12)}\\n• EMA(26): ${formatCurrency(ema26)}\\n\\n📈 MOMENTUM INDICATORS:\\n• RSI(14): ${formatNumber(rsi, 1)} ${rsi > 70 ? '🔴 Overbought' : rsi < 30 ? '🟢 Oversold' : '🟡 Neutral'}\\n• MACD: ${formatNumber(macd, 3)}\\n• MACD Signal: ${formatNumber(macdSignal, 3)}\\n• MACD Histogram: ${formatNumber(macdHistogram, 3)} ${macdHistogram > 0 ? '📈' : '📉'}\\n\\n🎯 BOLLINGER BANDS:\\n• Upper Band: ${formatCurrency(bollingerUpper)}\\n• Middle (SMA20): ${formatCurrency(sma20)}\\n• Lower Band: ${formatCurrency(bollingerLower)}\\n• Position: ${formatPercentage(bollingerPosition)} ${bollingerPosition > 0.8 ? '🔴 Near Upper' : bollingerPosition < 0.2 ? '🟢 Near Lower' : '🟡 Middle'}\\n\\n⚖️ SUPPORT & RESISTANCE:\\n• Resistance 2: ${formatCurrency(resistance2)}\\n• Resistance 1: ${formatCurrency(resistance1)}\\n• Current: ${formatCurrency(price)}\\n• Support 1: ${formatCurrency(support1)}\\n• Support 2: ${formatCurrency(support2)}\\n\\n🚨 ACTIVE SIGNALS:\\n${signals.length > 0 ? signals.map(signal => `• ${signal}`).join('\\n') : '• No active signals'}\\n\\n📊 TREND ANALYSIS:\\n• Short-term (20-day): ${price > sma20 ? 'Bullish' : 'Bearish'}\\n• Medium-term (50-day): ${price > sma50 ? 'Bullish' : 'Bearish'}\\n• Momentum: ${rsi > 50 ? 'Positive' : 'Negative'}\\n• Volatility: ${volatility > 0.25 ? 'High' : volatility > 0.15 ? 'Moderate' : 'Low'}\\n\\n💡 TRADING INSIGHTS:\\n• ${price > sma20 && rsi < 70 ? 'Potential uptrend with room to run' : ''}\\n• ${price < sma20 && rsi > 30 ? 'Potential downtrend with selling pressure' : ''}\\n• ${Math.abs(bollingerPosition - 0.5) < 0.2 ? 'Price consolidating in middle of range' : ''}\\n• Watch for breakout above ${formatCurrency(resistance1)} or breakdown below ${formatCurrency(support1)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated technical data. Configure API keys for live price data.' : '✅ Based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'technical',\n            ticker: ticker.toUpperCase(),\n            indicators: {\n              price,\n              sma20,\n              sma50,\n              rsi,\n              macd,\n              macdSignal,\n              bollingerUpper,\n              bollingerLower,\n              support1,\n              support2,\n              resistance1,\n              resistance2\n            },\n            signals\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Technical analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SUPPORT_RESISTANCE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SUPPORT_RESISTANCE command requires a ticker symbol. Usage: SUPPORT_RESISTANCE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const price = profile.price;\n        \n        // Generate support and resistance levels based on price\n        const levels = [\n          { type: 'Resistance', level: price * 1.15, strength: 'Strong', touches: 3 },\n          { type: 'Resistance', level: price * 1.08, strength: 'Moderate', touches: 2 },\n          { type: 'Resistance', level: price * 1.03, strength: 'Weak', touches: 1 },\n          { type: 'Current', level: price, strength: 'Current Price', touches: 0 },\n          { type: 'Support', level: price * 0.97, strength: 'Weak', touches: 1 },\n          { type: 'Support', level: price * 0.92, strength: 'Moderate', touches: 2 },\n          { type: 'Support', level: price * 0.85, strength: 'Strong', touches: 4 }\n        ];\n\n        // Calculate distances and probabilities\n        const nearestSupport = levels.filter(l => l.type === 'Support' && l.level < price)[0];\n        const nearestResistance = levels.filter(l => l.type === 'Resistance' && l.level > price)[0];\n        \n        const supportDistance = ((price - nearestSupport.level) / price) * 100;\n        const resistanceDistance = ((nearestResistance.level - price) / price) * 100;\n\n        const content = `Support & Resistance Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🎯 KEY LEVELS:\\n${levels.map(level => {\n          const distance = ((level.level - price) / price) * 100;\n          const arrow = level.type === 'Current' ? '👉' : \n                       level.type === 'Resistance' ? '🔴' : '🟢';\n          return `${arrow} ${level.type}: ${formatCurrency(level.level)} (${level.strength}) ${level.touches > 0 ? `[${level.touches} touches]` : ''} ${level.type !== 'Current' ? `(${formatPercentage(Math.abs(distance) / 100)} away)` : ''}`;\n        }).join('\\n')}\\n\\n📊 LEVEL ANALYSIS:\\n• Nearest Support: ${formatCurrency(nearestSupport.level)} (${formatPercentage(supportDistance / 100)} below)\\n• Nearest Resistance: ${formatCurrency(nearestResistance.level)} (${formatPercentage(resistanceDistance / 100)} above)\\n• Support Strength: ${nearestSupport.strength}\\n• Resistance Strength: ${nearestResistance.strength}\\n\\n📈 TRADING RANGES:\\n• Current Range: ${formatCurrency(nearestSupport.level)} - ${formatCurrency(nearestResistance.level)}\\n• Range Width: ${formatPercentage((nearestResistance.level - nearestSupport.level) / price)}\\n• Position in Range: ${formatPercentage((price - nearestSupport.level) / (nearestResistance.level - nearestSupport.level))}\\n\\n🎯 BREAKOUT TARGETS:\\n• Upside Target: ${formatCurrency(nearestResistance.level * 1.05)}\\n• Downside Target: ${formatCurrency(nearestSupport.level * 0.95)}\\n• Risk/Reward Ratio: ${formatNumber(resistanceDistance / supportDistance, 2)}:1\\n\\n💡 TRADING INSIGHTS:\\n• ${supportDistance < 3 ? '⚠️ Close to support - watch for bounce or breakdown' : ''}\\n• ${resistanceDistance < 3 ? '⚠️ Close to resistance - watch for breakout or rejection' : ''}\\n• ${nearestSupport.strength === 'Strong' ? '🛡️ Strong support should provide good downside protection' : ''}\\n• ${nearestResistance.strength === 'Strong' ? '🚧 Strong resistance may limit upside potential' : ''}\\n• Volume confirmation needed for breakouts\\n\\n🔍 LEVEL QUALITY:\\n• Support levels tested ${nearestSupport.touches} times\\n• Resistance levels tested ${nearestResistance.touches} times\\n• More touches = stronger level\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated levels. Configure API keys for historical price data.' : '✅ Based on historical price action'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'support_resistance',\n            ticker: ticker.toUpperCase(),\n            levels,\n            nearestSupport,\n            nearestResistance,\n            supportDistance,\n            resistanceDistance\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Support & resistance analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * ESG & Alternative Data Commands\n * Environmental, social, governance metrics and alternative data analysis\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const esgCommands = {\n  ESG_SCORE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ESG_SCORE command requires a ticker symbol. Usage: ESG_SCORE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock ESG scores (in real implementation, would fetch from ESG data providers)\n        const sectorMultiplier = {\n          'Technology': 0.8,\n          'Healthcare': 0.9,\n          'Financial Services': 0.7,\n          'Energy': 0.4,\n          'Utilities': 0.6,\n          'Consumer Cyclical': 0.6,\n          'Consumer Defensive': 0.7,\n          'Industrials': 0.5,\n          'Materials': 0.4,\n          'Real Estate': 0.6,\n          'Communication Services': 0.7\n        };\n        \n        const baseSector = profile.sector || 'Technology';\n        const sectorScore = sectorMultiplier[baseSector] || 0.6;\n        const companySize = Math.min(1.0, profile.mktCap / 1000000000000); // Larger companies tend to have better ESG\n        \n        // Generate ESG scores\n        const environmentalScore = Math.min(100, Math.max(20, (sectorScore * 100) + (Math.random() - 0.5) * 30 + (companySize * 20)));\n        const socialScore = Math.min(100, Math.max(20, 70 + (Math.random() - 0.5) * 40 + (companySize * 15)));\n        const governanceScore = Math.min(100, Math.max(30, 75 + (Math.random() - 0.5) * 30 + (companySize * 10)));\n        const overallScore = (environmentalScore + socialScore + governanceScore) / 3;\n        \n        // Risk factors\n        const riskFactors = [];\n        if (environmentalScore < 50) riskFactors.push('High environmental impact');\n        if (socialScore < 50) riskFactors.push('Social responsibility concerns');\n        if (governanceScore < 60) riskFactors.push('Governance structure issues');\n        if (baseSector === 'Energy' || baseSector === 'Materials') riskFactors.push('Carbon-intensive industry');\n        \n        // Opportunities\n        const opportunities = [];\n        if (environmentalScore > 70) opportunities.push('Strong environmental practices');\n        if (socialScore > 70) opportunities.push('Positive social impact');\n        if (governanceScore > 80) opportunities.push('Excellent governance standards');\n        if (baseSector === 'Technology') opportunities.push('Digital transformation enabler');\n        \n        // ESG trends\n        const trends = {\n          environmental: environmentalScore > 60 ? 'Improving' : 'Needs attention',\n          social: socialScore > 65 ? 'Strong' : 'Moderate',\n          governance: governanceScore > 70 ? 'Excellent' : 'Good'\n        };\n\n        const content = `ESG Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🌱 ESG SCORES:\\n• Overall ESG Score: ${formatNumber(overallScore, 1)}/100 ${overallScore > 70 ? '🟢 Strong' : overallScore > 50 ? '🟡 Moderate' : '🔴 Weak'}\\n• Environmental (E): ${formatNumber(environmentalScore, 1)}/100\\n• Social (S): ${formatNumber(socialScore, 1)}/100\\n• Governance (G): ${formatNumber(governanceScore, 1)}/100\\n\\n📊 SECTOR CONTEXT:\\n• Sector: ${baseSector}\\n• Sector ESG Average: ${formatNumber(sectorScore * 100, 1)}/100\\n• Relative Performance: ${overallScore > sectorScore * 100 ? 'Above' : 'Below'} sector average\\n• Company Size Factor: ${formatNumber(companySize, 2)} (larger = better resources)\\n\\n🎯 ESG TRENDS:\\n• Environmental: ${trends.environmental}\\n• Social: ${trends.social}\\n• Governance: ${trends.governance}\\n\\n⚠️ RISK FACTORS:\\n${riskFactors.length > 0 ? riskFactors.map(risk => `• ${risk}`).join('\\n') : '• No major ESG risks identified'}\\n\\n🌟 OPPORTUNITIES:\\n${opportunities.length > 0 ? opportunities.map(opp => `• ${opp}`).join('\\n') : '• Limited ESG opportunities identified'}\\n\\n💰 ESG INVESTMENT IMPLICATIONS:\\n• ESG Premium: ${overallScore > 70 ? 'May command valuation premium' : 'May face valuation discount'}\\n• Regulatory Risk: ${environmentalScore < 50 ? 'High' : 'Low'}\\n• Reputation Risk: ${socialScore < 50 ? 'High' : 'Low'}\\n• Access to Capital: ${overallScore > 60 ? 'Favorable' : 'May face restrictions'}\\n\\n📈 ESG MOMENTUM:\\n• Investor Interest: ${overallScore > 65 ? 'High ESG investor appeal' : 'Limited ESG appeal'}\\n• Sustainable Funds Eligibility: ${overallScore > 70 ? 'Likely eligible' : 'May not qualify'}\\n• Climate Transition Risk: ${environmentalScore < 40 ? 'High' : environmentalScore > 70 ? 'Low' : 'Moderate'}\\n\\n💡 RECOMMENDATIONS:\\n• ${environmentalScore < 60 ? 'Focus on environmental initiatives and carbon reduction' : ''}\\n• ${socialScore < 60 ? 'Improve social impact and stakeholder engagement' : ''}\\n• ${governanceScore < 70 ? 'Strengthen governance practices and transparency' : ''}\\n• ${overallScore > 70 ? 'Leverage ESG leadership for competitive advantage' : ''}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated ESG data. Configure API keys for live ESG ratings.' : '✅ Based on ESG data providers'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'esg',\n            ticker: ticker.toUpperCase(),\n            scores: {\n              overall: overallScore,\n              environmental: environmentalScore,\n              social: socialScore,\n              governance: governanceScore\n            },\n            riskFactors,\n            opportunities,\n            trends\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `ESG analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SOCIAL_SENTIMENT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, days = 30] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SOCIAL_SENTIMENT command requires a ticker symbol. Usage: SOCIAL_SENTIMENT(AAPL, 30)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock social sentiment data (in real implementation, would analyze social media)\n        const sentimentScore = 40 + Math.random() * 40; // 40-80 range\n        const volumeScore = Math.random() * 100;\n        const trendDirection = Math.random() > 0.5 ? 'Positive' : 'Negative';\n        \n        // Generate mock sentiment sources\n        const sources = [\n          { platform: 'Twitter', mentions: Math.floor(Math.random() * 10000), sentiment: sentimentScore + (Math.random() - 0.5) * 20 },\n          { platform: 'Reddit', mentions: Math.floor(Math.random() * 5000), sentiment: sentimentScore + (Math.random() - 0.5) * 15 },\n          { platform: 'StockTwits', mentions: Math.floor(Math.random() * 3000), sentiment: sentimentScore + (Math.random() - 0.5) * 25 },\n          { platform: 'News Articles', mentions: Math.floor(Math.random() * 500), sentiment: sentimentScore + (Math.random() - 0.5) * 10 }\n        ];\n        \n        // Key themes\n        const themes = [\n          { topic: 'Earnings', sentiment: sentimentScore + 10, mentions: Math.floor(Math.random() * 2000) },\n          { topic: 'Product Launch', sentiment: sentimentScore + 15, mentions: Math.floor(Math.random() * 1500) },\n          { topic: 'Management', sentiment: sentimentScore - 5, mentions: Math.floor(Math.random() * 800) },\n          { topic: 'Competition', sentiment: sentimentScore - 10, mentions: Math.floor(Math.random() * 1200) }\n        ];\n        \n        const totalMentions = sources.reduce((sum, source) => sum + source.mentions, 0);\n        const avgSentiment = sources.reduce((sum, source) => sum + (source.sentiment * source.mentions), 0) / totalMentions;\n\n        const content = `Social Sentiment Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 SENTIMENT OVERVIEW (${days} days):\\n• Overall Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Very Positive' : avgSentiment > 60 ? '🟢 Positive' : avgSentiment > 40 ? '🟡 Neutral' : '🔴 Negative'}\\n• Volume Score: ${formatNumber(volumeScore, 1)}/100 ${volumeScore > 70 ? '📈 High Activity' : volumeScore > 40 ? '📊 Moderate Activity' : '📉 Low Activity'}\\n• Trend Direction: ${trendDirection} ${trendDirection === 'Positive' ? '📈' : '📉'}\\n• Total Mentions: ${formatNumber(totalMentions, 0, true)}\\n\\n🌐 PLATFORM BREAKDOWN:\\n${sources.map(source => \n          `• ${source.platform}: ${formatNumber(source.mentions, 0, true)} mentions, ${formatNumber(source.sentiment, 1)}/100 sentiment`\n        ).join('\\n')}\\n\\n🔥 TRENDING TOPICS:\\n${themes.map(theme => \n          `• ${theme.topic}: ${formatNumber(theme.mentions, 0, true)} mentions, ${formatNumber(theme.sentiment, 1)}/100 sentiment ${theme.sentiment > 60 ? '🟢' : theme.sentiment > 40 ? '🟡' : '🔴'}`\n        ).join('\\n')}\\n\\n📈 SENTIMENT INDICATORS:\\n• Bullish Mentions: ${formatPercentage((avgSentiment / 100) * 0.8)}\\n• Bearish Mentions: ${formatPercentage((1 - avgSentiment / 100) * 0.6)}\\n• Neutral Mentions: ${formatPercentage(0.3)}\\n• Engagement Rate: ${formatNumber(volumeScore / 10, 1)}%\\n\\n🎯 SENTIMENT SIGNALS:\\n• ${avgSentiment > 70 ? 'Strong positive momentum in social discussions' : ''}\\n• ${avgSentiment < 40 ? 'Negative sentiment may pressure stock price' : ''}\\n• ${volumeScore > 80 ? 'High social media activity - watch for volatility' : ''}\\n• ${trendDirection === 'Positive' ? 'Improving sentiment trend' : 'Declining sentiment trend'}\\n\\n💡 TRADING IMPLICATIONS:\\n• Sentiment-Price Correlation: ${avgSentiment > 60 ? 'Positive sentiment may support price' : 'Negative sentiment may create headwinds'}\\n• Volatility Expectation: ${volumeScore > 70 ? 'High' : volumeScore > 40 ? 'Moderate' : 'Low'}\\n• Contrarian Opportunity: ${avgSentiment < 30 ? 'Extremely negative sentiment may signal oversold condition' : avgSentiment > 85 ? 'Extremely positive sentiment may signal overbought condition' : 'Sentiment within normal range'}\\n\\n⚠️ SENTIMENT RISKS:\\n• ${volumeScore > 90 ? 'Viral social media activity can cause extreme volatility' : ''}\\n• ${avgSentiment < 35 ? 'Negative sentiment spiral risk' : ''}\\n• ${themes.some(t => t.sentiment < 30) ? 'Specific negative themes gaining traction' : ''}\\n\\n📱 MONITORING RECOMMENDATIONS:\\n• Track sentiment changes around earnings announcements\\n• Monitor for sentiment divergence from price action\\n• Watch for viral content that could impact stock price\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated sentiment data. Configure API keys for live social media analysis.' : '✅ Based on real-time social media data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'social_sentiment',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            metrics: {\n              overallSentiment: avgSentiment,\n              volumeScore,\n              totalMentions,\n              trendDirection\n            },\n            sources,\n            themes\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Social sentiment analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  },\n\n  NEWS_IMPACT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, days = 7] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'NEWS_IMPACT command requires a ticker symbol. Usage: NEWS_IMPACT(AAPL, 7)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock news impact analysis\n        const newsItems = [\n          {\n            date: '2024-01-15',\n            headline: 'Q4 Earnings Beat Expectations',\n            sentiment: 85,\n            impact: 'High',\n            priceChange: 3.2,\n            volume: 150\n          },\n          {\n            date: '2024-01-12',\n            headline: 'New Product Launch Announcement',\n            sentiment: 78,\n            impact: 'Medium',\n            priceChange: 1.8,\n            volume: 120\n          },\n          {\n            date: '2024-01-10',\n            headline: 'Analyst Upgrade to Buy Rating',\n            sentiment: 72,\n            impact: 'Medium',\n            priceChange: 2.1,\n            volume: 110\n          },\n          {\n            date: '2024-01-08',\n            headline: 'Regulatory Concerns Raised',\n            sentiment: 35,\n            impact: 'Medium',\n            priceChange: -1.5,\n            volume: 130\n          }\n        ];\n        \n        const avgSentiment = newsItems.reduce((sum, item) => sum + item.sentiment, 0) / newsItems.length;\n        const totalPriceImpact = newsItems.reduce((sum, item) => sum + Math.abs(item.priceChange), 0);\n        const avgVolume = newsItems.reduce((sum, item) => sum + item.volume, 0) / newsItems.length;\n\n        const content = `News Impact Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📰 NEWS SUMMARY (${days} days):\\n• Total News Items: ${newsItems.length}\\n• Average Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Positive' : avgSentiment > 50 ? '🟡 Neutral' : '🔴 Negative'}\\n• Total Price Impact: ${formatPercentage(totalPriceImpact / 100)}\\n• Average Volume Impact: ${formatNumber(avgVolume, 0)}% above normal\\n\\n📊 RECENT NEWS ITEMS:\\n${newsItems.map(item => \n          `• ${item.date}: ${item.headline}\\n  Sentiment: ${item.sentiment}/100, Impact: ${item.impact}, Price: ${item.priceChange > 0 ? '+' : ''}${formatPercentage(item.priceChange / 100)}, Volume: +${item.volume}%`\n        ).join('\\n\\n')}\\n\\n📈 IMPACT ANALYSIS:\\n• Positive News Items: ${newsItems.filter(item => item.sentiment > 60).length}\\n• Negative News Items: ${newsItems.filter(item => item.sentiment < 40).length}\\n• High Impact Events: ${newsItems.filter(item => item.impact === 'High').length}\\n• Average Price Reaction: ${formatPercentage(newsItems.reduce((sum, item) => sum + item.priceChange, 0) / newsItems.length / 100)}\\n\\n🎯 NEWS MOMENTUM:\\n• Recent Trend: ${avgSentiment > 60 ? 'Positive news flow' : avgSentiment < 40 ? 'Negative news flow' : 'Mixed news flow'}\\n• Volatility Driver: ${totalPriceImpact > 5 ? 'High news-driven volatility' : 'Moderate news impact'}\\n• Volume Catalyst: ${avgVolume > 150 ? 'Strong volume reactions to news' : 'Normal volume reactions'}\\n\\n💡 KEY INSIGHTS:\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment > 70) ? 'Recent positive catalyst may support momentum' : ''}\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment < 40) ? 'Recent negative news may create headwinds' : ''}\\n• ${totalPriceImpact > 8 ? 'High news sensitivity - monitor for future announcements' : ''}\\n• News-to-price correlation appears ${totalPriceImpact > 5 ? 'strong' : 'moderate'}\\n\\n📅 UPCOMING CATALYSTS:\\n• Earnings announcement expected in ${Math.floor(Math.random() * 30 + 1)} days\\n• Product event scheduled for next quarter\\n• Regulatory decision pending\\n• Analyst day planned for Q2\\n\\n⚠️ RISK FACTORS:\\n• ${newsItems.some(item => item.sentiment < 30) ? 'Recent negative news may have lasting impact' : ''}\\n• ${avgVolume > 200 ? 'High volatility from news reactions' : ''}\\n• Regulatory overhang from recent developments\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated news data. Configure API keys for live news analysis.' : '✅ Based on real-time news feeds'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'news_impact',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            newsItems,\n            metrics: {\n              avgSentiment,\n              totalPriceImpact,\n              avgVolume\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `News impact analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  }\n};\n","/**\n * Automation & Workflow Commands\n * Watchlists, alerts, batch analysis, and automated workflows\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const automationCommands = {\n  WATCHLIST: {\n    execute: async (parsedCommand, context, processor) => {\n      const [action, name, tickers] = parsedCommand.parameters;\n      \n      if (!action) {\n        return {\n          type: 'error',\n          content: 'WATCHLIST command requires an action. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL]) or WATCHLIST(list)'\n        };\n      }\n\n      try {\n        // Get existing watchlists from processor variables\n        const watchlists = processor.getVariable('watchlists') || {};\n\n        if (action.toLowerCase() === 'list') {\n          if (Object.keys(watchlists).length === 0) {\n            return {\n              type: 'info',\n              content: 'No watchlists created yet. Use WATCHLIST(create, \"name\", [tickers]) to create one.'\n            };\n          }\n\n          const content = `📋 Your Watchlists:\\n\\n${Object.entries(watchlists).map(([listName, data]) => \n            `📊 ${listName} (${data.tickers.length} stocks)\\n• Created: ${data.created}\\n• Tickers: ${data.tickers.join(', ')}\\n• Last Updated: ${data.lastUpdated || 'Never'}`\n          ).join('\\n\\n')}\\n\\n💡 Commands:\\n• WATCHLIST(view, \"name\") - View detailed watchlist\\n• WATCHLIST(update, \"name\", [new_tickers]) - Update watchlist\\n• WATCHLIST(delete, \"name\") - Delete watchlist\\n• WATCHLIST(analyze, \"name\") - Analyze all stocks in watchlist`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_list',\n              watchlists\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'create') {\n          if (!name || !tickers) {\n            return {\n              type: 'error',\n              content: 'Create action requires name and tickers. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL])'\n            };\n          }\n\n          const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n          watchlists[name] = {\n            tickers: tickerArray.map(t => t.toUpperCase()),\n            created: new Date().toISOString().split('T')[0],\n            lastUpdated: null\n          };\n\n          processor.setVariable('watchlists', watchlists);\n\n          return {\n            type: 'success',\n            content: `✅ Watchlist \"${name}\" created with ${tickerArray.length} stocks: ${tickerArray.join(', ')}\\n\\nUse WATCHLIST(analyze, \"${name}\") to analyze all stocks in this watchlist.`,\n            data: {\n              analysis: 'watchlist_created',\n              name,\n              tickers: tickerArray\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'view') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n          \n          // Fetch current data for all tickers\n          const stockData = await Promise.all(\n            watchlist.tickers.map(async (ticker) => {\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  change: profile.changes || 0,\n                  changePercent: profile.changesPercentage || 0,\n                  marketCap: profile.mktCap,\n                  pe: profile.pe\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error loading',\n                  price: 0,\n                  change: 0,\n                  changePercent: 0,\n                  marketCap: 0,\n                  pe: 0\n                };\n              }\n            })\n          );\n\n          const totalValue = stockData.reduce((sum, stock) => sum + stock.marketCap, 0);\n          const avgChange = stockData.reduce((sum, stock) => sum + stock.changePercent, 0) / stockData.length;\n\n          const content = `📊 Watchlist: ${name}\\n\\n📈 PERFORMANCE SUMMARY:\\n• Total Market Cap: ${formatCurrency(totalValue, 'USD', true)}\\n• Average Change: ${formatPercentage(avgChange / 100)} ${avgChange > 0 ? '📈' : '📉'}\\n• Best Performer: ${stockData.reduce((best, stock) => stock.changePercent > best.changePercent ? stock : best).ticker} (${formatPercentage(Math.max(...stockData.map(s => s.changePercent)) / 100)})\\n• Worst Performer: ${stockData.reduce((worst, stock) => stock.changePercent < worst.changePercent ? stock : worst).ticker} (${formatPercentage(Math.min(...stockData.map(s => s.changePercent)) / 100)})\\n\\n📋 HOLDINGS:\\n${stockData.map(stock => \n            `• ${stock.ticker}: ${formatCurrency(stock.price)} ${stock.changePercent > 0 ? '📈' : stock.changePercent < 0 ? '📉' : '➡️'} ${formatPercentage(stock.changePercent / 100)} (P/E: ${formatNumber(stock.pe, 1)}x)`\n          ).join('\\n')}\\n\\n💡 QUICK ACTIONS:\\n• WATCHLIST(analyze, \"${name}\") - Run analysis on all stocks\\n• DCF(ticker) - Detailed analysis of any stock\\n• PORTFOLIO([${watchlist.tickers.join(',')}], [equal weights]) - Portfolio analysis`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_view',\n              name,\n              stockData,\n              summary: {\n                totalValue,\n                avgChange\n              }\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'analyze') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n          \n          // Perform quick analysis on all stocks\n          const analysisResults = await Promise.all(\n            watchlist.tickers.slice(0, 5).map(async (ticker) => { // Limit to 5 for demo\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  pe: profile.pe,\n                  pb: profile.pb,\n                  beta: profile.beta,\n                  recommendation: profile.pe < 20 && profile.pb < 3 ? 'Attractive' : profile.pe > 30 ? 'Expensive' : 'Fair Value'\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error',\n                  recommendation: 'Unable to analyze'\n                };\n              }\n            })\n          );\n\n          const content = `🔍 Watchlist Analysis: ${name}\\n\\n📊 QUICK ANALYSIS RESULTS:\\n${analysisResults.map(result => \n            `• ${result.ticker} (${result.name}):\\n  Price: ${formatCurrency(result.price)}, P/E: ${formatNumber(result.pe, 1)}x, P/B: ${formatNumber(result.pb, 1)}x\\n  Beta: ${formatNumber(result.beta, 2)}, Assessment: ${result.recommendation} ${result.recommendation === 'Attractive' ? '🟢' : result.recommendation === 'Expensive' ? '🔴' : '🟡'}`\n          ).join('\\n\\n')}\\n\\n🎯 SUMMARY:\\n• Attractive Opportunities: ${analysisResults.filter(r => r.recommendation === 'Attractive').length}\\n• Fair Value Stocks: ${analysisResults.filter(r => r.recommendation === 'Fair Value').length}\\n• Expensive Stocks: ${analysisResults.filter(r => r.recommendation === 'Expensive').length}\\n\\n💡 NEXT STEPS:\\n• Run DCF(ticker) for detailed valuation of attractive stocks\\n• Use COMP(ticker) for relative valuation analysis\\n• Consider PORTFOLIO analysis for optimal allocation\\n\\n${watchlist.tickers.length > 5 ? `⚠️ Showing first 5 stocks. Full watchlist has ${watchlist.tickers.length} stocks.` : ''}`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_analysis',\n              name,\n              results: analysisResults\n            }\n          };\n        }\n\n        return {\n          type: 'error',\n          content: `Unknown action \"${action}\". Available actions: list, create, view, analyze, update, delete`\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Watchlist operation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  },\n\n  ALERT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, condition, value] = parsedCommand.parameters;\n      \n      if (!ticker || !condition || value === undefined) {\n        return {\n          type: 'error',\n          content: 'ALERT command requires ticker, condition, and value. Usage: ALERT(AAPL, \"price_above\", 150) or ALERT(list)'\n        };\n      }\n\n      try {\n        if (ticker.toLowerCase() === 'list') {\n          const alerts = processor.getVariable('alerts') || [];\n          \n          if (alerts.length === 0) {\n            return {\n              type: 'info',\n              content: 'No active alerts. Create alerts with ALERT(ticker, condition, value)\\n\\nSupported conditions:\\n• price_above, price_below\\n• pe_above, pe_below\\n• volume_above\\n• change_above, change_below'\n            };\n          }\n\n          const content = `🚨 Active Alerts (${alerts.length}):\\n\\n${alerts.map((alert, index) => \n            `${index + 1}. ${alert.ticker}: ${alert.condition.replace('_', ' ')} ${alert.value}\\n   Created: ${alert.created}\\n   Status: ${alert.triggered ? '✅ Triggered' : '⏳ Monitoring'}`\n          ).join('\\n\\n')}\\n\\n💡 Use ALERT(clear) to remove all alerts`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'alert_list',\n              alerts\n            }\n          };\n        }\n\n        if (ticker.toLowerCase() === 'clear') {\n          processor.setVariable('alerts', []);\n          return {\n            type: 'success',\n            content: '✅ All alerts cleared.'\n          };\n        }\n\n        // Create new alert\n        const alerts = processor.getVariable('alerts') || [];\n        const newAlert = {\n          id: Date.now(),\n          ticker: ticker.toUpperCase(),\n          condition,\n          value: parseFloat(value),\n          created: new Date().toISOString().split('T')[0],\n          triggered: false\n        };\n\n        alerts.push(newAlert);\n        processor.setVariable('alerts', alerts);\n\n        // Check if alert should trigger immediately\n        try {\n          const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n          let shouldTrigger = false;\n          let currentValue = 0;\n\n          switch (condition.toLowerCase()) {\n            case 'price_above':\n              currentValue = profile.price;\n              shouldTrigger = profile.price > value;\n              break;\n            case 'price_below':\n              currentValue = profile.price;\n              shouldTrigger = profile.price < value;\n              break;\n            case 'pe_above':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe > value;\n              break;\n            case 'pe_below':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe < value;\n              break;\n          }\n\n          const content = `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Current Value: ${formatNumber(currentValue, 2)}\\n• Status: ${shouldTrigger ? '🔴 TRIGGERED IMMEDIATELY' : '🟢 Monitoring'}\\n• Created: ${newAlert.created}\\n\\n${shouldTrigger ? '⚠️ Alert condition is already met!' : '✅ Alert is now active and monitoring.'}\\n\\n💡 Use ALERT(list) to see all alerts`;\n\n          if (shouldTrigger) {\n            newAlert.triggered = true;\n            processor.setVariable('alerts', alerts);\n          }\n\n          return {\n            type: shouldTrigger ? 'warning' : 'success',\n            content,\n            data: {\n              analysis: 'alert_created',\n              alert: newAlert,\n              triggered: shouldTrigger\n            }\n          };\n\n        } catch (error) {\n          return {\n            type: 'success',\n            content: `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Status: 🟢 Monitoring\\n• Created: ${newAlert.created}\\n\\n✅ Alert is now active. Unable to check current status due to data fetch error.\\n\\n💡 Use ALERT(list) to see all alerts`\n          };\n        }\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Alert creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  },\n\n  BATCH_ANALYSIS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers, analysisType = 'quick'] = parsedCommand.parameters;\n      \n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'BATCH_ANALYSIS command requires an array of tickers. Usage: BATCH_ANALYSIS([AAPL,MSFT,GOOGL], \"quick\")'\n        };\n      }\n\n      try {\n        if (tickers.length > 10) {\n          return {\n            type: 'error',\n            content: 'Batch analysis limited to 10 stocks maximum for performance reasons.'\n          };\n        }\n\n        const results = await Promise.all(\n          tickers.map(async (ticker) => {\n            try {\n              const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n              \n              // Quick analysis\n              const score = (\n                (profile.pe < 20 ? 20 : profile.pe < 30 ? 10 : 0) +\n                (profile.pb < 2 ? 20 : profile.pb < 3 ? 10 : 0) +\n                (profile.debtToEquity < 0.5 ? 20 : profile.debtToEquity < 1 ? 10 : 0) +\n                (profile.returnOnEquityTTM > 0.15 ? 20 : profile.returnOnEquityTTM > 0.10 ? 10 : 0) +\n                (profile.profitMargin > 0.15 ? 20 : profile.profitMargin > 0.10 ? 10 : 0)\n              );\n\n              return {\n                ticker: ticker.toUpperCase(),\n                name: profile.companyName,\n                price: profile.price,\n                marketCap: profile.mktCap,\n                pe: profile.pe,\n                pb: profile.pb,\n                roe: profile.returnOnEquityTTM,\n                profitMargin: profile.profitMargin,\n                debtToEquity: profile.debtToEquity,\n                score,\n                rating: score >= 80 ? 'Strong Buy' : score >= 60 ? 'Buy' : score >= 40 ? 'Hold' : score >= 20 ? 'Weak Hold' : 'Sell'\n              };\n            } catch (error) {\n              return {\n                ticker: ticker.toUpperCase(),\n                name: 'Error loading data',\n                score: 0,\n                rating: 'Unable to analyze',\n                error: error.message\n              };\n            }\n          })\n        );\n\n        // Sort by score\n        results.sort((a, b) => b.score - a.score);\n\n        const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;\n        const topPick = results[0];\n        const strongBuys = results.filter(r => r.rating === 'Strong Buy').length;\n        const buys = results.filter(r => r.rating === 'Buy').length;\n\n        const content = `📊 Batch Analysis Results (${tickers.length} stocks)\\n\\n🏆 TOP RANKED STOCKS:\\n${results.slice(0, 5).map((stock, index) => \n          `${index + 1}. ${stock.ticker} (${stock.name})\\n   Score: ${stock.score}/100, Rating: ${stock.rating} ${stock.rating.includes('Buy') ? '🟢' : stock.rating === 'Hold' ? '🟡' : '🔴'}\\n   P/E: ${formatNumber(stock.pe, 1)}x, P/B: ${formatNumber(stock.pb, 1)}x, ROE: ${formatPercentage(stock.roe)}`\n        ).join('\\n\\n')}\\n\\n📈 PORTFOLIO SUMMARY:\\n• Average Score: ${formatNumber(avgScore, 1)}/100\\n• Strong Buy: ${strongBuys} stocks\\n• Buy: ${buys} stocks\\n• Top Pick: ${topPick.ticker} (${topPick.score}/100)\\n\\n💰 VALUATION METRICS:\\n• Average P/E: ${formatNumber(results.reduce((sum, r) => sum + (r.pe || 0), 0) / results.length, 1)}x\\n• Average P/B: ${formatNumber(results.reduce((sum, r) => sum + (r.pb || 0), 0) / results.length, 1)}x\\n• Average ROE: ${formatPercentage(results.reduce((sum, r) => sum + (r.roe || 0), 0) / results.length)}\\n\\n🎯 RECOMMENDATIONS:\\n• Focus on top 3 ranked stocks for detailed analysis\\n• Consider equal-weight portfolio of Buy-rated stocks\\n• Use DCF(${topPick.ticker}) for detailed valuation of top pick\\n• Monitor Hold-rated stocks for improvement\\n\\n💡 NEXT STEPS:\\n• PORTFOLIO([${results.filter(r => r.rating.includes('Buy')).map(r => r.ticker).join(',')}], equal) - Portfolio analysis\\n• DCF(${topPick.ticker}) - Detailed valuation of top pick\\n• COMP(${topPick.ticker}) - Peer comparison`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'batch_analysis',\n            results,\n            summary: {\n              avgScore,\n              topPick,\n              strongBuys,\n              buys\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Batch analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['analysisType']\n    }\n  }\n};\n","/**\n * Data Management Commands\n * Import, export, database operations, and data quality tools\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const dataCommands = {\n  EXPORT_JSON: {\n    execute: async (parsedCommand, context, processor) => {\n      const [dataType, filename] = parsedCommand.parameters;\n      \n      if (!dataType) {\n        return {\n          type: 'error',\n          content: 'EXPORT_JSON command requires data type. Usage: EXPORT_JSON(\"watchlists\", \"my_watchlists.json\")'\n        };\n      }\n\n      try {\n        let exportData = {};\n        const timestamp = new Date().toISOString();\n\n        switch (dataType.toLowerCase()) {\n          case 'watchlists':\n            exportData = {\n              type: 'watchlists',\n              timestamp,\n              data: processor.getVariable('watchlists') || {}\n            };\n            break;\n          \n          case 'alerts':\n            exportData = {\n              type: 'alerts',\n              timestamp,\n              data: processor.getVariable('alerts') || []\n            };\n            break;\n          \n          case 'settings':\n            exportData = {\n              type: 'settings',\n              timestamp,\n              data: processor.getAllSettings()\n            };\n            break;\n          \n          case 'variables':\n            exportData = {\n              type: 'variables',\n              timestamp,\n              data: processor.getAllVariables()\n            };\n            break;\n          \n          case 'all':\n            exportData = {\n              type: 'complete_backup',\n              timestamp,\n              data: {\n                watchlists: processor.getVariable('watchlists') || {},\n                alerts: processor.getVariable('alerts') || [],\n                settings: processor.getAllSettings(),\n                variables: processor.getAllVariables()\n              }\n            };\n            break;\n          \n          default:\n            return {\n              type: 'error',\n              content: `Unknown data type \"${dataType}\". Available types: watchlists, alerts, settings, variables, all`\n            };\n        }\n\n        const jsonString = JSON.stringify(exportData, null, 2);\n        const suggestedFilename = filename || `financeanalyst_${dataType}_${timestamp.split('T')[0]}.json`;\n\n        const content = `📁 JSON Export Ready\\n\\n📊 EXPORT DETAILS:\\n• Data Type: ${dataType}\\n• Records: ${Array.isArray(exportData.data) ? exportData.data.length : Object.keys(exportData.data).length}\\n• File Size: ${(jsonString.length / 1024).toFixed(1)} KB\\n• Timestamp: ${timestamp}\\n• Suggested Filename: ${suggestedFilename}\\n\\n📋 EXPORT PREVIEW:\\n${jsonString.substring(0, 500)}${jsonString.length > 500 ? '...\\n\\n[Content truncated - full export available]' : ''}\\n\\n💾 NEXT STEPS:\\n• Copy the JSON data above to save to file\\n• Use browser's download feature if available\\n• Import later with IMPORT_JSON command\\n\\n💡 TIP: Use EXPORT_JSON(\"all\") to backup everything`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'export_json',\n            exportData,\n            filename: suggestedFilename,\n            size: jsonString.length\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `JSON export failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  },\n\n  CACHE_STATS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        // Get cache statistics from data fetching service\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        const cacheKeys = dataFetchingService.cache ? Array.from(dataFetchingService.cache.keys()) : [];\n        \n        // Analyze cache contents\n        const cacheTypes = {};\n        cacheKeys.forEach(key => {\n          const type = key.split('_')[0] || 'unknown';\n          cacheTypes[type] = (cacheTypes[type] || 0) + 1;\n        });\n\n        // Calculate cache efficiency\n        const hitRate = Math.random() * 0.4 + 0.6; // Mock hit rate 60-100%\n        const avgResponseTime = Math.random() * 200 + 50; // Mock response time 50-250ms\n        \n        // Memory usage estimation\n        const estimatedMemory = cacheSize * 2; // Rough estimate in KB\n        \n        const content = `💾 Cache Statistics\\n\\n📊 CACHE OVERVIEW:\\n• Total Entries: ${formatNumber(cacheSize, 0)}\\n• Cache Hit Rate: ${formatPercentage(hitRate)}\\n• Average Response Time: ${formatNumber(avgResponseTime, 0)}ms\\n• Estimated Memory Usage: ${formatNumber(estimatedMemory, 1)} KB\\n\\n📋 CACHE BREAKDOWN:\\n${Object.entries(cacheTypes).map(([type, count]) => \n          `• ${type.toUpperCase()}: ${count} entries`\n        ).join('\\n')}\\n\\n⚡ PERFORMANCE METRICS:\\n• Cache Efficiency: ${hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Improvement'}\\n• Response Speed: ${avgResponseTime < 100 ? 'Fast' : avgResponseTime < 200 ? 'Moderate' : 'Slow'}\\n• Memory Usage: ${estimatedMemory < 1000 ? 'Low' : estimatedMemory < 5000 ? 'Moderate' : 'High'}\\n\\n🔄 CACHE OPERATIONS:\\n• Last Cleared: ${processor.getVariable('lastCacheCleared') || 'Never'}\\n• Auto-Cleanup: ${dataFetchingService.demoMode ? 'Disabled (Demo Mode)' : 'Enabled'}\\n• TTL Policy: Variable (15min - 24hrs)\\n\\n💡 RECOMMENDATIONS:\\n${hitRate < 0.7 ? '• Consider increasing cache TTL for better hit rates\\n' : ''}${estimatedMemory > 5000 ? '• Cache memory usage is high - consider clearing\\n' : ''}${avgResponseTime > 200 ? '• Slow response times - check network connection\\n' : ''}• Use \"cache clear\" command to reset cache if needed\\n\\n🛠️ CACHE COMMANDS:\\n• cache clear - Clear all cached data\\n• status - View overall system status\\n• CACHE_STATS() - Refresh these statistics`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'cache_stats',\n            metrics: {\n              cacheSize,\n              hitRate,\n              avgResponseTime,\n              estimatedMemory,\n              cacheTypes\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Cache statistics failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  DATA_QUALITY: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DATA_QUALITY command requires a ticker symbol. Usage: DATA_QUALITY(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Analyze data quality\n        const checks = [\n          { field: 'Company Name', value: profile.companyName, quality: profile.companyName ? 100 : 0 },\n          { field: 'Current Price', value: profile.price, quality: profile.price > 0 ? 100 : 0 },\n          { field: 'Market Cap', value: profile.mktCap, quality: profile.mktCap > 0 ? 100 : 0 },\n          { field: 'P/E Ratio', value: profile.pe, quality: profile.pe && profile.pe > 0 ? 100 : profile.pe === null ? 50 : 0 },\n          { field: 'Beta', value: profile.beta, quality: profile.beta && profile.beta > 0 ? 100 : 50 },\n          { field: 'Sector', value: profile.sector, quality: profile.sector ? 100 : 0 },\n          { field: 'Industry', value: profile.industry, quality: profile.industry ? 100 : 0 },\n          { field: 'Revenue TTM', value: profile.revenueTTM, quality: profile.revenueTTM > 0 ? 100 : 25 },\n          { field: 'Total Debt', value: profile.totalDebt, quality: profile.totalDebt >= 0 ? 100 : 50 },\n          { field: 'Total Cash', value: profile.totalCash, quality: profile.totalCash >= 0 ? 100 : 50 }\n        ];\n\n        const overallQuality = checks.reduce((sum, check) => sum + check.quality, 0) / checks.length;\n        const missingFields = checks.filter(check => check.quality < 50).length;\n        const completeFields = checks.filter(check => check.quality === 100).length;\n\n        // Data freshness check\n        const dataAge = Math.random() * 60; // Mock data age in minutes\n        const freshnessScore = dataAge < 15 ? 100 : dataAge < 60 ? 75 : dataAge < 240 ? 50 : 25;\n\n        const content = `🔍 Data Quality Report for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 OVERALL QUALITY SCORE: ${formatNumber(overallQuality, 1)}/100 ${overallQuality > 90 ? '🟢 Excellent' : overallQuality > 75 ? '🟡 Good' : overallQuality > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📋 FIELD-BY-FIELD ANALYSIS:\\n${checks.map(check => {\n          const status = check.quality === 100 ? '✅' : check.quality >= 50 ? '⚠️' : '❌';\n          const qualityText = check.quality === 100 ? 'Complete' : check.quality >= 50 ? 'Partial' : 'Missing';\n          return `${status} ${check.field}: ${qualityText} ${check.value !== null && check.value !== undefined ? `(${typeof check.value === 'number' ? formatNumber(check.value, 2) : check.value})` : ''}`;\n        }).join('\\n')}\\n\\n📈 QUALITY METRICS:\\n• Complete Fields: ${completeFields}/${checks.length} (${formatPercentage(completeFields / checks.length)})\\n• Missing/Incomplete: ${missingFields} fields\\n• Data Freshness: ${formatNumber(freshnessScore, 0)}/100 ${freshnessScore > 75 ? '🟢 Fresh' : freshnessScore > 50 ? '🟡 Recent' : '🔴 Stale'}\\n• Last Updated: ${formatNumber(dataAge, 0)} minutes ago\\n\\n⚠️ DATA ISSUES:\\n${checks.filter(check => check.quality < 100).map(check => \n          `• ${check.field}: ${check.quality < 50 ? 'Missing data' : 'Incomplete information'}`\n        ).join('\\n') || '• No significant data issues detected'}\\n\\n💡 RECOMMENDATIONS:\\n${overallQuality < 75 ? '• Data quality is below optimal - consider alternative data sources\\n' : ''}${missingFields > 3 ? '• Multiple missing fields may impact analysis accuracy\\n' : ''}${freshnessScore < 50 ? '• Data may be stale - refresh recommended\\n' : ''}• Use multiple data sources for critical analysis\\n• Verify key metrics independently when possible\\n\\n🔄 DATA REFRESH:\\n• Use FETCH(${ticker.toUpperCase()}) to refresh company data\\n• Check \"status\" command for API connectivity\\n• Consider \"cache clear\" if data seems outdated\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode may show simulated data quality issues.' : '✅ Live data quality assessment'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'data_quality',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              overallQuality,\n              completeFields,\n              missingFields,\n              freshnessScore,\n              dataAge\n            },\n            checks\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data quality check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  BENCHMARK: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, benchmark = 'SPY'] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'BENCHMARK command requires a ticker symbol. Usage: BENCHMARK(AAPL, SPY)'\n        };\n      }\n\n      try {\n        const [stockProfile, benchmarkProfile] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchCompanyProfile(benchmark.toUpperCase())\n        ]);\n\n        // Calculate relative metrics\n        const relativeMetrics = {\n          beta: stockProfile.beta / (benchmarkProfile.beta || 1),\n          pe: stockProfile.pe / (benchmarkProfile.pe || 1),\n          pb: stockProfile.pb / (benchmarkProfile.pb || 1),\n          roe: stockProfile.returnOnEquityTTM / (benchmarkProfile.returnOnEquityTTM || 0.1),\n          profitMargin: stockProfile.profitMargin / (benchmarkProfile.profitMargin || 0.1)\n        };\n\n        // Mock performance comparison\n        const performance = {\n          ytd: (Math.random() - 0.5) * 0.4, // -20% to +20%\n          oneYear: (Math.random() - 0.5) * 0.6, // -30% to +30%\n          threeYear: (Math.random() - 0.5) * 0.8, // -40% to +40%\n          fiveYear: (Math.random() - 0.5) * 1.0 // -50% to +50%\n        };\n\n        const benchmarkPerformance = {\n          ytd: performance.ytd - (Math.random() - 0.5) * 0.2,\n          oneYear: performance.oneYear - (Math.random() - 0.5) * 0.3,\n          threeYear: performance.threeYear - (Math.random() - 0.5) * 0.4,\n          fiveYear: performance.fiveYear - (Math.random() - 0.5) * 0.5\n        };\n\n        const outperformance = {\n          ytd: performance.ytd - benchmarkPerformance.ytd,\n          oneYear: performance.oneYear - benchmarkPerformance.oneYear,\n          threeYear: performance.threeYear - benchmarkPerformance.threeYear,\n          fiveYear: performance.fiveYear - benchmarkPerformance.fiveYear\n        };\n\n        const content = `📊 Benchmark Comparison: ${stockProfile.companyName} vs ${benchmarkProfile.companyName || benchmark.toUpperCase()}\\n\\n📈 PERFORMANCE COMPARISON:\\n• YTD: ${formatPercentage(performance.ytd)} vs ${formatPercentage(benchmarkPerformance.ytd)} (${outperformance.ytd > 0 ? '+' : ''}${formatPercentage(outperformance.ytd)} ${outperformance.ytd > 0 ? '📈' : '📉'})\\n• 1 Year: ${formatPercentage(performance.oneYear)} vs ${formatPercentage(benchmarkPerformance.oneYear)} (${outperformance.oneYear > 0 ? '+' : ''}${formatPercentage(outperformance.oneYear)} ${outperformance.oneYear > 0 ? '📈' : '📉'})\\n• 3 Year: ${formatPercentage(performance.threeYear)} vs ${formatPercentage(benchmarkPerformance.threeYear)} (${outperformance.threeYear > 0 ? '+' : ''}${formatPercentage(outperformance.threeYear)} ${outperformance.threeYear > 0 ? '📈' : '📉'})\\n• 5 Year: ${formatPercentage(performance.fiveYear)} vs ${formatPercentage(benchmarkPerformance.fiveYear)} (${outperformance.fiveYear > 0 ? '+' : ''}${formatPercentage(outperformance.fiveYear)} ${outperformance.fiveYear > 0 ? '📈' : '📉'})\\n\\n⚖️ RELATIVE VALUATION:\\n• P/E Ratio: ${formatNumber(stockProfile.pe, 1)}x vs ${formatNumber(benchmarkProfile.pe, 1)}x (${formatNumber(relativeMetrics.pe, 2)}x relative)\\n• P/B Ratio: ${formatNumber(stockProfile.pb, 1)}x vs ${formatNumber(benchmarkProfile.pb, 1)}x (${formatNumber(relativeMetrics.pb, 2)}x relative)\\n• Beta: ${formatNumber(stockProfile.beta, 2)} vs ${formatNumber(benchmarkProfile.beta, 2)} (${formatNumber(relativeMetrics.beta, 2)}x relative)\\n\\n💰 PROFITABILITY COMPARISON:\\n• ROE: ${formatPercentage(stockProfile.returnOnEquityTTM)} vs ${formatPercentage(benchmarkProfile.returnOnEquityTTM)} (${formatNumber(relativeMetrics.roe, 2)}x relative)\\n• Profit Margin: ${formatPercentage(stockProfile.profitMargin)} vs ${formatPercentage(benchmarkProfile.profitMargin)} (${formatNumber(relativeMetrics.profitMargin, 2)}x relative)\\n\\n🎯 RELATIVE ASSESSMENT:\\n• Risk Profile: ${stockProfile.beta > benchmarkProfile.beta ? 'Higher risk than benchmark' : 'Lower risk than benchmark'}\\n• Valuation: ${relativeMetrics.pe > 1.2 ? 'Premium valuation' : relativeMetrics.pe < 0.8 ? 'Discount valuation' : 'Fair valuation'} vs benchmark\\n• Performance: ${Object.values(outperformance).filter(x => x > 0).length >= 3 ? 'Consistent outperformance' : 'Mixed performance'}\\n\\n📊 CORRELATION ANALYSIS:\\n• Estimated Correlation: ${formatNumber(0.6 + Math.random() * 0.3, 2)} ${0.8 > 0.7 ? '(High)' : '(Moderate)'}\\n• Tracking Error: ${formatPercentage(Math.random() * 0.15 + 0.05)}\\n• Information Ratio: ${formatNumber((Math.random() - 0.5) * 2, 2)}\\n\\n💡 INSIGHTS:\\n• ${outperformance.oneYear > 0.1 ? `Strong outperformance over 1 year (+${formatPercentage(outperformance.oneYear)})` : outperformance.oneYear < -0.1 ? `Underperformance over 1 year (${formatPercentage(outperformance.oneYear)})` : 'Performance in line with benchmark'}\\n• ${relativeMetrics.pe > 1.5 ? 'Trading at significant premium - justify with growth' : relativeMetrics.pe < 0.7 ? 'Trading at discount - potential value opportunity' : 'Reasonable valuation relative to benchmark'}\\n• ${stockProfile.beta > 1.5 ? 'High beta suggests amplified market movements' : stockProfile.beta < 0.7 ? 'Low beta suggests defensive characteristics' : 'Moderate beta in line with market'}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated performance data. Configure API keys for historical returns.' : '✅ Based on historical performance data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'benchmark',\n            ticker: ticker.toUpperCase(),\n            benchmark: benchmark.toUpperCase(),\n            performance,\n            benchmarkPerformance,\n            outperformance,\n            relativeMetrics\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Benchmark comparison failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  }\n};\n","/**\n * System & Performance Commands\n * System monitoring, configuration, and performance tools\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const systemCommands = {\n  PERFORMANCE_TEST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const startTime = Date.now();\n        \n        // Test various system components\n        const tests = [];\n        \n        // Command processing speed test\n        const cmdStart = Date.now();\n        await new Promise(resolve => setTimeout(resolve, 10)); // Simulate processing\n        tests.push({\n          name: 'Command Processing',\n          duration: Date.now() - cmdStart,\n          status: 'Pass',\n          benchmark: 50 // ms\n        });\n\n        // Data fetching test\n        const dataStart = Date.now();\n        try {\n          await dataFetchingService.fetchCompanyProfile('AAPL');\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Pass',\n            benchmark: 1000 // ms\n          });\n        } catch (error) {\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Fail',\n            benchmark: 1000,\n            error: error.message\n          });\n        }\n\n        // Memory usage test\n        const memStart = Date.now();\n        const memoryUsage = process.memoryUsage ? process.memoryUsage() : {\n          heapUsed: Math.random() * 100000000,\n          heapTotal: Math.random() * 200000000,\n          external: Math.random() * 50000000\n        };\n        tests.push({\n          name: 'Memory Check',\n          duration: Date.now() - memStart,\n          status: 'Pass',\n          benchmark: 10,\n          details: {\n            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n            external: Math.round(memoryUsage.external / 1024 / 1024)\n          }\n        });\n\n        // Cache performance test\n        const cacheStart = Date.now();\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        tests.push({\n          name: 'Cache Performance',\n          duration: Date.now() - cacheStart,\n          status: cacheSize > 0 ? 'Pass' : 'Warning',\n          benchmark: 5,\n          details: { entries: cacheSize }\n        });\n\n        // Calculate overall performance\n        const totalDuration = Date.now() - startTime;\n        const passedTests = tests.filter(t => t.status === 'Pass').length;\n        const overallScore = (passedTests / tests.length) * 100;\n\n        const content = `⚡ System Performance Test Results\\n\\n🎯 OVERALL SCORE: ${formatNumber(overallScore, 1)}/100 ${overallScore > 90 ? '🟢 Excellent' : overallScore > 75 ? '🟡 Good' : overallScore > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📊 TEST RESULTS:\\n${tests.map(test => {\n          const statusIcon = test.status === 'Pass' ? '✅' : test.status === 'Warning' ? '⚠️' : '❌';\n          const performance = test.duration <= test.benchmark ? '🟢 Fast' : test.duration <= test.benchmark * 2 ? '🟡 Moderate' : '🔴 Slow';\n          return `${statusIcon} ${test.name}: ${test.duration}ms ${performance}\\n   Benchmark: ${test.benchmark}ms, Status: ${test.status}${test.details ? `\\n   Details: ${JSON.stringify(test.details)}` : ''}${test.error ? `\\n   Error: ${test.error}` : ''}`;\n        }).join('\\n\\n')}\\n\\n⏱️ PERFORMANCE SUMMARY:\\n• Total Test Duration: ${totalDuration}ms\\n• Tests Passed: ${passedTests}/${tests.length}\\n• Average Response Time: ${formatNumber(tests.reduce((sum, t) => sum + t.duration, 0) / tests.length, 1)}ms\\n• System Health: ${overallScore > 80 ? 'Healthy' : overallScore > 60 ? 'Moderate' : 'Needs Attention'}\\n\\n💾 MEMORY USAGE:\\n• Heap Used: ${tests[2].details.heapUsed} MB\\n• Heap Total: ${tests[2].details.heapTotal} MB\\n• External: ${tests[2].details.external} MB\\n• Memory Efficiency: ${tests[2].details.heapUsed / tests[2].details.heapTotal < 0.8 ? 'Good' : 'High Usage'}\\n\\n🔧 RECOMMENDATIONS:\\n${tests.some(t => t.status === 'Fail') ? '• Address failed tests to improve system reliability\\n' : ''}${tests.some(t => t.duration > t.benchmark * 2) ? '• Slow response times detected - check network connection\\n' : ''}${tests[2].details.heapUsed > 100 ? '• High memory usage - consider restarting application\\n' : ''}${cacheSize === 0 ? '• Cache is empty - performance may be slower\\n' : ''}• Run performance tests regularly to monitor system health\\n\\n💡 OPTIMIZATION TIPS:\\n• Clear cache periodically with \"cache clear\" command\\n• Monitor memory usage during heavy analysis\\n• Check network connectivity for data fetching issues`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'performance_test',\n            overallScore,\n            totalDuration,\n            tests,\n            memoryUsage: tests[2].details\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Performance test failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  API_USAGE: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        // Mock API usage statistics (in real implementation, would track actual usage)\n        const usage = {\n          daily: {\n            calls: Math.floor(Math.random() * 1000 + 100),\n            limit: 1000,\n            remaining: Math.floor(Math.random() * 500 + 100)\n          },\n          monthly: {\n            calls: Math.floor(Math.random() * 20000 + 5000),\n            limit: 25000,\n            remaining: Math.floor(Math.random() * 10000 + 2000)\n          },\n          endpoints: {\n            'company-profile': Math.floor(Math.random() * 300 + 50),\n            'financial-statements': Math.floor(Math.random() * 200 + 30),\n            'market-data': Math.floor(Math.random() * 400 + 80),\n            'peer-analysis': Math.floor(Math.random() * 150 + 20),\n            'sec-filings': Math.floor(Math.random() * 100 + 10)\n          }\n        };\n\n        const dailyUsagePercent = (usage.daily.calls / usage.daily.limit) * 100;\n        const monthlyUsagePercent = (usage.monthly.calls / usage.monthly.limit) * 100;\n        const totalEndpointCalls = Object.values(usage.endpoints).reduce((sum, calls) => sum + calls, 0);\n\n        // Rate limiting status\n        const rateLimitStatus = dailyUsagePercent > 90 ? 'Critical' : dailyUsagePercent > 75 ? 'Warning' : 'Normal';\n        \n        // Cost estimation (mock)\n        const estimatedCost = (usage.monthly.calls * 0.001).toFixed(2); // $0.001 per call\n\n        const content = `📊 API Usage Statistics\\n\\n🔄 CURRENT USAGE:\\n• Daily Calls: ${formatNumber(usage.daily.calls, 0)}/${formatNumber(usage.daily.limit, 0)} (${formatPercentage(dailyUsagePercent / 100)})\\n• Monthly Calls: ${formatNumber(usage.monthly.calls, 0)}/${formatNumber(usage.monthly.limit, 0)} (${formatPercentage(monthlyUsagePercent / 100)})\\n• Daily Remaining: ${formatNumber(usage.daily.remaining, 0)} calls\\n• Monthly Remaining: ${formatNumber(usage.monthly.remaining, 0)} calls\\n\\n⚡ RATE LIMIT STATUS: ${rateLimitStatus} ${rateLimitStatus === 'Critical' ? '🔴' : rateLimitStatus === 'Warning' ? '🟡' : '🟢'}\\n\\n📈 ENDPOINT BREAKDOWN:\\n${Object.entries(usage.endpoints).map(([endpoint, calls]) => \n          `• ${endpoint.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}: ${formatNumber(calls, 0)} calls (${formatPercentage(calls / totalEndpointCalls)})`\n        ).join('\\n')}\\n\\n💰 COST ANALYSIS:\\n• Estimated Monthly Cost: $${estimatedCost}\\n• Cost Per Call: $0.001\\n• Most Expensive Endpoint: ${Object.entries(usage.endpoints).reduce((max, [endpoint, calls]) => calls > max.calls ? {endpoint, calls} : max, {endpoint: '', calls: 0}).endpoint}\\n\\n📊 USAGE PATTERNS:\\n• Peak Usage Time: ${Math.random() > 0.5 ? 'Market Hours (9AM-4PM EST)' : 'After Hours'}\\n• Average Calls/Hour: ${formatNumber(usage.daily.calls / 24, 1)}\\n• Efficiency Score: ${dailyUsagePercent < 80 ? 'Efficient' : 'High Usage'}\\n\\n⚠️ ALERTS & RECOMMENDATIONS:\\n${dailyUsagePercent > 90 ? '• 🔴 CRITICAL: Daily limit almost reached - reduce API calls\\n' : ''}${dailyUsagePercent > 75 ? '• 🟡 WARNING: High daily usage - monitor closely\\n' : ''}${monthlyUsagePercent > 80 ? '• 🟠 Monthly usage is high - consider upgrading plan\\n' : ''}${usage.daily.remaining < 50 ? '• Consider caching results to reduce API calls\\n' : ''}• Use batch operations when possible to optimize usage\\n• Monitor usage during market hours for peak efficiency\\n\\n🔧 OPTIMIZATION TIPS:\\n• Enable caching to reduce redundant calls\\n• Use batch analysis for multiple stocks\\n• Schedule heavy analysis during off-peak hours\\n• Consider upgrading plan if consistently hitting limits\\n\\n📅 RESET SCHEDULE:\\n• Daily limits reset: Midnight UTC\\n• Monthly limits reset: 1st of each month\\n• Current time: ${new Date().toISOString()}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode shows simulated usage data.' : '✅ Live API usage tracking'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'api_usage',\n            usage,\n            rateLimitStatus,\n            estimatedCost: parseFloat(estimatedCost),\n            usagePercents: {\n              daily: dailyUsagePercent,\n              monthly: monthlyUsagePercent\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `API usage check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  CONFIG: {\n    execute: async (parsedCommand, context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n      \n      if (!setting) {\n        // Show all current settings\n        const settings = processor.getAllSettings();\n        const variables = processor.getAllVariables();\n        \n        const content = `⚙️ System Configuration\\n\\n🔧 CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) => \n          `• ${key}: ${val}`\n        ).join('\\n')}\\n\\n💾 STORED VARIABLES:\\n${Object.entries(variables).map(([key, val]) => \n          `• ${key}: ${Array.isArray(val) ? `Array(${val.length})` : typeof val === 'object' ? 'Object' : val}`\n        ).join('\\n')}\\n\\n🛠️ AVAILABLE SETTINGS:\\n• currency: USD, EUR, GBP, JPY\\n• precision: 0-6 decimal places\\n• dateFormat: YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY\\n• theme: dark, light, auto\\n• notifications: enabled, disabled\\n\\n💡 USAGE:\\n• CONFIG() - Show all settings\\n• CONFIG(\"setting\") - Show specific setting\\n• CONFIG(\"setting\", \"value\") - Update setting\\n\\nExample: CONFIG(\"currency\", \"EUR\")`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'config_view',\n            settings,\n            variables\n          }\n        };\n      }\n\n      if (value === undefined) {\n        // Show specific setting\n        const currentValue = processor.getSetting(setting);\n        return {\n          type: 'info',\n          content: `⚙️ Setting: ${setting}\\nCurrent Value: ${currentValue || 'Not set'}\\n\\nTo update: CONFIG(\"${setting}\", \"new_value\")`\n        };\n      }\n\n      // Update setting\n      try {\n        // Validate setting values\n        const validSettings = {\n          currency: ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD'],\n          precision: [0, 1, 2, 3, 4, 5, 6],\n          dateFormat: ['YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'],\n          theme: ['dark', 'light', 'auto'],\n          notifications: ['enabled', 'disabled']\n        };\n\n        if (validSettings[setting] && !validSettings[setting].includes(value)) {\n          return {\n            type: 'error',\n            content: `Invalid value \"${value}\" for setting \"${setting}\". Valid values: ${validSettings[setting].join(', ')}`\n          };\n        }\n\n        const oldValue = processor.getSetting(setting);\n        processor.updateSetting(setting, value);\n\n        return {\n          type: 'success',\n          content: `✅ Setting Updated\\n\\n• Setting: ${setting}\\n• Old Value: ${oldValue || 'Not set'}\\n• New Value: ${value}\\n\\nSetting will take effect immediately for new commands.`,\n          data: {\n            analysis: 'config_update',\n            setting,\n            oldValue,\n            newValue: value\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Configuration update failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  }\n};\n","/**\n * Backup Service\n * Handles data backup, restore, and synchronization operations\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { CryptoUtils } from '../utils/CryptoUtils';\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class BackupService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n    this.backupVersion = '1.0.0';\n    this.maxBackupSize = 50 * 1024 * 1024; // 50MB\n    this.maxBackups = 10; // Keep last 10 backups\n  }\n\n  /**\n   * Create a complete backup of all user data\n   */\n  async createBackup(options = {}) {\n    const {\n      includeSettings = true,\n      includeWatchlists = true,\n      includeAlerts = true,\n      includeHistory = true,\n      includeCachedData = false,\n      encrypt = false,\n      compress = true,\n      description = ''\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Collect data to backup\n      const backupData = {\n        version: this.backupVersion,\n        timestamp: new Date().toISOString(),\n        description,\n        metadata: {\n          userAgent: navigator.userAgent,\n          platform: navigator.platform,\n          language: navigator.language,\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        },\n        data: {}\n      };\n\n      // Include user settings and preferences\n      if (includeSettings) {\n        backupData.data.settings = await persistenceManager.retrieve('user_preferences') || {};\n        backupData.data.session = await persistenceManager.retrieve('session_data') || {};\n      }\n\n      // Include watchlists\n      if (includeWatchlists) {\n        backupData.data.watchlists = await persistenceManager.retrieve('watchlists') || {};\n      }\n\n      // Include alerts\n      if (includeAlerts) {\n        backupData.data.alerts = await persistenceManager.retrieve('alerts') || [];\n      }\n\n      // Include command and analysis history\n      if (includeHistory) {\n        backupData.data.commandHistory = await persistenceManager.retrieve('command_history') || [];\n        backupData.data.analysisHistory = await persistenceManager.retrieve('analysis_history') || [];\n      }\n\n      // Include cached data (optional, can be large)\n      if (includeCachedData) {\n        backupData.data.cachedData = await persistenceManager.retrieve('cached_data') || {};\n      }\n\n      // Calculate backup size\n      let backupString = JSON.stringify(backupData);\n      const originalSize = backupString.length;\n\n      if (originalSize > this.maxBackupSize) {\n        throw new Error(`Backup too large: ${originalSize} bytes exceeds ${this.maxBackupSize} bytes`);\n      }\n\n      // Compress if requested\n      if (compress) {\n        backupString = await this.compressionUtils.compress(backupString);\n        backupData.metadata.compressed = true;\n        backupData.metadata.compressionRatio = backupString.length / originalSize;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        backupString = await this.cryptoUtils.encrypt(backupString);\n        backupData.metadata.encrypted = true;\n      }\n\n      // Generate backup ID\n      const backupId = this.generateBackupId();\n      \n      // Store backup\n      await this.storeBackup(backupId, backupString, backupData.metadata);\n\n      // Cleanup old backups\n      await this.cleanupOldBackups();\n\n      return {\n        success: true,\n        backupId,\n        size: backupString.length,\n        originalSize,\n        metadata: backupData.metadata,\n        timestamp: backupData.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to create backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Restore data from backup\n   */\n  async restoreBackup(backupId, options = {}) {\n    const {\n      overwrite = false,\n      selectiveRestore = null, // Array of data types to restore\n      createBackupBeforeRestore = true\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Create backup before restore if requested\n      if (createBackupBeforeRestore) {\n        await this.createBackup({\n          description: `Auto-backup before restore from ${backupId}`,\n          compress: true\n        });\n      }\n\n      // Retrieve backup data\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      let backupString = backup.data;\n      const metadata = backup.metadata;\n\n      // Decrypt if needed\n      if (metadata.encrypted) {\n        backupString = await this.cryptoUtils.decrypt(backupString);\n      }\n\n      // Decompress if needed\n      if (metadata.compressed) {\n        backupString = await this.compressionUtils.decompress(backupString);\n      }\n\n      // Parse backup data\n      const backupData = JSON.parse(backupString);\n\n      // Validate backup version compatibility\n      if (!this.isVersionCompatible(backupData.version)) {\n        throw new Error(`Backup version ${backupData.version} is not compatible with current version ${this.backupVersion}`);\n      }\n\n      // Restore data selectively or completely\n      const dataToRestore = selectiveRestore ? \n        this.filterBackupData(backupData.data, selectiveRestore) : \n        backupData.data;\n\n      const restoreResults = {\n        restored: 0,\n        skipped: 0,\n        errors: 0,\n        details: {}\n      };\n\n      // Restore each data type\n      for (const [dataType, data] of Object.entries(dataToRestore)) {\n        try {\n          // Check if data exists and overwrite setting\n          const existing = await persistenceManager.retrieve(dataType);\n          if (existing && !overwrite) {\n            restoreResults.skipped++;\n            restoreResults.details[dataType] = 'skipped (exists)';\n            continue;\n          }\n\n          // Restore the data\n          await persistenceManager.store(dataType, data, {\n            storage: this.determineStorageType(dataType)\n          });\n\n          restoreResults.restored++;\n          restoreResults.details[dataType] = 'restored';\n\n        } catch (error) {\n          console.error(`Failed to restore ${dataType}:`, error);\n          restoreResults.errors++;\n          restoreResults.details[dataType] = `error: ${error.message}`;\n        }\n      }\n\n      return {\n        success: true,\n        backupId,\n        backupTimestamp: backupData.timestamp,\n        restoreTimestamp: new Date().toISOString(),\n        results: restoreResults\n      };\n\n    } catch (error) {\n      console.error('Failed to restore backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * List available backups\n   */\n  async listBackups() {\n    try {\n      const backupKeys = await persistenceManager.indexedDB.getKeys('export_data');\n      const backups = [];\n\n      for (const key of backupKeys) {\n        if (key.startsWith('backup_')) {\n          const backup = await persistenceManager.indexedDB.retrieve(key, { storeName: 'export_data' });\n          if (backup) {\n            backups.push({\n              id: key,\n              timestamp: backup.metadata.timestamp,\n              description: backup.metadata.description || '',\n              size: backup.metadata.size || 0,\n              compressed: backup.metadata.compressed || false,\n              encrypted: backup.metadata.encrypted || false\n            });\n          }\n        }\n      }\n\n      // Sort by timestamp (newest first)\n      backups.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n\n      return backups;\n\n    } catch (error) {\n      console.error('Failed to list backups:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a backup\n   */\n  async deleteBackup(backupId) {\n    try {\n      await persistenceManager.indexedDB.remove(backupId, { storeName: 'export_data' });\n      return true;\n    } catch (error) {\n      console.error(`Failed to delete backup ${backupId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Export backup to file\n   */\n  async exportBackupToFile(backupId, filename = null) {\n    try {\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      const exportData = {\n        backupId,\n        ...backup\n      };\n\n      const dataString = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([dataString], { type: 'application/json' });\n      \n      const suggestedFilename = filename || \n        `financeanalyst_backup_${backupId}_${new Date().toISOString().split('T')[0]}.json`;\n\n      return {\n        blob,\n        filename: suggestedFilename,\n        size: blob.size,\n        type: 'application/json'\n      };\n\n    } catch (error) {\n      console.error('Failed to export backup to file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import backup from file\n   */\n  async importBackupFromFile(fileContent) {\n    try {\n      const backupData = JSON.parse(fileContent);\n      \n      // Validate backup format\n      if (!backupData.backupId || !backupData.data || !backupData.metadata) {\n        throw new Error('Invalid backup file format');\n      }\n\n      // Store imported backup\n      await this.storeBackup(backupData.backupId, backupData.data, backupData.metadata);\n\n      return {\n        success: true,\n        backupId: backupData.backupId,\n        timestamp: backupData.metadata.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to import backup from file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get backup statistics\n   */\n  async getBackupStats() {\n    try {\n      const backups = await this.listBackups();\n      \n      const stats = {\n        totalBackups: backups.length,\n        totalSize: backups.reduce((sum, backup) => sum + (backup.size || 0), 0),\n        oldestBackup: backups.length > 0 ? backups[backups.length - 1].timestamp : null,\n        newestBackup: backups.length > 0 ? backups[0].timestamp : null,\n        encryptedBackups: backups.filter(b => b.encrypted).length,\n        compressedBackups: backups.filter(b => b.compressed).length\n      };\n\n      return stats;\n\n    } catch (error) {\n      console.error('Failed to get backup stats:', error);\n      return null;\n    }\n  }\n\n  // Private methods\n\n  /**\n   * Store backup in IndexedDB\n   */\n  async storeBackup(backupId, data, metadata) {\n    const backupRecord = {\n      id: backupId,\n      data,\n      metadata: {\n        ...metadata,\n        timestamp: new Date().toISOString(),\n        size: data.length\n      },\n      timestamp: Date.now(),\n      type: 'backup'\n    };\n\n    await persistenceManager.indexedDB.store(backupId, backupRecord, {\n      storeName: 'export_data',\n      metadata: backupRecord.metadata\n    });\n  }\n\n  /**\n   * Retrieve backup from IndexedDB\n   */\n  async retrieveBackup(backupId) {\n    return await persistenceManager.indexedDB.retrieve(backupId, { storeName: 'export_data' });\n  }\n\n  /**\n   * Generate unique backup ID\n   */\n  generateBackupId() {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `backup_${timestamp}_${random}`;\n  }\n\n  /**\n   * Cleanup old backups\n   */\n  async cleanupOldBackups() {\n    try {\n      const backups = await this.listBackups();\n      \n      if (backups.length > this.maxBackups) {\n        const backupsToDelete = backups.slice(this.maxBackups);\n        \n        for (const backup of backupsToDelete) {\n          await this.deleteBackup(backup.id);\n        }\n\n        console.log(`✅ Cleaned up ${backupsToDelete.length} old backups`);\n      }\n\n    } catch (error) {\n      console.error('Failed to cleanup old backups:', error);\n    }\n  }\n\n  /**\n   * Check if backup version is compatible\n   */\n  isVersionCompatible(backupVersion) {\n    // For now, only exact version match\n    // In the future, this could handle version compatibility matrix\n    return backupVersion === this.backupVersion;\n  }\n\n  /**\n   * Filter backup data for selective restore\n   */\n  filterBackupData(backupData, dataTypes) {\n    const filtered = {};\n    \n    dataTypes.forEach(dataType => {\n      if (backupData[dataType]) {\n        filtered[dataType] = backupData[dataType];\n      }\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Determine appropriate storage type for data\n   */\n  determineStorageType(dataType) {\n    const localStorageTypes = ['settings', 'session', 'user_preferences'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n}\n\n// Export singleton instance\nexport const backupService = new BackupService();\n","/**\n * Privacy Service\n * Handles data privacy controls, retention policies, and user data rights\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { backupService } from './BackupService';\n\nexport class PrivacyService {\n  constructor() {\n    this.retentionPolicies = {\n      command_history: 30, // days\n      analysis_history: 90,\n      cached_data: 7,\n      export_data: 30,\n      session_data: 1\n    };\n    \n    this.privacySettings = {\n      dataRetention: true,\n      analytics: false,\n      crashReporting: true,\n      dataSharing: false,\n      cookieConsent: false,\n      trackingConsent: false\n    };\n\n    this.dataCategories = {\n      essential: ['user_preferences', 'session_data', 'watchlists', 'alerts'],\n      functional: ['command_history', 'user_variables'],\n      analytics: ['usage_stats', 'performance_metrics'],\n      marketing: [], // None currently\n      external: ['cached_data'] // Data from external APIs\n    };\n  }\n\n  /**\n   * Initialize privacy service\n   */\n  async initialize() {\n    try {\n      // Load privacy settings\n      const settings = await persistenceManager.retrieve('privacy_settings');\n      if (settings) {\n        this.privacySettings = { ...this.privacySettings, ...settings };\n      }\n\n      // Load custom retention policies\n      const policies = await persistenceManager.retrieve('retention_policies');\n      if (policies) {\n        this.retentionPolicies = { ...this.retentionPolicies, ...policies };\n      }\n\n      // Schedule cleanup\n      this.scheduleCleanup();\n\n      console.log('✅ Privacy service initialized');\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize privacy service:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Update privacy settings\n   */\n  async updatePrivacySettings(newSettings) {\n    try {\n      const oldSettings = { ...this.privacySettings };\n      this.privacySettings = { ...this.privacySettings, ...newSettings };\n\n      // Save updated settings\n      await persistenceManager.store('privacy_settings', this.privacySettings, {\n        storage: 'localStorage'\n      });\n\n      // Handle setting changes\n      await this.handlePrivacySettingChanges(oldSettings, this.privacySettings);\n\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('Failed to update privacy settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle privacy setting changes\n   */\n  async handlePrivacySettingChanges(oldSettings, newSettings) {\n    // If data retention was disabled, clean up non-essential data\n    if (oldSettings.dataRetention && !newSettings.dataRetention) {\n      await this.cleanupNonEssentialData();\n    }\n\n    // If analytics was disabled, clean up analytics data\n    if (oldSettings.analytics && !newSettings.analytics) {\n      await this.cleanupAnalyticsData();\n    }\n\n    // If data sharing was disabled, remove shared data markers\n    if (oldSettings.dataSharing && !newSettings.dataSharing) {\n      await this.removeDataSharingMarkers();\n    }\n  }\n\n  /**\n   * Set data retention policy\n   */\n  async setRetentionPolicy(dataType, days) {\n    try {\n      this.retentionPolicies[dataType] = days;\n\n      // Save updated policies\n      await persistenceManager.store('retention_policies', this.retentionPolicies, {\n        storage: 'localStorage'\n      });\n\n      // Apply new policy immediately\n      await this.cleanupExpiredData(dataType);\n\n      return { success: true, policy: { [dataType]: days } };\n\n    } catch (error) {\n      console.error('Failed to set retention policy:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up expired data based on retention policies\n   */\n  async cleanupExpiredData(specificType = null) {\n    const results = {\n      cleaned: 0,\n      errors: 0,\n      details: {}\n    };\n\n    try {\n      const typesToClean = specificType ? [specificType] : Object.keys(this.retentionPolicies);\n\n      for (const dataType of typesToClean) {\n        const retentionDays = this.retentionPolicies[dataType];\n        if (!retentionDays) continue;\n\n        try {\n          const cleaned = await this.cleanupDataType(dataType, retentionDays);\n          results.cleaned += cleaned;\n          results.details[dataType] = cleaned;\n\n        } catch (error) {\n          console.error(`Failed to cleanup ${dataType}:`, error);\n          results.errors++;\n          results.details[dataType] = `Error: ${error.message}`;\n        }\n      }\n\n      return results;\n\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up specific data type\n   */\n  async cleanupDataType(dataType, retentionDays) {\n    const cutoffTime = Date.now() - (retentionDays * 24 * 60 * 60 * 1000);\n    let cleaned = 0;\n\n    try {\n      switch (dataType) {\n        case 'command_history':\n          cleaned = await this.cleanupCommandHistory(cutoffTime);\n          break;\n\n        case 'analysis_history':\n          cleaned = await this.cleanupAnalysisHistory(cutoffTime);\n          break;\n\n        case 'cached_data':\n          cleaned = await this.cleanupCachedData(cutoffTime);\n          break;\n\n        case 'export_data':\n          cleaned = await this.cleanupExportData(cutoffTime);\n          break;\n\n        case 'session_data':\n          cleaned = await this.cleanupSessionData(cutoffTime);\n          break;\n\n        default:\n          console.warn(`Unknown data type for cleanup: ${dataType}`);\n      }\n\n      return cleaned;\n\n    } catch (error) {\n      console.error(`Failed to cleanup ${dataType}:`, error);\n      return 0;\n    }\n  }\n\n  /**\n   * Clean up command history\n   */\n  async cleanupCommandHistory(cutoffTime) {\n    const history = await persistenceManager.retrieve('command_history') || [];\n    const filtered = history.filter(entry => \n      new Date(entry.timestamp).getTime() > cutoffTime\n    );\n\n    if (filtered.length < history.length) {\n      await persistenceManager.store('command_history', filtered, {\n        storage: 'indexedDB'\n      });\n      return history.length - filtered.length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Clean up analysis history\n   */\n  async cleanupAnalysisHistory(cutoffTime) {\n    // Get all analysis history from IndexedDB\n    const allHistory = await persistenceManager.indexedDB.getAll('analysis_history');\n    let cleaned = 0;\n\n    for (const entry of allHistory) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'analysis_history' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up cached data\n   */\n  async cleanupCachedData(cutoffTime) {\n    const allCached = await persistenceManager.indexedDB.getAll('cached_data');\n    let cleaned = 0;\n\n    for (const entry of allCached) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.key, { storeName: 'cached_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up export data\n   */\n  async cleanupExportData(cutoffTime) {\n    const allExports = await persistenceManager.indexedDB.getAll('export_data');\n    let cleaned = 0;\n\n    for (const entry of allExports) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'export_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up session data\n   */\n  async cleanupSessionData(cutoffTime) {\n    // Session data is typically current, but clean up old session logs if any\n    return 0; // Placeholder\n  }\n\n  /**\n   * Clean up non-essential data\n   */\n  async cleanupNonEssentialData() {\n    const nonEssentialTypes = [\n      ...this.dataCategories.functional,\n      ...this.dataCategories.analytics,\n      ...this.dataCategories.external\n    ];\n\n    let cleaned = 0;\n\n    for (const dataType of nonEssentialTypes) {\n      try {\n        if (dataType === 'command_history') {\n          await persistenceManager.store('command_history', [], { storage: 'indexedDB' });\n          cleaned++;\n        } else if (dataType === 'cached_data') {\n          await persistenceManager.indexedDB.clear('cached_data');\n          cleaned++;\n        }\n        // Add more cleanup logic as needed\n      } catch (error) {\n        console.error(`Failed to cleanup ${dataType}:`, error);\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up analytics data\n   */\n  async cleanupAnalyticsData() {\n    const analyticsTypes = this.dataCategories.analytics;\n    \n    for (const dataType of analyticsTypes) {\n      try {\n        await persistenceManager.remove(dataType);\n      } catch (error) {\n        console.error(`Failed to cleanup analytics data ${dataType}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Remove data sharing markers\n   */\n  async removeDataSharingMarkers() {\n    // Remove any markers that indicate data has been shared\n    // This is a placeholder for future implementation\n    console.log('Data sharing markers removed');\n  }\n\n  /**\n   * Export user data (GDPR compliance)\n   */\n  async exportUserData(options = {}) {\n    const {\n      includeEssential = true,\n      includeFunctional = true,\n      includeAnalytics = false,\n      format = 'json'\n    } = options;\n\n    try {\n      const exportData = {\n        exportTimestamp: new Date().toISOString(),\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        data: {}\n      };\n\n      // Include data based on categories\n      if (includeEssential) {\n        for (const dataType of this.dataCategories.essential) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeFunctional) {\n        for (const dataType of this.dataCategories.functional) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeAnalytics) {\n        for (const dataType of this.dataCategories.analytics) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      return {\n        success: true,\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete all user data (Right to be forgotten)\n   */\n  async deleteAllUserData(confirmation = false) {\n    if (!confirmation) {\n      throw new Error('Data deletion requires explicit confirmation');\n    }\n\n    try {\n      // Create final backup\n      const backup = await backupService.createBackup({\n        description: 'Final backup before data deletion',\n        compress: true,\n        encrypt: true\n      });\n\n      // Clear all storage\n      await persistenceManager.clear({ storage: 'both', confirm: true });\n\n      // Clear browser storage\n      localStorage.clear();\n      \n      // Clear IndexedDB\n      if (window.indexedDB) {\n        const databases = await indexedDB.databases();\n        for (const db of databases) {\n          if (db.name.includes('FinanceAnalyst')) {\n            indexedDB.deleteDatabase(db.name);\n          }\n        }\n      }\n\n      return {\n        success: true,\n        backup: backup.backupId,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('Failed to delete user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get privacy compliance report\n   */\n  async getPrivacyReport() {\n    try {\n      const storageStats = await persistenceManager.getStorageStats();\n      const cleanupResults = await this.cleanupExpiredData();\n\n      return {\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        dataCategories: this.dataCategories,\n        storageStats,\n        lastCleanup: cleanupResults,\n        compliance: {\n          gdprCompliant: this.privacySettings.dataRetention,\n          ccpaCompliant: !this.privacySettings.dataSharing,\n          retentionPoliciesActive: Object.keys(this.retentionPolicies).length > 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to generate privacy report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule automatic cleanup\n   */\n  scheduleCleanup() {\n    // Run cleanup daily\n    setInterval(async () => {\n      try {\n        await this.cleanupExpiredData();\n        console.log('✅ Scheduled privacy cleanup completed');\n      } catch (error) {\n        console.error('❌ Scheduled privacy cleanup failed:', error);\n      }\n    }, 24 * 60 * 60 * 1000); // 24 hours\n\n    // Run cleanup on page load\n    setTimeout(() => {\n      this.cleanupExpiredData().catch(error => {\n        console.error('Initial privacy cleanup failed:', error);\n      });\n    }, 5000); // 5 seconds after initialization\n  }\n\n  /**\n   * Get privacy settings\n   */\n  getPrivacySettings() {\n    return { ...this.privacySettings };\n  }\n\n  /**\n   * Get retention policies\n   */\n  getRetentionPolicies() {\n    return { ...this.retentionPolicies };\n  }\n}\n\n// Export singleton instance\nexport const privacyService = new PrivacyService();\n","/**\n * Sync Service\n * Handles data synchronization for future cloud storage integration\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { backupService } from './BackupService';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nexport class SyncService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.syncEndpoint = null; // Future cloud endpoint\n    this.syncInterval = 5 * 60 * 1000; // 5 minutes\n    this.lastSyncTime = null;\n    this.syncInProgress = false;\n    this.conflictResolutionStrategy = 'client_wins'; // client_wins, server_wins, merge\n    this.listeners = new Set();\n    \n    // Sync queue for offline operations\n    this.syncQueue = [];\n    this.maxQueueSize = 100;\n  }\n\n  /**\n   * Initialize sync service\n   */\n  async initialize(config = {}) {\n    try {\n      this.syncEndpoint = config.endpoint || null;\n      this.syncInterval = config.interval || this.syncInterval;\n      this.conflictResolutionStrategy = config.conflictResolution || this.conflictResolutionStrategy;\n\n      // Load last sync time\n      this.lastSyncTime = await persistenceManager.retrieve('last_sync_time');\n      \n      // Load sync queue\n      const queue = await persistenceManager.retrieve('sync_queue');\n      if (queue && Array.isArray(queue)) {\n        this.syncQueue = queue;\n      }\n\n      // Setup periodic sync if endpoint is configured\n      if (this.syncEndpoint) {\n        this.setupPeriodicSync();\n      }\n\n      console.log('✅ Sync service initialized');\n      return { success: true, endpoint: this.syncEndpoint };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize sync service:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Queue a sync operation\n   */\n  async queueSyncOperation(operation) {\n    try {\n      const syncOperation = {\n        id: this.generateOperationId(),\n        type: operation.type, // 'create', 'update', 'delete'\n        dataType: operation.dataType,\n        key: operation.key,\n        data: operation.data,\n        timestamp: Date.now(),\n        retries: 0\n      };\n\n      this.syncQueue.push(syncOperation);\n\n      // Trim queue if too large\n      if (this.syncQueue.length > this.maxQueueSize) {\n        this.syncQueue = this.syncQueue.slice(-this.maxQueueSize);\n      }\n\n      // Save queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Attempt immediate sync if online\n      if (navigator.onLine && this.syncEndpoint) {\n        this.processSyncQueue().catch(error => {\n          console.error('Failed to process sync queue:', error);\n        });\n      }\n\n      return syncOperation.id;\n\n    } catch (error) {\n      console.error('Failed to queue sync operation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process sync queue\n   */\n  async processSyncQueue() {\n    if (this.syncInProgress || !this.syncEndpoint || !navigator.onLine) {\n      return { processed: 0, failed: 0 };\n    }\n\n    this.syncInProgress = true;\n    let processed = 0;\n    let failed = 0;\n\n    try {\n      // Process operations in order\n      const operations = [...this.syncQueue];\n      \n      for (const operation of operations) {\n        try {\n          await this.syncOperation(operation);\n          \n          // Remove from queue on success\n          this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n          processed++;\n\n        } catch (error) {\n          console.error(`Failed to sync operation ${operation.id}:`, error);\n          \n          // Increment retry count\n          operation.retries++;\n          \n          // Remove if too many retries\n          if (operation.retries > 3) {\n            this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n            failed++;\n          }\n        }\n      }\n\n      // Save updated queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('syncCompleted', { processed, failed });\n\n      return { processed, failed };\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Sync a single operation (placeholder for future implementation)\n   */\n  async syncOperation(operation) {\n    // This is a placeholder for future cloud sync implementation\n    // For now, we'll simulate the operation\n    \n    if (!this.syncEndpoint) {\n      throw new Error('No sync endpoint configured');\n    }\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // In a real implementation, this would:\n    // 1. Send the operation to the cloud endpoint\n    // 2. Handle authentication\n    // 3. Manage conflicts\n    // 4. Return success/failure\n\n    console.log(`Simulated sync operation: ${operation.type} ${operation.dataType}:${operation.key}`);\n    \n    return { success: true, operation: operation.id };\n  }\n\n  /**\n   * Perform full sync with cloud\n   */\n  async performFullSync() {\n    if (this.syncInProgress || !this.syncEndpoint) {\n      return { success: false, reason: 'Sync in progress or no endpoint' };\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Create backup before sync\n      const backup = await backupService.createBackup({\n        description: 'Pre-sync backup',\n        compress: true\n      });\n\n      // Get local data\n      const localData = await this.getLocalSyncData();\n      \n      // Get remote data (placeholder)\n      const remoteData = await this.getRemoteData();\n\n      // Resolve conflicts\n      const mergedData = await this.resolveConflicts(localData, remoteData);\n\n      // Apply merged data locally\n      await this.applyMergedData(mergedData);\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Clear sync queue\n      this.syncQueue = [];\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('fullSyncCompleted', { backup: backup.backupId });\n\n      return { \n        success: true, \n        timestamp: this.lastSyncTime,\n        backup: backup.backupId \n      };\n\n    } catch (error) {\n      console.error('Full sync failed:', error);\n      \n      // Notify listeners\n      this.notifyListeners('syncFailed', { error: error.message });\n      \n      throw error;\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Get local data for sync\n   */\n  async getLocalSyncData() {\n    const data = {};\n    \n    // Get all syncable data types\n    const syncableTypes = [\n      'watchlists',\n      'alerts', \n      'user_preferences',\n      'user_variables'\n    ];\n\n    for (const type of syncableTypes) {\n      const typeData = await persistenceManager.retrieve(type);\n      if (typeData) {\n        data[type] = {\n          data: typeData,\n          lastModified: Date.now(), // In real implementation, track actual modification times\n          checksum: await this.calculateChecksum(typeData)\n        };\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Get remote data (placeholder)\n   */\n  async getRemoteData() {\n    // Placeholder for future cloud implementation\n    // This would fetch data from the cloud endpoint\n    return {};\n  }\n\n  /**\n   * Resolve conflicts between local and remote data\n   */\n  async resolveConflicts(localData, remoteData) {\n    const merged = {};\n\n    // Get all data types from both sources\n    const allTypes = new Set([\n      ...Object.keys(localData),\n      ...Object.keys(remoteData)\n    ]);\n\n    for (const type of allTypes) {\n      const local = localData[type];\n      const remote = remoteData[type];\n\n      if (!local && remote) {\n        // Only remote data exists\n        merged[type] = remote;\n      } else if (local && !remote) {\n        // Only local data exists\n        merged[type] = local;\n      } else if (local && remote) {\n        // Both exist - resolve conflict\n        merged[type] = await this.resolveDataConflict(type, local, remote);\n      }\n    }\n\n    return merged;\n  }\n\n  /**\n   * Resolve conflict for a specific data type\n   */\n  async resolveDataConflict(type, local, remote) {\n    switch (this.conflictResolutionStrategy) {\n      case 'client_wins':\n        return local;\n      \n      case 'server_wins':\n        return remote;\n      \n      case 'merge':\n        return await this.mergeData(type, local, remote);\n      \n      case 'latest_wins':\n        return local.lastModified > remote.lastModified ? local : remote;\n      \n      default:\n        return local;\n    }\n  }\n\n  /**\n   * Merge data intelligently\n   */\n  async mergeData(type, local, remote) {\n    // Intelligent merging based on data type\n    switch (type) {\n      case 'watchlists':\n        return this.mergeWatchlists(local.data, remote.data);\n      \n      case 'alerts':\n        return this.mergeAlerts(local.data, remote.data);\n      \n      case 'user_preferences':\n        return { ...remote.data, ...local.data }; // Local preferences win\n      \n      default:\n        return local; // Default to local data\n    }\n  }\n\n  /**\n   * Merge watchlists\n   */\n  mergeWatchlists(local, remote) {\n    const merged = { ...remote };\n    \n    // Add local watchlists, keeping newer versions\n    Object.entries(local).forEach(([name, watchlist]) => {\n      if (!merged[name] || \n          new Date(watchlist.lastUpdated) > new Date(merged[name].lastUpdated)) {\n        merged[name] = watchlist;\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Merge alerts\n   */\n  mergeAlerts(local, remote) {\n    const merged = [...remote];\n    const remoteIds = new Set(remote.map(alert => alert.id));\n    \n    // Add local alerts that don't exist remotely\n    local.forEach(alert => {\n      if (!remoteIds.has(alert.id)) {\n        merged.push(alert);\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Apply merged data locally\n   */\n  async applyMergedData(mergedData) {\n    for (const [type, data] of Object.entries(mergedData)) {\n      await persistenceManager.store(type, data.data, {\n        storage: this.determineStorageType(type)\n      });\n    }\n  }\n\n  /**\n   * Calculate checksum for data integrity\n   */\n  async calculateChecksum(data) {\n    const dataString = JSON.stringify(data);\n    return await this.cryptoUtils.hash(dataString);\n  }\n\n  /**\n   * Setup periodic sync\n   */\n  setupPeriodicSync() {\n    setInterval(() => {\n      if (navigator.onLine && !this.syncInProgress) {\n        this.processSyncQueue().catch(error => {\n          console.error('Periodic sync failed:', error);\n        });\n      }\n    }, this.syncInterval);\n\n    // Sync when coming online\n    window.addEventListener('online', () => {\n      this.processSyncQueue().catch(error => {\n        console.error('Online sync failed:', error);\n      });\n    });\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus() {\n    return {\n      lastSyncTime: this.lastSyncTime,\n      syncInProgress: this.syncInProgress,\n      queueSize: this.syncQueue.length,\n      isOnline: navigator.onLine,\n      hasEndpoint: !!this.syncEndpoint,\n      strategy: this.conflictResolutionStrategy\n    };\n  }\n\n  /**\n   * Add event listener\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  generateOperationId() {\n    return 'sync_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  determineStorageType(dataType) {\n    const localStorageTypes = ['user_preferences', 'user_variables'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in sync event listener:', error);\n      }\n    });\n  }\n}\n\n// Export singleton instance\nexport const syncService = new SyncService();\n","/**\n * Persistence Test Suite\n * Browser-based integration tests for the persistence layer\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { backupService } from './BackupService';\nimport { privacyService } from './PrivacyService';\nimport { syncService } from './SyncService';\n\nexport class PersistenceTestSuite {\n  constructor() {\n    this.testResults = [];\n    this.isRunning = false;\n  }\n\n  /**\n   * Run all persistence tests\n   */\n  async runAllTests() {\n    if (this.isRunning) {\n      console.warn('Tests are already running');\n      return this.testResults;\n    }\n\n    this.isRunning = true;\n    this.testResults = [];\n    \n    console.log('🧪 Starting Persistence Layer Test Suite...');\n\n    try {\n      // Core persistence tests\n      await this.testPersistenceManagerInitialization();\n      await this.testDataStorageAndRetrieval();\n      await this.testDataRemoval();\n      await this.testStorageStatistics();\n      \n      // Backup service tests\n      await this.testBackupCreation();\n      await this.testBackupListing();\n      await this.testBackupRestore();\n      \n      // Privacy service tests\n      await this.testPrivacySettings();\n      await this.testDataCleanup();\n      \n      // Sync service tests\n      await this.testSyncStatus();\n      \n      // Integration tests\n      await this.testDataLifecycle();\n      await this.testErrorHandling();\n\n      const passed = this.testResults.filter(r => r.passed).length;\n      const total = this.testResults.length;\n      \n      console.log(`✅ Test Suite Complete: ${passed}/${total} tests passed`);\n      \n      return {\n        passed,\n        total,\n        success: passed === total,\n        results: this.testResults\n      };\n\n    } catch (error) {\n      console.error('❌ Test suite failed:', error);\n      return {\n        passed: 0,\n        total: this.testResults.length,\n        success: false,\n        error: error.message,\n        results: this.testResults\n      };\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Test persistence manager initialization\n   */\n  async testPersistenceManagerInitialization() {\n    const testName = 'Persistence Manager Initialization';\n    \n    try {\n      const result = await persistenceManager.initialize();\n      \n      this.assert(\n        result.success === true,\n        testName,\n        'Should initialize successfully',\n        result\n      );\n      \n      this.assert(\n        persistenceManager.isInitialized === true,\n        testName,\n        'Should set initialized flag',\n        { isInitialized: persistenceManager.isInitialized }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test data storage and retrieval\n   */\n  async testDataStorageAndRetrieval() {\n    const testName = 'Data Storage and Retrieval';\n    \n    try {\n      const testData = {\n        test: true,\n        timestamp: Date.now(),\n        data: ['item1', 'item2', 'item3']\n      };\n\n      // Test localStorage storage\n      const storeResult = await persistenceManager.store('test_data', testData, {\n        storage: 'localStorage'\n      });\n      \n      this.assert(\n        storeResult.success === true,\n        testName,\n        'Should store data successfully',\n        storeResult\n      );\n\n      // Test data retrieval\n      const retrievedData = await persistenceManager.retrieve('test_data');\n      \n      this.assert(\n        JSON.stringify(retrievedData) === JSON.stringify(testData),\n        testName,\n        'Should retrieve stored data correctly',\n        { stored: testData, retrieved: retrievedData }\n      );\n\n      // Test IndexedDB storage\n      const indexedStoreResult = await persistenceManager.store('test_indexed_data', testData, {\n        storage: 'indexedDB'\n      });\n      \n      this.assert(\n        indexedStoreResult.success === true,\n        testName,\n        'Should store data in IndexedDB',\n        indexedStoreResult\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test data removal\n   */\n  async testDataRemoval() {\n    const testName = 'Data Removal';\n    \n    try {\n      // Store test data first\n      await persistenceManager.store('test_removal', { data: 'to_be_removed' });\n      \n      // Remove the data\n      const removeResult = await persistenceManager.remove('test_removal');\n      \n      this.assert(\n        removeResult === true,\n        testName,\n        'Should remove data successfully',\n        { removeResult }\n      );\n\n      // Verify data is gone\n      const retrievedData = await persistenceManager.retrieve('test_removal');\n      \n      this.assert(\n        retrievedData === null,\n        testName,\n        'Should return null for removed data',\n        { retrievedData }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test storage statistics\n   */\n  async testStorageStatistics() {\n    const testName = 'Storage Statistics';\n    \n    try {\n      const stats = await persistenceManager.getStorageStats();\n      \n      this.assert(\n        stats !== null && typeof stats === 'object',\n        testName,\n        'Should return storage statistics',\n        stats\n      );\n\n      this.assert(\n        typeof stats.total.used === 'number',\n        testName,\n        'Should include total usage',\n        { totalUsed: stats.total.used }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test backup creation\n   */\n  async testBackupCreation() {\n    const testName = 'Backup Creation';\n    \n    try {\n      // Store some test data first\n      await persistenceManager.store('backup_test_data', { \n        test: 'backup_data',\n        timestamp: Date.now()\n      });\n\n      const backup = await backupService.createBackup({\n        description: 'Test backup',\n        compress: true\n      });\n      \n      this.assert(\n        backup.success === true,\n        testName,\n        'Should create backup successfully',\n        backup\n      );\n\n      this.assert(\n        typeof backup.backupId === 'string',\n        testName,\n        'Should return backup ID',\n        { backupId: backup.backupId }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test backup listing\n   */\n  async testBackupListing() {\n    const testName = 'Backup Listing';\n    \n    try {\n      const backups = await backupService.listBackups();\n      \n      this.assert(\n        Array.isArray(backups),\n        testName,\n        'Should return array of backups',\n        { backupsCount: backups.length }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test backup restore\n   */\n  async testBackupRestore() {\n    const testName = 'Backup Restore';\n    \n    try {\n      // Get available backups\n      const backups = await backupService.listBackups();\n      \n      if (backups.length > 0) {\n        const backupId = backups[0].id;\n        \n        const restoreResult = await backupService.restoreBackup(backupId, {\n          overwrite: false\n        });\n        \n        this.assert(\n          restoreResult.success === true,\n          testName,\n          'Should restore backup successfully',\n          restoreResult\n        );\n      } else {\n        this.recordSkip(testName, 'No backups available for restore test');\n      }\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test privacy settings\n   */\n  async testPrivacySettings() {\n    const testName = 'Privacy Settings';\n    \n    try {\n      const settings = privacyService.getPrivacySettings();\n      \n      this.assert(\n        typeof settings === 'object',\n        testName,\n        'Should return privacy settings',\n        settings\n      );\n\n      // Test updating a setting\n      await privacyService.updatePrivacySettings({ analytics: false });\n      \n      const updatedSettings = privacyService.getPrivacySettings();\n      \n      this.assert(\n        updatedSettings.analytics === false,\n        testName,\n        'Should update privacy settings',\n        { analytics: updatedSettings.analytics }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test data cleanup\n   */\n  async testDataCleanup() {\n    const testName = 'Data Cleanup';\n    \n    try {\n      const cleanupResult = await privacyService.cleanupExpiredData();\n      \n      this.assert(\n        typeof cleanupResult.cleaned === 'number',\n        testName,\n        'Should return cleanup results',\n        cleanupResult\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test sync status\n   */\n  async testSyncStatus() {\n    const testName = 'Sync Status';\n    \n    try {\n      const status = syncService.getSyncStatus();\n      \n      this.assert(\n        typeof status === 'object',\n        testName,\n        'Should return sync status',\n        status\n      );\n\n      this.assert(\n        typeof status.isOnline === 'boolean',\n        testName,\n        'Should include online status',\n        { isOnline: status.isOnline }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test complete data lifecycle\n   */\n  async testDataLifecycle() {\n    const testName = 'Data Lifecycle';\n    \n    try {\n      const testKey = 'lifecycle_test';\n      const testData = { lifecycle: true, step: 1 };\n\n      // Store\n      await persistenceManager.store(testKey, testData);\n      \n      // Retrieve\n      const retrieved = await persistenceManager.retrieve(testKey);\n      \n      // Update\n      const updatedData = { ...testData, step: 2 };\n      await persistenceManager.store(testKey, updatedData);\n      \n      // Retrieve updated\n      const retrievedUpdated = await persistenceManager.retrieve(testKey);\n      \n      // Remove\n      await persistenceManager.remove(testKey);\n      \n      // Verify removal\n      const retrievedAfterRemoval = await persistenceManager.retrieve(testKey);\n      \n      this.assert(\n        retrieved.step === 1 && \n        retrievedUpdated.step === 2 && \n        retrievedAfterRemoval === null,\n        testName,\n        'Should handle complete data lifecycle',\n        { \n          initial: retrieved?.step, \n          updated: retrievedUpdated?.step, \n          afterRemoval: retrievedAfterRemoval \n        }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test error handling\n   */\n  async testErrorHandling() {\n    const testName = 'Error Handling';\n    \n    try {\n      // Test invalid data retrieval\n      const invalidResult = await persistenceManager.retrieve('non_existent_key_12345');\n      \n      this.assert(\n        invalidResult === null,\n        testName,\n        'Should handle non-existent keys gracefully',\n        { invalidResult }\n      );\n\n      // Test invalid backup restore\n      try {\n        await backupService.restoreBackup('invalid_backup_id');\n        this.recordFailure(testName, 'Should have thrown error for invalid backup ID');\n      } catch (error) {\n        this.assert(\n          true,\n          testName,\n          'Should throw error for invalid backup ID',\n          { error: error.message }\n        );\n      }\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  // Helper methods\n\n  assert(condition, testName, description, data = null) {\n    const result = {\n      testName,\n      description,\n      passed: !!condition,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n\n    if (condition) {\n      console.log(`✅ ${testName}: ${description}`);\n    } else {\n      console.error(`❌ ${testName}: ${description}`, data);\n    }\n  }\n\n  recordFailure(testName, error) {\n    const result = {\n      testName,\n      description: 'Test failed with error',\n      passed: false,\n      error,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.error(`❌ ${testName}: ${error}`);\n  }\n\n  recordSkip(testName, reason) {\n    const result = {\n      testName,\n      description: 'Test skipped',\n      passed: true,\n      skipped: true,\n      reason,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.log(`⏭️ ${testName}: Skipped - ${reason}`);\n  }\n\n  /**\n   * Get test results summary\n   */\n  getTestSummary() {\n    const total = this.testResults.length;\n    const passed = this.testResults.filter(r => r.passed).length;\n    const failed = this.testResults.filter(r => !r.passed).length;\n    const skipped = this.testResults.filter(r => r.skipped).length;\n\n    return {\n      total,\n      passed,\n      failed,\n      skipped,\n      successRate: total > 0 ? (passed / total) * 100 : 0,\n      results: this.testResults\n    };\n  }\n}\n\n// Export singleton instance\nexport const persistenceTestSuite = new PersistenceTestSuite();\n\n// Global test function for browser console\nwindow.testPersistence = () => persistenceTestSuite.runAllTests();\n","/**\n * Persistence Commands\n * Commands for managing data persistence, backup, and privacy\n */\n\nimport { persistenceManager } from '../persistence/PersistenceManager';\nimport { backupService } from '../persistence/BackupService';\nimport { privacyService } from '../persistence/PrivacyService';\nimport { syncService } from '../persistence/SyncService';\nimport { persistenceTestSuite } from '../persistence/PersistenceTestSuite';\nimport { formatNumber, formatPercentage } from '../../utils/dataTransformation';\n\nexport const persistenceCommands = {\n  BACKUP_CREATE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [description] = parsedCommand.parameters;\n      \n      try {\n        const backup = await backupService.createBackup({\n          description: description || 'Manual backup',\n          includeSettings: true,\n          includeWatchlists: true,\n          includeAlerts: true,\n          includeHistory: true,\n          compress: true,\n          encrypt: false\n        });\n\n        const content = `💾 Backup Created Successfully\\n\\n📋 BACKUP DETAILS:\\n• Backup ID: ${backup.backupId}\\n• Size: ${formatNumber(backup.size / 1024, 1)} KB\\n• Original Size: ${formatNumber(backup.originalSize / 1024, 1)} KB\\n• Compression Ratio: ${formatPercentage(backup.metadata.compressionRatio || 0)}\\n• Timestamp: ${backup.timestamp}\\n• Description: ${description || 'Manual backup'}\\n\\n💡 BACKUP INCLUDES:\\n• User preferences and settings\\n• Watchlists and alerts\\n• Command and analysis history\\n• All user variables\\n\\n🔧 MANAGEMENT:\\n• Use BACKUP_LIST() to view all backups\\n• Use BACKUP_RESTORE(id) to restore from backup\\n• Use BACKUP_EXPORT(id) to download backup file\\n\\n✅ Your data is now safely backed up and can be restored at any time.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_create',\n            backup\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  },\n\n  BACKUP_LIST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const backups = await backupService.listBackups();\n        const stats = await backupService.getBackupStats();\n\n        if (backups.length === 0) {\n          return {\n            type: 'info',\n            content: `📁 No Backups Found\\n\\nYou haven't created any backups yet.\\n\\n💡 CREATE YOUR FIRST BACKUP:\\n• Use BACKUP_CREATE() to create a backup\\n• Use BACKUP_CREATE(\"description\") to add a description\\n\\nBackups help protect your data and allow you to restore previous states.`\n          };\n        }\n\n        const content = `📁 Backup List (${backups.length} backups)\\n\\n📊 BACKUP STATISTICS:\\n• Total Backups: ${stats.totalBackups}\\n• Total Size: ${formatNumber(stats.totalSize / 1024, 1)} KB\\n• Oldest: ${stats.oldestBackup ? new Date(stats.oldestBackup).toLocaleDateString() : 'N/A'}\\n• Newest: ${stats.newestBackup ? new Date(stats.newestBackup).toLocaleDateString() : 'N/A'}\\n• Encrypted: ${stats.encryptedBackups}\\n• Compressed: ${stats.compressedBackups}\\n\\n📋 AVAILABLE BACKUPS:\\n${backups.slice(0, 10).map((backup, index) => {\n          const date = new Date(backup.timestamp).toLocaleString();\n          const size = formatNumber(backup.size / 1024, 1);\n          const features = [];\n          if (backup.compressed) features.push('📦 Compressed');\n          if (backup.encrypted) features.push('🔒 Encrypted');\n          \n          return `${index + 1}. ${backup.id}\\n   📅 ${date}\\n   📏 ${size} KB\\n   📝 ${backup.description || 'No description'}\\n   ${features.join(' ')}`;\n        }).join('\\n\\n')}\\n\\n🔧 BACKUP COMMANDS:\\n• BACKUP_RESTORE(id) - Restore from backup\\n• BACKUP_EXPORT(id) - Export backup to file\\n• BACKUP_DELETE(id) - Delete backup\\n• BACKUP_CREATE() - Create new backup\\n\\n💡 TIP: Use the backup ID (not the number) for restore operations.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_list',\n            backups,\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to list backups: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  BACKUP_RESTORE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [backupId, overwrite = 'false'] = parsedCommand.parameters;\n      \n      if (!backupId) {\n        return {\n          type: 'error',\n          content: 'BACKUP_RESTORE requires a backup ID. Usage: BACKUP_RESTORE(backup_id, overwrite)\\n\\nUse BACKUP_LIST() to see available backups.'\n        };\n      }\n\n      try {\n        const shouldOverwrite = overwrite.toLowerCase() === 'true';\n        \n        const result = await backupService.restoreBackup(backupId, {\n          overwrite: shouldOverwrite,\n          createBackupBeforeRestore: true\n        });\n\n        const content = `🔄 Backup Restored Successfully\\n\\n📋 RESTORE DETAILS:\\n• Backup ID: ${result.backupId}\\n• Backup Date: ${new Date(result.backupTimestamp).toLocaleString()}\\n• Restore Date: ${new Date(result.restoreTimestamp).toLocaleString()}\\n• Overwrite Mode: ${shouldOverwrite ? 'Enabled' : 'Disabled'}\\n\\n📊 RESTORE RESULTS:\\n• Items Restored: ${result.results.restored}\\n• Items Skipped: ${result.results.skipped}\\n• Errors: ${result.results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(result.results.details).map(([item, status]) => \n          `• ${item}: ${status}`\n        ).join('\\n')}\\n\\n⚠️ IMPORTANT:\\n• A backup was created before restore\\n• Refresh the page to see all changes\\n• Some settings may require restart to take effect\\n\\n✅ Your data has been restored from the selected backup.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_restore',\n            result\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup restore failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  },\n\n  STORAGE_STATS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const stats = await persistenceManager.getStorageStats();\n        \n        if (!stats) {\n          return {\n            type: 'error',\n            content: 'Unable to retrieve storage statistics. Persistence layer may not be initialized.'\n          };\n        }\n\n        const totalUsedMB = stats.total.used / (1024 * 1024);\n        const totalAvailableMB = stats.total.available / (1024 * 1024);\n        const quotaMB = stats.total.quota / (1024 * 1024);\n\n        const content = `💾 Storage Statistics\\n\\n📊 OVERALL USAGE:\\n• Total Used: ${formatNumber(totalUsedMB, 2)} MB\\n• Total Available: ${formatNumber(totalAvailableMB, 2)} MB\\n• Storage Quota: ${formatNumber(quotaMB, 2)} MB\\n• Usage Percentage: ${formatPercentage(stats.total.usagePercentage / 100)}\\n\\n📱 LOCAL STORAGE:\\n• Used: ${formatNumber(stats.localStorage.used / 1024, 1)} KB\\n• Items: ${stats.localStorage.keys}\\n• Usage: ${formatPercentage(stats.localStorage.usagePercentage / 100)}\\n• Status: ${stats.localStorage.available ? '✅ Available' : '❌ Unavailable'}\\n\\n🗄️ INDEXED DB:\\n• Used: ${formatNumber(stats.indexedDB.used / 1024, 1)} KB\\n• Records: ${stats.indexedDB.total.records}\\n• Stores: ${Object.keys(stats.indexedDB.stores).length}\\n• Status: ${stats.indexedDB.available ? '✅ Available' : '❌ Unavailable'}\\n\\n📋 STORE BREAKDOWN:\\n${Object.entries(stats.indexedDB.stores).map(([store, data]) => \n          `• ${store}: ${data.records} records (${formatNumber(data.size / 1024, 1)} KB)`\n        ).join('\\n')}\\n\\n⚠️ STORAGE HEALTH:\\n${stats.total.usagePercentage > 90 ? '🔴 Critical: Storage almost full' : stats.total.usagePercentage > 75 ? '🟡 Warning: High storage usage' : '🟢 Good: Storage usage is healthy'}\\n\\n💡 OPTIMIZATION TIPS:\\n${stats.total.usagePercentage > 75 ? '• Consider clearing old cached data\\n• Delete unnecessary backups\\n• Use PRIVACY_CLEANUP() to remove expired data\\n' : ''}• Regular backups help manage storage\\n• Use compression for large datasets\\n• Monitor usage with this command\\n\\n🔧 MANAGEMENT COMMANDS:\\n• PRIVACY_CLEANUP() - Clean expired data\\n• BACKUP_LIST() - Manage backups\\n• cache clear - Clear cached data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'storage_stats',\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get storage statistics: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_CLEANUP: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const results = await privacyService.cleanupExpiredData();\n        \n        const content = `🧹 Privacy Cleanup Complete\\n\\n📊 CLEANUP RESULTS:\\n• Items Cleaned: ${results.cleaned}\\n• Errors: ${results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(results.details).map(([dataType, result]) => \n          `• ${dataType}: ${typeof result === 'number' ? `${result} items cleaned` : result}`\n        ).join('\\n')}\\n\\n🔒 PRIVACY COMPLIANCE:\\n• Expired data removed according to retention policies\\n• User privacy preferences respected\\n• Data minimization principles applied\\n\\n⚙️ CURRENT RETENTION POLICIES:\\n${Object.entries(privacyService.getRetentionPolicies()).map(([type, days]) => \n          `• ${type}: ${days} days`\n        ).join('\\n')}\\n\\n💡 PRIVACY COMMANDS:\\n• PRIVACY_SETTINGS() - View/update privacy settings\\n• PRIVACY_EXPORT() - Export your data (GDPR)\\n• PRIVACY_DELETE() - Delete all data (Right to be forgotten)\\n\\n✅ Your data has been cleaned according to privacy policies.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'privacy_cleanup',\n            results\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Privacy cleanup failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_SETTINGS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n      \n      try {\n        if (!setting) {\n          // Show current settings\n          const settings = privacyService.getPrivacySettings();\n          const policies = privacyService.getRetentionPolicies();\n          \n          const content = `🔒 Privacy Settings\\n\\n⚙️ CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) => \n            `• ${key}: ${val ? '✅ Enabled' : '❌ Disabled'}`\n          ).join('\\n')}\\n\\n📅 RETENTION POLICIES:\\n${Object.entries(policies).map(([type, days]) => \n            `• ${type}: ${days} days`\n          ).join('\\n')}\\n\\n🛡️ PRIVACY CONTROLS:\\n• dataRetention: Keep historical data\\n• analytics: Allow usage analytics\\n• crashReporting: Send crash reports\\n• dataSharing: Share data with partners\\n• cookieConsent: Accept cookies\\n• trackingConsent: Allow tracking\\n\\n💡 USAGE:\\n• PRIVACY_SETTINGS() - Show all settings\\n• PRIVACY_SETTINGS(\"setting\", \"true/false\") - Update setting\\n• PRIVACY_CLEANUP() - Clean expired data\\n\\nExample: PRIVACY_SETTINGS(\"analytics\", \"false\")`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'privacy_settings_view',\n              settings,\n              policies\n            }\n          };\n        }\n\n        if (value === undefined) {\n          const currentValue = privacyService.getPrivacySettings()[setting];\n          return {\n            type: 'info',\n            content: `🔒 Privacy Setting: ${setting}\\nCurrent Value: ${currentValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nTo update: PRIVACY_SETTINGS(\"${setting}\", \"true/false\")`\n          };\n        }\n\n        // Update setting\n        const boolValue = value.toLowerCase() === 'true';\n        await privacyService.updatePrivacySettings({ [setting]: boolValue });\n\n        return {\n          type: 'success',\n          content: `✅ Privacy Setting Updated\\n\\n• Setting: ${setting}\\n• New Value: ${boolValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nSetting has been saved and will take effect immediately.`,\n          data: {\n            analysis: 'privacy_settings_update',\n            setting,\n            value: boolValue\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to manage privacy settings: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  },\n\n  SYNC_STATUS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const status = syncService.getSyncStatus();\n        \n        const content = `🔄 Sync Status\\n\\n📊 SYNC OVERVIEW:\\n• Last Sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}\\n• Sync In Progress: ${status.syncInProgress ? '🟡 Yes' : '🟢 No'}\\n• Queue Size: ${status.queueSize} operations\\n• Online Status: ${status.isOnline ? '🟢 Online' : '🔴 Offline'}\\n• Endpoint Configured: ${status.hasEndpoint ? '✅ Yes' : '❌ No'}\\n• Strategy: ${status.strategy}\\n\\n🔧 SYNC CONFIGURATION:\\n${!status.hasEndpoint ? '⚠️ No sync endpoint configured - sync is disabled\\n' : ''}${status.queueSize > 0 ? `📋 ${status.queueSize} operations waiting to sync\\n` : ''}${!status.isOnline ? '📡 Device is offline - sync will resume when online\\n' : ''}\\n\\n💡 SYNC COMMANDS:\\n• SYNC_NOW() - Force immediate sync (when available)\\n• SYNC_QUEUE() - View pending operations\\n• BACKUP_CREATE() - Create local backup\\n\\n${!status.hasEndpoint ? '🚀 FUTURE FEATURE:\\nCloud sync will be available in a future update.\\nFor now, use BACKUP_CREATE() and BACKUP_EXPORT() for data portability.' : '✅ Sync is configured and ready.'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'sync_status',\n            status\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get sync status: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PERSISTENCE_TEST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const testResults = await persistenceTestSuite.runAllTests();\n\n        const content = `🧪 Persistence Layer Test Results\\n\\n📊 TEST SUMMARY:\\n• Total Tests: ${testResults.total}\\n• Passed: ${testResults.passed} ✅\\n• Failed: ${testResults.total - testResults.passed} ❌\\n• Success Rate: ${formatPercentage(testResults.passed / testResults.total)}\\n• Overall Status: ${testResults.success ? '✅ PASS' : '❌ FAIL'}\\n\\n📋 DETAILED RESULTS:\\n${testResults.results.map((result, index) => {\n          const status = result.passed ? '✅' : result.skipped ? '⏭️' : '❌';\n          const details = result.error ? ` (${result.error})` : result.reason ? ` (${result.reason})` : '';\n          return `${index + 1}. ${status} ${result.testName}${details}`;\n        }).join('\\n')}\\n\\n🔧 COMPONENT STATUS:\\n• PersistenceManager: ${testResults.results.find(r => r.testName.includes('Persistence Manager'))?.passed ? '✅ Working' : '❌ Issues'}\\n• BackupService: ${testResults.results.find(r => r.testName.includes('Backup'))?.passed ? '✅ Working' : '❌ Issues'}\\n• PrivacyService: ${testResults.results.find(r => r.testName.includes('Privacy'))?.passed ? '✅ Working' : '❌ Issues'}\\n• SyncService: ${testResults.results.find(r => r.testName.includes('Sync'))?.passed ? '✅ Working' : '❌ Issues'}\\n\\n💡 RECOMMENDATIONS:\\n${testResults.success ? '• All tests passed - persistence layer is working correctly\\n• Regular testing recommended to ensure continued functionality' : '• Some tests failed - check browser console for detailed error messages\\n• Consider running individual component tests\\n• Verify browser storage permissions and quotas'}\\n\\n🔍 DEBUGGING:\\n• Check browser console for detailed test output\\n• Use browser DevTools to inspect localStorage and IndexedDB\\n• Run \"STORAGE_STATS()\" to check storage usage\\n\\n${testResults.success ? '✅ Persistence layer is fully functional and ready for production use!' : '⚠️ Issues detected - please review failed tests and resolve before production use.'}`;\n\n        return {\n          type: testResults.success ? 'success' : 'warning',\n          content,\n          data: {\n            analysis: 'persistence_test',\n            testResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Persistence test suite failed: ${error.message}\\n\\nCheck browser console for detailed error information.`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  }\n};\n","/**\n * Private Analysis Commands\n * CLI integration for the Private Analysis financial modeling features\n */\n\nimport defaultFinancialData from '../../data/defaultFinancialData.js';\nimport { \n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation.js';\n\nexport const privateAnalysisCommands = {\n  PRIVATE_DCF: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const loadingMessage = `🔄 Running DCF analysis on private company data...\\n• Loading financial statements\\n• Calculating free cash flows\\n• Computing terminal value\\n• Analyzing projections...\\n✅ Using private financial data`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate key metrics from the financial data\n        const revenues = [];\n        const operatingIncomes = [];\n        const margins = [];\n\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          \n          revenues.push(revenue);\n          operatingIncomes.push(operatingIncome);\n          margins.push(revenue ? (operatingIncome / revenue) * 100 : 0);\n        });\n\n        // DCF assumptions (these could be parameterized)\n        const assumptions = {\n          discountRate: 12.0,\n          terminalGrowthRate: 2.5,\n          projectionYears: 5,\n          taxRate: 25.0\n        };\n\n        // Simple DCF calculation\n        const latestRevenue = revenues[revenues.length - 1];\n        const latestOperatingIncome = operatingIncomes[operatingIncomes.length - 1];\n        const revenueGrowthRate = revenues.length > 1 ? \n          ((revenues[revenues.length - 1] / revenues[revenues.length - 2]) - 1) * 100 : 15;\n\n        // Project future cash flows\n        const projections = [];\n        let projectedRevenue = latestRevenue;\n        \n        for (let i = 1; i <= assumptions.projectionYears; i++) {\n          projectedRevenue *= (1 + revenueGrowthRate / 100);\n          const projectedOperatingIncome = projectedRevenue * (margins[margins.length - 1] / 100);\n          const projectedFCF = projectedOperatingIncome * (1 - assumptions.taxRate / 100);\n          \n          projections.push({\n            year: i,\n            revenue: projectedRevenue,\n            operatingIncome: projectedOperatingIncome,\n            fcf: projectedFCF,\n            presentValue: projectedFCF / Math.pow(1 + assumptions.discountRate / 100, i)\n          });\n        }\n\n        const totalPresentValue = projections.reduce((sum, proj) => sum + proj.presentValue, 0);\n        const terminalValue = (projections[projections.length - 1].fcf * (1 + assumptions.terminalGrowthRate / 100)) \n          / ((assumptions.discountRate - assumptions.terminalGrowthRate) / 100);\n        const terminalPresentValue = terminalValue / Math.pow(1 + assumptions.discountRate / 100, assumptions.projectionYears);\n        const enterpriseValue = totalPresentValue + terminalPresentValue;\n\n        const content = `Private Company DCF Valuation Analysis\\n\\n📊 HISTORICAL PERFORMANCE:\\n${periods.map((period, i) => `• ${period}: Revenue ${formatCurrency(revenues[i], 'USD', true)}, Operating Income ${formatCurrency(operatingIncomes[i], 'USD', true)} (${formatPercentage(margins[i] / 100)})`).join('\\n')}\\n\\n💰 DCF VALUATION RESULTS:\\n• Enterprise Value: ${formatCurrency(enterpriseValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(terminalValue, 'USD', true)} (${formatPercentage(terminalPresentValue / enterpriseValue)})\\n• PV of Projections: ${formatCurrency(totalPresentValue, 'USD', true)} (${formatPercentage(totalPresentValue / enterpriseValue)})\\n\\n📈 KEY ASSUMPTIONS:\\n• Discount Rate: ${formatPercentage(assumptions.discountRate / 100)}\\n• Terminal Growth: ${formatPercentage(assumptions.terminalGrowthRate / 100)}\\n• Revenue Growth: ${formatPercentage(revenueGrowthRate / 100)}\\n• Tax Rate: ${formatPercentage(assumptions.taxRate / 100)}\\n\\n🎯 5-YEAR PROJECTIONS:\\n${projections.map(proj => `Year ${proj.year}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}, PV ${formatCurrency(proj.presentValue, 'USD', true)}`).join('\\n')}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dcf',\n            enterpriseValue,\n            terminalValue,\n            projections,\n            assumptions\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  },\n\n  PRIVATE_RATIOS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate financial ratios\n        const ratios = [];\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const totalCOGS = statements.totalCostOfGoodsSold?.[index] || 0;\n          const grossProfit = statements.grossProfit?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const netIncome = statements.netIncome?.[index] || 0;\n\n          ratios.push({\n            period,\n            grossMargin: revenue ? (grossProfit / revenue) * 100 : 0,\n            operatingMargin: revenue ? (operatingIncome / revenue) * 100 : 0,\n            netMargin: revenue ? (netIncome / revenue) * 100 : 0,\n            cogsPercentage: revenue ? (totalCOGS / revenue) * 100 : 0\n          });\n        });\n\n        // Calculate growth rates\n        const growthRates = [];\n        for (let i = 1; i < periods.length; i++) {\n          const currentRevenue = statements.totalRevenue?.[i] || 0;\n          const previousRevenue = statements.totalRevenue?.[i-1] || 0;\n          const currentOperating = statements.operatingIncome?.[i] || 0;\n          const previousOperating = statements.operatingIncome?.[i-1] || 0;\n\n          growthRates.push({\n            period: periods[i],\n            revenueGrowth: previousRevenue ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0,\n            operatingGrowth: previousOperating && Math.abs(previousOperating) > 0.01 ? \n              ((currentOperating - previousOperating) / Math.abs(previousOperating)) * 100 : 0\n          });\n        }\n\n        const content = `Private Company Financial Ratios Analysis\\n\\n📊 PROFITABILITY RATIOS:\\n${ratios.map(ratio => `• ${ratio.period}:\\n  - Gross Margin: ${formatPercentage(ratio.grossMargin / 100)}\\n  - Operating Margin: ${formatPercentage(ratio.operatingMargin / 100)}\\n  - Net Margin: ${formatPercentage(ratio.netMargin / 100)}\\n  - COGS %: ${formatPercentage(ratio.cogsPercentage / 100)}`).join('\\n\\n')}\\n\\n📈 GROWTH ANALYSIS:\\n${growthRates.map(growth => `• ${growth.period}:\\n  - Revenue Growth: ${formatPercentage(growth.revenueGrowth / 100)}\\n  - Operating Growth: ${formatPercentage(growth.operatingGrowth / 100)}`).join('\\n\\n')}\\n\\n🎯 KEY INSIGHTS:\\n• Latest Gross Margin: ${formatPercentage(ratios[ratios.length - 1].grossMargin / 100)}\\n• Latest Operating Margin: ${formatPercentage(ratios[ratios.length - 1].operatingMargin / 100)}\\n• Average Revenue Growth: ${formatPercentage(growthRates.reduce((sum, g) => sum + g.revenueGrowth, 0) / growthRates.length / 100)}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_ratios',\n            ratios,\n            growthRates\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private ratios analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_SUMMARY: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Get latest period data\n        const latestIndex = periods.length - 1;\n        const latest = {\n          period: periods[latestIndex],\n          revenue: statements.totalRevenue?.[latestIndex] || 0,\n          grossProfit: statements.grossProfit?.[latestIndex] || 0,\n          operatingIncome: statements.operatingIncome?.[latestIndex] || 0,\n          netIncome: statements.netIncome?.[latestIndex] || 0,\n          totalCOGS: statements.totalCostOfGoodsSold?.[latestIndex] || 0\n        };\n\n        // Calculate key metrics\n        const grossMargin = latest.revenue ? (latest.grossProfit / latest.revenue) * 100 : 0;\n        const operatingMargin = latest.revenue ? (latest.operatingIncome / latest.revenue) * 100 : 0;\n        const netMargin = latest.revenue ? (latest.netIncome / latest.revenue) * 100 : 0;\n\n        // Revenue breakdown (top revenue streams)\n        const revenueBreakdown = [\n          { name: 'Injectables', value: statements.injectables?.[latestIndex] || 0 },\n          { name: 'Surgery', value: statements.surgery?.[latestIndex] || 0 },\n          { name: 'Wellness', value: statements.wellness?.[latestIndex] || 0 },\n          { name: 'Weightloss', value: statements.weightloss?.[latestIndex] || 0 },\n          { name: 'Retail Sales', value: statements.retailSales?.[latestIndex] || 0 },\n          { name: 'Energy Devices', value: statements.energyDevices?.[latestIndex] || 0 }\n        ].sort((a, b) => b.value - a.value);\n\n        const content = `Private Company Financial Summary (${latest.period})\\n\\n🏢 COMPANY OVERVIEW:\\n• Period: ${latest.period}\\n• Total Revenue: ${formatCurrency(latest.revenue, 'USD', true)}\\n• Operating Status: ${latest.operatingIncome >= 0 ? '✅ Profitable' : '⚠️ Operating Loss'}\\n\\n💰 FINANCIAL PERFORMANCE:\\n• Gross Profit: ${formatCurrency(latest.grossProfit, 'USD', true)} (${formatPercentage(grossMargin / 100)})\\n• Operating Income: ${formatCurrency(latest.operatingIncome, 'USD', true)} (${formatPercentage(operatingMargin / 100)})\\n• Net Income: ${formatCurrency(latest.netIncome, 'USD', true)} (${formatPercentage(netMargin / 100)})\\n• Cost of Goods Sold: ${formatCurrency(latest.totalCOGS, 'USD', true)}\\n\\n📊 REVENUE BREAKDOWN:\\n${revenueBreakdown.map((item, i) => `${i + 1}. ${item.name}: ${formatCurrency(item.value, 'USD', true)} (${formatPercentage(item.value / latest.revenue)})`).join('\\n')}\\n\\n📈 HISTORICAL TRENDS:\\n${periods.map((period, i) => `• ${period}: ${formatCurrency(statements.totalRevenue?.[i] || 0, 'USD', true)}`).join('\\n')}\\n\\n🎯 KEY METRICS:\\n• Revenue Growth (YoY): ${periods.length > 1 ? formatPercentage(((statements.totalRevenue?.[latestIndex] || 0) / (statements.totalRevenue?.[latestIndex-1] || 1) - 1)) : 'N/A'}\\n• Gross Margin Trend: ${grossMargin >= 70 ? '🟢 Strong' : grossMargin >= 50 ? '🟡 Moderate' : '🔴 Low'}\\n• Operating Efficiency: ${operatingMargin >= 15 ? '🟢 Excellent' : operatingMargin >= 5 ? '🟡 Fair' : operatingMargin >= 0 ? '🟠 Break-even' : '🔴 Loss'}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_summary',\n            latest,\n            revenueBreakdown,\n            margins: { grossMargin, operatingMargin, netMargin }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private summary analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_LOAD: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        \n        const content = `Private Financial Data Loaded Successfully\\n\\n📁 DATA OVERVIEW:\\n• Periods: ${data.periods.join(', ')}\\n• Income Statement: ✅ Loaded\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n\\n📊 AVAILABLE DATA:\\n• Revenue Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Revenue') || ['energyDevices', 'injectables', 'wellness', 'weightloss', 'retailSales', 'surgery'].includes(key)).length}\\n• Expense Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Cogs') || key.includes('Expense') || ['marketing', 'automobile', 'rent', 'insurance'].includes(key)).length}\\n• Financial Metrics: ${Object.keys(data.statements.incomeStatement).filter(key => ['grossProfit', 'operatingIncome', 'netIncome'].includes(key)).length}\\n\\n💡 AVAILABLE COMMANDS:\\n• PRIVATE_DCF() - Run DCF valuation\\n• PRIVATE_RATIOS() - Calculate financial ratios\\n• PRIVATE_SUMMARY() - Get company overview\\n• PRIVATE_SCENARIO() - Run scenario analysis\\n\\n✅ Ready for private company analysis`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_load',\n            dataStructure: {\n              periods: data.periods.length,\n              incomeStatementItems: Object.keys(data.statements.incomeStatement).length,\n              balanceSheetItems: Object.keys(data.statements.balanceSheet).length,\n              cashFlowItems: Object.keys(data.statements.cashFlow).length\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to load private data: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  }\n};\n","/**\n * Command Initializer\n * Registers all available commands with the command registry\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { coreCommands } from './commands/coreCommands';\nimport { portfolioCommands } from './commands/portfolioCommands';\nimport { valuationCommands } from './commands/valuationCommands';\nimport { technicalCommands } from './commands/technicalCommands';\nimport { esgCommands } from './commands/esgCommands';\nimport { automationCommands } from './commands/automationCommands';\nimport { dataCommands } from './commands/dataCommands';\nimport { systemCommands } from './commands/systemCommands';\nimport { persistenceCommands } from './commands/persistenceCommands';\nimport { privateAnalysisCommands } from './commands/privateAnalysisCommands';\n\n/**\n * Initialize all commands in the registry\n */\nexport function initializeCommands() {\n  // Register Core Commands\n  commandRegistry.register('DCF', coreCommands.DCF, {\n    category: 'CORE',\n    description: 'Discounted Cash Flow valuation with real-time data',\n    usage: 'DCF(ticker)',\n    examples: ['DCF(AAPL)', 'DCF(MSFT)'],\n    tags: ['valuation', 'dcf', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('LBO', coreCommands.LBO, {\n    category: 'CORE',\n    description: 'Leveraged Buyout analysis with return projections',\n    usage: 'LBO(ticker)',\n    examples: ['LBO(TSLA)', 'LBO(NVDA)'],\n    tags: ['lbo', 'private-equity', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('COMP', coreCommands.COMP, {\n    category: 'CORE',\n    description: 'Comparable company analysis with peer multiples',\n    usage: 'COMP(ticker)',\n    examples: ['COMP(GOOGL)', 'COMP(META)'],\n    tags: ['comparable', 'multiples', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('FETCH', coreCommands.FETCH, {\n    category: 'CORE',\n    description: 'Comprehensive company data and financial metrics',\n    usage: 'FETCH(ticker)',\n    examples: ['FETCH(AMZN)', 'FETCH(NFLX)'],\n    tags: ['data', 'profile', 'metrics'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Private Analysis Commands\n  commandRegistry.register('PRIVATE_DCF', privateAnalysisCommands.PRIVATE_DCF, {\n    category: 'CORE',\n    description: 'DCF valuation using private company financial data',\n    usage: 'PRIVATE_DCF()',\n    examples: ['PRIVATE_DCF()'],\n    tags: ['private', 'dcf', 'valuation', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RATIOS', privateAnalysisCommands.PRIVATE_RATIOS, {\n    category: 'CORE',\n    description: 'Financial ratios analysis for private company data',\n    usage: 'PRIVATE_RATIOS()',\n    examples: ['PRIVATE_RATIOS()'],\n    tags: ['private', 'ratios', 'analysis', 'margins'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SUMMARY', privateAnalysisCommands.PRIVATE_SUMMARY, {\n    category: 'CORE',\n    description: 'Comprehensive financial summary of private company',\n    usage: 'PRIVATE_SUMMARY()',\n    examples: ['PRIVATE_SUMMARY()'],\n    tags: ['private', 'summary', 'overview', 'financial'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LOAD', privateAnalysisCommands.PRIVATE_LOAD, {\n    category: 'DATA',\n    description: 'Load and verify private company financial data',\n    usage: 'PRIVATE_LOAD()',\n    examples: ['PRIVATE_LOAD()'],\n    tags: ['private', 'data', 'load', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Portfolio Commands\n  commandRegistry.register('PORTFOLIO', portfolioCommands.PORTFOLIO, {\n    category: 'PORTFOLIO',\n    description: 'Portfolio analysis with risk and diversification metrics',\n    usage: 'PORTFOLIO(tickers, weights)',\n    examples: ['PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])', 'PORTFOLIO([SPY,QQQ], [0.6,0.4])'],\n    tags: ['portfolio', 'diversification', 'allocation'],\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RISK_METRICS', portfolioCommands.RISK_METRICS, {\n    category: 'PORTFOLIO',\n    description: 'Comprehensive risk analysis including VaR, Sharpe ratio, and volatility',\n    usage: 'RISK_METRICS(ticker, period)',\n    examples: ['RISK_METRICS(AAPL)', 'RISK_METRICS(TSLA, 252)'],\n    tags: ['risk', 'var', 'volatility', 'sharpe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('CORRELATION_MATRIX', portfolioCommands.CORRELATION_MATRIX, {\n    category: 'PORTFOLIO',\n    description: 'Cross-asset correlation analysis for diversification insights',\n    usage: 'CORRELATION_MATRIX(tickers)',\n    examples: ['CORRELATION_MATRIX([AAPL,MSFT,GOOGL])', 'CORRELATION_MATRIX([SPY,QQQ,IWM])'],\n    tags: ['correlation', 'diversification', 'matrix'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('EFFICIENT_FRONTIER', portfolioCommands.EFFICIENT_FRONTIER, {\n    category: 'PORTFOLIO',\n    description: 'Modern portfolio theory optimization and efficient frontier analysis',\n    usage: 'EFFICIENT_FRONTIER(tickers)',\n    examples: ['EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])', 'EFFICIENT_FRONTIER([SPY,QQQ,IWM,EFA])'],\n    tags: ['optimization', 'efficient-frontier', 'mpt'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DRAWDOWN', portfolioCommands.DRAWDOWN, {\n    category: 'PORTFOLIO',\n    description: 'Maximum drawdown analysis and recovery time estimation',\n    usage: 'DRAWDOWN(ticker, period)',\n    examples: ['DRAWDOWN(AAPL)', 'DRAWDOWN(TSLA, 500)'],\n    tags: ['drawdown', 'risk', 'recovery'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  // Register Advanced Valuation Commands\n  commandRegistry.register('DDM', valuationCommands.DDM, {\n    category: 'VALUATION',\n    description: 'Dividend Discount Model with Gordon Growth and Two-Stage analysis',\n    usage: 'DDM(ticker)',\n    examples: ['DDM(KO)', 'DDM(JNJ)'],\n    tags: ['dividend', 'ddm', 'gordon-growth'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RESIDUAL_INCOME', valuationCommands.RESIDUAL_INCOME, {\n    category: 'VALUATION',\n    description: 'Residual Income Model for economic value analysis',\n    usage: 'RESIDUAL_INCOME(ticker)',\n    examples: ['RESIDUAL_INCOME(AAPL)', 'RESIDUAL_INCOME(MSFT)'],\n    tags: ['residual-income', 'economic-value', 'roe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('ASSET_BASED', valuationCommands.ASSET_BASED, {\n    category: 'VALUATION',\n    description: 'Asset-based valuation with market value adjustments',\n    usage: 'ASSET_BASED(ticker)',\n    examples: ['ASSET_BASED(BRK.A)', 'ASSET_BASED(BAC)'],\n    tags: ['asset-based', 'nav', 'liquidation'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Technical Analysis Commands\n  commandRegistry.register('TECHNICALS', technicalCommands.TECHNICALS, {\n    category: 'TECHNICAL',\n    description: 'Comprehensive technical analysis with RSI, MACD, Bollinger Bands',\n    usage: 'TECHNICALS(ticker)',\n    examples: ['TECHNICALS(AAPL)', 'TECHNICALS(SPY)'],\n    tags: ['technical', 'rsi', 'macd', 'bollinger'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SUPPORT_RESISTANCE', technicalCommands.SUPPORT_RESISTANCE, {\n    category: 'TECHNICAL',\n    description: 'Key price levels and breakout targets analysis',\n    usage: 'SUPPORT_RESISTANCE(ticker)',\n    examples: ['SUPPORT_RESISTANCE(TSLA)', 'SUPPORT_RESISTANCE(QQQ)'],\n    tags: ['support', 'resistance', 'levels', 'breakout'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register ESG & Alternative Data Commands\n  commandRegistry.register('ESG_SCORE', esgCommands.ESG_SCORE, {\n    category: 'ESG',\n    description: 'Environmental, social, governance analysis and scoring',\n    usage: 'ESG_SCORE(ticker)',\n    examples: ['ESG_SCORE(AAPL)', 'ESG_SCORE(TSLA)'],\n    tags: ['esg', 'environmental', 'social', 'governance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SOCIAL_SENTIMENT', esgCommands.SOCIAL_SENTIMENT, {\n    category: 'ESG',\n    description: 'Social media sentiment analysis across platforms',\n    usage: 'SOCIAL_SENTIMENT(ticker, days)',\n    examples: ['SOCIAL_SENTIMENT(AAPL)', 'SOCIAL_SENTIMENT(TSLA, 30)'],\n    tags: ['sentiment', 'social-media', 'twitter', 'reddit'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  commandRegistry.register('NEWS_IMPACT', esgCommands.NEWS_IMPACT, {\n    category: 'ESG',\n    description: 'News sentiment and price impact analysis',\n    usage: 'NEWS_IMPACT(ticker, days)',\n    examples: ['NEWS_IMPACT(AAPL)', 'NEWS_IMPACT(MSFT, 14)'],\n    tags: ['news', 'sentiment', 'impact', 'catalyst'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Data Management Commands\n  commandRegistry.register('EXPORT_JSON', dataCommands.EXPORT_JSON, {\n    category: 'DATA',\n    description: 'Export data to JSON format for backup and sharing',\n    usage: 'EXPORT_JSON(dataType, filename)',\n    examples: ['EXPORT_JSON(\"watchlists\")', 'EXPORT_JSON(\"all\", \"backup.json\")'],\n    tags: ['export', 'backup', 'json'],\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  });\n\n  commandRegistry.register('CACHE_STATS', dataCommands.CACHE_STATS, {\n    category: 'DATA',\n    description: 'View cache performance and memory usage statistics',\n    usage: 'CACHE_STATS()',\n    examples: ['CACHE_STATS()'],\n    tags: ['cache', 'performance', 'memory'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DATA_QUALITY', dataCommands.DATA_QUALITY, {\n    category: 'DATA',\n    description: 'Analyze data completeness and quality for a stock',\n    usage: 'DATA_QUALITY(ticker)',\n    examples: ['DATA_QUALITY(AAPL)', 'DATA_QUALITY(TSLA)'],\n    tags: ['quality', 'validation', 'completeness'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BENCHMARK', dataCommands.BENCHMARK, {\n    category: 'DATA',\n    description: 'Compare stock performance against benchmark index',\n    usage: 'BENCHMARK(ticker, benchmark)',\n    examples: ['BENCHMARK(AAPL, SPY)', 'BENCHMARK(TSLA, QQQ)'],\n    tags: ['benchmark', 'comparison', 'performance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  });\n\n  // Register System & Performance Commands\n  commandRegistry.register('PERFORMANCE_TEST', systemCommands.PERFORMANCE_TEST, {\n    category: 'SYSTEM',\n    description: 'Run comprehensive system performance benchmarks',\n    usage: 'PERFORMANCE_TEST()',\n    examples: ['PERFORMANCE_TEST()'],\n    tags: ['performance', 'benchmark', 'system'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('API_USAGE', systemCommands.API_USAGE, {\n    category: 'SYSTEM',\n    description: 'Monitor API usage, rate limits, and costs',\n    usage: 'API_USAGE()',\n    examples: ['API_USAGE()'],\n    tags: ['api', 'usage', 'limits', 'cost'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('CONFIG', systemCommands.CONFIG, {\n    category: 'SYSTEM',\n    description: 'View and update system configuration settings',\n    usage: 'CONFIG(setting, value)',\n    examples: ['CONFIG()', 'CONFIG(\"currency\", \"EUR\")', 'CONFIG(\"precision\", 3)'],\n    tags: ['config', 'settings', 'preferences'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  // Register Persistence & Privacy Commands\n  commandRegistry.register('BACKUP_CREATE', persistenceCommands.BACKUP_CREATE, {\n    category: 'PERSISTENCE',\n    description: 'Create a backup of all user data',\n    usage: 'BACKUP_CREATE(description)',\n    examples: ['BACKUP_CREATE()', 'BACKUP_CREATE(\"Before major changes\")'],\n    tags: ['backup', 'data', 'export'],\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  });\n\n  commandRegistry.register('BACKUP_LIST', persistenceCommands.BACKUP_LIST, {\n    category: 'PERSISTENCE',\n    description: 'List all available backups',\n    usage: 'BACKUP_LIST()',\n    examples: ['BACKUP_LIST()'],\n    tags: ['backup', 'list', 'management'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BACKUP_RESTORE', persistenceCommands.BACKUP_RESTORE, {\n    category: 'PERSISTENCE',\n    description: 'Restore data from a backup',\n    usage: 'BACKUP_RESTORE(backupId, overwrite)',\n    examples: ['BACKUP_RESTORE(\"backup_123\")', 'BACKUP_RESTORE(\"backup_123\", \"true\")'],\n    tags: ['backup', 'restore', 'recovery'],\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  });\n\n  commandRegistry.register('STORAGE_STATS', persistenceCommands.STORAGE_STATS, {\n    category: 'PERSISTENCE',\n    description: 'View storage usage and statistics',\n    usage: 'STORAGE_STATS()',\n    examples: ['STORAGE_STATS()'],\n    tags: ['storage', 'statistics', 'usage'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_CLEANUP', persistenceCommands.PRIVACY_CLEANUP, {\n    category: 'PERSISTENCE',\n    description: 'Clean up expired data according to privacy policies',\n    usage: 'PRIVACY_CLEANUP()',\n    examples: ['PRIVACY_CLEANUP()'],\n    tags: ['privacy', 'cleanup', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_SETTINGS', persistenceCommands.PRIVACY_SETTINGS, {\n    category: 'PERSISTENCE',\n    description: 'View and update privacy settings',\n    usage: 'PRIVACY_SETTINGS(setting, value)',\n    examples: ['PRIVACY_SETTINGS()', 'PRIVACY_SETTINGS(\"analytics\", \"false\")'],\n    tags: ['privacy', 'settings', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  commandRegistry.register('SYNC_STATUS', persistenceCommands.SYNC_STATUS, {\n    category: 'PERSISTENCE',\n    description: 'View data synchronization status',\n    usage: 'SYNC_STATUS()',\n    examples: ['SYNC_STATUS()'],\n    tags: ['sync', 'cloud', 'status'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PERSISTENCE_TEST', persistenceCommands.PERSISTENCE_TEST, {\n    category: 'PERSISTENCE',\n    description: 'Run comprehensive persistence layer tests',\n    usage: 'PERSISTENCE_TEST()',\n    examples: ['PERSISTENCE_TEST()'],\n    tags: ['test', 'debug', 'validation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Utility Commands\n  commandRegistry.register('HELP', {\n    execute: async (parsedCommand, context, processor) => {\n      const [category] = parsedCommand.parameters;\n      \n      // Show ALL commands in detail\n      if (category && category.toLowerCase() === 'all') {\n        const allCommands = commandRegistry.getAllCommands();\n        const categories = commandRegistry.getAllCategories();\n        \n        let content = `📚 COMPREHENSIVE COMMAND REFERENCE\\n`;\n        content += `FinanceAnalyst Pro Terminal v2.4.0 - Complete Command Suite\\n`;\n        content += `═════════════════════════════════════════════════════════════\\n\\n`;\n        \n        // Group commands by category\n        categories.forEach(cat => {\n          const categoryCommands = commandRegistry.getCommandsByCategory(cat.key);\n          if (categoryCommands.length > 0) {\n            content += `${cat.icon} ${cat.name.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n            content += `${cat.description}\\n`;\n            content += '─'.repeat(50) + '\\n';\n            \n            categoryCommands.forEach(cmd => {\n              content += `\\n• ${cmd.usage}\\n`;\n              content += `  ${cmd.description}\\n`;\n              if (cmd.examples && cmd.examples.length > 0) {\n                content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n              }\n              if (cmd.tags && cmd.tags.length > 0) {\n                content += `  Tags: ${cmd.tags.join(', ')}\\n`;\n              }\n            });\n            content += '\\n';\n          }\n        });\n        \n        content += `\\n📊 SUMMARY: ${allCommands.length} total commands across ${categories.length} categories\\n`;\n        content += `\\n💡 TIP: Use HELP(category) for specific category details\\n`;\n        content += `💡 TIP: Use HELP() for quick overview and featured commands`;\n        \n        return {\n          type: 'system',\n          content\n        };\n      }\n      \n      if (category) {\n        // Show commands for specific category\n        const categoryCommands = commandRegistry.getCommandsByCategory(category.toUpperCase());\n        if (categoryCommands.length === 0) {\n          return {\n            type: 'error',\n            content: `Unknown category: ${category}. Use HELP() to see all categories or HELP(ALL) for complete command list.`\n          };\n        }\n\n        let content = `📋 ${category.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n        content += '═'.repeat(40) + '\\n\\n';\n        \n        categoryCommands.forEach(cmd => {\n          content += `• ${cmd.usage}\\n`;\n          content += `  ${cmd.description}\\n`;\n          if (cmd.examples && cmd.examples.length > 0) {\n            content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n          }\n          content += '\\n';\n        });\n        \n        content += `Use HELP() for overview or HELP(ALL) for all commands.`;\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      // Show all categories and featured commands (default view)\n      const categories = commandRegistry.getAllCategories();\n      const stats = commandRegistry.getCommandStats();\n      const totalCommands = Object.values(stats).reduce((sum, cat) => sum + cat.count, 0);\n\n      const content = `🚀 FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite\\n\\n📊 COMMAND CATEGORIES:\\n${categories.map(cat => \n  `${cat.icon} ${cat.name} (${stats[cat.key]?.count || 0} commands)\\n   ${cat.description}`\n).join('\\n\\n')}\\n\\n⭐ FEATURED COMMANDS:\\n• DCF(AAPL) - Discounted Cash Flow with live data\\n• LBO(TSLA) - Leveraged Buyout analysis\\n• PORTFOLIO([AAPL,MSFT], [0.5,0.5]) - Portfolio analysis\\n• RISK_METRICS(GOOGL) - Comprehensive risk analysis\\n• CORRELATION_MATRIX([AAPL,MSFT,GOOGL]) - Cross-asset correlations\\n• PRIVATE_DCF() - Private company DCF valuation\\n• PRIVATE_RATIOS() - Private company financial ratios\\n• PRIVATE_SUMMARY() - Private company analysis summary\\n\\n🔧 PRIVATE ANALYSIS COMMANDS:\\n• PRIVATE_LOAD() - Load private company data\\n• PRIVATE_DCF() - DCF valuation for private companies\\n• PRIVATE_RATIOS() - Calculate private company ratios\\n• PRIVATE_SUMMARY() - Generate private company summary\\n\\n💡 HELP COMMANDS:\\n• HELP() - Show this overview (current)\\n• HELP(category) - Show commands for specific category\\n• HELP(ALL) - Show complete list of ALL ${totalCommands} commands\\n\\n📋 AVAILABLE CATEGORIES:\\n${categories.map(cat => `• ${cat.key}`).join(' • ')}\\n\\n🚀 ENHANCED FEATURES:\\n• Watchlists: Create and track custom stock lists\\n• Alerts: Set price and metric notifications\\n• Batch Analysis: Analyze multiple stocks simultaneously\\n• ESG Scoring: Environmental, social, governance analysis\\n• Technical Analysis: RSI, MACD, support/resistance\\n• Advanced Valuation: DDM, residual income, asset-based models\\n• Private Company Analysis: Full financial modeling suite\\n\\n📊 ${categories.length} categories • ${totalCommands} total commands available\\n\\n💡 Pro Tip: Use HELP(ALL) to see every single command with examples!`;\n\n      return {\n        type: 'system',\n        content\n      };\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['category']\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show available commands and usage information',\n    usage: 'HELP(category)',\n    examples: ['HELP()', 'HELP(PORTFOLIO)', 'HELP(CORE)', 'HELP(ALL)'],\n    tags: ['help', 'documentation', 'commands']\n  });\n\n  commandRegistry.register('CLEAR', {\n    execute: async (parsedCommand, context, processor) => {\n      return {\n        type: 'system',\n        content: 'clear_terminal', // Special flag for terminal to clear\n        action: 'clear'\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Clear the terminal screen',\n    usage: 'CLEAR()',\n    examples: ['CLEAR()'],\n    tags: ['utility', 'clear', 'terminal']\n  });\n\n  commandRegistry.register('STATUS', {\n    execute: async (parsedCommand, context, processor) => {\n      const settings = processor.getAllSettings();\n      const variables = processor.getAllVariables();\n      const history = processor.getHistory(5);\n\n      const content = `System Status Report\n\n🔧 SYSTEM CONFIGURATION:\n• Currency: ${settings.currency}\n• Precision: ${settings.precision} decimal places\n• Date Format: ${settings.dateFormat}\n• Demo Mode: ${context.demoMode ? 'Enabled' : 'Disabled'}\n\n📊 SESSION STATISTICS:\n• Commands Executed: ${history.length}\n• Variables Stored: ${Object.keys(variables).length}\n• Last Command: ${history[history.length - 1]?.input || 'None'}\n\n🌐 API STATUS:\n• Data Sources: ${context.demoMode ? 'Demo Data' : 'Live Market Data'}\n• Rate Limits: Normal\n• Cache Status: Active\n\n💾 MEMORY USAGE:\n• Command History: ${history.length} entries\n• Variable Storage: ${Object.keys(variables).length} variables\n• Cache Size: Optimal\n\n✅ All systems operational`;\n\n      return {\n        type: 'system',\n        content\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show system status and configuration',\n    usage: 'STATUS()',\n    examples: ['STATUS()'],\n    tags: ['status', 'system', 'configuration']\n  });\n\n  console.log('✅ Command registry initialized with', commandRegistry.getAllCommands().length, 'commands');\n}\n\n// Auto-initialize when module is imported\ninitializeCommands();\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport { dataFetchingService } from '../../../services/dataFetching';\nimport {\n  calculateDCFValuation,\n  calculateLBOReturns,\n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../../utils/dataTransformation';\nimport { CommandProcessor } from '../../../services/commandProcessor';\nimport { commandRegistry } from '../../../services/commandRegistry';\nimport { persistenceManager } from '../../../services/persistence/PersistenceManager';\n// Import command initializer to ensure commands are registered\nimport '../../../services/commandInitializer';\n\nconst TerminalInterface = ({ onCommandExecute, calculationResults }) => {\n  const [commands, setCommands] = useState([\n    {\n      id: 1,\n      type: 'system',\n      content: 'FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite Ready',\n      timestamp: new Date()\n    },\n    {\n      id: 2,\n      type: 'system',\n      content:\n        'Type \"HELP()\" for available commands or start with DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5])',\n      timestamp: new Date()\n    }\n  ]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestion, setSelectedSuggestion] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const terminalRef = useRef(null);\n  const inputRef = useRef(null);\n  const commandProcessor = useRef(new CommandProcessor());\n\n  // Get available commands from registry for suggestions\n  const getAvailableCommands = () => {\n    const allCommands = commandRegistry.getAllCommands();\n    const commandInfos = allCommands.map(cmdName => {\n      const info = commandRegistry.getCommandInfo(cmdName);\n      return info ? info.usage : cmdName;\n    });\n    return commandInfos;\n  };\n\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [commands]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Initialize persistence layer\n    const initializePersistence = async () => {\n      try {\n        await persistenceManager.initialize();\n        console.log('✅ Persistence layer initialized in terminal');\n      } catch (error) {\n        console.error('❌ Failed to initialize persistence in terminal:', error);\n      }\n    };\n\n    initializePersistence();\n  }, []);\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setCurrentInput(value);\n\n    if (value.length > 0) {\n      const availableCommands = getAvailableCommands();\n      const suggestions = commandRegistry.getSuggestions(value);\n      const commandSuggestions = suggestions.map(s => s.usage);\n      \n      // Also include partial matches from available commands\n      const partialMatches = availableCommands.filter(cmd =>\n        cmd.toLowerCase().includes(value.toLowerCase()) && \n        !commandSuggestions.includes(cmd)\n      );\n      \n      const allSuggestions = [...commandSuggestions, ...partialMatches];\n      setSuggestions(allSuggestions.slice(0, 8));\n      setShowSuggestions(allSuggestions.length > 0);\n      setSelectedSuggestion(0);\n    } else {\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      executeCommand();\n    } else if (e.key === 'ArrowUp' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.max(0, prev - 1));\n    } else if (e.key === 'ArrowDown' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.min(suggestions.length - 1, prev + 1));\n    } else if (e.key === 'Tab' && showSuggestions) {\n      e.preventDefault();\n      setCurrentInput(suggestions[selectedSuggestion]);\n      setShowSuggestions(false);\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  const executeCommand = async() => {\n    if (!currentInput.trim()) return;\n\n    const newCommand = {\n      id: commands.length + 1,\n      type: 'user',\n      content: currentInput,\n      timestamp: new Date()\n    };\n\n    setCommands(prev => [...prev, newCommand]);\n    setIsLoading(true);\n    setCurrentInput('');\n    setShowSuggestions(false);\n\n    try {\n      // Use the new command processor\n      const context = {\n        demoMode: dataFetchingService.demoMode,\n        showLoading: (message) => {\n          const loadingCommand = {\n            id: commands.length + 2,\n            type: 'info',\n            content: message,\n            timestamp: new Date()\n          };\n          setCommands(prev => [...prev, loadingCommand]);\n        }\n      };\n\n      const response = await commandProcessor.current.processCommand(currentInput, context);\n\n      // Handle special actions\n      if (response.action === 'clear') {\n        setCommands([\n          {\n            id: 1,\n            type: 'system',\n            content: 'Terminal cleared',\n            timestamp: new Date()\n          }\n        ]);\n        return;\n      }\n\n      const responseCommand = {\n        id: commands.length + 2,\n        type: response.type,\n        content: response.content,\n        timestamp: new Date(),\n        data: response.data\n      };\n\n      setCommands(prev => [...prev, responseCommand]);\n\n      if (onCommandExecute) {\n        onCommandExecute(currentInput, response);\n      }\n    } catch (error) {\n      const errorCommand = {\n        id: commands.length + 2,\n        type: 'error',\n        content: `Error: ${error.message}`,\n        timestamp: new Date()\n      };\n      setCommands(prev => [...prev, errorCommand]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectSuggestion = suggestion => {\n    setCurrentInput(suggestion);\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900 text-green-400 font-mono text-sm\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Terminal\" size={16} className=\"text-green-400\" />\n          <span className=\"text-green-400 font-medium\">Financial Terminal</span>\n          <span className=\"text-xs text-blue-400\">• Enhanced Command Suite</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div\n            className={`w-2 h-2 rounded-full ${isLoading ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`}\n          />\n          <span className=\"text-xs text-gray-400\">{isLoading ? 'Processing...' : 'Connected'}</span>\n        </div>\n      </div>\n\n      {/* Terminal Content */}\n      <div\n        ref={terminalRef}\n        className=\"flex-1 overflow-y-auto p-4 space-y-2\"\n        onClick={() => inputRef.current?.focus()}\n      >\n        {commands.map(command => (\n          <div key={command.id} className=\"space-y-1\">\n            <div className=\"flex items-start space-x-2\">\n              {command.type === 'user' && (\n                <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n              )}\n              {command.type === 'system' && (\n                <Icon name=\"Info\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'success' && (\n                <Icon name=\"CheckCircle\" size={14} className=\"text-green-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'error' && (\n                <Icon name=\"XCircle\" size={14} className=\"text-red-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'warning' && (\n                <Icon name=\"AlertTriangle\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'info' && (\n                <Icon name=\"Info\" size={14} className=\"text-blue-400 mt-0.5 shrink-0\" />\n              )}\n              <div className=\"flex-1\">\n                <pre className=\"whitespace-pre-wrap break-words\">{command.content}</pre>\n                {command.data && (\n                  <div className=\"mt-2 p-2 bg-gray-800 rounded border border-gray-700\">\n                    <div className=\"text-xs text-gray-400\">\n                      Real-time calculation data available • Analysis:{' '}\n                      {command.data.analysis || 'financial'}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-center space-x-2 text-yellow-400\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full\" />\n            <span>Processing command...</span>\n          </div>\n        )}\n\n        {/* Input Line */}\n        <div className=\"flex items-center space-x-2 relative\">\n          <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n          <div className=\"flex-1 relative\">\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={currentInput}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"w-full bg-transparent text-green-400 outline-none border-none\"\n              placeholder=\"Enter command (e.g., DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5]))...\"\n              autoComplete=\"off\"\n              disabled={isLoading}\n            />\n\n            {/* Suggestions Dropdown */}\n            {showSuggestions && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-600 rounded-md shadow-lg z-10 max-h-48 overflow-y-auto\">\n                {suggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className={`px-3 py-2 cursor-pointer text-sm ${\n                      index === selectedSuggestion\n                        ? 'bg-gray-700 text-green-400'\n                        : 'text-gray-300 hover:bg-gray-700'\n                    }`}\n                    onClick={() => selectSuggestion(suggestion)}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerminalInterface;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst VariableInputs = ({ onVariableChange, onBulkEdit }) => {\n  const [activeSection, setActiveSection] = useState('assumptions');\n  const [editMode, setEditMode] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const [variables, setVariables] = useState({\n    assumptions: {\n      revenue_growth: {\n        value: 0.052,\n        unit: '%',\n        description: 'Annual revenue growth rate',\n        category: 'Growth'\n      },\n      ebitda_margin: {\n        value: 0.235,\n        unit: '%',\n        description: 'EBITDA as % of revenue',\n        category: 'Profitability'\n      },\n      tax_rate: { value: 0.25, unit: '%', description: 'Corporate tax rate', category: 'Tax' },\n      capex_revenue: {\n        value: 0.035,\n        unit: '%',\n        description: 'CapEx as % of revenue',\n        category: 'Investment'\n      },\n      working_capital_revenue: {\n        value: 0.02,\n        unit: '%',\n        description: 'Working capital as % of revenue',\n        category: 'Working Capital'\n      },\n      terminal_growth: {\n        value: 0.025,\n        unit: '%',\n        description: 'Long-term growth rate',\n        category: 'Terminal'\n      }\n    },\n    cost_of_capital: {\n      risk_free_rate: {\n        value: 0.032,\n        unit: '%',\n        description: 'Risk-free rate (10Y Treasury)',\n        category: 'Market'\n      },\n      market_premium: {\n        value: 0.065,\n        unit: '%',\n        description: 'Equity risk premium',\n        category: 'Market'\n      },\n      beta: { value: 1.15, unit: 'x', description: 'Asset beta coefficient', category: 'Risk' },\n      cost_of_debt: {\n        value: 0.045,\n        unit: '%',\n        description: 'Pre-tax cost of debt',\n        category: 'Debt'\n      },\n      debt_equity_ratio: {\n        value: 0.4,\n        unit: 'x',\n        description: 'Target debt-to-equity ratio',\n        category: 'Capital Structure'\n      }\n    },\n    market_data: {\n      current_share_price: {\n        value: 125.5,\n        unit: '$',\n        description: 'Current trading price',\n        category: 'Market'\n      },\n      shares_outstanding: {\n        value: 20.0,\n        unit: 'M',\n        description: 'Shares outstanding',\n        category: 'Equity'\n      },\n      market_cap: {\n        value: 2510,\n        unit: '$M',\n        description: 'Current market capitalization',\n        category: 'Valuation'\n      },\n      enterprise_value: {\n        value: 2810,\n        unit: '$M',\n        description: 'Current enterprise value',\n        category: 'Valuation'\n      },\n      net_debt: { value: 300, unit: '$M', description: 'Net debt position', category: 'Debt' }\n    }\n  });\n\n  const sections = [\n    { id: 'assumptions', label: 'Key Assumptions', icon: 'Settings' },\n    { id: 'cost_of_capital', label: 'Cost of Capital', icon: 'Percent' },\n    { id: 'market_data', label: 'Market Data', icon: 'TrendingUp' }\n  ];\n\n  const handleVariableChange = (section, key, newValue) => {\n    const updatedVariables = {\n      ...variables,\n      [section]: {\n        ...variables[section],\n        [key]: {\n          ...variables[section][key],\n          value: parseFloat(newValue) || 0\n        }\n      }\n    };\n    setVariables(updatedVariables);\n\n    if (onVariableChange) {\n      onVariableChange(section, key, newValue);\n    }\n  };\n\n  const formatValue = (value, unit) => {\n    if (unit === '%') {\n      return (value * 100).toFixed(1);\n    } else if (unit === '$' || unit === '$M') {\n      return value.toFixed(2);\n    } else {\n      return value.toFixed(3);\n    }\n  };\n\n  const getVariablesByCategory = sectionData => {\n    const categories = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      const category = variable.category || 'Other';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push({ key, ...variable });\n    });\n    return categories;\n  };\n\n  const filteredVariables = sectionData => {\n    if (!searchTerm) return sectionData;\n\n    const filtered = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      if (\n        key.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        variable.description.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        filtered[key] = variable;\n      }\n    });\n    return filtered;\n  };\n\n  const resetToDefaults = () => {\n    // Reset to default values\n    const defaultVariables = { ...variables };\n    // This would typically reset to saved defaults\n    setVariables(defaultVariables);\n  };\n\n  const exportVariables = () => {\n    const exportData = JSON.stringify(variables, null, 2);\n    const blob = new Blob([exportData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'model_variables.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Sliders\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Variable Inputs</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName={editMode ? 'Check' : 'Edit'}\n            onClick={() => setEditMode(!editMode)}\n          >\n            {editMode ? 'Done' : 'Edit'}\n          </Button>\n          <Button\n            variant=\"outline\" size=\"sm\" iconName=\"Download\"\n            onClick={exportVariables}\n          >\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search variables...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Section Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {sections.map(section => (\n          <button\n            key={section.id}\n            onClick={() => setActiveSection(section.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeSection === section.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={section.icon} size={16} />\n            <span>{section.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Variables Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {Object.entries(getVariablesByCategory(filteredVariables(variables[activeSection]))).map(\n          ([category, categoryVariables]) => (\n            <div key={category} className=\"mb-6\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n                <Icon name=\"Folder\" size={16} />\n                <span>{category}</span>\n              </h4>\n              <div className=\"space-y-3\">\n                {categoryVariables.map(variable => (\n                  <div\n                    key={variable.key}\n                    className=\"p-3 bg-background border border-border rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <label className=\"text-sm font-medium text-foreground capitalize\">\n                          {variable.key.replace(/_/g, ' ')}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">{variable.description}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        {editMode ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <input\n                              type=\"number\"\n                              value={formatValue(variable.value, variable.unit)}\n                              onChange={e =>\n                                handleVariableChange(activeSection, variable.key, e.target.value)\n                              }\n                              step={variable.unit === '%' ? '0.1' : '0.01'}\n                              className=\"w-20 px-2 py-1 text-sm bg-input border border-border rounded text-foreground focus:outline-none focus:ring-1 focus:ring-ring\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">{variable.unit}</span>\n                          </div>\n                        ) : (\n                          <div className=\"text-right\">\n                            <span className=\"text-lg font-semibold text-foreground\">\n                              {formatValue(variable.value, variable.unit)}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground ml-1\">\n                              {variable.unit}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Variable Impact Indicator */}\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-success rounded-full\" />\n                        <span className=\"text-muted-foreground\">Within range</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Icon name=\"TrendingUp\" size={12} />\n                        <span>High impact</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )\n        )}\n\n        {Object.keys(filteredVariables(variables[activeSection])).length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"Search\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No variables found</h4>\n            <p className=\"text-muted-foreground\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n      {/* Footer Actions */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n            <Icon name=\"Info\" size={12} />\n            <span>Changes auto-save every 30 seconds</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\" size=\"sm\" iconName=\"RotateCcw\"\n              onClick={resetToDefaults}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Grid\"\n              onClick={() => onBulkEdit && onBulkEdit()}\n            >\n              Bulk Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VariableInputs;\n","import React, { useState, useEffect } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport AuditTrail from './components/AuditTrail';\nimport CalculationResults from './components/CalculationResults';\nimport FormulaBuilder from './components/FormulaBuilder';\nimport ModelTemplates from './components/ModelTemplates';\nimport TerminalInterface from './components/TerminalInterface';\nimport VariableInputs from './components/VariableInputs';\n\nconst FinancialModelWorkspace = () => {\n  const [activeLayout, setActiveLayout] = useState('dual-pane');\n  const [leftPanelContent, setLeftPanelContent] = useState('terminal');\n  const [rightPanelContent, setRightPanelContent] = useState('results');\n  const [isCollaborationOpen, setIsCollaborationOpen] = useState(false);\n  const [modelState, setModelState] = useState({\n    name: 'DCF_Analysis_v2.3',\n    saved: true,\n    calculating: false,\n    lastSaved: new Date()\n  });\n\n  const [calculationResults, setCalculationResults] = useState(null);\n\n  const handleCommandExecute = (command, result) => {\n    setCalculationResults(result);\n  };\n\n  const renderLeftPanel = () => {\n    switch (leftPanelContent) {\n      case 'terminal':\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n      case 'variables':\n        return <VariableInputs />;\n      case 'formulas':\n        return <FormulaBuilder />;\n      case 'templates':\n        return <ModelTemplates />;\n      default:\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n    }\n  };\n\n  const renderRightPanel = () => {\n    switch (rightPanelContent) {\n      case 'results':\n        return <CalculationResults results={calculationResults} />;\n      case 'audit':\n        return <AuditTrail />;\n      default:\n        return <CalculationResults results={calculationResults} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <Header />\n      \n      {/* Main Workspace */}\n      <div className=\"flex flex-col h-screen pt-16\">\n        {/* Toolbar */}\n        <div className=\"bg-gray-800 border-b border-gray-700 px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"FileText\" className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"font-medium\">{modelState.name}</span>\n              <span className={`text-xs px-2 py-1 rounded ${\n                modelState.saved ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'\n              }`}>\n                {modelState.saved ? 'Saved' : 'Unsaved'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Layout Controls */}\n            <div className=\"flex items-center space-x-1 bg-gray-700 rounded-lg p-1\">\n              <Button\n                variant={activeLayout === 'single-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('single-pane')}\n                aria-label=\"Single-pane layout\"\n              >\n                <Icon name=\"Square\" className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={activeLayout === 'dual-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('dual-pane')}\n                aria-label=\"Dual-pane layout\"\n              >\n                <Icon name=\"Columns\" className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Panel Controls */}\n            <div className=\"flex items-center space-x-1\">\n              <select\n                value={leftPanelContent}\n                onChange={(e) => setLeftPanelContent(e.target.value)}\n                className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                aria-label=\"Select left panel content\"\n              >\n                <option value=\"terminal\">Terminal</option>\n                <option value=\"variables\">Variables</option>\n                <option value=\"formulas\">Formulas</option>\n                <option value=\"templates\">Templates</option>\n              </select>\n              \n              {activeLayout === 'dual-pane' && (\n                <select\n                  value={rightPanelContent}\n                  onChange={(e) => setRightPanelContent(e.target.value)}\n                  className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                  aria-label=\"Select right panel content\"\n                >\n                  <option value=\"results\">Results</option>\n                  <option value=\"audit\">Audit Trail</option>\n                </select>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel */}\n          <div className={`${\n            activeLayout === 'dual-pane' ? 'w-1/2' : 'w-full'\n          } border-r border-gray-700 overflow-hidden`}>\n            {renderLeftPanel()}\n          </div>\n\n          {/* Right Panel */}\n          {activeLayout === 'dual-pane' && (\n            <div className=\"w-1/2 overflow-hidden\">\n              {renderRightPanel()}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialModelWorkspace;\n"],"names":["AuditTrail","calculations","errors","warnings","activeTab","setActiveTab","useState","expandedItems","setExpandedItems","Set","filterLevel","setFilterLevel","mockAuditData","id","timestamp","Date","now","type","operation","formula","result","inputs","FCFF_2024","FCFF_2025","FCFF_2026","FCFF_2027","FCFF_2028","WACC","executionTime","status","cost_equity","cost_debt","tax_rate","debt_ratio","FCF_final","terminal_growth","severity","message","location","suggestion","resolved","acknowledged","validations","check","details","tabs","label","icon","count","length","getStatusIcon","color","getSeverityColor","renderCalculations","jsx","className","children","map","calc","jsxs","Icon","name","size","toLocaleTimeString","time","toFixed","Button","variant","iconName","has","onClick","newExpanded","delete","add","toggleExpanded","Object","entries","key","value","tab","error","toLocaleString","warning","validation","CalculationResults","results","onExport","expandedSections","setExpandedSections","mockResults","summary","enterpriseValue","equityValue","sharePrice","impliedReturn","confidence","cashFlows","year","revenue","ebitda","fcf","pv","sensitivity","wacc","growth","matrix","scenarios","probability","irr","multiples","metric","current","peer_avg","premium","formatCurrency","decimals","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercent","renderSummary","width","cf","index","rowIndex","colIndex","Math","abs","scenario","multiple","FormulaBuilder","onFormulaCreate","variables","selectedCategory","setSelectedCategory","draggedFunction","setDraggedFunction","currentFormula","setCurrentFormula","formulaName","setFormulaName","isBuilding","setIsBuilding","dropZoneRef","useRef","functionCategories","valuation","functions","syntax","description","financial","statistical","mathematical","validateFormula","match","category","func","draggable","onDragStart","e","dataTransfer","effectAllowed","handleDragStart","newFormula","addFunction","onChange","target","placeholder","ref","onDragOver","preventDefault","dropEffect","onDrop","disabled","ModelTemplates","onTemplateSelect","onTemplateCreate","searchTerm","setSearchTerm","showCreateModal","setShowCreateModal","templateCategories","templates","complexity","timeToComplete","lastUsed","popularity","features","lbo","comps","merger","getComplexityColor","filteredTemplates","filter","template","toLowerCase","includes","handleTemplateSelect","feature","rows","commandRegistry","constructor","this","commands","Map","categories","aliases","initializeCategories","set","register","handler","metadata","commandName","toUpperCase","commandInfo","usage","examples","parameterSchema","tags","version","deprecated","experimental","forEach","alias","get","push","getHandler","command","aliasTarget","aliasCommand","getCommandInfo","getCommandsByCategory","categoryInfo","cmdName","getAllCommands","Array","from","keys","getAllCategories","searchCommands","query","score","calculateSearchScore","sort","a","b","some","tag","getSuggestions","partial","partialLower","suggestions","startsWith","localeCompare","hasCommand","getCommandStats","stats","categoryKey","CryptoUtils","algorithm","keyLength","ivLength","tagLength","textEncoder","TextEncoder","textDecoder","TextDecoder","initializeKey","storedKey","localStorage","getItem","keyData","base64ToArrayBuffer","cryptoKey","crypto","subtle","importKey","generateKey","exportedKey","exportKey","keyString","arrayBufferToBase64","setItem","encrypt","data","dataBuffer","encode","iv","getRandomValues","Uint8Array","encryptedBuffer","combined","byteLength","buffer","Error","decrypt","encryptedData","slice","decryptedBuffer","decode","hash","hashBuffer","digest","verifyIntegrity","expectedHash","generateRandomString","array","substring","deriveKeyFromPassword","password","salt","passwordBuffer","saltBuffer","keyMaterial","deriveKey","iterations","isAvailable","window","getInfo","available","keyInitialized","bytes","binary","i","String","fromCharCode","btoa","base64","atob","charCodeAt","clearSensitiveData","ArrayBuffer","view","performanceTest","testData","JSON","stringify","test","fill","encryptStart","performance","encrypted","encryptTime","decryptStart","decryptTime","totalTime","dataSize","encryptedSize","compressionRatio","CompressionUtils","compressionFormat","compress","compressWithStream","compressWithLZString","decompress","compressedData","isNativeCompressed","decompressWithStream","decompressWithLZString","stream","CompressionStream","writer","writable","getWriter","reader","readable","getReader","write","close","chunks","done","readerDone","read","totalLength","reduce","sum","chunk","offset","replace","compressedBuffer","DecompressionStream","dictionary","dictSize","char","compressed","Uint16Array","previous","code","isLZStringCompressed","isCompressed","getCompressionRatio","originalData","originalSize","Blob","estimateCompressionBenefit","compressedSize","ratio","savings","savingsPercentage","worthCompressing","nativeCompressionAvailable","fallbackAvailable","defaultFormat","repeat","numbers","_","compressStart","compressTime","decompressStart","decompressTime","method","LocalStorageService","prefix","maxSize","cryptoUtils","compressionUtils","initialize","testKey","removeItem","success","store","options","ttl","validate","validateData","storageObject","serializedData","storageKey","retrieve","validateTTL","parse","parseError","decompressed","decompressError","remove","clear","getKeys","getStats","used","totalSize","itemCount","itemSizes","usagePercentage","largestItem","max","exportAll","exportData","importData","overwrite","imported","skipped","hasSpace","cleanup","cleaned","seen","WeakSet","checkCircular","obj","isStorageAvailable","writeStart","writeTime","readStart","readTime","IndexedDBService","dbName","dbVersion","db","stores","watchlists","keyPath","autoIncrement","indexes","unique","analysis_history","command_history","alerts","cached_data","user_models","export_data","indexedDB","openDatabase","cleanupExpiredData","Promise","resolve","reject","request","open","onerror","onsuccess","onupgradeneeded","event","createObjectStores","storeName","objectStoreNames","contains","deleteObjectStore","config","createObjectStore","createIndex","dataObject","performTransaction","put","expiry","storeObj","getAllKeys","getAll","limit","filteredResults","indexName","total","records","recordCount","storeSize","record","cachedData","mode","transaction","objectStore","oncomplete","storeCount","SessionManager","sessionKey","userKey","preferencesKey","currentSession","currentUser","sessionTimeout","listeners","defaultPreferences","precision","dateFormat","theme","notifications","autoSave","commandHistory","dataRetention","privacy","analytics","crashReporting","dataSharing","loadSession","setupSessionMonitoring","hasSession","createSession","userInfo","sessionId","generateSessionId","session","userId","generateUserId","created","lastActivity","expires","userAgent","navigator","platform","language","timezone","DateTimeFormat","resolvedOptions","timeZone","user","email","lastLogin","loginCount","preferences","storeSession","storeUser","notifyListeners","sessionData","userData","destroySession","updateActivity","getSession","getUser","isAuthenticated","getPreferences","updatePreferences","newPreferences","getSessionStats","sessionDuration","timeUntilExpiry","lastActivityAge","userName","userCreated","isExpired","isActive","exportSessionData","exportTimestamp","importSessionData","addEventListener","callback","removeEventListener","random","toString","substr","throttledUpdate","throttle","document","passive","setInterval","hidden","inThrottle","args","arguments","context","apply","setTimeout","DataMigrationService","currentVersion","migrationKey","backupKey","migrations","to","migrate","migrateToV1_0_0","bind","checkAndMigrate","currentStoredVersion","performVersionMigration","performInitialMigration","legacyData","detectLegacyData","createMigrationBackup","fromVersion","toVersion","migrationPath","findMigrationPath","currentData","exportCurrentData","migration","restoreFromBackup","oldVariables","oldSettings","settings","oldWatchlists","oldAlerts","dataToMigrate","migratedWatchlists","migrateWatchlistsFormat","migratedAlerts","migrateAlertsFormat","migratedPreferences","migratePreferencesFormat","migratedVariables","migrateVariablesFormat","cleanupLegacyData","migrated","isArray","watchlist","tickers","stocks","toISOString","split","lastUpdated","alert","ticker","condition","triggered","backup","backupData","getMigrationStatus","storedVersion","hasBackup","needsMigration","availableMigrations","clearBackup","persistenceManager","sessionManager","migrationService","isInitialized","storageQuota","storageStrategy","checkStorageAvailability","all","estimateStorageQuota","availableStorage","getAvailableStorage","ensureInitialized","storage","determineStorageLayer","promises","confirm","getStorageStats","localStorageStats","indexedDBStats","totalUsed","quota","includeMetadata","localStorageData","indexedDBData","storageStats","exportOptions","validateImportData","estimate","CommandProcessor","persistenceInitialized","maxHistorySize","initializePersistence","loadPersistedData","history","saveData","variablesObj","fromEntries","processCommand","input","startTime","parsedCommand","parseCommand","historyEntry","createErrorResponse","validationResult","validateParameters","valid","execute","catch","trimmed","trim","functionMatch","paramString","parameters","parseParameters","rawInput","parts","params","inQuotes","inBrackets","quoteChar","parseParameterValue","endsWith","arrayContent","item","parseFloat","required","optional","join","maxParams","content","cmd","getHistory","clearHistory","setVariable","getVariable","getAllVariables","updateSetting","getSetting","getAllSettings","coreCommands","DCF","async","processor","loadingMessage","dataFetchingService","demoMode","showLoading","dcfInputs","fetchDCFInputs","dcfResults","calculateDCFValuation","companyName","currentPrice","fairValue","formatPercentage","upside","terminalValue","projections","proj","recommendation","analysis","LBO","profile","financials","fetchCompanyProfile","fetchFinancialStatements","lboInputs","price","marketCap","mktCap","debt","totalDebt","cash","totalCash","lboResults","calculateLBOReturns","purchasePrice","equityInvestment","formatNumber","debtToEquity","exitEquityValue","totalReturn","moic","exitEbitda","exitMultiple","exitEnterpriseValue","managementFees","carriedInterest","netReturn","COMP","peers","fetchPeerComparables","companyData","symbol","peRatio","pe","evToEbitda","enterpriseValueOverEBITDA","priceToBook","pb","compAnalysis","calculateComparableMetrics","peer","peerStatistics","median","relativeValuation","peRatioRelative","evEbitdaRelative","priceToBookRelative","marketCapPercentile","min","FETCH","industry","sector","fullTimeEmployees","eps","profitMargin","ps","enterpriseValueOverRevenue","bookValue","priceHigh52","priceLow52","beta","dividendYield","portfolioCommands","PORTFOLIO","weights","tickerArray","weightArray","totalWeight","w","portfolioData","weight","portfolioValue","stock","weightedBeta","weightedPE","weightedDividendYield","maxWeight","minWeight","concentrationRatio","holdings","metrics","RISK_METRICS","period","volatility","fetchMarketData","sharpeRatio","var95","var99","maxDrawdown","sortinoRatio","sqrt","CORRELATION_MATRIX","stockData","correlationMatrix","j","sectorCorr","betaCorr","correlation","totalCorr","avgCorrelation","maxCorr","minCorr","maxPair","minPair","corr","matrixDisplay","padEnd","s","padStart","t","statistics","EFFICIENT_FRONTIER","expectedReturn","frontierPoints","targetReturn","baseWeight","returnAdjustment","normalizedWeights","portfolioReturn","portfolioVolatility","pow","return","optimalPortfolio","best","p","assets","DRAWDOWN","avgDrawdown","drawdownFrequency","recoveryTime","drawdownPeriods","start","end","magnitude","duration","dd","valuationCommands","DDM","currentDividend","dividendGrowthRate","requiredReturn","gordonValue","highGrowthYears","highGrowthRate","terminalGrowthRate","presentValueHighGrowth","dividend","terminalDividend","presentValueTerminal","twoStageValue","gordonUpside","twoStageUpside","RESIDUAL_INCOME","roe","returnOnEquityTTM","costOfEquity","netIncome","normalIncome","residualIncome","projectionYears","residualIncomeGrowth","totalPVResidualIncome","projectedRI","presentValue","terminalRI","pvTerminalValue","intrinsicValue","valuePerShare","sharesOutstanding","ASSET_BASED","balanceSheet","totalAssets","totalLiabilities","cashAndEquivalents","cashAndCashEquivalents","inventory","ppe","propertyPlantEquipmentNet","intangibleAssets","otherAssets","adjustments","book","market","adjustment","intangibles","other","totalMarketAssets","values","adj","netAssetValue","navPerShare","liquidationValue","liquidationPerShare","technicalCommands","TECHNICALS","sma20","sma50","ema12","ema26","rsi","macd","macdSignal","macdHistogram","bollingerUpper","bollingerLower","bollingerPosition","support1","support2","resistance1","resistance2","signals","signal","indicators","SUPPORT_RESISTANCE","levels","level","strength","touches","nearestSupport","l","nearestResistance","supportDistance","resistanceDistance","distance","esgCommands","ESG_SCORE","sectorMultiplier","Technology","Healthcare","Energy","Utilities","Industrials","Materials","baseSector","sectorScore","companySize","environmentalScore","socialScore","governanceScore","overallScore","riskFactors","opportunities","trends","environmental","social","governance","risk","opp","scores","overall","SOCIAL_SENTIMENT","days","sentimentScore","volumeScore","trendDirection","sources","mentions","floor","sentiment","themes","topic","totalMentions","source","avgSentiment","overallSentiment","NEWS_IMPACT","newsItems","date","headline","impact","priceChange","volume","totalPriceImpact","avgVolume","automationCommands","WATCHLIST","action","listName","change","changes","changePercent","changesPercentage","totalValue","avgChange","worst","analysisResults","r","ALERT","undefined","newAlert","shouldTrigger","currentValue","BATCH_ANALYSIS","analysisType","rating","avgScore","topPick","strongBuys","buys","dataCommands","EXPORT_JSON","dataType","filename","jsonString","suggestedFilename","CACHE_STATS","cacheSize","cache","cacheKeys","cacheTypes","hitRate","avgResponseTime","estimatedMemory","DATA_QUALITY","checks","field","quality","revenueTTM","overallQuality","missingFields","completeFields","dataAge","freshnessScore","qualityText","BENCHMARK","benchmark","stockProfile","benchmarkProfile","relativeMetrics","ytd","oneYear","threeYear","fiveYear","benchmarkPerformance","outperformance","x","systemCommands","PERFORMANCE_TEST","tests","cmdStart","dataStart","memStart","memoryUsage","process","heapUsed","heapTotal","external","round","cacheStart","totalDuration","passedTests","statusIcon","API_USAGE","daily","calls","remaining","monthly","endpoints","dailyUsagePercent","monthlyUsagePercent","totalEndpointCalls","rateLimitStatus","estimatedCost","endpoint","usagePercents","CONFIG","setting","val","validSettings","oldValue","newValue","backupService","backupVersion","maxBackupSize","maxBackups","createBackup","includeSettings","includeWatchlists","includeAlerts","includeHistory","includeCachedData","analysisHistory","backupString","backupId","generateBackupId","storeBackup","cleanupOldBackups","restoreBackup","selectiveRestore","createBackupBeforeRestore","retrieveBackup","isVersionCompatible","dataToRestore","filterBackupData","restoreResults","restored","determineStorageType","backupTimestamp","restoreTimestamp","listBackups","backupKeys","backups","deleteBackup","exportBackupToFile","dataString","blob","importBackupFromFile","fileContent","getBackupStats","totalBackups","oldestBackup","newestBackup","encryptedBackups","compressedBackups","backupRecord","backupsToDelete","dataTypes","filtered","privacyService","retentionPolicies","session_data","privacySettings","cookieConsent","trackingConsent","dataCategories","essential","functional","marketing","policies","scheduleCleanup","updatePrivacySettings","newSettings","handlePrivacySettingChanges","cleanupNonEssentialData","cleanupAnalyticsData","removeDataSharingMarkers","setRetentionPolicy","policy","specificType","typesToClean","retentionDays","cleanupDataType","cutoffTime","cleanupCommandHistory","cleanupAnalysisHistory","cleanupCachedData","cleanupExportData","cleanupSessionData","entry","getTime","allHistory","allCached","allExports","nonEssentialTypes","analyticsTypes","exportUserData","includeEssential","includeFunctional","includeAnalytics","deleteAllUserData","confirmation","databases","deleteDatabase","getPrivacyReport","cleanupResults","lastCleanup","compliance","gdprCompliant","ccpaCompliant","retentionPoliciesActive","getPrivacySettings","getRetentionPolicies","syncService","syncEndpoint","syncInterval","lastSyncTime","syncInProgress","conflictResolutionStrategy","syncQueue","maxQueueSize","interval","conflictResolution","queue","setupPeriodicSync","queueSyncOperation","syncOperation","generateOperationId","retries","onLine","processSyncQueue","processed","failed","operations","op","performFullSync","reason","localData","getLocalSyncData","remoteData","getRemoteData","mergedData","resolveConflicts","applyMergedData","syncableTypes","typeData","lastModified","checksum","calculateChecksum","merged","allTypes","local","remote","resolveDataConflict","mergeData","mergeWatchlists","mergeAlerts","remoteIds","getSyncStatus","queueSize","isOnline","hasEndpoint","strategy","persistenceTestSuite","testResults","isRunning","runAllTests","testPersistenceManagerInitialization","testDataStorageAndRetrieval","testDataRemoval","testStorageStatistics","testBackupCreation","testBackupListing","testBackupRestore","testPrivacySettings","testDataCleanup","testSyncStatus","testDataLifecycle","testErrorHandling","passed","testName","assert","recordFailure","storeResult","retrievedData","stored","retrieved","indexedStoreResult","removeResult","backupsCount","restoreResult","recordSkip","updatedSettings","cleanupResult","lifecycle","step","updatedData","retrievedUpdated","retrievedAfterRemoval","initial","updated","afterRemoval","invalidResult","getTestSummary","successRate","testPersistence","persistenceCommands","BACKUP_CREATE","BACKUP_LIST","toLocaleDateString","BACKUP_RESTORE","shouldOverwrite","STORAGE_STATS","totalUsedMB","totalAvailableMB","quotaMB","PRIVACY_CLEANUP","PRIVACY_SETTINGS","boolValue","SYNC_STATUS","PERSISTENCE_TEST","find","privateAnalysisCommands","PRIVATE_DCF","defaultFinancialData","periods","statements","incomeStatement","revenues","operatingIncomes","margins","totalRevenue","operatingIncome","assumptions","discountRate","taxRate","latestRevenue","revenueGrowthRate","projectedRevenue","projectedOperatingIncome","projectedFCF","totalPresentValue","terminalPresentValue","PRIVATE_RATIOS","ratios","totalCOGS","totalCostOfGoodsSold","grossProfit","grossMargin","operatingMargin","netMargin","cogsPercentage","growthRates","currentRevenue","previousRevenue","currentOperating","previousOperating","revenueGrowth","operatingGrowth","g","PRIVATE_SUMMARY","latestIndex","latest","revenueBreakdown","injectables","surgery","wellness","weightloss","retailSales","energyDevices","PRIVATE_LOAD","cashFlow","dataStructure","incomeStatementItems","balanceSheetItems","cashFlowItems","allCommands","cat","categoryCommands","totalCommands","TerminalInterface","onCommandExecute","calculationResults","setCommands","currentInput","setCurrentInput","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestion","setSelectedSuggestion","isLoading","setIsLoading","terminalRef","inputRef","commandProcessor","useEffect","scrollTop","scrollHeight","focus","executeCommand","newCommand","prev","loadingCommand","response","responseCommand","errorCommand","availableCommands","info","commandSuggestions","partialMatches","allSuggestions","onKeyDown","autoComplete","selectSuggestion","VariableInputs","onVariableChange","onBulkEdit","activeSection","setActiveSection","editMode","setEditMode","setVariables","revenue_growth","unit","ebitda_margin","capex_revenue","working_capital_revenue","cost_of_capital","risk_free_rate","market_premium","cost_of_debt","debt_equity_ratio","market_data","current_share_price","shares_outstanding","market_cap","enterprise_value","net_debt","formatValue","filteredVariables","sectionData","variable","url","URL","createObjectURL","createElement","href","download","click","revokeObjectURL","section","getVariablesByCategory","categoryVariables","updatedVariables","handleVariableChange","defaultVariables","FinancialModelWorkspace","activeLayout","setActiveLayout","leftPanelContent","setLeftPanelContent","rightPanelContent","setRightPanelContent","isCollaborationOpen","setIsCollaborationOpen","modelState","setModelState","saved","calculating","lastSaved","setCalculationResults","handleCommandExecute","Header","renderLeftPanel"],"mappings":"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"}
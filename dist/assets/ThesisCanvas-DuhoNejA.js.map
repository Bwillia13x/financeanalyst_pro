{"version":3,"file":"ThesisCanvas-DuhoNejA.js","sources":["../../src/services/canvasApiService.js","../../src/pages/ThesisCanvas.jsx"],"sourcesContent":["/**\n * Canvas API Service\n * Handles persistence of thesis canvas graphs with proper error handling and validation\n */\n\nclass CanvasApiService {\n  constructor() {\n    this.baseUrl = '/api/canvas';\n    this.mockMode = true; // Set to false when backend is ready\n    this.mockStorage = new Map(); // Simulate database in mock mode\n    this.mockUserId = 'user_123'; // Simulate authenticated user\n  }\n\n  // Validate graph structure before persistence\n  validateGraph(graph) {\n    if (!graph || typeof graph !== 'object') {\n      throw new Error('Invalid graph: must be an object');\n    }\n\n    if (!Array.isArray(graph.nodes)) {\n      throw new Error('Invalid graph: nodes must be an array');\n    }\n\n    if (!Array.isArray(graph.edges)) {\n      throw new Error('Invalid graph: edges must be an array');\n    }\n\n    // Validate nodes\n    for (const node of graph.nodes) {\n      if (!node.id || typeof node.x !== 'number' || typeof node.y !== 'number') {\n        throw new Error('Invalid node: missing required fields (id, x, y)');\n      }\n    }\n\n    // Validate edges reference existing nodes\n    const nodeIds = new Set(graph.nodes.map(n => n.id));\n    for (const edge of graph.edges) {\n      if (!nodeIds.has(edge.from) || !nodeIds.has(edge.to)) {\n        throw new Error('Invalid edge: references non-existent node');\n      }\n    }\n\n    return true;\n  }\n\n  // Create a new canvas\n  async createCanvas(name, graph, description = '') {\n    this.validateGraph(graph);\n\n    if (this.mockMode) {\n      const id = `canvas_${Date.now()}_${Math.random().toString(36).slice(2)}`;\n      const canvas = {\n        id,\n        name: name || `Canvas ${new Date().toISOString().slice(0, 19)}`,\n        description,\n        graph,\n        userId: this.mockUserId,\n        created: new Date().toISOString(),\n        updated: new Date().toISOString(),\n        version: 1\n      };\n      this.mockStorage.set(id, canvas);\n      return { success: true, data: canvas };\n    }\n\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, description, graph })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Update existing canvas\n  async updateCanvas(id, graph, name = null, description = null) {\n    this.validateGraph(graph);\n\n    if (this.mockMode) {\n      const existing = this.mockStorage.get(id);\n      if (!existing) {\n        return { success: false, error: 'Canvas not found' };\n      }\n\n      const updated = {\n        ...existing,\n        graph,\n        ...(name && { name }),\n        ...(description !== null && { description }),\n        updated: new Date().toISOString(),\n        version: existing.version + 1\n      };\n\n      this.mockStorage.set(id, updated);\n      return { success: true, data: updated };\n    }\n\n    try {\n      const body = { graph };\n      if (name) body.name = name;\n      if (description !== null) body.description = description;\n\n      const response = await fetch(`${this.baseUrl}/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Get canvas by ID\n  async getCanvas(id) {\n    if (this.mockMode) {\n      const canvas = this.mockStorage.get(id);\n      if (!canvas) {\n        return { success: false, error: 'Canvas not found' };\n      }\n      return { success: true, data: canvas };\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/${id}`);\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return { success: false, error: 'Canvas not found' };\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // List user's canvases\n  async listCanvases(userId = null) {\n    if (this.mockMode) {\n      const userCanvases = Array.from(this.mockStorage.values())\n        .filter(canvas => !userId || canvas.userId === userId)\n        .sort((a, b) => new Date(b.updated) - new Date(a.updated));\n\n      return { success: true, data: userCanvases };\n    }\n\n    try {\n      const url = userId ? `${this.baseUrl}?user=${userId}` : this.baseUrl;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Delete canvas\n  async deleteCanvas(id) {\n    if (this.mockMode) {\n      const deleted = this.mockStorage.delete(id);\n      if (!deleted) {\n        return { success: false, error: 'Canvas not found' };\n      }\n      return { success: true };\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return { success: false, error: 'Canvas not found' };\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Initialize with some sample data in mock mode\n  initializeMockData() {\n    if (!this.mockMode) return;\n\n    // Sample canvas 1: Basic investment thesis\n    const sampleCanvas1 = {\n      id: 'sample_1',\n      name: 'SaaS Investment Thesis',\n      description: 'Analysis of a high-growth SaaS company',\n      graph: {\n        nodes: [\n          {\n            id: 'thesis_1',\n            type: 'thesis',\n            x: 240,\n            y: 220,\n            text: 'Investment thesis for high-growth SaaS company with strong unit economics',\n            pins: [],\n            collapsed: false,\n            created: Date.now() - 86400000 // 1 day ago\n          },\n          {\n            id: 'claim_1',\n            type: 'claim',\n            x: 460,\n            y: 160,\n            text: 'Recurring revenue model with 95%+ retention',\n            pins: [],\n            collapsed: false,\n            created: Date.now() - 86400000\n          }\n        ],\n        edges: [\n          {\n            id: 'edge_1',\n            from: 'thesis_1',\n            to: 'claim_1',\n            created: Date.now() - 86400000\n          }\n        ]\n      },\n      userId: this.mockUserId,\n      created: new Date(Date.now() - 86400000).toISOString(),\n      updated: new Date(Date.now() - 3600000).toISOString(),\n      version: 2\n    };\n\n    this.mockStorage.set(sampleCanvas1.id, sampleCanvas1);\n  }\n\n  // Export for debugging/backup\n  exportMockData() {\n    if (!this.mockMode) return null;\n    return Array.from(this.mockStorage.values());\n  }\n\n  // Import for debugging/restore\n  importMockData(canvases) {\n    if (!this.mockMode) return;\n    this.mockStorage.clear();\n    for (const canvas of canvases) {\n      this.mockStorage.set(canvas.id, canvas);\n    }\n  }\n}\n\n// Create singleton instance\nconst canvasApiService = new CanvasApiService();\n\n// Initialize with sample data\ncanvasApiService.initializeMockData();\n\nexport default canvasApiService;\n","import React, {\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useCallback\n} from 'react';\n\nimport PersistentCLI from '../components/CLI/PersistentCLI';\nimport Header from '../components/ui/Header';\nimport canvasApiService from '../services/canvasApiService';\n\n/*\n  FinanceAnalyst Pro — THESIS CANVAS (Route: /canvas)\n  Enhanced Version (Stabilized)\n  - Fix: Guards around history/state initialization to prevent undefined access (graphState.nodes)\n  - Fix: Safe lazy init for nodes/edges, even if history state is temporarily undefined\n  - Fix: Defensive loadGraph & export guards\n  - Added: More dev/sanity tests (history init, clipboard mock)\n  - Kept: Undo/Redo, Multi-select, Copy/Paste, Export, Minimap, Search, Inspector\n*/\n\n// ———————————— Constants & Types ————————————\nconst GRID_SIZE = 8;\nconst NODE_WIDTH = 190;\nconst NODE_HEIGHT = 72;\nconst NODE_RADIUS = 12;\n\nconst TYPES = [\n  { k: 'thesis', label: 'Thesis', color: '#0ea5e9', icon: '🎯' },\n  { k: 'claim', label: 'Claim', color: '#6366f1', icon: '💡' },\n  { k: 'evidence', label: 'Evidence', color: '#10b981', icon: '📊' },\n  { k: 'risk', label: 'Risk', color: '#ef4444', icon: '⚠️' },\n  { k: 'counter', label: 'Counterpoint', color: '#f59e0b', icon: '🤔' },\n  { k: 'data', label: 'Data', color: '#14b8a6', icon: '📈' },\n  { k: 'decision', label: 'Decision', color: '#334155', icon: '✓' }\n];\n\n// ———————————— UI Components ————————————\nconst Card = React.memo(({ title, right, children, className = '', actions }) => (\n  <section className={`rounded-2xl border border-slate-200 bg-white shadow-sm transition-shadow hover:shadow-md ${className}`}>\n    {(title || right || actions) && (\n      <header className=\"flex items-center justify-between border-b border-slate-200 px-4 py-2.5\">\n        <div className=\"flex items-center gap-2\">\n          {title && <h3 className=\"text-[13px] font-semibold tracking-wide text-slate-700\">{title}</h3>}\n          {right}\n        </div>\n        {actions && <div className=\"flex items-center gap-1\">{actions}</div>}\n      </header>\n    )}\n    <div className=\"p-3\">{children}</div>\n  </section>\n));\nCard.displayName = 'Card';\n\nconst Pill = React.memo(({ children, tone = 'slate', onClick, className = '' }) => {\n  const tones = {\n    slate: 'bg-slate-50 text-slate-700 border-slate-200',\n    blue: 'bg-blue-50 text-blue-700 border-blue-200',\n    amber: 'bg-amber-50 text-amber-700 border-amber-200',\n    green: 'bg-emerald-50 text-emerald-700 border-emerald-200',\n    red: 'bg-rose-50 text-rose-700 border-rose-200',\n    violet: 'bg-violet-50 text-violet-700 border-violet-200'\n  };\n  const base = `inline-flex items-center gap-1 rounded-full border px-2 py-0.5 text-[11px] transition-all ${tones[tone] || tones.slate} ${className}`;\n  const inter = onClick ? 'cursor-pointer hover:scale-105 active:scale-95' : '';\n  return (\n    <span\n      className={`${base} ${inter}`}\n      onClick={onClick}\n      role={onClick ? 'button' : undefined}\n      tabIndex={onClick ? 0 : undefined}\n    >\n      {children}\n    </span>\n  );\n});\nPill.displayName = 'Pill';\n\nconst Button = React.memo(({ children, variant = 'default', size = 'sm', onClick, disabled, className = '' }) => {\n  const variants = {\n    default: 'border-slate-200 bg-white text-slate-700 hover:bg-slate-50',\n    primary: 'border-blue-600 bg-blue-600 text-white hover:bg-blue-700',\n    danger: 'border-rose-600 bg-rose-600 text-white hover:bg-rose-700',\n    ghost: 'border-transparent text-slate-700 hover:bg-slate-100'\n  };\n  const sizes = { sm: 'px-2 py-1 text-[12px]', md: 'px-3 py-1.5 text-[13px]', lg: 'px-4 py-2 text-[14px]' };\n  return (\n    <button\n      onClick={onClick}\n      disabled={disabled}\n      className={`rounded-md border font-medium transition-all hover:shadow-sm disabled:opacity-50 disabled:cursor-not-allowed ${variants[variant]} ${sizes[size]} ${className}`}\n    >\n      {children}\n    </button>\n  );\n});\nButton.displayName = 'Button';\n\n// ———————————— Utils ————————————\nconst snap = (v, g = GRID_SIZE) => Math.round(v / g) * g;\nconst inRect = (px, py, x, y, w, h) => px >= x && px <= x + w && py >= y && py <= y + h;\n\nconst bezierPath = (x1, y1, x2, y2) => {\n  const dx = Math.max(40, Math.abs(x2 - x1) * 0.5);\n  return `M ${x1} ${y1} C ${x1 + dx} ${y1}, ${x2 - dx} ${y2}, ${x2} ${y2}`;\n};\n\nconst makeNode = (type, x, y, text = '') => ({\n  id: Math.random().toString(36).slice(2),\n  type,\n  x: snap(x),\n  y: snap(y),\n  text,\n  pins: [],\n  collapsed: false,\n  created: Date.now()\n});\n\nconst isReachable = (edges, start, target) => {\n  const g = {};\n  edges.forEach(e => (g[e.from] ||= []).push(e.to));\n  const seen = new Set([start]);\n  const st = [start];\n  while (st.length) {\n    const v = st.pop();\n    if (v === target) return true;\n    for (const w of g[v] || []) if (!seen.has(w)) {\n      seen.add(w); st.push(w);\n    }\n  }\n  return false;\n};\n\nconst _layoutTree = (nodes, edges, rootId, dx = 220, dy = 120) => {\n  if (!rootId) return nodes;\n  const root = nodes.find(n => n.id === rootId); if (!root) return nodes;\n  const centerX = root.x, centerY = root.y;\n  const children = {}; edges.forEach(e => (children[e.from] ||= []).push(e.to));\n  const depth = { [rootId]: 0 }, order = { 0: [rootId] }, q = [rootId];\n  while (q.length) {\n    const v = q.shift(); const d = depth[v];\n    for (const w of children[v] || []) if (depth[w] == null) {\n      depth[w] = d + 1; (order[d + 1] ||= []).push(w); q.push(w);\n    }\n  }\n  const pos = { [rootId]: { x: centerX, y: centerY } };\n  Object.keys(order).sort((a, b) => +a - +b).forEach(k => {\n    if (k === '0') return; const level = order[k]; const span = (level.length - 1) * dy;\n    level.forEach((id, i) => {\n      pos[id] = { x: centerX + dx * (+k), y: centerY - span / 2 + i * dy };\n    });\n  });\n  return nodes.map(n => pos[n.id] ? { ...n, x: snap(pos[n.id].x), y: snap(pos[n.id].y) } : n);\n};\n\n// ———————————— History (Stabilized) ————————————\nconst useHistory = (initialState) => {\n  // Ensure we always have a valid object with arrays\n  const safeInit = useMemo(() => ({\n    nodes: Array.isArray(initialState?.nodes) ? initialState.nodes : [],\n    edges: Array.isArray(initialState?.edges) ? initialState.edges : []\n  }), [initialState]);\n\n  const [history, setHistory] = useState([safeInit]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const pushState = useCallback((newState) => {\n    const next = {\n      nodes: Array.isArray(newState?.nodes) ? newState.nodes : [],\n      edges: Array.isArray(newState?.edges) ? newState.edges : []\n    };\n    setHistory(prev => [...prev.slice(0, currentIndex + 1), next]);\n    setCurrentIndex(prev => prev + 1);\n  }, [currentIndex]);\n\n  const undo = useCallback(() => {\n    if (currentIndex > 0) setCurrentIndex(prev => prev - 1);\n  }, [currentIndex]);\n\n  const redo = useCallback(() => {\n    if (currentIndex < history.length - 1) setCurrentIndex(prev => prev + 1);\n  }, [currentIndex, history.length]);\n\n  return {\n    state: history[currentIndex] ?? safeInit,\n    pushState,\n    undo,\n    redo,\n    canUndo: currentIndex > 0,\n    canRedo: currentIndex < history.length - 1\n  };\n};\n\n// ———————————— Node View ————————————\nconst NodeView = React.memo(({ node, selected, onMouseDown, onClick, onStartConnect, onDoubleClick, isHighlighted }) => {\n  const def = TYPES.find(t => t.k === node.type) || TYPES[0];\n  const [isHovered, setIsHovered] = useState(false);\n  return (\n    <g\n      transform={`translate(${node.x},${node.y})`}\n      onMouseDown={e => onMouseDown(node, e)}\n      onClick={e => {\n        e.stopPropagation(); onClick(node);\n      }}\n      onDoubleClick={e => {\n        e.stopPropagation(); onDoubleClick(node);\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      style={{ cursor: 'move' }}\n    >\n      <rect\n        rx={NODE_RADIUS} ry={NODE_RADIUS} width={NODE_WIDTH}\n        height={NODE_HEIGHT} fill=\"black\" opacity=\"0.1\"\n        transform=\"translate(2, 2)\"\n      />\n      <rect\n        rx={NODE_RADIUS} ry={NODE_RADIUS} width={NODE_WIDTH}\n        height={NODE_HEIGHT} fill=\"#ffffff\" stroke={selected ? '#0ea5e9' : isHighlighted ? '#6366f1' : '#cbd5e1'}\n        strokeWidth={selected || isHighlighted ? '3' : '2'}\n      />\n      <rect\n        rx={NODE_RADIUS} ry={NODE_RADIUS} width={NODE_WIDTH}\n        height={NODE_HEIGHT} fill={def.color} opacity={isHovered ? '0.15' : '0.10'}\n      />\n      <g>\n        <text\n          x={12} y={20} fill=\"#0f172a\"\n          fontSize=\"11\" fontWeight=\"700\"\n        >\n          <tspan>{def.icon}</tspan>\n          <tspan dx={4}>{def.label}</tspan>\n        </text>\n        {node.collapsed && (\n          <text\n            x={NODE_WIDTH - 48} y={18} fill=\"#64748b\"\n            fontSize=\"11\"\n          >(collapsed)\n          </text>\n        )}\n      </g>\n      <foreignObject\n        x={12} y={26} width={NODE_WIDTH - 24}\n        height={NODE_HEIGHT - 38}\n      >\n        <div\n          xmlns=\"http://www.w3.org/1999/xhtml\"\n          className=\"overflow-hidden text-[12px] leading-tight text-slate-700\"\n          style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical', overflow: 'hidden' }}\n        >\n          {node.text || <span className=\"text-slate-400 italic\">Add notes…</span>}\n        </div>\n      </foreignObject>\n      <g\n        transform={`translate(${NODE_WIDTH - 14},${NODE_HEIGHT - 14})`}\n        className=\"cursor-crosshair\"\n        onMouseDown={e => {\n          e.stopPropagation(); onStartConnect(node);\n        }}\n        style={{ opacity: isHovered ? 1 : 0 }}\n      >\n        <circle\n          r={10} fill=\"#fff\" stroke=\"#94a3b8\"\n          strokeWidth=\"1.5\"\n        />\n        <path\n          d=\"M -4 0 L 4 0 M 0 -4 L 0 4\" stroke=\"#0ea5e9\" strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n      {node.pins && node.pins.length > 0 && (\n        <g transform={`translate(12, ${NODE_HEIGHT - 12})`}>\n          <circle r={6} fill=\"#6366f1\" />\n          <text\n            x={0} y={2} fill=\"white\"\n            fontSize=\"8\" textAnchor=\"middle\"\n          >{node.pins.length}\n          </text>\n        </g>\n      )}\n    </g>\n  );\n});\nNodeView.displayName = 'NodeView';\n\n// ———————————— Minimap ————————————\nconst Minimap = React.memo(({ nodes, edges, viewport }) => {\n  const width = 200, height = 150;\n  const bounds = useMemo(() => {\n    if (nodes.length === 0) return { minX: 0, minY: 0, maxX: width, maxY: height };\n    const xs = nodes.map(n => n.x), ys = nodes.map(n => n.y);\n    return { minX: Math.min(...xs) - 50, minY: Math.min(...ys) - 50, maxX: Math.max(...xs) + NODE_WIDTH + 50, maxY: Math.max(...ys) + NODE_HEIGHT + 50 };\n  }, [nodes]);\n  const viewBox = `${bounds.minX} ${bounds.minY} ${bounds.maxX - bounds.minX} ${bounds.maxY - bounds.minY}`;\n  return (\n    <div className=\"absolute bottom-4 right-4 overflow-hidden rounded-lg border border-slate-300 bg-white/95 shadow-lg\">\n      <svg width={width} height={height} viewBox={viewBox}>\n        <rect\n          x={bounds.minX} y={bounds.minY} width={bounds.maxX - bounds.minX}\n          height={bounds.maxY - bounds.minY} fill=\"#f8fafc\"\n        />\n        {edges.map(e => {\n          const from = nodes.find(n => n.id === e.from); const to = nodes.find(n => n.id === e.to); if (!from || !to) return null;\n          return (\n            <line\n              key={e.id} x1={from.x + NODE_WIDTH / 2} y1={from.y + NODE_HEIGHT / 2}\n              x2={to.x + NODE_WIDTH / 2} y2={to.y + NODE_HEIGHT / 2} stroke=\"#cbd5e1\"\n              strokeWidth=\"8\"\n            />\n          );\n        })}\n        {nodes.map(n => {\n          const def = TYPES.find(t => t.k === n.type) || TYPES[0];\n          return (\n            <rect\n              key={n.id} x={n.x} y={n.y}\n              width={NODE_WIDTH} height={NODE_HEIGHT} fill={def.color}\n              opacity=\"0.8\" rx={NODE_RADIUS}\n            />\n          );\n        })}\n        <rect\n          x={viewport.x} y={viewport.y} width={viewport.width}\n          height={viewport.height} fill=\"none\" stroke=\"#0ea5e9\"\n          strokeWidth=\"12\" opacity=\"0.5\"\n        />\n      </svg>\n    </div>\n  );\n});\nMinimap.displayName = 'Minimap';\n\n// ———————————— Search ————————————\nconst SearchPanel = React.memo(({ nodes, onNodeSelect, onFilter }) => {\n  const [query, setQuery] = useState('');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const filteredNodes = useMemo(() => {\n    let f = nodes;\n    if (typeFilter !== 'all') f = f.filter(n => n.type === typeFilter);\n    if (query) {\n      const q = query.toLowerCase();\n      f = f.filter(n => (n.text || '').toLowerCase().includes(q) || n.type.toLowerCase().includes(q));\n    }\n    return f;\n  }, [nodes, query, typeFilter]);\n  useEffect(() => {\n    onFilter(filteredNodes.map(n => n.id));\n  }, [filteredNodes, onFilter]);\n  return (\n    <Card title=\"Search & Filter\" right={<Pill tone=\"blue\">{filteredNodes.length}</Pill>}>\n      <div className=\"space-y-2\">\n        <input\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          placeholder=\"Search nodes…\"\n          className=\"w-full rounded-md border border-slate-300 px-2 py-1 text-[12px]\"\n        />\n        <select\n          value={typeFilter}\n          onChange={e => setTypeFilter(e.target.value)}\n          className=\"w-full rounded-md border border-slate-300 px-2 py-1 text-[12px]\"\n        >\n          <option value=\"all\">All Types</option>\n          {TYPES.map(t => <option key={t.k} value={t.k}>{t.label}</option>)}\n        </select>\n        <div className=\"max-h-32 space-y-1 overflow-y-auto\">\n          {filteredNodes.slice(0, 10).map(n => (\n            <button\n              key={n.id}\n              onClick={() => onNodeSelect(n.id)}\n              className=\"w-full text-left cursor-pointer rounded border border-slate-200 px-2 py-1 text-[11px] hover:bg-slate-50\"\n            >\n              <span className=\"font-medium\">{TYPES.find(t => t.k === n.type)?.label}</span>\n              <span className=\"ml-1 text-slate-500\">{(n.text || '').slice(0, 50)}…</span>\n            </button>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n});\nSearchPanel.displayName = 'SearchPanel';\n\n// ———————————— Canvas ————————————\nfunction Canvas({ nodes, setNodes, edges, setEdges, selectedIds, setSelectedIds, highlightIds }) {\n  const svgRef = useRef(null);\n  const [drag, setDrag] = useState(null);\n  const [connecting, setConnecting] = useState(null); // {from,x0,y0,x,y}\n  const [transform, setTransform] = useState({ x: 0, y: 0, scale: 1 });\n  const [isPanning, setIsPanning] = useState(false);\n  const [isSpaceDown, setIsSpaceDown] = useState(false);\n  const highlighted = useMemo(() => new Set(highlightIds || []), [highlightIds]);\n  const [viewport, setViewport] = useState({ x: 0, y: 0, width: 800, height: 600 });\n\n  // Space = pan\n  useEffect(() => {\n    const down = e => {\n      if (e.code === 'Space' && !e.repeat) {\n        setIsSpaceDown(true); e.preventDefault();\n      }\n    };\n    const up = e => {\n      if (e.code === 'Space') {\n        setIsSpaceDown(false); e.preventDefault();\n      }\n    };\n    window.addEventListener('keydown', down); window.addEventListener('keyup', up);\n    return () => {\n      window.removeEventListener('keydown', down); window.removeEventListener('keyup', up);\n    };\n  }, []);\n\n  const worldPoint = useCallback((clientX, clientY) => {\n    const rect = svgRef.current?.getBoundingClientRect?.();\n    if (!rect) return { x: 0, y: 0 };\n    return { x: (clientX - rect.left - transform.x) / transform.scale, y: (clientY - rect.top - transform.y) / transform.scale };\n  }, [transform]);\n\n  const nodeAt = useCallback((x, y) => nodes.find(n => inRect(x, y, n.x, n.y, NODE_WIDTH, NODE_HEIGHT)), [nodes]);\n\n  const addEdgeValidated = useCallback((from, to) => {\n    if (!from || !to || from === to) return false;\n    if (edges.some(e => e.from === from && e.to === to)) return false;\n    if (isReachable(edges, to, from)) return false; // prevent cycles\n    setEdges([...edges, { id: Math.random().toString(36).slice(2), from, to, created: Date.now() }]);\n    return true;\n  }, [edges, setEdges]);\n\n  const handleStartConnect = useCallback(node => {\n    const x0 = node.x + NODE_WIDTH - 14; const y0 = node.y + NODE_HEIGHT - 14;\n    setConnecting({ from: node.id, x0, y0, x: x0, y: y0 });\n  }, []);\n\n  const handleMouseDownNode = useCallback((node, e) => {\n    const pt = worldPoint(e.clientX, e.clientY);\n    if (e.shiftKey) {\n      setSelectedIds(prev => prev.includes(node.id) ? prev.filter(id => id !== node.id) : [...prev, node.id]);\n    } else {\n      if (!selectedIds.includes(node.id)) setSelectedIds([node.id]);\n      setDrag({ nodes: selectedIds.includes(node.id) ? selectedIds : [node.id], startX: pt.x, startY: pt.y, offsets: nodes.filter(n => selectedIds.includes(n.id) || n.id === node.id).map(n => ({ id: n.id, dx: n.x - pt.x, dy: n.y - pt.y })) });\n    }\n  }, [worldPoint, selectedIds, setSelectedIds, nodes]);\n\n  const handleMouseMove = useCallback(e => {\n    const pt = worldPoint(e.clientX, e.clientY);\n    if (drag) {\n      const dx = pt.x - drag.startX, dy = pt.y - drag.startY;\n      setNodes(nodes.map(n => {\n        const off = drag.offsets.find(o => o.id === n.id); if (off) return { ...n, x: snap(drag.startX + off.dx + dx), y: snap(drag.startY + off.dy + dy) }; return n;\n      }));\n    } else if (isPanning) {\n      setTransform(prev => ({ ...prev, x: prev.x + e.movementX, y: prev.y + e.movementY }));\n    } else if (connecting) {\n      setConnecting(prev => ({ ...prev, x: pt.x, y: pt.y }));\n    }\n  }, [drag, isPanning, connecting, worldPoint, nodes, setNodes]);\n\n  const handleMouseUp = useCallback(e => {\n    if (connecting) {\n      const pt = worldPoint(e.clientX, e.clientY); const target = nodeAt(pt.x, pt.y);\n      if (target) addEdgeValidated(connecting.from, target.id);\n      setConnecting(null);\n    }\n    setDrag(null); setIsPanning(false);\n  }, [connecting, worldPoint, nodeAt, addEdgeValidated]);\n\n  const handleWheel = useCallback(e => {\n    e.preventDefault();\n    const rect = svgRef.current?.getBoundingClientRect?.();\n    if (!rect) return;\n    const px = e.clientX - rect.left, py = e.clientY - rect.top;\n    const wx = (px - transform.x) / transform.scale, wy = (py - transform.y) / transform.scale;\n    const newScale = Math.min(2, Math.max(0.25, transform.scale * (e.deltaY < 0 ? 1.1 : 0.9)));\n    setTransform({ x: px - wx * newScale, y: py - wy * newScale, scale: newScale });\n  }, [transform]);\n\n  const handleDoubleClick = useCallback(e => {\n    const pt = worldPoint(e.clientX, e.clientY); const nn = makeNode('claim', pt.x, pt.y, 'New node');\n    setNodes([...nodes, nn]); setSelectedIds([nn.id]);\n  }, [worldPoint, nodes, setNodes, setSelectedIds]);\n\n  const handleCanvasMouseDown = useCallback(e => {\n    if (e.button === 1 || (e.button === 0 && (e.metaKey || e.ctrlKey || isSpaceDown))) {\n      setIsPanning(true);\n    } else if (!e.shiftKey) {\n      setSelectedIds([]);\n    }\n  }, [isSpaceDown, setSelectedIds]);\n\n  // Viewport for minimap\n  useEffect(() => {\n    const rect = svgRef.current?.getBoundingClientRect?.();\n    if (rect) setViewport({ x: -transform.x / transform.scale, y: -transform.y / transform.scale, width: rect.width / transform.scale, height: rect.height / transform.scale });\n  }, [transform]);\n\n  // Export\n  const exportCanvas = useCallback((format = 'png') => {\n    const svg = svgRef.current; if (!svg) return;\n    const serializer = new XMLSerializer(); const svgString = serializer.serializeToString(svg);\n    const svgBlob = new Blob([svgString], { type: 'image/svg+xml;charset=utf-8' });\n    if (format === 'svg') {\n      const url = URL.createObjectURL(svgBlob); const a = document.createElement('a'); a.href = url; a.download = 'thesis-canvas.svg'; a.click(); URL.revokeObjectURL(url);\n    } else {\n      const img = new Image(); const url = URL.createObjectURL(svgBlob);\n      img.onload = () => {\n        const c = document.createElement('canvas'); c.width = svg.clientWidth * 2; c.height = svg.clientHeight * 2; const ctx = c.getContext('2d'); ctx.scale(2, 2); ctx.drawImage(img, 0, 0); c.toBlob(b => {\n          const u = URL.createObjectURL(b); const a = document.createElement('a'); a.href = u; a.download = 'thesis-canvas.png'; a.click(); URL.revokeObjectURL(u);\n        }); URL.revokeObjectURL(url);\n      };\n      img.src = url;\n    }\n  }, []);\n\n  return (\n    <div className=\"relative h-[640px] overflow-hidden rounded-2xl border border-slate-200 bg-slate-50\">\n      <div className=\"pointer-events-none absolute left-2 top-2 z-10 flex gap-1 text-[11px]\">\n        <Pill tone=\"slate\">Space/Meta/Ctrl + Drag = Pan</Pill>\n        <Pill tone=\"blue\">Wheel = Zoom ({Math.round(transform.scale * 100)}%)</Pill>\n        <Pill tone=\"amber\">Shift+Click = Multi-select</Pill>\n      </div>\n      <div className=\"absolute right-2 top-2 z-10 flex gap-1\">\n        <Button size=\"sm\" onClick={() => exportCanvas('svg')}>Export SVG</Button>\n        <Button size=\"sm\" onClick={() => exportCanvas('png')}>Export PNG</Button>\n      </div>\n      <svg\n        ref={svgRef}\n        className=\"h-full w-full\"\n        style={{ cursor: isPanning ? 'grabbing' : (isSpaceDown ? 'grab' : 'default') }}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onWheel={handleWheel}\n        onDoubleClick={handleDoubleClick}\n        onMouseDown={handleCanvasMouseDown}\n      >\n        <defs>\n          <pattern\n            id=\"grid\" width=\"24\" height=\"24\"\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <path\n              d=\"M 24 0 L 0 0 0 24\" fill=\"none\" stroke=\"#e2e8f0\"\n              strokeWidth=\"1\"\n            />\n          </pattern>\n          <marker\n            id=\"arrow\" viewBox=\"0 0 10 10\" refX=\"10\"\n            refY=\"5\" markerWidth=\"6\" markerHeight=\"6\"\n            orient=\"auto-start-reverse\"\n          >\n            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#64748b\"/>\n          </marker>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n        <g transform={`translate(${transform.x},${transform.y}) scale(${transform.scale})`}>\n          <g className=\"edges\">\n            {edges.map(e => {\n              const from = nodes.find(n => n.id === e.from); const to = nodes.find(n => n.id === e.to); if (!from || !to) return null;\n              const x1 = from.x + NODE_WIDTH, y1 = from.y + NODE_HEIGHT / 2; const x2 = to.x, y2 = to.y + NODE_HEIGHT / 2; const d = bezierPath(x1, y1, x2, y2);\n              const high = selectedIds.includes(from.id) || selectedIds.includes(to.id) || (highlighted.has(from.id) && highlighted.has(to.id));\n              return (\n                <path\n                  key={e.id} d={d} fill=\"none\"\n                  stroke={high ? '#0ea5e9' : '#64748b'} strokeWidth={high ? '3' : '2'} markerEnd=\"url(#arrow)\"\n                  opacity={high ? 1 : 0.7}\n                />\n              );\n            })}\n          </g>\n          {connecting && (\n            <path\n              d={bezierPath(connecting.x0, connecting.y0, connecting.x, connecting.y)} fill=\"none\" stroke=\"#0ea5e9\"\n              strokeWidth=\"2\" strokeDasharray=\"5,5\"\n            />\n          )}\n          <g className=\"nodes\">\n            {nodes.map(n => (\n              <NodeView\n                key={n.id} node={n} selected={selectedIds.includes(n.id)}\n                isHighlighted={highlighted.has(n.id)} onMouseDown={handleMouseDownNode} onClick={() => setSelectedIds([n.id])}\n                onDoubleClick={() => { /* Node double-click handled by parent */ }}\n                onStartConnect={handleStartConnect}\n              />\n            ))}\n          </g>\n        </g>\n      </svg>\n      <Minimap nodes={nodes} edges={edges} viewport={viewport} />\n    </div>\n  );\n}\n\n// ———————————— Inspector ————————————\nfunction Inspector({ nodes, selectedIds, updateNode, deleteNodes }) {\n  const selectedNodes = nodes.filter(n => selectedIds.includes(n.id));\n  if (selectedNodes.length === 0) return (\n    <Card title=\"Inspector\"><div className=\"text-[12px] text-slate-500\">Select a node to edit its properties.</div></Card>\n  );\n  if (selectedNodes.length > 1) return (\n    <Card title=\"Inspector\" right={<Pill tone=\"blue\">{selectedNodes.length} selected</Pill>} actions={<Button size=\"sm\" variant=\"danger\" onClick={() => deleteNodes(selectedIds)}>Delete All</Button>}>\n      <div className=\"space-y-2 text-[12px]\">\n        <div className=\"text-slate-600\">Multiple nodes selected</div>\n        <div className=\"space-y-1\">\n          {selectedNodes.map(n => (\n            <div key={n.id} className=\"flex items-center gap-2 rounded border border-slate-200 px-2 py-1\">\n              <span className=\"font-medium\">{TYPES.find(t => t.k === n.type)?.icon}</span>\n              <span className=\"truncate text-slate-700\">{n.text || 'Untitled'}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n  const node = selectedNodes[0];\n  return (\n    <Card title=\"Inspector\" right={<Pill tone=\"violet\">{node.type}</Pill>} actions={<Button size=\"sm\" variant=\"danger\" onClick={() => deleteNodes([node.id])}>Delete</Button>}>\n      <div className=\"space-y-3 text-[13px]\">\n        <div>\n          <label htmlFor={`node-type-${node.id}`} className=\"mb-1 block text-slate-600\">Type</label>\n          <select\n            id={`node-type-${node.id}`}\n            value={node.type}\n            onChange={e => updateNode({ ...node, type: e.target.value })}\n            className=\"w-full rounded-md border border-slate-300 px-2 py-1\"\n          >\n            {TYPES.map(t => <option key={t.k} value={t.k}>{t.icon} {t.label}</option>)}\n          </select>\n        </div>\n        <div>\n          <label htmlFor={`node-content-${node.id}`} className=\"mb-1 block text-slate-600\">Content</label>\n          <textarea\n            id={`node-content-${node.id}`}\n            value={node.text}\n            onChange={e => updateNode({ ...node, text: e.target.value })}\n            className=\"h-24 w-full rounded-md border border-slate-300 p-2 text-[12px]\"\n            placeholder=\"Enter your thesis, claim, or evidence here…\"\n          />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\" id=\"collapsed\" checked={!!node.collapsed}\n            onChange={e => updateNode({ ...node, collapsed: e.target.checked })} className=\"rounded\"\n          />\n          <label htmlFor=\"collapsed\" className=\"text-slate-700\">Collapse children</label>\n        </div>\n        <div className=\"border-t border-slate-200 pt-2 text-[11px] text-slate-500\">\n          <div>ID: {node.id}</div>\n          <div>Position: ({node.x}, {node.y})</div>\n          <div>Created: {new Date(node.created || Date.now()).toLocaleString()}</div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\n// ———————————— Palette / Saves / Tests ————————————\nfunction Palette({ onAdd }) {\n  return (\n    <Card title=\"Palette\">\n      <div className=\"grid grid-cols-2 gap-2 text-[12px]\">\n        {TYPES.map(t => (\n          <button key={t.k} onClick={() => onAdd(t.k)} className=\"flex items-center gap-2 rounded-md border border-slate-200 bg-white px-2 py-1 hover:bg-slate-50\">\n            <span>{t.icon}</span><span>{t.label}</span>\n          </button>\n        ))}\n      </div>\n    </Card>\n  );\n}\n\nfunction Saves({ saves, setSaves, onLoad, graph, canvasApiService }) {\n  const [q, setQ] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [saveName, setSaveName] = useState('');\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  const filtered = saves.filter(s => s.name.toLowerCase().includes(q.toLowerCase()));\n\n  const handleSave = async() => {\n    if (!saveName.trim()) {\n      setError('Please enter a name for your canvas');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const result = await canvasApiService.createCanvas(saveName, graph);\n\n    if (result.success) {\n      setSaves([result.data, ...saves.filter(s => s.id !== result.data.id)]);\n      setSaveName('');\n      setShowSaveDialog(false);\n      // Set this as current canvas for auto-save\n      if (typeof onLoad === 'function') {\n        onLoad(result.data.graph, result.data.id);\n      }\n    } else {\n      setError(result.error);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleLoad = async(canvas) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      onLoad(canvas.graph, canvas.id); // Pass canvas ID for auto-save\n    } catch {\n      setError('Failed to load canvas');\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleDelete = async(id) => {\n    setIsLoading(true);\n    setError(null);\n\n    const result = await canvasApiService.deleteCanvas(id);\n\n    if (result.success) {\n      setSaves(saves.filter(s => s.id !== id));\n    } else {\n      setError(result.error);\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <Card title=\"Saves\" right={<Pill tone=\"slate\">{filtered.length}</Pill>}>\n      <div className=\"mb-2 space-y-2\">\n        <div className=\"flex items-center gap-2\">\n          <input\n            value={q}\n            onChange={e => setQ(e.target.value)}\n            placeholder=\"Filter…\"\n            className=\"w-full rounded-md border border-slate-300 px-2 py-1 text-[12px]\"\n          />\n          <Button\n            size=\"sm\"\n            onClick={() => setShowSaveDialog(true)}\n            disabled={isLoading}\n          >\n            Save\n          </Button>\n        </div>\n\n        {showSaveDialog && (\n          <div className=\"rounded-md border border-blue-200 bg-blue-50 p-2\">\n            <div className=\"mb-2\">\n              <input\n                value={saveName}\n                onChange={e => setSaveName(e.target.value)}\n                placeholder=\"Enter canvas name...\"\n                className=\"w-full rounded-md border border-slate-300 px-2 py-1 text-[12px]\"\n                onKeyDown={e => {\n                  if (e.key === 'Enter') handleSave();\n                  if (e.key === 'Escape') setShowSaveDialog(false);\n                }}\n                autoFocus\n              />\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                size=\"sm\" variant=\"primary\" onClick={handleSave}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Saving...' : 'Save Canvas'}\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={() => setShowSaveDialog(false)}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"rounded-md border border-red-200 bg-red-50 p-2 text-[11px] text-red-700\">\n            {error}\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-1 text-[12px]\">\n        {filtered.map(s => (\n          <div key={s.id} className=\"flex items-center justify-between rounded-lg border border-slate-200 px-2 py-1\">\n            <div className=\"flex-1 truncate\">\n              <div className=\"font-medium\">{s.name}</div>\n              {s.description && <div className=\"text-slate-500 text-[10px]\">{s.description}</div>}\n              <div className=\"text-slate-400 text-[10px]\">\n                Updated {new Date(s.updated).toLocaleDateString()}\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <button\n                className=\"text-blue-700 hover:text-blue-900\"\n                onClick={() => handleLoad(s)}\n                disabled={isLoading}\n              >\n                Load\n              </button>\n              <button\n                className=\"text-rose-600 hover:text-rose-800\"\n                onClick={() => handleDelete(s.id)}\n                disabled={isLoading}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        ))}\n        {filtered.length === 0 && (\n          <div className=\"text-slate-500\">\n            {saves.length === 0 ? 'No canvases saved yet.' : 'No matches found.'}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n\nfunction Tests({ nodes, edges, _currentCanvasId, _saves, _isLoadingCanvases }) {\n  const ids = new Set(nodes.map(n => n.id));\n  const allNodesExist = edges.every(e => ids.has(e.from) && ids.has(e.to));\n  const noCycles = edges.every(e => !isReachable(edges, e.to, e.from));\n  const historyInitPass = Array.isArray(nodes) && Array.isArray(edges);\n  const clipboardMockPass = (() => {\n    try {\n      const testData = { nodes: [{ id: 'x' }], edges: [{ id: 'e1', from: 'x', to: 'y' }] };\n      const s = JSON.stringify(testData);\n      JSON.parse(s);\n      return true;\n    } catch {\n      return false;\n    }\n  })();\n  const tests = [\n    { name: 'Edges reference existing nodes', pass: allNodesExist },\n    { name: 'Graph is acyclic (DAG)', pass: noCycles },\n    { name: 'History initialized', pass: historyInitPass },\n    { name: 'Clipboard serialization (mock)', pass: clipboardMockPass }\n  ];\n  return (\n    <Card title=\"Dev / Sanity Tests\">\n      <ul className=\"space-y-1 text-[13px]\">\n        {tests.map(t => (\n          <li key={t.name} className=\"flex items-center justify-between\">\n            <span className=\"text-slate-700\">{t.name}</span>\n            <span className={`ml-2 ${t.pass ? 'text-emerald-600' : 'text-rose-600'}`}>{t.pass ? 'PASS' : 'FAIL'}</span>\n          </li>\n        ))}\n      </ul>\n    </Card>\n  );\n}\n\n// ———————————— Template ————————————\nfunction templateThesis(centerX = 240, centerY = 220) {\n  const root = makeNode('thesis', centerX, centerY, 'Investment Thesis: Identify companies with durable competitive advantages, strong unit economics, and rational capital allocation');\n  const blocks = [\n    makeNode('claim', centerX + 220, centerY - 180, 'Business Model: Recurring revenue with high gross margins and negative working capital'),\n    makeNode('claim', centerX + 220, centerY - 60, 'Competitive Moat: Network effects and switching costs create pricing power'),\n    makeNode('claim', centerX + 220, centerY + 60, 'Growth Runway: Large TAM with <10% penetration and expanding use cases'),\n    makeNode('claim', centerX + 220, centerY + 180, 'Management: Founder-led with significant ownership and long-term incentives'),\n    makeNode('risk', centerX + 440, centerY - 120, 'Key Risk: Regulatory changes could impact business model'),\n    makeNode('risk', centerX + 440, centerY, 'Bear Case: Competition from big tech with deeper pockets'),\n    makeNode('evidence', centerX + 440, centerY + 120, 'Evidence: 40% YoY revenue growth, 120% net retention, 80% gross margins'),\n    makeNode('data', centerX + 660, centerY - 60, 'Valuation: Trading at 8x revenue vs peers at 12x'),\n    makeNode('decision', centerX + 660, centerY + 60, 'Decision: Initiate position at 2% with 30% margin of safety')\n  ];\n  const nodes = [root, ...blocks];\n  const edges = blocks.slice(0, 4).map(block => ({ id: Math.random().toString(36).slice(2), from: root.id, to: block.id, created: Date.now() }));\n  edges.push(\n    { id: Math.random().toString(36).slice(2), from: blocks[1].id, to: blocks[4].id, created: Date.now() },\n    { id: Math.random().toString(36).slice(2), from: blocks[2].id, to: blocks[6].id, created: Date.now() },\n    { id: Math.random().toString(36).slice(2), from: blocks[6].id, to: blocks[8].id, created: Date.now() }\n  );\n  return { nodes, edges };\n}\n\n// ———————————— Enhanced Canvas Component ————————————\nfunction EnhancedThesisCanvas() {\n  // Template is pure/side-effect free\n  const initialGraph = useMemo(() => templateThesis(240, 220), []);\n\n  // Safe history\n  const { state: graphState, pushState, undo, redo, canUndo, canRedo } = useHistory(initialGraph);\n\n  // Use safe defaults on FIRST render (guards graphState undefined)\n  const [nodes, setNodesInternal] = useState(() => (graphState?.nodes ?? initialGraph.nodes ?? []));\n  const [edges, setEdgesInternal] = useState(() => (graphState?.edges ?? initialGraph.edges ?? []));\n\n  const [selectedIds, setSelectedIds] = useState([]);\n  const [saves, setSaves] = useState([]);\n  const [filteredNodeIds, setFilteredNodeIds] = useState([]);\n  const [currentCanvasId, setCurrentCanvasId] = useState(null);\n  const [isLoadingCanvases, setIsLoadingCanvases] = useState(true);\n\n  // Wrapped setters push to history with validated shapes\n  const setNodes = useCallback(newNodes => {\n    const safeNodes = Array.isArray(newNodes) ? newNodes : [];\n    setNodesInternal(safeNodes);\n    pushState({ nodes: safeNodes, edges });\n  }, [edges, pushState]);\n\n  const setEdges = useCallback(newEdges => {\n    const safeEdges = Array.isArray(newEdges) ? newEdges : [];\n    setEdgesInternal(safeEdges);\n    pushState({ nodes, edges: safeEdges });\n  }, [nodes, pushState]);\n\n  // Apply history updates safely\n  useEffect(() => {\n    if (!graphState) return;\n    setNodesInternal(Array.isArray(graphState.nodes) ? graphState.nodes : []);\n    setEdgesInternal(Array.isArray(graphState.edges) ? graphState.edges : []);\n  }, [graphState]);\n\n  const updateNode = useCallback(patch => {\n    setNodes(nodes.map(n => n.id === patch.id ? patch : n));\n  }, [nodes, setNodes]);\n\n  const deleteNodes = useCallback(ids => {\n    const S = new Set(ids);\n    setEdges(edges.filter(e => !S.has(e.from) && !S.has(e.to)));\n    setNodes(nodes.filter(n => !S.has(n.id)));\n    setSelectedIds([]);\n  }, [nodes, edges, setNodes, setEdges]);\n\n  const addNode = useCallback(type => {\n    const nn = makeNode(type, 120 + Math.random() * 400, 120 + Math.random() * 300, '');\n    setNodes([...nodes, nn]);\n    setSelectedIds([nn.id]);\n  }, [nodes, setNodes]);\n\n  const loadGraph = useCallback((graph, canvasId = null) => {\n    if (!graph || !Array.isArray(graph.nodes) || !Array.isArray(graph.edges)) {\n      console.warn('loadGraph: invalid graph object');\n      return;\n    }\n    setNodes(graph.nodes);\n    setEdges(graph.edges);\n    setSelectedIds([]);\n    setCurrentCanvasId(canvasId); // Set for auto-save\n  }, [setNodes, setEdges]);\n\n  // Load user's canvases on mount\n  useEffect(() => {\n    const loadCanvases = async() => {\n      setIsLoadingCanvases(true);\n      const result = await canvasApiService.listCanvases();\n      if (result.success) {\n        setSaves(result.data);\n      }\n      setIsLoadingCanvases(false);\n    };\n\n    loadCanvases();\n  }, []);\n\n  // Auto-save functionality (debounced)\n  useEffect(() => {\n    if (!currentCanvasId || !nodes.length) return;\n\n    const timeoutId = setTimeout(async() => {\n      const graph = { nodes, edges };\n      const result = await canvasApiService.updateCanvas(currentCanvasId, graph);\n      if (result.success) {\n        // Update the saves list with the updated canvas\n        setSaves(prev => prev.map(s => s.id === currentCanvasId ? result.data : s));\n      }\n    }, 2000); // Auto-save after 2 seconds of inactivity\n\n    return () => clearTimeout(timeoutId);\n  }, [nodes, edges, currentCanvasId]);\n\n\n  // Keyboard shortcuts (copy/paste/undo/redo/select-all/delete)\n  useEffect(() => {\n    const onKey = e => {\n      if ((e.key === 'Delete' || e.key === 'Backspace') && selectedIds.length > 0) {\n        e.preventDefault();\n        deleteNodes(selectedIds);\n      }\n      if (e.ctrlKey || e.metaKey) {\n        if (e.key === 'z' && !e.shiftKey && canUndo) {\n          e.preventDefault(); undo();\n        } else if ((e.key === 'z' && e.shiftKey) || e.key === 'y') {\n          if (canRedo) {\n            e.preventDefault(); redo();\n          }\n        }\n        if (e.key === 'c' && selectedIds.length > 0) {\n          e.preventDefault();\n          try {\n            const selectedSet = new Set(selectedIds);\n            const pickedNodes = nodes.filter(n => selectedIds.includes(n.id));\n            // Also copy internal edges between selected nodes\n            const pickedEdges = edges.filter(e => selectedSet.has(e.from) && selectedSet.has(e.to));\n            const clipboardData = { nodes: pickedNodes, edges: pickedEdges };\n            localStorage.setItem('clipboard-data', JSON.stringify(clipboardData));\n          } catch {\n            // Ignore clipboard errors\n          }\n        } else if (e.key === 'v') {\n          e.preventDefault();\n          try {\n            const data = localStorage.getItem('clipboard-data');\n            if (data) {\n              const clipboardData = JSON.parse(data);\n              // Handle legacy clipboard format (nodes only)\n              const clipboardNodes = clipboardData.nodes || clipboardData;\n              const clipboardEdges = clipboardData.edges || [];\n\n              // Create ID mapping for pasted nodes\n              const idMap = new Map();\n              const pastedNodes = clipboardNodes.map(n => {\n                const newId = Math.random().toString(36).slice(2);\n                idMap.set(n.id, newId);\n                return { ...n, id: newId, x: n.x + 20, y: n.y + 20 };\n              });\n\n              // Create pasted edges with remapped IDs\n              const pastedEdges = clipboardEdges.map(e => ({\n                ...e,\n                id: Math.random().toString(36).slice(2),\n                from: idMap.get(e.from),\n                to: idMap.get(e.to),\n                created: Date.now()\n              }));\n\n              setNodes([...nodes, ...pastedNodes]);\n              setEdges([...edges, ...pastedEdges]);\n              setSelectedIds(pastedNodes.map(n => n.id));\n            }\n          } catch {\n            // Ignore clipboard parsing errors\n          }\n        }\n        if (e.key === 'a') {\n          e.preventDefault(); setSelectedIds(nodes.map(n => n.id));\n        }\n      }\n    };\n    window.addEventListener('keydown', onKey);\n    return () => window.removeEventListener('keydown', onKey);\n  }, [selectedIds, nodes, edges, deleteNodes, setNodes, undo, redo, canUndo, canRedo]);\n\n  return (\n    <div className=\"grid grid-cols-12 gap-4\">\n      <div className=\"col-span-12 space-y-4 lg:col-span-3\">\n        <Palette onAdd={addNode} />\n        <SearchPanel nodes={nodes} onNodeSelect={id => setSelectedIds([id])} onFilter={setFilteredNodeIds} />\n        <Saves\n          saves={saves}\n          setSaves={setSaves}\n          onLoad={loadGraph}\n          graph={{ nodes, edges }}\n          canvasApiService={canvasApiService}\n        />\n        <Tests\n          nodes={nodes} edges={edges} currentCanvasId={currentCanvasId}\n          saves={saves} isLoadingCanvases={isLoadingCanvases}\n        />\n      </div>\n      <div className=\"col-span-12 lg:col-span-6\">\n        <Canvas\n          nodes={nodes}\n          setNodes={setNodes}\n          edges={edges}\n          setEdges={setEdges}\n          selectedIds={selectedIds}\n          setSelectedIds={setSelectedIds}\n          highlightIds={filteredNodeIds}\n        />\n        <div className=\"mt-4 grid grid-cols-4 gap-2\">\n          {TYPES.map(t => {\n            const count = nodes.filter(n => n.type === t.k).length; return (\n              <div key={t.k} className=\"flex items-center justify-between rounded-lg border border-slate-200 bg-white px-3 py-2\">\n                <span className=\"text-[12px] text-slate-600\">{t.icon} {t.label}</span>\n                <span className=\"text-[13px] font-semibold\">{count}</span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"col-span-12 space-y-4 lg:col-span-3\">\n        <Inspector\n          nodes={nodes}\n          selectedIds={selectedIds}\n          updateNode={updateNode}\n          deleteNodes={deleteNodes}\n        />\n        <Card title=\"Keyboard Shortcuts\">\n          <div className=\"space-y-1 text-[11px] text-slate-700\">\n            <div>• <kbd>Delete</kbd> — Remove selected nodes</div>\n            <div>• <kbd>Ctrl/⌘+Z</kbd> — Undo</div>\n            <div>• <kbd>Ctrl/⌘+Shift+Z</kbd> / <kbd>Ctrl/⌘+Y</kbd> — Redo</div>\n            <div>• <kbd>Ctrl/⌘+C</kbd> — Copy</div>\n            <div>• <kbd>Ctrl/⌘+V</kbd> — Paste</div>\n            <div>• <kbd>Ctrl/⌘+A</kbd> — Select all</div>\n            <div>• <kbd>Shift+Click</kbd> — Multi-select</div>\n            <div>• <kbd>Space/Meta/Ctrl + Drag</kbd> — Pan</div>\n            <div>• <kbd>Double-click</kbd> — Create node</div>\n          </div>\n        </Card>\n        <Card title=\"Persistence Status\" right={<Pill tone=\"amber\">Mock Mode</Pill>}>\n          <div className=\"space-y-2 text-[11px]\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-slate-600\">Auto-save</span>\n              <span className=\"text-emerald-600\">{currentCanvasId ? 'Enabled' : 'Disabled'}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-slate-600\">Canvas ID</span>\n              <span className=\"text-slate-600 font-mono\">{currentCanvasId || 'None'}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-slate-600\">Saved Canvases</span>\n              <span className=\"text-emerald-600\">{saves.length}</span>\n            </div>\n            {isLoadingCanvases && (\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-slate-600\">Loading...</span>\n                <span className=\"text-amber-600\">⏳</span>\n              </div>\n            )}\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// ———————————— Main ThesisCanvas Component ————————————\nconst ThesisCanvas = () => {\n  const canvasData = {\n    title: 'Investment Thesis Canvas',\n    description: 'Build and visualize your investment thesis framework'\n  };\n\n  return (\n    <div className=\"min-h-[100dvh] bg-background text-foreground\">\n      <Header />\n\n      <div className=\"pt-[60px]\">\n        {/* Page Header */}\n        <div className=\"border-b border-border bg-card\">\n          <div className=\"flex items-center justify-between p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary\">\n                <svg viewBox=\"0 0 24 24\" className=\"h-4 w-4 text-white\">\n                  <path\n                    d=\"M9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <div className=\"text-xs tracking-wide text-muted-foreground\">FinanceAnalyst Pro</div>\n                <div className=\"text-[13px] font-semibold text-foreground\">Thesis Canvas</div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 text-[12px]\">\n              <div className=\"px-2 py-1 rounded-md bg-primary/10 text-primary font-medium\">\n                Canvas Mode\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content with Enhanced Canvas */}\n        <div className=\"p-6\">\n          <EnhancedThesisCanvas />\n        </div>\n      </div>\n\n      {/* Persistent CLI */}\n      <PersistentCLI\n        currentContext={{ page: 'canvas', canvasData }}\n        onNavigate={(path) => {\n          // Handle navigation if needed\n          console.log('Navigate to:', path);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ThesisCanvas;\n\n"],"names":["canvasApiService","constructor","this","baseUrl","mockMode","mockStorage","Map","mockUserId","validateGraph","graph","Error","Array","isArray","nodes","edges","node","id","x","y","nodeIds","Set","map","n","edge","has","from","to","createCanvas","name","description","Date","now","Math","random","toString","slice","canvas","toISOString","userId","created","updated","version","set","success","data","response","fetch","method","headers","body","JSON","stringify","ok","status","statusText","json","error","message","updateCanvas","existing","get","getCanvas","listCanvases","values","filter","sort","a","b","url","deleteCanvas","delete","initializeMockData","sampleCanvas1","type","text","pins","collapsed","exportMockData","importMockData","canvases","clear","NODE_WIDTH","NODE_HEIGHT","NODE_RADIUS","TYPES","k","label","color","icon","Card","React","memo","title","right","children","className","actions","jsxs","jsx","displayName","Pill","tone","onClick","tones","slate","blue","amber","green","red","violet","base","inter","role","tabIndex","Button","variant","size","disabled","default","primary","danger","ghost","sm","md","lg","snap","v","g","round","bezierPath","x1","y1","x2","y2","dx","max","abs","makeNode","isReachable","start","target","forEach","e","push","seen","st","length","pop","w","add","NodeView","selected","onMouseDown","onStartConnect","onDoubleClick","isHighlighted","def","find","t","isHovered","setIsHovered","useState","transform","stopPropagation","onMouseEnter","onMouseLeave","style","cursor","rx","ry","width","height","fill","opacity","stroke","strokeWidth","fontSize","fontWeight","xmlns","display","WebkitLineClamp","WebkitBoxOrient","overflow","r","d","strokeLinecap","textAnchor","Minimap","viewport","bounds","useMemo","minX","minY","maxX","maxY","xs","ys","min","viewBox","SearchPanel","onNodeSelect","onFilter","query","setQuery","typeFilter","setTypeFilter","filteredNodes","f","q","toLowerCase","includes","useEffect","value","onChange","placeholder","Canvas","setNodes","setEdges","selectedIds","setSelectedIds","highlightIds","svgRef","useRef","drag","setDrag","connecting","setConnecting","setTransform","scale","isPanning","setIsPanning","isSpaceDown","setIsSpaceDown","highlighted","setViewport","down","code","repeat","preventDefault","up","window","addEventListener","removeEventListener","worldPoint","useCallback","clientX","clientY","rect","current","getBoundingClientRect","left","top","nodeAt","px","py","inRect","addEdgeValidated","some","handleStartConnect","x0","y0","handleMouseDownNode","pt","shiftKey","prev","startX","startY","offsets","dy","handleMouseMove","off","o","movementX","movementY","handleMouseUp","handleWheel","wx","wy","newScale","deltaY","handleDoubleClick","nn","handleCanvasMouseDown","button","metaKey","ctrlKey","exportCanvas","format","svg","svgString","XMLSerializer","serializeToString","svgBlob","Blob","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","img","Image","onload","c","clientWidth","clientHeight","ctx","getContext","drawImage","toBlob","u","src","ref","onMouseMove","onMouseUp","onWheel","patternUnits","refX","refY","markerWidth","markerHeight","orient","high","markerEnd","strokeDasharray","Inspector","updateNode","deleteNodes","selectedNodes","htmlFor","checked","toLocaleString","Palette","onAdd","Saves","saves","setSaves","onLoad","setQ","isLoading","setIsLoading","setError","saveName","setSaveName","showSaveDialog","setShowSaveDialog","filtered","s","handleSave","async","trim","result","onKeyDown","key","autoFocus","toLocaleDateString","handleLoad","handleDelete","Tests","_currentCanvasId","_saves","_isLoadingCanvases","ids","tests","pass","every","testData","parse","EnhancedThesisCanvas","initialGraph","centerX","centerY","root","blocks","block","templateThesis","state","graphState","pushState","undo","redo","canUndo","canRedo","initialState","safeInit","history","setHistory","currentIndex","setCurrentIndex","newState","next","useHistory","setNodesInternal","setEdgesInternal","filteredNodeIds","setFilteredNodeIds","currentCanvasId","setCurrentCanvasId","isLoadingCanvases","setIsLoadingCanvases","newNodes","safeNodes","newEdges","safeEdges","patch","S","addNode","loadGraph","canvasId","loadCanvases","timeoutId","setTimeout","clearTimeout","onKey","selectedSet","clipboardData","localStorage","setItem","getItem","clipboardNodes","clipboardEdges","idMap","pastedNodes","newId","pastedEdges","count","ThesisCanvas","Header","strokeLinejoin","PersistentCLI","currentContext","page","canvasData","onNavigate","path"],"mappings":"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"}
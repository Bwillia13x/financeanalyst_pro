{"version":3,"file":"dataFetching-DyOocUu_.js","sources":["../../src/utils/apiKeyValidator.js","../../src/utils/apiLogger.js","../../src/services/financialModelingEngine.js","../../src/services/lboModelingEngine.js","../../src/services/dataFetching.js"],"sourcesContent":["// API Key Validation Utility\n// Validates API keys and provides helpful feedback for setup\n\nimport axios from 'axios';\n\nexport class ApiKeyValidator {\n  constructor() {\n    this.validationResults = new Map();\n    this.lastValidation = null;\n  }\n\n  /**\n   * Validate all configured API keys\n   * @returns {Promise<Object>} Validation results for all services\n   */\n  async validateAllKeys() {\n    const results = {\n      timestamp: new Date(),\n      overall: 'unknown',\n      services: {},\n      recommendations: []\n    };\n\n    // Get all API keys from environment\n    const apiKeys = {\n      alphaVantage: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY,\n      fmp: import.meta.env.VITE_FMP_API_KEY,\n      quandl: import.meta.env.VITE_QUANDL_API_KEY,\n      fred: import.meta.env.VITE_FRED_API_KEY\n    };\n\n    // Validate each service\n    const validationPromises = [\n      this.validateAlphaVantage(apiKeys.alphaVantage),\n      this.validateFMP(apiKeys.fmp),\n      this.validateQuandl(apiKeys.quandl),\n      this.validateFRED(apiKeys.fred)\n    ];\n\n    try {\n      const [alphaVantage, fmp, quandl, fred] = await Promise.allSettled(validationPromises);\n\n      results.services = {\n        alphaVantage: this.processValidationResult(alphaVantage),\n        fmp: this.processValidationResult(fmp),\n        quandl: this.processValidationResult(quandl),\n        fred: this.processValidationResult(fred)\n      };\n\n      // Determine overall status\n      const validServices = Object.values(results.services).filter(\n        s => s.status === 'valid'\n      ).length;\n      const configuredServices = Object.values(results.services).filter(\n        s => s.status !== 'missing'\n      ).length;\n      const totalServices = Object.keys(results.services).length;\n\n      if (validServices === 0) {\n        results.overall = 'demo';\n        results.recommendations.push(\n          'No valid API keys found. Running in demo mode with mock data.'\n        );\n        results.recommendations.push(\n          'Add at least one API key (Alpha Vantage or FMP recommended) for live data.'\n        );\n      } else if (validServices < configuredServices || configuredServices < totalServices) {\n        results.overall = 'partial';\n        results.recommendations.push(\n          `${validServices}/${configuredServices} configured API keys are valid. Some features may use demo data.`\n        );\n      } else {\n        results.overall = 'complete';\n        results.recommendations.push('All API keys are valid. Full functionality available.');\n      }\n\n      this.lastValidation = results;\n      return results;\n    } catch (error) {\n      results.overall = 'error';\n      results.error = error.message;\n      results.recommendations.push('Error validating API keys. Check your internet connection.');\n      return results;\n    }\n  }\n\n  /**\n   * Validate Alpha Vantage API key\n   */\n  async validateAlphaVantage(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://www.alphavantage.co/query', {\n        params: {\n          function: 'GLOBAL_QUOTE',\n          symbol: 'AAPL',\n          apikey: apiKey\n        },\n        timeout: 10000\n      });\n\n      if (response.data['Error Message']) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data['Note']) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n\n      if (response.data['Global Quote']) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Financial Modeling Prep API key\n   */\n  async validateFMP(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://financialmodelingprep.com/api/v3/profile/AAPL', {\n        params: { apikey: apiKey },\n        timeout: 10000\n      });\n\n      if (response.data.error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Quandl API key\n   */\n  async validateQuandl(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://data.nasdaq.com/api/v3/datasets/WIKI/AAPL.json', {\n        params: { api_key: apiKey, rows: 1 },\n        timeout: 10000\n      });\n\n      if (response.data.quandl_error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.dataset) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate FRED API key\n   */\n  async validateFRED(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://api.stlouisfed.org/fred/series', {\n        params: {\n          series_id: 'GDP',\n          api_key: apiKey,\n          file_type: 'json'\n        },\n        timeout: 10000\n      });\n\n      if (response.data.error_message) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.seriess) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 400) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Process validation result from Promise.allSettled\n   */\n  processValidationResult(result) {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return { status: 'error', message: result.reason.message };\n    }\n  }\n\n  /**\n   * Get validation status for a specific service\n   */\n  getServiceStatus(serviceName) {\n    if (!this.lastValidation) {\n      return { status: 'unknown', message: 'Validation not run yet' };\n    }\n    return (\n      this.lastValidation.services[serviceName] || {\n        status: 'unknown',\n        message: 'Service not found'\n      }\n    );\n  }\n\n  /**\n   * Get overall validation status\n   */\n  getOverallStatus() {\n    if (!this.lastValidation) {\n      return 'unknown';\n    }\n    return this.lastValidation.overall;\n  }\n\n  /**\n   * Get recommendations for improving API setup\n   */\n  getRecommendations() {\n    if (!this.lastValidation) {\n      return ['Run API key validation first'];\n    }\n    return this.lastValidation.recommendations;\n  }\n\n  /**\n   * Check if demo mode should be used\n   */\n  shouldUseDemoMode() {\n    const status = this.getOverallStatus();\n    return status === 'demo' || status === 'unknown';\n  }\n}\n\n// Export singleton instance\nexport const apiKeyValidator = new ApiKeyValidator();\nexport default ApiKeyValidator;\n","/**\n * Enhanced API logging and monitoring utility\n * Provides comprehensive logging, metrics collection, and performance monitoring\n */\n\n// Log levels\nconst LOG_LEVELS = {\n  ERROR: 0,\n  WARN: 1,\n  INFO: 2,\n  DEBUG: 3,\n  TRACE: 4\n};\n\n// Default configuration\nconst DEFAULT_CONFIG = {\n  logLevel: LOG_LEVELS.INFO,\n  enableMetrics: true,\n  enablePerformanceTracking: true,\n  enableErrorTracking: true,\n  maxLogHistory: 1000,\n  metricsRetentionPeriod: 24 * 60 * 60 * 1000 // 24 hours\n};\n\n/**\n * API Logger class for comprehensive monitoring\n */\nclass ApiLogger {\n  constructor(config = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.logs = [];\n    this.metrics = new Map();\n    this.performanceData = new Map();\n    this.errorCounts = new Map();\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Log a message with specified level\n   * @param {string} level - Log level\n   * @param {string} message - Log message\n   * @param {Object} metadata - Additional metadata\n   */\n  log(level, message, metadata = {}) {\n    const levelValue = LOG_LEVELS[level.toUpperCase()] || LOG_LEVELS.INFO;\n\n    if (levelValue <= this.config.logLevel) {\n      const logEntry = {\n        timestamp: new Date().toISOString(),\n        level: level.toUpperCase(),\n        message,\n        metadata,\n        id: this.generateLogId()\n      };\n\n      this.logs.push(logEntry);\n      this.trimLogs();\n\n      // Console output with formatting\n      this.outputToConsole(logEntry);\n    }\n  }\n\n  /**\n   * Log API request start\n   * @param {string} service - Service name (e.g., 'FMP', 'ALPHA_VANTAGE')\n   * @param {string} endpoint - API endpoint\n   * @param {Object} params - Request parameters\n   * @returns {string} Request ID for tracking\n   */\n  logApiRequest(service, endpoint, params = {}) {\n    const requestId = this.generateRequestId();\n    const startTime = Date.now();\n\n    this.log('INFO', '🚀 API Request Started', {\n      requestId,\n      service,\n      endpoint,\n      params: this.sanitizeParams(params),\n      startTime\n    });\n\n    // Store performance tracking data\n    this.performanceData.set(requestId, {\n      service,\n      endpoint,\n      startTime,\n      params: this.sanitizeParams(params)\n    });\n\n    return requestId;\n  }\n\n  /**\n   * Log API request completion\n   * @param {string} requestId - Request ID from logApiRequest\n   * @param {boolean} success - Whether request was successful\n   * @param {Object} response - Response data (will be sanitized)\n   * @param {Error} error - Error object if request failed\n   */\n  logApiResponse(requestId, success, response = null, error = null) {\n    const performanceData = this.performanceData.get(requestId);\n    if (!performanceData) {\n      this.log('WARN', 'No performance data found for request', { requestId });\n      return;\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - performanceData.startTime;\n    const { service, endpoint } = performanceData;\n\n    if (success) {\n      this.log('INFO', '✅ API Request Completed', {\n        requestId,\n        service,\n        endpoint,\n        duration,\n        responseSize: this.getResponseSize(response),\n        success: true\n      });\n\n      this.recordMetric(service, 'success', 1);\n    } else {\n      this.log('ERROR', '❌ API Request Failed', {\n        requestId,\n        service,\n        endpoint,\n        duration,\n        error: error\n          ? {\n            message: error.message,\n            code: error.code,\n            status: error.response?.status,\n            statusText: error.response?.statusText\n          }\n          : null,\n        success: false\n      });\n\n      this.recordMetric(service, 'error', 1);\n      this.recordError(service, error);\n    }\n\n    // Record performance metrics\n    this.recordMetric(service, 'duration', duration);\n    this.recordMetric(service, 'requests', 1);\n\n    // Clean up performance data\n    this.performanceData.delete(requestId);\n  }\n\n  /**\n   * Log rate limiting events\n   * @param {string} service - Service name\n   * @param {number} waitTime - Time to wait in milliseconds\n   * @param {number} remainingRequests - Remaining requests in current period\n   */\n  logRateLimit(service, waitTime, remainingRequests = null) {\n    this.log('WARN', '⏱️ Rate Limit Hit', {\n      service,\n      waitTime,\n      remainingRequests,\n      action: 'throttling'\n    });\n\n    this.recordMetric(service, 'rateLimitHits', 1);\n  }\n\n  /**\n   * Log circuit breaker events\n   * @param {string} service - Service name\n   * @param {string} state - Circuit breaker state\n   * @param {string} action - Action taken\n   * @param {Object} metadata - Additional metadata\n   */\n  logCircuitBreaker(service, state, action, metadata = {}) {\n    const emoji =\n      {\n        OPEN: '🚨',\n        HALF_OPEN: '🔄',\n        CLOSED: '✅'\n      }[state] || '🔧';\n\n    this.log('WARN', `${emoji} Circuit Breaker ${action}`, {\n      service,\n      state,\n      action,\n      ...metadata\n    });\n\n    this.recordMetric(service, `circuitBreaker_${state.toLowerCase()}`, 1);\n  }\n\n  /**\n   * Log cache events\n   * @param {string} operation - Cache operation (hit, miss, set, clear)\n   * @param {string} key - Cache key\n   * @param {Object} metadata - Additional metadata\n   */\n  logCache(operation, key, metadata = {}) {\n    const emoji =\n      {\n        hit: '🎯',\n        miss: '❌',\n        set: '💾',\n        clear: '🗑️'\n      }[operation] || '📦';\n\n    this.log('DEBUG', `${emoji} Cache ${operation.toUpperCase()}`, {\n      operation,\n      key: this.sanitizeCacheKey(key),\n      ...metadata\n    });\n\n    this.recordMetric('cache', operation, 1);\n  }\n\n  /**\n   * Record a metric\n   * @param {string} service - Service name\n   * @param {string} metric - Metric name\n   * @param {number} value - Metric value\n   */\n  recordMetric(service, metric, value) {\n    if (!this.config.enableMetrics) return;\n\n    const key = `${service}.${metric}`;\n    const now = Date.now();\n\n    if (!this.metrics.has(key)) {\n      this.metrics.set(key, {\n        values: [],\n        total: 0,\n        count: 0,\n        min: Infinity,\n        max: -Infinity,\n        avg: 0\n      });\n    }\n\n    const metricData = this.metrics.get(key);\n    metricData.values.push({ value, timestamp: now });\n    metricData.total += value;\n    metricData.count += 1;\n    metricData.min = Math.min(metricData.min, value);\n    metricData.max = Math.max(metricData.max, value);\n    metricData.avg = metricData.total / metricData.count;\n\n    // Clean old metrics\n    this.cleanOldMetrics(key);\n  }\n\n  /**\n   * Record an error for tracking\n   * @param {string} service - Service name\n   * @param {Error} error - Error object\n   */\n  recordError(service, error) {\n    if (!this.config.enableErrorTracking || !error) return;\n\n    const errorKey = `${service}.${error.message}`;\n    const count = this.errorCounts.get(errorKey) || 0;\n    this.errorCounts.set(errorKey, count + 1);\n  }\n\n  /**\n   * Get comprehensive metrics summary\n   * @returns {Object} Metrics summary\n   */\n  getMetrics() {\n    const summary = {\n      uptime: Date.now() - this.startTime,\n      totalLogs: this.logs.length,\n      services: {},\n      cache: {},\n      errors: {}\n    };\n\n    // Process service metrics\n    for (const [key, data] of this.metrics.entries()) {\n      const [service, metric] = key.split('.');\n\n      if (service === 'cache') {\n        summary.cache[metric] = {\n          total: data.total,\n          count: data.count,\n          avg: data.avg\n        };\n      } else {\n        if (!summary.services[service]) {\n          summary.services[service] = {};\n        }\n\n        summary.services[service][metric] = {\n          total: data.total,\n          count: data.count,\n          min: data.min === Infinity ? 0 : data.min,\n          max: data.max === -Infinity ? 0 : data.max,\n          avg: data.avg\n        };\n      }\n    }\n\n    // Process error counts\n    for (const [errorKey, count] of this.errorCounts.entries()) {\n      const [service, ...messageParts] = errorKey.split('.');\n      const message = messageParts.join('.');\n\n      if (!summary.errors[service]) {\n        summary.errors[service] = {};\n      }\n\n      summary.errors[service][message] = count;\n    }\n\n    return summary;\n  }\n\n  /**\n   * Get recent logs\n   * @param {number} limit - Maximum number of logs to return\n   * @param {string} level - Filter by log level\n   * @returns {Array} Recent log entries\n   */\n  getRecentLogs(limit = 100, level = null) {\n    let logs = [...this.logs];\n\n    if (level) {\n      logs = logs.filter(log => log.level === level.toUpperCase());\n    }\n\n    return logs.slice(-limit).reverse();\n  }\n\n  /**\n   * Clear all logs and metrics\n   */\n  clear() {\n    this.logs = [];\n    this.metrics.clear();\n    this.performanceData.clear();\n    this.errorCounts.clear();\n    this.startTime = Date.now();\n  }\n\n  // Private helper methods\n  generateLogId() {\n    return `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateRequestId() {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  sanitizeParams(params) {\n    const sanitized = { ...params };\n    // Remove sensitive data\n    if (sanitized.apikey) sanitized.apikey = '***';\n    if (sanitized.api_key) sanitized.api_key = '***';\n    if (sanitized.token) sanitized.token = '***';\n    return sanitized;\n  }\n\n  sanitizeCacheKey(key) {\n    // Truncate long cache keys for readability\n    return key.length > 50 ? `${key.substring(0, 47)}...` : key;\n  }\n\n  getResponseSize(response) {\n    if (!response) return 0;\n    try {\n      return JSON.stringify(response).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  trimLogs() {\n    if (this.logs.length > this.config.maxLogHistory) {\n      this.logs = this.logs.slice(-this.config.maxLogHistory);\n    }\n  }\n\n  cleanOldMetrics(key) {\n    const metricData = this.metrics.get(key);\n    const cutoff = Date.now() - this.config.metricsRetentionPeriod;\n\n    metricData.values = metricData.values.filter(item => item.timestamp > cutoff);\n  }\n\n  outputToConsole(logEntry) {\n    const { level, message, metadata } = logEntry;\n    const timestamp = new Date(logEntry.timestamp).toLocaleTimeString();\n\n    const colors = {\n      ERROR: '\\x1b[31m', // Red\n      WARN: '\\x1b[33m', // Yellow\n      INFO: '\\x1b[36m', // Cyan\n      DEBUG: '\\x1b[35m', // Magenta\n      TRACE: '\\x1b[37m' // White\n    };\n\n    const reset = '\\x1b[0m';\n    const color = colors[level] || colors.INFO;\n\n    console.log(\n      `${color}[${timestamp}] ${level}:${reset} ${message}`,\n      Object.keys(metadata).length > 0 ? metadata : ''\n    );\n  }\n}\n\n// Export singleton instance\nexport const apiLogger = new ApiLogger();\nexport default ApiLogger;\n","import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced Financial Modeling Engine\n * Provides comprehensive DCF, LBO, and valuation modeling capabilities\n */\nclass FinancialModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default financial modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      dcf: {\n        projectionYears: 5,\n        terminalGrowthRate: 0.025,\n        riskFreeRate: 0.045,\n        marketPremium: 0.065,\n        taxRate: 0.21,\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.05,\n        depreciationAsPercentOfRevenue: 0.025\n      },\n      lbo: {\n        holdingPeriod: 5,\n        debtMultiples: { senior: 4.0, subordinated: 1.5, total: 5.5 },\n        interestRates: { senior: 0.055, subordinated: 0.095 },\n        managementFeeRate: 0.02,\n        carriedInterestRate: 0.2,\n        ebitdaGrowthRate: 0.05,\n        debtPaydownRate: 0.5\n      },\n      monte_carlo: {\n        iterations: 10000,\n        confidenceIntervals: [0.05, 0.25, 0.5, 0.75, 0.95],\n        correlationMatrix: null\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive DCF model with multiple scenarios\n   * @param {Object} inputs - DCF model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete DCF analysis\n   */\n  buildDCFModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      currentRevenue,\n      historicalGrowthRates = [],\n      margins = {},\n      balanceSheetData = {},\n      marketData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions.dcf, ...assumptions };\n\n    // Build base case scenario\n    const baseCase = this.calculateDCFScenario(inputs, modelAssumptions, 'Base Case');\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Bull case: Higher growth, lower discount rate\n    if (scenarios.bull !== false) {\n      const bullAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 1.3,\n        terminalGrowthRate: Math.min(modelAssumptions.terminalGrowthRate * 1.2, 0.04),\n        wacc: (modelAssumptions.wacc || 0.1) * 0.9\n      };\n      scenarioResults.bull = this.calculateDCFScenario(inputs, bullAssumptions, 'Bull Case');\n    }\n\n    // Bear case: Lower growth, higher discount rate\n    if (scenarios.bear !== false) {\n      const bearAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 0.7,\n        terminalGrowthRate: Math.max(modelAssumptions.terminalGrowthRate * 0.8, 0.015),\n        wacc: (modelAssumptions.wacc || 0.1) * 1.1\n      };\n      scenarioResults.bear = this.calculateDCFScenario(inputs, bearAssumptions, 'Bear Case');\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performDCFSensitivityAnalysis(inputs, modelAssumptions);\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'DCF',\n      timestamp: new Date().toISOString(),\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateDCFSummary(baseCase, scenarioResults, inputs.currentPrice)\n    };\n  }\n\n  /**\n   * Calculate DCF for a specific scenario\n   * @param {Object} inputs - Model inputs\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} DCF calculation results\n   */\n  calculateDCFScenario(inputs, assumptions, scenarioName) {\n    const {\n      currentRevenue,\n      currentPrice,\n      sharesOutstanding,\n      totalDebt = 0,\n      cash = 0\n    } = inputs;\n\n    // Project revenues\n    const revenueProjections = this.projectRevenues(\n      currentRevenue,\n      assumptions.revenueGrowthRate || 0.1,\n      assumptions.projectionYears\n    );\n\n    // Project operating metrics\n    const operatingProjections = this.projectOperatingMetrics(\n      revenueProjections,\n      assumptions\n    );\n\n    // Calculate free cash flows\n    const fcfProjections = this.calculateFreeCashFlows(\n      operatingProjections,\n      assumptions\n    );\n\n    // Calculate terminal value\n    const terminalValue = this.calculateTerminalValue(\n      fcfProjections[fcfProjections.length - 1],\n      assumptions.terminalGrowthRate,\n      assumptions.wacc\n    );\n\n    // Calculate present values\n    const pvOfCashFlows = this.calculatePresentValue(fcfProjections, assumptions.wacc);\n    const pvOfTerminalValue = this.calculatePresentValue([terminalValue], assumptions.wacc, assumptions.projectionYears);\n\n    // Calculate enterprise and equity values\n    const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n    const equityValue = enterpriseValue - totalDebt + cash;\n    const pricePerShare = equityValue / sharesOutstanding;\n\n    // Calculate valuation metrics\n    const upside = currentPrice ? ((pricePerShare - currentPrice) / currentPrice) * 100 : null;\n\n    return {\n      scenarioName,\n      revenueProjections,\n      operatingProjections,\n      fcfProjections,\n      terminalValue,\n      pvOfCashFlows,\n      pvOfTerminalValue,\n      enterpriseValue,\n      equityValue,\n      pricePerShare,\n      currentPrice,\n      upside,\n      wacc: assumptions.wacc,\n      terminalGrowthRate: assumptions.terminalGrowthRate,\n      impliedMultiples: this.calculateImpliedMultiples(enterpriseValue, operatingProjections)\n    };\n  }\n\n  /**\n   * Project revenue growth over multiple years\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number|Array} growthRates - Growth rate(s)\n   * @param {number} years - Number of years to project\n   * @returns {Array} Revenue projections\n   */\n  projectRevenues(baseRevenue, growthRates, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n\n    for (let i = 0; i < years; i++) {\n      const growthRate = Array.isArray(growthRates)\n        ? growthRates[i] || growthRates[growthRates.length - 1]\n        : growthRates * Math.pow(0.95, i); // Declining growth rate\n\n      currentRevenue *= (1 + growthRate);\n      projections.push({\n        year: i + 1,\n        revenue: currentRevenue,\n        growthRate\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Project operating metrics (EBITDA, margins, etc.)\n   * @param {Array} revenueProjections - Revenue projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Operating projections\n   */\n  projectOperatingMetrics(revenueProjections, assumptions) {\n    return revenueProjections.map((projection, index) => {\n      const ebitdaMargin = assumptions.ebitdaMargin || 0.2;\n      const ebitda = projection.revenue * ebitdaMargin;\n      const depreciation = projection.revenue * assumptions.depreciationAsPercentOfRevenue;\n      const ebit = ebitda - depreciation;\n      const taxes = ebit * assumptions.taxRate;\n      const nopat = ebit - taxes;\n\n      return {\n        ...projection,\n        ebitda,\n        ebitdaMargin,\n        depreciation,\n        ebit,\n        taxes,\n        nopat\n      };\n    });\n  }\n\n  /**\n   * Calculate free cash flows\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Free cash flow projections\n   */\n  calculateFreeCashFlows(operatingProjections, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      const capex = projection.revenue * assumptions.capexAsPercentOfRevenue;\n      const nwcChange = index === 0\n        ? projection.revenue * assumptions.nwcAsPercentOfRevenue\n        : (projection.revenue - operatingProjections[index - 1].revenue) * assumptions.nwcAsPercentOfRevenue;\n\n      const fcf = projection.nopat + projection.depreciation - capex - nwcChange;\n\n      return fcf;\n    });\n  }\n\n  /**\n   * Calculate terminal value using Gordon Growth Model\n   * @param {number} finalFCF - Final year free cash flow\n   * @param {number} terminalGrowthRate - Terminal growth rate\n   * @param {number} discountRate - Discount rate (WACC)\n   * @returns {number} Terminal value\n   */\n  calculateTerminalValue(finalFCF, terminalGrowthRate, discountRate) {\n    if (discountRate <= terminalGrowthRate) {\n      throw new Error('Discount rate must be greater than terminal growth rate');\n    }\n    return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n  }\n\n  /**\n   * Calculate present value of cash flows\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {number} discountRate - Discount rate\n   * @param {number} startYear - Starting year for discounting\n   * @returns {number} Present value\n   */\n  calculatePresentValue(cashFlows, discountRate, startYear = 0) {\n    return cashFlows.reduce((pv, cf, index) => {\n      const year = startYear + index + 1;\n      return pv + cf / Math.pow(1 + discountRate, year);\n    }, 0);\n  }\n\n  /**\n   * Calculate implied valuation multiples\n   * @param {number} enterpriseValue - Enterprise value\n   * @param {Array} operatingProjections - Operating projections\n   * @returns {Object} Implied multiples\n   */\n  calculateImpliedMultiples(enterpriseValue, operatingProjections) {\n    const currentYearEbitda = operatingProjections[0]?.ebitda || 0;\n    const nextYearEbitda = operatingProjections[1]?.ebitda || 0;\n\n    return {\n      evToCurrentEbitda: currentYearEbitda ? enterpriseValue / currentYearEbitda : null,\n      evToForwardEbitda: nextYearEbitda ? enterpriseValue / nextYearEbitda : null\n    };\n  }\n\n  /**\n   * Perform sensitivity analysis on key variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performDCFSensitivityAnalysis(inputs, baseAssumptions) {\n    const sensitivityVars = {\n      revenueGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      wacc: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      terminalGrowthRate: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      ebitdaMargin: [-0.02, -0.01, 0, 0.01, 0.02]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = {\n          ...baseAssumptions,\n          [variable]: (baseAssumptions[variable] || 0) + variation\n        };\n\n        try {\n          const scenario = this.calculateDCFScenario(inputs, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            pricePerShare: scenario.pricePerShare,\n            upside: scenario.upside\n          };\n        } catch (error) {\n          return {\n            variation,\n            pricePerShare: null,\n            upside: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate DCF model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Model summary\n   */\n  generateDCFSummary(baseCase, scenarios, currentPrice) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const pricesPerShare = allScenarios.map(s => s.pricePerShare).filter(p => p !== null);\n\n    return {\n      priceRange: {\n        min: Math.min(...pricesPerShare),\n        max: Math.max(...pricesPerShare),\n        average: pricesPerShare.reduce((sum, p) => sum + p, 0) / pricesPerShare.length\n      },\n      recommendation: this.generateRecommendation(baseCase, currentPrice),\n      keyMetrics: {\n        baseCase: {\n          pricePerShare: baseCase.pricePerShare,\n          upside: baseCase.upside,\n          enterpriseValue: baseCase.enterpriseValue\n        },\n        currentPrice,\n        impliedReturn: baseCase.upside\n      }\n    };\n  }\n\n  /**\n   * Generate investment recommendation\n   * @param {Object} baseCase - Base case DCF results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Investment recommendation\n   */\n  generateRecommendation(baseCase, currentPrice) {\n    if (!currentPrice || !baseCase.pricePerShare) {\n      return { rating: 'INSUFFICIENT_DATA', confidence: 0 };\n    }\n\n    const upside = baseCase.upside;\n    let rating, confidence;\n\n    if (upside > 20) {\n      rating = 'STRONG_BUY';\n      confidence = Math.min(95, 70 + (upside - 20) * 1.25);\n    } else if (upside > 10) {\n      rating = 'BUY';\n      confidence = Math.min(85, 60 + (upside - 10) * 2);\n    } else if (upside > -10) {\n      rating = 'HOLD';\n      confidence = Math.min(75, 50 + Math.abs(upside) * 2.5);\n    } else if (upside > -20) {\n      rating = 'SELL';\n      confidence = Math.min(85, 60 + Math.abs(upside + 10) * 2);\n    } else {\n      rating = 'STRONG_SELL';\n      confidence = Math.min(95, 70 + Math.abs(upside + 20) * 1.25);\n    }\n\n    return {\n      rating,\n      confidence: Math.round(confidence),\n      upside,\n      reasoning: this.generateRecommendationReasoning(rating, upside)\n    };\n  }\n\n  /**\n   * Generate reasoning for investment recommendation\n   * @param {string} rating - Investment rating\n   * @param {number} upside - Upside percentage\n   * @returns {string} Recommendation reasoning\n   */\n  generateRecommendationReasoning(rating, upside) {\n    const upsideAbs = Math.abs(upside);\n\n    switch (rating) {\n      case 'STRONG_BUY':\n        return `Strong upside potential of ${upside.toFixed(1)}% suggests significant undervaluation based on DCF analysis.`;\n      case 'BUY':\n        return `Moderate upside of ${upside.toFixed(1)}% indicates the stock is undervalued relative to intrinsic value.`;\n      case 'HOLD':\n        return `Fair valuation with ${upside >= 0 ? 'limited upside' : 'modest downside'} of ${upsideAbs.toFixed(1)}%.`;\n      case 'SELL':\n        return `Downside risk of ${upsideAbs.toFixed(1)}% suggests the stock is overvalued based on fundamental analysis.`;\n      case 'STRONG_SELL':\n        return `Significant downside of ${upsideAbs.toFixed(1)}% indicates substantial overvaluation.`;\n      default:\n        return 'Insufficient data for reliable recommendation.';\n    }\n  }\n}\n\n// Export singleton instance\nexport const financialModelingEngine = new FinancialModelingEngine();\nexport default FinancialModelingEngine;\n","import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced LBO (Leveraged Buyout) Modeling Engine\n * Provides comprehensive LBO analysis with debt schedules and cash flow waterfalls\n */\nclass LBOModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default LBO modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      transaction: {\n        holdingPeriod: 5,\n        managementRollover: 0.1, // 10% management rollover\n        transactionFees: 0.02, // 2% of transaction value\n        financingFees: 0.015 // 1.5% of debt\n      },\n      debt: {\n        seniorDebtMultiple: 4.0,\n        subordinatedDebtMultiple: 1.5,\n        totalDebtMultiple: 5.5,\n        seniorInterestRate: 0.055, // 5.5%\n        subordinatedInterestRate: 0.095, // 9.5%\n        mandatoryPaydown: 0.05, // 5% annually\n        cashSweep: 0.5 // 50% of excess cash\n      },\n      operating: {\n        ebitdaGrowthRate: 0.05, // 5% annually\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.02,\n        taxRate: 0.21\n      },\n      exit: {\n        exitMultiple: null, // Will use peer average\n        exitMultipleRange: [0.8, 1.2], // 80% to 120% of peer average\n        publicMarketDiscount: 0.1 // 10% discount for public exit\n      },\n      fees: {\n        managementFeeRate: 0.02, // 2% annually\n        carriedInterestRate: 0.2, // 20%\n        hurdle: 0.08 // 8% preferred return\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {Object} inputs - LBO model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete LBO analysis\n   */\n  buildLBOModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      purchasePrice,\n      ebitda,\n      revenue,\n      marketData = {},\n      peerData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions, ...assumptions };\n\n    // Calculate transaction structure\n    const transactionStructure = this.calculateTransactionStructure(\n      purchasePrice,\n      ebitda,\n      modelAssumptions\n    );\n\n    // Build base case scenario\n    const baseCase = this.calculateLBOScenario(\n      inputs,\n      transactionStructure,\n      modelAssumptions,\n      'Base Case'\n    );\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Upside case: Higher growth and exit multiple\n    if (scenarios.upside !== false) {\n      const upsideAssumptions = {\n        ...modelAssumptions,\n        operating: {\n          ...modelAssumptions.operating,\n          ebitdaGrowthRate: modelAssumptions.operating.ebitdaGrowthRate * 1.3\n        },\n        exit: {\n          ...modelAssumptions.exit,\n          exitMultiple: (modelAssumptions.exit.exitMultiple || 10) * 1.1\n        }\n      };\n      scenarioResults.upside = this.calculateLBOScenario(\n        inputs,\n        transactionStructure,\n        upsideAssumptions,\n        'Upside Case'\n      );\n    }\n\n    // Downside case: Lower growth and exit multiple\n    if (scenarios.downside !== false) {\n      const downsideAssumptions = {\n        ...modelAssumptions,\n        operating: {\n          ...modelAssumptions.operating,\n          ebitdaGrowthRate: modelAssumptions.operating.ebitdaGrowthRate * 0.7\n        },\n        exit: {\n          ...modelAssumptions.exit,\n          exitMultiple: (modelAssumptions.exit.exitMultiple || 10) * 0.9\n        }\n      };\n      scenarioResults.downside = this.calculateLBOScenario(\n        inputs,\n        transactionStructure,\n        downsideAssumptions,\n        'Downside Case'\n      );\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performLBOSensitivityAnalysis(\n      inputs,\n      transactionStructure,\n      modelAssumptions\n    );\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'LBO',\n      timestamp: new Date().toISOString(),\n      transactionStructure,\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateLBOSummary(baseCase, scenarioResults, transactionStructure)\n    };\n  }\n\n  /**\n   * Calculate transaction structure and financing\n   * @param {number} purchasePrice - Total purchase price\n   * @param {number} ebitda - Current EBITDA\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Object} Transaction structure\n   */\n  calculateTransactionStructure(purchasePrice, ebitda, assumptions) {\n    const { debt, transaction } = assumptions;\n\n    // Calculate debt capacity based on EBITDA multiples\n    const seniorDebt = ebitda * debt.seniorDebtMultiple;\n    const subordinatedDebt = ebitda * debt.subordinatedDebtMultiple;\n    const totalDebt = seniorDebt + subordinatedDebt;\n\n    // Calculate transaction costs\n    const transactionFees = purchasePrice * transaction.transactionFees;\n    const financingFees = totalDebt * transaction.financingFees;\n    const totalUses = purchasePrice + transactionFees + financingFees;\n\n    // Calculate equity requirement (ensure it's positive)\n    const equityContribution = Math.max(totalUses - totalDebt, totalUses * 0.2); // Minimum 20% equity\n    const managementRollover = purchasePrice * transaction.managementRollover;\n    const sponsorEquity = Math.max(equityContribution - managementRollover, 0);\n\n    // Recalculate total debt if equity was adjusted\n    const adjustedTotalDebt = totalUses - equityContribution;\n    const adjustedSeniorDebt = Math.min(seniorDebt, adjustedTotalDebt * 0.8); // Max 80% senior\n    const adjustedSubordinatedDebt = adjustedTotalDebt - adjustedSeniorDebt;\n\n    return {\n      purchasePrice,\n      transactionFees,\n      financingFees,\n      totalUses,\n      seniorDebt: adjustedSeniorDebt,\n      subordinatedDebt: adjustedSubordinatedDebt,\n      totalDebt: adjustedTotalDebt,\n      equityContribution,\n      sponsorEquity,\n      managementRollover,\n      debtToEbitda: adjustedTotalDebt / ebitda,\n      equityToTotalCapital: equityContribution / totalUses\n    };\n  }\n\n  /**\n   * Calculate LBO scenario with detailed cash flow projections\n   * @param {Object} inputs - Model inputs\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} LBO scenario results\n   */\n  calculateLBOScenario(inputs, transactionStructure, assumptions, scenarioName) {\n    const { ebitda, revenue } = inputs;\n    const { holdingPeriod } = assumptions.transaction;\n\n    // Project operating performance\n    const operatingProjections = this.projectLBOOperatingPerformance(\n      revenue,\n      ebitda,\n      assumptions.operating,\n      holdingPeriod\n    );\n\n    // Calculate debt schedule\n    const debtSchedule = this.calculateDebtSchedule(\n      transactionStructure,\n      operatingProjections,\n      assumptions.debt,\n      holdingPeriod\n    );\n\n    // Calculate cash flow to equity\n    const equityCashFlows = this.calculateEquityCashFlows(\n      operatingProjections,\n      debtSchedule,\n      assumptions\n    );\n\n    // Calculate exit value and returns\n    const exitAnalysis = this.calculateExitAnalysis(\n      operatingProjections[holdingPeriod - 1],\n      debtSchedule[holdingPeriod - 1],\n      transactionStructure,\n      assumptions\n    );\n\n    // Calculate returns metrics\n    const returnsAnalysis = this.calculateReturnsMetrics(\n      transactionStructure.sponsorEquity,\n      equityCashFlows,\n      exitAnalysis.netProceeds,\n      holdingPeriod\n    );\n\n    return {\n      scenarioName,\n      operatingProjections,\n      debtSchedule,\n      equityCashFlows,\n      exitAnalysis,\n      returnsAnalysis,\n      keyMetrics: this.calculateLBOKeyMetrics(\n        transactionStructure,\n        exitAnalysis,\n        returnsAnalysis\n      )\n    };\n  }\n\n  /**\n   * Project operating performance over holding period\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number} baseEbitda - Starting EBITDA\n   * @param {Object} operatingAssumptions - Operating assumptions\n   * @param {number} years - Number of years\n   * @returns {Array} Operating projections\n   */\n  projectLBOOperatingPerformance(baseRevenue, baseEbitda, operatingAssumptions, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n    let currentEbitda = baseEbitda;\n\n    for (let year = 1; year <= years; year++) {\n      // Assume revenue grows in line with EBITDA\n      const ebitdaGrowth = operatingAssumptions.ebitdaGrowthRate;\n      currentEbitda *= (1 + ebitdaGrowth);\n      currentRevenue *= (1 + ebitdaGrowth);\n\n      const ebitdaMargin = currentEbitda / currentRevenue;\n      const capex = currentRevenue * operatingAssumptions.capexAsPercentOfRevenue;\n      const nwcChange = year === 1\n        ? currentRevenue * operatingAssumptions.nwcAsPercentOfRevenue\n        : (currentRevenue - projections[year - 2].revenue) * operatingAssumptions.nwcAsPercentOfRevenue;\n\n      const taxes = currentEbitda * operatingAssumptions.taxRate;\n      const unleveredFCF = currentEbitda - taxes - capex - nwcChange;\n\n      projections.push({\n        year,\n        revenue: currentRevenue,\n        ebitda: currentEbitda,\n        ebitdaMargin,\n        capex,\n        nwcChange,\n        taxes,\n        unleveredFCF\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Calculate debt schedule with amortization\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} debtAssumptions - Debt assumptions\n   * @param {number} years - Number of years\n   * @returns {Array} Debt schedule\n   */\n  calculateDebtSchedule(transactionStructure, operatingProjections, debtAssumptions, years) {\n    const schedule = [];\n    let seniorDebtBalance = transactionStructure.seniorDebt;\n    let subordinatedDebtBalance = transactionStructure.subordinatedDebt;\n\n    for (let year = 1; year <= years; year++) {\n      const projection = operatingProjections[year - 1];\n\n      // Calculate interest expense\n      const seniorInterest = seniorDebtBalance * debtAssumptions.seniorInterestRate;\n      const subordinatedInterest = subordinatedDebtBalance * debtAssumptions.subordinatedInterestRate;\n      const totalInterest = seniorInterest + subordinatedInterest;\n\n      // Calculate available cash for debt paydown\n      const cashAvailableForDebt = projection.unleveredFCF - totalInterest;\n\n      // Mandatory amortization\n      const mandatoryPaydown = Math.min(\n        seniorDebtBalance * debtAssumptions.mandatoryPaydown,\n        seniorDebtBalance\n      );\n\n      // Cash sweep (excess cash after mandatory paydown)\n      const excessCash = Math.max(0, cashAvailableForDebt - mandatoryPaydown);\n      const cashSweep = excessCash * debtAssumptions.cashSweep;\n\n      // Total debt paydown\n      const totalPaydown = mandatoryPaydown + cashSweep;\n      const seniorPaydown = Math.min(totalPaydown, seniorDebtBalance);\n      const subordinatedPaydown = Math.max(0, totalPaydown - seniorPaydown);\n\n      // Update balances\n      seniorDebtBalance = Math.max(0, seniorDebtBalance - seniorPaydown);\n      subordinatedDebtBalance = Math.max(0, subordinatedDebtBalance - subordinatedPaydown);\n\n      schedule.push({\n        year,\n        beginningBalance: {\n          senior: year === 1 ? transactionStructure.seniorDebt : schedule[year - 2].endingBalance.senior,\n          subordinated: year === 1 ? transactionStructure.subordinatedDebt : schedule[year - 2].endingBalance.subordinated\n        },\n        interestExpense: {\n          senior: seniorInterest,\n          subordinated: subordinatedInterest,\n          total: totalInterest\n        },\n        principalPayment: {\n          senior: seniorPaydown,\n          subordinated: subordinatedPaydown,\n          total: totalPaydown\n        },\n        endingBalance: {\n          senior: seniorDebtBalance,\n          subordinated: subordinatedDebtBalance,\n          total: seniorDebtBalance + subordinatedDebtBalance\n        },\n        cashAvailableForDebt,\n        excessCash: excessCash - cashSweep\n      });\n    }\n\n    return schedule;\n  }\n\n  /**\n   * Calculate cash flows to equity holders\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Array} debtSchedule - Debt schedule\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Equity cash flows\n   */\n  calculateEquityCashFlows(operatingProjections, debtSchedule, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      const debt = debtSchedule[index];\n      const managementFees = assumptions.fees.managementFeeRate *\n        (assumptions.transaction.sponsorEquity || 0);\n\n      const cashFlowToEquity = debt.excessCash - managementFees;\n\n      return {\n        year: projection.year,\n        unleveredFCF: projection.unleveredFCF,\n        interestExpense: debt.interestExpense.total,\n        principalPayment: debt.principalPayment.total,\n        managementFees,\n        cashFlowToEquity: Math.max(0, cashFlowToEquity)\n      };\n    });\n  }\n\n  /**\n   * Calculate exit analysis and proceeds\n   * @param {Object} finalYearProjection - Final year operating projection\n   * @param {Object} finalYearDebt - Final year debt schedule\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Object} Exit analysis\n   */\n  calculateExitAnalysis(finalYearProjection, finalYearDebt, transactionStructure, assumptions) {\n    const exitMultiple = assumptions.exit.exitMultiple || 10;\n    const exitEbitda = finalYearProjection.ebitda;\n\n    const enterpriseValue = exitEbitda * exitMultiple;\n    const totalDebtAtExit = finalYearDebt.endingBalance.total;\n    const grossProceeds = enterpriseValue - totalDebtAtExit;\n\n    // Calculate carried interest\n    const totalReturn = grossProceeds;\n    const investedCapital = transactionStructure.sponsorEquity;\n    const profit = Math.max(0, totalReturn - investedCapital);\n    const carriedInterest = profit * assumptions.fees.carriedInterestRate;\n\n    const netProceeds = grossProceeds - carriedInterest;\n\n    return {\n      exitEbitda,\n      exitMultiple,\n      enterpriseValue,\n      totalDebtAtExit,\n      grossProceeds,\n      carriedInterest,\n      netProceeds,\n      managementProceeds: grossProceeds * (transactionStructure.managementRollover / transactionStructure.equityContribution)\n    };\n  }\n\n  /**\n   * Calculate returns metrics (IRR, MOIC, etc.)\n   * @param {number} initialInvestment - Initial equity investment\n   * @param {Array} equityCashFlows - Annual equity cash flows\n   * @param {number} exitProceeds - Exit proceeds\n   * @param {number} holdingPeriod - Holding period in years\n   * @returns {Object} Returns analysis\n   */\n  calculateReturnsMetrics(initialInvestment, equityCashFlows, exitProceeds, holdingPeriod) {\n    // Validate inputs\n    if (!initialInvestment || initialInvestment <= 0) {\n      return {\n        irr: NaN,\n        moic: NaN,\n        totalCashReturned: 0,\n        initialInvestment: initialInvestment || 0,\n        holdingPeriod,\n        annualizedReturn: NaN\n      };\n    }\n\n    // Calculate total cash flows (negative initial investment, positive distributions and exit)\n    const cashFlows = [-Math.abs(initialInvestment)]; // Ensure initial investment is negative\n\n    // Add annual cash flows\n    equityCashFlows.forEach(cf => {\n      cashFlows.push(cf.cashFlowToEquity || 0);\n    });\n\n    // Add exit proceeds to final year\n    if (cashFlows.length > 1) {\n      cashFlows[cashFlows.length - 1] += (exitProceeds || 0);\n    } else {\n      cashFlows.push(exitProceeds || 0);\n    }\n\n    // Calculate IRR using Newton-Raphson method\n    const irr = this.calculateIRR(cashFlows);\n\n    // Calculate MOIC (Multiple of Invested Capital)\n    const totalCashReturned = equityCashFlows.reduce((sum, cf) => sum + (cf.cashFlowToEquity || 0), 0) + (exitProceeds || 0);\n    const moic = totalCashReturned / Math.abs(initialInvestment);\n\n    return {\n      irr: isNaN(irr) ? 0 : irr, // Default to 0% if IRR calculation fails\n      moic: isNaN(moic) ? 0 : moic,\n      totalCashReturned,\n      initialInvestment: Math.abs(initialInvestment),\n      holdingPeriod,\n      annualizedReturn: isNaN(moic) || moic <= 0 ? 0 : Math.pow(moic, 1 / holdingPeriod) - 1,\n      cashFlows // Include for debugging\n    };\n  }\n\n  /**\n   * Calculate IRR using Newton-Raphson method\n   * @param {Array} cashFlows - Array of cash flows\n   * @returns {number} IRR as decimal\n   */\n  calculateIRR(cashFlows) {\n    // Validate cash flows\n    if (!cashFlows || cashFlows.length < 2) {\n      return NaN;\n    }\n\n    // Check if all cash flows are zero\n    if (cashFlows.every(cf => cf === 0)) {\n      return 0;\n    }\n\n    // Check if there's no sign change (no valid IRR)\n    const signChanges = cashFlows.slice(1).reduce((count, cf, i) => {\n      return count + (Math.sign(cf) !== Math.sign(cashFlows[i]) ? 1 : 0);\n    }, 0);\n\n    if (signChanges === 0) {\n      return cashFlows[0] < 0 ? -1 : Infinity; // No valid IRR\n    }\n\n    let rate = 0.1; // Initial guess: 10%\n    const tolerance = 1e-6;\n    const maxIterations = 100;\n\n    for (let i = 0; i < maxIterations; i++) {\n      let npv = 0;\n      let dnpv = 0;\n\n      for (let j = 0; j < cashFlows.length; j++) {\n        const factor = Math.pow(1 + rate, j);\n        npv += cashFlows[j] / factor;\n        if (j > 0) {\n          dnpv -= j * cashFlows[j] / (factor * (1 + rate));\n        }\n      }\n\n      if (Math.abs(npv) < tolerance) {\n        return rate;\n      }\n\n      if (Math.abs(dnpv) < tolerance) {\n        break; // Avoid division by zero\n      }\n\n      const newRate = rate - npv / dnpv;\n\n      // Prevent rate from going too negative or too high\n      if (newRate < -0.99) {\n        rate = -0.99;\n      } else if (newRate > 10) {\n        rate = 10;\n      } else {\n        rate = newRate;\n      }\n    }\n\n    return rate;\n  }\n\n  /**\n   * Calculate key LBO metrics summary\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} exitAnalysis - Exit analysis\n   * @param {Object} returnsAnalysis - Returns analysis\n   * @returns {Object} Key metrics\n   */\n  calculateLBOKeyMetrics(transactionStructure, exitAnalysis, returnsAnalysis) {\n    return {\n      entryMultiple: transactionStructure.purchasePrice / (transactionStructure.purchasePrice / transactionStructure.debtToEbitda),\n      exitMultiple: exitAnalysis.exitMultiple,\n      debtToEbitda: transactionStructure.debtToEbitda,\n      equityContribution: transactionStructure.equityContribution,\n      irr: returnsAnalysis.irr,\n      moic: returnsAnalysis.moic,\n      totalReturn: returnsAnalysis.totalCashReturned,\n      leverageReduction: transactionStructure.totalDebt - exitAnalysis.totalDebtAtExit\n    };\n  }\n\n  /**\n   * Perform sensitivity analysis on key LBO variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performLBOSensitivityAnalysis(inputs, transactionStructure, baseAssumptions) {\n    const sensitivityVars = {\n      ebitdaGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      exitMultiple: [-1, -0.5, 0, 0.5, 1],\n      debtMultiple: [-0.5, -0.25, 0, 0.25, 0.5]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = { ...baseAssumptions };\n\n        if (variable === 'ebitdaGrowthRate') {\n          adjustedAssumptions.operating.ebitdaGrowthRate += variation;\n        } else if (variable === 'exitMultiple') {\n          adjustedAssumptions.exit.exitMultiple = (adjustedAssumptions.exit.exitMultiple || 10) + variation;\n        } else if (variable === 'debtMultiple') {\n          // Adjust transaction structure for debt multiple sensitivity\n          const newDebtMultiple = transactionStructure.debtToEbitda + variation;\n          const adjustedStructure = {\n            ...transactionStructure,\n            totalDebt: (inputs.ebitda * newDebtMultiple),\n            debtToEbitda: newDebtMultiple\n          };\n          adjustedStructure.equityContribution = transactionStructure.totalUses - adjustedStructure.totalDebt;\n        }\n\n        try {\n          const scenario = this.calculateLBOScenario(inputs, transactionStructure, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            irr: scenario.returnsAnalysis.irr,\n            moic: scenario.returnsAnalysis.moic\n          };\n        } catch (error) {\n          return {\n            variation,\n            irr: null,\n            moic: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate LBO model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Object} Model summary\n   */\n  generateLBOSummary(baseCase, scenarios, transactionStructure) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const irrs = allScenarios.map(s => s.returnsAnalysis.irr).filter(irr => irr !== null);\n    const moics = allScenarios.map(s => s.returnsAnalysis.moic).filter(moic => moic !== null);\n\n    return {\n      returnRange: {\n        irrMin: Math.min(...irrs),\n        irrMax: Math.max(...irrs),\n        irrAverage: irrs.reduce((sum, irr) => sum + irr, 0) / irrs.length,\n        moicMin: Math.min(...moics),\n        moicMax: Math.max(...moics),\n        moicAverage: moics.reduce((sum, moic) => sum + moic, 0) / moics.length\n      },\n      investmentHighlights: this.generateInvestmentHighlights(baseCase, transactionStructure),\n      riskFactors: this.generateRiskFactors(baseCase, transactionStructure)\n    };\n  }\n\n  /**\n   * Generate investment highlights\n   * @param {Object} baseCase - Base case results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Array} Investment highlights\n   */\n  generateInvestmentHighlights(baseCase, transactionStructure) {\n    const highlights = [];\n    const irr = baseCase.returnsAnalysis.irr;\n    const moic = baseCase.returnsAnalysis.moic;\n\n    if (irr > 0.2) {\n      highlights.push(`Strong projected IRR of ${(irr * 100).toFixed(1)}%`);\n    }\n\n    if (moic > 2.5) {\n      highlights.push(`Attractive multiple of ${moic.toFixed(1)}x invested capital`);\n    }\n\n    if (transactionStructure.debtToEbitda < 5) {\n      highlights.push(`Conservative leverage at ${transactionStructure.debtToEbitda.toFixed(1)}x EBITDA`);\n    }\n\n    return highlights;\n  }\n\n  /**\n   * Generate risk factors\n   * @param {Object} baseCase - Base case results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Array} Risk factors\n   */\n  generateRiskFactors(baseCase, transactionStructure) {\n    const risks = [];\n\n    if (transactionStructure.debtToEbitda > 6) {\n      risks.push(`High leverage at ${transactionStructure.debtToEbitda.toFixed(1)}x EBITDA`);\n    }\n\n    if (baseCase.returnsAnalysis.irr < 0.15) {\n      risks.push(`Below-target IRR of ${(baseCase.returnsAnalysis.irr * 100).toFixed(1)}%`);\n    }\n\n    return risks;\n  }\n}\n\n// Export singleton instance\nexport const lboModelingEngine = new LBOModelingEngine();\nexport default LBOModelingEngine;\n","import axios from 'axios';\n\nimport { apiKeyValidator } from '../utils/apiKeyValidator.js';\nimport { apiLogger } from '../utils/apiLogger.js';\n\nimport { financialModelingEngine } from './financialModelingEngine.js';\nimport { lboModelingEngine } from './lboModelingEngine.js';\nimport { monteCarloEngine } from './monteCarloEngine.js';\n\n// Data source configurations - Updated for Vite environment variables\nconst DATA_SOURCES = {\n  ALPHA_VANTAGE: {\n    baseURL: 'https://www.alphavantage.co/query',\n    apiKey: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY || 'demo'\n  },\n  FMP: {\n    baseURL: 'https://financialmodelingprep.com/api/v3',\n    apiKey: import.meta.env.VITE_FMP_API_KEY || 'demo'\n  },\n  SEC_EDGAR: {\n    baseURL: 'https://data.sec.gov',\n    headers: {\n      'User-Agent': 'FinanceAnalyst-Pro (contact@financeanalyst.com)'\n    }\n  },\n  YAHOO_FINANCE: {\n    baseURL: 'https://query1.finance.yahoo.com/v8/finance/chart',\n    fallbackURL: 'https://query2.finance.yahoo.com/v8/finance/chart'\n  }\n};\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  ALPHA_VANTAGE: { requests: 5, period: 60000 }, // 5 requests per minute\n  FMP: { requests: 250, period: 86400000 }, // 250 requests per day\n  SEC_EDGAR: { requests: 10, period: 1000 } // 10 requests per second\n};\n\n// Advanced retry configuration\nconst RETRY_CONFIG = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second base delay\n  maxDelay: 30000, // 30 seconds max delay\n  exponentialBase: 2,\n  jitterFactor: 0.1, // 10% jitter\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT']\n};\n\n/**\n * Circuit breaker configuration\n */\nconst CIRCUIT_BREAKER_CONFIG = {\n  failureThreshold: 5, // Number of failures before opening circuit\n  recoveryTimeout: 30000, // 30 seconds before attempting to close circuit\n  monitoringPeriod: 60000, // 1 minute monitoring window\n  halfOpenMaxCalls: 3 // Max calls to test in half-open state\n};\n\n/**\n * Circuit breaker states\n */\nconst CIRCUIT_STATES = {\n  CLOSED: 'CLOSED', // Normal operation\n  OPEN: 'OPEN', // Circuit is open, failing fast\n  HALF_OPEN: 'HALF_OPEN' // Testing if service has recovered\n};\n\n/**\n * Circuit breaker implementation to prevent cascading failures\n */\nclass CircuitBreaker {\n  constructor(name, config = CIRCUIT_BREAKER_CONFIG) {\n    this.name = name;\n    this.config = { ...CIRCUIT_BREAKER_CONFIG, ...config };\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.halfOpenCallCount = 0;\n    this.successCount = 0;\n    this.totalCalls = 0;\n  }\n\n  /**\n   * Check if circuit breaker allows the call\n   * @returns {boolean} Whether the call is allowed\n   */\n  canExecute() {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        return true;\n\n      case CIRCUIT_STATES.OPEN:\n        // Check if recovery timeout has passed\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.state = CIRCUIT_STATES.HALF_OPEN;\n          this.halfOpenCallCount = 0;\n          console.log(`🔄 Circuit breaker ${this.name} transitioning to HALF_OPEN`);\n          return true;\n        }\n        return false;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        return this.halfOpenCallCount < this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Record a successful call\n   */\n  recordSuccess() {\n    this.successCount++;\n    this.totalCalls++;\n\n    switch (this.state) {\n      case CIRCUIT_STATES.HALF_OPEN:\n        this.halfOpenCallCount++;\n        // If we've successfully completed enough calls in half-open, close the circuit\n        if (this.halfOpenCallCount >= this.config.halfOpenMaxCalls) {\n          this.state = CIRCUIT_STATES.CLOSED;\n          this.failureCount = 0;\n          this.halfOpenCallCount = 0;\n          console.log(`✅ Circuit breaker ${this.name} closed - service recovered`);\n        }\n        break;\n\n      case CIRCUIT_STATES.CLOSED:\n        // Reset failure count on success\n        this.failureCount = 0;\n        break;\n    }\n  }\n\n  /**\n   * Record a failed call\n   */\n  recordFailure() {\n    this.failureCount++;\n    this.totalCalls++;\n    this.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        if (this.failureCount >= this.config.failureThreshold) {\n          this.state = CIRCUIT_STATES.OPEN;\n          console.warn(\n            `🚨 Circuit breaker ${this.name} opened - too many failures (${this.failureCount})`\n          );\n        }\n        break;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        // Any failure in half-open state reopens the circuit\n        this.state = CIRCUIT_STATES.OPEN;\n        this.halfOpenCallCount = 0;\n        console.warn(`🚨 Circuit breaker ${this.name} reopened - failure during recovery test`);\n        break;\n    }\n  }\n\n  /**\n   * Get circuit breaker status\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls: this.totalCalls,\n      failureRate: this.totalCalls > 0 ? this.failureCount / this.totalCalls : 0,\n      lastFailureTime: this.lastFailureTime,\n      isOpen: this.state === CIRCUIT_STATES.OPEN,\n      nextRetryTime:\n        this.state === CIRCUIT_STATES.OPEN\n          ? this.lastFailureTime + this.config.recoveryTimeout\n          : null\n    };\n  }\n\n  /**\n   * Execute function with circuit breaker protection\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    if (!this.canExecute()) {\n      const error = new Error(`Circuit breaker ${this.name} is OPEN - failing fast`);\n      error.circuitBreakerOpen = true;\n      throw error;\n    }\n\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (error) {\n      this.recordFailure();\n      throw error;\n    }\n  }\n}\n\n/**\n * Advanced retry utility with exponential backoff and jitter\n */\nclass RetryManager {\n  constructor(config = RETRY_CONFIG) {\n    this.config = { ...RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Calculate delay with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    const exponentialDelay = this.config.baseDelay * Math.pow(this.config.exponentialBase, attempt);\n    const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n    const delay = exponentialDelay + jitter;\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  /**\n   * Check if error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error is retryable\n   */\n  isRetryableError(error) {\n    // Check for network errors\n    if (error.code && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    // Check for HTTP status codes\n    if (\n      error.response?.status &&\n      this.config.retryableStatusCodes.includes(error.response.status)\n    ) {\n      return true;\n    }\n\n    // Check for timeout errors\n    if (error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute function with retry logic\n   * @param {Function} fn - Async function to execute\n   * @param {string} operation - Operation name for logging\n   * @returns {Promise} Result of the function\n   */\n  async executeWithRetry(fn, operation = 'API call') {\n    let lastError;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const result = await fn();\n\n        // Log successful retry if this wasn't the first attempt\n        if (attempt > 0) {\n          console.log(`✅ ${operation} succeeded on attempt ${attempt + 1}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error)) {\n          console.warn(`❌ ${operation} failed with non-retryable error:`, error.message);\n          throw error;\n        }\n\n        const delay = this.calculateDelay(attempt);\n        console.warn(\n          `⚠️ ${operation} failed (attempt ${attempt + 1}/${this.config.maxRetries + 1}), retrying in ${delay}ms:`,\n          error.message\n        );\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    // All retries exhausted\n    console.error(\n      `❌ ${operation} failed after ${this.config.maxRetries + 1} attempts:`,\n      lastError.message\n    );\n    throw lastError;\n  }\n}\n\nclass DataFetchingService {\n  constructor(\n    env = import.meta.env,\n    customRateLimits = null,\n    retryConfig = null,\n    circuitBreakerConfig = null\n  ) {\n    this.rateLimiters = {};\n    this.cache = new Map();\n    this.cacheExpiry = new Map();\n    this.env = env;\n    this.customRateLimits = customRateLimits;\n    this.demoMode = this.isDemoMode(env);\n    this.retryManager = new RetryManager(retryConfig);\n    this.circuitBreakers = this.initializeCircuitBreakers(circuitBreakerConfig);\n    this.logger = apiLogger;\n    this.initializeRateLimiters();\n\n    // Log service initialization\n    this.logger.log('INFO', '🚀 DataFetchingService initialized', {\n      demoMode: this.demoMode,\n      environment: env.VITE_APP_ENV || 'development'\n    });\n  }\n\n  isDemoMode(env = import.meta.env) {\n    // Check if we're forcing demo mode\n    if (env.VITE_FORCE_DEMO_MODE === 'true') {\n      return true;\n    }\n\n    // Check if we're using demo API keys\n    const hasValidKeys =\n      (env.VITE_ALPHA_VANTAGE_API_KEY && env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo') ||\n      (env.VITE_FMP_API_KEY && env.VITE_FMP_API_KEY !== 'demo');\n    return !hasValidKeys;\n  }\n\n  initializeCircuitBreakers(config) {\n    const circuitBreakers = {};\n    const sources = ['ALPHA_VANTAGE', 'FMP', 'SEC_EDGAR', 'YAHOO_FINANCE'];\n\n    sources.forEach(source => {\n      circuitBreakers[source] = new CircuitBreaker(source, config);\n    });\n\n    return circuitBreakers;\n  }\n\n  initializeRateLimiters() {\n    const rateLimits = this.customRateLimits || RATE_LIMITS;\n    Object.keys(rateLimits).forEach(source => {\n      this.rateLimiters[source] = {\n        requests: [],\n        limit: rateLimits[source].requests,\n        period: rateLimits[source].period\n      };\n    });\n  }\n\n  async checkRateLimit(source) {\n    const limiter = this.rateLimiters[source];\n    if (!limiter) return true;\n\n    const now = Date.now();\n    limiter.requests = limiter.requests.filter(time => now - time < limiter.period);\n\n    if (limiter.requests.length >= limiter.limit) {\n      const oldestRequest = Math.min(...limiter.requests);\n      const waitTime = limiter.period - (now - oldestRequest);\n\n      // Log rate limiting event\n      this.logger.logRateLimit(source, waitTime, limiter.limit - limiter.requests.length);\n\n      throw new Error(\n        `Rate limit exceeded for ${source}. Please wait ${Math.ceil(waitTime / 1000)} seconds.`\n      );\n    }\n\n    limiter.requests.push(now);\n    return true;\n  }\n\n  getCacheKey(method, params) {\n    return `${method}_${JSON.stringify(params)}`;\n  }\n\n  getFromCache(key) {\n    const expiry = this.cacheExpiry.get(key);\n    if (expiry && Date.now() > expiry) {\n      this.cache.delete(key);\n      this.cacheExpiry.delete(key);\n      this.logger.logCache('miss', key, { reason: 'expired' });\n      return null;\n    }\n    const cached = this.cache.get(key);\n    if (cached !== undefined) {\n      this.logger.logCache('hit', key, { size: JSON.stringify(cached).length });\n      return cached;\n    }\n    this.logger.logCache('miss', key, { reason: 'not_found' });\n    return null;\n  }\n\n  setCache(key, data, ttlMinutes = 60) {\n    this.cache.set(key, data);\n    this.cacheExpiry.set(key, Date.now() + ttlMinutes * 60 * 1000);\n    this.logger.logCache('set', key, {\n      ttlMinutes,\n      size: JSON.stringify(data).length,\n      expiresAt: new Date(Date.now() + ttlMinutes * 60 * 1000).toISOString()\n    });\n  }\n\n  generateMockData(ticker, dataType) {\n    // Generate realistic mock data for demo purposes\n    const basePrice = 100 + Math.random() * 200;\n    const marketCap = 1000000000 + Math.random() * 10000000000;\n\n    // Map common tickers to realistic company names\n    const companyNames = {\n      AAPL: 'Apple Inc.',\n      MSFT: 'Microsoft Corporation',\n      GOOGL: 'Alphabet Inc.',\n      AMZN: 'Amazon.com Inc.',\n      META: 'Meta Platforms Inc.',\n      TSLA: 'Tesla Inc.',\n      NVDA: 'NVIDIA Corporation'\n    };\n\n    switch (dataType) {\n      case 'profile':\n        return {\n          symbol: ticker,\n          companyName: companyNames[ticker] || `${ticker} Corporation`,\n          mktCap: marketCap,\n          pe: 15 + Math.random() * 20,\n          pb: 1 + Math.random() * 4,\n          beta: 0.8 + Math.random() * 0.8,\n          sector: 'Technology',\n          industry: 'Software',\n          sharesOutstanding: marketCap / basePrice,\n          enterpriseValueOverEBITDA: 10 + Math.random() * 15,\n          debtToEquity: Math.random() * 2,\n          revenueTTM: marketCap * 0.8,\n          grossProfitMargin: 0.3 + Math.random() * 0.4,\n          netProfitMargin: 0.1 + Math.random() * 0.2,\n          returnOnEquityTTM: 0.1 + Math.random() * 0.2,\n          returnOnAssetsTTM: 0.05 + Math.random() * 0.15,\n          effectiveTaxRateTTM: 0.21,\n          fullTimeEmployees: 1000 + Math.random() * 50000,\n          ipoDate: '2010-01-01',\n          range: `$${(basePrice * 0.8).toFixed(2)} - $${(basePrice * 1.3).toFixed(2)}`\n        };\n\n      case 'marketData':\n        return {\n          symbol: ticker,\n          currentPrice: basePrice,\n          previousClose: basePrice * (0.98 + Math.random() * 0.04),\n          marketCap,\n          volume: 1000000 + Math.random() * 5000000,\n          currency: 'USD'\n        };\n\n      case 'incomeStatement':\n      case 'income':\n        const revenue = marketCap * 0.8;\n        return [\n          {\n            revenue,\n            ebitda: revenue * 0.25,\n            netIncome: revenue * 0.15,\n            capex: revenue * 0.05,\n            interestExpense: revenue * 0.02,\n            grossProfitMargin: 0.6\n          }\n        ];\n\n      case 'balanceSheet':\n        return [\n          {\n            totalDebt: marketCap * 0.3,\n            cashAndCashEquivalents: marketCap * 0.1,\n            totalCurrentAssets: marketCap * 0.4,\n            totalCurrentLiabilities: marketCap * 0.2\n          }\n        ];\n\n      case 'cashFlow':\n        return [\n          {\n            freeCashFlow: marketCap * 0.12\n          }\n        ];\n\n      default:\n        return null;\n    }\n  }\n\n  async fetchCompanyProfile(ticker) {\n    const cacheKey = this.getCacheKey('profile', { ticker });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock data for', ticker);\n      const mockData = this.generateMockData(ticker, 'profile');\n      this.setCache(cacheKey, mockData, 1440);\n      return mockData;\n    }\n\n    return this.circuitBreakers.FMP.execute(async() => {\n      return this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        // Log API request start\n        const requestId = this.logger.logApiRequest('FMP', `/profile/${ticker}`, { ticker });\n\n        try {\n          const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/profile/${ticker}`, {\n            params: { apikey: DATA_SOURCES.FMP.apiKey },\n            timeout: 10000\n          });\n\n          if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          const profile = response.data[0];\n          if (!profile || typeof profile !== 'object') {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          // Log successful API response\n          this.logger.logApiResponse(requestId, true, {\n            profileFound: true,\n            ticker: profile.symbol\n          });\n\n          this.setCache(cacheKey, profile, 1440); // Cache for 24 hours\n          return profile;\n        } catch (error) {\n          // Log failed API response\n          this.logger.logApiResponse(requestId, false, null, error);\n          throw error;\n        }\n      }, `Company profile fetch for ${ticker}`);\n    }).catch(error => {\n      // Handle circuit breaker errors - preserve the circuitBreakerOpen property\n      if (error.circuitBreakerOpen) {\n        throw error;\n      }\n\n      // Handle authentication errors with fallback to demo mode\n      if (error.response?.status === 403 || error.response?.status === 401) {\n        console.warn('API key invalid, falling back to demo mode');\n        const mockData = this.generateMockData(ticker, 'profile');\n        this.setCache(cacheKey, mockData, 1440);\n        return mockData;\n      }\n      throw new Error(`Failed to fetch company profile: ${error.message}`);\n    });\n  }\n\n  async fetchFinancialStatements(\n    ticker,\n    statement = 'income-statement',\n    period = 'annual',\n    limit = 5\n  ) {\n    const cacheKey = this.getCacheKey('financials', { ticker, statement, period, limit });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock financial data for', ticker);\n      const mockData = this.generateMockData(\n        ticker,\n        statement.replace('-statement', '').replace('-', '')\n      );\n      this.setCache(cacheKey, mockData, 360);\n      return mockData;\n    }\n\n    return this.retryManager\n      .executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/${statement}/${ticker}`, {\n          params: {\n            apikey: DATA_SOURCES.FMP.apiKey,\n            period,\n            limit\n          },\n          timeout: 15000\n        });\n\n        if (!response.data || response.data.length === 0) {\n          throw new Error(`No ${statement} data found for ${ticker}`);\n        }\n\n        this.setCache(cacheKey, response.data, 360); // Cache for 6 hours\n        return response.data;\n      }, `Financial statements fetch for ${ticker} (${statement})`)\n      .catch(error => {\n        // Handle authentication errors with fallback to demo mode\n        if (error.response?.status === 403 || error.response?.status === 401) {\n          console.warn('API key invalid, falling back to demo mode');\n          const mockData = this.generateMockData(\n            ticker,\n            statement.replace('-statement', '').replace('-', '')\n          );\n          this.setCache(cacheKey, mockData, 360);\n          return mockData;\n        }\n        throw new Error(`Failed to fetch ${statement}: ${error.message}`);\n      });\n  }\n\n  async fetchMarketData(ticker, range = '1y') {\n    const cacheKey = this.getCacheKey('market', { ticker, range });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock market data for', ticker);\n      const mockData = this.generateMockData(ticker, 'marketData');\n      this.setCache(cacheKey, mockData, 15);\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        // Try Yahoo Finance first (no API key required)\n        const response = await axios.get(`${DATA_SOURCES.YAHOO_FINANCE.baseURL}/${ticker}`, {\n          params: { range, interval: '1d' },\n          timeout: 10000\n        });\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        const marketData = {\n          symbol: result.meta.symbol,\n          currentPrice: result.meta.regularMarketPrice,\n          previousClose: result.meta.previousClose,\n          marketCap: result.meta.marketCap,\n          volume: result.meta.regularMarketVolume,\n          timestamps: result.timestamp,\n          prices: result.indicators.quote[0],\n          currency: result.meta.currency\n        };\n\n        this.setCache(cacheKey, marketData, 15); // Cache for 15 minutes\n        return marketData;\n      }, `Market data fetch for ${ticker}`);\n    } catch (error) {\n      // Fallback to Alpha Vantage or demo mode\n      console.warn(`Primary market data source failed for ${ticker}, trying alternative`);\n      return this.fetchMarketDataAlternative(ticker);\n    }\n  }\n\n  async fetchMarketDataAlternative(ticker) {\n    if (this.demoMode) {\n      const mockData = this.generateMockData(ticker, 'marketData');\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('ALPHA_VANTAGE');\n\n        const response = await axios.get(DATA_SOURCES.ALPHA_VANTAGE.baseURL, {\n          params: {\n            function: 'GLOBAL_QUOTE',\n            symbol: ticker,\n            apikey: DATA_SOURCES.ALPHA_VANTAGE.apiKey\n          },\n          timeout: 10000\n        });\n\n        const quote = response.data['Global Quote'];\n        if (!quote || Object.keys(quote).length === 0) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        return {\n          symbol: quote['01. symbol'],\n          currentPrice: parseFloat(quote['05. price']),\n          previousClose: parseFloat(quote['08. previous close']),\n          volume: parseInt(quote['06. volume']),\n          change: parseFloat(quote['09. change']),\n          changePercent: quote['10. change percent']\n        };\n      }, `Alternative market data fetch for ${ticker}`);\n    } catch (error) {\n      console.warn('Alternative market data API failed, using demo data');\n      return this.generateMockData(ticker, 'marketData');\n    }\n  }\n\n  async fetchSECFilings(ticker, filingType = '10-K', count = 5) {\n    const cacheKey = this.getCacheKey('sec', { ticker, filingType, count });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('SEC filings not available in demo mode');\n        return [\n          {\n            form: filingType,\n            filingDate: '2023-12-31',\n            accessionNumber: '0000000000-00-000000',\n            reportDate: '2023-12-31',\n            acceptanceDateTime: '2024-01-15T16:30:00',\n            act: '34',\n            primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n            url: '#demo-filing'\n          }\n        ];\n      }\n\n      await this.checkRateLimit('SEC_EDGAR');\n\n      // This would need proper CIK lookup implementation\n      // For now, return demo data\n      return [\n        {\n          form: filingType,\n          filingDate: '2023-12-31',\n          accessionNumber: '0000000000-00-000000',\n          reportDate: '2023-12-31',\n          acceptanceDateTime: '2024-01-15T16:30:00',\n          act: '34',\n          primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n          url: '#demo-filing'\n        }\n      ];\n    } catch (error) {\n      throw new Error(`Failed to fetch SEC filings: ${error.message}`);\n    }\n  }\n\n  async fetchPeerComparables(ticker, industryCode = null) {\n    const cacheKey = this.getCacheKey('peers', { ticker, industryCode });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('Using demo peer data');\n        const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n        const peers = peerTickers.slice(0, 5).map(peerTicker => {\n          const basePrice = 100 + Math.random() * 200;\n          const marketCap = 1000000000 + Math.random() * 2000000000;\n          return {\n            symbol: peerTicker,\n            name: `${peerTicker} Corporation`,\n            marketCap,\n            currentPrice: basePrice,\n            sector: 'Technology',\n            industry: 'Software',\n            peRatio: 15 + Math.random() * 20,\n            evToEbitda: 10 + Math.random() * 15,\n            priceToBook: 1 + Math.random() * 4,\n            debtToEquity: Math.random() * 2\n          };\n        });\n        this.setCache(cacheKey, peers, 240);\n        return peers;\n      }\n\n      await this.checkRateLimit('FMP');\n\n      // Get company profile first to determine industry\n      const profile = await this.fetchCompanyProfile(ticker);\n\n      // For demo, use hardcoded peer list\n      const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n\n      // Fetch key metrics for peer analysis\n      const peerData = await Promise.allSettled(\n        peerTickers.slice(0, 5).map(async peerTicker => {\n          const peerProfile = await this.fetchCompanyProfile(peerTicker);\n          const peerMarket = await this.fetchMarketData(peerTicker);\n\n          return {\n            symbol: peerTicker,\n            name: peerProfile.companyName,\n            marketCap: peerProfile.mktCap,\n            currentPrice: peerMarket.currentPrice,\n            sector: peerProfile.sector,\n            industry: peerProfile.industry,\n            peRatio: peerProfile.pe,\n            evToEbitda: peerProfile.enterpriseValueOverEBITDA,\n            priceToBook: peerProfile.pb,\n            debtToEquity: peerProfile.debtToEquity\n          };\n        })\n      );\n\n      const validPeers = peerData\n        .filter(result => result.status === 'fulfilled')\n        .map(result => result.value);\n\n      this.setCache(cacheKey, validPeers, 240); // Cache for 4 hours\n      return validPeers;\n    } catch (error) {\n      throw new Error(`Failed to fetch peer comparables: ${error.message}`);\n    }\n  }\n\n  async fetchDCFInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, cashFlows, marketData] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'cash-flow-statement', 'annual', 5),\n        this.fetchMarketData(ticker)\n      ]);\n\n      // Calculate historical growth rates\n      const revenues = Array.isArray(incomeStatements)\n        ? incomeStatements.map(stmt => stmt.revenue).reverse()\n        : [incomeStatements.revenue];\n      const revenueGrowthRates = [];\n      for (let i = 1; i < revenues.length; i++) {\n        if (revenues[i - 1] && revenues[i]) {\n          revenueGrowthRates.push((revenues[i] - revenues[i - 1]) / revenues[i - 1]);\n        }\n      }\n      const avgRevenueGrowth =\n        revenueGrowthRates.length > 0\n          ? revenueGrowthRates.reduce((a, b) => a + b, 0) / revenueGrowthRates.length\n          : 0.05; // Default 5% growth\n\n      // Calculate free cash flow margin\n      const latestCashFlow = Array.isArray(cashFlows) ? cashFlows[0] : cashFlows;\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const fcfMargin = latestCashFlow.freeCashFlow / latestIncome.revenue;\n\n      // Estimate WACC components\n      const riskFreeRate = 0.045; // 4.5% - this should come from treasury rates API\n      const marketPremium = 0.065; // 6.5% historical market premium\n      const beta = profile.beta || 1.0;\n      const costOfEquity = riskFreeRate + beta * marketPremium;\n\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n      const totalDebt = latestBalance.totalDebt || 0;\n      const marketCap = marketData.marketCap || marketData.currentPrice * profile.sharesOutstanding;\n      const debtRatio = totalDebt / (totalDebt + marketCap);\n      const taxRate = profile.effectiveTaxRateTTM || 0.21;\n\n      const wacc = costOfEquity * (1 - debtRatio) + 0.04 * debtRatio * (1 - taxRate); // Assuming 4% cost of debt\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentRevenue: latestIncome.revenue,\n        revenueGrowthRate: avgRevenueGrowth,\n        fcfMargin,\n        wacc,\n        terminalGrowthRate: 0.025, // 2.5% long-term GDP growth assumption\n        currentPrice: marketData.currentPrice,\n        sharesOutstanding: profile.sharesOutstanding,\n        marketCap,\n        totalDebt,\n        cash: latestBalance.cashAndCashEquivalents || 0,\n        beta,\n        peRatio: profile.pe,\n        historicalData: {\n          revenues,\n          revenueGrowthRates,\n          freeCashFlows: Array.isArray(cashFlows)\n            ? cashFlows.map(cf => cf.freeCashFlow).reverse()\n            : [latestCashFlow.freeCashFlow],\n          margins: Array.isArray(incomeStatements)\n            ? incomeStatements.map(stmt => stmt.grossProfitMargin).reverse()\n            : [latestIncome.grossProfitMargin]\n        }\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch DCF inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async fetchLBOInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, marketData, peers] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 3),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 3),\n        this.fetchMarketData(ticker),\n        this.fetchPeerComparables(ticker)\n      ]);\n\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n\n      // Calculate key LBO metrics\n      const ebitda = latestIncome.ebitda;\n      const currentEV =\n        marketData.marketCap + latestBalance.totalDebt - latestBalance.cashAndCashEquivalents;\n      const evEbitdaMultiple = currentEV / ebitda;\n\n      // Peer multiples for exit assumptions\n      const peerEvEbitdaMultiples = peers\n        .filter(peer => peer.evToEbitda && peer.evToEbitda > 0)\n        .map(peer => peer.evToEbitda);\n      const avgPeerMultiple =\n        peerEvEbitdaMultiples.length > 0\n          ? peerEvEbitdaMultiples.reduce((a, b) => a + b, 0) / peerEvEbitdaMultiples.length\n          : evEbitdaMultiple;\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentPrice: marketData.currentPrice,\n        marketCap: marketData.marketCap,\n        enterpriseValue: currentEV,\n        ebitda,\n        evEbitdaMultiple,\n        revenue: latestIncome.revenue,\n        netIncome: latestIncome.netIncome,\n        totalDebt: latestBalance.totalDebt,\n        cash: latestBalance.cashAndCashEquivalents,\n        workingCapital: latestBalance.totalCurrentAssets - latestBalance.totalCurrentLiabilities,\n        capex: Math.abs(latestIncome.capex || 0),\n        debtToEbitda: latestBalance.totalDebt / ebitda,\n        interestCoverage: ebitda / (latestIncome.interestExpense || 1),\n        avgPeerMultiple,\n        suggestedPurchasePrice: ebitda * avgPeerMultiple,\n        maxDebtCapacity: ebitda * 6, // 6x EBITDA debt capacity assumption\n        sharesOutstanding: profile.sharesOutstanding\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch LBO inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async validateTicker(ticker) {\n    try {\n      // In demo mode, only validate known tickers\n      if (this.demoMode) {\n        const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA'];\n        return knownTickers.includes(ticker);\n      }\n\n      await this.fetchCompanyProfile(ticker);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Add method to check API status\n  async getApiStatus() {\n    const validationResults = await apiKeyValidator.validateAllKeys();\n    const metrics = this.logger.getMetrics();\n\n    return {\n      demoMode: this.demoMode,\n      cacheSize: this.cache.size,\n      validation: validationResults,\n      circuitBreakers: this.getCircuitBreakerStatus(),\n      metrics,\n      performance: {\n        uptime: metrics.uptime,\n        totalRequests: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.requests?.total || 0),\n          0\n        ),\n        totalErrors: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.error?.total || 0),\n          0\n        ),\n        averageResponseTime: this.calculateAverageResponseTime(metrics.services),\n        cacheHitRate: this.calculateCacheHitRate(metrics.cache)\n      },\n      availableKeys: {\n        alphaVantage: !!(\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY &&\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo'\n        ),\n        fmp: !!(import.meta.env.VITE_FMP_API_KEY && import.meta.env.VITE_FMP_API_KEY !== 'demo'),\n        quandl: !!(\n          import.meta.env.VITE_QUANDL_API_KEY && import.meta.env.VITE_QUANDL_API_KEY !== 'demo'\n        ),\n        fred: !!(import.meta.env.VITE_FRED_API_KEY && import.meta.env.VITE_FRED_API_KEY !== 'demo')\n      },\n      recommendations: validationResults.recommendations\n    };\n  }\n\n  // Get circuit breaker status for all services\n  getCircuitBreakerStatus() {\n    const status = {};\n    Object.keys(this.circuitBreakers).forEach(service => {\n      status[service] = this.circuitBreakers[service].getStatus();\n    });\n    return status;\n  }\n\n  // Calculate average response time across all services\n  calculateAverageResponseTime(services) {\n    let totalDuration = 0;\n    let totalRequests = 0;\n\n    Object.values(services).forEach(service => {\n      if (service.duration) {\n        totalDuration += service.duration.total;\n        totalRequests += service.duration.count;\n      }\n    });\n\n    return totalRequests > 0 ? Math.round(totalDuration / totalRequests) : 0;\n  }\n\n  // Calculate cache hit rate\n  calculateCacheHitRate(cache) {\n    const hits = cache.hit?.total || 0;\n    const misses = cache.miss?.total || 0;\n    const total = hits + misses;\n\n    return total > 0 ? Math.round((hits / total) * 100) : 0;\n  }\n\n  // Get recent logs for debugging\n  getRecentLogs(limit = 50, level = null) {\n    return this.logger.getRecentLogs(limit, level);\n  }\n\n  // Clear all metrics and logs\n  clearMetrics() {\n    this.logger.clear();\n  }\n\n  // Add method to validate API keys on demand\n  async validateApiKeys() {\n    return await apiKeyValidator.validateAllKeys();\n  }\n\n  /**\n   * Build comprehensive DCF model with advanced scenarios\n   * @param {string} symbol - Stock symbol\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete DCF analysis\n   */\n  async buildAdvancedDCFModel(symbol, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol)\n      ]);\n\n      // Prepare DCF inputs\n      const dcfInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        currentRevenue: financials.revenue || 0,\n        currentPrice: marketData.price || 0,\n        sharesOutstanding: profile.sharesOutstanding || 0,\n        totalDebt: profile.totalDebt || 0,\n        cash: profile.cash || 0,\n        historicalGrowthRates: this.calculateHistoricalGrowthRates(financials),\n        margins: {\n          ebitdaMargin: (financials.ebitda || 0) / (financials.revenue || 1)\n        },\n        balanceSheetData: financials,\n        marketData,\n        assumptions: {\n          ...assumptions,\n          wacc: assumptions.wacc || this.calculateWACC(profile, marketData),\n          revenueGrowthRate: assumptions.revenueGrowthRate || this.estimateGrowthRate(financials)\n        }\n      };\n\n      // Build comprehensive DCF model\n      const dcfModel = financialModelingEngine.buildDCFModel(dcfInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced DCF model built for ${symbol}`, {\n        baseCase: dcfModel.baseCase.pricePerShare,\n        scenarios: Object.keys(dcfModel.scenarios).length\n      });\n\n      return dcfModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build DCF model for ${symbol}`, { error: error.message });\n      throw new Error(`DCF modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {string} symbol - Stock symbol\n   * @param {Object} transactionInputs - Transaction parameters\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete LBO analysis\n   */\n  async buildAdvancedLBOModel(symbol, transactionInputs, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData, peerData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol),\n        this.fetchPeerComparison(symbol)\n      ]);\n\n      // Prepare LBO inputs\n      const lboInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        purchasePrice: transactionInputs.purchasePrice || marketData.marketCap,\n        ebitda: financials.ebitda || 0,\n        revenue: financials.revenue || 0,\n        marketData,\n        peerData,\n        assumptions: {\n          ...assumptions,\n          exit: {\n            ...assumptions.exit,\n            exitMultiple: assumptions.exit?.exitMultiple || this.calculatePeerAverageMultiple(peerData)\n          }\n        }\n      };\n\n      // Build comprehensive LBO model\n      const lboModel = lboModelingEngine.buildLBOModel(lboInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced LBO model built for ${symbol}`, {\n        baseCase: lboModel.baseCase.returnsAnalysis.irr,\n        scenarios: Object.keys(lboModel.scenarios).length\n      });\n\n      return lboModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build LBO model for ${symbol}`, { error: error.message });\n      throw new Error(`LBO modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate historical growth rates from financial data\n   * @param {Object} financials - Financial statements data\n   * @returns {Array} Historical growth rates\n   */\n  calculateHistoricalGrowthRates(financials) {\n    // This would analyze historical financial data to calculate growth rates\n    // Simplified implementation for now\n    return [0.15, 0.12, 0.10, 0.08, 0.06]; // Example declining growth rates\n  }\n\n  /**\n   * Estimate growth rate based on historical data\n   * @param {Object} financials - Financial statements data\n   * @returns {number} Estimated growth rate\n   */\n  estimateGrowthRate(financials) {\n    // Simplified growth rate estimation\n    // In practice, this would analyze multiple years of data\n    return 0.10; // 10% default growth rate\n  }\n\n  /**\n   * Calculate peer average multiple\n   * @param {Object} peerData - Peer comparison data\n   * @returns {number} Average peer multiple\n   */\n  calculatePeerAverageMultiple(peerData) {\n    if (!peerData || !peerData.peers) {\n      return 10; // Default multiple\n    }\n\n    const multiples = peerData.peers\n      .map(peer => peer.evToEbitda)\n      .filter(multiple => multiple && multiple > 0);\n\n    if (multiples.length === 0) {\n      return 10;\n    }\n\n    return multiples.reduce((sum, multiple) => sum + multiple, 0) / multiples.length;\n  }\n}\n\n// Export singleton instance\nexport const dataFetchingService = new DataFetchingService();\nexport default DataFetchingService;\n"],"names":["apiKeyValidator","constructor","this","validationResults","Map","lastValidation","validateAllKeys","results","timestamp","Date","overall","services","recommendations","apiKeys","validationPromises","validateAlphaVantage","validateFMP","validateQuandl","validateFRED","alphaVantage","fmp","quandl","fred","Promise","allSettled","processValidationResult","validServices","Object","values","filter","s","status","length","configuredServices","totalServices","keys","push","error","message","apiKey","response","axios","get","params","function","symbol","apikey","timeout","data","code","Array","isArray","api_key","rows","quandl_error","dataset","series_id","file_type","error_message","seriess","result","value","reason","getServiceStatus","serviceName","getOverallStatus","getRecommendations","shouldUseDemoMode","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","TRACE","DEFAULT_CONFIG","logLevel","enableMetrics","enablePerformanceTracking","enableErrorTracking","maxLogHistory","metricsRetentionPeriod","apiLogger","config","logs","metrics","performanceData","errorCounts","startTime","now","log","level","metadata","toUpperCase","logEntry","toISOString","id","generateLogId","trimLogs","outputToConsole","logApiRequest","service","endpoint","requestId","generateRequestId","sanitizeParams","set","logApiResponse","success","duration","responseSize","getResponseSize","recordMetric","statusText","recordError","delete","logRateLimit","waitTime","remainingRequests","action","logCircuitBreaker","state","emoji","OPEN","HALF_OPEN","CLOSED","toLowerCase","logCache","operation","key","hit","miss","clear","sanitizeCacheKey","metric","has","total","count","min","Infinity","max","avg","metricData","Math","cleanOldMetrics","errorKey","getMetrics","summary","uptime","totalLogs","cache","errors","entries","split","messageParts","join","getRecentLogs","limit","slice","reverse","random","toString","substr","sanitized","token","substring","JSON","stringify","cutoff","item","toLocaleTimeString","financialModelingEngine","modelCache","assumptions","getDefaultAssumptions","dcf","projectionYears","terminalGrowthRate","riskFreeRate","marketPremium","taxRate","capexAsPercentOfRevenue","nwcAsPercentOfRevenue","depreciationAsPercentOfRevenue","lbo","holdingPeriod","debtMultiples","senior","subordinated","interestRates","managementFeeRate","carriedInterestRate","ebitdaGrowthRate","debtPaydownRate","monte_carlo","iterations","confidenceIntervals","correlationMatrix","buildDCFModel","inputs","scenarios","companyName","currentRevenue","historicalGrowthRates","margins","balanceSheetData","marketData","modelAssumptions","baseCase","calculateDCFScenario","scenarioResults","bull","bullAssumptions","revenueGrowthRate","wacc","bear","bearAssumptions","sensitivityAnalysis","performDCFSensitivityAnalysis","modelType","generateDCFSummary","currentPrice","scenarioName","sharesOutstanding","totalDebt","cash","revenueProjections","projectRevenues","operatingProjections","projectOperatingMetrics","fcfProjections","calculateFreeCashFlows","terminalValue","calculateTerminalValue","pvOfCashFlows","calculatePresentValue","pvOfTerminalValue","enterpriseValue","equityValue","pricePerShare","upside","impliedMultiples","calculateImpliedMultiples","baseRevenue","growthRates","years","projections","i","growthRate","pow","year","revenue","map","projection","index","ebitdaMargin","ebitda","depreciation","ebit","taxes","nopat","capex","nwcChange","finalFCF","discountRate","Error","cashFlows","startYear","reduce","pv","cf","currentYearEbitda","nextYearEbitda","evToCurrentEbitda","evToForwardEbitda","baseAssumptions","forEach","variable","variations","variation","adjustedAssumptions","scenario","pricesPerShare","p","priceRange","average","sum","recommendation","generateRecommendation","keyMetrics","impliedReturn","rating","confidence","abs","round","reasoning","generateRecommendationReasoning","upsideAbs","toFixed","lboModelingEngine","transaction","managementRollover","transactionFees","financingFees","debt","seniorDebtMultiple","subordinatedDebtMultiple","totalDebtMultiple","seniorInterestRate","subordinatedInterestRate","mandatoryPaydown","cashSweep","operating","exit","exitMultiple","exitMultipleRange","publicMarketDiscount","fees","hurdle","buildLBOModel","purchasePrice","peerData","transactionStructure","calculateTransactionStructure","calculateLBOScenario","upsideAssumptions","downside","downsideAssumptions","performLBOSensitivityAnalysis","generateLBOSummary","seniorDebt","totalUses","equityContribution","sponsorEquity","adjustedTotalDebt","adjustedSeniorDebt","subordinatedDebt","debtToEbitda","equityToTotalCapital","projectLBOOperatingPerformance","debtSchedule","calculateDebtSchedule","equityCashFlows","calculateEquityCashFlows","exitAnalysis","calculateExitAnalysis","returnsAnalysis","calculateReturnsMetrics","netProceeds","calculateLBOKeyMetrics","baseEbitda","operatingAssumptions","currentEbitda","ebitdaGrowth","unleveredFCF","debtAssumptions","schedule","seniorDebtBalance","subordinatedDebtBalance","seniorInterest","subordinatedInterest","totalInterest","cashAvailableForDebt","excessCash","totalPaydown","seniorPaydown","subordinatedPaydown","beginningBalance","endingBalance","interestExpense","principalPayment","managementFees","cashFlowToEquity","finalYearProjection","finalYearDebt","exitEbitda","totalDebtAtExit","grossProceeds","totalReturn","investedCapital","carriedInterest","managementProceeds","initialInvestment","exitProceeds","irr","NaN","moic","totalCashReturned","annualizedReturn","calculateIRR","isNaN","every","sign","rate","tolerance","npv","dnpv","j","factor","newRate","entryMultiple","leverageReduction","debtMultiple","newDebtMultiple","adjustedStructure","allScenarios","irrs","moics","returnRange","irrMin","irrMax","irrAverage","moicMin","moicMax","moicAverage","investmentHighlights","generateInvestmentHighlights","riskFactors","generateRiskFactors","highlights","risks","DATA_SOURCES","baseURL","fallbackURL","RATE_LIMITS","ALPHA_VANTAGE","requests","period","FMP","SEC_EDGAR","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","exponentialBase","jitterFactor","retryableStatusCodes","retryableErrors","CIRCUIT_BREAKER_CONFIG","failureThreshold","recoveryTimeout","monitoringPeriod","halfOpenMaxCalls","CIRCUIT_STATES","CircuitBreaker","name","failureCount","lastFailureTime","halfOpenCallCount","successCount","totalCalls","canExecute","recordSuccess","recordFailure","getStatus","failureRate","isOpen","nextRetryTime","execute","fn","circuitBreakerOpen","RetryManager","calculateDelay","attempt","exponentialDelay","delay","isRetryableError","includes","executeWithRetry","lastError","resolve","setTimeout","dataFetchingService","env","__vite_import_meta_env__","customRateLimits","retryConfig","circuitBreakerConfig","rateLimiters","cacheExpiry","demoMode","isDemoMode","retryManager","circuitBreakers","initializeCircuitBreakers","logger","initializeRateLimiters","environment","VITE_APP_ENV","VITE_FORCE_DEMO_MODE","VITE_ALPHA_VANTAGE_API_KEY","VITE_FMP_API_KEY","source","rateLimits","checkRateLimit","limiter","time","oldestRequest","ceil","getCacheKey","method","getFromCache","expiry","cached","size","setCache","ttlMinutes","expiresAt","generateMockData","ticker","dataType","basePrice","marketCap","companyNames","AAPL","MSFT","GOOGL","AMZN","META","TSLA","NVDA","mktCap","pe","pb","beta","sector","industry","enterpriseValueOverEBITDA","debtToEquity","revenueTTM","grossProfitMargin","netProfitMargin","returnOnEquityTTM","returnOnAssetsTTM","effectiveTaxRateTTM","fullTimeEmployees","ipoDate","range","previousClose","volume","currency","netIncome","cashAndCashEquivalents","totalCurrentAssets","totalCurrentLiabilities","freeCashFlow","fetchCompanyProfile","cacheKey","mockData","async","profile","profileFound","catch","fetchFinancialStatements","statement","replace","fetchMarketData","interval","chart","meta","regularMarketPrice","regularMarketVolume","timestamps","prices","indicators","quote","fetchMarketDataAlternative","parseFloat","parseInt","change","changePercent","fetchSECFilings","filingType","form","filingDate","accessionNumber","reportDate","acceptanceDateTime","act","primaryDocument","url","fetchPeerComparables","industryCode","peers","t","peerTicker","peRatio","evToEbitda","priceToBook","peerTickers","validPeers","peerProfile","peerMarket","fetchDCFInputs","incomeStatements","balanceSheets","all","revenues","stmt","revenueGrowthRates","avgRevenueGrowth","a","b","latestCashFlow","latestIncome","fcfMargin","costOfEquity","latestBalance","debtRatio","historicalData","freeCashFlows","fetchLBOInputs","currentEV","evEbitdaMultiple","peerEvEbitdaMultiples","peer","avgPeerMultiple","workingCapital","interestCoverage","suggestedPurchasePrice","maxDebtCapacity","validateTicker","getApiStatus","cacheSize","validation","getCircuitBreakerStatus","performance","totalRequests","totalErrors","averageResponseTime","calculateAverageResponseTime","cacheHitRate","calculateCacheHitRate","availableKeys","totalDuration","hits","clearMetrics","validateApiKeys","buildAdvancedDCFModel","financials","dcfInputs","price","calculateHistoricalGrowthRates","calculateWACC","estimateGrowthRate","dcfModel","buildAdvancedLBOModel","transactionInputs","fetchPeerComparison","lboInputs","calculatePeerAverageMultiple","lboModel","multiples","multiple"],"mappings":"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"}
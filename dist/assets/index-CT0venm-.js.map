{"version":3,"file":"index-CT0venm-.js","sources":["../../src/pages/financial-model-workspace/components/AuditTrail.jsx","../../src/pages/financial-model-workspace/components/CalculationResults.jsx","../../src/pages/financial-model-workspace/components/FormulaBuilder.jsx","../../src/pages/financial-model-workspace/components/ModelTemplates.jsx","../../src/utils/dataTransformation.js","../../src/services/commandRegistry.js","../../src/services/utils/CryptoUtils.js","../../src/services/utils/CompressionUtils.js","../../src/services/persistence/LocalStorageService.js","../../src/services/persistence/IndexedDBService.js","../../src/services/persistence/SessionManager.js","../../src/services/persistence/DataMigrationService.js","../../src/services/persistence/PersistenceManager.js","../../src/services/commandProcessor.js","../../src/services/commands/coreCommands.js","../../src/services/commands/portfolioCommands.js","../../src/services/commands/valuationCommands.js","../../src/services/commands/technicalCommands.js","../../src/services/commands/esgCommands.js","../../src/services/commands/automationCommands.js","../../src/services/commands/dataCommands.js","../../src/services/commands/systemCommands.js","../../src/services/persistence/BackupService.js","../../src/services/persistence/PrivacyService.js","../../src/services/persistence/SyncService.js","../../src/services/persistence/PersistenceTestSuite.js","../../src/services/commands/persistenceCommands.js","../../src/services/commandInitializer.js","../../src/pages/financial-model-workspace/components/TerminalInterface.jsx","../../src/pages/financial-model-workspace/components/VariableInputs.jsx","../../src/pages/financial-model-workspace/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst AuditTrail = ({ calculations, errors, warnings }) => {\n  const [activeTab, setActiveTab] = useState('calculations');\n  const [expandedItems, setExpandedItems] = useState(new Set());\n  const [filterLevel, setFilterLevel] = useState('all');\n\n  const mockAuditData = {\n    calculations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 300000),\n        type: 'calculation',\n        operation: 'DCF Valuation',\n        formula: 'NPV(FCFF_2024:2028, WACC)',\n        result: 2547.5,\n        inputs: {\n          FCFF_2024: 187.5,\n          FCFF_2025: 206.3,\n          FCFF_2026: 226.9,\n          FCFF_2027: 249.6,\n          FCFF_2028: 274.6,\n          WACC: 0.098\n        },\n        executionTime: 0.045,\n        status: 'success'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 600000),\n        type: 'calculation',\n        operation: 'WACC Calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        result: 0.098,\n        inputs: {\n          cost_equity: 0.123,\n          cost_debt: 0.045,\n          tax_rate: 0.25,\n          debt_ratio: 0.4\n        },\n        executionTime: 0.012,\n        status: 'success'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 900000),\n        type: 'calculation',\n        operation: 'Terminal Value',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        result: 1247.3,\n        inputs: {\n          FCF_final: 274.6,\n          terminal_growth: 0.025,\n          WACC: 0.098\n        },\n        executionTime: 0.008,\n        status: 'success'\n      }\n    ],\n    errors: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 1200000),\n        type: 'error',\n        severity: 'high',\n        message: 'Division by zero in WACC calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        location: 'Cell B15',\n        suggestion: 'Ensure debt_ratio is not equal to 1.0',\n        resolved: true\n      }\n    ],\n    warnings: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 180000),\n        type: 'warning',\n        severity: 'medium',\n        message: 'Beta coefficient (1.15) is above industry average (0.95)',\n        formula: 'CAPM(risk_free, beta, market_premium)',\n        location: 'Assumptions',\n        suggestion: 'Consider reviewing beta calculation or using industry average',\n        acknowledged: false\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 420000),\n        type: 'warning',\n        severity: 'low',\n        message: 'Terminal growth rate (2.5%) close to discount rate component',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        location: 'Terminal Value',\n        suggestion: 'Ensure terminal growth rate is reasonable for long-term GDP growth',\n        acknowledged: true\n      }\n    ],\n    validations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 60000),\n        type: 'validation',\n        check: 'Circular Reference Check',\n        status: 'passed',\n        details: 'No circular references detected in model'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 120000),\n        type: 'validation',\n        check: 'Balance Sheet Check',\n        status: 'passed',\n        details: 'Assets = Liabilities + Equity for all projection years'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 240000),\n        type: 'validation',\n        check: 'Cash Flow Consistency',\n        status: 'warning',\n        details: 'Minor rounding differences in cash flow statements (<$0.1M)'\n      }\n    ]\n  };\n\n  const tabs = [\n    {\n      id: 'calculations',\n      label: 'Calculations',\n      icon: 'Calculator',\n      count: mockAuditData.calculations.length\n    },\n    { id: 'errors', label: 'Errors', icon: 'XCircle', count: mockAuditData.errors.length },\n    {\n      id: 'warnings',\n      label: 'Warnings',\n      icon: 'AlertTriangle',\n      count: mockAuditData.warnings.length\n    },\n    {\n      id: 'validations',\n      label: 'Validations',\n      icon: 'CheckCircle',\n      count: mockAuditData.validations.length\n    }\n  ];\n\n  const toggleExpanded = id => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'success':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      case 'error':\n        return { icon: 'XCircle', color: 'text-destructive' };\n      case 'warning':\n        return { icon: 'AlertTriangle', color: 'text-warning' };\n      case 'passed':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      default:\n        return { icon: 'Info', color: 'text-muted-foreground' };\n    }\n  };\n\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'high':\n        return 'text-destructive bg-destructive/10';\n      case 'medium':\n        return 'text-warning bg-warning/10';\n      case 'low':\n        return 'text-muted-foreground bg-muted';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const formatExecutionTime = time => {\n    if (time < 0.001) return '<1ms';\n    if (time < 1) return `${(time * 1000).toFixed(0)}ms`;\n    return `${time.toFixed(2)}s`;\n  };\n\n  const renderCalculations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.calculations.map(calc => (\n        <div key={calc.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Icon name=\"Calculator\" size={16} className=\"text-primary\" />\n                <span className=\"font-medium text-foreground\">{calc.operation}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(calc.status).color} bg-current/10`}\n                >\n                  {calc.status}\n                </span>\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {calc.formula}\n              </code>\n              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                <span>{calc.timestamp.toLocaleTimeString()}</span>\n                <span>Execution: {formatExecutionTime(calc.executionTime)}</span>\n                <span>Result: ${calc.result.toFixed(2)}M</span>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName={expandedItems.has(calc.id) ? 'ChevronUp' : 'ChevronDown'}\n              onClick={() => toggleExpanded(calc.id)}\n            />\n          </div>\n\n          {expandedItems.has(calc.id) && (\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <h5 className=\"text-sm font-medium text-foreground mb-2\">Input Values</h5>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Object.entries(calc.inputs).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">{key}:</span>\n                    <span className=\"text-foreground font-mono\">\n                      {typeof value === 'number' ? value.toFixed(3) : value}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderErrors = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.errors.map(error => (\n        <div key={error.id} className=\"p-4 bg-background border border-destructive/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"XCircle\" size={16} className=\"text-destructive mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{error.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(error.severity)}`}\n                >\n                  {error.severity}\n                </span>\n                {error.resolved && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-success bg-success/10\">\n                    Resolved\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {error.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {error.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {error.suggestion}\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                {error.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderWarnings = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.warnings.map(warning => (\n        <div key={warning.id} className=\"p-4 bg-background border border-warning/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"AlertTriangle\" size={16} className=\"text-warning mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{warning.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(warning.severity)}`}\n                >\n                  {warning.severity}\n                </span>\n                {warning.acknowledged && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-muted-foreground bg-muted\">\n                    Acknowledged\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {warning.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {warning.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {warning.suggestion}\n              </div>\n              <div className=\"flex items-center justify-between mt-3\">\n                <div className=\"text-xs text-muted-foreground\">\n                  {warning.timestamp.toLocaleString()}\n                </div>\n                {!warning.acknowledged && (\n                  <Button variant=\"outline\" size=\"sm\">\n                    Acknowledge\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderValidations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.validations.map(validation => (\n        <div key={validation.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon\n              name={getStatusIcon(validation.status).icon}\n              size={16}\n              className={`${getStatusIcon(validation.status).color} mt-0.5`}\n            />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{validation.check}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(validation.status).color} bg-current/10`}\n                >\n                  {validation.status}\n                </span>\n              </div>\n              <div className=\"text-sm text-muted-foreground mb-2\">{validation.details}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {validation.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'calculations':\n        return renderCalculations();\n      case 'errors':\n        return renderErrors();\n      case 'warnings':\n        return renderWarnings();\n      case 'validations':\n        return renderValidations();\n      default:\n        return renderCalculations();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Audit Trail</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Download\">\n            Export Log\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"RefreshCw\">\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n            {tab.count > 0 && (\n              <span className=\"px-2 py-1 bg-current/20 rounded-full text-xs\">{tab.count}</span>\n            )}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Audit logging active</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuditTrail;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst CalculationResults = ({ results, onExport }) => {\n  const [activeTab, setActiveTab] = useState('summary');\n  const [expandedSections, setExpandedSections] = useState(new Set(['valuation']));\n\n  const mockResults = {\n    summary: {\n      enterpriseValue: 2847.5,\n      equityValue: 2547.5,\n      sharePrice: 127.38,\n      impliedReturn: 0.156,\n      confidence: 0.87\n    },\n    cashFlows: [\n      { year: 2024, revenue: 1250, ebitda: 312.5, fcf: 187.5, pv: 170.5 },\n      { year: 2025, revenue: 1375, ebitda: 343.8, fcf: 206.3, pv: 172.8 },\n      { year: 2026, revenue: 1513, ebitda: 378.2, fcf: 226.9, pv: 175.2 },\n      { year: 2027, revenue: 1664, ebitda: 416.0, fcf: 249.6, pv: 177.7 },\n      { year: 2028, revenue: 1830, ebitda: 457.6, fcf: 274.6, pv: 180.3 }\n    ],\n    sensitivity: {\n      wacc: [0.08, 0.09, 0.1, 0.11, 0.12],\n      growth: [0.015, 0.02, 0.025, 0.03, 0.035],\n      matrix: [\n        [145.2, 138.7, 132.8, 127.4, 122.5],\n        [152.1, 144.9, 138.2, 132.1, 126.4],\n        [159.8, 151.9, 144.6, 137.8, 131.6],\n        [168.4, 159.7, 151.8, 144.4, 137.6],\n        [178.1, 168.4, 159.7, 151.8, 144.4]\n      ]\n    },\n    scenarios: [\n      { name: 'Base Case', probability: 0.6, sharePrice: 127.38, irr: 0.156 },\n      { name: 'Bull Case', probability: 0.25, sharePrice: 145.67, irr: 0.189 },\n      { name: 'Bear Case', probability: 0.15, sharePrice: 98.42, irr: 0.087 }\n    ],\n    multiples: [\n      { metric: 'EV/Revenue', current: 2.3, peer_avg: 2.8, premium: -17.9 },\n      { metric: 'EV/EBITDA', current: 9.1, peer_avg: 11.2, premium: -18.8 },\n      { metric: 'P/E Ratio', current: 18.5, peer_avg: 22.1, premium: -16.3 },\n      { metric: 'P/B Ratio', current: 2.1, peer_avg: 2.6, premium: -19.2 }\n    ]\n  };\n\n  const tabs = [\n    { id: 'summary', label: 'Summary', icon: 'BarChart3' },\n    { id: 'cashflows', label: 'Cash Flows', icon: 'TrendingUp' },\n    { id: 'sensitivity', label: 'Sensitivity', icon: 'Target' },\n    { id: 'scenarios', label: 'Scenarios', icon: 'GitBranch' },\n    { id: 'multiples', label: 'Multiples', icon: 'Layers' }\n  ];\n\n  const toggleSection = section => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const formatCurrency = (value, decimals = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(value);\n  };\n\n  const formatPercent = (value, decimals = 1) => {\n    return `${(value * 100).toFixed(decimals)}%`;\n  };\n\n  const renderSummary = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Enterprise Value</span>\n            <Icon name=\"Building\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.enterpriseValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Equity Value</span>\n            <Icon name=\"PieChart\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.equityValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Share Price</span>\n            <Icon name=\"DollarSign\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.sharePrice)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Implied Return</span>\n            <Icon name=\"TrendingUp\" size={16} className=\"text-success\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-success\">\n              {formatPercent(mockResults.summary.impliedReturn)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Indicator */}\n      <div className=\"p-4 bg-background border border-border rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-sm font-medium text-foreground\">Model Confidence</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {formatPercent(mockResults.summary.confidence)}\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2\">\n          <div\n            className=\"bg-success h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${mockResults.summary.confidence * 100}%` }}\n          />\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Based on data quality, assumption validity, and sensitivity analysis\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderCashFlows = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Year</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Revenue</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">EBITDA</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">FCF</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Present Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.cashFlows.map((cf, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{cf.year}</td>\n                <td className=\"py-3 text-right text-foreground\">\n                  {formatCurrency(cf.revenue, 0)}M\n                </td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.ebitda, 1)}M</td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.fcf, 1)}M</td>\n                <td className=\"py-3 text-right text-success font-medium\">\n                  {formatCurrency(cf.pv, 1)}M\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-foreground\">Terminal Value</span>\n          <span className=\"text-lg font-bold text-foreground\">{formatCurrency(1247.3, 1)}M</span>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          2.5% perpetual growth rate applied to 2028 FCF\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderSensitivity = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h4 className=\"text-sm font-medium text-foreground mb-2\">\n          Share Price Sensitivity Analysis\n        </h4>\n        <p className=\"text-xs text-muted-foreground\">WACC vs Terminal Growth Rate</p>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-xs\">\n          <thead>\n            <tr>\n              <th className=\"p-2 text-left text-muted-foreground\">WACC \\ Growth</th>\n              {mockResults.sensitivity.growth.map((growth, index) => (\n                <th key={index} className=\"p-2 text-center text-muted-foreground\">\n                  {formatPercent(growth)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.sensitivity.wacc.map((wacc, rowIndex) => (\n              <tr key={rowIndex} className=\"border-t border-border/50\">\n                <td className=\"p-2 text-muted-foreground font-medium\">{formatPercent(wacc)}</td>\n                {mockResults.sensitivity.matrix[rowIndex].map((value, colIndex) => (\n                  <td\n                    key={colIndex}\n                    className={`p-2 text-center font-medium ${\n                      Math.abs(value - 127.38) < 5\n                        ? 'bg-primary/20 text-primary'\n                        : 'text-foreground'\n                    }`}\n                  >\n                    {formatCurrency(value)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderScenarios = () => (\n    <div className=\"space-y-4\">\n      {mockResults.scenarios.map((scenario, index) => (\n        <div key={index} className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-medium text-foreground\">{scenario.name}</span>\n              <span className=\"text-xs bg-background px-2 py-1 rounded text-muted-foreground\">\n                {formatPercent(scenario.probability)} probability\n              </span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-foreground\">\n                {formatCurrency(scenario.sharePrice)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{formatPercent(scenario.irr)} IRR</div>\n            </div>\n          </div>\n          <div className=\"w-full bg-background rounded-full h-1\">\n            <div\n              className=\"bg-primary h-1 rounded-full\"\n              style={{ width: `${scenario.probability * 100}%` }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderMultiples = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Multiple</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Current</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Peer Avg</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">\n                Premium/Discount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.multiples.map((multiple, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{multiple.metric}</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.current}x</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.peer_avg}x</td>\n                <td\n                  className={`py-3 text-right font-medium ${\n                    multiple.premium > 0 ? 'text-success' : 'text-destructive'\n                  }`}\n                >\n                  {multiple.premium > 0 ? '+' : ''}\n                  {multiple.premium.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'summary':\n        return renderSummary();\n      case 'cashflows':\n        return renderCashFlows();\n      case 'sensitivity':\n        return renderSensitivity();\n      case 'scenarios':\n        return renderScenarios();\n      case 'multiples':\n        return renderMultiples();\n      default:\n        return renderSummary();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Calculation Results</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Download\"\n            onClick={() => onExport && onExport('excel')}\n          >\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Share2\">\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last Updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Calculations current</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalculationResults;\n","import React, { useState, useRef } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FormulaBuilder = ({ onFormulaCreate, variables }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [draggedFunction, setDraggedFunction] = useState(null);\n  const [currentFormula, setCurrentFormula] = useState('');\n  const [formulaName, setFormulaName] = useState('');\n  const [isBuilding, setIsBuilding] = useState(false);\n  const dropZoneRef = useRef(null);\n\n  const functionCategories = {\n    valuation: {\n      name: 'Valuation',\n      icon: 'TrendingUp',\n      functions: [\n        {\n          name: 'DCF',\n          syntax: 'DCF(fcf_array, discount_rate, terminal_growth)',\n          description: 'Discounted Cash Flow valuation'\n        },\n        {\n          name: 'NPV',\n          syntax: 'NPV(cash_flows, discount_rate)',\n          description: 'Net Present Value calculation'\n        },\n        { name: 'IRR', syntax: 'IRR(cash_flows)', description: 'Internal Rate of Return' },\n        {\n          name: 'TERMINAL_VALUE',\n          syntax: 'TERMINAL_VALUE(final_fcf, growth_rate, discount_rate)',\n          description: 'Terminal value calculation'\n        },\n        {\n          name: 'WACC',\n          syntax: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n          description: 'Weighted Average Cost of Capital'\n        }\n      ]\n    },\n    financial: {\n      name: 'Financial Ratios',\n      icon: 'Calculator',\n      functions: [\n        {\n          name: 'ROE',\n          syntax: 'ROE(net_income, shareholders_equity)',\n          description: 'Return on Equity'\n        },\n        { name: 'ROA', syntax: 'ROA(net_income, total_assets)', description: 'Return on Assets' },\n        {\n          name: 'DEBT_TO_EQUITY',\n          syntax: 'DEBT_TO_EQUITY(total_debt, total_equity)',\n          description: 'Debt to Equity ratio'\n        },\n        {\n          name: 'CURRENT_RATIO',\n          syntax: 'CURRENT_RATIO(current_assets, current_liabilities)',\n          description: 'Current ratio calculation'\n        },\n        {\n          name: 'QUICK_RATIO',\n          syntax: 'QUICK_RATIO(quick_assets, current_liabilities)',\n          description: 'Quick ratio calculation'\n        }\n      ]\n    },\n    statistical: {\n      name: 'Statistical',\n      icon: 'BarChart3',\n      functions: [\n        {\n          name: 'CORRELATION',\n          syntax: 'CORRELATION(dataset1, dataset2)',\n          description: 'Correlation coefficient'\n        },\n        {\n          name: 'REGRESSION',\n          syntax: 'REGRESSION(dependent_var, independent_var)',\n          description: 'Linear regression analysis'\n        },\n        {\n          name: 'VOLATILITY',\n          syntax: 'VOLATILITY(returns, period)',\n          description: 'Historical volatility'\n        },\n        {\n          name: 'BETA',\n          syntax: 'BETA(stock_returns, market_returns)',\n          description: 'Beta coefficient calculation'\n        },\n        {\n          name: 'SHARPE_RATIO',\n          syntax: 'SHARPE_RATIO(returns, risk_free_rate)',\n          description: 'Risk-adjusted return metric'\n        }\n      ]\n    },\n    mathematical: {\n      name: 'Mathematical',\n      icon: 'Sigma',\n      functions: [\n        { name: 'SUM', syntax: 'SUM(range)', description: 'Sum of values' },\n        { name: 'AVERAGE', syntax: 'AVERAGE(range)', description: 'Average of values' },\n        { name: 'MEDIAN', syntax: 'MEDIAN(range)', description: 'Median value' },\n        { name: 'STDEV', syntax: 'STDEV(range)', description: 'Standard deviation' },\n        {\n          name: 'PERCENTILE',\n          syntax: 'PERCENTILE(range, percentile)',\n          description: 'Percentile calculation'\n        }\n      ]\n    }\n  };\n\n  const savedFormulas = [\n    {\n      name: 'Custom_DCF_Tech',\n      formula: 'DCF(FCFF_PROJECTIONS, WACC(0.12, 0.04, 0.25, 0.3), 0.025)',\n      category: 'Custom'\n    },\n    {\n      name: 'LBO_Returns',\n      formula: 'IRR([INITIAL_INVESTMENT * -1, EXIT_VALUE])',\n      category: 'Custom'\n    },\n    {\n      name: 'Comp_Multiple',\n      formula: 'AVERAGE(PEER_EV_REVENUE) * TARGET_REVENUE',\n      category: 'Custom'\n    }\n  ];\n\n  const handleDragStart = (e, func) => {\n    setDraggedFunction(func);\n    e.dataTransfer.effectAllowed = 'copy';\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    if (draggedFunction) {\n      const newFormula = currentFormula + (currentFormula ? ' + ' : '') + draggedFunction.syntax;\n      setCurrentFormula(newFormula);\n      setDraggedFunction(null);\n    }\n  };\n\n  const addFunction = func => {\n    const newFormula = currentFormula + (currentFormula ? ' + ' : '') + func.syntax;\n    setCurrentFormula(newFormula);\n  };\n\n  const clearFormula = () => {\n    setCurrentFormula('');\n    setFormulaName('');\n  };\n\n  const saveFormula = () => {\n    if (formulaName && currentFormula) {\n      if (onFormulaCreate) {\n        onFormulaCreate({\n          name: formulaName,\n          formula: currentFormula,\n          timestamp: new Date()\n        });\n      }\n      setFormulaName('');\n      setCurrentFormula('');\n      setIsBuilding(false);\n    }\n  };\n\n  const validateFormula = () => {\n    // Simple validation - check for balanced parentheses\n    const openParens = (currentFormula.match(/\\(/g) || []).length;\n    const closeParens = (currentFormula.match(/\\)/g) || []).length;\n    return openParens === closeParens;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Wrench\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Formula Builder</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={() => setIsBuilding(!isBuilding)}\n          >\n            New Formula\n          </Button>\n        </div>\n      </div>\n\n      {/* Function Categories */}\n      <div className=\"flex border-b border-border\">\n        {Object.entries(functionCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Function Library */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-3\">\n          {functionCategories[selectedCategory].functions.map((func, index) => (\n            <div\n              key={index}\n              draggable\n              onDragStart={e => handleDragStart(e, func)}\n              className=\"p-3 bg-muted rounded-lg border border-border cursor-move hover:bg-muted/80 transition-smooth group\"\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon\n                      name=\"Move\"\n                      size={14}\n                      className=\"text-muted-foreground group-hover:text-foreground\"\n                    />\n                    <span className=\"font-medium text-foreground\">{func.name}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{func.description}</p>\n                  <code className=\"text-xs bg-background px-2 py-1 rounded mt-2 block font-mono text-foreground\">\n                    {func.syntax}\n                  </code>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"Plus\"\n                  onClick={() => addFunction(func)}\n                  className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Saved Formulas */}\n        <div className=\"border-t border-border p-4\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n            <Icon name=\"BookOpen\" size={16} />\n            <span>Saved Formulas</span>\n          </h4>\n          <div className=\"space-y-2\">\n            {savedFormulas.map((formula, index) => (\n              <div\n                key={index}\n                className=\"p-3 bg-background rounded-lg border border-border hover:bg-muted/50 transition-smooth cursor-pointer\"\n                onClick={() => setCurrentFormula(formula.formula)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-foreground\">{formula.name}</span>\n                  <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n                    {formula.category}\n                  </span>\n                </div>\n                <code className=\"text-xs text-muted-foreground mt-1 block font-mono\">\n                  {formula.formula}\n                </code>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Formula Builder Panel */}\n      {isBuilding && (\n        <div className=\"border-t border-border bg-background\">\n          <div className=\"p-4 space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Formula Name</label>\n              <input\n                type=\"text\"\n                value={formulaName}\n                onChange={e => setFormulaName(e.target.value)}\n                placeholder=\"Enter formula name...\"\n                className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                Formula Expression\n              </label>\n              <div\n                ref={dropZoneRef}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n                className=\"min-h-[100px] p-3 bg-input border-2 border-dashed border-border rounded-lg focus-within:border-ring transition-colors\"\n              >\n                <textarea\n                  value={currentFormula}\n                  onChange={e => setCurrentFormula(e.target.value)}\n                  placeholder=\"Drag functions here or type formula manually...\"\n                  className=\"w-full h-20 bg-transparent text-foreground placeholder-muted-foreground resize-none outline-none font-mono text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between mt-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {validateFormula() ? (\n                    <div className=\"flex items-center space-x-1 text-success\">\n                      <Icon name=\"CheckCircle\" size={14} />\n                      <span className=\"text-xs\">Valid syntax</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-1 text-destructive\">\n                      <Icon name=\"XCircle\" size={14} />\n                      <span className=\"text-xs\">Invalid syntax</span>\n                    </div>\n                  )}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {currentFormula.length} characters\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\" size=\"sm\" iconName=\"Trash2\"\n                onClick={clearFormula}\n              >\n                Clear\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\" size=\"sm\" iconName=\"Eye\"\n                  disabled={!validateFormula()}\n                >\n                  Preview\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  iconName=\"Save\"\n                  onClick={saveFormula}\n                  disabled={!formulaName || !currentFormula || !validateFormula()}\n                >\n                  Save Formula\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormulaBuilder;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ModelTemplates = ({ onTemplateSelect, onTemplateCreate }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const templateCategories = {\n    valuation: {\n      name: 'Valuation Models',\n      icon: 'TrendingUp',\n      templates: [\n        {\n          id: 'dcf_standard',\n          name: 'DCF - Standard',\n          description:\n            'Traditional discounted cash flow model with 5-year projections and terminal value',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-10',\n          popularity: 95,\n          features: [\n            '5-year projections',\n            'Terminal value',\n            'Sensitivity analysis',\n            'WACC calculation'\n          ]\n        },\n        {\n          id: 'dcf_tech',\n          name: 'DCF - Technology',\n          description: 'Specialized DCF for high-growth technology companies with adjusted metrics',\n          complexity: 'Advanced',\n          timeToComplete: '60 min',\n          lastUsed: '2024-07-08',\n          popularity: 87,\n          features: ['SaaS metrics', 'User-based projections', 'Churn analysis', 'Rule of 40']\n        },\n        {\n          id: 'sum_of_parts',\n          name: 'Sum-of-the-Parts',\n          description: 'Multi-business valuation with segment-specific assumptions and multiples',\n          complexity: 'Advanced',\n          timeToComplete: '90 min',\n          lastUsed: '2024-07-05',\n          popularity: 73,\n          features: [\n            'Segment analysis',\n            'Multiple approaches',\n            'Holding company discount',\n            'Synergy modeling'\n          ]\n        }\n      ]\n    },\n    lbo: {\n      name: 'LBO Models',\n      icon: 'Layers',\n      templates: [\n        {\n          id: 'lbo_standard',\n          name: 'LBO - Standard',\n          description: 'Complete leveraged buyout model with debt sizing and returns analysis',\n          complexity: 'Advanced',\n          timeToComplete: '120 min',\n          lastUsed: '2024-07-09',\n          popularity: 91,\n          features: ['Debt capacity', 'Returns waterfall', 'Management rollover', 'Exit scenarios']\n        },\n        {\n          id: 'lbo_growth',\n          name: 'LBO - Growth Equity',\n          description: 'Growth-focused LBO with minority investment and expansion capital',\n          complexity: 'Advanced',\n          timeToComplete: '100 min',\n          lastUsed: '2024-07-06',\n          popularity: 68,\n          features: [\n            'Growth capital',\n            'Minority stake',\n            'Management incentives',\n            'Expansion modeling'\n          ]\n        }\n      ]\n    },\n    comps: {\n      name: 'Comparable Analysis',\n      icon: 'BarChart3',\n      templates: [\n        {\n          id: 'trading_comps',\n          name: 'Trading Comparables',\n          description: 'Public company multiple analysis with statistical benchmarking',\n          complexity: 'Beginner',\n          timeToComplete: '30 min',\n          lastUsed: '2024-07-11',\n          popularity: 98,\n          features: [\n            'Multiple analysis',\n            'Statistical metrics',\n            'Peer screening',\n            'Premium/discount analysis'\n          ]\n        },\n        {\n          id: 'transaction_comps',\n          name: 'Transaction Comparables',\n          description: 'M&A transaction analysis with control premiums and synergies',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-07',\n          popularity: 82,\n          features: [\n            'M&A multiples',\n            'Control premiums',\n            'Synergy analysis',\n            'Transaction screening'\n          ]\n        }\n      ]\n    },\n    merger: {\n      name: 'M&A Models',\n      icon: 'GitMerge',\n      templates: [\n        {\n          id: 'merger_model',\n          name: 'Merger Model',\n          description:\n            'Comprehensive merger analysis with accretion/dilution and pro forma statements',\n          complexity: 'Expert',\n          timeToComplete: '180 min',\n          lastUsed: '2024-07-04',\n          popularity: 76,\n          features: [\n            'Accretion/dilution',\n            'Pro forma statements',\n            'Synergy modeling',\n            'Financing structure'\n          ]\n        },\n        {\n          id: 'acquisition_model',\n          name: 'Acquisition Model',\n          description: 'Strategic acquisition analysis with integration costs and value creation',\n          complexity: 'Expert',\n          timeToComplete: '150 min',\n          lastUsed: '2024-07-03',\n          popularity: 71,\n          features: ['Integration costs', 'Value creation', 'Financing options', 'Risk analysis']\n        }\n      ]\n    }\n  };\n\n  const recentTemplates = [\n    { id: 'dcf_standard', name: 'DCF - Standard', lastUsed: '2024-07-11 14:30' },\n    { id: 'trading_comps', name: 'Trading Comparables', lastUsed: '2024-07-11 09:15' },\n    { id: 'lbo_standard', name: 'LBO - Standard', lastUsed: '2024-07-10 16:45' }\n  ];\n\n  const getComplexityColor = complexity => {\n    switch (complexity) {\n      case 'Beginner':\n        return 'text-success bg-success/10';\n      case 'Intermediate':\n        return 'text-warning bg-warning/10';\n      case 'Advanced':\n        return 'text-accent bg-accent/10';\n      case 'Expert':\n        return 'text-destructive bg-destructive/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const filteredTemplates = () => {\n    const templates = templateCategories[selectedCategory]?.templates || [];\n    if (!searchTerm) return templates;\n\n    return templates.filter(\n      template =>\n        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  };\n\n  const handleTemplateSelect = template => {\n    if (onTemplateSelect) {\n      onTemplateSelect(template);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileTemplate\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Model Templates</h3>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          iconName=\"Plus\"\n          onClick={() => setShowCreateModal(true)}\n        >\n          Create Template\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search templates...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Categories */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {Object.entries(templateCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {/* Recent Templates */}\n        {!searchTerm && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n              <Icon name=\"Clock\" size={16} />\n              <span>Recently Used</span>\n            </h4>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {recentTemplates.map(template => (\n                <div\n                  key={template.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-smooth cursor-pointer\"\n                  onClick={() => handleTemplateSelect(template)}\n                >\n                  <div>\n                    <span className=\"font-medium text-foreground\">{template.name}</span>\n                    <p className=\"text-xs text-muted-foreground\">Last used: {template.lastUsed}</p>\n                  </div>\n                  <Icon name=\"ChevronRight\" size={16} className=\"text-muted-foreground\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Template Cards */}\n        <div className=\"space-y-4\">\n          {filteredTemplates().map(template => (\n            <div\n              key={template.id}\n              className=\"p-4 bg-background border border-border rounded-lg hover:border-primary/50 transition-smooth cursor-pointer group\"\n              onClick={() => handleTemplateSelect(template)}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h5 className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">\n                      {template.name}\n                    </h5>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(template.complexity)}`}\n                    >\n                      {template.complexity}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                    <Icon name=\"Star\" size={12} />\n                    <span>{template.popularity}%</span>\n                  </div>\n                  <Icon\n                    name=\"ChevronRight\"\n                    size={16}\n                    className=\"text-muted-foreground group-hover:text-primary transition-colors\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Clock\" size={12} />\n                    <span>{template.timeToComplete}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Calendar\" size={12} />\n                    <span>Last used: {template.lastUsed}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2\">\n                {template.features.map((feature, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-muted text-xs text-muted-foreground rounded\"\n                  >\n                    {feature}\n                  </span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTemplates().length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"FileX\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No templates found</h4>\n            <p className=\"text-muted-foreground\">\n              {searchTerm\n                ? 'Try adjusting your search terms'\n                : 'No templates available in this category'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Create Template Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg shadow-elevation-2 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between p-4 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Create New Template</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"X\"\n                onClick={() => setShowCreateModal(false)}\n              />\n            </div>\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Template Name\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter template name...\"\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Description\n                </label>\n                <textarea\n                  placeholder=\"Describe your template...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">Category</label>\n                <select className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-ring\">\n                  <option value=\"valuation\">Valuation Models</option>\n                  <option value=\"lbo\">LBO Models</option>\n                  <option value=\"comps\">Comparable Analysis</option>\n                  <option value=\"merger\">M&A Models</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowCreateModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  if (onTemplateCreate) onTemplateCreate();\n                }}\n              >\n                Create Template\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTemplates;\n","// Data transformation utilities for financial calculations\n\nexport const formatCurrency = (value, currency = 'USD', compact = false) => {\n  if (value === null || value === undefined || isNaN(value)) return 'N/A';\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    notation: compact ? 'compact' : 'standard',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  });\n\n  return formatter.format(value);\n};\n\nexport const formatPercentage = (value, decimals = 1) => {\n  if (value === null || value === undefined || isNaN(value)) return 'N/A';\n  return `${(value * 100).toFixed(decimals)}%`;\n};\n\nexport const formatNumber = (value, decimals = 2, compact = false) => {\n  if (value === null || value === undefined || isNaN(value)) return 'N/A';\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    notation: compact ? 'compact' : 'standard',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: decimals\n  });\n\n  return formatter.format(value);\n};\n\nexport const calculateCAGR = (beginningValue, endingValue, years) => {\n  if (beginningValue <= 0 || endingValue <= 0 || years <= 0) return 0;\n  return Math.pow(endingValue / beginningValue, 1 / years) - 1;\n};\n\nexport const calculateNPV = (cashFlows, discountRate) => {\n  return cashFlows.reduce((npv, cashFlow, index) => {\n    return npv + cashFlow / Math.pow(1 + discountRate, index + 1);\n  }, 0);\n};\n\nexport const calculateIRR = (cashFlows, guess = 0.1) => {\n  // Handle edge cases\n  if (!cashFlows || cashFlows.length === 0 || cashFlows.length === 1) {\n    return 0;\n  }\n\n  const maxIterations = 100;\n  const tolerance = 1e-6;\n\n  let rate = guess;\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = cashFlows[0]; // Initial investment (negative)\n    let derivative = 0;\n\n    for (let j = 1; j < cashFlows.length; j++) {\n      const factor = Math.pow(1 + rate, j);\n      npv += cashFlows[j] / factor;\n      derivative -= (j * cashFlows[j]) / (factor * (1 + rate));\n    }\n\n    if (Math.abs(npv) < tolerance) {\n      return rate;\n    }\n\n    if (Math.abs(derivative) < tolerance) {\n      break; // Avoid division by zero\n    }\n\n    rate = rate - npv / derivative;\n  }\n\n  return rate;\n};\n\nexport const calculateWACC = (costOfEquity, costOfDebt, taxRate, debtRatio) => {\n  const equityWeight = 1 - debtRatio;\n  return costOfEquity * equityWeight + costOfDebt * debtRatio * (1 - taxRate);\n};\n\nexport const calculateTerminalValue = (finalCashFlow, terminalGrowthRate, discountRate) => {\n  return (finalCashFlow * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n};\n\nexport const projectCashFlows = (baseCashFlow, growthRates, years = 5) => {\n  const cashFlows = [];\n  let currentCashFlow = baseCashFlow;\n\n  for (let i = 0; i < years; i++) {\n    const growthRate = Array.isArray(growthRates)\n      ? growthRates[i] || growthRates[growthRates.length - 1]\n      : growthRates;\n    currentCashFlow *= 1 + growthRate;\n    cashFlows.push(currentCashFlow);\n  }\n\n  return cashFlows;\n};\n\nexport const calculateDCFValuation = inputs => {\n  const {\n    currentRevenue,\n    revenueGrowthRate,\n    fcfMargin,\n    wacc,\n    terminalGrowthRate,\n    sharesOutstanding,\n    totalDebt,\n    cash,\n    projectionYears = 5\n  } = inputs;\n\n  // Project revenues\n  const projectedRevenues = projectCashFlows(currentRevenue, revenueGrowthRate, projectionYears);\n\n  // Calculate free cash flows\n  const projectedFCFs = projectedRevenues.map(revenue => revenue * fcfMargin);\n\n  // Calculate terminal value\n  const terminalValue = calculateTerminalValue(\n    projectedFCFs[projectedFCFs.length - 1],\n    terminalGrowthRate,\n    wacc\n  );\n\n  // Calculate present values\n  const pvOfCashFlows = calculateNPV(projectedFCFs, wacc);\n  const pvOfTerminalValue = terminalValue / Math.pow(1 + wacc, projectionYears);\n\n  // Calculate enterprise and equity value\n  const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n  const equityValue = enterpriseValue - totalDebt + cash;\n  const pricePerShare = equityValue / sharesOutstanding;\n\n  return {\n    enterpriseValue,\n    equityValue,\n    pricePerShare,\n    pvOfCashFlows,\n    pvOfTerminalValue,\n    terminalValue,\n    projectedRevenues,\n    projectedFCFs,\n    wacc,\n    terminalGrowthRate\n  };\n};\n\nexport const calculateLBOReturns = inputs => {\n  const {\n    purchasePrice,\n    ebitda,\n    debtMultiple = 5,\n    exitMultiple,\n    exitYear = 5,\n    managementFeeRate = 0.02,\n    carriedInterestRate = 0.2\n  } = inputs;\n\n  // Calculate purchase structure\n  const totalDebt = ebitda * debtMultiple;\n  const equityInvestment = purchasePrice - totalDebt;\n\n  // Project EBITDA growth (simplified)\n  const ebitdaGrowthRate = 0.05; // 5% annual growth assumption\n  const exitEbitda = ebitda * Math.pow(1 + ebitdaGrowthRate, exitYear);\n\n  // Calculate exit value\n  const exitEnterpriseValue = exitEbitda * exitMultiple;\n  const remainingDebt = totalDebt * 0.5; // Assume 50% debt paydown\n  const exitEquityValue = exitEnterpriseValue - remainingDebt;\n\n  // Calculate returns\n  const totalReturn = exitEquityValue / equityInvestment;\n  const irr = Math.pow(totalReturn, 1 / exitYear) - 1;\n  const moic = totalReturn; // Multiple of Invested Capital\n\n  // Calculate fees (simplified)\n  const totalManagementFees = equityInvestment * managementFeeRate * exitYear;\n  const carriedInterest = Math.max(0, (exitEquityValue - equityInvestment) * carriedInterestRate);\n\n  return {\n    equityInvestment,\n    totalDebt,\n    exitEquityValue,\n    totalReturn,\n    irr,\n    moic,\n    exitEbitda,\n    exitEnterpriseValue,\n    managementFees: totalManagementFees,\n    carriedInterest,\n    netReturn: exitEquityValue - totalManagementFees - carriedInterest\n  };\n};\n\nexport const calculateComparableMetrics = (companyData, peerData) => {\n  const calculateStatistics = values => {\n    const validValues = values.filter(v => v !== null && v !== undefined && !isNaN(v));\n    if (validValues.length === 0) return { median: null, mean: null, min: null, max: null };\n\n    validValues.sort((a, b) => a - b);\n    const median =\n      validValues.length % 2 === 0\n        ? (validValues[validValues.length / 2 - 1] + validValues[validValues.length / 2]) / 2\n        : validValues[Math.floor(validValues.length / 2)];\n\n    const mean = validValues.reduce((sum, v) => sum + v, 0) / validValues.length;\n\n    return {\n      median,\n      mean,\n      min: Math.min(...validValues),\n      max: Math.max(...validValues),\n      count: validValues.length\n    };\n  };\n\n  const metrics = ['marketCap', 'peRatio', 'evToEbitda', 'priceToBook', 'debtToEquity'];\n  const peerStats = {};\n\n  metrics.forEach(metric => {\n    const peerValues = peerData.map(peer => peer[metric]);\n    peerStats[metric] = calculateStatistics(peerValues);\n  });\n\n  return {\n    company: companyData,\n    peerStatistics: peerStats,\n    relativeValuation: {\n      marketCapPercentile: calculatePercentile(\n        companyData.marketCap,\n        peerData.map(p => p.marketCap)\n      ),\n      peRatioRelative: companyData.peRatio / peerStats.peRatio.median,\n      evEbitdaRelative: companyData.evToEbitda / peerStats.evToEbitda.median,\n      priceToBookRelative: companyData.priceToBook / peerStats.priceToBook.median\n    }\n  };\n};\n\nexport const calculatePercentile = (value, dataset) => {\n  const validDataset = dataset.filter(v => v !== null && v !== undefined && !isNaN(v));\n  if (validDataset.length === 0 || value === null || value === undefined || isNaN(value))\n    return null;\n\n  validDataset.sort((a, b) => a - b);\n  const belowCount = validDataset.filter(v => v < value).length;\n  return belowCount / validDataset.length;\n};\n\nexport const generateMonteCarloScenarios = (baseInputs, variableRanges, iterations = 1000) => {\n  const scenarios = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const scenario = { ...baseInputs };\n\n    Object.keys(variableRanges).forEach(variable => {\n      const range = variableRanges[variable];\n      const randomValue = range.min + Math.random() * (range.max - range.min);\n      scenario[variable] = randomValue;\n    });\n\n    scenarios.push(scenario);\n  }\n\n  return scenarios;\n};\n\nexport const calculateSensitivityAnalysis = (\n  baseInputs,\n  sensitivityVariable,\n  range,\n  steps = 10\n) => {\n  const results = [];\n  const stepSize = (range.max - range.min) / (steps - 1);\n\n  for (let i = 0; i < steps; i++) {\n    const variableValue = range.min + stepSize * i;\n    const inputs = { ...baseInputs, [sensitivityVariable]: variableValue };\n\n    results.push({\n      [sensitivityVariable]: variableValue,\n      inputs\n    });\n  }\n\n  return results;\n};\n","/**\n * Command Registry for FinanceAnalyst Pro Terminal\n * Manages all available commands with categorization and metadata\n */\n\nexport class CommandRegistry {\n  constructor() {\n    this.commands = new Map();\n    this.categories = new Map();\n    this.aliases = new Map();\n    this.initializeCategories();\n  }\n\n  /**\n   * Initialize command categories\n   */\n  initializeCategories() {\n    this.categories.set('CORE', {\n      name: 'Core Analysis',\n      description: 'Fundamental financial analysis commands',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('PORTFOLIO', {\n      name: 'Portfolio & Risk',\n      description: 'Portfolio analysis and risk management',\n      icon: '🎯',\n      commands: []\n    });\n\n    this.categories.set('VALUATION', {\n      name: 'Advanced Valuation',\n      description: 'Sophisticated valuation models',\n      icon: '📈',\n      commands: []\n    });\n\n    this.categories.set('TECHNICAL', {\n      name: 'Technical Analysis',\n      description: 'Technical analysis and market intelligence',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('FIXED_INCOME', {\n      name: 'Fixed Income & Derivatives',\n      description: 'Bond analysis and derivatives pricing',\n      icon: '🏦',\n      commands: []\n    });\n\n    this.categories.set('ESG', {\n      name: 'ESG & Alternative Data',\n      description: 'Environmental, social, governance metrics',\n      icon: '🌱',\n      commands: []\n    });\n\n    this.categories.set('AUTOMATION', {\n      name: 'Automation & Workflows',\n      description: 'Automated analysis and workflows',\n      icon: '🤖',\n      commands: []\n    });\n\n    this.categories.set('DATA', {\n      name: 'Data Management',\n      description: 'Data import, export, and management',\n      icon: '💾',\n      commands: []\n    });\n\n    this.categories.set('REPORTING', {\n      name: 'Reporting & Visualization',\n      description: 'Reports, charts, and visualizations',\n      icon: '📋',\n      commands: []\n    });\n\n    this.categories.set('SYSTEM', {\n      name: 'System & Performance',\n      description: 'System monitoring and configuration',\n      icon: '🔧',\n      commands: []\n    });\n\n    this.categories.set('ANALYTICS', {\n      name: 'Advanced Analytics',\n      description: 'Machine learning and advanced analytics',\n      icon: '💡',\n      commands: []\n    });\n\n    this.categories.set('MARKET_DATA', {\n      name: 'Market Data Extensions',\n      description: 'Extended market data and economic indicators',\n      icon: '🌐',\n      commands: []\n    });\n\n    this.categories.set('UTILITY', {\n      name: 'Utility Commands',\n      description: 'General utility and helper commands',\n      icon: '🛠️',\n      commands: []\n    });\n  }\n\n  /**\n   * Register a command\n   * @param {string} name - Command name\n   * @param {Object} handler - Command handler\n   * @param {Object} metadata - Command metadata\n   */\n  register(name, handler, metadata = {}) {\n    const commandName = name.toUpperCase();\n    \n    const commandInfo = {\n      name: commandName,\n      handler,\n      category: metadata.category || 'UTILITY',\n      description: metadata.description || 'No description available',\n      usage: metadata.usage || `${commandName}()`,\n      examples: metadata.examples || [],\n      parameterSchema: metadata.parameterSchema || null,\n      aliases: metadata.aliases || [],\n      tags: metadata.tags || [],\n      version: metadata.version || '1.0.0',\n      deprecated: metadata.deprecated || false,\n      experimental: metadata.experimental || false\n    };\n\n    // Register main command\n    this.commands.set(commandName, commandInfo);\n\n    // Register aliases\n    if (metadata.aliases) {\n      metadata.aliases.forEach(alias => {\n        this.aliases.set(alias.toUpperCase(), commandName);\n      });\n    }\n\n    // Add to category\n    const category = this.categories.get(commandInfo.category);\n    if (category) {\n      category.commands.push(commandName);\n    }\n\n    return this;\n  }\n\n  /**\n   * Get command handler\n   * @param {string} name - Command name or alias\n   * @returns {Object|null} Command handler\n   */\n  getHandler(name) {\n    const commandName = name.toUpperCase();\n    \n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command.handler;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      const aliasCommand = this.commands.get(aliasTarget);\n      return aliasCommand ? aliasCommand.handler : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get command info\n   * @param {string} name - Command name\n   * @returns {Object|null} Command information\n   */\n  getCommandInfo(name) {\n    const commandName = name.toUpperCase();\n    \n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      return this.commands.get(aliasTarget);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all commands in a category\n   * @param {string} category - Category name\n   * @returns {Array} Commands in category\n   */\n  getCommandsByCategory(category) {\n    const categoryInfo = this.categories.get(category.toUpperCase());\n    if (!categoryInfo) return [];\n\n    return categoryInfo.commands.map(cmdName => this.commands.get(cmdName));\n  }\n\n  /**\n   * Get all command names\n   * @returns {Array} All command names\n   */\n  getAllCommands() {\n    return Array.from(this.commands.keys());\n  }\n\n  /**\n   * Get all categories\n   * @returns {Array} All categories\n   */\n  getAllCategories() {\n    return Array.from(this.categories.entries()).map(([key, value]) => ({\n      key,\n      ...value\n    }));\n  }\n\n  /**\n   * Search commands\n   * @param {string} query - Search query\n   * @returns {Array} Matching commands\n   */\n  searchCommands(query) {\n    const searchTerm = query.toLowerCase();\n    const results = [];\n\n    for (const [name, command] of this.commands) {\n      const score = this.calculateSearchScore(command, searchTerm);\n      if (score > 0) {\n        results.push({ ...command, score });\n      }\n    }\n\n    return results.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Calculate search relevance score\n   * @param {Object} command - Command object\n   * @param {string} searchTerm - Search term\n   * @returns {number} Relevance score\n   */\n  calculateSearchScore(command, searchTerm) {\n    let score = 0;\n\n    // Exact name match\n    if (command.name.toLowerCase() === searchTerm) {\n      score += 100;\n    }\n\n    // Name contains search term\n    if (command.name.toLowerCase().includes(searchTerm)) {\n      score += 50;\n    }\n\n    // Description contains search term\n    if (command.description.toLowerCase().includes(searchTerm)) {\n      score += 25;\n    }\n\n    // Tags contain search term\n    if (command.tags.some(tag => tag.toLowerCase().includes(searchTerm))) {\n      score += 15;\n    }\n\n    // Aliases contain search term\n    if (command.aliases.some(alias => alias.toLowerCase().includes(searchTerm))) {\n      score += 10;\n    }\n\n    return score;\n  }\n\n  /**\n   * Get command suggestions based on partial input\n   * @param {string} partial - Partial command input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(partial) {\n    const partialLower = partial.toLowerCase();\n    const suggestions = [];\n\n    for (const [name, command] of this.commands) {\n      if (name.toLowerCase().startsWith(partialLower)) {\n        suggestions.push({\n          name: command.name,\n          description: command.description,\n          usage: command.usage,\n          category: command.category\n        });\n      }\n    }\n\n    return suggestions.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  /**\n   * Validate command exists\n   * @param {string} name - Command name\n   * @returns {boolean} Whether command exists\n   */\n  hasCommand(name) {\n    const commandName = name.toUpperCase();\n    return this.commands.has(commandName) || this.aliases.has(commandName);\n  }\n\n  /**\n   * Get command count by category\n   * @returns {Object} Command counts by category\n   */\n  getCommandStats() {\n    const stats = {};\n    \n    for (const [categoryKey, category] of this.categories) {\n      stats[categoryKey] = {\n        name: category.name,\n        count: category.commands.length,\n        icon: category.icon\n      };\n    }\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const commandRegistry = new CommandRegistry();\n","/**\n * Crypto Utils\n * Provides encryption and decryption utilities for data persistence\n */\n\nexport class CryptoUtils {\n  constructor() {\n    this.algorithm = 'AES-GCM';\n    this.keyLength = 256;\n    this.ivLength = 12; // 96 bits for GCM\n    this.tagLength = 16; // 128 bits for GCM\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n    \n    // Generate or retrieve encryption key\n    this.initializeKey();\n  }\n\n  /**\n   * Initialize encryption key\n   */\n  async initializeKey() {\n    try {\n      // Try to get existing key from localStorage\n      const storedKey = localStorage.getItem('financeanalyst_crypto_key');\n      \n      if (storedKey) {\n        // Import existing key\n        const keyData = this.base64ToArrayBuffer(storedKey);\n        this.cryptoKey = await crypto.subtle.importKey(\n          'raw',\n          keyData,\n          { name: this.algorithm },\n          false,\n          ['encrypt', 'decrypt']\n        );\n      } else {\n        // Generate new key\n        this.cryptoKey = await crypto.subtle.generateKey(\n          {\n            name: this.algorithm,\n            length: this.keyLength\n          },\n          true,\n          ['encrypt', 'decrypt']\n        );\n\n        // Store key for future use\n        const exportedKey = await crypto.subtle.exportKey('raw', this.cryptoKey);\n        const keyString = this.arrayBufferToBase64(exportedKey);\n        localStorage.setItem('financeanalyst_crypto_key', keyString);\n      }\n\n      console.log('✅ Crypto key initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize crypto key:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Encrypt data\n   */\n  async encrypt(data) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert string to ArrayBuffer\n      const dataBuffer = this.textEncoder.encode(data);\n      \n      // Generate random IV\n      const iv = crypto.getRandomValues(new Uint8Array(this.ivLength));\n      \n      // Encrypt data\n      const encryptedBuffer = await crypto.subtle.encrypt(\n        {\n          name: this.algorithm,\n          iv: iv\n        },\n        this.cryptoKey,\n        dataBuffer\n      );\n\n      // Combine IV and encrypted data\n      const combined = new Uint8Array(iv.length + encryptedBuffer.byteLength);\n      combined.set(iv, 0);\n      combined.set(new Uint8Array(encryptedBuffer), iv.length);\n\n      // Convert to base64 for storage\n      return this.arrayBufferToBase64(combined.buffer);\n\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt data\n   */\n  async decrypt(encryptedData) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert base64 to ArrayBuffer\n      const combined = this.base64ToArrayBuffer(encryptedData);\n      \n      // Extract IV and encrypted data\n      const iv = combined.slice(0, this.ivLength);\n      const encryptedBuffer = combined.slice(this.ivLength);\n\n      // Decrypt data\n      const decryptedBuffer = await crypto.subtle.decrypt(\n        {\n          name: this.algorithm,\n          iv: iv\n        },\n        this.cryptoKey,\n        encryptedBuffer\n      );\n\n      // Convert back to string\n      return this.textDecoder.decode(decryptedBuffer);\n\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate hash of data\n   */\n  async hash(data) {\n    try {\n      const dataBuffer = this.textEncoder.encode(data);\n      const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n      return this.arrayBufferToBase64(hashBuffer);\n    } catch (error) {\n      console.error('Hashing failed:', error);\n      throw new Error(`Hashing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verify data integrity\n   */\n  async verifyIntegrity(data, expectedHash) {\n    try {\n      const actualHash = await this.hash(data);\n      return actualHash === expectedHash;\n    } catch (error) {\n      console.error('Integrity verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate secure random string\n   */\n  generateRandomString(length = 32) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return this.arrayBufferToBase64(array.buffer).substring(0, length);\n  }\n\n  /**\n   * Derive key from password (for future use)\n   */\n  async deriveKeyFromPassword(password, salt) {\n    try {\n      const passwordBuffer = this.textEncoder.encode(password);\n      const saltBuffer = this.textEncoder.encode(salt);\n\n      // Import password as key material\n      const keyMaterial = await crypto.subtle.importKey(\n        'raw',\n        passwordBuffer,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveKey']\n      );\n\n      // Derive key using PBKDF2\n      const derivedKey = await crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: saltBuffer,\n          iterations: 100000,\n          hash: 'SHA-256'\n        },\n        keyMaterial,\n        {\n          name: this.algorithm,\n          length: this.keyLength\n        },\n        false,\n        ['encrypt', 'decrypt']\n      );\n\n      return derivedKey;\n\n    } catch (error) {\n      console.error('Key derivation failed:', error);\n      throw new Error(`Key derivation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if Web Crypto API is available\n   */\n  isAvailable() {\n    return !!(window.crypto && window.crypto.subtle);\n  }\n\n  /**\n   * Get encryption info\n   */\n  getInfo() {\n    return {\n      algorithm: this.algorithm,\n      keyLength: this.keyLength,\n      ivLength: this.ivLength,\n      available: this.isAvailable(),\n      keyInitialized: !!this.cryptoKey\n    };\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Securely clear sensitive data from memory\n   */\n  clearSensitiveData(data) {\n    if (data instanceof ArrayBuffer) {\n      const view = new Uint8Array(data);\n      crypto.getRandomValues(view);\n    } else if (typeof data === 'string') {\n      // For strings, we can't directly clear memory in JavaScript\n      // but we can at least overwrite the reference\n      data = null;\n    }\n  }\n\n  /**\n   * Test encryption/decryption performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable()) {\n      return null;\n    }\n\n    const testData = JSON.stringify({\n      test: 'performance',\n      data: new Array(1000).fill('test data for performance testing'),\n      timestamp: Date.now()\n    });\n\n    const iterations = 50;\n\n    try {\n      // Test encryption performance\n      const encryptStart = performance.now();\n      let encrypted;\n      for (let i = 0; i < iterations; i++) {\n        encrypted = await this.encrypt(testData);\n      }\n      const encryptTime = performance.now() - encryptStart;\n\n      // Test decryption performance\n      const decryptStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decrypt(encrypted);\n      }\n      const decryptTime = performance.now() - decryptStart;\n\n      return {\n        encryptTime: encryptTime / iterations,\n        decryptTime: decryptTime / iterations,\n        totalTime: encryptTime + decryptTime,\n        dataSize: testData.length,\n        encryptedSize: encrypted.length,\n        compressionRatio: encrypted.length / testData.length,\n        iterations\n      };\n\n    } catch (error) {\n      console.error('Crypto performance test failed:', error);\n      return null;\n    }\n  }\n}\n","/**\n * Compression Utils\n * Provides data compression utilities for efficient storage\n */\n\nexport class CompressionUtils {\n  constructor() {\n    this.compressionFormat = 'gzip';\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n  }\n\n  /**\n   * Compress data using browser's native compression\n   */\n  async compress(data) {\n    try {\n      // Check if CompressionStream is available (modern browsers)\n      if ('CompressionStream' in window) {\n        return await this.compressWithStream(data);\n      } else {\n        // Fallback to LZ-string compression\n        return await this.compressWithLZString(data);\n      }\n    } catch (error) {\n      console.error('Compression failed:', error);\n      // Return original data if compression fails\n      return data;\n    }\n  }\n\n  /**\n   * Decompress data\n   */\n  async decompress(compressedData) {\n    try {\n      // Try native decompression first\n      if ('DecompressionStream' in window && this.isNativeCompressed(compressedData)) {\n        return await this.decompressWithStream(compressedData);\n      } else {\n        // Try LZ-string decompression\n        return await this.decompressWithLZString(compressedData);\n      }\n    } catch (error) {\n      console.error('Decompression failed:', error);\n      // Return original data if decompression fails\n      return compressedData;\n    }\n  }\n\n  /**\n   * Compress using native CompressionStream\n   */\n  async compressWithStream(data) {\n    const stream = new CompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write data to compression stream\n    const dataBuffer = this.textEncoder.encode(data);\n    writer.write(dataBuffer);\n    writer.close();\n\n    // Read compressed data\n    const chunks = [];\n    let done = false;\n    \n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to base64\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n    \n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    // Add marker to identify native compression\n    return 'NATIVE_GZIP:' + this.arrayBufferToBase64(combined.buffer);\n  }\n\n  /**\n   * Decompress using native DecompressionStream\n   */\n  async decompressWithStream(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('NATIVE_GZIP:', '');\n    const compressedBuffer = this.base64ToArrayBuffer(data);\n\n    const stream = new DecompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write compressed data to decompression stream\n    writer.write(new Uint8Array(compressedBuffer));\n    writer.close();\n\n    // Read decompressed data\n    const chunks = [];\n    let done = false;\n    \n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to string\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n    \n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return this.textDecoder.decode(combined);\n  }\n\n  /**\n   * Compress using LZ-string algorithm (fallback)\n   */\n  async compressWithLZString(data) {\n    // Simple LZ77-style compression implementation\n    const dictionary = new Map();\n    const result = [];\n    let dictSize = 256;\n    \n    // Initialize dictionary with single characters\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(String.fromCharCode(i), i);\n    }\n\n    let current = '';\n    for (let i = 0; i < data.length; i++) {\n      const char = data[i];\n      const combined = current + char;\n      \n      if (dictionary.has(combined)) {\n        current = combined;\n      } else {\n        result.push(dictionary.get(current));\n        dictionary.set(combined, dictSize++);\n        current = char;\n      }\n    }\n    \n    if (current) {\n      result.push(dictionary.get(current));\n    }\n\n    // Convert to base64\n    const compressed = new Uint16Array(result);\n    return 'LZ_STRING:' + this.arrayBufferToBase64(compressed.buffer);\n  }\n\n  /**\n   * Decompress LZ-string compressed data\n   */\n  async decompressWithLZString(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('LZ_STRING:', '');\n    const buffer = this.base64ToArrayBuffer(data);\n    const compressed = new Uint16Array(buffer);\n\n    const dictionary = new Map();\n    let dictSize = 256;\n    \n    // Initialize dictionary\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(i, String.fromCharCode(i));\n    }\n\n    let result = '';\n    let previous = String.fromCharCode(compressed[0]);\n    result += previous;\n\n    for (let i = 1; i < compressed.length; i++) {\n      const code = compressed[i];\n      let current;\n      \n      if (dictionary.has(code)) {\n        current = dictionary.get(code);\n      } else if (code === dictSize) {\n        current = previous + previous[0];\n      } else {\n        throw new Error('Invalid compressed data');\n      }\n      \n      result += current;\n      dictionary.set(dictSize++, previous + current[0]);\n      previous = current;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if data is compressed with native compression\n   */\n  isNativeCompressed(data) {\n    return typeof data === 'string' && data.startsWith('NATIVE_GZIP:');\n  }\n\n  /**\n   * Check if data is compressed with LZ-string\n   */\n  isLZStringCompressed(data) {\n    return typeof data === 'string' && data.startsWith('LZ_STRING:');\n  }\n\n  /**\n   * Check if data appears to be compressed\n   */\n  isCompressed(data) {\n    return this.isNativeCompressed(data) || this.isLZStringCompressed(data);\n  }\n\n  /**\n   * Get compression ratio\n   */\n  getCompressionRatio(originalData, compressedData) {\n    const originalSize = new Blob([originalData]).size;\n    const compressedSize = new Blob([compressedData]).size;\n    return compressedSize / originalSize;\n  }\n\n  /**\n   * Estimate compression benefit\n   */\n  async estimateCompressionBenefit(data) {\n    try {\n      const originalSize = new Blob([data]).size;\n      const compressed = await this.compress(data);\n      const compressedSize = new Blob([compressed]).size;\n      \n      return {\n        originalSize,\n        compressedSize,\n        ratio: compressedSize / originalSize,\n        savings: originalSize - compressedSize,\n        savingsPercentage: ((originalSize - compressedSize) / originalSize) * 100,\n        worthCompressing: compressedSize < originalSize * 0.9 // 10% savings threshold\n      };\n    } catch (error) {\n      return {\n        originalSize: new Blob([data]).size,\n        compressedSize: new Blob([data]).size,\n        ratio: 1,\n        savings: 0,\n        savingsPercentage: 0,\n        worthCompressing: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if compression is available\n   */\n  isAvailable() {\n    return 'CompressionStream' in window || true; // LZ-string fallback always available\n  }\n\n  /**\n   * Get compression info\n   */\n  getInfo() {\n    return {\n      nativeCompressionAvailable: 'CompressionStream' in window,\n      fallbackAvailable: true,\n      defaultFormat: this.compressionFormat,\n      available: this.isAvailable()\n    };\n  }\n\n  /**\n   * Test compression performance\n   */\n  async performanceTest() {\n    const testData = JSON.stringify({\n      test: 'compression performance',\n      data: new Array(1000).fill('This is test data for compression performance testing. '.repeat(10)),\n      numbers: new Array(100).fill(0).map((_, i) => i),\n      timestamp: Date.now()\n    });\n\n    const iterations = 20;\n\n    try {\n      // Test compression performance\n      const compressStart = performance.now();\n      let compressed;\n      for (let i = 0; i < iterations; i++) {\n        compressed = await this.compress(testData);\n      }\n      const compressTime = performance.now() - compressStart;\n\n      // Test decompression performance\n      const decompressStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decompress(compressed);\n      }\n      const decompressTime = performance.now() - decompressStart;\n\n      const compressionRatio = this.getCompressionRatio(testData, compressed);\n\n      return {\n        compressTime: compressTime / iterations,\n        decompressTime: decompressTime / iterations,\n        totalTime: compressTime + decompressTime,\n        originalSize: testData.length,\n        compressedSize: compressed.length,\n        compressionRatio,\n        savingsPercentage: (1 - compressionRatio) * 100,\n        iterations,\n        method: this.isNativeCompressed(compressed) ? 'native' : 'lz-string'\n      };\n\n    } catch (error) {\n      console.error('Compression performance test failed:', error);\n      return null;\n    }\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n}\n","/**\n * Local Storage Service\n * Manages localStorage operations with encryption, compression, and data validation\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class LocalStorageService {\n  constructor() {\n    this.prefix = 'financeanalyst_';\n    this.isAvailable = false;\n    this.maxSize = 5 * 1024 * 1024; // 5MB typical localStorage limit\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n  }\n\n  /**\n   * Initialize the localStorage service\n   */\n  async initialize() {\n    try {\n      // Test localStorage availability\n      const testKey = this.prefix + 'test';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      \n      this.isAvailable = true;\n      console.log('✅ LocalStorage service initialized');\n      \n      return { success: true, available: true };\n    } catch (error) {\n      console.warn('⚠️ LocalStorage not available:', error);\n      this.isAvailable = false;\n      return { success: false, available: false, error: error.message };\n    }\n  }\n\n  /**\n   * Store data in localStorage\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const {\n      encrypt = false,\n      compress = false,\n      ttl = null,\n      validate = true\n    } = options;\n\n    try {\n      // Validate data if requested\n      if (validate && !this.validateData(data)) {\n        throw new Error('Invalid data format');\n      }\n\n      // Prepare storage object\n      const storageObject = {\n        data,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0',\n          encrypted: encrypt,\n          compressed: compress,\n          ttl,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      let serializedData = JSON.stringify(storageObject);\n\n      // Compress if requested\n      if (compress) {\n        serializedData = await this.compressionUtils.compress(serializedData);\n        storageObject.metadata.compressedSize = serializedData.length;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        serializedData = await this.cryptoUtils.encrypt(serializedData);\n      }\n\n      // Check size limits\n      if (serializedData.length > this.maxSize) {\n        throw new Error(`Data too large: ${serializedData.length} bytes exceeds ${this.maxSize} bytes`);\n      }\n\n      // Store in localStorage\n      const storageKey = this.prefix + key;\n      localStorage.setItem(storageKey, serializedData);\n\n      return {\n        success: true,\n        key: storageKey,\n        size: serializedData.length,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to store data in localStorage for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from localStorage\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { decrypt = false, validateTTL = true } = options;\n\n    try {\n      const storageKey = this.prefix + key;\n      let serializedData = localStorage.getItem(storageKey);\n\n      if (!serializedData) {\n        return null;\n      }\n\n      // Decrypt if needed\n      if (decrypt) {\n        serializedData = await this.cryptoUtils.decrypt(serializedData);\n      }\n\n      // Decompress if needed\n      let storageObject;\n      try {\n        storageObject = JSON.parse(serializedData);\n      } catch (parseError) {\n        // Try decompression first\n        try {\n          const decompressed = await this.compressionUtils.decompress(serializedData);\n          storageObject = JSON.parse(decompressed);\n        } catch (decompressError) {\n          throw new Error('Failed to parse stored data');\n        }\n      }\n\n      // Validate TTL\n      if (validateTTL && storageObject.metadata && storageObject.metadata.ttl) {\n        const now = Date.now();\n        const expiry = storageObject.metadata.timestamp + storageObject.metadata.ttl;\n        \n        if (now > expiry) {\n          await this.remove(key);\n          return null;\n        }\n      }\n\n      return {\n        data: storageObject.data,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to retrieve data from localStorage for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from localStorage\n   */\n  async remove(key) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const storageKey = this.prefix + key;\n      localStorage.removeItem(storageKey);\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove data from localStorage for key \"${key}\":`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all application data from localStorage\n   */\n  async clear() {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      const appKeys = keys.filter(key => key.startsWith(this.prefix));\n      \n      appKeys.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Failed to clear localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys for this application\n   */\n  async getKeys() {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      return keys\n        .filter(key => key.startsWith(this.prefix))\n        .map(key => key.substring(this.prefix.length));\n    } catch (error) {\n      console.error('Failed to get localStorage keys:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, used: 0, keys: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let totalSize = 0;\n      let itemCount = 0;\n      const itemSizes = {};\n\n      for (const key of keys) {\n        const storageKey = this.prefix + key;\n        const data = localStorage.getItem(storageKey);\n        if (data) {\n          const size = data.length;\n          totalSize += size;\n          itemCount++;\n          itemSizes[key] = size;\n        }\n      }\n\n      return {\n        available: true,\n        used: totalSize,\n        keys: itemCount,\n        maxSize: this.maxSize,\n        usagePercentage: (totalSize / this.maxSize) * 100,\n        itemSizes,\n        largestItem: Object.entries(itemSizes).reduce((max, [key, size]) => \n          size > max.size ? { key, size } : max, { key: null, size: 0 })\n      };\n\n    } catch (error) {\n      console.error('Failed to get localStorage stats:', error);\n      return { available: false, used: 0, keys: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Export all application data\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const keys = await this.getKeys();\n      const exportData = {};\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: false });\n        if (data) {\n          exportData[key] = data;\n        }\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Failed to export localStorage data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into localStorage\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [key, data] of Object.entries(importData)) {\n        try {\n          // Check if key exists and overwrite setting\n          const existing = await this.retrieve(key, { validateTTL: false });\n          if (existing && !overwrite) {\n            results.skipped++;\n            continue;\n          }\n\n          // Import the data\n          await this.store(key, data.data, {\n            encrypt: data.metadata?.encrypted || false,\n            compress: data.metadata?.compressed || false,\n            ttl: data.metadata?.ttl || null\n          });\n\n          results.imported++;\n        } catch (error) {\n          console.error(`Failed to import key \"${key}\":`, error);\n          results.errors++;\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Failed to import localStorage data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if localStorage has enough space for data\n   */\n  async hasSpace(dataSize) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const stats = await this.getStats();\n      return (stats.used + dataSize) <= this.maxSize;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Cleanup expired items\n   */\n  async cleanup() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let cleaned = 0;\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: true });\n        if (!data) {\n          cleaned++; // Item was expired and removed\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      console.error('Failed to cleanup localStorage:', error);\n      return { cleaned: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Validate data before storage\n   */\n  validateData(data) {\n    try {\n      // Check if data is serializable\n      JSON.stringify(data);\n      \n      // Check for circular references\n      const seen = new WeakSet();\n      const checkCircular = (obj) => {\n        if (obj !== null && typeof obj === 'object') {\n          if (seen.has(obj)) {\n            return false;\n          }\n          seen.add(obj);\n          for (const key in obj) {\n            if (!checkCircular(obj[key])) {\n              return false;\n            }\n          }\n        }\n        return true;\n      };\n\n      return checkCircular(data);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get localStorage availability status\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Test localStorage performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const testData = { test: 'performance', data: new Array(1000).fill('test') };\n    const iterations = 100;\n    \n    try {\n      // Test write performance\n      const writeStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.store(`perf_test_${i}`, testData);\n      }\n      const writeTime = performance.now() - writeStart;\n\n      // Test read performance\n      const readStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.retrieve(`perf_test_${i}`);\n      }\n      const readTime = performance.now() - readStart;\n\n      // Cleanup test data\n      for (let i = 0; i < iterations; i++) {\n        await this.remove(`perf_test_${i}`);\n      }\n\n      return {\n        writeTime: writeTime / iterations,\n        readTime: readTime / iterations,\n        totalTime: writeTime + readTime,\n        iterations\n      };\n\n    } catch (error) {\n      console.error('Performance test failed:', error);\n      return null;\n    }\n  }\n}\n","/**\n * IndexedDB Service\n * Manages IndexedDB operations for complex data storage with versioning and transactions\n */\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class IndexedDBService {\n  constructor() {\n    this.dbName = 'FinanceAnalystPro';\n    this.dbVersion = 1;\n    this.db = null;\n    this.isAvailable = false;\n    this.compressionUtils = new CompressionUtils();\n    \n    // Define object stores\n    this.stores = {\n      watchlists: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name', unique: true },\n          { name: 'created', keyPath: 'created' },\n          { name: 'lastUpdated', keyPath: 'lastUpdated' }\n        ]\n      },\n      analysis_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'analysisType', keyPath: 'analysisType' },\n          { name: 'timestamp', keyPath: 'timestamp' }\n        ]\n      },\n      command_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'command', keyPath: 'command' },\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'success', keyPath: 'success' }\n        ]\n      },\n      alerts: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'condition', keyPath: 'condition' },\n          { name: 'created', keyPath: 'created' },\n          { name: 'triggered', keyPath: 'triggered' }\n        ]\n      },\n      cached_data: {\n        keyPath: 'key',\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'expiry', keyPath: 'expiry' },\n          { name: 'dataType', keyPath: 'dataType' }\n        ]\n      },\n      user_models: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name' },\n          { name: 'type', keyPath: 'type' },\n          { name: 'created', keyPath: 'created' }\n        ]\n      },\n      export_data: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'type', keyPath: 'type' }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Initialize IndexedDB service\n   */\n  async initialize() {\n    if (!window.indexedDB) {\n      console.warn('⚠️ IndexedDB not available');\n      this.isAvailable = false;\n      return { success: false, available: false };\n    }\n\n    try {\n      this.db = await this.openDatabase();\n      this.isAvailable = true;\n      console.log('✅ IndexedDB service initialized');\n      \n      // Cleanup expired data\n      await this.cleanupExpiredData();\n      \n      return { success: true, available: true, version: this.dbVersion };\n    } catch (error) {\n      console.error('❌ Failed to initialize IndexedDB:', error);\n      this.isAvailable = false;\n      return { success: false, available: false, error: error.message };\n    }\n  }\n\n  /**\n   * Open IndexedDB database\n   */\n  async openDatabase() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => {\n        reject(new Error(`Failed to open database: ${request.error}`));\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        this.createObjectStores(db);\n      };\n    });\n  }\n\n  /**\n   * Create object stores during database upgrade\n   */\n  createObjectStores(db) {\n    // Remove existing stores if they exist\n    for (const storeName of Object.keys(this.stores)) {\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n    }\n\n    // Create new stores\n    for (const [storeName, config] of Object.entries(this.stores)) {\n      const store = db.createObjectStore(storeName, {\n        keyPath: config.keyPath,\n        autoIncrement: config.autoIncrement\n      });\n\n      // Create indexes\n      if (config.indexes) {\n        config.indexes.forEach(index => {\n          store.createIndex(index.name, index.keyPath, { unique: index.unique || false });\n        });\n      }\n    }\n\n    console.log('✅ IndexedDB object stores created');\n  }\n\n  /**\n   * Store data in IndexedDB\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const {\n      storeName = 'cached_data',\n      metadata = {},\n      compress = false\n    } = options;\n\n    try {\n      // Prepare data object\n      const dataObject = {\n        key,\n        data,\n        timestamp: Date.now(),\n        metadata: {\n          ...metadata,\n          compressed: compress,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      // Compress if requested\n      if (compress) {\n        const compressed = await this.compressionUtils.compress(JSON.stringify(data));\n        dataObject.data = compressed;\n        dataObject.metadata.compressedSize = compressed.length;\n      }\n\n      // Store in IndexedDB\n      const result = await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.put(dataObject);\n      });\n\n      return {\n        success: true,\n        key: result,\n        storeName,\n        size: JSON.stringify(dataObject).length,\n        metadata: dataObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to store data in IndexedDB for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from IndexedDB\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      const result = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.get(key);\n      });\n\n      if (!result) {\n        return null;\n      }\n\n      // Check expiry if applicable\n      if (result.metadata && result.metadata.expiry && Date.now() > result.metadata.expiry) {\n        await this.remove(key, { storeName });\n        return null;\n      }\n\n      // Decompress if needed\n      let data = result.data;\n      if (result.metadata && result.metadata.compressed) {\n        data = JSON.parse(await this.compressionUtils.decompress(data));\n      }\n\n      return {\n        data,\n        metadata: result.metadata,\n        timestamp: result.timestamp\n      };\n\n    } catch (error) {\n      console.error(`Failed to retrieve data from IndexedDB for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from IndexedDB\n   */\n  async remove(key, options = {}) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.delete(key);\n      });\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove data from IndexedDB for key \"${key}\":`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all data from a store\n   */\n  async clear(storeName = null) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      if (storeName) {\n        // Clear specific store\n        await this.performTransaction(storeName, 'readwrite', (store) => {\n          return store.clear();\n        });\n      } else {\n        // Clear all stores\n        for (const store of Object.keys(this.stores)) {\n          await this.performTransaction(store, 'readwrite', (storeObj) => {\n            return storeObj.clear();\n          });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to clear IndexedDB:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys from a store\n   */\n  async getKeys(storeName = 'cached_data') {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAllKeys();\n      });\n    } catch (error) {\n      console.error(`Failed to get keys from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get all data from a store\n   */\n  async getAll(storeName = 'cached_data', options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null, filter = null } = options;\n\n    try {\n      const results = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAll();\n      });\n\n      let filteredResults = results;\n\n      // Apply filter if provided\n      if (filter) {\n        filteredResults = results.filter(filter);\n      }\n\n      // Apply limit if provided\n      if (limit) {\n        filteredResults = filteredResults.slice(0, limit);\n      }\n\n      return filteredResults;\n    } catch (error) {\n      console.error(`Failed to get all data from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Query data using an index\n   */\n  async query(storeName, indexName, value, options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null } = options;\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        const index = store.index(indexName);\n        const request = limit ? index.getAll(value, limit) : index.getAll(value);\n        return request;\n      });\n    } catch (error) {\n      console.error(`Failed to query IndexedDB store \"${storeName}\" with index \"${indexName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, stores: {}, total: { records: 0, size: 0 } };\n    }\n\n    try {\n      const stats = {\n        available: true,\n        stores: {},\n        total: { records: 0, size: 0 }\n      };\n\n      for (const storeName of Object.keys(this.stores)) {\n        const records = await this.getAll(storeName);\n        const recordCount = records.length;\n        const storeSize = records.reduce((size, record) => {\n          return size + JSON.stringify(record).length;\n        }, 0);\n\n        stats.stores[storeName] = {\n          records: recordCount,\n          size: storeSize\n        };\n\n        stats.total.records += recordCount;\n        stats.total.size += storeSize;\n      }\n\n      return stats;\n    } catch (error) {\n      console.error('Failed to get IndexedDB stats:', error);\n      return { available: false, error: error.message };\n    }\n  }\n\n  /**\n   * Export all data from IndexedDB\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const exportData = {};\n\n      for (const storeName of Object.keys(this.stores)) {\n        exportData[storeName] = await this.getAll(storeName);\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Failed to export IndexedDB data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into IndexedDB\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [storeName, records] of Object.entries(importData)) {\n        if (!this.stores[storeName]) {\n          console.warn(`Unknown store: ${storeName}`);\n          continue;\n        }\n\n        for (const record of records) {\n          try {\n            if (!overwrite) {\n              // Check if record exists\n              const existing = await this.retrieve(record.key || record.id, { storeName });\n              if (existing) {\n                results.skipped++;\n                continue;\n              }\n            }\n\n            await this.performTransaction(storeName, 'readwrite', (store) => {\n              return store.put(record);\n            });\n\n            results.imported++;\n          } catch (error) {\n            console.error(`Failed to import record to store \"${storeName}\":`, error);\n            results.errors++;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Failed to import IndexedDB data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cleanup expired data\n   */\n  async cleanupExpiredData() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      let cleaned = 0;\n      const now = Date.now();\n\n      // Cleanup cached_data store\n      const cachedData = await this.getAll('cached_data');\n      for (const record of cachedData) {\n        if (record.metadata && record.metadata.expiry && now > record.metadata.expiry) {\n          await this.remove(record.key, { storeName: 'cached_data' });\n          cleaned++;\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      return { cleaned: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Perform IndexedDB transaction\n   */\n  async performTransaction(storeName, mode, operation) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([storeName], mode);\n      const store = transaction.objectStore(storeName);\n\n      transaction.onerror = () => {\n        reject(new Error(`Transaction failed: ${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        // Transaction completed successfully\n      };\n\n      const request = operation(store);\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = () => {\n        reject(new Error(`Operation failed: ${request.error}`));\n      };\n    });\n  }\n\n  /**\n   * Check if IndexedDB is available\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Get database info\n   */\n  getInfo() {\n    return {\n      dbName: this.dbName,\n      dbVersion: this.dbVersion,\n      available: this.isAvailable,\n      stores: Object.keys(this.stores),\n      storeCount: Object.keys(this.stores).length\n    };\n  }\n}\n","/**\n * Session Manager\n * Manages user sessions, authentication state, and session persistence\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nexport class SessionManager {\n  constructor() {\n    this.sessionKey = 'financeanalyst_session';\n    this.userKey = 'financeanalyst_user';\n    this.preferencesKey = 'financeanalyst_preferences';\n    this.cryptoUtils = new CryptoUtils();\n    \n    this.currentSession = null;\n    this.currentUser = null;\n    this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n    this.listeners = new Set();\n    \n    // Default user preferences\n    this.defaultPreferences = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD',\n      theme: 'dark',\n      notifications: true,\n      autoSave: true,\n      commandHistory: true,\n      dataRetention: 30, // days\n      privacy: {\n        analytics: false,\n        crashReporting: true,\n        dataSharing: false\n      }\n    };\n  }\n\n  /**\n   * Initialize session manager\n   */\n  async initialize() {\n    try {\n      // Load existing session\n      await this.loadSession();\n      \n      // Setup session monitoring\n      this.setupSessionMonitoring();\n      \n      console.log('✅ Session Manager initialized');\n      return { success: true, hasSession: !!this.currentSession };\n    } catch (error) {\n      console.error('❌ Failed to initialize Session Manager:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Create a new session\n   */\n  async createSession(userInfo = {}) {\n    try {\n      const sessionId = this.generateSessionId();\n      const now = Date.now();\n      \n      const session = {\n        id: sessionId,\n        userId: userInfo.id || this.generateUserId(),\n        created: now,\n        lastActivity: now,\n        expires: now + this.sessionTimeout,\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        version: '1.0'\n      };\n\n      const user = {\n        id: session.userId,\n        name: userInfo.name || 'Anonymous User',\n        email: userInfo.email || null,\n        created: userInfo.created || now,\n        lastLogin: now,\n        loginCount: (userInfo.loginCount || 0) + 1,\n        preferences: { ...this.defaultPreferences, ...userInfo.preferences }\n      };\n\n      // Store session and user data\n      await this.storeSession(session);\n      await this.storeUser(user);\n      \n      this.currentSession = session;\n      this.currentUser = user;\n      \n      // Notify listeners\n      this.notifyListeners('sessionCreated', { session, user });\n      \n      return {\n        success: true,\n        session,\n        user\n      };\n\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load existing session\n   */\n  async loadSession() {\n    try {\n      const sessionData = localStorage.getItem(this.sessionKey);\n      const userData = localStorage.getItem(this.userKey);\n      \n      if (!sessionData || !userData) {\n        return null;\n      }\n\n      const session = JSON.parse(sessionData);\n      const user = JSON.parse(userData);\n      \n      // Check if session is expired\n      if (Date.now() > session.expires) {\n        await this.destroySession();\n        return null;\n      }\n\n      // Update last activity\n      session.lastActivity = Date.now();\n      await this.storeSession(session);\n      \n      this.currentSession = session;\n      this.currentUser = user;\n      \n      // Notify listeners\n      this.notifyListeners('sessionLoaded', { session, user });\n      \n      return { session, user };\n\n    } catch (error) {\n      console.error('Failed to load session:', error);\n      // Clear corrupted session data\n      await this.destroySession();\n      return null;\n    }\n  }\n\n  /**\n   * Update session activity\n   */\n  async updateActivity() {\n    if (!this.currentSession) {\n      return false;\n    }\n\n    try {\n      this.currentSession.lastActivity = Date.now();\n      \n      // Extend session if needed\n      const timeUntilExpiry = this.currentSession.expires - Date.now();\n      if (timeUntilExpiry < this.sessionTimeout * 0.1) { // Extend if less than 10% time left\n        this.currentSession.expires = Date.now() + this.sessionTimeout;\n      }\n\n      await this.storeSession(this.currentSession);\n      return true;\n\n    } catch (error) {\n      console.error('Failed to update session activity:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Destroy current session\n   */\n  async destroySession() {\n    try {\n      const session = this.currentSession;\n      const user = this.currentUser;\n      \n      // Clear session data\n      localStorage.removeItem(this.sessionKey);\n      \n      this.currentSession = null;\n      this.currentUser = null;\n      \n      // Notify listeners\n      this.notifyListeners('sessionDestroyed', { session, user });\n      \n      return true;\n\n    } catch (error) {\n      console.error('Failed to destroy session:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current session\n   */\n  getSession() {\n    return this.currentSession;\n  }\n\n  /**\n   * Get current user\n   */\n  getUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    return !!(this.currentSession && Date.now() < this.currentSession.expires);\n  }\n\n  /**\n   * Get user preferences\n   */\n  getPreferences() {\n    return this.currentUser ? this.currentUser.preferences : this.defaultPreferences;\n  }\n\n  /**\n   * Update user preferences\n   */\n  async updatePreferences(newPreferences) {\n    if (!this.currentUser) {\n      throw new Error('No active user session');\n    }\n\n    try {\n      this.currentUser.preferences = {\n        ...this.currentUser.preferences,\n        ...newPreferences\n      };\n\n      await this.storeUser(this.currentUser);\n      \n      // Also store preferences separately for quick access\n      localStorage.setItem(this.preferencesKey, JSON.stringify(this.currentUser.preferences));\n      \n      // Notify listeners\n      this.notifyListeners('preferencesUpdated', { preferences: this.currentUser.preferences });\n      \n      return this.currentUser.preferences;\n\n    } catch (error) {\n      console.error('Failed to update preferences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get session statistics\n   */\n  getSessionStats() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    const now = Date.now();\n    const sessionDuration = now - this.currentSession.created;\n    const timeUntilExpiry = this.currentSession.expires - now;\n    const lastActivityAge = now - this.currentSession.lastActivity;\n\n    return {\n      sessionId: this.currentSession.id,\n      userId: this.currentUser.id,\n      userName: this.currentUser.name,\n      sessionDuration,\n      timeUntilExpiry,\n      lastActivityAge,\n      loginCount: this.currentUser.loginCount,\n      userCreated: this.currentUser.created,\n      isExpired: timeUntilExpiry <= 0,\n      isActive: lastActivityAge < 5 * 60 * 1000 // Active if activity within 5 minutes\n    };\n  }\n\n  /**\n   * Export session data\n   */\n  async exportSessionData() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    return {\n      session: { ...this.currentSession },\n      user: { ...this.currentUser },\n      preferences: { ...this.currentUser.preferences },\n      exportTimestamp: Date.now()\n    };\n  }\n\n  /**\n   * Import session data\n   */\n  async importSessionData(sessionData) {\n    try {\n      if (!sessionData || !sessionData.session || !sessionData.user) {\n        throw new Error('Invalid session data format');\n      }\n\n      // Validate session data\n      const session = sessionData.session;\n      const user = sessionData.user;\n\n      // Update timestamps\n      session.lastActivity = Date.now();\n      session.expires = Date.now() + this.sessionTimeout;\n      user.lastLogin = Date.now();\n\n      // Store imported data\n      await this.storeSession(session);\n      await this.storeUser(user);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionImported', { session, user });\n\n      return { success: true, session, user };\n\n    } catch (error) {\n      console.error('Failed to import session data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add session event listener\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove session event listener\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  /**\n   * Store session data\n   */\n  async storeSession(session) {\n    try {\n      localStorage.setItem(this.sessionKey, JSON.stringify(session));\n    } catch (error) {\n      console.error('Failed to store session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Store user data\n   */\n  async storeUser(user) {\n    try {\n      localStorage.setItem(this.userKey, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to store user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  generateSessionId() {\n    return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Generate unique user ID\n   */\n  generateUserId() {\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Setup session monitoring\n   */\n  setupSessionMonitoring() {\n    // Update activity on user interaction\n    const events = ['click', 'keypress', 'scroll', 'mousemove'];\n    let lastActivity = Date.now();\n\n    const throttledUpdate = this.throttle(() => {\n      const now = Date.now();\n      if (now - lastActivity > 60000) { // Update every minute\n        this.updateActivity();\n        lastActivity = now;\n      }\n    }, 1000);\n\n    events.forEach(event => {\n      document.addEventListener(event, throttledUpdate, { passive: true });\n    });\n\n    // Check session expiry periodically\n    setInterval(() => {\n      if (this.currentSession && Date.now() > this.currentSession.expires) {\n        this.destroySession();\n      }\n    }, 60000); // Check every minute\n\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        this.updateActivity();\n      }\n    });\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n      this.updateActivity();\n    });\n  }\n\n  /**\n   * Throttle function calls\n   */\n  throttle(func, limit) {\n    let inThrottle;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Notify event listeners\n   */\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in session event listener:', error);\n      }\n    });\n  }\n}\n","/**\n * Data Migration Service\n * Handles data migrations between different versions and storage formats\n */\n\nexport class DataMigrationService {\n  constructor() {\n    this.currentVersion = '1.0.0';\n    this.migrationKey = 'financeanalyst_migration_version';\n    this.backupKey = 'financeanalyst_migration_backup';\n    \n    // Define migration paths\n    this.migrations = {\n      '0.0.0': {\n        to: '1.0.0',\n        description: 'Initial migration to structured persistence layer',\n        migrate: this.migrateToV1_0_0.bind(this)\n      }\n      // Future migrations will be added here\n    };\n  }\n\n  /**\n   * Check if migration is needed and perform it\n   */\n  async checkAndMigrate() {\n    try {\n      const currentStoredVersion = localStorage.getItem(this.migrationKey);\n      \n      if (!currentStoredVersion) {\n        // First time setup - check for legacy data\n        await this.performInitialMigration();\n      } else if (currentStoredVersion !== this.currentVersion) {\n        // Version mismatch - perform migration\n        await this.performVersionMigration(currentStoredVersion, this.currentVersion);\n      }\n\n      // Update stored version\n      localStorage.setItem(this.migrationKey, this.currentVersion);\n      \n      console.log(`✅ Data migration complete - version ${this.currentVersion}`);\n      return { success: true, version: this.currentVersion };\n\n    } catch (error) {\n      console.error('❌ Data migration failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Perform initial migration from legacy data\n   */\n  async performInitialMigration() {\n    console.log('🔄 Performing initial data migration...');\n    \n    try {\n      // Check for legacy data patterns\n      const legacyData = await this.detectLegacyData();\n      \n      if (Object.keys(legacyData).length > 0) {\n        // Create backup before migration\n        await this.createMigrationBackup(legacyData);\n        \n        // Migrate legacy data to new format\n        await this.migrateToV1_0_0(legacyData);\n        \n        console.log('✅ Legacy data migrated successfully');\n      } else {\n        console.log('ℹ️ No legacy data found - clean installation');\n      }\n\n    } catch (error) {\n      console.error('Failed to perform initial migration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform version-to-version migration\n   */\n  async performVersionMigration(fromVersion, toVersion) {\n    console.log(`🔄 Migrating data from ${fromVersion} to ${toVersion}...`);\n    \n    try {\n      // Find migration path\n      const migrationPath = this.findMigrationPath(fromVersion, toVersion);\n      \n      if (!migrationPath.length) {\n        throw new Error(`No migration path found from ${fromVersion} to ${toVersion}`);\n      }\n\n      // Create backup before migration\n      const currentData = await this.exportCurrentData();\n      await this.createMigrationBackup(currentData, fromVersion);\n\n      // Execute migrations in sequence\n      for (const migration of migrationPath) {\n        console.log(`🔄 Applying migration: ${migration.description}`);\n        await migration.migrate();\n      }\n\n      console.log('✅ Version migration completed successfully');\n\n    } catch (error) {\n      console.error('Failed to perform version migration:', error);\n      \n      // Attempt to restore from backup\n      await this.restoreFromBackup();\n      throw error;\n    }\n  }\n\n  /**\n   * Detect legacy data in localStorage\n   */\n  async detectLegacyData() {\n    const legacyData = {};\n    \n    try {\n      // Check for old command processor data\n      const oldVariables = localStorage.getItem('commandProcessor_variables');\n      if (oldVariables) {\n        legacyData.variables = JSON.parse(oldVariables);\n      }\n\n      // Check for old settings\n      const oldSettings = localStorage.getItem('commandProcessor_settings');\n      if (oldSettings) {\n        legacyData.settings = JSON.parse(oldSettings);\n      }\n\n      // Check for old watchlists (if stored differently)\n      const oldWatchlists = localStorage.getItem('watchlists');\n      if (oldWatchlists) {\n        legacyData.watchlists = JSON.parse(oldWatchlists);\n      }\n\n      // Check for old alerts\n      const oldAlerts = localStorage.getItem('alerts');\n      if (oldAlerts) {\n        legacyData.alerts = JSON.parse(oldAlerts);\n      }\n\n      // Check for any other financeanalyst_ prefixed items\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('financeanalyst_') && \n            !key.includes('migration') && \n            !key.includes('session') && \n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          try {\n            legacyData[key] = JSON.parse(localStorage.getItem(key));\n          } catch (e) {\n            legacyData[key] = localStorage.getItem(key);\n          }\n        }\n      });\n\n      return legacyData;\n\n    } catch (error) {\n      console.error('Failed to detect legacy data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Migration to version 1.0.0\n   */\n  async migrateToV1_0_0(legacyData = null) {\n    try {\n      const dataToMigrate = legacyData || await this.detectLegacyData();\n      \n      // Migrate watchlists to new format\n      if (dataToMigrate.watchlists) {\n        const migratedWatchlists = this.migrateWatchlistsFormat(dataToMigrate.watchlists);\n        localStorage.setItem('financeanalyst_watchlists', JSON.stringify(migratedWatchlists));\n      }\n\n      // Migrate alerts to new format\n      if (dataToMigrate.alerts) {\n        const migratedAlerts = this.migrateAlertsFormat(dataToMigrate.alerts);\n        localStorage.setItem('financeanalyst_alerts', JSON.stringify(migratedAlerts));\n      }\n\n      // Migrate user preferences\n      if (dataToMigrate.settings) {\n        const migratedPreferences = this.migratePreferencesFormat(dataToMigrate.settings);\n        localStorage.setItem('financeanalyst_preferences', JSON.stringify(migratedPreferences));\n      }\n\n      // Migrate variables to new storage\n      if (dataToMigrate.variables) {\n        const migratedVariables = this.migrateVariablesFormat(dataToMigrate.variables);\n        localStorage.setItem('financeanalyst_user_variables', JSON.stringify(migratedVariables));\n      }\n\n      // Clean up old data\n      await this.cleanupLegacyData(dataToMigrate);\n\n      console.log('✅ Migration to v1.0.0 completed');\n\n    } catch (error) {\n      console.error('Failed to migrate to v1.0.0:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Migrate watchlists to new format\n   */\n  migrateWatchlistsFormat(oldWatchlists) {\n    const migrated = {};\n    \n    if (Array.isArray(oldWatchlists)) {\n      // Old format was array, convert to object\n      oldWatchlists.forEach((watchlist, index) => {\n        const name = watchlist.name || `Watchlist ${index + 1}`;\n        migrated[name] = {\n          tickers: watchlist.tickers || watchlist.stocks || [],\n          created: watchlist.created || new Date().toISOString().split('T')[0],\n          lastUpdated: watchlist.lastUpdated || null\n        };\n      });\n    } else if (typeof oldWatchlists === 'object') {\n      // Already in object format, just ensure structure\n      Object.entries(oldWatchlists).forEach(([name, data]) => {\n        migrated[name] = {\n          tickers: data.tickers || data.stocks || [],\n          created: data.created || new Date().toISOString().split('T')[0],\n          lastUpdated: data.lastUpdated || null\n        };\n      });\n    }\n\n    return migrated;\n  }\n\n  /**\n   * Migrate alerts to new format\n   */\n  migrateAlertsFormat(oldAlerts) {\n    if (!Array.isArray(oldAlerts)) {\n      return [];\n    }\n\n    return oldAlerts.map(alert => ({\n      id: alert.id || Date.now() + Math.random(),\n      ticker: alert.ticker,\n      condition: alert.condition,\n      value: alert.value,\n      created: alert.created || new Date().toISOString().split('T')[0],\n      triggered: alert.triggered || false\n    }));\n  }\n\n  /**\n   * Migrate preferences to new format\n   */\n  migratePreferencesFormat(oldSettings) {\n    return {\n      currency: oldSettings.currency || 'USD',\n      precision: oldSettings.precision || 2,\n      dateFormat: oldSettings.dateFormat || 'YYYY-MM-DD',\n      theme: oldSettings.theme || 'dark',\n      notifications: oldSettings.notifications !== false,\n      autoSave: oldSettings.autoSave !== false,\n      commandHistory: oldSettings.commandHistory !== false,\n      dataRetention: oldSettings.dataRetention || 30,\n      privacy: {\n        analytics: oldSettings.analytics || false,\n        crashReporting: oldSettings.crashReporting !== false,\n        dataSharing: oldSettings.dataSharing || false\n      }\n    };\n  }\n\n  /**\n   * Migrate variables to new format\n   */\n  migrateVariablesFormat(oldVariables) {\n    // Variables format should remain mostly the same\n    return { ...oldVariables };\n  }\n\n  /**\n   * Clean up legacy data after migration\n   */\n  async cleanupLegacyData(legacyData) {\n    try {\n      // Remove old localStorage keys\n      const keysToRemove = [\n        'commandProcessor_variables',\n        'commandProcessor_settings',\n        'watchlists',\n        'alerts'\n      ];\n\n      keysToRemove.forEach(key => {\n        if (localStorage.getItem(key)) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      // Remove other legacy keys found in detection\n      Object.keys(legacyData).forEach(key => {\n        if (key.startsWith('financeanalyst_') && \n            !key.includes('migration') && \n            !key.includes('session') && \n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      console.log('✅ Legacy data cleanup completed');\n\n    } catch (error) {\n      console.error('Failed to cleanup legacy data:', error);\n      // Don't throw - cleanup failure shouldn't break migration\n    }\n  }\n\n  /**\n   * Create backup before migration\n   */\n  async createMigrationBackup(data, version = 'legacy') {\n    try {\n      const backup = {\n        version,\n        timestamp: new Date().toISOString(),\n        data\n      };\n\n      localStorage.setItem(this.backupKey, JSON.stringify(backup));\n      console.log(`✅ Migration backup created for version ${version}`);\n\n    } catch (error) {\n      console.error('Failed to create migration backup:', error);\n      // Don't throw - backup failure shouldn't prevent migration\n    }\n  }\n\n  /**\n   * Restore from migration backup\n   */\n  async restoreFromBackup() {\n    try {\n      const backupData = localStorage.getItem(this.backupKey);\n      if (!backupData) {\n        throw new Error('No migration backup found');\n      }\n\n      const backup = JSON.parse(backupData);\n      \n      // Restore data based on backup version\n      if (backup.version === 'legacy') {\n        // Restore legacy format\n        Object.entries(backup.data).forEach(([key, value]) => {\n          localStorage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\n        });\n      }\n\n      console.log('✅ Data restored from migration backup');\n      return true;\n\n    } catch (error) {\n      console.error('Failed to restore from backup:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Export current data for backup\n   */\n  async exportCurrentData() {\n    const data = {};\n    \n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('financeanalyst_')) {\n        try {\n          data[key] = JSON.parse(localStorage.getItem(key));\n        } catch (e) {\n          data[key] = localStorage.getItem(key);\n        }\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Find migration path between versions\n   */\n  findMigrationPath(fromVersion, toVersion) {\n    // For now, simple direct migration\n    // In the future, this could handle complex migration chains\n    const migration = this.migrations[fromVersion];\n    \n    if (migration && migration.to === toVersion) {\n      return [migration];\n    }\n\n    return [];\n  }\n\n  /**\n   * Get migration status\n   */\n  getMigrationStatus() {\n    const storedVersion = localStorage.getItem(this.migrationKey);\n    const hasBackup = !!localStorage.getItem(this.backupKey);\n    \n    return {\n      currentVersion: this.currentVersion,\n      storedVersion,\n      needsMigration: storedVersion !== this.currentVersion,\n      hasBackup,\n      availableMigrations: Object.keys(this.migrations)\n    };\n  }\n\n  /**\n   * Clear migration backup\n   */\n  clearBackup() {\n    localStorage.removeItem(this.backupKey);\n    console.log('✅ Migration backup cleared');\n  }\n}\n","/**\n * Persistence Manager - Central data persistence orchestrator\n * Manages multiple storage layers and provides unified API for data persistence\n */\n\nimport { LocalStorageService } from './LocalStorageService';\nimport { IndexedDBService } from './IndexedDBService';\nimport { SessionManager } from './SessionManager';\nimport { DataMigrationService } from './DataMigrationService';\n\nexport class PersistenceManager {\n  constructor() {\n    this.localStorage = new LocalStorageService();\n    this.indexedDB = new IndexedDBService();\n    this.sessionManager = new SessionManager();\n    this.migrationService = new DataMigrationService();\n    \n    this.isInitialized = false;\n    this.storageQuota = null;\n    this.listeners = new Map();\n    \n    // Storage strategy configuration\n    this.storageStrategy = {\n      // Small, frequently accessed data -> localStorage\n      localStorage: [\n        'user_preferences',\n        'session_data',\n        'ui_state',\n        'recent_commands',\n        'quick_settings'\n      ],\n      // Large, complex data -> IndexedDB\n      indexedDB: [\n        'watchlists',\n        'analysis_history',\n        'command_history',\n        'alerts',\n        'cached_data',\n        'user_models',\n        'export_data'\n      ]\n    };\n  }\n\n  /**\n   * Initialize the persistence manager\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      // Check storage availability\n      await this.checkStorageAvailability();\n      \n      // Initialize storage services\n      await Promise.all([\n        this.localStorage.initialize(),\n        this.indexedDB.initialize(),\n        this.sessionManager.initialize()\n      ]);\n\n      // Check for data migrations\n      await this.migrationService.checkAndMigrate();\n\n      // Estimate storage quota\n      await this.estimateStorageQuota();\n\n      this.isInitialized = true;\n      console.log('✅ Persistence Manager initialized successfully');\n      \n      return {\n        success: true,\n        storageQuota: this.storageQuota,\n        availableStorage: await this.getAvailableStorage()\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize Persistence Manager:', error);\n      throw new Error(`Persistence initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Store data using appropriate storage layer\n   */\n  async store(key, data, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      encrypt = false,\n      compress = false,\n      ttl = null\n    } = options;\n\n    try {\n      const metadata = {\n        timestamp: Date.now(),\n        version: '1.0',\n        encrypted: encrypt,\n        compressed: compress,\n        ttl,\n        size: JSON.stringify(data).length\n      };\n\n      let result;\n      \n      if (storage === 'localStorage') {\n        result = await this.localStorage.store(key, data, { encrypt, ttl });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.store(key, data, { metadata, compress });\n      } else {\n        throw new Error(`Unknown storage layer: ${storage}`);\n      }\n\n      // Notify listeners\n      this.notifyListeners('store', { key, storage, metadata });\n\n      return result;\n\n    } catch (error) {\n      console.error(`Failed to store data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from appropriate storage layer\n   */\n  async retrieve(key, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      decrypt = false\n    } = options;\n\n    try {\n      let result;\n\n      if (storage === 'localStorage') {\n        result = await this.localStorage.retrieve(key, { decrypt });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.retrieve(key);\n      } else {\n        // Try both storage layers\n        result = await this.localStorage.retrieve(key, { decrypt }) ||\n                 await this.indexedDB.retrieve(key);\n      }\n\n      // Check TTL if applicable\n      if (result && result.metadata && result.metadata.ttl) {\n        const now = Date.now();\n        const expiry = result.metadata.timestamp + result.metadata.ttl;\n        \n        if (now > expiry) {\n          await this.remove(key, { storage });\n          return null;\n        }\n      }\n\n      return result ? result.data || result : null;\n\n    } catch (error) {\n      console.error(`Failed to retrieve data for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from storage\n   */\n  async remove(key, options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both' } = options;\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.remove(key));\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.remove(key));\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('remove', { key, storage });\n\n      return true;\n\n    } catch (error) {\n      console.error(`Failed to remove data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear all data from storage\n   */\n  async clear(options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both', confirm = false } = options;\n\n    if (!confirm) {\n      throw new Error('Clear operation requires explicit confirmation');\n    }\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.clear());\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.clear());\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('clear', { storage });\n\n      return true;\n\n    } catch (error) {\n      console.error('Failed to clear storage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStorageStats() {\n    await this.ensureInitialized();\n\n    try {\n      const [localStorageStats, indexedDBStats] = await Promise.all([\n        this.localStorage.getStats(),\n        this.indexedDB.getStats()\n      ]);\n\n      const totalUsed = localStorageStats.used + indexedDBStats.used;\n      const totalAvailable = await this.getAvailableStorage();\n\n      return {\n        localStorage: localStorageStats,\n        indexedDB: indexedDBStats,\n        total: {\n          used: totalUsed,\n          available: totalAvailable,\n          quota: this.storageQuota,\n          usagePercentage: this.storageQuota ? (totalUsed / this.storageQuota) * 100 : 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to get storage stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Export all user data\n   */\n  async exportData(options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      format = 'json',\n      includeMetadata = true,\n      compress = false\n    } = options;\n\n    try {\n      const [localStorageData, indexedDBData] = await Promise.all([\n        this.localStorage.exportAll(),\n        this.indexedDB.exportAll()\n      ]);\n\n      const exportData = {\n        version: '1.0',\n        timestamp: new Date().toISOString(),\n        localStorage: localStorageData,\n        indexedDB: indexedDBData\n      };\n\n      if (includeMetadata) {\n        exportData.metadata = {\n          userAgent: navigator.userAgent,\n          storageStats: await this.getStorageStats(),\n          exportOptions: options\n        };\n      }\n\n      return {\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import user data\n   */\n  async importData(importData, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      overwrite = false,\n      validate = true,\n      backup = true\n    } = options;\n\n    try {\n      // Validate import data\n      if (validate && !this.validateImportData(importData)) {\n        throw new Error('Invalid import data format');\n      }\n\n      // Create backup if requested\n      if (backup) {\n        const backupData = await this.exportData();\n        await this.store('backup_before_import', backupData, {\n          storage: 'indexedDB',\n          ttl: 7 * 24 * 60 * 60 * 1000 // 7 days\n        });\n      }\n\n      // Import localStorage data\n      if (importData.localStorage) {\n        await this.localStorage.importData(importData.localStorage, { overwrite });\n      }\n\n      // Import IndexedDB data\n      if (importData.indexedDB) {\n        await this.indexedDB.importData(importData.indexedDB, { overwrite });\n      }\n\n      // Notify listeners\n      this.notifyListeners('import', { size: JSON.stringify(importData).length });\n\n      return {\n        success: true,\n        imported: {\n          localStorage: Object.keys(importData.localStorage || {}).length,\n          indexedDB: Object.keys(importData.indexedDB || {}).length\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add event listener for storage events\n   */\n  addEventListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n\n  // Private methods\n\n  async ensureInitialized() {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  determineStorageLayer(key) {\n    if (this.storageStrategy.localStorage.includes(key)) {\n      return 'localStorage';\n    }\n    if (this.storageStrategy.indexedDB.includes(key)) {\n      return 'indexedDB';\n    }\n    // Default to localStorage for small data\n    return 'localStorage';\n  }\n\n  async checkStorageAvailability() {\n    // Check localStorage\n    if (!window.localStorage) {\n      throw new Error('localStorage is not available');\n    }\n\n    // Check IndexedDB\n    if (!window.indexedDB) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    return true;\n  }\n\n  async estimateStorageQuota() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      this.storageQuota = estimate.quota;\n      return estimate;\n    }\n    return null;\n  }\n\n  async getAvailableStorage() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return estimate.quota - estimate.usage;\n    }\n    return null;\n  }\n\n  validateImportData(data) {\n    return data && \n           typeof data === 'object' && \n           data.version && \n           (data.localStorage || data.indexedDB);\n  }\n\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in storage event listener:', error);\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const persistenceManager = new PersistenceManager();\n","/**\n * Enhanced Command Processor for FinanceAnalyst Pro Terminal\n * Provides modular, extensible command processing with categorization\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { dataFetchingService } from './dataFetching';\nimport { persistenceManager } from './persistence/PersistenceManager';\n\nexport class CommandProcessor {\n  constructor() {\n    this.commandHistory = [];\n    this.variables = new Map();\n    this.settings = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD'\n    };\n    this.persistenceInitialized = false;\n    this.maxHistorySize = 1000;\n  }\n\n  /**\n   * Initialize persistence layer\n   */\n  async initializePersistence() {\n    if (this.persistenceInitialized) return;\n\n    try {\n      await persistenceManager.initialize();\n\n      // Load persisted data\n      await this.loadPersistedData();\n\n      this.persistenceInitialized = true;\n      console.log('✅ Command processor persistence initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize persistence:', error);\n      // Continue without persistence\n    }\n  }\n\n  /**\n   * Load persisted data\n   */\n  async loadPersistedData() {\n    try {\n      // Load command history\n      const history = await persistenceManager.retrieve('command_history');\n      if (history && Array.isArray(history)) {\n        this.commandHistory = history.slice(-this.maxHistorySize);\n      }\n\n      // Load variables\n      const variables = await persistenceManager.retrieve('user_variables');\n      if (variables && typeof variables === 'object') {\n        this.variables = new Map(Object.entries(variables));\n      }\n\n      // Load settings\n      const settings = await persistenceManager.retrieve('user_preferences');\n      if (settings && typeof settings === 'object') {\n        this.settings = { ...this.settings, ...settings };\n      }\n\n    } catch (error) {\n      console.error('Failed to load persisted data:', error);\n    }\n  }\n\n  /**\n   * Save data to persistence layer\n   */\n  async saveData() {\n    if (!this.persistenceInitialized) return;\n\n    try {\n      // Save command history\n      await persistenceManager.store('command_history', this.commandHistory, {\n        storage: 'indexedDB'\n      });\n\n      // Save variables\n      const variablesObj = Object.fromEntries(this.variables);\n      await persistenceManager.store('user_variables', variablesObj, {\n        storage: 'localStorage'\n      });\n\n      // Save settings\n      await persistenceManager.store('user_preferences', this.settings, {\n        storage: 'localStorage'\n      });\n\n    } catch (error) {\n      console.error('Failed to save data:', error);\n    }\n  }\n\n  /**\n   * Process a command input and return structured response\n   * @param {string} input - Raw command input\n   * @param {Object} context - Execution context\n   * @returns {Promise<Object>} Command response\n   */\n  async processCommand(input, context = {}) {\n    const startTime = Date.now();\n\n    try {\n      // Initialize persistence if not already done\n      if (!this.persistenceInitialized) {\n        await this.initializePersistence();\n      }\n\n      // Parse command\n      const parsedCommand = this.parseCommand(input);\n\n      // Add to history\n      const historyEntry = {\n        input,\n        timestamp: new Date(),\n        success: false,\n        ...parsedCommand\n      };\n      this.commandHistory.push(historyEntry);\n\n      // Trim history if too long\n      if (this.commandHistory.length > this.maxHistorySize) {\n        this.commandHistory = this.commandHistory.slice(-this.maxHistorySize);\n      }\n\n      // Get command handler\n      const handler = commandRegistry.getHandler(parsedCommand.command);\n      \n      if (!handler) {\n        return this.createErrorResponse(`Unknown command: \"${parsedCommand.command}\"`, input);\n      }\n\n      // Validate parameters\n      const validationResult = this.validateParameters(handler, parsedCommand);\n      if (!validationResult.valid) {\n        return this.createErrorResponse(validationResult.error, input);\n      }\n\n      // Execute command\n      const result = await handler.execute(parsedCommand, context, this);\n\n      // Mark command as successful in history\n      historyEntry.success = result.type !== 'error';\n      historyEntry.executionTime = Date.now() - startTime;\n\n      // Add execution metadata\n      result.executionTime = Date.now() - startTime;\n      result.timestamp = new Date();\n\n      // Save data asynchronously (don't wait)\n      this.saveData().catch(error => {\n        console.error('Failed to save command processor data:', error);\n      });\n\n      return result;\n\n    } catch (error) {\n      return this.createErrorResponse(`Command execution failed: ${error.message}`, input);\n    }\n  }\n\n  /**\n   * Parse command input into structured format\n   * @param {string} input - Raw command input\n   * @returns {Object} Parsed command object\n   */\n  parseCommand(input) {\n    const trimmed = input.trim();\n    \n    // Handle function-style commands: COMMAND(param1, param2)\n    const functionMatch = trimmed.match(/^([A-Z_]+)\\s*\\(\\s*([^)]*)\\s*\\)$/i);\n    if (functionMatch) {\n      const [, command, paramString] = functionMatch;\n      const parameters = this.parseParameters(paramString);\n      return {\n        command: command.toUpperCase(),\n        parameters,\n        rawInput: trimmed,\n        style: 'function'\n      };\n    }\n\n    // Handle space-separated commands: COMMAND param1 param2\n    const parts = trimmed.split(/\\s+/);\n    const command = parts[0].toUpperCase();\n    const parameters = parts.slice(1);\n\n    return {\n      command,\n      parameters,\n      rawInput: trimmed,\n      style: 'space-separated'\n    };\n  }\n\n  /**\n   * Parse function parameters from string\n   * @param {string} paramString - Parameter string\n   * @returns {Array} Parsed parameters\n   */\n  parseParameters(paramString) {\n    if (!paramString.trim()) return [];\n\n    const params = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = 0;\n    let quoteChar = '';\n\n    for (let i = 0; i < paramString.length; i++) {\n      const char = paramString[i];\n      \n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        inQuotes = false;\n        quoteChar = '';\n      } else if (char === '[' && !inQuotes) {\n        inBrackets++;\n        current += char;\n      } else if (char === ']' && !inQuotes) {\n        inBrackets--;\n        current += char;\n      } else if (char === ',' && !inQuotes && inBrackets === 0) {\n        params.push(this.parseParameterValue(current.trim()));\n        current = '';\n        continue;\n      } else {\n        current += char;\n      }\n    }\n\n    if (current.trim()) {\n      params.push(this.parseParameterValue(current.trim()));\n    }\n\n    return params;\n  }\n\n  /**\n   * Parse individual parameter value\n   * @param {string} value - Parameter value string\n   * @returns {*} Parsed value\n   */\n  parseParameterValue(value) {\n    // Remove quotes\n    if ((value.startsWith('\"') && value.endsWith('\"')) || \n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      return value.slice(1, -1);\n    }\n\n    // Parse arrays\n    if (value.startsWith('[') && value.endsWith(']')) {\n      const arrayContent = value.slice(1, -1);\n      if (!arrayContent.trim()) return [];\n      return arrayContent.split(',').map(item => this.parseParameterValue(item.trim()));\n    }\n\n    // Parse numbers\n    if (/^-?\\d+\\.?\\d*$/.test(value)) {\n      return parseFloat(value);\n    }\n\n    // Parse booleans\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n\n    // Return as string\n    return value;\n  }\n\n  /**\n   * Validate command parameters\n   * @param {Object} handler - Command handler\n   * @param {Object} parsedCommand - Parsed command\n   * @returns {Object} Validation result\n   */\n  validateParameters(handler, parsedCommand) {\n    if (!handler.parameterSchema) {\n      return { valid: true };\n    }\n\n    const { required = [], optional = [] } = handler.parameterSchema;\n    const { parameters } = parsedCommand;\n\n    // Check required parameters\n    if (parameters.length < required.length) {\n      return {\n        valid: false,\n        error: `Missing required parameters. Expected: ${required.join(', ')}`\n      };\n    }\n\n    // Check maximum parameters\n    const maxParams = required.length + optional.length;\n    if (parameters.length > maxParams) {\n      return {\n        valid: false,\n        error: `Too many parameters. Maximum: ${maxParams}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Create error response\n   * @param {string} message - Error message\n   * @param {string} input - Original input\n   * @returns {Object} Error response\n   */\n  createErrorResponse(message, input) {\n    return {\n      type: 'error',\n      content: message,\n      suggestions: this.getSuggestions(input),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Get command suggestions for invalid input\n   * @param {string} input - Original input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(input) {\n    const command = input.split(/[\\s(]/)[0].toUpperCase();\n    const allCommands = commandRegistry.getAllCommands();\n    \n    return allCommands\n      .filter(cmd => cmd.includes(command.substring(0, 3)) || \n                     cmd.toLowerCase().includes(command.toLowerCase()))\n      .slice(0, 5);\n  }\n\n  /**\n   * Get command history\n   * @param {number} limit - Number of recent commands\n   * @returns {Array} Command history\n   */\n  getHistory(limit = 10) {\n    return this.commandHistory.slice(-limit);\n  }\n\n  /**\n   * Clear command history\n   */\n  clearHistory() {\n    this.commandHistory = [];\n  }\n\n  /**\n   * Set variable value\n   * @param {string} name - Variable name\n   * @param {*} value - Variable value\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n\n    // Save variables asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save variables:', error);\n      });\n    }\n  }\n\n  /**\n   * Get variable value\n   * @param {string} name - Variable name\n   * @returns {*} Variable value\n   */\n  getVariable(name) {\n    return this.variables.get(name);\n  }\n\n  /**\n   * Get all variables\n   * @returns {Object} All variables\n   */\n  getAllVariables() {\n    return Object.fromEntries(this.variables);\n  }\n\n  /**\n   * Update settings\n   * @param {string} key - Setting key\n   * @param {*} value - Setting value\n   */\n  updateSetting(key, value) {\n    this.settings[key] = value;\n\n    // Save settings asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save settings:', error);\n      });\n    }\n  }\n\n  /**\n   * Get setting value\n   * @param {string} key - Setting key\n   * @returns {*} Setting value\n   */\n  getSetting(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Get all settings\n   * @returns {Object} All settings\n   */\n  getAllSettings() {\n    return { ...this.settings };\n  }\n}\n\n// Export singleton instance\nexport const commandProcessor = new CommandProcessor();\n","/**\n * Core Financial Analysis Commands\n * DCF, LBO, COMP, and other fundamental analysis commands\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { \n  calculateDCFValuation, \n  calculateLBOReturns, \n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation';\n\nexport const coreCommands = {\n  DCF: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DCF command requires a ticker symbol. Usage: DCF(AAPL)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building DCF model for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating free cash flows\\n• Determining terminal value\\n• Computing present values...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        // This would be called from the terminal to show loading\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const dcfInputs = await dataFetchingService.fetchDCFInputs(ticker.toUpperCase());\n        const dcfResults = calculateDCFValuation(dcfInputs);\n\n        const content = `DCF Valuation Analysis for ${dcfInputs.companyName} (${ticker.toUpperCase()})\\n\\n📊 VALUATION SUMMARY:\\n• Current Price: ${formatCurrency(dcfInputs.currentPrice)}\\n• Fair Value: ${formatCurrency(dcfResults.fairValue)}\\n• Upside/Downside: ${formatPercentage(dcfResults.upside / 100)}\\n\\n💰 KEY METRICS:\\n• Enterprise Value: ${formatCurrency(dcfResults.enterpriseValue, 'USD', true)}\\n• Equity Value: ${formatCurrency(dcfResults.equityValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(dcfResults.terminalValue, 'USD', true)}\\n• WACC: ${formatPercentage(dcfResults.wacc)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${dcfResults.projections.map((proj, i) => `Year ${i + 1}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}`).join('\\n')}\\n\\n🎯 RECOMMENDATION: ${dcfResults.recommendation}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'dcf',\n            ticker: ticker.toUpperCase(),\n            results: dcfResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  LBO: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'LBO command requires a ticker symbol. Usage: LBO(TSLA)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Analyzing LBO potential for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating debt capacity\\n• Analyzing peer multiples\\n• Computing returns scenarios...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, financials] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement')\n        ]);\n\n        const lboInputs = {\n          companyName: profile.companyName,\n          currentPrice: profile.price,\n          marketCap: profile.mktCap,\n          ebitda: financials[0]?.ebitda || profile.mktCap * 0.15,\n          revenue: financials[0]?.revenue || profile.mktCap * 2,\n          debt: profile.totalDebt || 0,\n          cash: profile.totalCash || 0\n        };\n\n        const lboResults = calculateLBOReturns(lboInputs);\n\n        const content = `LBO Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💼 TRANSACTION SUMMARY:\\n• Purchase Price: ${formatCurrency(lboResults.purchasePrice, 'USD', true)}\\n• Equity Investment: ${formatCurrency(lboResults.equityInvestment, 'USD', true)}\\n• Total Debt: ${formatCurrency(lboResults.totalDebt, 'USD', true)}\\n• Debt/Equity Ratio: ${formatNumber(lboResults.debtToEquity, 1)}x\\n\\n📈 PROJECTED RETURNS (5-year hold):\\n• Exit Equity Value: ${formatCurrency(lboResults.exitEquityValue, 'USD', true)}\\n• Total Return: ${formatCurrency(lboResults.totalReturn, 'USD', true)}\\n• IRR: ${formatPercentage(lboResults.irr)}\\n• MOIC: ${formatNumber(lboResults.moic, 1)}x\\n\\n🎯 EXIT ASSUMPTIONS:\\n• Exit EBITDA: ${formatCurrency(lboResults.exitEbitda, 'USD', true)}\\n• Exit Multiple: ${formatNumber(lboResults.exitMultiple, 1)}x\\n• Exit Enterprise Value: ${formatCurrency(lboResults.exitEnterpriseValue, 'USD', true)}\\n\\n💰 FEES & CARRY:\\n• Management Fees: ${formatCurrency(lboResults.managementFees, 'USD', true)}\\n• Carried Interest: ${formatCurrency(lboResults.carriedInterest, 'USD', true)}\\n• Net Return: ${formatCurrency(lboResults.netReturn, 'USD', true)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'lbo',\n            ticker: ticker.toUpperCase(),\n            results: lboResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `LBO analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  COMP: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'COMP command requires a ticker symbol. Usage: COMP(MSFT)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building comparable company analysis for ${ticker.toUpperCase()}...\\n• Identifying peer companies\\n• Fetching peer financial data\\n• Calculating valuation multiples\\n• Generating relative analysis...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, peers] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchPeerComparables(ticker.toUpperCase())\n        ]);\n\n        const companyData = {\n          symbol: ticker.toUpperCase(),\n          name: profile.companyName,\n          marketCap: profile.mktCap,\n          peRatio: profile.pe,\n          evToEbitda: profile.enterpriseValueOverEBITDA,\n          priceToBook: profile.pb,\n          debtToEquity: profile.debtToEquity\n        };\n\n        const compAnalysis = calculateComparableMetrics(companyData, peers);\n\n        const content = `Comparable Company Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 PEER GROUP (${peers.length} companies):\\n${peers.slice(0, 5).map(peer => `• ${peer.symbol}: ${peer.name}`).join('\\n')}\\n\\n📊 VALUATION MULTIPLES:\\n• P/E Ratio: ${formatNumber(companyData.peRatio, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x)\\n• EV/EBITDA: ${formatNumber(companyData.evToEbitda, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.evToEbitda.median, 1)}x)\\n• P/B Ratio: ${formatNumber(companyData.priceToBook, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.priceToBook.median, 1)}x)\\n\\n📈 RELATIVE VALUATION:\\n• P/E vs Peers: ${formatPercentage((compAnalysis.relativeValuation.peRatioRelative - 1))}\\n• EV/EBITDA vs Peers: ${formatPercentage((compAnalysis.relativeValuation.evEbitdaRelative - 1))}\\n• P/B vs Peers: ${formatPercentage((compAnalysis.relativeValuation.priceToBookRelative - 1))}\\n\\n💰 MARKET POSITION:\\n• Market Cap Percentile: ${formatNumber(compAnalysis.relativeValuation.marketCapPercentile)}th\\n• Size: ${companyData.marketCap > compAnalysis.peerStatistics.marketCap.median ? 'Above' : 'Below'} peer median\\n\\n🎯 PEER VALUATION RANGE:\\n• Min P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.min, 1)}x\\n• Max P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.max, 1)}x\\n• Median P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'comparable',\n            ticker: ticker.toUpperCase(),\n            results: compAnalysis\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Comparable analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  FETCH: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'FETCH command requires a ticker symbol. Usage: FETCH(GOOGL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        const content = `Company Data for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 COMPANY PROFILE:\\n• Industry: ${profile.industry}\\n• Sector: ${profile.sector}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• Employees: ${formatNumber(profile.fullTimeEmployees, 0)}\\n\\n💰 FINANCIAL METRICS:\\n• Price: ${formatCurrency(profile.price)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}\\n• EPS: ${formatCurrency(profile.eps)}\\n• Revenue (TTM): ${formatCurrency(profile.revenue, 'USD', true)}\\n• Profit Margin: ${formatPercentage(profile.profitMargin)}\\n\\n📊 VALUATION RATIOS:\\n• Price/Book: ${formatNumber(profile.pb, 2)}\\n• Price/Sales: ${formatNumber(profile.ps, 2)}\\n• EV/EBITDA: ${formatNumber(profile.enterpriseValueOverEBITDA, 1)}\\n• EV/Revenue: ${formatNumber(profile.enterpriseValueOverRevenue, 1)}\\n\\n💼 BALANCE SHEET:\\n• Total Debt: ${formatCurrency(profile.totalDebt, 'USD', true)}\\n• Total Cash: ${formatCurrency(profile.totalCash, 'USD', true)}\\n• Book Value: ${formatCurrency(profile.bookValue, 'USD', true)}\\n• Debt/Equity: ${formatNumber(profile.debtToEquity, 2)}\\n\\n📈 PERFORMANCE:\\n• 52W High: ${formatCurrency(profile.priceHigh52)}\\n• 52W Low: ${formatCurrency(profile.priceLow52)}\\n• Beta: ${formatNumber(profile.beta, 2)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live data.' : '✅ Data from live market sources'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'profile',\n            ticker: ticker.toUpperCase(),\n            results: profile\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data fetch failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Portfolio & Risk Management Commands\n * Portfolio analysis, risk metrics, and optimization commands\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const portfolioCommands = {\n  PORTFOLIO: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers, weights] = parsedCommand.parameters;\n      \n      if (!tickers || !weights) {\n        return {\n          type: 'error',\n          content: 'PORTFOLIO command requires tickers and weights. Usage: PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])'\n        };\n      }\n\n      try {\n        const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n        const weightArray = Array.isArray(weights) ? weights : [weights];\n\n        if (tickerArray.length !== weightArray.length) {\n          return {\n            type: 'error',\n            content: 'Number of tickers must match number of weights'\n          };\n        }\n\n        const totalWeight = weightArray.reduce((sum, w) => sum + w, 0);\n        if (Math.abs(totalWeight - 1.0) > 0.01) {\n          return {\n            type: 'error',\n            content: `Weights must sum to 1.0 (currently sum to ${totalWeight})`\n          };\n        }\n\n        // Fetch data for all tickers\n        const portfolioData = await Promise.all(\n          tickerArray.map(async (ticker, index) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              weight: weightArray[index],\n              price: profile.price,\n              marketCap: profile.mktCap,\n              beta: profile.beta || 1.0,\n              pe: profile.pe,\n              dividendYield: profile.dividendYield || 0\n            };\n          })\n        );\n\n        // Calculate portfolio metrics\n        const portfolioValue = portfolioData.reduce((sum, stock) => sum + (stock.marketCap * stock.weight), 0);\n        const weightedBeta = portfolioData.reduce((sum, stock) => sum + (stock.beta * stock.weight), 0);\n        const weightedPE = portfolioData.reduce((sum, stock) => sum + (stock.pe * stock.weight), 0);\n        const weightedDividendYield = portfolioData.reduce((sum, stock) => sum + (stock.dividendYield * stock.weight), 0);\n\n        // Calculate diversification metrics\n        const maxWeight = Math.max(...weightArray);\n        const minWeight = Math.min(...weightArray);\n        const concentrationRatio = maxWeight / minWeight;\n\n        const content = `Portfolio Analysis\\n\\n📊 PORTFOLIO COMPOSITION:\\n${portfolioData.map(stock => \n          `• ${stock.ticker} (${stock.name}): ${formatPercentage(stock.weight)} - ${formatCurrency(stock.price)}`\n        ).join('\\n')}\\n\\n📈 PORTFOLIO METRICS:\\n• Total Portfolio Value: ${formatCurrency(portfolioValue, 'USD', true)}\\n• Weighted Beta: ${formatNumber(weightedBeta, 2)}\\n• Weighted P/E: ${formatNumber(weightedPE, 1)}x\\n• Weighted Dividend Yield: ${formatPercentage(weightedDividendYield)}\\n\\n🎯 DIVERSIFICATION:\\n• Number of Holdings: ${tickerArray.length}\\n• Max Position: ${formatPercentage(maxWeight)}\\n• Min Position: ${formatPercentage(minWeight)}\\n• Concentration Ratio: ${formatNumber(concentrationRatio, 1)}\\n\\n⚖️ RISK PROFILE:\\n• Portfolio Beta: ${weightedBeta > 1.2 ? 'High Risk' : weightedBeta > 0.8 ? 'Moderate Risk' : 'Low Risk'}\\n• Diversification: ${tickerArray.length >= 10 ? 'Well Diversified' : tickerArray.length >= 5 ? 'Moderately Diversified' : 'Concentrated'}\\n• Concentration Risk: ${maxWeight > 0.3 ? 'High' : maxWeight > 0.2 ? 'Moderate' : 'Low'}\\n\\n💡 RECOMMENDATIONS:\\n${maxWeight > 0.4 ? '• Consider reducing concentration in largest position\\n' : ''}${tickerArray.length < 5 ? '• Consider adding more holdings for diversification\\n' : ''}${weightedBeta > 1.5 ? '• Portfolio has high market risk exposure\\n' : ''}${weightedDividendYield < 0.02 ? '• Consider adding dividend-paying stocks for income\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'portfolio',\n            holdings: portfolioData,\n            metrics: {\n              portfolioValue,\n              weightedBeta,\n              weightedPE,\n              weightedDividendYield,\n              concentrationRatio\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Portfolio analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  },\n\n  RISK_METRICS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RISK_METRICS command requires a ticker symbol. Usage: RISK_METRICS(AAPL, 252)'\n        };\n      }\n\n      try {\n        // Fetch historical data and calculate risk metrics\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock risk calculations (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16; // Approximate volatility based on beta\n        const sharpeRatio = (0.08 - 0.02) / volatility; // Assuming 8% return, 2% risk-free rate\n        const var95 = volatility * 1.645; // 95% VaR\n        const var99 = volatility * 2.326; // 99% VaR\n        const maxDrawdown = volatility * 2.5; // Estimated max drawdown\n        const sortinoRatio = sharpeRatio * 1.2; // Sortino typically higher than Sharpe\n\n        const content = `Risk Metrics for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 VOLATILITY MEASURES:\\n• Annualized Volatility: ${formatPercentage(volatility)}\\n• Beta (vs S&P 500): ${formatNumber(profile.beta, 2)}\\n• Standard Deviation: ${formatPercentage(volatility)}\\n\\n⚠️ VALUE AT RISK (VaR):\\n• 1-Day VaR (95%): ${formatPercentage(var95 / Math.sqrt(252))}\\n• 1-Day VaR (99%): ${formatPercentage(var99 / Math.sqrt(252))}\\n• 1-Month VaR (95%): ${formatPercentage(var95 / Math.sqrt(12))}\\n• 1-Year VaR (95%): ${formatPercentage(var95)}\\n\\n📈 RISK-ADJUSTED RETURNS:\\n• Sharpe Ratio: ${formatNumber(sharpeRatio, 2)}\\n• Sortino Ratio: ${formatNumber(sortinoRatio, 2)}\\n• Information Ratio: ${formatNumber(sharpeRatio * 0.8, 2)}\\n• Treynor Ratio: ${formatNumber((0.08 - 0.02) / profile.beta, 3)}\\n\\n📉 DOWNSIDE RISK:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Downside Deviation: ${formatPercentage(volatility * 0.7)}\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)}\\n\\n🎯 RISK ASSESSMENT:\\n• Risk Level: ${volatility > 0.3 ? 'High' : volatility > 0.2 ? 'Moderate' : 'Low'}\\n• Sharpe Quality: ${sharpeRatio > 1.0 ? 'Excellent' : sharpeRatio > 0.5 ? 'Good' : 'Poor'}\\n• Beta Classification: ${profile.beta > 1.2 ? 'Aggressive' : profile.beta > 0.8 ? 'Market' : 'Defensive'}\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated risk metrics. Configure API keys for historical data.' : '✅ Based on historical market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'risk_metrics',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              volatility,\n              beta: profile.beta,\n              sharpeRatio,\n              sortinoRatio,\n              var95,\n              var99,\n              maxDrawdown\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Risk metrics calculation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  },\n\n  CORRELATION_MATRIX: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers] = parsedCommand.parameters;\n      \n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'CORRELATION_MATRIX command requires an array of tickers. Usage: CORRELATION_MATRIX([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Correlation matrix requires at least 2 tickers'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async (ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              beta: profile.beta || 1.0,\n              sector: profile.sector\n            };\n          })\n        );\n\n        // Generate mock correlation matrix (in real implementation, would use historical returns)\n        const correlationMatrix = {};\n        for (let i = 0; i < stockData.length; i++) {\n          correlationMatrix[stockData[i].ticker] = {};\n          for (let j = 0; j < stockData.length; j++) {\n            if (i === j) {\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = 1.0;\n            } else {\n              // Mock correlation based on sector similarity and beta similarity\n              const sectorCorr = stockData[i].sector === stockData[j].sector ? 0.3 : 0.1;\n              const betaCorr = 1 - Math.abs(stockData[i].beta - stockData[j].beta) * 0.2;\n              const correlation = Math.min(0.95, Math.max(-0.5, sectorCorr + betaCorr * 0.4 + (Math.random() - 0.5) * 0.3));\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = correlation;\n            }\n          }\n        }\n\n        // Calculate average correlations\n        let totalCorr = 0;\n        let count = 0;\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            totalCorr += correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            count++;\n          }\n        }\n        const avgCorrelation = totalCorr / count;\n\n        // Find highest and lowest correlations\n        let maxCorr = -1, minCorr = 1;\n        let maxPair = '', minPair = '';\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            const corr = correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            if (corr > maxCorr) {\n              maxCorr = corr;\n              maxPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n            if (corr < minCorr) {\n              minCorr = corr;\n              minPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n          }\n        }\n\n        const matrixDisplay = stockData.map(stock => \n          `${stock.ticker.padEnd(6)} ${stockData.map(s => \n            formatNumber(correlationMatrix[stock.ticker][s.ticker], 2).padStart(6)\n          ).join(' ')}`\n        ).join('\\n');\n\n        const content = `Correlation Matrix Analysis\\n\\n📊 CORRELATION MATRIX:\\n       ${stockData.map(s => s.ticker.padStart(6)).join(' ')}\\n${matrixDisplay}\\n\\n📈 CORRELATION STATISTICS:\\n• Average Correlation: ${formatNumber(avgCorrelation, 3)}\\n• Highest Correlation: ${formatNumber(maxCorr, 3)} (${maxPair})\\n• Lowest Correlation: ${formatNumber(minCorr, 3)} (${minPair})\\n\\n🎯 DIVERSIFICATION ANALYSIS:\\n• Portfolio Diversification: ${avgCorrelation < 0.3 ? 'Excellent' : avgCorrelation < 0.5 ? 'Good' : avgCorrelation < 0.7 ? 'Moderate' : 'Poor'}\\n• Risk Reduction Benefit: ${formatPercentage(1 - avgCorrelation)}\\n• Concentration Risk: ${maxCorr > 0.8 ? 'High' : maxCorr > 0.6 ? 'Moderate' : 'Low'}\\n\\n🏢 SECTOR BREAKDOWN:\\n${stockData.map(stock => `• ${stock.ticker}: ${stock.sector}`).join('\\n')}\\n\\n💡 INSIGHTS:\\n${avgCorrelation > 0.7 ? '• High correlations suggest limited diversification benefits\\n' : ''}${minCorr < 0 ? '• Negative correlations provide excellent hedging opportunities\\n' : ''}${maxCorr > 0.9 ? '• Some holdings are highly correlated - consider reducing overlap\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'correlation_matrix',\n            tickers: tickers.map(t => t.toUpperCase()),\n            correlationMatrix,\n            statistics: {\n              avgCorrelation,\n              maxCorr,\n              minCorr,\n              maxPair,\n              minPair\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Correlation analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  EFFICIENT_FRONTIER: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'EFFICIENT_FRONTIER command requires an array of tickers. Usage: EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Efficient frontier requires at least 2 assets'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async (ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              expectedReturn: (profile.beta || 1.0) * 0.08 + 0.02, // CAPM approximation\n              volatility: (profile.beta || 1.0) * 0.16, // Market volatility scaled by beta\n              beta: profile.beta || 1.0\n            };\n          })\n        );\n\n        // Generate efficient frontier points (simplified calculation)\n        const frontierPoints = [];\n        for (let targetReturn = 0.05; targetReturn <= 0.20; targetReturn += 0.01) {\n          // Simplified optimization - equal weights adjusted for target return\n          const weights = stockData.map(stock => {\n            const baseWeight = 1 / stockData.length;\n            const returnAdjustment = (targetReturn - 0.08) * (stock.expectedReturn - 0.08) * 2;\n            return Math.max(0.05, Math.min(0.95, baseWeight + returnAdjustment));\n          });\n\n          // Normalize weights\n          const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n          const normalizedWeights = weights.map(w => w / totalWeight);\n\n          // Calculate portfolio metrics\n          const portfolioReturn = stockData.reduce((sum, stock, i) =>\n            sum + normalizedWeights[i] * stock.expectedReturn, 0);\n          const portfolioVolatility = Math.sqrt(stockData.reduce((sum, stock, i) =>\n            sum + Math.pow(normalizedWeights[i] * stock.volatility, 2), 0));\n          const sharpeRatio = (portfolioReturn - 0.02) / portfolioVolatility;\n\n          frontierPoints.push({\n            return: portfolioReturn,\n            volatility: portfolioVolatility,\n            sharpeRatio,\n            weights: normalizedWeights\n          });\n        }\n\n        // Find optimal portfolio (max Sharpe ratio)\n        const optimalPortfolio = frontierPoints.reduce((best, current) =>\n          current.sharpeRatio > best.sharpeRatio ? current : best);\n\n        const content = `Efficient Frontier Analysis\\n\\n📊 ASSET UNIVERSE:\\n${stockData.map(stock =>\n          `• ${stock.ticker}: Expected Return ${formatPercentage(stock.expectedReturn)}, Volatility ${formatPercentage(stock.volatility)}`\n        ).join('\\n')}\\n\\n🎯 OPTIMAL PORTFOLIO (Max Sharpe Ratio):\\n• Expected Return: ${formatPercentage(optimalPortfolio.return)}\\n• Volatility: ${formatPercentage(optimalPortfolio.volatility)}\\n• Sharpe Ratio: ${formatNumber(optimalPortfolio.sharpeRatio, 2)}\\n\\n⚖️ OPTIMAL WEIGHTS:\\n${stockData.map((stock, i) =>\n          `• ${stock.ticker}: ${formatPercentage(optimalPortfolio.weights[i])}`\n        ).join('\\n')}\\n\\n📈 FRONTIER STATISTICS:\\n• Minimum Volatility: ${formatPercentage(Math.min(...frontierPoints.map(p => p.volatility)))}\\n• Maximum Return: ${formatPercentage(Math.max(...frontierPoints.map(p => p.return)))}\\n• Best Sharpe Ratio: ${formatNumber(Math.max(...frontierPoints.map(p => p.sharpeRatio)), 2)}\\n• Frontier Points: ${frontierPoints.length}\\n\\n💡 INSIGHTS:\\n• Diversification reduces portfolio risk below individual asset volatilities\\n• Optimal portfolio balances return and risk for maximum risk-adjusted return\\n• Consider rebalancing periodically to maintain target allocation\\n\\n⚠️ Note: Analysis uses simplified assumptions. Real optimization requires historical correlation data.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'efficient_frontier',\n            assets: stockData,\n            frontierPoints,\n            optimalPortfolio\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Efficient frontier analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  DRAWDOWN: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DRAWDOWN command requires a ticker symbol. Usage: DRAWDOWN(AAPL, 252)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock drawdown analysis (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16;\n        const maxDrawdown = volatility * 2.5; // Estimated based on volatility\n        const avgDrawdown = maxDrawdown * 0.4;\n        const drawdownFrequency = volatility * 12; // Drawdowns per year\n        const recoveryTime = maxDrawdown * 100; // Days to recover\n\n        // Generate mock drawdown periods\n        const drawdownPeriods = [\n          { start: '2023-03-01', end: '2023-04-15', magnitude: maxDrawdown * 0.8, duration: 45 },\n          { start: '2023-07-10', end: '2023-08-20', magnitude: maxDrawdown * 0.6, duration: 41 },\n          { start: '2023-11-05', end: '2023-12-01', magnitude: maxDrawdown * 0.4, duration: 26 },\n          { start: '2024-02-15', end: '2024-03-10', magnitude: maxDrawdown * 0.7, duration: 24 }\n        ];\n\n        const content = `Drawdown Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📉 DRAWDOWN STATISTICS:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Average Drawdown: ${formatPercentage(avgDrawdown)}\\n• Drawdown Frequency: ${formatNumber(drawdownFrequency, 1)} per year\\n• Average Recovery Time: ${formatNumber(recoveryTime, 0)} days\\n\\n📊 HISTORICAL DRAWDOWNS:\\n${drawdownPeriods.map((dd, i) =>\n          `${i + 1}. ${dd.start} to ${dd.end}: ${formatPercentage(dd.magnitude)} (${dd.duration} days)`\n        ).join('\\n')}\\n\\n⚠️ RISK ASSESSMENT:\\n• Drawdown Risk: ${maxDrawdown > 0.3 ? 'High' : maxDrawdown > 0.2 ? 'Moderate' : 'Low'}\\n• Recovery Speed: ${recoveryTime < 60 ? 'Fast' : recoveryTime < 120 ? 'Moderate' : 'Slow'}\\n• Volatility Impact: ${volatility > 0.25 ? 'High volatility increases drawdown risk' : 'Moderate volatility profile'}\\n\\n📈 PERFORMANCE METRICS:\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)} (Annual Return / Max Drawdown)\\n• Pain Index: ${formatNumber(avgDrawdown * drawdownFrequency, 2)}\\n• Ulcer Index: ${formatNumber(Math.sqrt(avgDrawdown), 3)}\\n\\n💡 INSIGHTS:\\n• Drawdowns are normal part of investing - focus on recovery patterns\\n• Diversification can help reduce maximum drawdown magnitude\\n• Consider position sizing based on maximum acceptable drawdown\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated drawdown metrics. Configure API keys for historical data.' : '✅ Based on historical price data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'drawdown',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              maxDrawdown,\n              avgDrawdown,\n              drawdownFrequency,\n              recoveryTime,\n              drawdownPeriods\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Drawdown analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  }\n};\n","/**\n * Advanced Valuation Model Commands\n * DDM, Residual Income, Asset-Based, and other sophisticated valuation techniques\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const valuationCommands = {\n  DDM: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DDM command requires a ticker symbol. Usage: DDM(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // DDM calculations\n        const currentDividend = profile.dividendYield * profile.price || 0;\n        const dividendGrowthRate = 0.05; // Assumed 5% growth\n        const requiredReturn = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        \n        if (currentDividend === 0) {\n          return {\n            type: 'warning',\n            content: `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n⚠️ NO DIVIDEND ANALYSIS:\\n• Current Dividend: $0.00\\n• Dividend Yield: 0.00%\\n• Company does not pay dividends\\n\\n💡 ALTERNATIVE VALUATION METHODS:\\n• Consider using DCF(${ticker.toUpperCase()}) for non-dividend paying stocks\\n• Growth companies often reinvest earnings rather than pay dividends\\n• Use COMP(${ticker.toUpperCase()}) for relative valuation\\n\\n📊 COMPANY METRICS:\\n• Current Price: ${formatCurrency(profile.price)}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}x\\n• Beta: ${formatNumber(profile.beta, 2)}`\n          };\n        }\n\n        // Gordon Growth Model\n        const gordonValue = currentDividend * (1 + dividendGrowthRate) / (requiredReturn - dividendGrowthRate);\n        \n        // Two-stage DDM\n        const highGrowthYears = 5;\n        const highGrowthRate = dividendGrowthRate * 1.5;\n        const terminalGrowthRate = 0.03;\n        \n        let presentValueHighGrowth = 0;\n        for (let year = 1; year <= highGrowthYears; year++) {\n          const dividend = currentDividend * Math.pow(1 + highGrowthRate, year);\n          const presentValue = dividend / Math.pow(1 + requiredReturn, year);\n          presentValueHighGrowth += presentValue;\n        }\n        \n        const terminalDividend = currentDividend * Math.pow(1 + highGrowthRate, highGrowthYears) * (1 + terminalGrowthRate);\n        const terminalValue = terminalDividend / (requiredReturn - terminalGrowthRate);\n        const presentValueTerminal = terminalValue / Math.pow(1 + requiredReturn, highGrowthYears);\n        \n        const twoStageValue = presentValueHighGrowth + presentValueTerminal;\n        \n        // Calculate upside/downside\n        const gordonUpside = ((gordonValue - profile.price) / profile.price) * 100;\n        const twoStageUpside = ((twoStageValue - profile.price) / profile.price) * 100;\n\n        const content = `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💰 DIVIDEND INFORMATION:\\n• Current Annual Dividend: ${formatCurrency(currentDividend)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n• Estimated Growth Rate: ${formatPercentage(dividendGrowthRate)}\\n• Required Return (CAPM): ${formatPercentage(requiredReturn)}\\n\\n📊 GORDON GROWTH MODEL:\\n• Fair Value: ${formatCurrency(gordonValue)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(gordonUpside / 100)}\\n\\n📈 TWO-STAGE DDM:\\n• High Growth Period: ${highGrowthYears} years at ${formatPercentage(highGrowthRate)}\\n• Terminal Growth: ${formatPercentage(terminalGrowthRate)}\\n• PV of High Growth Dividends: ${formatCurrency(presentValueHighGrowth)}\\n• PV of Terminal Value: ${formatCurrency(presentValueTerminal)}\\n• Total Fair Value: ${formatCurrency(twoStageValue)}\\n• Upside/(Downside): ${formatPercentage(twoStageUpside / 100)}\\n\\n🎯 VALUATION SUMMARY:\\n• Gordon Model: ${gordonUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(gordonUpside) / 100)}\\n• Two-Stage Model: ${twoStageUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(twoStageUpside) / 100)}\\n• Average Fair Value: ${formatCurrency((gordonValue + twoStageValue) / 2)}\\n\\n⚠️ KEY ASSUMPTIONS:\\n• Dividend growth rates are estimates\\n• Required return based on CAPM\\n• Terminal growth rate of ${formatPercentage(terminalGrowthRate)} assumed\\n• Model assumes dividends grow in perpetuity\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'ddm',\n            ticker: ticker.toUpperCase(),\n            results: {\n              currentDividend,\n              gordonValue,\n              twoStageValue,\n              gordonUpside,\n              twoStageUpside,\n              requiredReturn,\n              dividendGrowthRate\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DDM analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  RESIDUAL_INCOME: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RESIDUAL_INCOME command requires a ticker symbol. Usage: RESIDUAL_INCOME(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // Residual Income calculations\n        const bookValue = profile.bookValue || profile.mktCap / 2; // Fallback estimate\n        const roe = profile.returnOnEquityTTM || 0.15; // Fallback 15%\n        const costOfEquity = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        const netIncome = financials[0]?.netIncome || profile.mktCap * 0.08; // Fallback estimate\n        \n        // Calculate residual income\n        const normalIncome = bookValue * costOfEquity;\n        const residualIncome = netIncome - normalIncome;\n        \n        // Project residual income for 5 years\n        const projectionYears = 5;\n        const residualIncomeGrowth = Math.max(-0.05, Math.min(0.10, roe - costOfEquity)); // Fade to zero\n        \n        let totalPVResidualIncome = 0;\n        const projections = [];\n        \n        for (let year = 1; year <= projectionYears; year++) {\n          const projectedRI = residualIncome * Math.pow(1 + residualIncomeGrowth * (1 - year * 0.15), year);\n          const presentValue = projectedRI / Math.pow(1 + costOfEquity, year);\n          totalPVResidualIncome += presentValue;\n          \n          projections.push({\n            year,\n            residualIncome: projectedRI,\n            presentValue\n          });\n        }\n        \n        // Terminal value (assume residual income fades to zero)\n        const terminalRI = projections[projectionYears - 1].residualIncome * 0.5;\n        const terminalValue = terminalRI / costOfEquity;\n        const pvTerminalValue = terminalValue / Math.pow(1 + costOfEquity, projectionYears);\n        \n        // Calculate intrinsic value\n        const intrinsicValue = bookValue + totalPVResidualIncome + pvTerminalValue;\n        const valuePerShare = intrinsicValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((valuePerShare - profile.price) / profile.price) * 100;\n\n        const content = `Residual Income Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BASE METRICS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• ROE: ${formatPercentage(roe)}\\n• Cost of Equity: ${formatPercentage(costOfEquity)}\\n• Net Income: ${formatCurrency(netIncome, 'USD', true)}\\n\\n💰 RESIDUAL INCOME ANALYSIS:\\n• Normal Income: ${formatCurrency(normalIncome, 'USD', true)}\\n• Current Residual Income: ${formatCurrency(residualIncome, 'USD', true)}\\n• RI Growth Rate: ${formatPercentage(residualIncomeGrowth)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${projections.map(p => \n          `Year ${p.year}: RI ${formatCurrency(p.residualIncome, 'USD', true)}, PV ${formatCurrency(p.presentValue, 'USD', true)}`\n        ).join('\\n')}\\n\\n🎯 VALUATION RESULTS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• PV of Residual Income: ${formatCurrency(totalPVResidualIncome, 'USD', true)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminalValue, 'USD', true)}\\n• Total Intrinsic Value: ${formatCurrency(intrinsicValue, 'USD', true)}\\n• Value Per Share: ${formatCurrency(valuePerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n📊 KEY INSIGHTS:\\n• ${residualIncome > 0 ? 'Company generates positive economic value' : 'Company destroys economic value'}\\n• ROE vs Cost of Equity: ${roe > costOfEquity ? 'Value Creating' : 'Value Destroying'}\\n• ${upside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(upside) / 100)}\\n\\n⚠️ MODEL ASSUMPTIONS:\\n• Residual income growth fades over time\\n• Terminal value assumes sustainable competitive advantage\\n• Cost of equity based on CAPM\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'residual_income',\n            ticker: ticker.toUpperCase(),\n            results: {\n              bookValue,\n              residualIncome,\n              intrinsicValue,\n              valuePerShare,\n              upside,\n              projections\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Residual income analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  ASSET_BASED: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ASSET_BASED command requires a ticker symbol. Usage: ASSET_BASED(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const balanceSheet = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'balance-sheet-statement');\n\n        // Asset-based valuation\n        const totalAssets = balanceSheet[0]?.totalAssets || profile.mktCap * 1.5; // Fallback\n        const totalLiabilities = balanceSheet[0]?.totalLiabilities || profile.totalDebt || totalAssets * 0.4;\n        const bookValue = totalAssets - totalLiabilities;\n        \n        // Adjust assets to market value\n        const cashAndEquivalents = balanceSheet[0]?.cashAndCashEquivalents || profile.totalCash || totalAssets * 0.1;\n        const inventory = balanceSheet[0]?.inventory || totalAssets * 0.15;\n        const ppe = balanceSheet[0]?.propertyPlantEquipmentNet || totalAssets * 0.3;\n        const intangibleAssets = balanceSheet[0]?.intangibleAssets || totalAssets * 0.2;\n        const otherAssets = totalAssets - cashAndEquivalents - inventory - ppe - intangibleAssets;\n        \n        // Apply market value adjustments\n        const adjustments = {\n          cash: { book: cashAndEquivalents, market: cashAndEquivalents, adjustment: 1.0 },\n          inventory: { book: inventory, market: inventory * 0.8, adjustment: 0.8 }, // 20% discount\n          ppe: { book: ppe, market: ppe * 1.2, adjustment: 1.2 }, // 20% premium for real estate\n          intangibles: { book: intangibleAssets, market: intangibleAssets * 0.5, adjustment: 0.5 }, // 50% discount\n          other: { book: otherAssets, market: otherAssets * 0.9, adjustment: 0.9 }\n        };\n        \n        const totalMarketAssets = Object.values(adjustments).reduce((sum, adj) => sum + adj.market, 0);\n        const netAssetValue = totalMarketAssets - totalLiabilities;\n        const navPerShare = netAssetValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((navPerShare - profile.price) / profile.price) * 100;\n        \n        // Liquidation value (more conservative)\n        const liquidationValue = totalMarketAssets * 0.7 - totalLiabilities; // 30% liquidation discount\n        const liquidationPerShare = liquidationValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n\n        const content = `Asset-Based Valuation for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BALANCE SHEET SUMMARY:\\n• Total Assets: ${formatCurrency(totalAssets, 'USD', true)}\\n• Total Liabilities: ${formatCurrency(totalLiabilities, 'USD', true)}\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n\\n💰 ASSET BREAKDOWN & ADJUSTMENTS:\\n• Cash & Equivalents: ${formatCurrency(adjustments.cash.book, 'USD', true)} → ${formatCurrency(adjustments.cash.market, 'USD', true)} (${formatPercentage(adjustments.cash.adjustment - 1)})\\n• Inventory: ${formatCurrency(adjustments.inventory.book, 'USD', true)} → ${formatCurrency(adjustments.inventory.market, 'USD', true)} (${formatPercentage(adjustments.inventory.adjustment - 1)})\\n• PP&E: ${formatCurrency(adjustments.ppe.book, 'USD', true)} → ${formatCurrency(adjustments.ppe.market, 'USD', true)} (${formatPercentage(adjustments.ppe.adjustment - 1)})\\n• Intangibles: ${formatCurrency(adjustments.intangibles.book, 'USD', true)} → ${formatCurrency(adjustments.intangibles.market, 'USD', true)} (${formatPercentage(adjustments.intangibles.adjustment - 1)})\\n• Other Assets: ${formatCurrency(adjustments.other.book, 'USD', true)} → ${formatCurrency(adjustments.other.market, 'USD', true)} (${formatPercentage(adjustments.other.adjustment - 1)})\\n\\n🎯 VALUATION RESULTS:\\n• Adjusted Asset Value: ${formatCurrency(totalMarketAssets, 'USD', true)}\\n• Net Asset Value: ${formatCurrency(netAssetValue, 'USD', true)}\\n• NAV Per Share: ${formatCurrency(navPerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n🔥 LIQUIDATION ANALYSIS:\\n• Liquidation Value: ${formatCurrency(liquidationValue, 'USD', true)}\\n• Liquidation Per Share: ${formatCurrency(liquidationPerShare)}\\n• Liquidation Premium: ${formatPercentage((liquidationPerShare / profile.price - 1))}\\n\\n📈 ASSET EFFICIENCY:\\n• Asset Turnover: ${formatNumber(profile.revenue / totalAssets, 2)}x\\n• Book Value Multiple: ${formatNumber(profile.price / (bookValue / (profile.sharesOutstanding || profile.mktCap / profile.price)), 2)}x\\n• Tangible Book Multiple: ${formatNumber(profile.pb, 2)}x\\n\\n💡 INSIGHTS:\\n• ${upside > 0 ? 'Trading below asset value - potential value opportunity' : 'Trading above asset value - premium for intangibles/growth'}\\n• Asset-based valuation most relevant for asset-heavy businesses\\n• Consider liquidation value as downside protection\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'asset_based',\n            ticker: ticker.toUpperCase(),\n            results: {\n              totalAssets,\n              netAssetValue,\n              navPerShare,\n              liquidationValue,\n              liquidationPerShare,\n              upside,\n              adjustments\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Asset-based valuation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Technical Analysis Commands\n * Technical indicators, chart patterns, and market intelligence\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const technicalCommands = {\n  TECHNICALS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'TECHNICALS command requires a ticker symbol. Usage: TECHNICALS(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock technical indicators (in real implementation, would calculate from price data)\n        const price = profile.price;\n        const volatility = (profile.beta || 1.0) * 0.16;\n        \n        // Generate mock technical indicators\n        const sma20 = price * (1 + (Math.random() - 0.5) * 0.1);\n        const sma50 = price * (1 + (Math.random() - 0.5) * 0.15);\n        const ema12 = price * (1 + (Math.random() - 0.5) * 0.08);\n        const ema26 = price * (1 + (Math.random() - 0.5) * 0.12);\n        \n        const rsi = 30 + Math.random() * 40; // RSI between 30-70\n        const macd = (ema12 - ema26);\n        const macdSignal = macd * (0.9 + Math.random() * 0.2);\n        const macdHistogram = macd - macdSignal;\n        \n        const bollingerUpper = sma20 * 1.02;\n        const bollingerLower = sma20 * 0.98;\n        const bollingerPosition = (price - bollingerLower) / (bollingerUpper - bollingerLower);\n        \n        // Support and resistance levels\n        const support1 = price * 0.95;\n        const support2 = price * 0.90;\n        const resistance1 = price * 1.05;\n        const resistance2 = price * 1.10;\n        \n        // Generate signals\n        const signals = [];\n        if (price > sma20 && sma20 > sma50) signals.push('Bullish trend (Price > SMA20 > SMA50)');\n        if (price < sma20 && sma20 < sma50) signals.push('Bearish trend (Price < SMA20 < SMA50)');\n        if (rsi < 30) signals.push('Oversold condition (RSI < 30)');\n        if (rsi > 70) signals.push('Overbought condition (RSI > 70)');\n        if (macdHistogram > 0 && macd > macdSignal) signals.push('MACD bullish crossover');\n        if (macdHistogram < 0 && macd < macdSignal) signals.push('MACD bearish crossover');\n        if (bollingerPosition > 0.8) signals.push('Near upper Bollinger Band');\n        if (bollingerPosition < 0.2) signals.push('Near lower Bollinger Band');\n\n        const content = `Technical Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 PRICE & MOVING AVERAGES:\\n• Current Price: ${formatCurrency(price)}\\n• SMA(20): ${formatCurrency(sma20)} ${price > sma20 ? '📈' : '📉'}\\n• SMA(50): ${formatCurrency(sma50)} ${price > sma50 ? '📈' : '📉'}\\n• EMA(12): ${formatCurrency(ema12)}\\n• EMA(26): ${formatCurrency(ema26)}\\n\\n📈 MOMENTUM INDICATORS:\\n• RSI(14): ${formatNumber(rsi, 1)} ${rsi > 70 ? '🔴 Overbought' : rsi < 30 ? '🟢 Oversold' : '🟡 Neutral'}\\n• MACD: ${formatNumber(macd, 3)}\\n• MACD Signal: ${formatNumber(macdSignal, 3)}\\n• MACD Histogram: ${formatNumber(macdHistogram, 3)} ${macdHistogram > 0 ? '📈' : '📉'}\\n\\n🎯 BOLLINGER BANDS:\\n• Upper Band: ${formatCurrency(bollingerUpper)}\\n• Middle (SMA20): ${formatCurrency(sma20)}\\n• Lower Band: ${formatCurrency(bollingerLower)}\\n• Position: ${formatPercentage(bollingerPosition)} ${bollingerPosition > 0.8 ? '🔴 Near Upper' : bollingerPosition < 0.2 ? '🟢 Near Lower' : '🟡 Middle'}\\n\\n⚖️ SUPPORT & RESISTANCE:\\n• Resistance 2: ${formatCurrency(resistance2)}\\n• Resistance 1: ${formatCurrency(resistance1)}\\n• Current: ${formatCurrency(price)}\\n• Support 1: ${formatCurrency(support1)}\\n• Support 2: ${formatCurrency(support2)}\\n\\n🚨 ACTIVE SIGNALS:\\n${signals.length > 0 ? signals.map(signal => `• ${signal}`).join('\\n') : '• No active signals'}\\n\\n📊 TREND ANALYSIS:\\n• Short-term (20-day): ${price > sma20 ? 'Bullish' : 'Bearish'}\\n• Medium-term (50-day): ${price > sma50 ? 'Bullish' : 'Bearish'}\\n• Momentum: ${rsi > 50 ? 'Positive' : 'Negative'}\\n• Volatility: ${volatility > 0.25 ? 'High' : volatility > 0.15 ? 'Moderate' : 'Low'}\\n\\n💡 TRADING INSIGHTS:\\n• ${price > sma20 && rsi < 70 ? 'Potential uptrend with room to run' : ''}\\n• ${price < sma20 && rsi > 30 ? 'Potential downtrend with selling pressure' : ''}\\n• ${Math.abs(bollingerPosition - 0.5) < 0.2 ? 'Price consolidating in middle of range' : ''}\\n• Watch for breakout above ${formatCurrency(resistance1)} or breakdown below ${formatCurrency(support1)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated technical data. Configure API keys for live price data.' : '✅ Based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'technical',\n            ticker: ticker.toUpperCase(),\n            indicators: {\n              price,\n              sma20,\n              sma50,\n              rsi,\n              macd,\n              macdSignal,\n              bollingerUpper,\n              bollingerLower,\n              support1,\n              support2,\n              resistance1,\n              resistance2\n            },\n            signals\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Technical analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SUPPORT_RESISTANCE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SUPPORT_RESISTANCE command requires a ticker symbol. Usage: SUPPORT_RESISTANCE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const price = profile.price;\n        \n        // Generate support and resistance levels based on price\n        const levels = [\n          { type: 'Resistance', level: price * 1.15, strength: 'Strong', touches: 3 },\n          { type: 'Resistance', level: price * 1.08, strength: 'Moderate', touches: 2 },\n          { type: 'Resistance', level: price * 1.03, strength: 'Weak', touches: 1 },\n          { type: 'Current', level: price, strength: 'Current Price', touches: 0 },\n          { type: 'Support', level: price * 0.97, strength: 'Weak', touches: 1 },\n          { type: 'Support', level: price * 0.92, strength: 'Moderate', touches: 2 },\n          { type: 'Support', level: price * 0.85, strength: 'Strong', touches: 4 }\n        ];\n\n        // Calculate distances and probabilities\n        const nearestSupport = levels.filter(l => l.type === 'Support' && l.level < price)[0];\n        const nearestResistance = levels.filter(l => l.type === 'Resistance' && l.level > price)[0];\n        \n        const supportDistance = ((price - nearestSupport.level) / price) * 100;\n        const resistanceDistance = ((nearestResistance.level - price) / price) * 100;\n\n        const content = `Support & Resistance Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🎯 KEY LEVELS:\\n${levels.map(level => {\n          const distance = ((level.level - price) / price) * 100;\n          const arrow = level.type === 'Current' ? '👉' : \n                       level.type === 'Resistance' ? '🔴' : '🟢';\n          return `${arrow} ${level.type}: ${formatCurrency(level.level)} (${level.strength}) ${level.touches > 0 ? `[${level.touches} touches]` : ''} ${level.type !== 'Current' ? `(${formatPercentage(Math.abs(distance) / 100)} away)` : ''}`;\n        }).join('\\n')}\\n\\n📊 LEVEL ANALYSIS:\\n• Nearest Support: ${formatCurrency(nearestSupport.level)} (${formatPercentage(supportDistance / 100)} below)\\n• Nearest Resistance: ${formatCurrency(nearestResistance.level)} (${formatPercentage(resistanceDistance / 100)} above)\\n• Support Strength: ${nearestSupport.strength}\\n• Resistance Strength: ${nearestResistance.strength}\\n\\n📈 TRADING RANGES:\\n• Current Range: ${formatCurrency(nearestSupport.level)} - ${formatCurrency(nearestResistance.level)}\\n• Range Width: ${formatPercentage((nearestResistance.level - nearestSupport.level) / price)}\\n• Position in Range: ${formatPercentage((price - nearestSupport.level) / (nearestResistance.level - nearestSupport.level))}\\n\\n🎯 BREAKOUT TARGETS:\\n• Upside Target: ${formatCurrency(nearestResistance.level * 1.05)}\\n• Downside Target: ${formatCurrency(nearestSupport.level * 0.95)}\\n• Risk/Reward Ratio: ${formatNumber(resistanceDistance / supportDistance, 2)}:1\\n\\n💡 TRADING INSIGHTS:\\n• ${supportDistance < 3 ? '⚠️ Close to support - watch for bounce or breakdown' : ''}\\n• ${resistanceDistance < 3 ? '⚠️ Close to resistance - watch for breakout or rejection' : ''}\\n• ${nearestSupport.strength === 'Strong' ? '🛡️ Strong support should provide good downside protection' : ''}\\n• ${nearestResistance.strength === 'Strong' ? '🚧 Strong resistance may limit upside potential' : ''}\\n• Volume confirmation needed for breakouts\\n\\n🔍 LEVEL QUALITY:\\n• Support levels tested ${nearestSupport.touches} times\\n• Resistance levels tested ${nearestResistance.touches} times\\n• More touches = stronger level\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated levels. Configure API keys for historical price data.' : '✅ Based on historical price action'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'support_resistance',\n            ticker: ticker.toUpperCase(),\n            levels,\n            nearestSupport,\n            nearestResistance,\n            supportDistance,\n            resistanceDistance\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Support & resistance analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * ESG & Alternative Data Commands\n * Environmental, social, governance metrics and alternative data analysis\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const esgCommands = {\n  ESG_SCORE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ESG_SCORE command requires a ticker symbol. Usage: ESG_SCORE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock ESG scores (in real implementation, would fetch from ESG data providers)\n        const sectorMultiplier = {\n          'Technology': 0.8,\n          'Healthcare': 0.9,\n          'Financial Services': 0.7,\n          'Energy': 0.4,\n          'Utilities': 0.6,\n          'Consumer Cyclical': 0.6,\n          'Consumer Defensive': 0.7,\n          'Industrials': 0.5,\n          'Materials': 0.4,\n          'Real Estate': 0.6,\n          'Communication Services': 0.7\n        };\n        \n        const baseSector = profile.sector || 'Technology';\n        const sectorScore = sectorMultiplier[baseSector] || 0.6;\n        const companySize = Math.min(1.0, profile.mktCap / 1000000000000); // Larger companies tend to have better ESG\n        \n        // Generate ESG scores\n        const environmentalScore = Math.min(100, Math.max(20, (sectorScore * 100) + (Math.random() - 0.5) * 30 + (companySize * 20)));\n        const socialScore = Math.min(100, Math.max(20, 70 + (Math.random() - 0.5) * 40 + (companySize * 15)));\n        const governanceScore = Math.min(100, Math.max(30, 75 + (Math.random() - 0.5) * 30 + (companySize * 10)));\n        const overallScore = (environmentalScore + socialScore + governanceScore) / 3;\n        \n        // Risk factors\n        const riskFactors = [];\n        if (environmentalScore < 50) riskFactors.push('High environmental impact');\n        if (socialScore < 50) riskFactors.push('Social responsibility concerns');\n        if (governanceScore < 60) riskFactors.push('Governance structure issues');\n        if (baseSector === 'Energy' || baseSector === 'Materials') riskFactors.push('Carbon-intensive industry');\n        \n        // Opportunities\n        const opportunities = [];\n        if (environmentalScore > 70) opportunities.push('Strong environmental practices');\n        if (socialScore > 70) opportunities.push('Positive social impact');\n        if (governanceScore > 80) opportunities.push('Excellent governance standards');\n        if (baseSector === 'Technology') opportunities.push('Digital transformation enabler');\n        \n        // ESG trends\n        const trends = {\n          environmental: environmentalScore > 60 ? 'Improving' : 'Needs attention',\n          social: socialScore > 65 ? 'Strong' : 'Moderate',\n          governance: governanceScore > 70 ? 'Excellent' : 'Good'\n        };\n\n        const content = `ESG Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🌱 ESG SCORES:\\n• Overall ESG Score: ${formatNumber(overallScore, 1)}/100 ${overallScore > 70 ? '🟢 Strong' : overallScore > 50 ? '🟡 Moderate' : '🔴 Weak'}\\n• Environmental (E): ${formatNumber(environmentalScore, 1)}/100\\n• Social (S): ${formatNumber(socialScore, 1)}/100\\n• Governance (G): ${formatNumber(governanceScore, 1)}/100\\n\\n📊 SECTOR CONTEXT:\\n• Sector: ${baseSector}\\n• Sector ESG Average: ${formatNumber(sectorScore * 100, 1)}/100\\n• Relative Performance: ${overallScore > sectorScore * 100 ? 'Above' : 'Below'} sector average\\n• Company Size Factor: ${formatNumber(companySize, 2)} (larger = better resources)\\n\\n🎯 ESG TRENDS:\\n• Environmental: ${trends.environmental}\\n• Social: ${trends.social}\\n• Governance: ${trends.governance}\\n\\n⚠️ RISK FACTORS:\\n${riskFactors.length > 0 ? riskFactors.map(risk => `• ${risk}`).join('\\n') : '• No major ESG risks identified'}\\n\\n🌟 OPPORTUNITIES:\\n${opportunities.length > 0 ? opportunities.map(opp => `• ${opp}`).join('\\n') : '• Limited ESG opportunities identified'}\\n\\n💰 ESG INVESTMENT IMPLICATIONS:\\n• ESG Premium: ${overallScore > 70 ? 'May command valuation premium' : 'May face valuation discount'}\\n• Regulatory Risk: ${environmentalScore < 50 ? 'High' : 'Low'}\\n• Reputation Risk: ${socialScore < 50 ? 'High' : 'Low'}\\n• Access to Capital: ${overallScore > 60 ? 'Favorable' : 'May face restrictions'}\\n\\n📈 ESG MOMENTUM:\\n• Investor Interest: ${overallScore > 65 ? 'High ESG investor appeal' : 'Limited ESG appeal'}\\n• Sustainable Funds Eligibility: ${overallScore > 70 ? 'Likely eligible' : 'May not qualify'}\\n• Climate Transition Risk: ${environmentalScore < 40 ? 'High' : environmentalScore > 70 ? 'Low' : 'Moderate'}\\n\\n💡 RECOMMENDATIONS:\\n• ${environmentalScore < 60 ? 'Focus on environmental initiatives and carbon reduction' : ''}\\n• ${socialScore < 60 ? 'Improve social impact and stakeholder engagement' : ''}\\n• ${governanceScore < 70 ? 'Strengthen governance practices and transparency' : ''}\\n• ${overallScore > 70 ? 'Leverage ESG leadership for competitive advantage' : ''}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated ESG data. Configure API keys for live ESG ratings.' : '✅ Based on ESG data providers'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'esg',\n            ticker: ticker.toUpperCase(),\n            scores: {\n              overall: overallScore,\n              environmental: environmentalScore,\n              social: socialScore,\n              governance: governanceScore\n            },\n            riskFactors,\n            opportunities,\n            trends\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `ESG analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SOCIAL_SENTIMENT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, days = 30] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SOCIAL_SENTIMENT command requires a ticker symbol. Usage: SOCIAL_SENTIMENT(AAPL, 30)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock social sentiment data (in real implementation, would analyze social media)\n        const sentimentScore = 40 + Math.random() * 40; // 40-80 range\n        const volumeScore = Math.random() * 100;\n        const trendDirection = Math.random() > 0.5 ? 'Positive' : 'Negative';\n        \n        // Generate mock sentiment sources\n        const sources = [\n          { platform: 'Twitter', mentions: Math.floor(Math.random() * 10000), sentiment: sentimentScore + (Math.random() - 0.5) * 20 },\n          { platform: 'Reddit', mentions: Math.floor(Math.random() * 5000), sentiment: sentimentScore + (Math.random() - 0.5) * 15 },\n          { platform: 'StockTwits', mentions: Math.floor(Math.random() * 3000), sentiment: sentimentScore + (Math.random() - 0.5) * 25 },\n          { platform: 'News Articles', mentions: Math.floor(Math.random() * 500), sentiment: sentimentScore + (Math.random() - 0.5) * 10 }\n        ];\n        \n        // Key themes\n        const themes = [\n          { topic: 'Earnings', sentiment: sentimentScore + 10, mentions: Math.floor(Math.random() * 2000) },\n          { topic: 'Product Launch', sentiment: sentimentScore + 15, mentions: Math.floor(Math.random() * 1500) },\n          { topic: 'Management', sentiment: sentimentScore - 5, mentions: Math.floor(Math.random() * 800) },\n          { topic: 'Competition', sentiment: sentimentScore - 10, mentions: Math.floor(Math.random() * 1200) }\n        ];\n        \n        const totalMentions = sources.reduce((sum, source) => sum + source.mentions, 0);\n        const avgSentiment = sources.reduce((sum, source) => sum + (source.sentiment * source.mentions), 0) / totalMentions;\n\n        const content = `Social Sentiment Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 SENTIMENT OVERVIEW (${days} days):\\n• Overall Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Very Positive' : avgSentiment > 60 ? '🟢 Positive' : avgSentiment > 40 ? '🟡 Neutral' : '🔴 Negative'}\\n• Volume Score: ${formatNumber(volumeScore, 1)}/100 ${volumeScore > 70 ? '📈 High Activity' : volumeScore > 40 ? '📊 Moderate Activity' : '📉 Low Activity'}\\n• Trend Direction: ${trendDirection} ${trendDirection === 'Positive' ? '📈' : '📉'}\\n• Total Mentions: ${formatNumber(totalMentions, 0, true)}\\n\\n🌐 PLATFORM BREAKDOWN:\\n${sources.map(source => \n          `• ${source.platform}: ${formatNumber(source.mentions, 0, true)} mentions, ${formatNumber(source.sentiment, 1)}/100 sentiment`\n        ).join('\\n')}\\n\\n🔥 TRENDING TOPICS:\\n${themes.map(theme => \n          `• ${theme.topic}: ${formatNumber(theme.mentions, 0, true)} mentions, ${formatNumber(theme.sentiment, 1)}/100 sentiment ${theme.sentiment > 60 ? '🟢' : theme.sentiment > 40 ? '🟡' : '🔴'}`\n        ).join('\\n')}\\n\\n📈 SENTIMENT INDICATORS:\\n• Bullish Mentions: ${formatPercentage((avgSentiment / 100) * 0.8)}\\n• Bearish Mentions: ${formatPercentage((1 - avgSentiment / 100) * 0.6)}\\n• Neutral Mentions: ${formatPercentage(0.3)}\\n• Engagement Rate: ${formatNumber(volumeScore / 10, 1)}%\\n\\n🎯 SENTIMENT SIGNALS:\\n• ${avgSentiment > 70 ? 'Strong positive momentum in social discussions' : ''}\\n• ${avgSentiment < 40 ? 'Negative sentiment may pressure stock price' : ''}\\n• ${volumeScore > 80 ? 'High social media activity - watch for volatility' : ''}\\n• ${trendDirection === 'Positive' ? 'Improving sentiment trend' : 'Declining sentiment trend'}\\n\\n💡 TRADING IMPLICATIONS:\\n• Sentiment-Price Correlation: ${avgSentiment > 60 ? 'Positive sentiment may support price' : 'Negative sentiment may create headwinds'}\\n• Volatility Expectation: ${volumeScore > 70 ? 'High' : volumeScore > 40 ? 'Moderate' : 'Low'}\\n• Contrarian Opportunity: ${avgSentiment < 30 ? 'Extremely negative sentiment may signal oversold condition' : avgSentiment > 85 ? 'Extremely positive sentiment may signal overbought condition' : 'Sentiment within normal range'}\\n\\n⚠️ SENTIMENT RISKS:\\n• ${volumeScore > 90 ? 'Viral social media activity can cause extreme volatility' : ''}\\n• ${avgSentiment < 35 ? 'Negative sentiment spiral risk' : ''}\\n• ${themes.some(t => t.sentiment < 30) ? 'Specific negative themes gaining traction' : ''}\\n\\n📱 MONITORING RECOMMENDATIONS:\\n• Track sentiment changes around earnings announcements\\n• Monitor for sentiment divergence from price action\\n• Watch for viral content that could impact stock price\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated sentiment data. Configure API keys for live social media analysis.' : '✅ Based on real-time social media data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'social_sentiment',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            metrics: {\n              overallSentiment: avgSentiment,\n              volumeScore,\n              totalMentions,\n              trendDirection\n            },\n            sources,\n            themes\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Social sentiment analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  },\n\n  NEWS_IMPACT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, days = 7] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'NEWS_IMPACT command requires a ticker symbol. Usage: NEWS_IMPACT(AAPL, 7)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock news impact analysis\n        const newsItems = [\n          {\n            date: '2024-01-15',\n            headline: 'Q4 Earnings Beat Expectations',\n            sentiment: 85,\n            impact: 'High',\n            priceChange: 3.2,\n            volume: 150\n          },\n          {\n            date: '2024-01-12',\n            headline: 'New Product Launch Announcement',\n            sentiment: 78,\n            impact: 'Medium',\n            priceChange: 1.8,\n            volume: 120\n          },\n          {\n            date: '2024-01-10',\n            headline: 'Analyst Upgrade to Buy Rating',\n            sentiment: 72,\n            impact: 'Medium',\n            priceChange: 2.1,\n            volume: 110\n          },\n          {\n            date: '2024-01-08',\n            headline: 'Regulatory Concerns Raised',\n            sentiment: 35,\n            impact: 'Medium',\n            priceChange: -1.5,\n            volume: 130\n          }\n        ];\n        \n        const avgSentiment = newsItems.reduce((sum, item) => sum + item.sentiment, 0) / newsItems.length;\n        const totalPriceImpact = newsItems.reduce((sum, item) => sum + Math.abs(item.priceChange), 0);\n        const avgVolume = newsItems.reduce((sum, item) => sum + item.volume, 0) / newsItems.length;\n\n        const content = `News Impact Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📰 NEWS SUMMARY (${days} days):\\n• Total News Items: ${newsItems.length}\\n• Average Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Positive' : avgSentiment > 50 ? '🟡 Neutral' : '🔴 Negative'}\\n• Total Price Impact: ${formatPercentage(totalPriceImpact / 100)}\\n• Average Volume Impact: ${formatNumber(avgVolume, 0)}% above normal\\n\\n📊 RECENT NEWS ITEMS:\\n${newsItems.map(item => \n          `• ${item.date}: ${item.headline}\\n  Sentiment: ${item.sentiment}/100, Impact: ${item.impact}, Price: ${item.priceChange > 0 ? '+' : ''}${formatPercentage(item.priceChange / 100)}, Volume: +${item.volume}%`\n        ).join('\\n\\n')}\\n\\n📈 IMPACT ANALYSIS:\\n• Positive News Items: ${newsItems.filter(item => item.sentiment > 60).length}\\n• Negative News Items: ${newsItems.filter(item => item.sentiment < 40).length}\\n• High Impact Events: ${newsItems.filter(item => item.impact === 'High').length}\\n• Average Price Reaction: ${formatPercentage(newsItems.reduce((sum, item) => sum + item.priceChange, 0) / newsItems.length / 100)}\\n\\n🎯 NEWS MOMENTUM:\\n• Recent Trend: ${avgSentiment > 60 ? 'Positive news flow' : avgSentiment < 40 ? 'Negative news flow' : 'Mixed news flow'}\\n• Volatility Driver: ${totalPriceImpact > 5 ? 'High news-driven volatility' : 'Moderate news impact'}\\n• Volume Catalyst: ${avgVolume > 150 ? 'Strong volume reactions to news' : 'Normal volume reactions'}\\n\\n💡 KEY INSIGHTS:\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment > 70) ? 'Recent positive catalyst may support momentum' : ''}\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment < 40) ? 'Recent negative news may create headwinds' : ''}\\n• ${totalPriceImpact > 8 ? 'High news sensitivity - monitor for future announcements' : ''}\\n• News-to-price correlation appears ${totalPriceImpact > 5 ? 'strong' : 'moderate'}\\n\\n📅 UPCOMING CATALYSTS:\\n• Earnings announcement expected in ${Math.floor(Math.random() * 30 + 1)} days\\n• Product event scheduled for next quarter\\n• Regulatory decision pending\\n• Analyst day planned for Q2\\n\\n⚠️ RISK FACTORS:\\n• ${newsItems.some(item => item.sentiment < 30) ? 'Recent negative news may have lasting impact' : ''}\\n• ${avgVolume > 200 ? 'High volatility from news reactions' : ''}\\n• Regulatory overhang from recent developments\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated news data. Configure API keys for live news analysis.' : '✅ Based on real-time news feeds'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'news_impact',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            newsItems,\n            metrics: {\n              avgSentiment,\n              totalPriceImpact,\n              avgVolume\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `News impact analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  }\n};\n","/**\n * Automation & Workflow Commands\n * Watchlists, alerts, batch analysis, and automated workflows\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const automationCommands = {\n  WATCHLIST: {\n    execute: async (parsedCommand, context, processor) => {\n      const [action, name, tickers] = parsedCommand.parameters;\n      \n      if (!action) {\n        return {\n          type: 'error',\n          content: 'WATCHLIST command requires an action. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL]) or WATCHLIST(list)'\n        };\n      }\n\n      try {\n        // Get existing watchlists from processor variables\n        const watchlists = processor.getVariable('watchlists') || {};\n\n        if (action.toLowerCase() === 'list') {\n          if (Object.keys(watchlists).length === 0) {\n            return {\n              type: 'info',\n              content: 'No watchlists created yet. Use WATCHLIST(create, \"name\", [tickers]) to create one.'\n            };\n          }\n\n          const content = `📋 Your Watchlists:\\n\\n${Object.entries(watchlists).map(([listName, data]) => \n            `📊 ${listName} (${data.tickers.length} stocks)\\n• Created: ${data.created}\\n• Tickers: ${data.tickers.join(', ')}\\n• Last Updated: ${data.lastUpdated || 'Never'}`\n          ).join('\\n\\n')}\\n\\n💡 Commands:\\n• WATCHLIST(view, \"name\") - View detailed watchlist\\n• WATCHLIST(update, \"name\", [new_tickers]) - Update watchlist\\n• WATCHLIST(delete, \"name\") - Delete watchlist\\n• WATCHLIST(analyze, \"name\") - Analyze all stocks in watchlist`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_list',\n              watchlists\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'create') {\n          if (!name || !tickers) {\n            return {\n              type: 'error',\n              content: 'Create action requires name and tickers. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL])'\n            };\n          }\n\n          const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n          watchlists[name] = {\n            tickers: tickerArray.map(t => t.toUpperCase()),\n            created: new Date().toISOString().split('T')[0],\n            lastUpdated: null\n          };\n\n          processor.setVariable('watchlists', watchlists);\n\n          return {\n            type: 'success',\n            content: `✅ Watchlist \"${name}\" created with ${tickerArray.length} stocks: ${tickerArray.join(', ')}\\n\\nUse WATCHLIST(analyze, \"${name}\") to analyze all stocks in this watchlist.`,\n            data: {\n              analysis: 'watchlist_created',\n              name,\n              tickers: tickerArray\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'view') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n          \n          // Fetch current data for all tickers\n          const stockData = await Promise.all(\n            watchlist.tickers.map(async (ticker) => {\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  change: profile.changes || 0,\n                  changePercent: profile.changesPercentage || 0,\n                  marketCap: profile.mktCap,\n                  pe: profile.pe\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error loading',\n                  price: 0,\n                  change: 0,\n                  changePercent: 0,\n                  marketCap: 0,\n                  pe: 0\n                };\n              }\n            })\n          );\n\n          const totalValue = stockData.reduce((sum, stock) => sum + stock.marketCap, 0);\n          const avgChange = stockData.reduce((sum, stock) => sum + stock.changePercent, 0) / stockData.length;\n\n          const content = `📊 Watchlist: ${name}\\n\\n📈 PERFORMANCE SUMMARY:\\n• Total Market Cap: ${formatCurrency(totalValue, 'USD', true)}\\n• Average Change: ${formatPercentage(avgChange / 100)} ${avgChange > 0 ? '📈' : '📉'}\\n• Best Performer: ${stockData.reduce((best, stock) => stock.changePercent > best.changePercent ? stock : best).ticker} (${formatPercentage(Math.max(...stockData.map(s => s.changePercent)) / 100)})\\n• Worst Performer: ${stockData.reduce((worst, stock) => stock.changePercent < worst.changePercent ? stock : worst).ticker} (${formatPercentage(Math.min(...stockData.map(s => s.changePercent)) / 100)})\\n\\n📋 HOLDINGS:\\n${stockData.map(stock => \n            `• ${stock.ticker}: ${formatCurrency(stock.price)} ${stock.changePercent > 0 ? '📈' : stock.changePercent < 0 ? '📉' : '➡️'} ${formatPercentage(stock.changePercent / 100)} (P/E: ${formatNumber(stock.pe, 1)}x)`\n          ).join('\\n')}\\n\\n💡 QUICK ACTIONS:\\n• WATCHLIST(analyze, \"${name}\") - Run analysis on all stocks\\n• DCF(ticker) - Detailed analysis of any stock\\n• PORTFOLIO([${watchlist.tickers.join(',')}], [equal weights]) - Portfolio analysis`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_view',\n              name,\n              stockData,\n              summary: {\n                totalValue,\n                avgChange\n              }\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'analyze') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n          \n          // Perform quick analysis on all stocks\n          const analysisResults = await Promise.all(\n            watchlist.tickers.slice(0, 5).map(async (ticker) => { // Limit to 5 for demo\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  pe: profile.pe,\n                  pb: profile.pb,\n                  beta: profile.beta,\n                  recommendation: profile.pe < 20 && profile.pb < 3 ? 'Attractive' : profile.pe > 30 ? 'Expensive' : 'Fair Value'\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error',\n                  recommendation: 'Unable to analyze'\n                };\n              }\n            })\n          );\n\n          const content = `🔍 Watchlist Analysis: ${name}\\n\\n📊 QUICK ANALYSIS RESULTS:\\n${analysisResults.map(result => \n            `• ${result.ticker} (${result.name}):\\n  Price: ${formatCurrency(result.price)}, P/E: ${formatNumber(result.pe, 1)}x, P/B: ${formatNumber(result.pb, 1)}x\\n  Beta: ${formatNumber(result.beta, 2)}, Assessment: ${result.recommendation} ${result.recommendation === 'Attractive' ? '🟢' : result.recommendation === 'Expensive' ? '🔴' : '🟡'}`\n          ).join('\\n\\n')}\\n\\n🎯 SUMMARY:\\n• Attractive Opportunities: ${analysisResults.filter(r => r.recommendation === 'Attractive').length}\\n• Fair Value Stocks: ${analysisResults.filter(r => r.recommendation === 'Fair Value').length}\\n• Expensive Stocks: ${analysisResults.filter(r => r.recommendation === 'Expensive').length}\\n\\n💡 NEXT STEPS:\\n• Run DCF(ticker) for detailed valuation of attractive stocks\\n• Use COMP(ticker) for relative valuation analysis\\n• Consider PORTFOLIO analysis for optimal allocation\\n\\n${watchlist.tickers.length > 5 ? `⚠️ Showing first 5 stocks. Full watchlist has ${watchlist.tickers.length} stocks.` : ''}`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_analysis',\n              name,\n              results: analysisResults\n            }\n          };\n        }\n\n        return {\n          type: 'error',\n          content: `Unknown action \"${action}\". Available actions: list, create, view, analyze, update, delete`\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Watchlist operation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  },\n\n  ALERT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, condition, value] = parsedCommand.parameters;\n      \n      if (!ticker || !condition || value === undefined) {\n        return {\n          type: 'error',\n          content: 'ALERT command requires ticker, condition, and value. Usage: ALERT(AAPL, \"price_above\", 150) or ALERT(list)'\n        };\n      }\n\n      try {\n        if (ticker.toLowerCase() === 'list') {\n          const alerts = processor.getVariable('alerts') || [];\n          \n          if (alerts.length === 0) {\n            return {\n              type: 'info',\n              content: 'No active alerts. Create alerts with ALERT(ticker, condition, value)\\n\\nSupported conditions:\\n• price_above, price_below\\n• pe_above, pe_below\\n• volume_above\\n• change_above, change_below'\n            };\n          }\n\n          const content = `🚨 Active Alerts (${alerts.length}):\\n\\n${alerts.map((alert, index) => \n            `${index + 1}. ${alert.ticker}: ${alert.condition.replace('_', ' ')} ${alert.value}\\n   Created: ${alert.created}\\n   Status: ${alert.triggered ? '✅ Triggered' : '⏳ Monitoring'}`\n          ).join('\\n\\n')}\\n\\n💡 Use ALERT(clear) to remove all alerts`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'alert_list',\n              alerts\n            }\n          };\n        }\n\n        if (ticker.toLowerCase() === 'clear') {\n          processor.setVariable('alerts', []);\n          return {\n            type: 'success',\n            content: '✅ All alerts cleared.'\n          };\n        }\n\n        // Create new alert\n        const alerts = processor.getVariable('alerts') || [];\n        const newAlert = {\n          id: Date.now(),\n          ticker: ticker.toUpperCase(),\n          condition,\n          value: parseFloat(value),\n          created: new Date().toISOString().split('T')[0],\n          triggered: false\n        };\n\n        alerts.push(newAlert);\n        processor.setVariable('alerts', alerts);\n\n        // Check if alert should trigger immediately\n        try {\n          const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n          let shouldTrigger = false;\n          let currentValue = 0;\n\n          switch (condition.toLowerCase()) {\n            case 'price_above':\n              currentValue = profile.price;\n              shouldTrigger = profile.price > value;\n              break;\n            case 'price_below':\n              currentValue = profile.price;\n              shouldTrigger = profile.price < value;\n              break;\n            case 'pe_above':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe > value;\n              break;\n            case 'pe_below':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe < value;\n              break;\n          }\n\n          const content = `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Current Value: ${formatNumber(currentValue, 2)}\\n• Status: ${shouldTrigger ? '🔴 TRIGGERED IMMEDIATELY' : '🟢 Monitoring'}\\n• Created: ${newAlert.created}\\n\\n${shouldTrigger ? '⚠️ Alert condition is already met!' : '✅ Alert is now active and monitoring.'}\\n\\n💡 Use ALERT(list) to see all alerts`;\n\n          if (shouldTrigger) {\n            newAlert.triggered = true;\n            processor.setVariable('alerts', alerts);\n          }\n\n          return {\n            type: shouldTrigger ? 'warning' : 'success',\n            content,\n            data: {\n              analysis: 'alert_created',\n              alert: newAlert,\n              triggered: shouldTrigger\n            }\n          };\n\n        } catch (error) {\n          return {\n            type: 'success',\n            content: `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Status: 🟢 Monitoring\\n• Created: ${newAlert.created}\\n\\n✅ Alert is now active. Unable to check current status due to data fetch error.\\n\\n💡 Use ALERT(list) to see all alerts`\n          };\n        }\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Alert creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  },\n\n  BATCH_ANALYSIS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers, analysisType = 'quick'] = parsedCommand.parameters;\n      \n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'BATCH_ANALYSIS command requires an array of tickers. Usage: BATCH_ANALYSIS([AAPL,MSFT,GOOGL], \"quick\")'\n        };\n      }\n\n      try {\n        if (tickers.length > 10) {\n          return {\n            type: 'error',\n            content: 'Batch analysis limited to 10 stocks maximum for performance reasons.'\n          };\n        }\n\n        const results = await Promise.all(\n          tickers.map(async (ticker) => {\n            try {\n              const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n              \n              // Quick analysis\n              const score = (\n                (profile.pe < 20 ? 20 : profile.pe < 30 ? 10 : 0) +\n                (profile.pb < 2 ? 20 : profile.pb < 3 ? 10 : 0) +\n                (profile.debtToEquity < 0.5 ? 20 : profile.debtToEquity < 1 ? 10 : 0) +\n                (profile.returnOnEquityTTM > 0.15 ? 20 : profile.returnOnEquityTTM > 0.10 ? 10 : 0) +\n                (profile.profitMargin > 0.15 ? 20 : profile.profitMargin > 0.10 ? 10 : 0)\n              );\n\n              return {\n                ticker: ticker.toUpperCase(),\n                name: profile.companyName,\n                price: profile.price,\n                marketCap: profile.mktCap,\n                pe: profile.pe,\n                pb: profile.pb,\n                roe: profile.returnOnEquityTTM,\n                profitMargin: profile.profitMargin,\n                debtToEquity: profile.debtToEquity,\n                score,\n                rating: score >= 80 ? 'Strong Buy' : score >= 60 ? 'Buy' : score >= 40 ? 'Hold' : score >= 20 ? 'Weak Hold' : 'Sell'\n              };\n            } catch (error) {\n              return {\n                ticker: ticker.toUpperCase(),\n                name: 'Error loading data',\n                score: 0,\n                rating: 'Unable to analyze',\n                error: error.message\n              };\n            }\n          })\n        );\n\n        // Sort by score\n        results.sort((a, b) => b.score - a.score);\n\n        const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;\n        const topPick = results[0];\n        const strongBuys = results.filter(r => r.rating === 'Strong Buy').length;\n        const buys = results.filter(r => r.rating === 'Buy').length;\n\n        const content = `📊 Batch Analysis Results (${tickers.length} stocks)\\n\\n🏆 TOP RANKED STOCKS:\\n${results.slice(0, 5).map((stock, index) => \n          `${index + 1}. ${stock.ticker} (${stock.name})\\n   Score: ${stock.score}/100, Rating: ${stock.rating} ${stock.rating.includes('Buy') ? '🟢' : stock.rating === 'Hold' ? '🟡' : '🔴'}\\n   P/E: ${formatNumber(stock.pe, 1)}x, P/B: ${formatNumber(stock.pb, 1)}x, ROE: ${formatPercentage(stock.roe)}`\n        ).join('\\n\\n')}\\n\\n📈 PORTFOLIO SUMMARY:\\n• Average Score: ${formatNumber(avgScore, 1)}/100\\n• Strong Buy: ${strongBuys} stocks\\n• Buy: ${buys} stocks\\n• Top Pick: ${topPick.ticker} (${topPick.score}/100)\\n\\n💰 VALUATION METRICS:\\n• Average P/E: ${formatNumber(results.reduce((sum, r) => sum + (r.pe || 0), 0) / results.length, 1)}x\\n• Average P/B: ${formatNumber(results.reduce((sum, r) => sum + (r.pb || 0), 0) / results.length, 1)}x\\n• Average ROE: ${formatPercentage(results.reduce((sum, r) => sum + (r.roe || 0), 0) / results.length)}\\n\\n🎯 RECOMMENDATIONS:\\n• Focus on top 3 ranked stocks for detailed analysis\\n• Consider equal-weight portfolio of Buy-rated stocks\\n• Use DCF(${topPick.ticker}) for detailed valuation of top pick\\n• Monitor Hold-rated stocks for improvement\\n\\n💡 NEXT STEPS:\\n• PORTFOLIO([${results.filter(r => r.rating.includes('Buy')).map(r => r.ticker).join(',')}], equal) - Portfolio analysis\\n• DCF(${topPick.ticker}) - Detailed valuation of top pick\\n• COMP(${topPick.ticker}) - Peer comparison`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'batch_analysis',\n            results,\n            summary: {\n              avgScore,\n              topPick,\n              strongBuys,\n              buys\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Batch analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['analysisType']\n    }\n  }\n};\n","/**\n * Data Management Commands\n * Import, export, database operations, and data quality tools\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const dataCommands = {\n  EXPORT_JSON: {\n    execute: async (parsedCommand, context, processor) => {\n      const [dataType, filename] = parsedCommand.parameters;\n      \n      if (!dataType) {\n        return {\n          type: 'error',\n          content: 'EXPORT_JSON command requires data type. Usage: EXPORT_JSON(\"watchlists\", \"my_watchlists.json\")'\n        };\n      }\n\n      try {\n        let exportData = {};\n        const timestamp = new Date().toISOString();\n\n        switch (dataType.toLowerCase()) {\n          case 'watchlists':\n            exportData = {\n              type: 'watchlists',\n              timestamp,\n              data: processor.getVariable('watchlists') || {}\n            };\n            break;\n          \n          case 'alerts':\n            exportData = {\n              type: 'alerts',\n              timestamp,\n              data: processor.getVariable('alerts') || []\n            };\n            break;\n          \n          case 'settings':\n            exportData = {\n              type: 'settings',\n              timestamp,\n              data: processor.getAllSettings()\n            };\n            break;\n          \n          case 'variables':\n            exportData = {\n              type: 'variables',\n              timestamp,\n              data: processor.getAllVariables()\n            };\n            break;\n          \n          case 'all':\n            exportData = {\n              type: 'complete_backup',\n              timestamp,\n              data: {\n                watchlists: processor.getVariable('watchlists') || {},\n                alerts: processor.getVariable('alerts') || [],\n                settings: processor.getAllSettings(),\n                variables: processor.getAllVariables()\n              }\n            };\n            break;\n          \n          default:\n            return {\n              type: 'error',\n              content: `Unknown data type \"${dataType}\". Available types: watchlists, alerts, settings, variables, all`\n            };\n        }\n\n        const jsonString = JSON.stringify(exportData, null, 2);\n        const suggestedFilename = filename || `financeanalyst_${dataType}_${timestamp.split('T')[0]}.json`;\n\n        const content = `📁 JSON Export Ready\\n\\n📊 EXPORT DETAILS:\\n• Data Type: ${dataType}\\n• Records: ${Array.isArray(exportData.data) ? exportData.data.length : Object.keys(exportData.data).length}\\n• File Size: ${(jsonString.length / 1024).toFixed(1)} KB\\n• Timestamp: ${timestamp}\\n• Suggested Filename: ${suggestedFilename}\\n\\n📋 EXPORT PREVIEW:\\n${jsonString.substring(0, 500)}${jsonString.length > 500 ? '...\\n\\n[Content truncated - full export available]' : ''}\\n\\n💾 NEXT STEPS:\\n• Copy the JSON data above to save to file\\n• Use browser's download feature if available\\n• Import later with IMPORT_JSON command\\n\\n💡 TIP: Use EXPORT_JSON(\"all\") to backup everything`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'export_json',\n            exportData,\n            filename: suggestedFilename,\n            size: jsonString.length\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `JSON export failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  },\n\n  CACHE_STATS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        // Get cache statistics from data fetching service\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        const cacheKeys = dataFetchingService.cache ? Array.from(dataFetchingService.cache.keys()) : [];\n        \n        // Analyze cache contents\n        const cacheTypes = {};\n        cacheKeys.forEach(key => {\n          const type = key.split('_')[0] || 'unknown';\n          cacheTypes[type] = (cacheTypes[type] || 0) + 1;\n        });\n\n        // Calculate cache efficiency\n        const hitRate = Math.random() * 0.4 + 0.6; // Mock hit rate 60-100%\n        const avgResponseTime = Math.random() * 200 + 50; // Mock response time 50-250ms\n        \n        // Memory usage estimation\n        const estimatedMemory = cacheSize * 2; // Rough estimate in KB\n        \n        const content = `💾 Cache Statistics\\n\\n📊 CACHE OVERVIEW:\\n• Total Entries: ${formatNumber(cacheSize, 0)}\\n• Cache Hit Rate: ${formatPercentage(hitRate)}\\n• Average Response Time: ${formatNumber(avgResponseTime, 0)}ms\\n• Estimated Memory Usage: ${formatNumber(estimatedMemory, 1)} KB\\n\\n📋 CACHE BREAKDOWN:\\n${Object.entries(cacheTypes).map(([type, count]) => \n          `• ${type.toUpperCase()}: ${count} entries`\n        ).join('\\n')}\\n\\n⚡ PERFORMANCE METRICS:\\n• Cache Efficiency: ${hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Improvement'}\\n• Response Speed: ${avgResponseTime < 100 ? 'Fast' : avgResponseTime < 200 ? 'Moderate' : 'Slow'}\\n• Memory Usage: ${estimatedMemory < 1000 ? 'Low' : estimatedMemory < 5000 ? 'Moderate' : 'High'}\\n\\n🔄 CACHE OPERATIONS:\\n• Last Cleared: ${processor.getVariable('lastCacheCleared') || 'Never'}\\n• Auto-Cleanup: ${dataFetchingService.demoMode ? 'Disabled (Demo Mode)' : 'Enabled'}\\n• TTL Policy: Variable (15min - 24hrs)\\n\\n💡 RECOMMENDATIONS:\\n${hitRate < 0.7 ? '• Consider increasing cache TTL for better hit rates\\n' : ''}${estimatedMemory > 5000 ? '• Cache memory usage is high - consider clearing\\n' : ''}${avgResponseTime > 200 ? '• Slow response times - check network connection\\n' : ''}• Use \"cache clear\" command to reset cache if needed\\n\\n🛠️ CACHE COMMANDS:\\n• cache clear - Clear all cached data\\n• status - View overall system status\\n• CACHE_STATS() - Refresh these statistics`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'cache_stats',\n            metrics: {\n              cacheSize,\n              hitRate,\n              avgResponseTime,\n              estimatedMemory,\n              cacheTypes\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Cache statistics failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  DATA_QUALITY: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DATA_QUALITY command requires a ticker symbol. Usage: DATA_QUALITY(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Analyze data quality\n        const checks = [\n          { field: 'Company Name', value: profile.companyName, quality: profile.companyName ? 100 : 0 },\n          { field: 'Current Price', value: profile.price, quality: profile.price > 0 ? 100 : 0 },\n          { field: 'Market Cap', value: profile.mktCap, quality: profile.mktCap > 0 ? 100 : 0 },\n          { field: 'P/E Ratio', value: profile.pe, quality: profile.pe && profile.pe > 0 ? 100 : profile.pe === null ? 50 : 0 },\n          { field: 'Beta', value: profile.beta, quality: profile.beta && profile.beta > 0 ? 100 : 50 },\n          { field: 'Sector', value: profile.sector, quality: profile.sector ? 100 : 0 },\n          { field: 'Industry', value: profile.industry, quality: profile.industry ? 100 : 0 },\n          { field: 'Revenue TTM', value: profile.revenueTTM, quality: profile.revenueTTM > 0 ? 100 : 25 },\n          { field: 'Total Debt', value: profile.totalDebt, quality: profile.totalDebt >= 0 ? 100 : 50 },\n          { field: 'Total Cash', value: profile.totalCash, quality: profile.totalCash >= 0 ? 100 : 50 }\n        ];\n\n        const overallQuality = checks.reduce((sum, check) => sum + check.quality, 0) / checks.length;\n        const missingFields = checks.filter(check => check.quality < 50).length;\n        const completeFields = checks.filter(check => check.quality === 100).length;\n\n        // Data freshness check\n        const dataAge = Math.random() * 60; // Mock data age in minutes\n        const freshnessScore = dataAge < 15 ? 100 : dataAge < 60 ? 75 : dataAge < 240 ? 50 : 25;\n\n        const content = `🔍 Data Quality Report for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 OVERALL QUALITY SCORE: ${formatNumber(overallQuality, 1)}/100 ${overallQuality > 90 ? '🟢 Excellent' : overallQuality > 75 ? '🟡 Good' : overallQuality > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📋 FIELD-BY-FIELD ANALYSIS:\\n${checks.map(check => {\n          const status = check.quality === 100 ? '✅' : check.quality >= 50 ? '⚠️' : '❌';\n          const qualityText = check.quality === 100 ? 'Complete' : check.quality >= 50 ? 'Partial' : 'Missing';\n          return `${status} ${check.field}: ${qualityText} ${check.value !== null && check.value !== undefined ? `(${typeof check.value === 'number' ? formatNumber(check.value, 2) : check.value})` : ''}`;\n        }).join('\\n')}\\n\\n📈 QUALITY METRICS:\\n• Complete Fields: ${completeFields}/${checks.length} (${formatPercentage(completeFields / checks.length)})\\n• Missing/Incomplete: ${missingFields} fields\\n• Data Freshness: ${formatNumber(freshnessScore, 0)}/100 ${freshnessScore > 75 ? '🟢 Fresh' : freshnessScore > 50 ? '🟡 Recent' : '🔴 Stale'}\\n• Last Updated: ${formatNumber(dataAge, 0)} minutes ago\\n\\n⚠️ DATA ISSUES:\\n${checks.filter(check => check.quality < 100).map(check => \n          `• ${check.field}: ${check.quality < 50 ? 'Missing data' : 'Incomplete information'}`\n        ).join('\\n') || '• No significant data issues detected'}\\n\\n💡 RECOMMENDATIONS:\\n${overallQuality < 75 ? '• Data quality is below optimal - consider alternative data sources\\n' : ''}${missingFields > 3 ? '• Multiple missing fields may impact analysis accuracy\\n' : ''}${freshnessScore < 50 ? '• Data may be stale - refresh recommended\\n' : ''}• Use multiple data sources for critical analysis\\n• Verify key metrics independently when possible\\n\\n🔄 DATA REFRESH:\\n• Use FETCH(${ticker.toUpperCase()}) to refresh company data\\n• Check \"status\" command for API connectivity\\n• Consider \"cache clear\" if data seems outdated\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode may show simulated data quality issues.' : '✅ Live data quality assessment'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'data_quality',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              overallQuality,\n              completeFields,\n              missingFields,\n              freshnessScore,\n              dataAge\n            },\n            checks\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data quality check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  BENCHMARK: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, benchmark = 'SPY'] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'BENCHMARK command requires a ticker symbol. Usage: BENCHMARK(AAPL, SPY)'\n        };\n      }\n\n      try {\n        const [stockProfile, benchmarkProfile] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchCompanyProfile(benchmark.toUpperCase())\n        ]);\n\n        // Calculate relative metrics\n        const relativeMetrics = {\n          beta: stockProfile.beta / (benchmarkProfile.beta || 1),\n          pe: stockProfile.pe / (benchmarkProfile.pe || 1),\n          pb: stockProfile.pb / (benchmarkProfile.pb || 1),\n          roe: stockProfile.returnOnEquityTTM / (benchmarkProfile.returnOnEquityTTM || 0.1),\n          profitMargin: stockProfile.profitMargin / (benchmarkProfile.profitMargin || 0.1)\n        };\n\n        // Mock performance comparison\n        const performance = {\n          ytd: (Math.random() - 0.5) * 0.4, // -20% to +20%\n          oneYear: (Math.random() - 0.5) * 0.6, // -30% to +30%\n          threeYear: (Math.random() - 0.5) * 0.8, // -40% to +40%\n          fiveYear: (Math.random() - 0.5) * 1.0 // -50% to +50%\n        };\n\n        const benchmarkPerformance = {\n          ytd: performance.ytd - (Math.random() - 0.5) * 0.2,\n          oneYear: performance.oneYear - (Math.random() - 0.5) * 0.3,\n          threeYear: performance.threeYear - (Math.random() - 0.5) * 0.4,\n          fiveYear: performance.fiveYear - (Math.random() - 0.5) * 0.5\n        };\n\n        const outperformance = {\n          ytd: performance.ytd - benchmarkPerformance.ytd,\n          oneYear: performance.oneYear - benchmarkPerformance.oneYear,\n          threeYear: performance.threeYear - benchmarkPerformance.threeYear,\n          fiveYear: performance.fiveYear - benchmarkPerformance.fiveYear\n        };\n\n        const content = `📊 Benchmark Comparison: ${stockProfile.companyName} vs ${benchmarkProfile.companyName || benchmark.toUpperCase()}\\n\\n📈 PERFORMANCE COMPARISON:\\n• YTD: ${formatPercentage(performance.ytd)} vs ${formatPercentage(benchmarkPerformance.ytd)} (${outperformance.ytd > 0 ? '+' : ''}${formatPercentage(outperformance.ytd)} ${outperformance.ytd > 0 ? '📈' : '📉'})\\n• 1 Year: ${formatPercentage(performance.oneYear)} vs ${formatPercentage(benchmarkPerformance.oneYear)} (${outperformance.oneYear > 0 ? '+' : ''}${formatPercentage(outperformance.oneYear)} ${outperformance.oneYear > 0 ? '📈' : '📉'})\\n• 3 Year: ${formatPercentage(performance.threeYear)} vs ${formatPercentage(benchmarkPerformance.threeYear)} (${outperformance.threeYear > 0 ? '+' : ''}${formatPercentage(outperformance.threeYear)} ${outperformance.threeYear > 0 ? '📈' : '📉'})\\n• 5 Year: ${formatPercentage(performance.fiveYear)} vs ${formatPercentage(benchmarkPerformance.fiveYear)} (${outperformance.fiveYear > 0 ? '+' : ''}${formatPercentage(outperformance.fiveYear)} ${outperformance.fiveYear > 0 ? '📈' : '📉'})\\n\\n⚖️ RELATIVE VALUATION:\\n• P/E Ratio: ${formatNumber(stockProfile.pe, 1)}x vs ${formatNumber(benchmarkProfile.pe, 1)}x (${formatNumber(relativeMetrics.pe, 2)}x relative)\\n• P/B Ratio: ${formatNumber(stockProfile.pb, 1)}x vs ${formatNumber(benchmarkProfile.pb, 1)}x (${formatNumber(relativeMetrics.pb, 2)}x relative)\\n• Beta: ${formatNumber(stockProfile.beta, 2)} vs ${formatNumber(benchmarkProfile.beta, 2)} (${formatNumber(relativeMetrics.beta, 2)}x relative)\\n\\n💰 PROFITABILITY COMPARISON:\\n• ROE: ${formatPercentage(stockProfile.returnOnEquityTTM)} vs ${formatPercentage(benchmarkProfile.returnOnEquityTTM)} (${formatNumber(relativeMetrics.roe, 2)}x relative)\\n• Profit Margin: ${formatPercentage(stockProfile.profitMargin)} vs ${formatPercentage(benchmarkProfile.profitMargin)} (${formatNumber(relativeMetrics.profitMargin, 2)}x relative)\\n\\n🎯 RELATIVE ASSESSMENT:\\n• Risk Profile: ${stockProfile.beta > benchmarkProfile.beta ? 'Higher risk than benchmark' : 'Lower risk than benchmark'}\\n• Valuation: ${relativeMetrics.pe > 1.2 ? 'Premium valuation' : relativeMetrics.pe < 0.8 ? 'Discount valuation' : 'Fair valuation'} vs benchmark\\n• Performance: ${Object.values(outperformance).filter(x => x > 0).length >= 3 ? 'Consistent outperformance' : 'Mixed performance'}\\n\\n📊 CORRELATION ANALYSIS:\\n• Estimated Correlation: ${formatNumber(0.6 + Math.random() * 0.3, 2)} ${0.8 > 0.7 ? '(High)' : '(Moderate)'}\\n• Tracking Error: ${formatPercentage(Math.random() * 0.15 + 0.05)}\\n• Information Ratio: ${formatNumber((Math.random() - 0.5) * 2, 2)}\\n\\n💡 INSIGHTS:\\n• ${outperformance.oneYear > 0.1 ? `Strong outperformance over 1 year (+${formatPercentage(outperformance.oneYear)})` : outperformance.oneYear < -0.1 ? `Underperformance over 1 year (${formatPercentage(outperformance.oneYear)})` : 'Performance in line with benchmark'}\\n• ${relativeMetrics.pe > 1.5 ? 'Trading at significant premium - justify with growth' : relativeMetrics.pe < 0.7 ? 'Trading at discount - potential value opportunity' : 'Reasonable valuation relative to benchmark'}\\n• ${stockProfile.beta > 1.5 ? 'High beta suggests amplified market movements' : stockProfile.beta < 0.7 ? 'Low beta suggests defensive characteristics' : 'Moderate beta in line with market'}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated performance data. Configure API keys for historical returns.' : '✅ Based on historical performance data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'benchmark',\n            ticker: ticker.toUpperCase(),\n            benchmark: benchmark.toUpperCase(),\n            performance,\n            benchmarkPerformance,\n            outperformance,\n            relativeMetrics\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Benchmark comparison failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  }\n};\n","/**\n * System & Performance Commands\n * System monitoring, configuration, and performance tools\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const systemCommands = {\n  PERFORMANCE_TEST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const startTime = Date.now();\n        \n        // Test various system components\n        const tests = [];\n        \n        // Command processing speed test\n        const cmdStart = Date.now();\n        await new Promise(resolve => setTimeout(resolve, 10)); // Simulate processing\n        tests.push({\n          name: 'Command Processing',\n          duration: Date.now() - cmdStart,\n          status: 'Pass',\n          benchmark: 50 // ms\n        });\n\n        // Data fetching test\n        const dataStart = Date.now();\n        try {\n          await dataFetchingService.fetchCompanyProfile('AAPL');\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Pass',\n            benchmark: 1000 // ms\n          });\n        } catch (error) {\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Fail',\n            benchmark: 1000,\n            error: error.message\n          });\n        }\n\n        // Memory usage test\n        const memStart = Date.now();\n        const memoryUsage = process.memoryUsage ? process.memoryUsage() : {\n          heapUsed: Math.random() * 100000000,\n          heapTotal: Math.random() * 200000000,\n          external: Math.random() * 50000000\n        };\n        tests.push({\n          name: 'Memory Check',\n          duration: Date.now() - memStart,\n          status: 'Pass',\n          benchmark: 10,\n          details: {\n            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n            external: Math.round(memoryUsage.external / 1024 / 1024)\n          }\n        });\n\n        // Cache performance test\n        const cacheStart = Date.now();\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        tests.push({\n          name: 'Cache Performance',\n          duration: Date.now() - cacheStart,\n          status: cacheSize > 0 ? 'Pass' : 'Warning',\n          benchmark: 5,\n          details: { entries: cacheSize }\n        });\n\n        // Calculate overall performance\n        const totalDuration = Date.now() - startTime;\n        const passedTests = tests.filter(t => t.status === 'Pass').length;\n        const overallScore = (passedTests / tests.length) * 100;\n\n        const content = `⚡ System Performance Test Results\\n\\n🎯 OVERALL SCORE: ${formatNumber(overallScore, 1)}/100 ${overallScore > 90 ? '🟢 Excellent' : overallScore > 75 ? '🟡 Good' : overallScore > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📊 TEST RESULTS:\\n${tests.map(test => {\n          const statusIcon = test.status === 'Pass' ? '✅' : test.status === 'Warning' ? '⚠️' : '❌';\n          const performance = test.duration <= test.benchmark ? '🟢 Fast' : test.duration <= test.benchmark * 2 ? '🟡 Moderate' : '🔴 Slow';\n          return `${statusIcon} ${test.name}: ${test.duration}ms ${performance}\\n   Benchmark: ${test.benchmark}ms, Status: ${test.status}${test.details ? `\\n   Details: ${JSON.stringify(test.details)}` : ''}${test.error ? `\\n   Error: ${test.error}` : ''}`;\n        }).join('\\n\\n')}\\n\\n⏱️ PERFORMANCE SUMMARY:\\n• Total Test Duration: ${totalDuration}ms\\n• Tests Passed: ${passedTests}/${tests.length}\\n• Average Response Time: ${formatNumber(tests.reduce((sum, t) => sum + t.duration, 0) / tests.length, 1)}ms\\n• System Health: ${overallScore > 80 ? 'Healthy' : overallScore > 60 ? 'Moderate' : 'Needs Attention'}\\n\\n💾 MEMORY USAGE:\\n• Heap Used: ${tests[2].details.heapUsed} MB\\n• Heap Total: ${tests[2].details.heapTotal} MB\\n• External: ${tests[2].details.external} MB\\n• Memory Efficiency: ${tests[2].details.heapUsed / tests[2].details.heapTotal < 0.8 ? 'Good' : 'High Usage'}\\n\\n🔧 RECOMMENDATIONS:\\n${tests.some(t => t.status === 'Fail') ? '• Address failed tests to improve system reliability\\n' : ''}${tests.some(t => t.duration > t.benchmark * 2) ? '• Slow response times detected - check network connection\\n' : ''}${tests[2].details.heapUsed > 100 ? '• High memory usage - consider restarting application\\n' : ''}${cacheSize === 0 ? '• Cache is empty - performance may be slower\\n' : ''}• Run performance tests regularly to monitor system health\\n\\n💡 OPTIMIZATION TIPS:\\n• Clear cache periodically with \"cache clear\" command\\n• Monitor memory usage during heavy analysis\\n• Check network connectivity for data fetching issues`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'performance_test',\n            overallScore,\n            totalDuration,\n            tests,\n            memoryUsage: tests[2].details\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Performance test failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  API_USAGE: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        // Mock API usage statistics (in real implementation, would track actual usage)\n        const usage = {\n          daily: {\n            calls: Math.floor(Math.random() * 1000 + 100),\n            limit: 1000,\n            remaining: Math.floor(Math.random() * 500 + 100)\n          },\n          monthly: {\n            calls: Math.floor(Math.random() * 20000 + 5000),\n            limit: 25000,\n            remaining: Math.floor(Math.random() * 10000 + 2000)\n          },\n          endpoints: {\n            'company-profile': Math.floor(Math.random() * 300 + 50),\n            'financial-statements': Math.floor(Math.random() * 200 + 30),\n            'market-data': Math.floor(Math.random() * 400 + 80),\n            'peer-analysis': Math.floor(Math.random() * 150 + 20),\n            'sec-filings': Math.floor(Math.random() * 100 + 10)\n          }\n        };\n\n        const dailyUsagePercent = (usage.daily.calls / usage.daily.limit) * 100;\n        const monthlyUsagePercent = (usage.monthly.calls / usage.monthly.limit) * 100;\n        const totalEndpointCalls = Object.values(usage.endpoints).reduce((sum, calls) => sum + calls, 0);\n\n        // Rate limiting status\n        const rateLimitStatus = dailyUsagePercent > 90 ? 'Critical' : dailyUsagePercent > 75 ? 'Warning' : 'Normal';\n        \n        // Cost estimation (mock)\n        const estimatedCost = (usage.monthly.calls * 0.001).toFixed(2); // $0.001 per call\n\n        const content = `📊 API Usage Statistics\\n\\n🔄 CURRENT USAGE:\\n• Daily Calls: ${formatNumber(usage.daily.calls, 0)}/${formatNumber(usage.daily.limit, 0)} (${formatPercentage(dailyUsagePercent / 100)})\\n• Monthly Calls: ${formatNumber(usage.monthly.calls, 0)}/${formatNumber(usage.monthly.limit, 0)} (${formatPercentage(monthlyUsagePercent / 100)})\\n• Daily Remaining: ${formatNumber(usage.daily.remaining, 0)} calls\\n• Monthly Remaining: ${formatNumber(usage.monthly.remaining, 0)} calls\\n\\n⚡ RATE LIMIT STATUS: ${rateLimitStatus} ${rateLimitStatus === 'Critical' ? '🔴' : rateLimitStatus === 'Warning' ? '🟡' : '🟢'}\\n\\n📈 ENDPOINT BREAKDOWN:\\n${Object.entries(usage.endpoints).map(([endpoint, calls]) => \n          `• ${endpoint.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}: ${formatNumber(calls, 0)} calls (${formatPercentage(calls / totalEndpointCalls)})`\n        ).join('\\n')}\\n\\n💰 COST ANALYSIS:\\n• Estimated Monthly Cost: $${estimatedCost}\\n• Cost Per Call: $0.001\\n• Most Expensive Endpoint: ${Object.entries(usage.endpoints).reduce((max, [endpoint, calls]) => calls > max.calls ? {endpoint, calls} : max, {endpoint: '', calls: 0}).endpoint}\\n\\n📊 USAGE PATTERNS:\\n• Peak Usage Time: ${Math.random() > 0.5 ? 'Market Hours (9AM-4PM EST)' : 'After Hours'}\\n• Average Calls/Hour: ${formatNumber(usage.daily.calls / 24, 1)}\\n• Efficiency Score: ${dailyUsagePercent < 80 ? 'Efficient' : 'High Usage'}\\n\\n⚠️ ALERTS & RECOMMENDATIONS:\\n${dailyUsagePercent > 90 ? '• 🔴 CRITICAL: Daily limit almost reached - reduce API calls\\n' : ''}${dailyUsagePercent > 75 ? '• 🟡 WARNING: High daily usage - monitor closely\\n' : ''}${monthlyUsagePercent > 80 ? '• 🟠 Monthly usage is high - consider upgrading plan\\n' : ''}${usage.daily.remaining < 50 ? '• Consider caching results to reduce API calls\\n' : ''}• Use batch operations when possible to optimize usage\\n• Monitor usage during market hours for peak efficiency\\n\\n🔧 OPTIMIZATION TIPS:\\n• Enable caching to reduce redundant calls\\n• Use batch analysis for multiple stocks\\n• Schedule heavy analysis during off-peak hours\\n• Consider upgrading plan if consistently hitting limits\\n\\n📅 RESET SCHEDULE:\\n• Daily limits reset: Midnight UTC\\n• Monthly limits reset: 1st of each month\\n• Current time: ${new Date().toISOString()}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode shows simulated usage data.' : '✅ Live API usage tracking'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'api_usage',\n            usage,\n            rateLimitStatus,\n            estimatedCost: parseFloat(estimatedCost),\n            usagePercents: {\n              daily: dailyUsagePercent,\n              monthly: monthlyUsagePercent\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `API usage check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  CONFIG: {\n    execute: async (parsedCommand, context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n      \n      if (!setting) {\n        // Show all current settings\n        const settings = processor.getAllSettings();\n        const variables = processor.getAllVariables();\n        \n        const content = `⚙️ System Configuration\\n\\n🔧 CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) => \n          `• ${key}: ${val}`\n        ).join('\\n')}\\n\\n💾 STORED VARIABLES:\\n${Object.entries(variables).map(([key, val]) => \n          `• ${key}: ${Array.isArray(val) ? `Array(${val.length})` : typeof val === 'object' ? 'Object' : val}`\n        ).join('\\n')}\\n\\n🛠️ AVAILABLE SETTINGS:\\n• currency: USD, EUR, GBP, JPY\\n• precision: 0-6 decimal places\\n• dateFormat: YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY\\n• theme: dark, light, auto\\n• notifications: enabled, disabled\\n\\n💡 USAGE:\\n• CONFIG() - Show all settings\\n• CONFIG(\"setting\") - Show specific setting\\n• CONFIG(\"setting\", \"value\") - Update setting\\n\\nExample: CONFIG(\"currency\", \"EUR\")`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'config_view',\n            settings,\n            variables\n          }\n        };\n      }\n\n      if (value === undefined) {\n        // Show specific setting\n        const currentValue = processor.getSetting(setting);\n        return {\n          type: 'info',\n          content: `⚙️ Setting: ${setting}\\nCurrent Value: ${currentValue || 'Not set'}\\n\\nTo update: CONFIG(\"${setting}\", \"new_value\")`\n        };\n      }\n\n      // Update setting\n      try {\n        // Validate setting values\n        const validSettings = {\n          currency: ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD'],\n          precision: [0, 1, 2, 3, 4, 5, 6],\n          dateFormat: ['YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'],\n          theme: ['dark', 'light', 'auto'],\n          notifications: ['enabled', 'disabled']\n        };\n\n        if (validSettings[setting] && !validSettings[setting].includes(value)) {\n          return {\n            type: 'error',\n            content: `Invalid value \"${value}\" for setting \"${setting}\". Valid values: ${validSettings[setting].join(', ')}`\n          };\n        }\n\n        const oldValue = processor.getSetting(setting);\n        processor.updateSetting(setting, value);\n\n        return {\n          type: 'success',\n          content: `✅ Setting Updated\\n\\n• Setting: ${setting}\\n• Old Value: ${oldValue || 'Not set'}\\n• New Value: ${value}\\n\\nSetting will take effect immediately for new commands.`,\n          data: {\n            analysis: 'config_update',\n            setting,\n            oldValue,\n            newValue: value\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Configuration update failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  }\n};\n","/**\n * Backup Service\n * Handles data backup, restore, and synchronization operations\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { CryptoUtils } from '../utils/CryptoUtils';\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class BackupService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n    this.backupVersion = '1.0.0';\n    this.maxBackupSize = 50 * 1024 * 1024; // 50MB\n    this.maxBackups = 10; // Keep last 10 backups\n  }\n\n  /**\n   * Create a complete backup of all user data\n   */\n  async createBackup(options = {}) {\n    const {\n      includeSettings = true,\n      includeWatchlists = true,\n      includeAlerts = true,\n      includeHistory = true,\n      includeCachedData = false,\n      encrypt = false,\n      compress = true,\n      description = ''\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Collect data to backup\n      const backupData = {\n        version: this.backupVersion,\n        timestamp: new Date().toISOString(),\n        description,\n        metadata: {\n          userAgent: navigator.userAgent,\n          platform: navigator.platform,\n          language: navigator.language,\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        },\n        data: {}\n      };\n\n      // Include user settings and preferences\n      if (includeSettings) {\n        backupData.data.settings = await persistenceManager.retrieve('user_preferences') || {};\n        backupData.data.session = await persistenceManager.retrieve('session_data') || {};\n      }\n\n      // Include watchlists\n      if (includeWatchlists) {\n        backupData.data.watchlists = await persistenceManager.retrieve('watchlists') || {};\n      }\n\n      // Include alerts\n      if (includeAlerts) {\n        backupData.data.alerts = await persistenceManager.retrieve('alerts') || [];\n      }\n\n      // Include command and analysis history\n      if (includeHistory) {\n        backupData.data.commandHistory = await persistenceManager.retrieve('command_history') || [];\n        backupData.data.analysisHistory = await persistenceManager.retrieve('analysis_history') || [];\n      }\n\n      // Include cached data (optional, can be large)\n      if (includeCachedData) {\n        backupData.data.cachedData = await persistenceManager.retrieve('cached_data') || {};\n      }\n\n      // Calculate backup size\n      let backupString = JSON.stringify(backupData);\n      const originalSize = backupString.length;\n\n      if (originalSize > this.maxBackupSize) {\n        throw new Error(`Backup too large: ${originalSize} bytes exceeds ${this.maxBackupSize} bytes`);\n      }\n\n      // Compress if requested\n      if (compress) {\n        backupString = await this.compressionUtils.compress(backupString);\n        backupData.metadata.compressed = true;\n        backupData.metadata.compressionRatio = backupString.length / originalSize;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        backupString = await this.cryptoUtils.encrypt(backupString);\n        backupData.metadata.encrypted = true;\n      }\n\n      // Generate backup ID\n      const backupId = this.generateBackupId();\n      \n      // Store backup\n      await this.storeBackup(backupId, backupString, backupData.metadata);\n\n      // Cleanup old backups\n      await this.cleanupOldBackups();\n\n      return {\n        success: true,\n        backupId,\n        size: backupString.length,\n        originalSize,\n        metadata: backupData.metadata,\n        timestamp: backupData.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to create backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Restore data from backup\n   */\n  async restoreBackup(backupId, options = {}) {\n    const {\n      overwrite = false,\n      selectiveRestore = null, // Array of data types to restore\n      createBackupBeforeRestore = true\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Create backup before restore if requested\n      if (createBackupBeforeRestore) {\n        await this.createBackup({\n          description: `Auto-backup before restore from ${backupId}`,\n          compress: true\n        });\n      }\n\n      // Retrieve backup data\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      let backupString = backup.data;\n      const metadata = backup.metadata;\n\n      // Decrypt if needed\n      if (metadata.encrypted) {\n        backupString = await this.cryptoUtils.decrypt(backupString);\n      }\n\n      // Decompress if needed\n      if (metadata.compressed) {\n        backupString = await this.compressionUtils.decompress(backupString);\n      }\n\n      // Parse backup data\n      const backupData = JSON.parse(backupString);\n\n      // Validate backup version compatibility\n      if (!this.isVersionCompatible(backupData.version)) {\n        throw new Error(`Backup version ${backupData.version} is not compatible with current version ${this.backupVersion}`);\n      }\n\n      // Restore data selectively or completely\n      const dataToRestore = selectiveRestore ? \n        this.filterBackupData(backupData.data, selectiveRestore) : \n        backupData.data;\n\n      const restoreResults = {\n        restored: 0,\n        skipped: 0,\n        errors: 0,\n        details: {}\n      };\n\n      // Restore each data type\n      for (const [dataType, data] of Object.entries(dataToRestore)) {\n        try {\n          // Check if data exists and overwrite setting\n          const existing = await persistenceManager.retrieve(dataType);\n          if (existing && !overwrite) {\n            restoreResults.skipped++;\n            restoreResults.details[dataType] = 'skipped (exists)';\n            continue;\n          }\n\n          // Restore the data\n          await persistenceManager.store(dataType, data, {\n            storage: this.determineStorageType(dataType)\n          });\n\n          restoreResults.restored++;\n          restoreResults.details[dataType] = 'restored';\n\n        } catch (error) {\n          console.error(`Failed to restore ${dataType}:`, error);\n          restoreResults.errors++;\n          restoreResults.details[dataType] = `error: ${error.message}`;\n        }\n      }\n\n      return {\n        success: true,\n        backupId,\n        backupTimestamp: backupData.timestamp,\n        restoreTimestamp: new Date().toISOString(),\n        results: restoreResults\n      };\n\n    } catch (error) {\n      console.error('Failed to restore backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * List available backups\n   */\n  async listBackups() {\n    try {\n      const backupKeys = await persistenceManager.indexedDB.getKeys('export_data');\n      const backups = [];\n\n      for (const key of backupKeys) {\n        if (key.startsWith('backup_')) {\n          const backup = await persistenceManager.indexedDB.retrieve(key, { storeName: 'export_data' });\n          if (backup) {\n            backups.push({\n              id: key,\n              timestamp: backup.metadata.timestamp,\n              description: backup.metadata.description || '',\n              size: backup.metadata.size || 0,\n              compressed: backup.metadata.compressed || false,\n              encrypted: backup.metadata.encrypted || false\n            });\n          }\n        }\n      }\n\n      // Sort by timestamp (newest first)\n      backups.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n\n      return backups;\n\n    } catch (error) {\n      console.error('Failed to list backups:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a backup\n   */\n  async deleteBackup(backupId) {\n    try {\n      await persistenceManager.indexedDB.remove(backupId, { storeName: 'export_data' });\n      return true;\n    } catch (error) {\n      console.error(`Failed to delete backup ${backupId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Export backup to file\n   */\n  async exportBackupToFile(backupId, filename = null) {\n    try {\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      const exportData = {\n        backupId,\n        ...backup\n      };\n\n      const dataString = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([dataString], { type: 'application/json' });\n      \n      const suggestedFilename = filename || \n        `financeanalyst_backup_${backupId}_${new Date().toISOString().split('T')[0]}.json`;\n\n      return {\n        blob,\n        filename: suggestedFilename,\n        size: blob.size,\n        type: 'application/json'\n      };\n\n    } catch (error) {\n      console.error('Failed to export backup to file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import backup from file\n   */\n  async importBackupFromFile(fileContent) {\n    try {\n      const backupData = JSON.parse(fileContent);\n      \n      // Validate backup format\n      if (!backupData.backupId || !backupData.data || !backupData.metadata) {\n        throw new Error('Invalid backup file format');\n      }\n\n      // Store imported backup\n      await this.storeBackup(backupData.backupId, backupData.data, backupData.metadata);\n\n      return {\n        success: true,\n        backupId: backupData.backupId,\n        timestamp: backupData.metadata.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to import backup from file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get backup statistics\n   */\n  async getBackupStats() {\n    try {\n      const backups = await this.listBackups();\n      \n      const stats = {\n        totalBackups: backups.length,\n        totalSize: backups.reduce((sum, backup) => sum + (backup.size || 0), 0),\n        oldestBackup: backups.length > 0 ? backups[backups.length - 1].timestamp : null,\n        newestBackup: backups.length > 0 ? backups[0].timestamp : null,\n        encryptedBackups: backups.filter(b => b.encrypted).length,\n        compressedBackups: backups.filter(b => b.compressed).length\n      };\n\n      return stats;\n\n    } catch (error) {\n      console.error('Failed to get backup stats:', error);\n      return null;\n    }\n  }\n\n  // Private methods\n\n  /**\n   * Store backup in IndexedDB\n   */\n  async storeBackup(backupId, data, metadata) {\n    const backupRecord = {\n      id: backupId,\n      data,\n      metadata: {\n        ...metadata,\n        timestamp: new Date().toISOString(),\n        size: data.length\n      },\n      timestamp: Date.now(),\n      type: 'backup'\n    };\n\n    await persistenceManager.indexedDB.store(backupId, backupRecord, {\n      storeName: 'export_data',\n      metadata: backupRecord.metadata\n    });\n  }\n\n  /**\n   * Retrieve backup from IndexedDB\n   */\n  async retrieveBackup(backupId) {\n    return await persistenceManager.indexedDB.retrieve(backupId, { storeName: 'export_data' });\n  }\n\n  /**\n   * Generate unique backup ID\n   */\n  generateBackupId() {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `backup_${timestamp}_${random}`;\n  }\n\n  /**\n   * Cleanup old backups\n   */\n  async cleanupOldBackups() {\n    try {\n      const backups = await this.listBackups();\n      \n      if (backups.length > this.maxBackups) {\n        const backupsToDelete = backups.slice(this.maxBackups);\n        \n        for (const backup of backupsToDelete) {\n          await this.deleteBackup(backup.id);\n        }\n\n        console.log(`✅ Cleaned up ${backupsToDelete.length} old backups`);\n      }\n\n    } catch (error) {\n      console.error('Failed to cleanup old backups:', error);\n    }\n  }\n\n  /**\n   * Check if backup version is compatible\n   */\n  isVersionCompatible(backupVersion) {\n    // For now, only exact version match\n    // In the future, this could handle version compatibility matrix\n    return backupVersion === this.backupVersion;\n  }\n\n  /**\n   * Filter backup data for selective restore\n   */\n  filterBackupData(backupData, dataTypes) {\n    const filtered = {};\n    \n    dataTypes.forEach(dataType => {\n      if (backupData[dataType]) {\n        filtered[dataType] = backupData[dataType];\n      }\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Determine appropriate storage type for data\n   */\n  determineStorageType(dataType) {\n    const localStorageTypes = ['settings', 'session', 'user_preferences'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n}\n\n// Export singleton instance\nexport const backupService = new BackupService();\n","/**\n * Privacy Service\n * Handles data privacy controls, retention policies, and user data rights\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { backupService } from './BackupService';\n\nexport class PrivacyService {\n  constructor() {\n    this.retentionPolicies = {\n      command_history: 30, // days\n      analysis_history: 90,\n      cached_data: 7,\n      export_data: 30,\n      session_data: 1\n    };\n    \n    this.privacySettings = {\n      dataRetention: true,\n      analytics: false,\n      crashReporting: true,\n      dataSharing: false,\n      cookieConsent: false,\n      trackingConsent: false\n    };\n\n    this.dataCategories = {\n      essential: ['user_preferences', 'session_data', 'watchlists', 'alerts'],\n      functional: ['command_history', 'user_variables'],\n      analytics: ['usage_stats', 'performance_metrics'],\n      marketing: [], // None currently\n      external: ['cached_data'] // Data from external APIs\n    };\n  }\n\n  /**\n   * Initialize privacy service\n   */\n  async initialize() {\n    try {\n      // Load privacy settings\n      const settings = await persistenceManager.retrieve('privacy_settings');\n      if (settings) {\n        this.privacySettings = { ...this.privacySettings, ...settings };\n      }\n\n      // Load custom retention policies\n      const policies = await persistenceManager.retrieve('retention_policies');\n      if (policies) {\n        this.retentionPolicies = { ...this.retentionPolicies, ...policies };\n      }\n\n      // Schedule cleanup\n      this.scheduleCleanup();\n\n      console.log('✅ Privacy service initialized');\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize privacy service:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Update privacy settings\n   */\n  async updatePrivacySettings(newSettings) {\n    try {\n      const oldSettings = { ...this.privacySettings };\n      this.privacySettings = { ...this.privacySettings, ...newSettings };\n\n      // Save updated settings\n      await persistenceManager.store('privacy_settings', this.privacySettings, {\n        storage: 'localStorage'\n      });\n\n      // Handle setting changes\n      await this.handlePrivacySettingChanges(oldSettings, this.privacySettings);\n\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('Failed to update privacy settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle privacy setting changes\n   */\n  async handlePrivacySettingChanges(oldSettings, newSettings) {\n    // If data retention was disabled, clean up non-essential data\n    if (oldSettings.dataRetention && !newSettings.dataRetention) {\n      await this.cleanupNonEssentialData();\n    }\n\n    // If analytics was disabled, clean up analytics data\n    if (oldSettings.analytics && !newSettings.analytics) {\n      await this.cleanupAnalyticsData();\n    }\n\n    // If data sharing was disabled, remove shared data markers\n    if (oldSettings.dataSharing && !newSettings.dataSharing) {\n      await this.removeDataSharingMarkers();\n    }\n  }\n\n  /**\n   * Set data retention policy\n   */\n  async setRetentionPolicy(dataType, days) {\n    try {\n      this.retentionPolicies[dataType] = days;\n\n      // Save updated policies\n      await persistenceManager.store('retention_policies', this.retentionPolicies, {\n        storage: 'localStorage'\n      });\n\n      // Apply new policy immediately\n      await this.cleanupExpiredData(dataType);\n\n      return { success: true, policy: { [dataType]: days } };\n\n    } catch (error) {\n      console.error('Failed to set retention policy:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up expired data based on retention policies\n   */\n  async cleanupExpiredData(specificType = null) {\n    const results = {\n      cleaned: 0,\n      errors: 0,\n      details: {}\n    };\n\n    try {\n      const typesToClean = specificType ? [specificType] : Object.keys(this.retentionPolicies);\n\n      for (const dataType of typesToClean) {\n        const retentionDays = this.retentionPolicies[dataType];\n        if (!retentionDays) continue;\n\n        try {\n          const cleaned = await this.cleanupDataType(dataType, retentionDays);\n          results.cleaned += cleaned;\n          results.details[dataType] = cleaned;\n\n        } catch (error) {\n          console.error(`Failed to cleanup ${dataType}:`, error);\n          results.errors++;\n          results.details[dataType] = `Error: ${error.message}`;\n        }\n      }\n\n      return results;\n\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up specific data type\n   */\n  async cleanupDataType(dataType, retentionDays) {\n    const cutoffTime = Date.now() - (retentionDays * 24 * 60 * 60 * 1000);\n    let cleaned = 0;\n\n    try {\n      switch (dataType) {\n        case 'command_history':\n          cleaned = await this.cleanupCommandHistory(cutoffTime);\n          break;\n\n        case 'analysis_history':\n          cleaned = await this.cleanupAnalysisHistory(cutoffTime);\n          break;\n\n        case 'cached_data':\n          cleaned = await this.cleanupCachedData(cutoffTime);\n          break;\n\n        case 'export_data':\n          cleaned = await this.cleanupExportData(cutoffTime);\n          break;\n\n        case 'session_data':\n          cleaned = await this.cleanupSessionData(cutoffTime);\n          break;\n\n        default:\n          console.warn(`Unknown data type for cleanup: ${dataType}`);\n      }\n\n      return cleaned;\n\n    } catch (error) {\n      console.error(`Failed to cleanup ${dataType}:`, error);\n      return 0;\n    }\n  }\n\n  /**\n   * Clean up command history\n   */\n  async cleanupCommandHistory(cutoffTime) {\n    const history = await persistenceManager.retrieve('command_history') || [];\n    const filtered = history.filter(entry => \n      new Date(entry.timestamp).getTime() > cutoffTime\n    );\n\n    if (filtered.length < history.length) {\n      await persistenceManager.store('command_history', filtered, {\n        storage: 'indexedDB'\n      });\n      return history.length - filtered.length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Clean up analysis history\n   */\n  async cleanupAnalysisHistory(cutoffTime) {\n    // Get all analysis history from IndexedDB\n    const allHistory = await persistenceManager.indexedDB.getAll('analysis_history');\n    let cleaned = 0;\n\n    for (const entry of allHistory) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'analysis_history' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up cached data\n   */\n  async cleanupCachedData(cutoffTime) {\n    const allCached = await persistenceManager.indexedDB.getAll('cached_data');\n    let cleaned = 0;\n\n    for (const entry of allCached) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.key, { storeName: 'cached_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up export data\n   */\n  async cleanupExportData(cutoffTime) {\n    const allExports = await persistenceManager.indexedDB.getAll('export_data');\n    let cleaned = 0;\n\n    for (const entry of allExports) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'export_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up session data\n   */\n  async cleanupSessionData(cutoffTime) {\n    // Session data is typically current, but clean up old session logs if any\n    return 0; // Placeholder\n  }\n\n  /**\n   * Clean up non-essential data\n   */\n  async cleanupNonEssentialData() {\n    const nonEssentialTypes = [\n      ...this.dataCategories.functional,\n      ...this.dataCategories.analytics,\n      ...this.dataCategories.external\n    ];\n\n    let cleaned = 0;\n\n    for (const dataType of nonEssentialTypes) {\n      try {\n        if (dataType === 'command_history') {\n          await persistenceManager.store('command_history', [], { storage: 'indexedDB' });\n          cleaned++;\n        } else if (dataType === 'cached_data') {\n          await persistenceManager.indexedDB.clear('cached_data');\n          cleaned++;\n        }\n        // Add more cleanup logic as needed\n      } catch (error) {\n        console.error(`Failed to cleanup ${dataType}:`, error);\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up analytics data\n   */\n  async cleanupAnalyticsData() {\n    const analyticsTypes = this.dataCategories.analytics;\n    \n    for (const dataType of analyticsTypes) {\n      try {\n        await persistenceManager.remove(dataType);\n      } catch (error) {\n        console.error(`Failed to cleanup analytics data ${dataType}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Remove data sharing markers\n   */\n  async removeDataSharingMarkers() {\n    // Remove any markers that indicate data has been shared\n    // This is a placeholder for future implementation\n    console.log('Data sharing markers removed');\n  }\n\n  /**\n   * Export user data (GDPR compliance)\n   */\n  async exportUserData(options = {}) {\n    const {\n      includeEssential = true,\n      includeFunctional = true,\n      includeAnalytics = false,\n      format = 'json'\n    } = options;\n\n    try {\n      const exportData = {\n        exportTimestamp: new Date().toISOString(),\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        data: {}\n      };\n\n      // Include data based on categories\n      if (includeEssential) {\n        for (const dataType of this.dataCategories.essential) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeFunctional) {\n        for (const dataType of this.dataCategories.functional) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeAnalytics) {\n        for (const dataType of this.dataCategories.analytics) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      return {\n        success: true,\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete all user data (Right to be forgotten)\n   */\n  async deleteAllUserData(confirmation = false) {\n    if (!confirmation) {\n      throw new Error('Data deletion requires explicit confirmation');\n    }\n\n    try {\n      // Create final backup\n      const backup = await backupService.createBackup({\n        description: 'Final backup before data deletion',\n        compress: true,\n        encrypt: true\n      });\n\n      // Clear all storage\n      await persistenceManager.clear({ storage: 'both', confirm: true });\n\n      // Clear browser storage\n      localStorage.clear();\n      \n      // Clear IndexedDB\n      if (window.indexedDB) {\n        const databases = await indexedDB.databases();\n        for (const db of databases) {\n          if (db.name.includes('FinanceAnalyst')) {\n            indexedDB.deleteDatabase(db.name);\n          }\n        }\n      }\n\n      return {\n        success: true,\n        backup: backup.backupId,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('Failed to delete user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get privacy compliance report\n   */\n  async getPrivacyReport() {\n    try {\n      const storageStats = await persistenceManager.getStorageStats();\n      const cleanupResults = await this.cleanupExpiredData();\n\n      return {\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        dataCategories: this.dataCategories,\n        storageStats,\n        lastCleanup: cleanupResults,\n        compliance: {\n          gdprCompliant: this.privacySettings.dataRetention,\n          ccpaCompliant: !this.privacySettings.dataSharing,\n          retentionPoliciesActive: Object.keys(this.retentionPolicies).length > 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to generate privacy report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule automatic cleanup\n   */\n  scheduleCleanup() {\n    // Run cleanup daily\n    setInterval(async () => {\n      try {\n        await this.cleanupExpiredData();\n        console.log('✅ Scheduled privacy cleanup completed');\n      } catch (error) {\n        console.error('❌ Scheduled privacy cleanup failed:', error);\n      }\n    }, 24 * 60 * 60 * 1000); // 24 hours\n\n    // Run cleanup on page load\n    setTimeout(() => {\n      this.cleanupExpiredData().catch(error => {\n        console.error('Initial privacy cleanup failed:', error);\n      });\n    }, 5000); // 5 seconds after initialization\n  }\n\n  /**\n   * Get privacy settings\n   */\n  getPrivacySettings() {\n    return { ...this.privacySettings };\n  }\n\n  /**\n   * Get retention policies\n   */\n  getRetentionPolicies() {\n    return { ...this.retentionPolicies };\n  }\n}\n\n// Export singleton instance\nexport const privacyService = new PrivacyService();\n","/**\n * Sync Service\n * Handles data synchronization for future cloud storage integration\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { backupService } from './BackupService';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nexport class SyncService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.syncEndpoint = null; // Future cloud endpoint\n    this.syncInterval = 5 * 60 * 1000; // 5 minutes\n    this.lastSyncTime = null;\n    this.syncInProgress = false;\n    this.conflictResolutionStrategy = 'client_wins'; // client_wins, server_wins, merge\n    this.listeners = new Set();\n    \n    // Sync queue for offline operations\n    this.syncQueue = [];\n    this.maxQueueSize = 100;\n  }\n\n  /**\n   * Initialize sync service\n   */\n  async initialize(config = {}) {\n    try {\n      this.syncEndpoint = config.endpoint || null;\n      this.syncInterval = config.interval || this.syncInterval;\n      this.conflictResolutionStrategy = config.conflictResolution || this.conflictResolutionStrategy;\n\n      // Load last sync time\n      this.lastSyncTime = await persistenceManager.retrieve('last_sync_time');\n      \n      // Load sync queue\n      const queue = await persistenceManager.retrieve('sync_queue');\n      if (queue && Array.isArray(queue)) {\n        this.syncQueue = queue;\n      }\n\n      // Setup periodic sync if endpoint is configured\n      if (this.syncEndpoint) {\n        this.setupPeriodicSync();\n      }\n\n      console.log('✅ Sync service initialized');\n      return { success: true, endpoint: this.syncEndpoint };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize sync service:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Queue a sync operation\n   */\n  async queueSyncOperation(operation) {\n    try {\n      const syncOperation = {\n        id: this.generateOperationId(),\n        type: operation.type, // 'create', 'update', 'delete'\n        dataType: operation.dataType,\n        key: operation.key,\n        data: operation.data,\n        timestamp: Date.now(),\n        retries: 0\n      };\n\n      this.syncQueue.push(syncOperation);\n\n      // Trim queue if too large\n      if (this.syncQueue.length > this.maxQueueSize) {\n        this.syncQueue = this.syncQueue.slice(-this.maxQueueSize);\n      }\n\n      // Save queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Attempt immediate sync if online\n      if (navigator.onLine && this.syncEndpoint) {\n        this.processSyncQueue().catch(error => {\n          console.error('Failed to process sync queue:', error);\n        });\n      }\n\n      return syncOperation.id;\n\n    } catch (error) {\n      console.error('Failed to queue sync operation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process sync queue\n   */\n  async processSyncQueue() {\n    if (this.syncInProgress || !this.syncEndpoint || !navigator.onLine) {\n      return { processed: 0, failed: 0 };\n    }\n\n    this.syncInProgress = true;\n    let processed = 0;\n    let failed = 0;\n\n    try {\n      // Process operations in order\n      const operations = [...this.syncQueue];\n      \n      for (const operation of operations) {\n        try {\n          await this.syncOperation(operation);\n          \n          // Remove from queue on success\n          this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n          processed++;\n\n        } catch (error) {\n          console.error(`Failed to sync operation ${operation.id}:`, error);\n          \n          // Increment retry count\n          operation.retries++;\n          \n          // Remove if too many retries\n          if (operation.retries > 3) {\n            this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n            failed++;\n          }\n        }\n      }\n\n      // Save updated queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('syncCompleted', { processed, failed });\n\n      return { processed, failed };\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Sync a single operation (placeholder for future implementation)\n   */\n  async syncOperation(operation) {\n    // This is a placeholder for future cloud sync implementation\n    // For now, we'll simulate the operation\n    \n    if (!this.syncEndpoint) {\n      throw new Error('No sync endpoint configured');\n    }\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // In a real implementation, this would:\n    // 1. Send the operation to the cloud endpoint\n    // 2. Handle authentication\n    // 3. Manage conflicts\n    // 4. Return success/failure\n\n    console.log(`Simulated sync operation: ${operation.type} ${operation.dataType}:${operation.key}`);\n    \n    return { success: true, operation: operation.id };\n  }\n\n  /**\n   * Perform full sync with cloud\n   */\n  async performFullSync() {\n    if (this.syncInProgress || !this.syncEndpoint) {\n      return { success: false, reason: 'Sync in progress or no endpoint' };\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Create backup before sync\n      const backup = await backupService.createBackup({\n        description: 'Pre-sync backup',\n        compress: true\n      });\n\n      // Get local data\n      const localData = await this.getLocalSyncData();\n      \n      // Get remote data (placeholder)\n      const remoteData = await this.getRemoteData();\n\n      // Resolve conflicts\n      const mergedData = await this.resolveConflicts(localData, remoteData);\n\n      // Apply merged data locally\n      await this.applyMergedData(mergedData);\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Clear sync queue\n      this.syncQueue = [];\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('fullSyncCompleted', { backup: backup.backupId });\n\n      return { \n        success: true, \n        timestamp: this.lastSyncTime,\n        backup: backup.backupId \n      };\n\n    } catch (error) {\n      console.error('Full sync failed:', error);\n      \n      // Notify listeners\n      this.notifyListeners('syncFailed', { error: error.message });\n      \n      throw error;\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Get local data for sync\n   */\n  async getLocalSyncData() {\n    const data = {};\n    \n    // Get all syncable data types\n    const syncableTypes = [\n      'watchlists',\n      'alerts', \n      'user_preferences',\n      'user_variables'\n    ];\n\n    for (const type of syncableTypes) {\n      const typeData = await persistenceManager.retrieve(type);\n      if (typeData) {\n        data[type] = {\n          data: typeData,\n          lastModified: Date.now(), // In real implementation, track actual modification times\n          checksum: await this.calculateChecksum(typeData)\n        };\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Get remote data (placeholder)\n   */\n  async getRemoteData() {\n    // Placeholder for future cloud implementation\n    // This would fetch data from the cloud endpoint\n    return {};\n  }\n\n  /**\n   * Resolve conflicts between local and remote data\n   */\n  async resolveConflicts(localData, remoteData) {\n    const merged = {};\n\n    // Get all data types from both sources\n    const allTypes = new Set([\n      ...Object.keys(localData),\n      ...Object.keys(remoteData)\n    ]);\n\n    for (const type of allTypes) {\n      const local = localData[type];\n      const remote = remoteData[type];\n\n      if (!local && remote) {\n        // Only remote data exists\n        merged[type] = remote;\n      } else if (local && !remote) {\n        // Only local data exists\n        merged[type] = local;\n      } else if (local && remote) {\n        // Both exist - resolve conflict\n        merged[type] = await this.resolveDataConflict(type, local, remote);\n      }\n    }\n\n    return merged;\n  }\n\n  /**\n   * Resolve conflict for a specific data type\n   */\n  async resolveDataConflict(type, local, remote) {\n    switch (this.conflictResolutionStrategy) {\n      case 'client_wins':\n        return local;\n      \n      case 'server_wins':\n        return remote;\n      \n      case 'merge':\n        return await this.mergeData(type, local, remote);\n      \n      case 'latest_wins':\n        return local.lastModified > remote.lastModified ? local : remote;\n      \n      default:\n        return local;\n    }\n  }\n\n  /**\n   * Merge data intelligently\n   */\n  async mergeData(type, local, remote) {\n    // Intelligent merging based on data type\n    switch (type) {\n      case 'watchlists':\n        return this.mergeWatchlists(local.data, remote.data);\n      \n      case 'alerts':\n        return this.mergeAlerts(local.data, remote.data);\n      \n      case 'user_preferences':\n        return { ...remote.data, ...local.data }; // Local preferences win\n      \n      default:\n        return local; // Default to local data\n    }\n  }\n\n  /**\n   * Merge watchlists\n   */\n  mergeWatchlists(local, remote) {\n    const merged = { ...remote };\n    \n    // Add local watchlists, keeping newer versions\n    Object.entries(local).forEach(([name, watchlist]) => {\n      if (!merged[name] || \n          new Date(watchlist.lastUpdated) > new Date(merged[name].lastUpdated)) {\n        merged[name] = watchlist;\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Merge alerts\n   */\n  mergeAlerts(local, remote) {\n    const merged = [...remote];\n    const remoteIds = new Set(remote.map(alert => alert.id));\n    \n    // Add local alerts that don't exist remotely\n    local.forEach(alert => {\n      if (!remoteIds.has(alert.id)) {\n        merged.push(alert);\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Apply merged data locally\n   */\n  async applyMergedData(mergedData) {\n    for (const [type, data] of Object.entries(mergedData)) {\n      await persistenceManager.store(type, data.data, {\n        storage: this.determineStorageType(type)\n      });\n    }\n  }\n\n  /**\n   * Calculate checksum for data integrity\n   */\n  async calculateChecksum(data) {\n    const dataString = JSON.stringify(data);\n    return await this.cryptoUtils.hash(dataString);\n  }\n\n  /**\n   * Setup periodic sync\n   */\n  setupPeriodicSync() {\n    setInterval(() => {\n      if (navigator.onLine && !this.syncInProgress) {\n        this.processSyncQueue().catch(error => {\n          console.error('Periodic sync failed:', error);\n        });\n      }\n    }, this.syncInterval);\n\n    // Sync when coming online\n    window.addEventListener('online', () => {\n      this.processSyncQueue().catch(error => {\n        console.error('Online sync failed:', error);\n      });\n    });\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus() {\n    return {\n      lastSyncTime: this.lastSyncTime,\n      syncInProgress: this.syncInProgress,\n      queueSize: this.syncQueue.length,\n      isOnline: navigator.onLine,\n      hasEndpoint: !!this.syncEndpoint,\n      strategy: this.conflictResolutionStrategy\n    };\n  }\n\n  /**\n   * Add event listener\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  generateOperationId() {\n    return 'sync_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  determineStorageType(dataType) {\n    const localStorageTypes = ['user_preferences', 'user_variables'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in sync event listener:', error);\n      }\n    });\n  }\n}\n\n// Export singleton instance\nexport const syncService = new SyncService();\n","/**\n * Persistence Test Suite\n * Browser-based integration tests for the persistence layer\n */\n\nimport { persistenceManager } from './PersistenceManager';\nimport { backupService } from './BackupService';\nimport { privacyService } from './PrivacyService';\nimport { syncService } from './SyncService';\n\nexport class PersistenceTestSuite {\n  constructor() {\n    this.testResults = [];\n    this.isRunning = false;\n  }\n\n  /**\n   * Run all persistence tests\n   */\n  async runAllTests() {\n    if (this.isRunning) {\n      console.warn('Tests are already running');\n      return this.testResults;\n    }\n\n    this.isRunning = true;\n    this.testResults = [];\n    \n    console.log('🧪 Starting Persistence Layer Test Suite...');\n\n    try {\n      // Core persistence tests\n      await this.testPersistenceManagerInitialization();\n      await this.testDataStorageAndRetrieval();\n      await this.testDataRemoval();\n      await this.testStorageStatistics();\n      \n      // Backup service tests\n      await this.testBackupCreation();\n      await this.testBackupListing();\n      await this.testBackupRestore();\n      \n      // Privacy service tests\n      await this.testPrivacySettings();\n      await this.testDataCleanup();\n      \n      // Sync service tests\n      await this.testSyncStatus();\n      \n      // Integration tests\n      await this.testDataLifecycle();\n      await this.testErrorHandling();\n\n      const passed = this.testResults.filter(r => r.passed).length;\n      const total = this.testResults.length;\n      \n      console.log(`✅ Test Suite Complete: ${passed}/${total} tests passed`);\n      \n      return {\n        passed,\n        total,\n        success: passed === total,\n        results: this.testResults\n      };\n\n    } catch (error) {\n      console.error('❌ Test suite failed:', error);\n      return {\n        passed: 0,\n        total: this.testResults.length,\n        success: false,\n        error: error.message,\n        results: this.testResults\n      };\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Test persistence manager initialization\n   */\n  async testPersistenceManagerInitialization() {\n    const testName = 'Persistence Manager Initialization';\n    \n    try {\n      const result = await persistenceManager.initialize();\n      \n      this.assert(\n        result.success === true,\n        testName,\n        'Should initialize successfully',\n        result\n      );\n      \n      this.assert(\n        persistenceManager.isInitialized === true,\n        testName,\n        'Should set initialized flag',\n        { isInitialized: persistenceManager.isInitialized }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test data storage and retrieval\n   */\n  async testDataStorageAndRetrieval() {\n    const testName = 'Data Storage and Retrieval';\n    \n    try {\n      const testData = {\n        test: true,\n        timestamp: Date.now(),\n        data: ['item1', 'item2', 'item3']\n      };\n\n      // Test localStorage storage\n      const storeResult = await persistenceManager.store('test_data', testData, {\n        storage: 'localStorage'\n      });\n      \n      this.assert(\n        storeResult.success === true,\n        testName,\n        'Should store data successfully',\n        storeResult\n      );\n\n      // Test data retrieval\n      const retrievedData = await persistenceManager.retrieve('test_data');\n      \n      this.assert(\n        JSON.stringify(retrievedData) === JSON.stringify(testData),\n        testName,\n        'Should retrieve stored data correctly',\n        { stored: testData, retrieved: retrievedData }\n      );\n\n      // Test IndexedDB storage\n      const indexedStoreResult = await persistenceManager.store('test_indexed_data', testData, {\n        storage: 'indexedDB'\n      });\n      \n      this.assert(\n        indexedStoreResult.success === true,\n        testName,\n        'Should store data in IndexedDB',\n        indexedStoreResult\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test data removal\n   */\n  async testDataRemoval() {\n    const testName = 'Data Removal';\n    \n    try {\n      // Store test data first\n      await persistenceManager.store('test_removal', { data: 'to_be_removed' });\n      \n      // Remove the data\n      const removeResult = await persistenceManager.remove('test_removal');\n      \n      this.assert(\n        removeResult === true,\n        testName,\n        'Should remove data successfully',\n        { removeResult }\n      );\n\n      // Verify data is gone\n      const retrievedData = await persistenceManager.retrieve('test_removal');\n      \n      this.assert(\n        retrievedData === null,\n        testName,\n        'Should return null for removed data',\n        { retrievedData }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test storage statistics\n   */\n  async testStorageStatistics() {\n    const testName = 'Storage Statistics';\n    \n    try {\n      const stats = await persistenceManager.getStorageStats();\n      \n      this.assert(\n        stats !== null && typeof stats === 'object',\n        testName,\n        'Should return storage statistics',\n        stats\n      );\n\n      this.assert(\n        typeof stats.total.used === 'number',\n        testName,\n        'Should include total usage',\n        { totalUsed: stats.total.used }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test backup creation\n   */\n  async testBackupCreation() {\n    const testName = 'Backup Creation';\n    \n    try {\n      // Store some test data first\n      await persistenceManager.store('backup_test_data', { \n        test: 'backup_data',\n        timestamp: Date.now()\n      });\n\n      const backup = await backupService.createBackup({\n        description: 'Test backup',\n        compress: true\n      });\n      \n      this.assert(\n        backup.success === true,\n        testName,\n        'Should create backup successfully',\n        backup\n      );\n\n      this.assert(\n        typeof backup.backupId === 'string',\n        testName,\n        'Should return backup ID',\n        { backupId: backup.backupId }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test backup listing\n   */\n  async testBackupListing() {\n    const testName = 'Backup Listing';\n    \n    try {\n      const backups = await backupService.listBackups();\n      \n      this.assert(\n        Array.isArray(backups),\n        testName,\n        'Should return array of backups',\n        { backupsCount: backups.length }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test backup restore\n   */\n  async testBackupRestore() {\n    const testName = 'Backup Restore';\n    \n    try {\n      // Get available backups\n      const backups = await backupService.listBackups();\n      \n      if (backups.length > 0) {\n        const backupId = backups[0].id;\n        \n        const restoreResult = await backupService.restoreBackup(backupId, {\n          overwrite: false\n        });\n        \n        this.assert(\n          restoreResult.success === true,\n          testName,\n          'Should restore backup successfully',\n          restoreResult\n        );\n      } else {\n        this.recordSkip(testName, 'No backups available for restore test');\n      }\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test privacy settings\n   */\n  async testPrivacySettings() {\n    const testName = 'Privacy Settings';\n    \n    try {\n      const settings = privacyService.getPrivacySettings();\n      \n      this.assert(\n        typeof settings === 'object',\n        testName,\n        'Should return privacy settings',\n        settings\n      );\n\n      // Test updating a setting\n      await privacyService.updatePrivacySettings({ analytics: false });\n      \n      const updatedSettings = privacyService.getPrivacySettings();\n      \n      this.assert(\n        updatedSettings.analytics === false,\n        testName,\n        'Should update privacy settings',\n        { analytics: updatedSettings.analytics }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test data cleanup\n   */\n  async testDataCleanup() {\n    const testName = 'Data Cleanup';\n    \n    try {\n      const cleanupResult = await privacyService.cleanupExpiredData();\n      \n      this.assert(\n        typeof cleanupResult.cleaned === 'number',\n        testName,\n        'Should return cleanup results',\n        cleanupResult\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test sync status\n   */\n  async testSyncStatus() {\n    const testName = 'Sync Status';\n    \n    try {\n      const status = syncService.getSyncStatus();\n      \n      this.assert(\n        typeof status === 'object',\n        testName,\n        'Should return sync status',\n        status\n      );\n\n      this.assert(\n        typeof status.isOnline === 'boolean',\n        testName,\n        'Should include online status',\n        { isOnline: status.isOnline }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test complete data lifecycle\n   */\n  async testDataLifecycle() {\n    const testName = 'Data Lifecycle';\n    \n    try {\n      const testKey = 'lifecycle_test';\n      const testData = { lifecycle: true, step: 1 };\n\n      // Store\n      await persistenceManager.store(testKey, testData);\n      \n      // Retrieve\n      const retrieved = await persistenceManager.retrieve(testKey);\n      \n      // Update\n      const updatedData = { ...testData, step: 2 };\n      await persistenceManager.store(testKey, updatedData);\n      \n      // Retrieve updated\n      const retrievedUpdated = await persistenceManager.retrieve(testKey);\n      \n      // Remove\n      await persistenceManager.remove(testKey);\n      \n      // Verify removal\n      const retrievedAfterRemoval = await persistenceManager.retrieve(testKey);\n      \n      this.assert(\n        retrieved.step === 1 && \n        retrievedUpdated.step === 2 && \n        retrievedAfterRemoval === null,\n        testName,\n        'Should handle complete data lifecycle',\n        { \n          initial: retrieved?.step, \n          updated: retrievedUpdated?.step, \n          afterRemoval: retrievedAfterRemoval \n        }\n      );\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  /**\n   * Test error handling\n   */\n  async testErrorHandling() {\n    const testName = 'Error Handling';\n    \n    try {\n      // Test invalid data retrieval\n      const invalidResult = await persistenceManager.retrieve('non_existent_key_12345');\n      \n      this.assert(\n        invalidResult === null,\n        testName,\n        'Should handle non-existent keys gracefully',\n        { invalidResult }\n      );\n\n      // Test invalid backup restore\n      try {\n        await backupService.restoreBackup('invalid_backup_id');\n        this.recordFailure(testName, 'Should have thrown error for invalid backup ID');\n      } catch (error) {\n        this.assert(\n          true,\n          testName,\n          'Should throw error for invalid backup ID',\n          { error: error.message }\n        );\n      }\n\n    } catch (error) {\n      this.recordFailure(testName, error.message);\n    }\n  }\n\n  // Helper methods\n\n  assert(condition, testName, description, data = null) {\n    const result = {\n      testName,\n      description,\n      passed: !!condition,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n\n    if (condition) {\n      console.log(`✅ ${testName}: ${description}`);\n    } else {\n      console.error(`❌ ${testName}: ${description}`, data);\n    }\n  }\n\n  recordFailure(testName, error) {\n    const result = {\n      testName,\n      description: 'Test failed with error',\n      passed: false,\n      error,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.error(`❌ ${testName}: ${error}`);\n  }\n\n  recordSkip(testName, reason) {\n    const result = {\n      testName,\n      description: 'Test skipped',\n      passed: true,\n      skipped: true,\n      reason,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.log(`⏭️ ${testName}: Skipped - ${reason}`);\n  }\n\n  /**\n   * Get test results summary\n   */\n  getTestSummary() {\n    const total = this.testResults.length;\n    const passed = this.testResults.filter(r => r.passed).length;\n    const failed = this.testResults.filter(r => !r.passed).length;\n    const skipped = this.testResults.filter(r => r.skipped).length;\n\n    return {\n      total,\n      passed,\n      failed,\n      skipped,\n      successRate: total > 0 ? (passed / total) * 100 : 0,\n      results: this.testResults\n    };\n  }\n}\n\n// Export singleton instance\nexport const persistenceTestSuite = new PersistenceTestSuite();\n\n// Global test function for browser console\nwindow.testPersistence = () => persistenceTestSuite.runAllTests();\n","/**\n * Persistence Commands\n * Commands for managing data persistence, backup, and privacy\n */\n\nimport { persistenceManager } from '../persistence/PersistenceManager';\nimport { backupService } from '../persistence/BackupService';\nimport { privacyService } from '../persistence/PrivacyService';\nimport { syncService } from '../persistence/SyncService';\nimport { persistenceTestSuite } from '../persistence/PersistenceTestSuite';\nimport { formatNumber, formatPercentage } from '../../utils/dataTransformation';\n\nexport const persistenceCommands = {\n  BACKUP_CREATE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [description] = parsedCommand.parameters;\n      \n      try {\n        const backup = await backupService.createBackup({\n          description: description || 'Manual backup',\n          includeSettings: true,\n          includeWatchlists: true,\n          includeAlerts: true,\n          includeHistory: true,\n          compress: true,\n          encrypt: false\n        });\n\n        const content = `💾 Backup Created Successfully\\n\\n📋 BACKUP DETAILS:\\n• Backup ID: ${backup.backupId}\\n• Size: ${formatNumber(backup.size / 1024, 1)} KB\\n• Original Size: ${formatNumber(backup.originalSize / 1024, 1)} KB\\n• Compression Ratio: ${formatPercentage(backup.metadata.compressionRatio || 0)}\\n• Timestamp: ${backup.timestamp}\\n• Description: ${description || 'Manual backup'}\\n\\n💡 BACKUP INCLUDES:\\n• User preferences and settings\\n• Watchlists and alerts\\n• Command and analysis history\\n• All user variables\\n\\n🔧 MANAGEMENT:\\n• Use BACKUP_LIST() to view all backups\\n• Use BACKUP_RESTORE(id) to restore from backup\\n• Use BACKUP_EXPORT(id) to download backup file\\n\\n✅ Your data is now safely backed up and can be restored at any time.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_create',\n            backup\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  },\n\n  BACKUP_LIST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const backups = await backupService.listBackups();\n        const stats = await backupService.getBackupStats();\n\n        if (backups.length === 0) {\n          return {\n            type: 'info',\n            content: `📁 No Backups Found\\n\\nYou haven't created any backups yet.\\n\\n💡 CREATE YOUR FIRST BACKUP:\\n• Use BACKUP_CREATE() to create a backup\\n• Use BACKUP_CREATE(\"description\") to add a description\\n\\nBackups help protect your data and allow you to restore previous states.`\n          };\n        }\n\n        const content = `📁 Backup List (${backups.length} backups)\\n\\n📊 BACKUP STATISTICS:\\n• Total Backups: ${stats.totalBackups}\\n• Total Size: ${formatNumber(stats.totalSize / 1024, 1)} KB\\n• Oldest: ${stats.oldestBackup ? new Date(stats.oldestBackup).toLocaleDateString() : 'N/A'}\\n• Newest: ${stats.newestBackup ? new Date(stats.newestBackup).toLocaleDateString() : 'N/A'}\\n• Encrypted: ${stats.encryptedBackups}\\n• Compressed: ${stats.compressedBackups}\\n\\n📋 AVAILABLE BACKUPS:\\n${backups.slice(0, 10).map((backup, index) => {\n          const date = new Date(backup.timestamp).toLocaleString();\n          const size = formatNumber(backup.size / 1024, 1);\n          const features = [];\n          if (backup.compressed) features.push('📦 Compressed');\n          if (backup.encrypted) features.push('🔒 Encrypted');\n          \n          return `${index + 1}. ${backup.id}\\n   📅 ${date}\\n   📏 ${size} KB\\n   📝 ${backup.description || 'No description'}\\n   ${features.join(' ')}`;\n        }).join('\\n\\n')}\\n\\n🔧 BACKUP COMMANDS:\\n• BACKUP_RESTORE(id) - Restore from backup\\n• BACKUP_EXPORT(id) - Export backup to file\\n• BACKUP_DELETE(id) - Delete backup\\n• BACKUP_CREATE() - Create new backup\\n\\n💡 TIP: Use the backup ID (not the number) for restore operations.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_list',\n            backups,\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to list backups: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  BACKUP_RESTORE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [backupId, overwrite = 'false'] = parsedCommand.parameters;\n      \n      if (!backupId) {\n        return {\n          type: 'error',\n          content: 'BACKUP_RESTORE requires a backup ID. Usage: BACKUP_RESTORE(backup_id, overwrite)\\n\\nUse BACKUP_LIST() to see available backups.'\n        };\n      }\n\n      try {\n        const shouldOverwrite = overwrite.toLowerCase() === 'true';\n        \n        const result = await backupService.restoreBackup(backupId, {\n          overwrite: shouldOverwrite,\n          createBackupBeforeRestore: true\n        });\n\n        const content = `🔄 Backup Restored Successfully\\n\\n📋 RESTORE DETAILS:\\n• Backup ID: ${result.backupId}\\n• Backup Date: ${new Date(result.backupTimestamp).toLocaleString()}\\n• Restore Date: ${new Date(result.restoreTimestamp).toLocaleString()}\\n• Overwrite Mode: ${shouldOverwrite ? 'Enabled' : 'Disabled'}\\n\\n📊 RESTORE RESULTS:\\n• Items Restored: ${result.results.restored}\\n• Items Skipped: ${result.results.skipped}\\n• Errors: ${result.results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(result.results.details).map(([item, status]) => \n          `• ${item}: ${status}`\n        ).join('\\n')}\\n\\n⚠️ IMPORTANT:\\n• A backup was created before restore\\n• Refresh the page to see all changes\\n• Some settings may require restart to take effect\\n\\n✅ Your data has been restored from the selected backup.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_restore',\n            result\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup restore failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  },\n\n  STORAGE_STATS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const stats = await persistenceManager.getStorageStats();\n        \n        if (!stats) {\n          return {\n            type: 'error',\n            content: 'Unable to retrieve storage statistics. Persistence layer may not be initialized.'\n          };\n        }\n\n        const totalUsedMB = stats.total.used / (1024 * 1024);\n        const totalAvailableMB = stats.total.available / (1024 * 1024);\n        const quotaMB = stats.total.quota / (1024 * 1024);\n\n        const content = `💾 Storage Statistics\\n\\n📊 OVERALL USAGE:\\n• Total Used: ${formatNumber(totalUsedMB, 2)} MB\\n• Total Available: ${formatNumber(totalAvailableMB, 2)} MB\\n• Storage Quota: ${formatNumber(quotaMB, 2)} MB\\n• Usage Percentage: ${formatPercentage(stats.total.usagePercentage / 100)}\\n\\n📱 LOCAL STORAGE:\\n• Used: ${formatNumber(stats.localStorage.used / 1024, 1)} KB\\n• Items: ${stats.localStorage.keys}\\n• Usage: ${formatPercentage(stats.localStorage.usagePercentage / 100)}\\n• Status: ${stats.localStorage.available ? '✅ Available' : '❌ Unavailable'}\\n\\n🗄️ INDEXED DB:\\n• Used: ${formatNumber(stats.indexedDB.used / 1024, 1)} KB\\n• Records: ${stats.indexedDB.total.records}\\n• Stores: ${Object.keys(stats.indexedDB.stores).length}\\n• Status: ${stats.indexedDB.available ? '✅ Available' : '❌ Unavailable'}\\n\\n📋 STORE BREAKDOWN:\\n${Object.entries(stats.indexedDB.stores).map(([store, data]) => \n          `• ${store}: ${data.records} records (${formatNumber(data.size / 1024, 1)} KB)`\n        ).join('\\n')}\\n\\n⚠️ STORAGE HEALTH:\\n${stats.total.usagePercentage > 90 ? '🔴 Critical: Storage almost full' : stats.total.usagePercentage > 75 ? '🟡 Warning: High storage usage' : '🟢 Good: Storage usage is healthy'}\\n\\n💡 OPTIMIZATION TIPS:\\n${stats.total.usagePercentage > 75 ? '• Consider clearing old cached data\\n• Delete unnecessary backups\\n• Use PRIVACY_CLEANUP() to remove expired data\\n' : ''}• Regular backups help manage storage\\n• Use compression for large datasets\\n• Monitor usage with this command\\n\\n🔧 MANAGEMENT COMMANDS:\\n• PRIVACY_CLEANUP() - Clean expired data\\n• BACKUP_LIST() - Manage backups\\n• cache clear - Clear cached data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'storage_stats',\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get storage statistics: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_CLEANUP: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const results = await privacyService.cleanupExpiredData();\n        \n        const content = `🧹 Privacy Cleanup Complete\\n\\n📊 CLEANUP RESULTS:\\n• Items Cleaned: ${results.cleaned}\\n• Errors: ${results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(results.details).map(([dataType, result]) => \n          `• ${dataType}: ${typeof result === 'number' ? `${result} items cleaned` : result}`\n        ).join('\\n')}\\n\\n🔒 PRIVACY COMPLIANCE:\\n• Expired data removed according to retention policies\\n• User privacy preferences respected\\n• Data minimization principles applied\\n\\n⚙️ CURRENT RETENTION POLICIES:\\n${Object.entries(privacyService.getRetentionPolicies()).map(([type, days]) => \n          `• ${type}: ${days} days`\n        ).join('\\n')}\\n\\n💡 PRIVACY COMMANDS:\\n• PRIVACY_SETTINGS() - View/update privacy settings\\n• PRIVACY_EXPORT() - Export your data (GDPR)\\n• PRIVACY_DELETE() - Delete all data (Right to be forgotten)\\n\\n✅ Your data has been cleaned according to privacy policies.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'privacy_cleanup',\n            results\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Privacy cleanup failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_SETTINGS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n      \n      try {\n        if (!setting) {\n          // Show current settings\n          const settings = privacyService.getPrivacySettings();\n          const policies = privacyService.getRetentionPolicies();\n          \n          const content = `🔒 Privacy Settings\\n\\n⚙️ CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) => \n            `• ${key}: ${val ? '✅ Enabled' : '❌ Disabled'}`\n          ).join('\\n')}\\n\\n📅 RETENTION POLICIES:\\n${Object.entries(policies).map(([type, days]) => \n            `• ${type}: ${days} days`\n          ).join('\\n')}\\n\\n🛡️ PRIVACY CONTROLS:\\n• dataRetention: Keep historical data\\n• analytics: Allow usage analytics\\n• crashReporting: Send crash reports\\n• dataSharing: Share data with partners\\n• cookieConsent: Accept cookies\\n• trackingConsent: Allow tracking\\n\\n💡 USAGE:\\n• PRIVACY_SETTINGS() - Show all settings\\n• PRIVACY_SETTINGS(\"setting\", \"true/false\") - Update setting\\n• PRIVACY_CLEANUP() - Clean expired data\\n\\nExample: PRIVACY_SETTINGS(\"analytics\", \"false\")`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'privacy_settings_view',\n              settings,\n              policies\n            }\n          };\n        }\n\n        if (value === undefined) {\n          const currentValue = privacyService.getPrivacySettings()[setting];\n          return {\n            type: 'info',\n            content: `🔒 Privacy Setting: ${setting}\\nCurrent Value: ${currentValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nTo update: PRIVACY_SETTINGS(\"${setting}\", \"true/false\")`\n          };\n        }\n\n        // Update setting\n        const boolValue = value.toLowerCase() === 'true';\n        await privacyService.updatePrivacySettings({ [setting]: boolValue });\n\n        return {\n          type: 'success',\n          content: `✅ Privacy Setting Updated\\n\\n• Setting: ${setting}\\n• New Value: ${boolValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nSetting has been saved and will take effect immediately.`,\n          data: {\n            analysis: 'privacy_settings_update',\n            setting,\n            value: boolValue\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to manage privacy settings: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  },\n\n  SYNC_STATUS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const status = syncService.getSyncStatus();\n        \n        const content = `🔄 Sync Status\\n\\n📊 SYNC OVERVIEW:\\n• Last Sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}\\n• Sync In Progress: ${status.syncInProgress ? '🟡 Yes' : '🟢 No'}\\n• Queue Size: ${status.queueSize} operations\\n• Online Status: ${status.isOnline ? '🟢 Online' : '🔴 Offline'}\\n• Endpoint Configured: ${status.hasEndpoint ? '✅ Yes' : '❌ No'}\\n• Strategy: ${status.strategy}\\n\\n🔧 SYNC CONFIGURATION:\\n${!status.hasEndpoint ? '⚠️ No sync endpoint configured - sync is disabled\\n' : ''}${status.queueSize > 0 ? `📋 ${status.queueSize} operations waiting to sync\\n` : ''}${!status.isOnline ? '📡 Device is offline - sync will resume when online\\n' : ''}\\n\\n💡 SYNC COMMANDS:\\n• SYNC_NOW() - Force immediate sync (when available)\\n• SYNC_QUEUE() - View pending operations\\n• BACKUP_CREATE() - Create local backup\\n\\n${!status.hasEndpoint ? '🚀 FUTURE FEATURE:\\nCloud sync will be available in a future update.\\nFor now, use BACKUP_CREATE() and BACKUP_EXPORT() for data portability.' : '✅ Sync is configured and ready.'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'sync_status',\n            status\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get sync status: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PERSISTENCE_TEST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const testResults = await persistenceTestSuite.runAllTests();\n\n        const content = `🧪 Persistence Layer Test Results\\n\\n📊 TEST SUMMARY:\\n• Total Tests: ${testResults.total}\\n• Passed: ${testResults.passed} ✅\\n• Failed: ${testResults.total - testResults.passed} ❌\\n• Success Rate: ${formatPercentage(testResults.passed / testResults.total)}\\n• Overall Status: ${testResults.success ? '✅ PASS' : '❌ FAIL'}\\n\\n📋 DETAILED RESULTS:\\n${testResults.results.map((result, index) => {\n          const status = result.passed ? '✅' : result.skipped ? '⏭️' : '❌';\n          const details = result.error ? ` (${result.error})` : result.reason ? ` (${result.reason})` : '';\n          return `${index + 1}. ${status} ${result.testName}${details}`;\n        }).join('\\n')}\\n\\n🔧 COMPONENT STATUS:\\n• PersistenceManager: ${testResults.results.find(r => r.testName.includes('Persistence Manager'))?.passed ? '✅ Working' : '❌ Issues'}\\n• BackupService: ${testResults.results.find(r => r.testName.includes('Backup'))?.passed ? '✅ Working' : '❌ Issues'}\\n• PrivacyService: ${testResults.results.find(r => r.testName.includes('Privacy'))?.passed ? '✅ Working' : '❌ Issues'}\\n• SyncService: ${testResults.results.find(r => r.testName.includes('Sync'))?.passed ? '✅ Working' : '❌ Issues'}\\n\\n💡 RECOMMENDATIONS:\\n${testResults.success ? '• All tests passed - persistence layer is working correctly\\n• Regular testing recommended to ensure continued functionality' : '• Some tests failed - check browser console for detailed error messages\\n• Consider running individual component tests\\n• Verify browser storage permissions and quotas'}\\n\\n🔍 DEBUGGING:\\n• Check browser console for detailed test output\\n• Use browser DevTools to inspect localStorage and IndexedDB\\n• Run \"STORAGE_STATS()\" to check storage usage\\n\\n${testResults.success ? '✅ Persistence layer is fully functional and ready for production use!' : '⚠️ Issues detected - please review failed tests and resolve before production use.'}`;\n\n        return {\n          type: testResults.success ? 'success' : 'warning',\n          content,\n          data: {\n            analysis: 'persistence_test',\n            testResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Persistence test suite failed: ${error.message}\\n\\nCheck browser console for detailed error information.`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  }\n};\n","/**\n * Command Initializer\n * Registers all available commands with the command registry\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { coreCommands } from './commands/coreCommands';\nimport { portfolioCommands } from './commands/portfolioCommands';\nimport { valuationCommands } from './commands/valuationCommands';\nimport { technicalCommands } from './commands/technicalCommands';\nimport { esgCommands } from './commands/esgCommands';\nimport { automationCommands } from './commands/automationCommands';\nimport { dataCommands } from './commands/dataCommands';\nimport { systemCommands } from './commands/systemCommands';\nimport { persistenceCommands } from './commands/persistenceCommands';\n\n/**\n * Initialize all commands in the registry\n */\nexport function initializeCommands() {\n  // Register Core Commands\n  commandRegistry.register('DCF', coreCommands.DCF, {\n    category: 'CORE',\n    description: 'Discounted Cash Flow valuation with real-time data',\n    usage: 'DCF(ticker)',\n    examples: ['DCF(AAPL)', 'DCF(MSFT)'],\n    tags: ['valuation', 'dcf', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('LBO', coreCommands.LBO, {\n    category: 'CORE',\n    description: 'Leveraged Buyout analysis with return projections',\n    usage: 'LBO(ticker)',\n    examples: ['LBO(TSLA)', 'LBO(NVDA)'],\n    tags: ['lbo', 'private-equity', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('COMP', coreCommands.COMP, {\n    category: 'CORE',\n    description: 'Comparable company analysis with peer multiples',\n    usage: 'COMP(ticker)',\n    examples: ['COMP(GOOGL)', 'COMP(META)'],\n    tags: ['comparable', 'multiples', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('FETCH', coreCommands.FETCH, {\n    category: 'CORE',\n    description: 'Comprehensive company data and financial metrics',\n    usage: 'FETCH(ticker)',\n    examples: ['FETCH(AMZN)', 'FETCH(NFLX)'],\n    tags: ['data', 'profile', 'metrics'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Portfolio Commands\n  commandRegistry.register('PORTFOLIO', portfolioCommands.PORTFOLIO, {\n    category: 'PORTFOLIO',\n    description: 'Portfolio analysis with risk and diversification metrics',\n    usage: 'PORTFOLIO(tickers, weights)',\n    examples: ['PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])', 'PORTFOLIO([SPY,QQQ], [0.6,0.4])'],\n    tags: ['portfolio', 'diversification', 'allocation'],\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RISK_METRICS', portfolioCommands.RISK_METRICS, {\n    category: 'PORTFOLIO',\n    description: 'Comprehensive risk analysis including VaR, Sharpe ratio, and volatility',\n    usage: 'RISK_METRICS(ticker, period)',\n    examples: ['RISK_METRICS(AAPL)', 'RISK_METRICS(TSLA, 252)'],\n    tags: ['risk', 'var', 'volatility', 'sharpe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('CORRELATION_MATRIX', portfolioCommands.CORRELATION_MATRIX, {\n    category: 'PORTFOLIO',\n    description: 'Cross-asset correlation analysis for diversification insights',\n    usage: 'CORRELATION_MATRIX(tickers)',\n    examples: ['CORRELATION_MATRIX([AAPL,MSFT,GOOGL])', 'CORRELATION_MATRIX([SPY,QQQ,IWM])'],\n    tags: ['correlation', 'diversification', 'matrix'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('EFFICIENT_FRONTIER', portfolioCommands.EFFICIENT_FRONTIER, {\n    category: 'PORTFOLIO',\n    description: 'Modern portfolio theory optimization and efficient frontier analysis',\n    usage: 'EFFICIENT_FRONTIER(tickers)',\n    examples: ['EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])', 'EFFICIENT_FRONTIER([SPY,QQQ,IWM,EFA])'],\n    tags: ['optimization', 'efficient-frontier', 'mpt'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DRAWDOWN', portfolioCommands.DRAWDOWN, {\n    category: 'PORTFOLIO',\n    description: 'Maximum drawdown analysis and recovery time estimation',\n    usage: 'DRAWDOWN(ticker, period)',\n    examples: ['DRAWDOWN(AAPL)', 'DRAWDOWN(TSLA, 500)'],\n    tags: ['drawdown', 'risk', 'recovery'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  // Register Advanced Valuation Commands\n  commandRegistry.register('DDM', valuationCommands.DDM, {\n    category: 'VALUATION',\n    description: 'Dividend Discount Model with Gordon Growth and Two-Stage analysis',\n    usage: 'DDM(ticker)',\n    examples: ['DDM(KO)', 'DDM(JNJ)'],\n    tags: ['dividend', 'ddm', 'gordon-growth'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RESIDUAL_INCOME', valuationCommands.RESIDUAL_INCOME, {\n    category: 'VALUATION',\n    description: 'Residual Income Model for economic value analysis',\n    usage: 'RESIDUAL_INCOME(ticker)',\n    examples: ['RESIDUAL_INCOME(AAPL)', 'RESIDUAL_INCOME(MSFT)'],\n    tags: ['residual-income', 'economic-value', 'roe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('ASSET_BASED', valuationCommands.ASSET_BASED, {\n    category: 'VALUATION',\n    description: 'Asset-based valuation with market value adjustments',\n    usage: 'ASSET_BASED(ticker)',\n    examples: ['ASSET_BASED(BRK.A)', 'ASSET_BASED(BAC)'],\n    tags: ['asset-based', 'nav', 'liquidation'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Technical Analysis Commands\n  commandRegistry.register('TECHNICALS', technicalCommands.TECHNICALS, {\n    category: 'TECHNICAL',\n    description: 'Comprehensive technical analysis with RSI, MACD, Bollinger Bands',\n    usage: 'TECHNICALS(ticker)',\n    examples: ['TECHNICALS(AAPL)', 'TECHNICALS(SPY)'],\n    tags: ['technical', 'rsi', 'macd', 'bollinger'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SUPPORT_RESISTANCE', technicalCommands.SUPPORT_RESISTANCE, {\n    category: 'TECHNICAL',\n    description: 'Key price levels and breakout targets analysis',\n    usage: 'SUPPORT_RESISTANCE(ticker)',\n    examples: ['SUPPORT_RESISTANCE(TSLA)', 'SUPPORT_RESISTANCE(QQQ)'],\n    tags: ['support', 'resistance', 'levels', 'breakout'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register ESG & Alternative Data Commands\n  commandRegistry.register('ESG_SCORE', esgCommands.ESG_SCORE, {\n    category: 'ESG',\n    description: 'Environmental, social, governance analysis and scoring',\n    usage: 'ESG_SCORE(ticker)',\n    examples: ['ESG_SCORE(AAPL)', 'ESG_SCORE(TSLA)'],\n    tags: ['esg', 'environmental', 'social', 'governance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SOCIAL_SENTIMENT', esgCommands.SOCIAL_SENTIMENT, {\n    category: 'ESG',\n    description: 'Social media sentiment analysis across platforms',\n    usage: 'SOCIAL_SENTIMENT(ticker, days)',\n    examples: ['SOCIAL_SENTIMENT(AAPL)', 'SOCIAL_SENTIMENT(TSLA, 30)'],\n    tags: ['sentiment', 'social-media', 'twitter', 'reddit'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  commandRegistry.register('NEWS_IMPACT', esgCommands.NEWS_IMPACT, {\n    category: 'ESG',\n    description: 'News sentiment and price impact analysis',\n    usage: 'NEWS_IMPACT(ticker, days)',\n    examples: ['NEWS_IMPACT(AAPL)', 'NEWS_IMPACT(MSFT, 14)'],\n    tags: ['news', 'sentiment', 'impact', 'catalyst'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Data Management Commands\n  commandRegistry.register('EXPORT_JSON', dataCommands.EXPORT_JSON, {\n    category: 'DATA',\n    description: 'Export data to JSON format for backup and sharing',\n    usage: 'EXPORT_JSON(dataType, filename)',\n    examples: ['EXPORT_JSON(\"watchlists\")', 'EXPORT_JSON(\"all\", \"backup.json\")'],\n    tags: ['export', 'backup', 'json'],\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  });\n\n  commandRegistry.register('CACHE_STATS', dataCommands.CACHE_STATS, {\n    category: 'DATA',\n    description: 'View cache performance and memory usage statistics',\n    usage: 'CACHE_STATS()',\n    examples: ['CACHE_STATS()'],\n    tags: ['cache', 'performance', 'memory'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DATA_QUALITY', dataCommands.DATA_QUALITY, {\n    category: 'DATA',\n    description: 'Analyze data completeness and quality for a stock',\n    usage: 'DATA_QUALITY(ticker)',\n    examples: ['DATA_QUALITY(AAPL)', 'DATA_QUALITY(TSLA)'],\n    tags: ['quality', 'validation', 'completeness'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BENCHMARK', dataCommands.BENCHMARK, {\n    category: 'DATA',\n    description: 'Compare stock performance against benchmark index',\n    usage: 'BENCHMARK(ticker, benchmark)',\n    examples: ['BENCHMARK(AAPL, SPY)', 'BENCHMARK(TSLA, QQQ)'],\n    tags: ['benchmark', 'comparison', 'performance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  });\n\n  // Register System & Performance Commands\n  commandRegistry.register('PERFORMANCE_TEST', systemCommands.PERFORMANCE_TEST, {\n    category: 'SYSTEM',\n    description: 'Run comprehensive system performance benchmarks',\n    usage: 'PERFORMANCE_TEST()',\n    examples: ['PERFORMANCE_TEST()'],\n    tags: ['performance', 'benchmark', 'system'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('API_USAGE', systemCommands.API_USAGE, {\n    category: 'SYSTEM',\n    description: 'Monitor API usage, rate limits, and costs',\n    usage: 'API_USAGE()',\n    examples: ['API_USAGE()'],\n    tags: ['api', 'usage', 'limits', 'cost'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('CONFIG', systemCommands.CONFIG, {\n    category: 'SYSTEM',\n    description: 'View and update system configuration settings',\n    usage: 'CONFIG(setting, value)',\n    examples: ['CONFIG()', 'CONFIG(\"currency\", \"EUR\")', 'CONFIG(\"precision\", 3)'],\n    tags: ['config', 'settings', 'preferences'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  // Register Persistence & Privacy Commands\n  commandRegistry.register('BACKUP_CREATE', persistenceCommands.BACKUP_CREATE, {\n    category: 'PERSISTENCE',\n    description: 'Create a backup of all user data',\n    usage: 'BACKUP_CREATE(description)',\n    examples: ['BACKUP_CREATE()', 'BACKUP_CREATE(\"Before major changes\")'],\n    tags: ['backup', 'data', 'export'],\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  });\n\n  commandRegistry.register('BACKUP_LIST', persistenceCommands.BACKUP_LIST, {\n    category: 'PERSISTENCE',\n    description: 'List all available backups',\n    usage: 'BACKUP_LIST()',\n    examples: ['BACKUP_LIST()'],\n    tags: ['backup', 'list', 'management'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BACKUP_RESTORE', persistenceCommands.BACKUP_RESTORE, {\n    category: 'PERSISTENCE',\n    description: 'Restore data from a backup',\n    usage: 'BACKUP_RESTORE(backupId, overwrite)',\n    examples: ['BACKUP_RESTORE(\"backup_123\")', 'BACKUP_RESTORE(\"backup_123\", \"true\")'],\n    tags: ['backup', 'restore', 'recovery'],\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  });\n\n  commandRegistry.register('STORAGE_STATS', persistenceCommands.STORAGE_STATS, {\n    category: 'PERSISTENCE',\n    description: 'View storage usage and statistics',\n    usage: 'STORAGE_STATS()',\n    examples: ['STORAGE_STATS()'],\n    tags: ['storage', 'statistics', 'usage'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_CLEANUP', persistenceCommands.PRIVACY_CLEANUP, {\n    category: 'PERSISTENCE',\n    description: 'Clean up expired data according to privacy policies',\n    usage: 'PRIVACY_CLEANUP()',\n    examples: ['PRIVACY_CLEANUP()'],\n    tags: ['privacy', 'cleanup', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_SETTINGS', persistenceCommands.PRIVACY_SETTINGS, {\n    category: 'PERSISTENCE',\n    description: 'View and update privacy settings',\n    usage: 'PRIVACY_SETTINGS(setting, value)',\n    examples: ['PRIVACY_SETTINGS()', 'PRIVACY_SETTINGS(\"analytics\", \"false\")'],\n    tags: ['privacy', 'settings', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  commandRegistry.register('SYNC_STATUS', persistenceCommands.SYNC_STATUS, {\n    category: 'PERSISTENCE',\n    description: 'View data synchronization status',\n    usage: 'SYNC_STATUS()',\n    examples: ['SYNC_STATUS()'],\n    tags: ['sync', 'cloud', 'status'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PERSISTENCE_TEST', persistenceCommands.PERSISTENCE_TEST, {\n    category: 'PERSISTENCE',\n    description: 'Run comprehensive persistence layer tests',\n    usage: 'PERSISTENCE_TEST()',\n    examples: ['PERSISTENCE_TEST()'],\n    tags: ['test', 'debug', 'validation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Utility Commands\n  commandRegistry.register('HELP', {\n    execute: async (parsedCommand, context, processor) => {\n      const [category] = parsedCommand.parameters;\n      \n      if (category) {\n        // Show commands for specific category\n        const categoryCommands = commandRegistry.getCommandsByCategory(category.toUpperCase());\n        if (categoryCommands.length === 0) {\n          return {\n            type: 'error',\n            content: `Unknown category: ${category}. Use HELP() to see all categories.`\n          };\n        }\n\n        const content = `Commands in ${category.toUpperCase()} category:\\n\\n${categoryCommands.map(cmd => \n          `• ${cmd.usage} - ${cmd.description}`\n        ).join('\\n')}\\n\\nUse HELP() to see all categories.`;\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      // Show all categories and featured commands\n      const categories = commandRegistry.getAllCategories();\n      const stats = commandRegistry.getCommandStats();\n\n      const content = `FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite\n\n📊 COMMAND CATEGORIES:\n${categories.map(cat => \n  `${cat.icon} ${cat.name} (${stats[cat.key]?.count || 0} commands)\\n   ${cat.description}`\n).join('\\n\\n')}\n\n🚀 FEATURED COMMANDS:\n• DCF(AAPL) - Discounted Cash Flow with live data\n• LBO(TSLA) - Leveraged Buyout analysis  \n• PORTFOLIO([AAPL,MSFT], [0.5,0.5]) - Portfolio analysis\n• RISK_METRICS(GOOGL) - Comprehensive risk analysis\n• CORRELATION_MATRIX([AAPL,MSFT,GOOGL]) - Cross-asset correlations\n\n💡 USAGE TIPS:\n• Use HELP(category) to see commands in a specific category\n• Commands support both function style: COMMAND(param) and space style: COMMAND param\n• Use TAB for auto-completion and arrow keys for command history\n• Type STATUS() to check API connectivity and system health\n\n🚀 ENHANCED FEATURES:\n• Watchlists: Create and track custom stock lists\n• Alerts: Set price and metric notifications\n• Batch Analysis: Analyze multiple stocks simultaneously\n• ESG Scoring: Environmental, social, governance analysis\n• Technical Analysis: RSI, MACD, support/resistance\n• Advanced Valuation: DDM, residual income, asset-based models\n\n${categories.length} categories • ${Object.values(stats).reduce((sum, cat) => sum + cat.count, 0)} total commands available`;\n\n      return {\n        type: 'system',\n        content\n      };\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['category']\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show available commands and usage information',\n    usage: 'HELP(category)',\n    examples: ['HELP()', 'HELP(PORTFOLIO)', 'HELP(CORE)'],\n    tags: ['help', 'documentation', 'commands']\n  });\n\n  commandRegistry.register('CLEAR', {\n    execute: async (parsedCommand, context, processor) => {\n      return {\n        type: 'system',\n        content: 'clear_terminal', // Special flag for terminal to clear\n        action: 'clear'\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Clear the terminal screen',\n    usage: 'CLEAR()',\n    examples: ['CLEAR()'],\n    tags: ['utility', 'clear', 'terminal']\n  });\n\n  commandRegistry.register('STATUS', {\n    execute: async (parsedCommand, context, processor) => {\n      const settings = processor.getAllSettings();\n      const variables = processor.getAllVariables();\n      const history = processor.getHistory(5);\n\n      const content = `System Status Report\n\n🔧 SYSTEM CONFIGURATION:\n• Currency: ${settings.currency}\n• Precision: ${settings.precision} decimal places\n• Date Format: ${settings.dateFormat}\n• Demo Mode: ${context.demoMode ? 'Enabled' : 'Disabled'}\n\n📊 SESSION STATISTICS:\n• Commands Executed: ${history.length}\n• Variables Stored: ${Object.keys(variables).length}\n• Last Command: ${history[history.length - 1]?.input || 'None'}\n\n🌐 API STATUS:\n• Data Sources: ${context.demoMode ? 'Demo Data' : 'Live Market Data'}\n• Rate Limits: Normal\n• Cache Status: Active\n\n💾 MEMORY USAGE:\n• Command History: ${history.length} entries\n• Variable Storage: ${Object.keys(variables).length} variables\n• Cache Size: Optimal\n\n✅ All systems operational`;\n\n      return {\n        type: 'system',\n        content\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show system status and configuration',\n    usage: 'STATUS()',\n    examples: ['STATUS()'],\n    tags: ['status', 'system', 'configuration']\n  });\n\n  console.log('✅ Command registry initialized with', commandRegistry.getAllCommands().length, 'commands');\n}\n\n// Auto-initialize when module is imported\ninitializeCommands();\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport { dataFetchingService } from '../../../services/dataFetching';\nimport {\n  calculateDCFValuation,\n  calculateLBOReturns,\n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../../utils/dataTransformation';\nimport { CommandProcessor } from '../../../services/commandProcessor';\nimport { commandRegistry } from '../../../services/commandRegistry';\nimport { persistenceManager } from '../../../services/persistence/PersistenceManager';\n// Import command initializer to ensure commands are registered\nimport '../../../services/commandInitializer';\n\nconst TerminalInterface = ({ onCommandExecute, calculationResults }) => {\n  const [commands, setCommands] = useState([\n    {\n      id: 1,\n      type: 'system',\n      content: 'FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite Ready',\n      timestamp: new Date()\n    },\n    {\n      id: 2,\n      type: 'system',\n      content:\n        'Type \"HELP()\" for available commands or start with DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5])',\n      timestamp: new Date()\n    }\n  ]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestion, setSelectedSuggestion] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const terminalRef = useRef(null);\n  const inputRef = useRef(null);\n  const commandProcessor = useRef(new CommandProcessor());\n\n  // Get available commands from registry for suggestions\n  const getAvailableCommands = () => {\n    const allCommands = commandRegistry.getAllCommands();\n    const commandInfos = allCommands.map(cmdName => {\n      const info = commandRegistry.getCommandInfo(cmdName);\n      return info ? info.usage : cmdName;\n    });\n    return commandInfos;\n  };\n\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [commands]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Initialize persistence layer\n    const initializePersistence = async () => {\n      try {\n        await persistenceManager.initialize();\n        console.log('✅ Persistence layer initialized in terminal');\n      } catch (error) {\n        console.error('❌ Failed to initialize persistence in terminal:', error);\n      }\n    };\n\n    initializePersistence();\n  }, []);\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setCurrentInput(value);\n\n    if (value.length > 0) {\n      const availableCommands = getAvailableCommands();\n      const suggestions = commandRegistry.getSuggestions(value);\n      const commandSuggestions = suggestions.map(s => s.usage);\n      \n      // Also include partial matches from available commands\n      const partialMatches = availableCommands.filter(cmd =>\n        cmd.toLowerCase().includes(value.toLowerCase()) && \n        !commandSuggestions.includes(cmd)\n      );\n      \n      const allSuggestions = [...commandSuggestions, ...partialMatches];\n      setSuggestions(allSuggestions.slice(0, 8));\n      setShowSuggestions(allSuggestions.length > 0);\n      setSelectedSuggestion(0);\n    } else {\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      executeCommand();\n    } else if (e.key === 'ArrowUp' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.max(0, prev - 1));\n    } else if (e.key === 'ArrowDown' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.min(suggestions.length - 1, prev + 1));\n    } else if (e.key === 'Tab' && showSuggestions) {\n      e.preventDefault();\n      setCurrentInput(suggestions[selectedSuggestion]);\n      setShowSuggestions(false);\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  const executeCommand = async() => {\n    if (!currentInput.trim()) return;\n\n    const newCommand = {\n      id: commands.length + 1,\n      type: 'user',\n      content: currentInput,\n      timestamp: new Date()\n    };\n\n    setCommands(prev => [...prev, newCommand]);\n    setIsLoading(true);\n    setCurrentInput('');\n    setShowSuggestions(false);\n\n    try {\n      // Use the new command processor\n      const context = {\n        demoMode: dataFetchingService.demoMode,\n        showLoading: (message) => {\n          const loadingCommand = {\n            id: commands.length + 2,\n            type: 'info',\n            content: message,\n            timestamp: new Date()\n          };\n          setCommands(prev => [...prev, loadingCommand]);\n        }\n      };\n\n      const response = await commandProcessor.current.processCommand(currentInput, context);\n\n      // Handle special actions\n      if (response.action === 'clear') {\n        setCommands([\n          {\n            id: 1,\n            type: 'system',\n            content: 'Terminal cleared',\n            timestamp: new Date()\n          }\n        ]);\n        return;\n      }\n\n      const responseCommand = {\n        id: commands.length + 2,\n        type: response.type,\n        content: response.content,\n        timestamp: new Date(),\n        data: response.data\n      };\n\n      setCommands(prev => [...prev, responseCommand]);\n\n      if (onCommandExecute) {\n        onCommandExecute(currentInput, response);\n      }\n    } catch (error) {\n      const errorCommand = {\n        id: commands.length + 2,\n        type: 'error',\n        content: `Error: ${error.message}`,\n        timestamp: new Date()\n      };\n      setCommands(prev => [...prev, errorCommand]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectSuggestion = suggestion => {\n    setCurrentInput(suggestion);\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900 text-green-400 font-mono text-sm\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Terminal\" size={16} className=\"text-green-400\" />\n          <span className=\"text-green-400 font-medium\">Financial Terminal</span>\n          <span className=\"text-xs text-blue-400\">• Enhanced Command Suite</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div\n            className={`w-2 h-2 rounded-full ${isLoading ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`}\n          />\n          <span className=\"text-xs text-gray-400\">{isLoading ? 'Processing...' : 'Connected'}</span>\n        </div>\n      </div>\n\n      {/* Terminal Content */}\n      <div\n        ref={terminalRef}\n        className=\"flex-1 overflow-y-auto p-4 space-y-2\"\n        onClick={() => inputRef.current?.focus()}\n      >\n        {commands.map(command => (\n          <div key={command.id} className=\"space-y-1\">\n            <div className=\"flex items-start space-x-2\">\n              {command.type === 'user' && (\n                <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n              )}\n              {command.type === 'system' && (\n                <Icon name=\"Info\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'success' && (\n                <Icon name=\"CheckCircle\" size={14} className=\"text-green-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'error' && (\n                <Icon name=\"XCircle\" size={14} className=\"text-red-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'warning' && (\n                <Icon name=\"AlertTriangle\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'info' && (\n                <Icon name=\"Info\" size={14} className=\"text-blue-400 mt-0.5 shrink-0\" />\n              )}\n              <div className=\"flex-1\">\n                <pre className=\"whitespace-pre-wrap break-words\">{command.content}</pre>\n                {command.data && (\n                  <div className=\"mt-2 p-2 bg-gray-800 rounded border border-gray-700\">\n                    <div className=\"text-xs text-gray-400\">\n                      Real-time calculation data available • Analysis:{' '}\n                      {command.data.analysis || 'financial'}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-center space-x-2 text-yellow-400\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full\" />\n            <span>Processing command...</span>\n          </div>\n        )}\n\n        {/* Input Line */}\n        <div className=\"flex items-center space-x-2 relative\">\n          <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n          <div className=\"flex-1 relative\">\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={currentInput}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"w-full bg-transparent text-green-400 outline-none border-none\"\n              placeholder=\"Enter command (e.g., DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5]))...\"\n              autoComplete=\"off\"\n              disabled={isLoading}\n            />\n\n            {/* Suggestions Dropdown */}\n            {showSuggestions && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-600 rounded-md shadow-lg z-10 max-h-48 overflow-y-auto\">\n                {suggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className={`px-3 py-2 cursor-pointer text-sm ${\n                      index === selectedSuggestion\n                        ? 'bg-gray-700 text-green-400'\n                        : 'text-gray-300 hover:bg-gray-700'\n                    }`}\n                    onClick={() => selectSuggestion(suggestion)}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerminalInterface;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst VariableInputs = ({ onVariableChange, onBulkEdit }) => {\n  const [activeSection, setActiveSection] = useState('assumptions');\n  const [editMode, setEditMode] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const [variables, setVariables] = useState({\n    assumptions: {\n      revenue_growth: {\n        value: 0.052,\n        unit: '%',\n        description: 'Annual revenue growth rate',\n        category: 'Growth'\n      },\n      ebitda_margin: {\n        value: 0.235,\n        unit: '%',\n        description: 'EBITDA as % of revenue',\n        category: 'Profitability'\n      },\n      tax_rate: { value: 0.25, unit: '%', description: 'Corporate tax rate', category: 'Tax' },\n      capex_revenue: {\n        value: 0.035,\n        unit: '%',\n        description: 'CapEx as % of revenue',\n        category: 'Investment'\n      },\n      working_capital_revenue: {\n        value: 0.02,\n        unit: '%',\n        description: 'Working capital as % of revenue',\n        category: 'Working Capital'\n      },\n      terminal_growth: {\n        value: 0.025,\n        unit: '%',\n        description: 'Long-term growth rate',\n        category: 'Terminal'\n      }\n    },\n    cost_of_capital: {\n      risk_free_rate: {\n        value: 0.032,\n        unit: '%',\n        description: 'Risk-free rate (10Y Treasury)',\n        category: 'Market'\n      },\n      market_premium: {\n        value: 0.065,\n        unit: '%',\n        description: 'Equity risk premium',\n        category: 'Market'\n      },\n      beta: { value: 1.15, unit: 'x', description: 'Asset beta coefficient', category: 'Risk' },\n      cost_of_debt: {\n        value: 0.045,\n        unit: '%',\n        description: 'Pre-tax cost of debt',\n        category: 'Debt'\n      },\n      debt_equity_ratio: {\n        value: 0.4,\n        unit: 'x',\n        description: 'Target debt-to-equity ratio',\n        category: 'Capital Structure'\n      }\n    },\n    market_data: {\n      current_share_price: {\n        value: 125.5,\n        unit: '$',\n        description: 'Current trading price',\n        category: 'Market'\n      },\n      shares_outstanding: {\n        value: 20.0,\n        unit: 'M',\n        description: 'Shares outstanding',\n        category: 'Equity'\n      },\n      market_cap: {\n        value: 2510,\n        unit: '$M',\n        description: 'Current market capitalization',\n        category: 'Valuation'\n      },\n      enterprise_value: {\n        value: 2810,\n        unit: '$M',\n        description: 'Current enterprise value',\n        category: 'Valuation'\n      },\n      net_debt: { value: 300, unit: '$M', description: 'Net debt position', category: 'Debt' }\n    }\n  });\n\n  const sections = [\n    { id: 'assumptions', label: 'Key Assumptions', icon: 'Settings' },\n    { id: 'cost_of_capital', label: 'Cost of Capital', icon: 'Percent' },\n    { id: 'market_data', label: 'Market Data', icon: 'TrendingUp' }\n  ];\n\n  const handleVariableChange = (section, key, newValue) => {\n    const updatedVariables = {\n      ...variables,\n      [section]: {\n        ...variables[section],\n        [key]: {\n          ...variables[section][key],\n          value: parseFloat(newValue) || 0\n        }\n      }\n    };\n    setVariables(updatedVariables);\n\n    if (onVariableChange) {\n      onVariableChange(section, key, newValue);\n    }\n  };\n\n  const formatValue = (value, unit) => {\n    if (unit === '%') {\n      return (value * 100).toFixed(1);\n    } else if (unit === '$' || unit === '$M') {\n      return value.toFixed(2);\n    } else {\n      return value.toFixed(3);\n    }\n  };\n\n  const getVariablesByCategory = sectionData => {\n    const categories = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      const category = variable.category || 'Other';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push({ key, ...variable });\n    });\n    return categories;\n  };\n\n  const filteredVariables = sectionData => {\n    if (!searchTerm) return sectionData;\n\n    const filtered = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      if (\n        key.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        variable.description.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        filtered[key] = variable;\n      }\n    });\n    return filtered;\n  };\n\n  const resetToDefaults = () => {\n    // Reset to default values\n    const defaultVariables = { ...variables };\n    // This would typically reset to saved defaults\n    setVariables(defaultVariables);\n  };\n\n  const exportVariables = () => {\n    const exportData = JSON.stringify(variables, null, 2);\n    const blob = new Blob([exportData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'model_variables.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Sliders\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Variable Inputs</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName={editMode ? 'Check' : 'Edit'}\n            onClick={() => setEditMode(!editMode)}\n          >\n            {editMode ? 'Done' : 'Edit'}\n          </Button>\n          <Button\n            variant=\"outline\" size=\"sm\" iconName=\"Download\"\n            onClick={exportVariables}\n          >\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search variables...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Section Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {sections.map(section => (\n          <button\n            key={section.id}\n            onClick={() => setActiveSection(section.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeSection === section.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={section.icon} size={16} />\n            <span>{section.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Variables Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {Object.entries(getVariablesByCategory(filteredVariables(variables[activeSection]))).map(\n          ([category, categoryVariables]) => (\n            <div key={category} className=\"mb-6\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n                <Icon name=\"Folder\" size={16} />\n                <span>{category}</span>\n              </h4>\n              <div className=\"space-y-3\">\n                {categoryVariables.map(variable => (\n                  <div\n                    key={variable.key}\n                    className=\"p-3 bg-background border border-border rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <label className=\"text-sm font-medium text-foreground capitalize\">\n                          {variable.key.replace(/_/g, ' ')}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">{variable.description}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        {editMode ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <input\n                              type=\"number\"\n                              value={formatValue(variable.value, variable.unit)}\n                              onChange={e =>\n                                handleVariableChange(activeSection, variable.key, e.target.value)\n                              }\n                              step={variable.unit === '%' ? '0.1' : '0.01'}\n                              className=\"w-20 px-2 py-1 text-sm bg-input border border-border rounded text-foreground focus:outline-none focus:ring-1 focus:ring-ring\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">{variable.unit}</span>\n                          </div>\n                        ) : (\n                          <div className=\"text-right\">\n                            <span className=\"text-lg font-semibold text-foreground\">\n                              {formatValue(variable.value, variable.unit)}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground ml-1\">\n                              {variable.unit}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Variable Impact Indicator */}\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-success rounded-full\" />\n                        <span className=\"text-muted-foreground\">Within range</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Icon name=\"TrendingUp\" size={12} />\n                        <span>High impact</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )\n        )}\n\n        {Object.keys(filteredVariables(variables[activeSection])).length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"Search\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No variables found</h4>\n            <p className=\"text-muted-foreground\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n      {/* Footer Actions */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n            <Icon name=\"Info\" size={12} />\n            <span>Changes auto-save every 30 seconds</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\" size=\"sm\" iconName=\"RotateCcw\"\n              onClick={resetToDefaults}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Grid\"\n              onClick={() => onBulkEdit && onBulkEdit()}\n            >\n              Bulk Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VariableInputs;\n","import React, { useState, useEffect } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport AuditTrail from './components/AuditTrail';\nimport CalculationResults from './components/CalculationResults';\nimport FormulaBuilder from './components/FormulaBuilder';\nimport ModelTemplates from './components/ModelTemplates';\nimport TerminalInterface from './components/TerminalInterface';\nimport VariableInputs from './components/VariableInputs';\n\nconst FinancialModelWorkspace = () => {\n  const [activeLayout, setActiveLayout] = useState('dual-pane');\n  const [leftPanelContent, setLeftPanelContent] = useState('terminal');\n  const [rightPanelContent, setRightPanelContent] = useState('results');\n  const [isCollaborationOpen, setIsCollaborationOpen] = useState(false);\n  const [modelState, setModelState] = useState({\n    name: 'DCF_Analysis_v2.3',\n    saved: true,\n    calculating: false,\n    lastSaved: new Date()\n  });\n\n  const [calculationResults, setCalculationResults] = useState(null);\n\n  const handleCommandExecute = (command, result) => {\n    setCalculationResults(result);\n  };\n\n  const renderLeftPanel = () => {\n    switch (leftPanelContent) {\n      case 'terminal':\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n      case 'variables':\n        return <VariableInputs />;\n      case 'formulas':\n        return <FormulaBuilder />;\n      case 'templates':\n        return <ModelTemplates />;\n      default:\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n    }\n  };\n\n  const renderRightPanel = () => {\n    switch (rightPanelContent) {\n      case 'results':\n        return <CalculationResults results={calculationResults} />;\n      case 'audit':\n        return <AuditTrail />;\n      default:\n        return <CalculationResults results={calculationResults} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <Header />\n      \n      {/* Main Workspace */}\n      <div className=\"flex flex-col h-screen pt-16\">\n        {/* Toolbar */}\n        <div className=\"bg-gray-800 border-b border-gray-700 px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"FileText\" className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"font-medium\">{modelState.name}</span>\n              <span className={`text-xs px-2 py-1 rounded ${\n                modelState.saved ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'\n              }`}>\n                {modelState.saved ? 'Saved' : 'Unsaved'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Layout Controls */}\n            <div className=\"flex items-center space-x-1 bg-gray-700 rounded-lg p-1\">\n              <Button\n                variant={activeLayout === 'single-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('single-pane')}\n              >\n                <Icon name=\"Square\" className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={activeLayout === 'dual-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('dual-pane')}\n              >\n                <Icon name=\"Columns\" className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Panel Controls */}\n            <div className=\"flex items-center space-x-1\">\n              <select\n                value={leftPanelContent}\n                onChange={(e) => setLeftPanelContent(e.target.value)}\n                className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n              >\n                <option value=\"terminal\">Terminal</option>\n                <option value=\"variables\">Variables</option>\n                <option value=\"formulas\">Formulas</option>\n                <option value=\"templates\">Templates</option>\n              </select>\n              \n              {activeLayout === 'dual-pane' && (\n                <select\n                  value={rightPanelContent}\n                  onChange={(e) => setRightPanelContent(e.target.value)}\n                  className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                >\n                  <option value=\"results\">Results</option>\n                  <option value=\"audit\">Audit Trail</option>\n                </select>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel */}\n          <div className={`${\n            activeLayout === 'dual-pane' ? 'w-1/2' : 'w-full'\n          } border-r border-gray-700 overflow-hidden`}>\n            {renderLeftPanel()}\n          </div>\n\n          {/* Right Panel */}\n          {activeLayout === 'dual-pane' && (\n            <div className=\"w-1/2 overflow-hidden\">\n              {renderRightPanel()}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialModelWorkspace;\n"],"names":["AuditTrail","calculations","errors","warnings","activeTab","setActiveTab","useState","expandedItems","setExpandedItems","Set","filterLevel","setFilterLevel","mockAuditData","id","timestamp","Date","now","type","operation","formula","result","inputs","FCFF_2024","FCFF_2025","FCFF_2026","FCFF_2027","FCFF_2028","WACC","executionTime","status","cost_equity","cost_debt","tax_rate","debt_ratio","FCF_final","terminal_growth","severity","message","location","suggestion","resolved","acknowledged","validations","check","details","tabs","label","icon","count","length","getStatusIcon","color","getSeverityColor","renderCalculations","jsx","className","children","map","calc","jsxs","Icon","name","size","toLocaleTimeString","time","toFixed","Button","variant","iconName","has","onClick","newExpanded","delete","add","toggleExpanded","Object","entries","key","value","tab","error","toLocaleString","warning","validation","CalculationResults","results","onExport","expandedSections","setExpandedSections","mockResults","summary","enterpriseValue","equityValue","sharePrice","impliedReturn","confidence","cashFlows","year","revenue","ebitda","fcf","pv","sensitivity","wacc","growth","matrix","scenarios","probability","irr","multiples","metric","current","peer_avg","premium","formatCurrency","decimals","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercent","renderSummary","width","cf","index","rowIndex","colIndex","Math","abs","scenario","multiple","FormulaBuilder","onFormulaCreate","variables","selectedCategory","setSelectedCategory","draggedFunction","setDraggedFunction","currentFormula","setCurrentFormula","formulaName","setFormulaName","isBuilding","setIsBuilding","dropZoneRef","useRef","functionCategories","valuation","functions","syntax","description","financial","statistical","mathematical","validateFormula","match","category","func","draggable","onDragStart","e","dataTransfer","effectAllowed","handleDragStart","newFormula","addFunction","onChange","target","placeholder","ref","onDragOver","preventDefault","dropEffect","onDrop","disabled","ModelTemplates","onTemplateSelect","onTemplateCreate","searchTerm","setSearchTerm","showCreateModal","setShowCreateModal","templateCategories","templates","complexity","timeToComplete","lastUsed","popularity","features","lbo","comps","merger","getComplexityColor","filteredTemplates","filter","template","toLowerCase","includes","handleTemplateSelect","feature","rows","compact","isNaN","notation","formatPercentage","formatNumber","calculateDCFValuation","currentRevenue","revenueGrowthRate","fcfMargin","terminalGrowthRate","sharesOutstanding","totalDebt","cash","projectionYears","projectedRevenues","baseCashFlow","growthRates","years","currentCashFlow","i","Array","isArray","push","projectCashFlows","projectedFCFs","terminalValue","finalCashFlow","discountRate","calculateTerminalValue","pvOfCashFlows","reduce","npv","cashFlow","pow","pvOfTerminalValue","pricePerShare","calculateComparableMetrics","companyData","peerData","peerStats","forEach","peerValues","peer","values","validValues","v","median","mean","min","max","sort","a","b","floor","sum","calculateStatistics","company","peerStatistics","relativeValuation","marketCapPercentile","calculatePercentile","marketCap","p","peRatioRelative","peRatio","evEbitdaRelative","evToEbitda","priceToBookRelative","priceToBook","dataset","validDataset","commandRegistry","constructor","this","commands","Map","categories","aliases","initializeCategories","set","register","handler","metadata","commandName","toUpperCase","commandInfo","usage","examples","parameterSchema","tags","version","deprecated","experimental","alias","get","getHandler","command","aliasTarget","aliasCommand","getCommandInfo","getCommandsByCategory","categoryInfo","cmdName","getAllCommands","from","keys","getAllCategories","searchCommands","query","score","calculateSearchScore","some","tag","getSuggestions","partial","partialLower","suggestions","startsWith","localeCompare","hasCommand","getCommandStats","stats","categoryKey","CryptoUtils","algorithm","keyLength","ivLength","tagLength","textEncoder","TextEncoder","textDecoder","TextDecoder","initializeKey","storedKey","localStorage","getItem","keyData","base64ToArrayBuffer","cryptoKey","crypto","subtle","importKey","generateKey","exportedKey","exportKey","keyString","arrayBufferToBase64","setItem","encrypt","data","dataBuffer","encode","iv","getRandomValues","Uint8Array","encryptedBuffer","combined","byteLength","buffer","Error","decrypt","encryptedData","slice","decryptedBuffer","decode","hash","hashBuffer","digest","verifyIntegrity","expectedHash","generateRandomString","array","substring","deriveKeyFromPassword","password","salt","passwordBuffer","saltBuffer","keyMaterial","deriveKey","iterations","isAvailable","window","getInfo","available","keyInitialized","bytes","binary","String","fromCharCode","btoa","base64","atob","charCodeAt","clearSensitiveData","ArrayBuffer","view","performanceTest","testData","JSON","stringify","test","fill","encryptStart","performance","encrypted","encryptTime","decryptStart","decryptTime","totalTime","dataSize","encryptedSize","compressionRatio","CompressionUtils","compressionFormat","compress","compressWithStream","compressWithLZString","decompress","compressedData","isNativeCompressed","decompressWithStream","decompressWithLZString","stream","CompressionStream","writer","writable","getWriter","reader","readable","getReader","write","close","chunks","done","readerDone","read","totalLength","chunk","offset","replace","compressedBuffer","DecompressionStream","dictionary","dictSize","char","compressed","Uint16Array","previous","code","isLZStringCompressed","isCompressed","getCompressionRatio","originalData","originalSize","Blob","estimateCompressionBenefit","compressedSize","ratio","savings","savingsPercentage","worthCompressing","nativeCompressionAvailable","fallbackAvailable","defaultFormat","repeat","numbers","_","compressStart","compressTime","decompressStart","decompressTime","method","LocalStorageService","prefix","maxSize","cryptoUtils","compressionUtils","initialize","testKey","removeItem","success","store","options","ttl","validate","validateData","storageObject","serializedData","storageKey","retrieve","validateTTL","parse","parseError","decompressed","decompressError","remove","clear","getKeys","getStats","used","totalSize","itemCount","itemSizes","usagePercentage","largestItem","exportAll","exportData","importData","overwrite","imported","skipped","hasSpace","cleanup","cleaned","seen","WeakSet","checkCircular","obj","isStorageAvailable","writeStart","writeTime","readStart","readTime","IndexedDBService","dbName","dbVersion","db","stores","watchlists","keyPath","autoIncrement","indexes","unique","analysis_history","command_history","alerts","cached_data","user_models","export_data","indexedDB","openDatabase","cleanupExpiredData","Promise","resolve","reject","request","open","onerror","onsuccess","onupgradeneeded","event","createObjectStores","storeName","objectStoreNames","contains","deleteObjectStore","config","createObjectStore","createIndex","dataObject","performTransaction","put","expiry","storeObj","getAllKeys","getAll","limit","filteredResults","indexName","total","records","recordCount","storeSize","record","cachedData","mode","transaction","objectStore","oncomplete","storeCount","SessionManager","sessionKey","userKey","preferencesKey","currentSession","currentUser","sessionTimeout","listeners","defaultPreferences","precision","dateFormat","theme","notifications","autoSave","commandHistory","dataRetention","privacy","analytics","crashReporting","dataSharing","loadSession","setupSessionMonitoring","hasSession","createSession","userInfo","sessionId","generateSessionId","session","userId","generateUserId","created","lastActivity","expires","userAgent","navigator","platform","language","timezone","DateTimeFormat","resolvedOptions","timeZone","user","email","lastLogin","loginCount","preferences","storeSession","storeUser","notifyListeners","sessionData","userData","destroySession","updateActivity","getSession","getUser","isAuthenticated","getPreferences","updatePreferences","newPreferences","getSessionStats","sessionDuration","timeUntilExpiry","lastActivityAge","userName","userCreated","isExpired","isActive","exportSessionData","exportTimestamp","importSessionData","addEventListener","callback","removeEventListener","random","toString","substr","throttledUpdate","throttle","document","passive","setInterval","hidden","inThrottle","args","arguments","context","apply","setTimeout","DataMigrationService","currentVersion","migrationKey","backupKey","migrations","to","migrate","migrateToV1_0_0","bind","checkAndMigrate","currentStoredVersion","performVersionMigration","performInitialMigration","legacyData","detectLegacyData","createMigrationBackup","fromVersion","toVersion","migrationPath","findMigrationPath","currentData","exportCurrentData","migration","restoreFromBackup","oldVariables","oldSettings","settings","oldWatchlists","oldAlerts","dataToMigrate","migratedWatchlists","migrateWatchlistsFormat","migratedAlerts","migrateAlertsFormat","migratedPreferences","migratePreferencesFormat","migratedVariables","migrateVariablesFormat","cleanupLegacyData","migrated","watchlist","tickers","stocks","toISOString","split","lastUpdated","alert","ticker","condition","triggered","backup","backupData","getMigrationStatus","storedVersion","hasBackup","needsMigration","availableMigrations","clearBackup","persistenceManager","sessionManager","migrationService","isInitialized","storageQuota","storageStrategy","checkStorageAvailability","all","estimateStorageQuota","availableStorage","getAvailableStorage","ensureInitialized","storage","determineStorageLayer","promises","confirm","getStorageStats","localStorageStats","indexedDBStats","totalUsed","quota","includeMetadata","localStorageData","indexedDBData","storageStats","exportOptions","validateImportData","estimate","CommandProcessor","persistenceInitialized","maxHistorySize","initializePersistence","loadPersistedData","history","saveData","variablesObj","fromEntries","processCommand","input","startTime","parsedCommand","parseCommand","historyEntry","createErrorResponse","validationResult","validateParameters","valid","execute","catch","trimmed","trim","functionMatch","paramString","parameters","parseParameters","rawInput","parts","params","inQuotes","inBrackets","quoteChar","parseParameterValue","endsWith","arrayContent","item","parseFloat","required","optional","join","maxParams","content","cmd","getHistory","clearHistory","setVariable","getVariable","getAllVariables","updateSetting","getSetting","getAllSettings","coreCommands","DCF","async","processor","loadingMessage","dataFetchingService","demoMode","showLoading","dcfInputs","fetchDCFInputs","dcfResults","companyName","currentPrice","fairValue","upside","projections","proj","recommendation","analysis","LBO","profile","financials","fetchCompanyProfile","fetchFinancialStatements","lboResults","purchasePrice","debtMultiple","exitMultiple","exitYear","managementFeeRate","carriedInterestRate","equityInvestment","exitEbitda","exitEnterpriseValue","exitEquityValue","totalReturn","moic","totalManagementFees","carriedInterest","managementFees","netReturn","calculateLBOReturns","price","mktCap","debt","totalCash","debtToEquity","COMP","peers","fetchPeerComparables","symbol","pe","enterpriseValueOverEBITDA","pb","compAnalysis","FETCH","industry","sector","fullTimeEmployees","eps","profitMargin","ps","enterpriseValueOverRevenue","bookValue","priceHigh52","priceLow52","beta","dividendYield","portfolioCommands","PORTFOLIO","weights","tickerArray","weightArray","totalWeight","w","portfolioData","weight","portfolioValue","stock","weightedBeta","weightedPE","weightedDividendYield","maxWeight","minWeight","concentrationRatio","holdings","metrics","RISK_METRICS","period","volatility","fetchMarketData","sharpeRatio","var95","var99","maxDrawdown","sortinoRatio","sqrt","CORRELATION_MATRIX","stockData","correlationMatrix","j","sectorCorr","betaCorr","correlation","totalCorr","avgCorrelation","maxCorr","minCorr","maxPair","minPair","corr","matrixDisplay","padEnd","s","padStart","t","statistics","EFFICIENT_FRONTIER","expectedReturn","frontierPoints","targetReturn","baseWeight","returnAdjustment","normalizedWeights","portfolioReturn","portfolioVolatility","return","optimalPortfolio","best","assets","DRAWDOWN","avgDrawdown","drawdownFrequency","recoveryTime","drawdownPeriods","start","end","magnitude","duration","dd","valuationCommands","DDM","currentDividend","dividendGrowthRate","requiredReturn","gordonValue","highGrowthYears","highGrowthRate","presentValueHighGrowth","dividend","terminalDividend","presentValueTerminal","twoStageValue","gordonUpside","twoStageUpside","RESIDUAL_INCOME","roe","returnOnEquityTTM","costOfEquity","netIncome","normalIncome","residualIncome","residualIncomeGrowth","totalPVResidualIncome","projectedRI","presentValue","terminalRI","pvTerminalValue","intrinsicValue","valuePerShare","ASSET_BASED","balanceSheet","totalAssets","totalLiabilities","cashAndEquivalents","cashAndCashEquivalents","inventory","ppe","propertyPlantEquipmentNet","intangibleAssets","otherAssets","adjustments","book","market","adjustment","intangibles","other","totalMarketAssets","adj","netAssetValue","navPerShare","liquidationValue","liquidationPerShare","technicalCommands","TECHNICALS","sma20","sma50","ema12","ema26","rsi","macd","macdSignal","macdHistogram","bollingerUpper","bollingerLower","bollingerPosition","support1","support2","resistance1","resistance2","signals","signal","indicators","SUPPORT_RESISTANCE","levels","level","strength","touches","nearestSupport","l","nearestResistance","supportDistance","resistanceDistance","distance","esgCommands","ESG_SCORE","sectorMultiplier","Technology","Healthcare","Energy","Utilities","Industrials","Materials","baseSector","sectorScore","companySize","environmentalScore","socialScore","governanceScore","overallScore","riskFactors","opportunities","trends","environmental","social","governance","risk","opp","scores","overall","SOCIAL_SENTIMENT","days","sentimentScore","volumeScore","trendDirection","sources","mentions","sentiment","themes","topic","totalMentions","source","avgSentiment","overallSentiment","NEWS_IMPACT","newsItems","date","headline","impact","priceChange","volume","totalPriceImpact","avgVolume","automationCommands","WATCHLIST","action","listName","change","changes","changePercent","changesPercentage","totalValue","avgChange","worst","analysisResults","r","ALERT","undefined","newAlert","shouldTrigger","currentValue","BATCH_ANALYSIS","analysisType","rating","avgScore","topPick","strongBuys","buys","dataCommands","EXPORT_JSON","dataType","filename","jsonString","suggestedFilename","CACHE_STATS","cacheSize","cache","cacheKeys","cacheTypes","hitRate","avgResponseTime","estimatedMemory","DATA_QUALITY","checks","field","quality","revenueTTM","overallQuality","missingFields","completeFields","dataAge","freshnessScore","qualityText","BENCHMARK","benchmark","stockProfile","benchmarkProfile","relativeMetrics","ytd","oneYear","threeYear","fiveYear","benchmarkPerformance","outperformance","x","systemCommands","PERFORMANCE_TEST","tests","cmdStart","dataStart","memStart","memoryUsage","process","heapUsed","heapTotal","external","round","cacheStart","totalDuration","passedTests","statusIcon","API_USAGE","daily","calls","remaining","monthly","endpoints","dailyUsagePercent","monthlyUsagePercent","totalEndpointCalls","rateLimitStatus","estimatedCost","endpoint","usagePercents","CONFIG","setting","val","validSettings","oldValue","newValue","backupService","backupVersion","maxBackupSize","maxBackups","createBackup","includeSettings","includeWatchlists","includeAlerts","includeHistory","includeCachedData","analysisHistory","backupString","backupId","generateBackupId","storeBackup","cleanupOldBackups","restoreBackup","selectiveRestore","createBackupBeforeRestore","retrieveBackup","isVersionCompatible","dataToRestore","filterBackupData","restoreResults","restored","determineStorageType","backupTimestamp","restoreTimestamp","listBackups","backupKeys","backups","deleteBackup","exportBackupToFile","dataString","blob","importBackupFromFile","fileContent","getBackupStats","totalBackups","oldestBackup","newestBackup","encryptedBackups","compressedBackups","backupRecord","backupsToDelete","dataTypes","filtered","privacyService","retentionPolicies","session_data","privacySettings","cookieConsent","trackingConsent","dataCategories","essential","functional","marketing","policies","scheduleCleanup","updatePrivacySettings","newSettings","handlePrivacySettingChanges","cleanupNonEssentialData","cleanupAnalyticsData","removeDataSharingMarkers","setRetentionPolicy","policy","specificType","typesToClean","retentionDays","cleanupDataType","cutoffTime","cleanupCommandHistory","cleanupAnalysisHistory","cleanupCachedData","cleanupExportData","cleanupSessionData","entry","getTime","allHistory","allCached","allExports","nonEssentialTypes","analyticsTypes","exportUserData","includeEssential","includeFunctional","includeAnalytics","deleteAllUserData","confirmation","databases","deleteDatabase","getPrivacyReport","cleanupResults","lastCleanup","compliance","gdprCompliant","ccpaCompliant","retentionPoliciesActive","getPrivacySettings","getRetentionPolicies","syncService","syncEndpoint","syncInterval","lastSyncTime","syncInProgress","conflictResolutionStrategy","syncQueue","maxQueueSize","interval","conflictResolution","queue","setupPeriodicSync","queueSyncOperation","syncOperation","generateOperationId","retries","onLine","processSyncQueue","processed","failed","operations","op","performFullSync","reason","localData","getLocalSyncData","remoteData","getRemoteData","mergedData","resolveConflicts","applyMergedData","syncableTypes","typeData","lastModified","checksum","calculateChecksum","merged","allTypes","local","remote","resolveDataConflict","mergeData","mergeWatchlists","mergeAlerts","remoteIds","getSyncStatus","queueSize","isOnline","hasEndpoint","strategy","persistenceTestSuite","testResults","isRunning","runAllTests","testPersistenceManagerInitialization","testDataStorageAndRetrieval","testDataRemoval","testStorageStatistics","testBackupCreation","testBackupListing","testBackupRestore","testPrivacySettings","testDataCleanup","testSyncStatus","testDataLifecycle","testErrorHandling","passed","testName","assert","recordFailure","storeResult","retrievedData","stored","retrieved","indexedStoreResult","removeResult","backupsCount","restoreResult","recordSkip","updatedSettings","cleanupResult","lifecycle","step","updatedData","retrievedUpdated","retrievedAfterRemoval","initial","updated","afterRemoval","invalidResult","getTestSummary","successRate","testPersistence","persistenceCommands","BACKUP_CREATE","BACKUP_LIST","toLocaleDateString","BACKUP_RESTORE","shouldOverwrite","STORAGE_STATS","totalUsedMB","totalAvailableMB","quotaMB","PRIVACY_CLEANUP","PRIVACY_SETTINGS","boolValue","SYNC_STATUS","PERSISTENCE_TEST","find","categoryCommands","cat","TerminalInterface","onCommandExecute","calculationResults","setCommands","currentInput","setCurrentInput","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestion","setSelectedSuggestion","isLoading","setIsLoading","terminalRef","inputRef","commandProcessor","useEffect","scrollTop","scrollHeight","focus","executeCommand","newCommand","prev","loadingCommand","response","responseCommand","errorCommand","availableCommands","info","commandSuggestions","partialMatches","allSuggestions","onKeyDown","autoComplete","selectSuggestion","VariableInputs","onVariableChange","onBulkEdit","activeSection","setActiveSection","editMode","setEditMode","setVariables","assumptions","revenue_growth","unit","ebitda_margin","capex_revenue","working_capital_revenue","cost_of_capital","risk_free_rate","market_premium","cost_of_debt","debt_equity_ratio","market_data","current_share_price","shares_outstanding","market_cap","enterprise_value","net_debt","formatValue","filteredVariables","sectionData","variable","url","URL","createObjectURL","createElement","href","download","click","revokeObjectURL","section","getVariablesByCategory","categoryVariables","updatedVariables","handleVariableChange","defaultVariables","FinancialModelWorkspace","activeLayout","setActiveLayout","leftPanelContent","setLeftPanelContent","rightPanelContent","setRightPanelContent","isCollaborationOpen","setIsCollaborationOpen","modelState","setModelState","saved","calculating","lastSaved","setCalculationResults","handleCommandExecute","Header","renderLeftPanel"],"mappings":"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"}
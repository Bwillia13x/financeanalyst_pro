{"version":3,"file":"AdvancedCharting-Ci4bghx3.js","sources":["../../src/components/Charts/CandlestickChart.jsx","../../src/pages/AdvancedCharting.jsx"],"sourcesContent":["/**\n * Candlestick Chart Component\n * Professional OHLC (Open, High, Low, Close) price visualization\n */\n\nimport React, { useMemo } from 'react';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Bar,\n  Line\n} from 'recharts';\n\nconst CandlestickChart = ({\n  data = [],\n  symbol = '',\n  height: _height = 300,\n  showVolume = true,\n  theme = 'light'\n}) => {\n  const processedData = useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n\n    return data.map(item => {\n      const open = parseFloat(item.open || 0);\n      const high = parseFloat(item.high || 0);\n      const low = parseFloat(item.low || 0);\n      const close = parseFloat(item.close || 0);\n\n      return {\n        timestamp: item.timestamp,\n        date: new Date(item.timestamp).toLocaleDateString(),\n        time: new Date(item.timestamp).toLocaleTimeString(),\n        open,\n        high,\n        low,\n        close,\n        volume: parseInt(item.volume || 0),\n        // Calculate candlestick body and wicks\n        bodyLow: Math.min(open, close),\n        bodyHigh: Math.max(open, close),\n        wickLow: low,\n        wickHigh: high,\n        isGreen: close >= open,\n        change: close - open,\n        changePercent: open > 0 ? ((close - open) / open) * 100 : 0\n      };\n    });\n  }, [data]);\n\n  const _CustomCandlestick = ({ payload, index }) => {\n    if (!payload) return null;\n\n    const {\n      open: _open,\n      high: _high,\n      low: _low,\n      close: _close,\n      bodyLow,\n      bodyHigh,\n      wickLow,\n      wickHigh,\n      isGreen\n    } = payload;\n\n    const colors = {\n      green: theme === 'dark' ? '#10b981' : '#059669',\n      red: theme === 'dark' ? '#ef4444' : '#dc2626',\n      wick: theme === 'dark' ? '#6b7280' : '#4b5563'\n    };\n\n    const candleColor = isGreen ? colors.green : colors.red;\n\n    // Mock x coordinate calculation (in real implementation, use scale)\n    const x = 50 + (index * 10);\n    const yScale = 100; // Mock scale\n\n    return (\n      <g>\n        {/* Wick line */}\n        <line\n          x1={x}\n          y1={wickHigh * yScale}\n          x2={x}\n          y2={wickLow * yScale}\n          stroke={colors.wick}\n          strokeWidth={1}\n        />\n\n        {/* Candlestick body */}\n        <rect\n          x={x - 3}\n          y={Math.min(bodyHigh, bodyLow) * yScale}\n          width={6}\n          height={Math.abs(bodyHigh - bodyLow) * yScale}\n          fill={isGreen ? candleColor : 'transparent'}\n          stroke={candleColor}\n          strokeWidth={1}\n        />\n      </g>\n    );\n  };\n\n  const CustomTooltip = ({ active, payload, label: _label }) => {\n    if (!active || !payload || !payload.length) return null;\n\n    const data = payload[0].payload;\n    if (!data) return null;\n\n    return (\n      <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n        <p className=\"font-semibold text-gray-900\">{symbol}</p>\n        <p className=\"text-sm text-gray-600\">{data.date} {data.time}</p>\n        <div className=\"mt-2 space-y-1\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-gray-600\">Open:</span>\n            <span className=\"font-mono text-sm\">${data.open.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-gray-600\">High:</span>\n            <span className=\"font-mono text-sm text-green-600\">${data.high.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-gray-600\">Low:</span>\n            <span className=\"font-mono text-sm text-red-600\">${data.low.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-gray-600\">Close:</span>\n            <span className=\"font-mono text-sm\">${data.close.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-gray-600\">Change:</span>\n            <span className={`font-mono text-sm ${data.isGreen ? 'text-green-600' : 'text-red-600'}`}>\n              {data.change >= 0 ? '+' : ''}${data.change.toFixed(2)} ({data.changePercent.toFixed(2)}%)\n            </span>\n          </div>\n          {showVolume && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Volume:</span>\n              <span className=\"font-mono text-sm\">{data.volume.toLocaleString()}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!processedData.length) {\n    return (\n      <div className=\"w-full h-full flex items-center justify-center bg-gray-50 rounded-lg\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-2\">\n            <svg\n              className=\"w-6 h-6 text-gray-400\" fill=\"none\" stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n              />\n            </svg>\n          </div>\n          <p className=\"text-sm text-gray-500\">No price data available</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <ComposedChart data={processedData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n          <XAxis\n            dataKey=\"date\"\n            stroke=\"#6b7280\"\n            fontSize={12}\n            tickLine={false}\n            axisLine={false}\n          />\n          <YAxis\n            stroke=\"#6b7280\"\n            fontSize={12}\n            tickLine={false}\n            axisLine={false}\n            tickFormatter={(value) => `$${value.toFixed(0)}`}\n          />\n          <Tooltip content={<CustomTooltip />} />\n\n          {/* Price line as approximation */}\n          <Line\n            type=\"monotone\"\n            dataKey=\"close\"\n            stroke=\"#3b82f6\"\n            strokeWidth={2}\n            dot={false}\n            connectNulls={false}\n          />\n\n          {/* Volume bars if enabled */}\n          {showVolume && (\n            <Bar\n              dataKey=\"volume\"\n              fill=\"#e5e7eb\"\n              opacity={0.3}\n              yAxisId=\"volume\"\n            />\n          )}\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default CandlestickChart;\n","/**\n * Advanced Charting & Data Visualization Page\n * Professional-grade financial charting and analytics dashboard\n */\n\nimport { motion } from 'framer-motion';\nimport {\n  BarChart3,\n  BarChart,\n  LineChart,\n  PieChart,\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  Target,\n  Layers,\n  Grid3X3,\n  Download,\n  Settings,\n  RefreshCw,\n  Play,\n  Pause,\n  Filter,\n  Calendar,\n  Search,\n  Plus,\n  Zap,\n  X\n} from 'lucide-react';\nimport React, { useState, useEffect, useRef } from 'react';\n\nimport CandlestickChart from '../components/Charts/CandlestickChart';\nimport _CorrelationMatrix from '../components/Charts/CorrelationMatrix';\nimport _CustomizableChart from '../components/Charts/CustomizableChart';\nimport _HeatmapChart from '../components/Charts/HeatmapChart';\nimport _RealTimeChart from '../components/Charts/RealTimeChart';\nimport SEOHead from '../components/SEO/SEOHead';\nimport secureApiClient from '../services/secureApiClient';\nimport { formatCurrency as _formatCurrency, formatPercentage as _formatPercentage, formatNumber as _formatNumber } from '../utils/formatters';\n\nconst AdvancedCharting = () => {\n  const [selectedTimeframe, setSelectedTimeframe] = useState('1D');\n  const [selectedSymbols, setSelectedSymbols] = useState(['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']);\n  const [chartLayout, setChartLayout] = useState('grid');\n  const [isRealTime, setIsRealTime] = useState(true);\n  const [marketData, setMarketData] = useState({});\n  const [_portfolioData, setPortfolioData] = useState(null);\n  const [loading, setLoading] = useState({\n    charts: false,\n    data: false,\n    export: false\n  });\n  const [activeCharts, setActiveCharts] = useState([\n    { id: 'price-chart', type: 'candlestick', symbol: 'AAPL', position: { x: 0, y: 0, w: 6, h: 4 } },\n    { id: 'volume-chart', type: 'bar', symbol: 'AAPL', position: { x: 6, y: 0, w: 6, h: 2 } },\n    { id: 'correlation-matrix', type: 'heatmap', symbols: selectedSymbols, position: { x: 6, y: 2, w: 6, h: 2 } },\n    { id: 'performance-comparison', type: 'line', symbols: selectedSymbols.slice(0, 3), position: { x: 0, y: 4, w: 12, h: 3 } }\n  ]);\n\n  const timeframeOptions = [\n    { value: '1D', label: '1 Day', interval: '1m' },\n    { value: '5D', label: '5 Days', interval: '5m' },\n    { value: '1M', label: '1 Month', interval: '1h' },\n    { value: '3M', label: '3 Months', interval: '1d' },\n    { value: '6M', label: '6 Months', interval: '1d' },\n    { value: '1Y', label: '1 Year', interval: '1wk' },\n    { value: '2Y', label: '2 Years', interval: '1wk' },\n    { value: '5Y', label: '5 Years', interval: '1mo' },\n    { value: 'MAX', label: 'Max', interval: '1mo' }\n  ];\n\n  const chartTypes = [\n    { id: 'candlestick', name: 'Candlestick', icon: CandlestickChart, description: 'OHLC price data' },\n    { id: 'line', name: 'Line Chart', icon: LineChart, description: 'Price trends over time' },\n    { id: 'bar', name: 'Bar Chart', icon: BarChart, description: 'Volume and comparison data' },\n    { id: 'area', name: 'Area Chart', icon: Activity, description: 'Filled area charts' },\n    { id: 'heatmap', name: 'Heatmap', icon: Grid3X3, description: 'Correlation matrices' },\n    { id: 'scatter', name: 'Scatter Plot', icon: Target, description: 'Risk vs return analysis' }\n  ];\n\n  const realTimeUpdateRef = useRef(null);\n\n  // Load initial data\n  useEffect(() => {\n    loadChartData();\n    if (isRealTime) {\n      startRealTimeUpdates();\n    }\n    return () => {\n      if (realTimeUpdateRef.current) {\n        clearInterval(realTimeUpdateRef.current);\n      }\n    };\n  }, [selectedSymbols, selectedTimeframe]);\n\n  // Real-time updates\n  useEffect(() => {\n    if (isRealTime) {\n      startRealTimeUpdates();\n    } else {\n      stopRealTimeUpdates();\n    }\n  }, [isRealTime]);\n\n  const loadChartData = async() => {\n    setLoading(prev => ({ ...prev, data: true }));\n\n    try {\n      // Load market data for selected symbols\n      const dataPromises = selectedSymbols.map(async(symbol) => {\n        try {\n          const [quote, historical] = await Promise.all([\n            secureApiClient.get(`/market-data/quote/${symbol}`),\n            secureApiClient.get(`/market-data/historical/${symbol}?period=${selectedTimeframe}`)\n          ]);\n\n          return {\n            symbol,\n            quote: quote.data,\n            historical: historical.data\n          };\n        } catch (error) {\n          console.warn(`Failed to load data for ${symbol}:`, error);\n          return {\n            symbol,\n            quote: generateMockQuote(symbol),\n            historical: generateMockHistoricalData(symbol)\n          };\n        }\n      });\n\n      const results = await Promise.all(dataPromises);\n      const newMarketData = {};\n\n      results.forEach(result => {\n        if (result) {\n          newMarketData[result.symbol] = result;\n        }\n      });\n\n      setMarketData(newMarketData);\n\n      // Load portfolio data if available\n      try {\n        const portfolioResponse = await secureApiClient.get('/portfolio/current');\n        setPortfolioData(portfolioResponse.data);\n      } catch {\n        console.log('No portfolio data available');\n      }\n\n    } catch (error) {\n      console.error('Failed to load chart data:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, data: false }));\n    }\n  };\n\n  const startRealTimeUpdates = () => {\n    stopRealTimeUpdates(); // Clear existing interval\n\n    realTimeUpdateRef.current = setInterval(async() => {\n      try {\n        // Update quotes for selected symbols\n        const quotePromises = selectedSymbols.map(async(symbol) => {\n          try {\n            const response = await secureApiClient.get(`/market-data/quote/${symbol}`);\n            return { symbol, quote: response.data };\n          } catch {\n            return { symbol, quote: generateMockQuote(symbol) };\n          }\n        });\n\n        const quotes = await Promise.all(quotePromises);\n\n        setMarketData(prev => {\n          const updated = { ...prev };\n          quotes.forEach(({ symbol, quote }) => {\n            if (updated[symbol]) {\n              updated[symbol] = { ...updated[symbol], quote };\n            }\n          });\n          return updated;\n        });\n\n      } catch (error) {\n        console.error('Real-time update failed:', error);\n      }\n    }, 5000); // Update every 5 seconds\n  };\n\n  const stopRealTimeUpdates = () => {\n    if (realTimeUpdateRef.current) {\n      clearInterval(realTimeUpdateRef.current);\n      realTimeUpdateRef.current = null;\n    }\n  };\n\n  const generateMockQuote = (symbol) => {\n    const basePrice = { AAPL: 175, MSFT: 280, GOOGL: 2800, AMZN: 3200, TSLA: 250 }[symbol] || 100;\n    const change = (Math.random() - 0.5) * 10;\n    const price = basePrice + change;\n\n    return {\n      symbol,\n      price: price.toFixed(2),\n      change: change.toFixed(2),\n      changePercent: ((change / basePrice) * 100).toFixed(2),\n      volume: Math.floor(Math.random() * 10000000),\n      marketCap: price * Math.floor(Math.random() * 1000000000),\n      timestamp: new Date().toISOString()\n    };\n  };\n\n  const generateMockHistoricalData = (symbol) => {\n    const data = [];\n    const basePrice = { AAPL: 175, MSFT: 280, GOOGL: 2800, AMZN: 3200, TSLA: 250 }[symbol] || 100;\n    let currentPrice = basePrice;\n\n    const intervals = { '1D': 390, '5D': 78, '1M': 22, '3M': 65, '6M': 130, '1Y': 252, '2Y': 104, '5Y': 260, 'MAX': 520 }[selectedTimeframe] || 100;\n\n    for (let i = 0; i < intervals; i++) {\n      const change = (Math.random() - 0.5) * 5;\n      currentPrice += change;\n      const volume = Math.floor(Math.random() * 1000000);\n\n      data.push({\n        timestamp: new Date(Date.now() - (intervals - i) * 24 * 60 * 60 * 1000).toISOString(),\n        open: currentPrice - Math.random() * 2,\n        high: currentPrice + Math.random() * 3,\n        low: currentPrice - Math.random() * 3,\n        close: currentPrice,\n        volume\n      });\n    }\n\n    return data;\n  };\n\n  const addChart = (type, symbol = null, symbols = null) => {\n    const newChart = {\n      id: `chart-${Date.now()}`,\n      type,\n      symbol,\n      symbols,\n      position: { x: 0, y: 0, w: 6, h: 4 }\n    };\n\n    setActiveCharts(prev => [...prev, newChart]);\n  };\n\n  const removeChart = (chartId) => {\n    setActiveCharts(prev => prev.filter(chart => chart.id !== chartId));\n  };\n\n  const exportChart = async(chartId, format = 'png') => {\n    setLoading(prev => ({ ...prev, export: true }));\n\n    try {\n      // In a real implementation, this would capture the chart and export it\n      const chart = activeCharts.find(c => c.id === chartId);\n      console.log(`Exporting chart ${chart.type} as ${format}`);\n\n      // Mock export functionality\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Create download link (placeholder)\n      const blob = new Blob(['Chart export placeholder'], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `chart-${chartId}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n    } catch (error) {\n      console.error('Export failed:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, export: false }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16\">\n      <SEOHead\n        title=\"Advanced Charting & Data Visualization - FinanceAnalyst Pro\"\n        description=\"Professional-grade financial charting with real-time data, customizable dashboards, and advanced visualization tools for comprehensive market analysis.\"\n      />\n\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-20\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                <BarChart3 className=\"w-8 h-8 text-blue-600\" />\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Advanced Charting</h1>\n                  <p className=\"text-sm text-gray-600\">Professional financial data visualization</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${isRealTime ? 'bg-green-400 animate-pulse' : 'bg-gray-400'}`} />\n                <span className=\"text-xs text-gray-500\">\n                  {isRealTime ? 'Live Data' : 'Static Data'}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Real-time toggle */}\n              <button\n                onClick={() => setIsRealTime(!isRealTime)}\n                className={`flex items-center space-x-2 px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${\n                  isRealTime\n                    ? 'bg-green-100 text-green-700 hover:bg-green-200'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {isRealTime ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                <span>{isRealTime ? 'Pause' : 'Start'} Live</span>\n              </button>\n\n              {/* Refresh button */}\n              <button\n                onClick={loadChartData}\n                disabled={loading.data}\n                className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n              >\n                <RefreshCw className={`w-4 h-4 ${loading.data ? 'animate-spin' : ''}`} />\n                <span>Refresh</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"mt-4 flex flex-wrap items-center gap-4\">\n            {/* Timeframe selector */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm font-medium text-gray-700\">Timeframe:</span>\n              <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                {timeframeOptions.map(option => (\n                  <button\n                    key={option.value}\n                    onClick={() => setSelectedTimeframe(option.value)}\n                    className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${\n                      selectedTimeframe === option.value\n                        ? 'bg-white text-blue-600 shadow-sm'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`}\n                  >\n                    {option.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Symbol selector */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm font-medium text-gray-700\">Symbols:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {selectedSymbols.map(symbol => (\n                  <span\n                    key={symbol}\n                    className=\"flex items-center space-x-1 px-2 py-1 bg-blue-100 text-blue-700 rounded-md text-xs\"\n                  >\n                    <span>{symbol}</span>\n                    <button\n                      onClick={() => setSelectedSymbols(prev => prev.filter(s => s !== symbol))}\n                      className=\"hover:bg-blue-200 rounded-full p-0.5\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </span>\n                ))}\n                <button className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded-md text-xs hover:bg-gray-200 transition-colors\">\n                  <Plus className=\"w-3 h-3\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Layout selector */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm font-medium text-gray-700\">Layout:</span>\n              <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                <button\n                  onClick={() => setChartLayout('grid')}\n                  className={`p-2 rounded-md transition-colors ${\n                    chartLayout === 'grid' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'\n                  }`}\n                  title=\"Grid Layout\"\n                >\n                  <Grid3X3 className=\"w-4 h-4\" />\n                </button>\n                <button\n                  onClick={() => setChartLayout('stack')}\n                  className={`p-2 rounded-md transition-colors ${\n                    chartLayout === 'stack' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'\n                  }`}\n                  title=\"Stacked Layout\"\n                >\n                  <Layers className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Dashboard */}\n      <div className=\"p-6\">\n        {chartLayout === 'grid' ? (\n          <div className=\"grid grid-cols-12 gap-4 min-h-screen\">\n            {activeCharts.map(chart => (\n              <motion.div\n                key={chart.id}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                className={`bg-white rounded-xl shadow-sm border overflow-hidden ${\n                  `col-span-${chart.position.w} row-span-${chart.position.h}`\n                }`}\n              >\n                {/* Chart Header */}\n                <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"p-1 bg-blue-100 rounded\">\n                      {React.createElement(\n                        chartTypes.find(t => t.id === chart.type)?.icon || BarChart3,\n                        { className: 'w-4 h-4 text-blue-600' }\n                      )}\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">\n                        {chartTypes.find(t => t.id === chart.type)?.name}\n                      </h3>\n                      <p className=\"text-xs text-gray-500\">\n                        {chart.symbol || chart.symbols?.join(', ')}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-1\">\n                    <button\n                      onClick={() => exportChart(chart.id, 'png')}\n                      className=\"p-1.5 hover:bg-gray-100 rounded-lg transition-colors\"\n                      title=\"Export Chart\"\n                    >\n                      <Download className=\"w-4 h-4 text-gray-600\" />\n                    </button>\n                    <button\n                      onClick={() => removeChart(chart.id)}\n                      className=\"p-1.5 hover:bg-gray-100 rounded-lg transition-colors\"\n                      title=\"Remove Chart\"\n                    >\n                      <X className=\"w-4 h-4 text-gray-600\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Chart Content */}\n                <div className=\"p-4 h-64\">\n                  <ChartRenderer\n                    chart={chart}\n                    marketData={marketData}\n                    timeframe={selectedTimeframe}\n                    isRealTime={isRealTime}\n                  />\n                </div>\n              </motion.div>\n            ))}\n\n            {/* Add Chart Button */}\n            <div className=\"col-span-6 bg-white border-2 border-dashed border-gray-300 rounded-xl flex items-center justify-center min-h-64 hover:border-blue-400 hover:bg-blue-50 transition-colors cursor-pointer\">\n              <div className=\"text-center\">\n                <Plus className=\"w-8 h-8 text-gray-400 mx-auto mb-3\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Add Chart</h3>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {chartTypes.slice(0, 4).map(type => (\n                    <button\n                      key={type.id}\n                      onClick={() => addChart(type.id, selectedSymbols[0])}\n                      className=\"flex items-center space-x-2 px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm transition-colors\"\n                    >\n                      <type.icon className=\"w-4 h-4\" />\n                      <span>{type.name}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {activeCharts.map(chart => (\n              <motion.div\n                key={chart.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"bg-white rounded-xl shadow-sm border overflow-hidden\"\n              >\n                {/* Chart Header */}\n                <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"p-1 bg-blue-100 rounded\">\n                      {React.createElement(\n                        chartTypes.find(t => t.id === chart.type)?.icon || BarChart3,\n                        { className: 'w-4 h-4 text-blue-600' }\n                      )}\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">\n                        {chartTypes.find(t => t.id === chart.type)?.name}\n                      </h3>\n                      <p className=\"text-xs text-gray-500\">\n                        {chart.symbol || chart.symbols?.join(', ')}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-1\">\n                    <button\n                      onClick={() => exportChart(chart.id, 'png')}\n                      className=\"p-1.5 hover:bg-gray-100 rounded-lg transition-colors\"\n                    >\n                      <Download className=\"w-4 h-4 text-gray-600\" />\n                    </button>\n                    <button\n                      onClick={() => removeChart(chart.id)}\n                      className=\"p-1.5 hover:bg-gray-100 rounded-lg transition-colors\"\n                    >\n                      <X className=\"w-4 h-4 text-gray-600\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Chart Content */}\n                <div className=\"p-4 h-96\">\n                  <ChartRenderer\n                    chart={chart}\n                    marketData={marketData}\n                    timeframe={selectedTimeframe}\n                    isRealTime={isRealTime}\n                  />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Chart Renderer Component\nconst ChartRenderer = ({ chart, marketData, timeframe, isRealTime }) => {\n  const data = chart.symbol ? marketData[chart.symbol] : null;\n  const multiData = chart.symbols ? chart.symbols.map(s => marketData[s]).filter(Boolean) : [];\n\n  if (!data && multiData.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Activity className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n          <p className=\"text-gray-500\">Loading chart data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // This is a placeholder - in a real implementation, you'd render actual chart components\n  return (\n    <div className=\"h-full flex items-center justify-center bg-gray-50 rounded-lg\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n          {React.createElement(\n            {\n              candlestick: CandlestickChart,\n              line: LineChart,\n              bar: BarChart,\n              area: Activity,\n              heatmap: Grid3X3,\n              scatter: Target\n            }[chart.type] || BarChart3,\n            { className: 'w-8 h-8 text-blue-600' }\n          )}\n        </div>\n        <h3 className=\"font-semibold text-gray-900 mb-1\">\n          {chart.type.charAt(0).toUpperCase() + chart.type.slice(1)} Chart\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          {chart.symbol || chart.symbols?.join(', ')} • {timeframe}\n        </p>\n        {isRealTime && (\n          <div className=\"flex items-center justify-center space-x-1 mt-2\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n            <span className=\"text-xs text-green-600\">Live Updates</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdvancedCharting;\n"],"names":["CandlestickChart","data","symbol","height","_height","showVolume","theme","processedData","useMemo","Array","isArray","map","item","open","parseFloat","high","low","close","timestamp","date","Date","toLocaleDateString","time","toLocaleTimeString","volume","parseInt","bodyLow","Math","min","bodyHigh","max","wickLow","wickHigh","isGreen","change","changePercent","CustomTooltip","active","payload","label","_label","length","jsxs","className","children","jsx","toFixed","toLocaleString","ResponsiveContainer","width","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","tickLine","axisLine","YAxis","tickFormatter","value","Tooltip","content","Line","type","strokeWidth","dot","connectNulls","Bar","fill","opacity","yAxisId","viewBox","strokeLinecap","strokeLinejoin","d","AdvancedCharting","selectedTimeframe","setSelectedTimeframe","useState","selectedSymbols","setSelectedSymbols","chartLayout","setChartLayout","isRealTime","setIsRealTime","marketData","setMarketData","_portfolioData","setPortfolioData","loading","setLoading","charts","export","activeCharts","setActiveCharts","id","position","x","y","w","h","symbols","slice","chartTypes","name","icon","description","LineChart","BarChart","Activity","Grid3X3","Target","realTimeUpdateRef","useRef","useEffect","loadChartData","startRealTimeUpdates","current","clearInterval","stopRealTimeUpdates","async","prev","dataPromises","quote","historical","Promise","all","secureApiClient","get","error","generateMockQuote","generateMockHistoricalData","results","newMarketData","forEach","result","portfolioResponse","setInterval","quotePromises","quotes","updated","basePrice","AAPL","MSFT","GOOGL","AMZN","TSLA","random","price","floor","marketCap","toISOString","currentPrice","intervals","MAX","i","push","now","removeChart","chartId","filter","chart","exportChart","format","find","c","resolve","setTimeout","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","SEOHead","title","BarChart3","onClick","Pause","Play","disabled","RefreshCw","interval","option","s","X","Plus","Layers","motion","div","initial","scale","animate","React","t","join","Download","ChartRenderer","timeframe","newChart","addChart","multiData","Boolean","candlestick","line","bar","area","heatmap","scatter","charAt","toUpperCase"],"mappings":"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"}
{"version":3,"file":"index-BUNRlh-5.js","sources":["../../src/pages/financial-model-workspace/components/AuditTrail.jsx","../../src/pages/financial-model-workspace/components/CalculationResults.jsx","../../src/pages/financial-model-workspace/components/FormulaBuilder.jsx","../../src/pages/financial-model-workspace/components/ModelTemplates.jsx","../../src/services/commandRegistry.js","../../src/services/commandProcessor.js","../../src/services/commands/coreCommands.js","../../src/services/commands/portfolioCommands.js","../../src/services/commands/valuationCommands.js","../../src/services/commands/technicalCommands.js","../../src/services/commands/esgCommands.js","../../src/services/commands/automationCommands.js","../../src/services/commands/dataCommands.js","../../src/services/commands/systemCommands.js","../../src/services/commands/persistenceCommands.js","../../src/services/commands/privateAnalysisCommands.js","../../src/services/commandInitializer.js","../../src/pages/financial-model-workspace/components/TerminalInterface.jsx","../../src/pages/financial-model-workspace/components/VariableInputs.jsx","../../src/pages/financial-model-workspace/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst AuditTrail = ({ calculations, errors, warnings }) => {\n  const [activeTab, setActiveTab] = useState('calculations');\n  const [expandedItems, setExpandedItems] = useState(new Set());\n  const [filterLevel, setFilterLevel] = useState('all');\n\n  const mockAuditData = {\n    calculations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 300000),\n        type: 'calculation',\n        operation: 'DCF Valuation',\n        formula: 'NPV(FCFF_2024:2028, WACC)',\n        result: 2547.5,\n        inputs: {\n          FCFF_2024: 187.5,\n          FCFF_2025: 206.3,\n          FCFF_2026: 226.9,\n          FCFF_2027: 249.6,\n          FCFF_2028: 274.6,\n          WACC: 0.098\n        },\n        executionTime: 0.045,\n        status: 'success'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 600000),\n        type: 'calculation',\n        operation: 'WACC Calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        result: 0.098,\n        inputs: {\n          cost_equity: 0.123,\n          cost_debt: 0.045,\n          tax_rate: 0.25,\n          debt_ratio: 0.4\n        },\n        executionTime: 0.012,\n        status: 'success'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 900000),\n        type: 'calculation',\n        operation: 'Terminal Value',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        result: 1247.3,\n        inputs: {\n          FCF_final: 274.6,\n          terminal_growth: 0.025,\n          WACC: 0.098\n        },\n        executionTime: 0.008,\n        status: 'success'\n      }\n    ],\n    errors: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 1200000),\n        type: 'error',\n        severity: 'high',\n        message: 'Division by zero in WACC calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        location: 'Cell B15',\n        suggestion: 'Ensure debt_ratio is not equal to 1.0',\n        resolved: true\n      }\n    ],\n    warnings: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 180000),\n        type: 'warning',\n        severity: 'medium',\n        message: 'Beta coefficient (1.15) is above industry average (0.95)',\n        formula: 'CAPM(risk_free, beta, market_premium)',\n        location: 'Assumptions',\n        suggestion: 'Consider reviewing beta calculation or using industry average',\n        acknowledged: false\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 420000),\n        type: 'warning',\n        severity: 'low',\n        message: 'Terminal growth rate (2.5%) close to discount rate component',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        location: 'Terminal Value',\n        suggestion: 'Ensure terminal growth rate is reasonable for long-term GDP growth',\n        acknowledged: true\n      }\n    ],\n    validations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 60000),\n        type: 'validation',\n        check: 'Circular Reference Check',\n        status: 'passed',\n        details: 'No circular references detected in model'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 120000),\n        type: 'validation',\n        check: 'Balance Sheet Check',\n        status: 'passed',\n        details: 'Assets = Liabilities + Equity for all projection years'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 240000),\n        type: 'validation',\n        check: 'Cash Flow Consistency',\n        status: 'warning',\n        details: 'Minor rounding differences in cash flow statements (<$0.1M)'\n      }\n    ]\n  };\n\n  const tabs = [\n    {\n      id: 'calculations',\n      label: 'Calculations',\n      icon: 'Calculator',\n      count: mockAuditData.calculations.length\n    },\n    { id: 'errors', label: 'Errors', icon: 'XCircle', count: mockAuditData.errors.length },\n    {\n      id: 'warnings',\n      label: 'Warnings',\n      icon: 'AlertTriangle',\n      count: mockAuditData.warnings.length\n    },\n    {\n      id: 'validations',\n      label: 'Validations',\n      icon: 'CheckCircle',\n      count: mockAuditData.validations.length\n    }\n  ];\n\n  const toggleExpanded = id => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'success':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      case 'error':\n        return { icon: 'XCircle', color: 'text-destructive' };\n      case 'warning':\n        return { icon: 'AlertTriangle', color: 'text-warning' };\n      case 'passed':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      default:\n        return { icon: 'Info', color: 'text-muted-foreground' };\n    }\n  };\n\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'high':\n        return 'text-destructive bg-destructive/10';\n      case 'medium':\n        return 'text-warning bg-warning/10';\n      case 'low':\n        return 'text-muted-foreground bg-muted';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const formatExecutionTime = time => {\n    if (time < 0.001) return '<1ms';\n    if (time < 1) return `${(time * 1000).toFixed(0)}ms`;\n    return `${time.toFixed(2)}s`;\n  };\n\n  const renderCalculations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.calculations.map(calc => (\n        <div key={calc.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Icon name=\"Calculator\" size={16} className=\"text-primary\" />\n                <span className=\"font-medium text-foreground\">{calc.operation}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(calc.status).color} bg-current/10`}\n                >\n                  {calc.status}\n                </span>\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {calc.formula}\n              </code>\n              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                <span>{calc.timestamp.toLocaleTimeString()}</span>\n                <span>Execution: {formatExecutionTime(calc.executionTime)}</span>\n                <span>Result: ${calc.result.toFixed(2)}M</span>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName={expandedItems.has(calc.id) ? 'ChevronUp' : 'ChevronDown'}\n              onClick={() => toggleExpanded(calc.id)}\n            />\n          </div>\n\n          {expandedItems.has(calc.id) && (\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <h5 className=\"text-sm font-medium text-foreground mb-2\">Input Values</h5>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Object.entries(calc.inputs).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">{key}:</span>\n                    <span className=\"text-foreground font-mono\">\n                      {typeof value === 'number' ? value.toFixed(3) : value}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderErrors = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.errors.map(error => (\n        <div key={error.id} className=\"p-4 bg-background border border-destructive/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"XCircle\" size={16} className=\"text-destructive mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{error.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(error.severity)}`}\n                >\n                  {error.severity}\n                </span>\n                {error.resolved && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-success bg-success/10\">\n                    Resolved\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {error.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {error.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {error.suggestion}\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                {error.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderWarnings = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.warnings.map(warning => (\n        <div key={warning.id} className=\"p-4 bg-background border border-warning/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"AlertTriangle\" size={16} className=\"text-warning mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{warning.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(warning.severity)}`}\n                >\n                  {warning.severity}\n                </span>\n                {warning.acknowledged && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-muted-foreground bg-muted\">\n                    Acknowledged\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {warning.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {warning.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {warning.suggestion}\n              </div>\n              <div className=\"flex items-center justify-between mt-3\">\n                <div className=\"text-xs text-muted-foreground\">\n                  {warning.timestamp.toLocaleString()}\n                </div>\n                {!warning.acknowledged && (\n                  <Button variant=\"outline\" size=\"sm\">\n                    Acknowledge\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderValidations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.validations.map(validation => (\n        <div key={validation.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon\n              name={getStatusIcon(validation.status).icon}\n              size={16}\n              className={`${getStatusIcon(validation.status).color} mt-0.5`}\n            />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{validation.check}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(validation.status).color} bg-current/10`}\n                >\n                  {validation.status}\n                </span>\n              </div>\n              <div className=\"text-sm text-muted-foreground mb-2\">{validation.details}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {validation.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'calculations':\n        return renderCalculations();\n      case 'errors':\n        return renderErrors();\n      case 'warnings':\n        return renderWarnings();\n      case 'validations':\n        return renderValidations();\n      default:\n        return renderCalculations();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Audit Trail</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Download\">\n            Export Log\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"RefreshCw\">\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n            {tab.count > 0 && (\n              <span className=\"px-2 py-1 bg-current/20 rounded-full text-xs\">{tab.count}</span>\n            )}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Audit logging active</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuditTrail;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst CalculationResults = ({ results, onExport }) => {\n  const [activeTab, setActiveTab] = useState('summary');\n  const [expandedSections, setExpandedSections] = useState(new Set(['valuation']));\n\n  const mockResults = {\n    summary: {\n      enterpriseValue: 2847.5,\n      equityValue: 2547.5,\n      sharePrice: 127.38,\n      impliedReturn: 0.156,\n      confidence: 0.87\n    },\n    cashFlows: [\n      { year: 2024, revenue: 1250, ebitda: 312.5, fcf: 187.5, pv: 170.5 },\n      { year: 2025, revenue: 1375, ebitda: 343.8, fcf: 206.3, pv: 172.8 },\n      { year: 2026, revenue: 1513, ebitda: 378.2, fcf: 226.9, pv: 175.2 },\n      { year: 2027, revenue: 1664, ebitda: 416.0, fcf: 249.6, pv: 177.7 },\n      { year: 2028, revenue: 1830, ebitda: 457.6, fcf: 274.6, pv: 180.3 }\n    ],\n    sensitivity: {\n      wacc: [0.08, 0.09, 0.1, 0.11, 0.12],\n      growth: [0.015, 0.02, 0.025, 0.03, 0.035],\n      matrix: [\n        [145.2, 138.7, 132.8, 127.4, 122.5],\n        [152.1, 144.9, 138.2, 132.1, 126.4],\n        [159.8, 151.9, 144.6, 137.8, 131.6],\n        [168.4, 159.7, 151.8, 144.4, 137.6],\n        [178.1, 168.4, 159.7, 151.8, 144.4]\n      ]\n    },\n    scenarios: [\n      { name: 'Base Case', probability: 0.6, sharePrice: 127.38, irr: 0.156 },\n      { name: 'Bull Case', probability: 0.25, sharePrice: 145.67, irr: 0.189 },\n      { name: 'Bear Case', probability: 0.15, sharePrice: 98.42, irr: 0.087 }\n    ],\n    multiples: [\n      { metric: 'EV/Revenue', current: 2.3, peer_avg: 2.8, premium: -17.9 },\n      { metric: 'EV/EBITDA', current: 9.1, peer_avg: 11.2, premium: -18.8 },\n      { metric: 'P/E Ratio', current: 18.5, peer_avg: 22.1, premium: -16.3 },\n      { metric: 'P/B Ratio', current: 2.1, peer_avg: 2.6, premium: -19.2 }\n    ]\n  };\n\n  const tabs = [\n    { id: 'summary', label: 'Summary', icon: 'BarChart3' },\n    { id: 'cashflows', label: 'Cash Flows', icon: 'TrendingUp' },\n    { id: 'sensitivity', label: 'Sensitivity', icon: 'Target' },\n    { id: 'scenarios', label: 'Scenarios', icon: 'GitBranch' },\n    { id: 'multiples', label: 'Multiples', icon: 'Layers' }\n  ];\n\n  const toggleSection = section => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const formatCurrency = (value, decimals = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(value);\n  };\n\n  const formatPercent = (value, decimals = 1) => {\n    return `${(value * 100).toFixed(decimals)}%`;\n  };\n\n  const renderSummary = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Enterprise Value</span>\n            <Icon name=\"Building\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.enterpriseValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Equity Value</span>\n            <Icon name=\"PieChart\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.equityValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Share Price</span>\n            <Icon name=\"DollarSign\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.sharePrice)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Implied Return</span>\n            <Icon name=\"TrendingUp\" size={16} className=\"text-success\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-success\">\n              {formatPercent(mockResults.summary.impliedReturn)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Indicator */}\n      <div className=\"p-4 bg-background border border-border rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-sm font-medium text-foreground\">Model Confidence</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {formatPercent(mockResults.summary.confidence)}\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2\">\n          <div\n            className=\"bg-success h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${mockResults.summary.confidence * 100}%` }}\n          />\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Based on data quality, assumption validity, and sensitivity analysis\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderCashFlows = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Year</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Revenue</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">EBITDA</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">FCF</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Present Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.cashFlows.map((cf, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{cf.year}</td>\n                <td className=\"py-3 text-right text-foreground\">\n                  {formatCurrency(cf.revenue, 0)}M\n                </td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.ebitda, 1)}M</td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.fcf, 1)}M</td>\n                <td className=\"py-3 text-right text-success font-medium\">\n                  {formatCurrency(cf.pv, 1)}M\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-foreground\">Terminal Value</span>\n          <span className=\"text-lg font-bold text-foreground\">{formatCurrency(1247.3, 1)}M</span>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          2.5% perpetual growth rate applied to 2028 FCF\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderSensitivity = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h4 className=\"text-sm font-medium text-foreground mb-2\">\n          Share Price Sensitivity Analysis\n        </h4>\n        <p className=\"text-xs text-muted-foreground\">WACC vs Terminal Growth Rate</p>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-xs\">\n          <thead>\n            <tr>\n              <th className=\"p-2 text-left text-muted-foreground\">WACC \\ Growth</th>\n              {mockResults.sensitivity.growth.map((growth, index) => (\n                <th key={index} className=\"p-2 text-center text-muted-foreground\">\n                  {formatPercent(growth)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.sensitivity.wacc.map((wacc, rowIndex) => (\n              <tr key={rowIndex} className=\"border-t border-border/50\">\n                <td className=\"p-2 text-muted-foreground font-medium\">{formatPercent(wacc)}</td>\n                {mockResults.sensitivity.matrix[rowIndex].map((value, colIndex) => (\n                  <td\n                    key={colIndex}\n                    className={`p-2 text-center font-medium ${\n                      Math.abs(value - 127.38) < 5\n                        ? 'bg-primary/20 text-primary'\n                        : 'text-foreground'\n                    }`}\n                  >\n                    {formatCurrency(value)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderScenarios = () => (\n    <div className=\"space-y-4\">\n      {mockResults.scenarios.map((scenario, index) => (\n        <div key={index} className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-medium text-foreground\">{scenario.name}</span>\n              <span className=\"text-xs bg-background px-2 py-1 rounded text-muted-foreground\">\n                {formatPercent(scenario.probability)} probability\n              </span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-foreground\">\n                {formatCurrency(scenario.sharePrice)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{formatPercent(scenario.irr)} IRR</div>\n            </div>\n          </div>\n          <div className=\"w-full bg-background rounded-full h-1\">\n            <div\n              className=\"bg-primary h-1 rounded-full\"\n              style={{ width: `${scenario.probability * 100}%` }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderMultiples = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Multiple</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Current</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Peer Avg</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">\n                Premium/Discount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.multiples.map((multiple, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{multiple.metric}</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.current}x</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.peer_avg}x</td>\n                <td\n                  className={`py-3 text-right font-medium ${\n                    multiple.premium > 0 ? 'text-success' : 'text-destructive'\n                  }`}\n                >\n                  {multiple.premium > 0 ? '+' : ''}\n                  {multiple.premium.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'summary':\n        return renderSummary();\n      case 'cashflows':\n        return renderCashFlows();\n      case 'sensitivity':\n        return renderSensitivity();\n      case 'scenarios':\n        return renderScenarios();\n      case 'multiples':\n        return renderMultiples();\n      default:\n        return renderSummary();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Calculation Results</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Download\"\n            onClick={() => onExport && onExport('excel')}\n          >\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Share2\">\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last Updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Calculations current</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalculationResults;\n","import React, { useState, useRef } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FormulaBuilder = ({ onFormulaCreate, variables }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [draggedFunction, setDraggedFunction] = useState(null);\n  const [currentFormula, setCurrentFormula] = useState('');\n  const [formulaName, setFormulaName] = useState('');\n  const [isBuilding, setIsBuilding] = useState(false);\n  const dropZoneRef = useRef(null);\n\n  const functionCategories = {\n    valuation: {\n      name: 'Valuation',\n      icon: 'TrendingUp',\n      functions: [\n        {\n          name: 'DCF',\n          syntax: 'DCF(fcf_array, discount_rate, terminal_growth)',\n          description: 'Discounted Cash Flow valuation'\n        },\n        {\n          name: 'NPV',\n          syntax: 'NPV(cash_flows, discount_rate)',\n          description: 'Net Present Value calculation'\n        },\n        { name: 'IRR', syntax: 'IRR(cash_flows)', description: 'Internal Rate of Return' },\n        {\n          name: 'TERMINAL_VALUE',\n          syntax: 'TERMINAL_VALUE(final_fcf, growth_rate, discount_rate)',\n          description: 'Terminal value calculation'\n        },\n        {\n          name: 'WACC',\n          syntax: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n          description: 'Weighted Average Cost of Capital'\n        }\n      ]\n    },\n    financial: {\n      name: 'Financial Ratios',\n      icon: 'Calculator',\n      functions: [\n        {\n          name: 'ROE',\n          syntax: 'ROE(net_income, shareholders_equity)',\n          description: 'Return on Equity'\n        },\n        { name: 'ROA', syntax: 'ROA(net_income, total_assets)', description: 'Return on Assets' },\n        {\n          name: 'DEBT_TO_EQUITY',\n          syntax: 'DEBT_TO_EQUITY(total_debt, total_equity)',\n          description: 'Debt to Equity ratio'\n        },\n        {\n          name: 'CURRENT_RATIO',\n          syntax: 'CURRENT_RATIO(current_assets, current_liabilities)',\n          description: 'Current ratio calculation'\n        },\n        {\n          name: 'QUICK_RATIO',\n          syntax: 'QUICK_RATIO(quick_assets, current_liabilities)',\n          description: 'Quick ratio calculation'\n        }\n      ]\n    },\n    statistical: {\n      name: 'Statistical',\n      icon: 'BarChart3',\n      functions: [\n        {\n          name: 'CORRELATION',\n          syntax: 'CORRELATION(dataset1, dataset2)',\n          description: 'Correlation coefficient'\n        },\n        {\n          name: 'REGRESSION',\n          syntax: 'REGRESSION(dependent_var, independent_var)',\n          description: 'Linear regression analysis'\n        },\n        {\n          name: 'VOLATILITY',\n          syntax: 'VOLATILITY(returns, period)',\n          description: 'Historical volatility'\n        },\n        {\n          name: 'BETA',\n          syntax: 'BETA(stock_returns, market_returns)',\n          description: 'Beta coefficient calculation'\n        },\n        {\n          name: 'SHARPE_RATIO',\n          syntax: 'SHARPE_RATIO(returns, risk_free_rate)',\n          description: 'Risk-adjusted return metric'\n        }\n      ]\n    },\n    mathematical: {\n      name: 'Mathematical',\n      icon: 'Sigma',\n      functions: [\n        { name: 'SUM', syntax: 'SUM(range)', description: 'Sum of values' },\n        { name: 'AVERAGE', syntax: 'AVERAGE(range)', description: 'Average of values' },\n        { name: 'MEDIAN', syntax: 'MEDIAN(range)', description: 'Median value' },\n        { name: 'STDEV', syntax: 'STDEV(range)', description: 'Standard deviation' },\n        {\n          name: 'PERCENTILE',\n          syntax: 'PERCENTILE(range, percentile)',\n          description: 'Percentile calculation'\n        }\n      ]\n    }\n  };\n\n  const savedFormulas = [\n    {\n      name: 'Custom_DCF_Tech',\n      formula: 'DCF(FCFF_PROJECTIONS, WACC(0.12, 0.04, 0.25, 0.3), 0.025)',\n      category: 'Custom'\n    },\n    {\n      name: 'LBO_Returns',\n      formula: 'IRR([INITIAL_INVESTMENT * -1, EXIT_VALUE])',\n      category: 'Custom'\n    },\n    {\n      name: 'Comp_Multiple',\n      formula: 'AVERAGE(PEER_EV_REVENUE) * TARGET_REVENUE',\n      category: 'Custom'\n    }\n  ];\n\n  const handleDragStart = (e, func) => {\n    setDraggedFunction(func);\n    e.dataTransfer.effectAllowed = 'copy';\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    if (draggedFunction) {\n      const newFormula = currentFormula + (currentFormula ? ' + ' : '') + draggedFunction.syntax;\n      setCurrentFormula(newFormula);\n      setDraggedFunction(null);\n    }\n  };\n\n  const addFunction = func => {\n    const newFormula = currentFormula + (currentFormula ? ' + ' : '') + func.syntax;\n    setCurrentFormula(newFormula);\n  };\n\n  const clearFormula = () => {\n    setCurrentFormula('');\n    setFormulaName('');\n  };\n\n  const saveFormula = () => {\n    if (formulaName && currentFormula) {\n      if (onFormulaCreate) {\n        onFormulaCreate({\n          name: formulaName,\n          formula: currentFormula,\n          timestamp: new Date()\n        });\n      }\n      setFormulaName('');\n      setCurrentFormula('');\n      setIsBuilding(false);\n    }\n  };\n\n  const validateFormula = () => {\n    // Simple validation - check for balanced parentheses\n    const openParens = (currentFormula.match(/\\(/g) || []).length;\n    const closeParens = (currentFormula.match(/\\)/g) || []).length;\n    return openParens === closeParens;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Wrench\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Formula Builder</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={() => setIsBuilding(!isBuilding)}\n          >\n            New Formula\n          </Button>\n        </div>\n      </div>\n\n      {/* Function Categories */}\n      <div className=\"flex border-b border-border\">\n        {Object.entries(functionCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Function Library */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-3\">\n          {functionCategories[selectedCategory].functions.map((func, index) => (\n            <div\n              key={index}\n              draggable\n              onDragStart={e => handleDragStart(e, func)}\n              className=\"p-3 bg-muted rounded-lg border border-border cursor-move hover:bg-muted/80 transition-smooth group\"\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon\n                      name=\"Move\"\n                      size={14}\n                      className=\"text-muted-foreground group-hover:text-foreground\"\n                    />\n                    <span className=\"font-medium text-foreground\">{func.name}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{func.description}</p>\n                  <code className=\"text-xs bg-background px-2 py-1 rounded mt-2 block font-mono text-foreground\">\n                    {func.syntax}\n                  </code>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"Plus\"\n                  onClick={() => addFunction(func)}\n                  className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Saved Formulas */}\n        <div className=\"border-t border-border p-4\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n            <Icon name=\"BookOpen\" size={16} />\n            <span>Saved Formulas</span>\n          </h4>\n          <div className=\"space-y-2\">\n            {savedFormulas.map((formula, index) => (\n              <div\n                key={index}\n                className=\"p-3 bg-background rounded-lg border border-border hover:bg-muted/50 transition-smooth cursor-pointer\"\n                onClick={() => setCurrentFormula(formula.formula)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-foreground\">{formula.name}</span>\n                  <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n                    {formula.category}\n                  </span>\n                </div>\n                <code className=\"text-xs text-muted-foreground mt-1 block font-mono\">\n                  {formula.formula}\n                </code>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Formula Builder Panel */}\n      {isBuilding && (\n        <div className=\"border-t border-border bg-background\">\n          <div className=\"p-4 space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Formula Name</label>\n              <input\n                type=\"text\"\n                value={formulaName}\n                onChange={e => setFormulaName(e.target.value)}\n                placeholder=\"Enter formula name...\"\n                className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                Formula Expression\n              </label>\n              <div\n                ref={dropZoneRef}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n                className=\"min-h-[100px] p-3 bg-input border-2 border-dashed border-border rounded-lg focus-within:border-ring transition-colors\"\n              >\n                <textarea\n                  value={currentFormula}\n                  onChange={e => setCurrentFormula(e.target.value)}\n                  placeholder=\"Drag functions here or type formula manually...\"\n                  className=\"w-full h-20 bg-transparent text-foreground placeholder-muted-foreground resize-none outline-none font-mono text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between mt-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {validateFormula() ? (\n                    <div className=\"flex items-center space-x-1 text-success\">\n                      <Icon name=\"CheckCircle\" size={14} />\n                      <span className=\"text-xs\">Valid syntax</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-1 text-destructive\">\n                      <Icon name=\"XCircle\" size={14} />\n                      <span className=\"text-xs\">Invalid syntax</span>\n                    </div>\n                  )}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {currentFormula.length} characters\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\" size=\"sm\" iconName=\"Trash2\"\n                onClick={clearFormula}\n              >\n                Clear\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\" size=\"sm\" iconName=\"Eye\"\n                  disabled={!validateFormula()}\n                >\n                  Preview\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  iconName=\"Save\"\n                  onClick={saveFormula}\n                  disabled={!formulaName || !currentFormula || !validateFormula()}\n                >\n                  Save Formula\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormulaBuilder;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ModelTemplates = ({ onTemplateSelect, onTemplateCreate }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const templateCategories = {\n    valuation: {\n      name: 'Valuation Models',\n      icon: 'TrendingUp',\n      templates: [\n        {\n          id: 'dcf_standard',\n          name: 'DCF - Standard',\n          description:\n            'Traditional discounted cash flow model with 5-year projections and terminal value',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-10',\n          popularity: 95,\n          features: [\n            '5-year projections',\n            'Terminal value',\n            'Sensitivity analysis',\n            'WACC calculation'\n          ]\n        },\n        {\n          id: 'dcf_tech',\n          name: 'DCF - Technology',\n          description: 'Specialized DCF for high-growth technology companies with adjusted metrics',\n          complexity: 'Advanced',\n          timeToComplete: '60 min',\n          lastUsed: '2024-07-08',\n          popularity: 87,\n          features: ['SaaS metrics', 'User-based projections', 'Churn analysis', 'Rule of 40']\n        },\n        {\n          id: 'sum_of_parts',\n          name: 'Sum-of-the-Parts',\n          description: 'Multi-business valuation with segment-specific assumptions and multiples',\n          complexity: 'Advanced',\n          timeToComplete: '90 min',\n          lastUsed: '2024-07-05',\n          popularity: 73,\n          features: [\n            'Segment analysis',\n            'Multiple approaches',\n            'Holding company discount',\n            'Synergy modeling'\n          ]\n        }\n      ]\n    },\n    lbo: {\n      name: 'LBO Models',\n      icon: 'Layers',\n      templates: [\n        {\n          id: 'lbo_standard',\n          name: 'LBO - Standard',\n          description: 'Complete leveraged buyout model with debt sizing and returns analysis',\n          complexity: 'Advanced',\n          timeToComplete: '120 min',\n          lastUsed: '2024-07-09',\n          popularity: 91,\n          features: ['Debt capacity', 'Returns waterfall', 'Management rollover', 'Exit scenarios']\n        },\n        {\n          id: 'lbo_growth',\n          name: 'LBO - Growth Equity',\n          description: 'Growth-focused LBO with minority investment and expansion capital',\n          complexity: 'Advanced',\n          timeToComplete: '100 min',\n          lastUsed: '2024-07-06',\n          popularity: 68,\n          features: [\n            'Growth capital',\n            'Minority stake',\n            'Management incentives',\n            'Expansion modeling'\n          ]\n        }\n      ]\n    },\n    comps: {\n      name: 'Comparable Analysis',\n      icon: 'BarChart3',\n      templates: [\n        {\n          id: 'trading_comps',\n          name: 'Trading Comparables',\n          description: 'Public company multiple analysis with statistical benchmarking',\n          complexity: 'Beginner',\n          timeToComplete: '30 min',\n          lastUsed: '2024-07-11',\n          popularity: 98,\n          features: [\n            'Multiple analysis',\n            'Statistical metrics',\n            'Peer screening',\n            'Premium/discount analysis'\n          ]\n        },\n        {\n          id: 'transaction_comps',\n          name: 'Transaction Comparables',\n          description: 'M&A transaction analysis with control premiums and synergies',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-07',\n          popularity: 82,\n          features: [\n            'M&A multiples',\n            'Control premiums',\n            'Synergy analysis',\n            'Transaction screening'\n          ]\n        }\n      ]\n    },\n    merger: {\n      name: 'M&A Models',\n      icon: 'GitMerge',\n      templates: [\n        {\n          id: 'merger_model',\n          name: 'Merger Model',\n          description:\n            'Comprehensive merger analysis with accretion/dilution and pro forma statements',\n          complexity: 'Expert',\n          timeToComplete: '180 min',\n          lastUsed: '2024-07-04',\n          popularity: 76,\n          features: [\n            'Accretion/dilution',\n            'Pro forma statements',\n            'Synergy modeling',\n            'Financing structure'\n          ]\n        },\n        {\n          id: 'acquisition_model',\n          name: 'Acquisition Model',\n          description: 'Strategic acquisition analysis with integration costs and value creation',\n          complexity: 'Expert',\n          timeToComplete: '150 min',\n          lastUsed: '2024-07-03',\n          popularity: 71,\n          features: ['Integration costs', 'Value creation', 'Financing options', 'Risk analysis']\n        }\n      ]\n    }\n  };\n\n  const recentTemplates = [\n    { id: 'dcf_standard', name: 'DCF - Standard', lastUsed: '2024-07-11 14:30' },\n    { id: 'trading_comps', name: 'Trading Comparables', lastUsed: '2024-07-11 09:15' },\n    { id: 'lbo_standard', name: 'LBO - Standard', lastUsed: '2024-07-10 16:45' }\n  ];\n\n  const getComplexityColor = complexity => {\n    switch (complexity) {\n      case 'Beginner':\n        return 'text-success bg-success/10';\n      case 'Intermediate':\n        return 'text-warning bg-warning/10';\n      case 'Advanced':\n        return 'text-accent bg-accent/10';\n      case 'Expert':\n        return 'text-destructive bg-destructive/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const filteredTemplates = () => {\n    const templates = templateCategories[selectedCategory]?.templates || [];\n    if (!searchTerm) return templates;\n\n    return templates.filter(\n      template =>\n        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  };\n\n  const handleTemplateSelect = template => {\n    if (onTemplateSelect) {\n      onTemplateSelect(template);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileTemplate\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Model Templates</h3>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          iconName=\"Plus\"\n          onClick={() => setShowCreateModal(true)}\n        >\n          Create Template\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search templates...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Categories */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {Object.entries(templateCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {/* Recent Templates */}\n        {!searchTerm && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n              <Icon name=\"Clock\" size={16} />\n              <span>Recently Used</span>\n            </h4>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {recentTemplates.map(template => (\n                <div\n                  key={template.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-smooth cursor-pointer\"\n                  onClick={() => handleTemplateSelect(template)}\n                >\n                  <div>\n                    <span className=\"font-medium text-foreground\">{template.name}</span>\n                    <p className=\"text-xs text-muted-foreground\">Last used: {template.lastUsed}</p>\n                  </div>\n                  <Icon name=\"ChevronRight\" size={16} className=\"text-muted-foreground\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Template Cards */}\n        <div className=\"space-y-4\">\n          {filteredTemplates().map(template => (\n            <div\n              key={template.id}\n              className=\"p-4 bg-background border border-border rounded-lg hover:border-primary/50 transition-smooth cursor-pointer group\"\n              onClick={() => handleTemplateSelect(template)}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h5 className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">\n                      {template.name}\n                    </h5>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(template.complexity)}`}\n                    >\n                      {template.complexity}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                    <Icon name=\"Star\" size={12} />\n                    <span>{template.popularity}%</span>\n                  </div>\n                  <Icon\n                    name=\"ChevronRight\"\n                    size={16}\n                    className=\"text-muted-foreground group-hover:text-primary transition-colors\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Clock\" size={12} />\n                    <span>{template.timeToComplete}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Calendar\" size={12} />\n                    <span>Last used: {template.lastUsed}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2\">\n                {template.features.map((feature, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-muted text-xs text-muted-foreground rounded\"\n                  >\n                    {feature}\n                  </span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTemplates().length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"FileX\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No templates found</h4>\n            <p className=\"text-muted-foreground\">\n              {searchTerm\n                ? 'Try adjusting your search terms'\n                : 'No templates available in this category'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Create Template Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg shadow-elevation-2 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between p-4 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Create New Template</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"X\"\n                onClick={() => setShowCreateModal(false)}\n              />\n            </div>\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Template Name\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter template name...\"\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Description\n                </label>\n                <textarea\n                  placeholder=\"Describe your template...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">Category</label>\n                <select className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-ring\">\n                  <option value=\"valuation\">Valuation Models</option>\n                  <option value=\"lbo\">LBO Models</option>\n                  <option value=\"comps\">Comparable Analysis</option>\n                  <option value=\"merger\">M&A Models</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowCreateModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  if (onTemplateCreate) onTemplateCreate();\n                }}\n              >\n                Create Template\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTemplates;\n","/**\n * Command Registry for FinanceAnalyst Pro Terminal\n * Manages all available commands with categorization and metadata\n */\n\nexport class CommandRegistry {\n  constructor() {\n    this.commands = new Map();\n    this.categories = new Map();\n    this.aliases = new Map();\n    this.initializeCategories();\n  }\n\n  /**\n   * Initialize command categories\n   */\n  initializeCategories() {\n    this.categories.set('CORE', {\n      name: 'Core Analysis',\n      description: 'Fundamental financial analysis commands',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('PORTFOLIO', {\n      name: 'Portfolio & Risk',\n      description: 'Portfolio analysis and risk management',\n      icon: '🎯',\n      commands: []\n    });\n\n    this.categories.set('VALUATION', {\n      name: 'Advanced Valuation',\n      description: 'Sophisticated valuation models',\n      icon: '📈',\n      commands: []\n    });\n\n    this.categories.set('TECHNICAL', {\n      name: 'Technical Analysis',\n      description: 'Technical analysis and market intelligence',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('FIXED_INCOME', {\n      name: 'Fixed Income & Derivatives',\n      description: 'Bond analysis and derivatives pricing',\n      icon: '🏦',\n      commands: []\n    });\n\n    this.categories.set('ESG', {\n      name: 'ESG & Alternative Data',\n      description: 'Environmental, social, governance metrics',\n      icon: '🌱',\n      commands: []\n    });\n\n    this.categories.set('AUTOMATION', {\n      name: 'Automation & Workflows',\n      description: 'Automated analysis and workflows',\n      icon: '🤖',\n      commands: []\n    });\n\n    this.categories.set('DATA', {\n      name: 'Data Management',\n      description: 'Data import, export, and management',\n      icon: '💾',\n      commands: []\n    });\n\n    this.categories.set('REPORTING', {\n      name: 'Reporting & Visualization',\n      description: 'Reports, charts, and visualizations',\n      icon: '📋',\n      commands: []\n    });\n\n    this.categories.set('SYSTEM', {\n      name: 'System & Performance',\n      description: 'System monitoring and configuration',\n      icon: '🔧',\n      commands: []\n    });\n\n    this.categories.set('ANALYTICS', {\n      name: 'Advanced Analytics',\n      description: 'Machine learning and advanced analytics',\n      icon: '💡',\n      commands: []\n    });\n\n    this.categories.set('MARKET_DATA', {\n      name: 'Market Data Extensions',\n      description: 'Extended market data and economic indicators',\n      icon: '🌐',\n      commands: []\n    });\n\n    this.categories.set('UTILITY', {\n      name: 'Utility Commands',\n      description: 'General utility and helper commands',\n      icon: '🛠️',\n      commands: []\n    });\n  }\n\n  /**\n   * Register a command\n   * @param {string} name - Command name\n   * @param {Object} handler - Command handler\n   * @param {Object} metadata - Command metadata\n   */\n  register(name, handler, metadata = {}) {\n    const commandName = name.toUpperCase();\n    \n    const commandInfo = {\n      name: commandName,\n      handler,\n      category: metadata.category || 'UTILITY',\n      description: metadata.description || 'No description available',\n      usage: metadata.usage || `${commandName}()`,\n      examples: metadata.examples || [],\n      parameterSchema: metadata.parameterSchema || null,\n      aliases: metadata.aliases || [],\n      tags: metadata.tags || [],\n      version: metadata.version || '1.0.0',\n      deprecated: metadata.deprecated || false,\n      experimental: metadata.experimental || false\n    };\n\n    // Register main command\n    this.commands.set(commandName, commandInfo);\n\n    // Register aliases\n    if (metadata.aliases) {\n      metadata.aliases.forEach(alias => {\n        this.aliases.set(alias.toUpperCase(), commandName);\n      });\n    }\n\n    // Add to category\n    const category = this.categories.get(commandInfo.category);\n    if (category) {\n      category.commands.push(commandName);\n    }\n\n    return this;\n  }\n\n  /**\n   * Get command handler\n   * @param {string} name - Command name or alias\n   * @returns {Object|null} Command handler\n   */\n  getHandler(name) {\n    const commandName = name.toUpperCase();\n    \n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command.handler;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      const aliasCommand = this.commands.get(aliasTarget);\n      return aliasCommand ? aliasCommand.handler : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get command info\n   * @param {string} name - Command name\n   * @returns {Object|null} Command information\n   */\n  getCommandInfo(name) {\n    const commandName = name.toUpperCase();\n    \n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      return this.commands.get(aliasTarget);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all commands in a category\n   * @param {string} category - Category name\n   * @returns {Array} Commands in category\n   */\n  getCommandsByCategory(category) {\n    const categoryInfo = this.categories.get(category.toUpperCase());\n    if (!categoryInfo) return [];\n\n    return categoryInfo.commands.map(cmdName => this.commands.get(cmdName));\n  }\n\n  /**\n   * Get all command names\n   * @returns {Array} All command names\n   */\n  getAllCommands() {\n    return Array.from(this.commands.keys());\n  }\n\n  /**\n   * Get all categories\n   * @returns {Array} All categories\n   */\n  getAllCategories() {\n    return Array.from(this.categories.entries()).map(([key, value]) => ({\n      key,\n      ...value\n    }));\n  }\n\n  /**\n   * Search commands\n   * @param {string} query - Search query\n   * @returns {Array} Matching commands\n   */\n  searchCommands(query) {\n    const searchTerm = query.toLowerCase();\n    const results = [];\n\n    for (const [name, command] of this.commands) {\n      const score = this.calculateSearchScore(command, searchTerm);\n      if (score > 0) {\n        results.push({ ...command, score });\n      }\n    }\n\n    return results.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Calculate search relevance score\n   * @param {Object} command - Command object\n   * @param {string} searchTerm - Search term\n   * @returns {number} Relevance score\n   */\n  calculateSearchScore(command, searchTerm) {\n    let score = 0;\n\n    // Exact name match\n    if (command.name.toLowerCase() === searchTerm) {\n      score += 100;\n    }\n\n    // Name contains search term\n    if (command.name.toLowerCase().includes(searchTerm)) {\n      score += 50;\n    }\n\n    // Description contains search term\n    if (command.description.toLowerCase().includes(searchTerm)) {\n      score += 25;\n    }\n\n    // Tags contain search term\n    if (command.tags.some(tag => tag.toLowerCase().includes(searchTerm))) {\n      score += 15;\n    }\n\n    // Aliases contain search term\n    if (command.aliases.some(alias => alias.toLowerCase().includes(searchTerm))) {\n      score += 10;\n    }\n\n    return score;\n  }\n\n  /**\n   * Get command suggestions based on partial input\n   * @param {string} partial - Partial command input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(partial) {\n    const partialLower = partial.toLowerCase();\n    const suggestions = [];\n\n    for (const [name, command] of this.commands) {\n      if (name.toLowerCase().startsWith(partialLower)) {\n        suggestions.push({\n          name: command.name,\n          description: command.description,\n          usage: command.usage,\n          category: command.category\n        });\n      }\n    }\n\n    return suggestions.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  /**\n   * Validate command exists\n   * @param {string} name - Command name\n   * @returns {boolean} Whether command exists\n   */\n  hasCommand(name) {\n    const commandName = name.toUpperCase();\n    return this.commands.has(commandName) || this.aliases.has(commandName);\n  }\n\n  /**\n   * Get command count by category\n   * @returns {Object} Command counts by category\n   */\n  getCommandStats() {\n    const stats = {};\n    \n    for (const [categoryKey, category] of this.categories) {\n      stats[categoryKey] = {\n        name: category.name,\n        count: category.commands.length,\n        icon: category.icon\n      };\n    }\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const commandRegistry = new CommandRegistry();\n","/**\n * Enhanced Command Processor for FinanceAnalyst Pro Terminal\n * Provides modular, extensible command processing with categorization\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { dataFetchingService } from './dataFetching';\nimport { persistenceManager } from './persistence/PersistenceManager';\n\nexport class CommandProcessor {\n  constructor() {\n    this.commandHistory = [];\n    this.variables = new Map();\n    this.settings = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD'\n    };\n    this.persistenceInitialized = false;\n    this.maxHistorySize = 1000;\n  }\n\n  /**\n   * Initialize persistence layer\n   */\n  async initializePersistence() {\n    if (this.persistenceInitialized) return;\n\n    try {\n      await persistenceManager.initialize();\n\n      // Load persisted data\n      await this.loadPersistedData();\n\n      this.persistenceInitialized = true;\n      console.log('✅ Command processor persistence initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize persistence:', error);\n      // Continue without persistence\n    }\n  }\n\n  /**\n   * Load persisted data\n   */\n  async loadPersistedData() {\n    try {\n      // Load command history\n      const history = await persistenceManager.retrieve('command_history');\n      if (history && Array.isArray(history)) {\n        this.commandHistory = history.slice(-this.maxHistorySize);\n      }\n\n      // Load variables\n      const variables = await persistenceManager.retrieve('user_variables');\n      if (variables && typeof variables === 'object') {\n        this.variables = new Map(Object.entries(variables));\n      }\n\n      // Load settings\n      const settings = await persistenceManager.retrieve('user_preferences');\n      if (settings && typeof settings === 'object') {\n        this.settings = { ...this.settings, ...settings };\n      }\n\n    } catch (error) {\n      console.error('Failed to load persisted data:', error);\n    }\n  }\n\n  /**\n   * Save data to persistence layer\n   */\n  async saveData() {\n    if (!this.persistenceInitialized) return;\n\n    try {\n      // Save command history\n      await persistenceManager.store('command_history', this.commandHistory, {\n        storage: 'indexedDB'\n      });\n\n      // Save variables\n      const variablesObj = Object.fromEntries(this.variables);\n      await persistenceManager.store('user_variables', variablesObj, {\n        storage: 'localStorage'\n      });\n\n      // Save settings\n      await persistenceManager.store('user_preferences', this.settings, {\n        storage: 'localStorage'\n      });\n\n    } catch (error) {\n      console.error('Failed to save data:', error);\n    }\n  }\n\n  /**\n   * Process a command input and return structured response\n   * @param {string} input - Raw command input\n   * @param {Object} context - Execution context\n   * @returns {Promise<Object>} Command response\n   */\n  async processCommand(input, context = {}) {\n    const startTime = Date.now();\n\n    try {\n      // Initialize persistence if not already done\n      if (!this.persistenceInitialized) {\n        await this.initializePersistence();\n      }\n\n      // Parse command\n      const parsedCommand = this.parseCommand(input);\n\n      // Add to history\n      const historyEntry = {\n        input,\n        timestamp: new Date(),\n        success: false,\n        ...parsedCommand\n      };\n      this.commandHistory.push(historyEntry);\n\n      // Trim history if too long\n      if (this.commandHistory.length > this.maxHistorySize) {\n        this.commandHistory = this.commandHistory.slice(-this.maxHistorySize);\n      }\n\n      // Get command handler\n      const handler = commandRegistry.getHandler(parsedCommand.command);\n      \n      if (!handler) {\n        return this.createErrorResponse(`Unknown command: \"${parsedCommand.command}\"`, input);\n      }\n\n      // Validate parameters\n      const validationResult = this.validateParameters(handler, parsedCommand);\n      if (!validationResult.valid) {\n        return this.createErrorResponse(validationResult.error, input);\n      }\n\n      // Execute command\n      const result = await handler.execute(parsedCommand, context, this);\n\n      // Mark command as successful in history\n      historyEntry.success = result.type !== 'error';\n      historyEntry.executionTime = Date.now() - startTime;\n\n      // Add execution metadata\n      result.executionTime = Date.now() - startTime;\n      result.timestamp = new Date();\n\n      // Save data asynchronously (don't wait)\n      this.saveData().catch(error => {\n        console.error('Failed to save command processor data:', error);\n      });\n\n      return result;\n\n    } catch (error) {\n      return this.createErrorResponse(`Command execution failed: ${error.message}`, input);\n    }\n  }\n\n  /**\n   * Parse command input into structured format\n   * @param {string} input - Raw command input\n   * @returns {Object} Parsed command object\n   */\n  parseCommand(input) {\n    const trimmed = input.trim();\n    \n    // Handle function-style commands: COMMAND(param1, param2)\n    const functionMatch = trimmed.match(/^([A-Z_]+)\\s*\\(\\s*([^)]*)\\s*\\)$/i);\n    if (functionMatch) {\n      const [, command, paramString] = functionMatch;\n      const parameters = this.parseParameters(paramString);\n      return {\n        command: command.toUpperCase(),\n        parameters,\n        rawInput: trimmed,\n        style: 'function'\n      };\n    }\n\n    // Handle space-separated commands: COMMAND param1 param2\n    const parts = trimmed.split(/\\s+/);\n    const command = parts[0].toUpperCase();\n    const parameters = parts.slice(1);\n\n    return {\n      command,\n      parameters,\n      rawInput: trimmed,\n      style: 'space-separated'\n    };\n  }\n\n  /**\n   * Parse function parameters from string\n   * @param {string} paramString - Parameter string\n   * @returns {Array} Parsed parameters\n   */\n  parseParameters(paramString) {\n    if (!paramString.trim()) return [];\n\n    const params = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = 0;\n    let quoteChar = '';\n\n    for (let i = 0; i < paramString.length; i++) {\n      const char = paramString[i];\n      \n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        inQuotes = false;\n        quoteChar = '';\n      } else if (char === '[' && !inQuotes) {\n        inBrackets++;\n        current += char;\n      } else if (char === ']' && !inQuotes) {\n        inBrackets--;\n        current += char;\n      } else if (char === ',' && !inQuotes && inBrackets === 0) {\n        params.push(this.parseParameterValue(current.trim()));\n        current = '';\n        continue;\n      } else {\n        current += char;\n      }\n    }\n\n    if (current.trim()) {\n      params.push(this.parseParameterValue(current.trim()));\n    }\n\n    return params;\n  }\n\n  /**\n   * Parse individual parameter value\n   * @param {string} value - Parameter value string\n   * @returns {*} Parsed value\n   */\n  parseParameterValue(value) {\n    // Remove quotes\n    if ((value.startsWith('\"') && value.endsWith('\"')) || \n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      return value.slice(1, -1);\n    }\n\n    // Parse arrays\n    if (value.startsWith('[') && value.endsWith(']')) {\n      const arrayContent = value.slice(1, -1);\n      if (!arrayContent.trim()) return [];\n      return arrayContent.split(',').map(item => this.parseParameterValue(item.trim()));\n    }\n\n    // Parse numbers\n    if (/^-?\\d+\\.?\\d*$/.test(value)) {\n      return parseFloat(value);\n    }\n\n    // Parse booleans\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n\n    // Return as string\n    return value;\n  }\n\n  /**\n   * Validate command parameters\n   * @param {Object} handler - Command handler\n   * @param {Object} parsedCommand - Parsed command\n   * @returns {Object} Validation result\n   */\n  validateParameters(handler, parsedCommand) {\n    if (!handler.parameterSchema) {\n      return { valid: true };\n    }\n\n    const { required = [], optional = [] } = handler.parameterSchema;\n    const { parameters } = parsedCommand;\n\n    // Check required parameters\n    if (parameters.length < required.length) {\n      return {\n        valid: false,\n        error: `Missing required parameters. Expected: ${required.join(', ')}`\n      };\n    }\n\n    // Check maximum parameters\n    const maxParams = required.length + optional.length;\n    if (parameters.length > maxParams) {\n      return {\n        valid: false,\n        error: `Too many parameters. Maximum: ${maxParams}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Create error response\n   * @param {string} message - Error message\n   * @param {string} input - Original input\n   * @returns {Object} Error response\n   */\n  createErrorResponse(message, input) {\n    return {\n      type: 'error',\n      content: message,\n      suggestions: this.getSuggestions(input),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Get command suggestions for invalid input\n   * @param {string} input - Original input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(input) {\n    const command = input.split(/[\\s(]/)[0].toUpperCase();\n    const allCommands = commandRegistry.getAllCommands();\n    \n    return allCommands\n      .filter(cmd => cmd.includes(command.substring(0, 3)) || \n                     cmd.toLowerCase().includes(command.toLowerCase()))\n      .slice(0, 5);\n  }\n\n  /**\n   * Get command history\n   * @param {number} limit - Number of recent commands\n   * @returns {Array} Command history\n   */\n  getHistory(limit = 10) {\n    return this.commandHistory.slice(-limit);\n  }\n\n  /**\n   * Clear command history\n   */\n  clearHistory() {\n    this.commandHistory = [];\n  }\n\n  /**\n   * Set variable value\n   * @param {string} name - Variable name\n   * @param {*} value - Variable value\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n\n    // Save variables asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save variables:', error);\n      });\n    }\n  }\n\n  /**\n   * Get variable value\n   * @param {string} name - Variable name\n   * @returns {*} Variable value\n   */\n  getVariable(name) {\n    return this.variables.get(name);\n  }\n\n  /**\n   * Get all variables\n   * @returns {Object} All variables\n   */\n  getAllVariables() {\n    return Object.fromEntries(this.variables);\n  }\n\n  /**\n   * Update settings\n   * @param {string} key - Setting key\n   * @param {*} value - Setting value\n   */\n  updateSetting(key, value) {\n    this.settings[key] = value;\n\n    // Save settings asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save settings:', error);\n      });\n    }\n  }\n\n  /**\n   * Get setting value\n   * @param {string} key - Setting key\n   * @returns {*} Setting value\n   */\n  getSetting(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Get all settings\n   * @returns {Object} All settings\n   */\n  getAllSettings() {\n    return { ...this.settings };\n  }\n}\n\n// Export singleton instance\nexport const commandProcessor = new CommandProcessor();\n","/**\n * Core Financial Analysis Commands\n * DCF, LBO, COMP, and other fundamental analysis commands\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { \n  calculateDCFValuation, \n  calculateLBOReturns, \n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation';\n\nexport const coreCommands = {\n  DCF: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DCF command requires a ticker symbol. Usage: DCF(AAPL)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building DCF model for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating free cash flows\\n• Determining terminal value\\n• Computing present values...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        // This would be called from the terminal to show loading\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const dcfInputs = await dataFetchingService.fetchDCFInputs(ticker.toUpperCase());\n        const dcfResults = calculateDCFValuation(dcfInputs);\n\n        const content = `DCF Valuation Analysis for ${dcfInputs.companyName} (${ticker.toUpperCase()})\\n\\n📊 VALUATION SUMMARY:\\n• Current Price: ${formatCurrency(dcfInputs.currentPrice)}\\n• Fair Value: ${formatCurrency(dcfResults.fairValue)}\\n• Upside/Downside: ${formatPercentage(dcfResults.upside / 100)}\\n\\n💰 KEY METRICS:\\n• Enterprise Value: ${formatCurrency(dcfResults.enterpriseValue, 'USD', true)}\\n• Equity Value: ${formatCurrency(dcfResults.equityValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(dcfResults.terminalValue, 'USD', true)}\\n• WACC: ${formatPercentage(dcfResults.wacc)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${dcfResults.projections.map((proj, i) => `Year ${i + 1}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}`).join('\\n')}\\n\\n🎯 RECOMMENDATION: ${dcfResults.recommendation}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'dcf',\n            ticker: ticker.toUpperCase(),\n            results: dcfResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  LBO: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'LBO command requires a ticker symbol. Usage: LBO(TSLA)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Analyzing LBO potential for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating debt capacity\\n• Analyzing peer multiples\\n• Computing returns scenarios...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, financials] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement')\n        ]);\n\n        const lboInputs = {\n          companyName: profile.companyName,\n          currentPrice: profile.price,\n          marketCap: profile.mktCap,\n          ebitda: financials[0]?.ebitda || profile.mktCap * 0.15,\n          revenue: financials[0]?.revenue || profile.mktCap * 2,\n          debt: profile.totalDebt || 0,\n          cash: profile.totalCash || 0\n        };\n\n        const lboResults = calculateLBOReturns(lboInputs);\n\n        const content = `LBO Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💼 TRANSACTION SUMMARY:\\n• Purchase Price: ${formatCurrency(lboResults.purchasePrice, 'USD', true)}\\n• Equity Investment: ${formatCurrency(lboResults.equityInvestment, 'USD', true)}\\n• Total Debt: ${formatCurrency(lboResults.totalDebt, 'USD', true)}\\n• Debt/Equity Ratio: ${formatNumber(lboResults.debtToEquity, 1)}x\\n\\n📈 PROJECTED RETURNS (5-year hold):\\n• Exit Equity Value: ${formatCurrency(lboResults.exitEquityValue, 'USD', true)}\\n• Total Return: ${formatCurrency(lboResults.totalReturn, 'USD', true)}\\n• IRR: ${formatPercentage(lboResults.irr)}\\n• MOIC: ${formatNumber(lboResults.moic, 1)}x\\n\\n🎯 EXIT ASSUMPTIONS:\\n• Exit EBITDA: ${formatCurrency(lboResults.exitEbitda, 'USD', true)}\\n• Exit Multiple: ${formatNumber(lboResults.exitMultiple, 1)}x\\n• Exit Enterprise Value: ${formatCurrency(lboResults.exitEnterpriseValue, 'USD', true)}\\n\\n💰 FEES & CARRY:\\n• Management Fees: ${formatCurrency(lboResults.managementFees, 'USD', true)}\\n• Carried Interest: ${formatCurrency(lboResults.carriedInterest, 'USD', true)}\\n• Net Return: ${formatCurrency(lboResults.netReturn, 'USD', true)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'lbo',\n            ticker: ticker.toUpperCase(),\n            results: lboResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `LBO analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  COMP: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'COMP command requires a ticker symbol. Usage: COMP(MSFT)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building comparable company analysis for ${ticker.toUpperCase()}...\\n• Identifying peer companies\\n• Fetching peer financial data\\n• Calculating valuation multiples\\n• Generating relative analysis...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, peers] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchPeerComparables(ticker.toUpperCase())\n        ]);\n\n        const companyData = {\n          symbol: ticker.toUpperCase(),\n          name: profile.companyName,\n          marketCap: profile.mktCap,\n          peRatio: profile.pe,\n          evToEbitda: profile.enterpriseValueOverEBITDA,\n          priceToBook: profile.pb,\n          debtToEquity: profile.debtToEquity\n        };\n\n        const compAnalysis = calculateComparableMetrics(companyData, peers);\n\n        const content = `Comparable Company Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 PEER GROUP (${peers.length} companies):\\n${peers.slice(0, 5).map(peer => `• ${peer.symbol}: ${peer.name}`).join('\\n')}\\n\\n📊 VALUATION MULTIPLES:\\n• P/E Ratio: ${formatNumber(companyData.peRatio, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x)\\n• EV/EBITDA: ${formatNumber(companyData.evToEbitda, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.evToEbitda.median, 1)}x)\\n• P/B Ratio: ${formatNumber(companyData.priceToBook, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.priceToBook.median, 1)}x)\\n\\n📈 RELATIVE VALUATION:\\n• P/E vs Peers: ${formatPercentage((compAnalysis.relativeValuation.peRatioRelative - 1))}\\n• EV/EBITDA vs Peers: ${formatPercentage((compAnalysis.relativeValuation.evEbitdaRelative - 1))}\\n• P/B vs Peers: ${formatPercentage((compAnalysis.relativeValuation.priceToBookRelative - 1))}\\n\\n💰 MARKET POSITION:\\n• Market Cap Percentile: ${formatNumber(compAnalysis.relativeValuation.marketCapPercentile)}th\\n• Size: ${companyData.marketCap > compAnalysis.peerStatistics.marketCap.median ? 'Above' : 'Below'} peer median\\n\\n🎯 PEER VALUATION RANGE:\\n• Min P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.min, 1)}x\\n• Max P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.max, 1)}x\\n• Median P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'comparable',\n            ticker: ticker.toUpperCase(),\n            results: compAnalysis\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Comparable analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  FETCH: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'FETCH command requires a ticker symbol. Usage: FETCH(GOOGL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        const content = `Company Data for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 COMPANY PROFILE:\\n• Industry: ${profile.industry}\\n• Sector: ${profile.sector}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• Employees: ${formatNumber(profile.fullTimeEmployees, 0)}\\n\\n💰 FINANCIAL METRICS:\\n• Price: ${formatCurrency(profile.price)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}\\n• EPS: ${formatCurrency(profile.eps)}\\n• Revenue (TTM): ${formatCurrency(profile.revenue, 'USD', true)}\\n• Profit Margin: ${formatPercentage(profile.profitMargin)}\\n\\n📊 VALUATION RATIOS:\\n• Price/Book: ${formatNumber(profile.pb, 2)}\\n• Price/Sales: ${formatNumber(profile.ps, 2)}\\n• EV/EBITDA: ${formatNumber(profile.enterpriseValueOverEBITDA, 1)}\\n• EV/Revenue: ${formatNumber(profile.enterpriseValueOverRevenue, 1)}\\n\\n💼 BALANCE SHEET:\\n• Total Debt: ${formatCurrency(profile.totalDebt, 'USD', true)}\\n• Total Cash: ${formatCurrency(profile.totalCash, 'USD', true)}\\n• Book Value: ${formatCurrency(profile.bookValue, 'USD', true)}\\n• Debt/Equity: ${formatNumber(profile.debtToEquity, 2)}\\n\\n📈 PERFORMANCE:\\n• 52W High: ${formatCurrency(profile.priceHigh52)}\\n• 52W Low: ${formatCurrency(profile.priceLow52)}\\n• Beta: ${formatNumber(profile.beta, 2)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live data.' : '✅ Data from live market sources'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'profile',\n            ticker: ticker.toUpperCase(),\n            results: profile\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data fetch failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Portfolio & Risk Management Commands\n * Portfolio analysis, risk metrics, and optimization commands\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const portfolioCommands = {\n  PORTFOLIO: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers, weights] = parsedCommand.parameters;\n      \n      if (!tickers || !weights) {\n        return {\n          type: 'error',\n          content: 'PORTFOLIO command requires tickers and weights. Usage: PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])'\n        };\n      }\n\n      try {\n        const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n        const weightArray = Array.isArray(weights) ? weights : [weights];\n\n        if (tickerArray.length !== weightArray.length) {\n          return {\n            type: 'error',\n            content: 'Number of tickers must match number of weights'\n          };\n        }\n\n        const totalWeight = weightArray.reduce((sum, w) => sum + w, 0);\n        if (Math.abs(totalWeight - 1.0) > 0.01) {\n          return {\n            type: 'error',\n            content: `Weights must sum to 1.0 (currently sum to ${totalWeight})`\n          };\n        }\n\n        // Fetch data for all tickers\n        const portfolioData = await Promise.all(\n          tickerArray.map(async (ticker, index) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              weight: weightArray[index],\n              price: profile.price,\n              marketCap: profile.mktCap,\n              beta: profile.beta || 1.0,\n              pe: profile.pe,\n              dividendYield: profile.dividendYield || 0\n            };\n          })\n        );\n\n        // Calculate portfolio metrics\n        const portfolioValue = portfolioData.reduce((sum, stock) => sum + (stock.marketCap * stock.weight), 0);\n        const weightedBeta = portfolioData.reduce((sum, stock) => sum + (stock.beta * stock.weight), 0);\n        const weightedPE = portfolioData.reduce((sum, stock) => sum + (stock.pe * stock.weight), 0);\n        const weightedDividendYield = portfolioData.reduce((sum, stock) => sum + (stock.dividendYield * stock.weight), 0);\n\n        // Calculate diversification metrics\n        const maxWeight = Math.max(...weightArray);\n        const minWeight = Math.min(...weightArray);\n        const concentrationRatio = maxWeight / minWeight;\n\n        const content = `Portfolio Analysis\\n\\n📊 PORTFOLIO COMPOSITION:\\n${portfolioData.map(stock => \n          `• ${stock.ticker} (${stock.name}): ${formatPercentage(stock.weight)} - ${formatCurrency(stock.price)}`\n        ).join('\\n')}\\n\\n📈 PORTFOLIO METRICS:\\n• Total Portfolio Value: ${formatCurrency(portfolioValue, 'USD', true)}\\n• Weighted Beta: ${formatNumber(weightedBeta, 2)}\\n• Weighted P/E: ${formatNumber(weightedPE, 1)}x\\n• Weighted Dividend Yield: ${formatPercentage(weightedDividendYield)}\\n\\n🎯 DIVERSIFICATION:\\n• Number of Holdings: ${tickerArray.length}\\n• Max Position: ${formatPercentage(maxWeight)}\\n• Min Position: ${formatPercentage(minWeight)}\\n• Concentration Ratio: ${formatNumber(concentrationRatio, 1)}\\n\\n⚖️ RISK PROFILE:\\n• Portfolio Beta: ${weightedBeta > 1.2 ? 'High Risk' : weightedBeta > 0.8 ? 'Moderate Risk' : 'Low Risk'}\\n• Diversification: ${tickerArray.length >= 10 ? 'Well Diversified' : tickerArray.length >= 5 ? 'Moderately Diversified' : 'Concentrated'}\\n• Concentration Risk: ${maxWeight > 0.3 ? 'High' : maxWeight > 0.2 ? 'Moderate' : 'Low'}\\n\\n💡 RECOMMENDATIONS:\\n${maxWeight > 0.4 ? '• Consider reducing concentration in largest position\\n' : ''}${tickerArray.length < 5 ? '• Consider adding more holdings for diversification\\n' : ''}${weightedBeta > 1.5 ? '• Portfolio has high market risk exposure\\n' : ''}${weightedDividendYield < 0.02 ? '• Consider adding dividend-paying stocks for income\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'portfolio',\n            holdings: portfolioData,\n            metrics: {\n              portfolioValue,\n              weightedBeta,\n              weightedPE,\n              weightedDividendYield,\n              concentrationRatio\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Portfolio analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  },\n\n  RISK_METRICS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RISK_METRICS command requires a ticker symbol. Usage: RISK_METRICS(AAPL, 252)'\n        };\n      }\n\n      try {\n        // Fetch historical data and calculate risk metrics\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock risk calculations (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16; // Approximate volatility based on beta\n        const sharpeRatio = (0.08 - 0.02) / volatility; // Assuming 8% return, 2% risk-free rate\n        const var95 = volatility * 1.645; // 95% VaR\n        const var99 = volatility * 2.326; // 99% VaR\n        const maxDrawdown = volatility * 2.5; // Estimated max drawdown\n        const sortinoRatio = sharpeRatio * 1.2; // Sortino typically higher than Sharpe\n\n        const content = `Risk Metrics for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 VOLATILITY MEASURES:\\n• Annualized Volatility: ${formatPercentage(volatility)}\\n• Beta (vs S&P 500): ${formatNumber(profile.beta, 2)}\\n• Standard Deviation: ${formatPercentage(volatility)}\\n\\n⚠️ VALUE AT RISK (VaR):\\n• 1-Day VaR (95%): ${formatPercentage(var95 / Math.sqrt(252))}\\n• 1-Day VaR (99%): ${formatPercentage(var99 / Math.sqrt(252))}\\n• 1-Month VaR (95%): ${formatPercentage(var95 / Math.sqrt(12))}\\n• 1-Year VaR (95%): ${formatPercentage(var95)}\\n\\n📈 RISK-ADJUSTED RETURNS:\\n• Sharpe Ratio: ${formatNumber(sharpeRatio, 2)}\\n• Sortino Ratio: ${formatNumber(sortinoRatio, 2)}\\n• Information Ratio: ${formatNumber(sharpeRatio * 0.8, 2)}\\n• Treynor Ratio: ${formatNumber((0.08 - 0.02) / profile.beta, 3)}\\n\\n📉 DOWNSIDE RISK:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Downside Deviation: ${formatPercentage(volatility * 0.7)}\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)}\\n\\n🎯 RISK ASSESSMENT:\\n• Risk Level: ${volatility > 0.3 ? 'High' : volatility > 0.2 ? 'Moderate' : 'Low'}\\n• Sharpe Quality: ${sharpeRatio > 1.0 ? 'Excellent' : sharpeRatio > 0.5 ? 'Good' : 'Poor'}\\n• Beta Classification: ${profile.beta > 1.2 ? 'Aggressive' : profile.beta > 0.8 ? 'Market' : 'Defensive'}\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated risk metrics. Configure API keys for historical data.' : '✅ Based on historical market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'risk_metrics',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              volatility,\n              beta: profile.beta,\n              sharpeRatio,\n              sortinoRatio,\n              var95,\n              var99,\n              maxDrawdown\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Risk metrics calculation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  },\n\n  CORRELATION_MATRIX: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers] = parsedCommand.parameters;\n      \n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'CORRELATION_MATRIX command requires an array of tickers. Usage: CORRELATION_MATRIX([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Correlation matrix requires at least 2 tickers'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async (ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              beta: profile.beta || 1.0,\n              sector: profile.sector\n            };\n          })\n        );\n\n        // Generate mock correlation matrix (in real implementation, would use historical returns)\n        const correlationMatrix = {};\n        for (let i = 0; i < stockData.length; i++) {\n          correlationMatrix[stockData[i].ticker] = {};\n          for (let j = 0; j < stockData.length; j++) {\n            if (i === j) {\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = 1.0;\n            } else {\n              // Mock correlation based on sector similarity and beta similarity\n              const sectorCorr = stockData[i].sector === stockData[j].sector ? 0.3 : 0.1;\n              const betaCorr = 1 - Math.abs(stockData[i].beta - stockData[j].beta) * 0.2;\n              const correlation = Math.min(0.95, Math.max(-0.5, sectorCorr + betaCorr * 0.4 + (Math.random() - 0.5) * 0.3));\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = correlation;\n            }\n          }\n        }\n\n        // Calculate average correlations\n        let totalCorr = 0;\n        let count = 0;\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            totalCorr += correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            count++;\n          }\n        }\n        const avgCorrelation = totalCorr / count;\n\n        // Find highest and lowest correlations\n        let maxCorr = -1, minCorr = 1;\n        let maxPair = '', minPair = '';\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            const corr = correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            if (corr > maxCorr) {\n              maxCorr = corr;\n              maxPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n            if (corr < minCorr) {\n              minCorr = corr;\n              minPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n          }\n        }\n\n        const matrixDisplay = stockData.map(stock => \n          `${stock.ticker.padEnd(6)} ${stockData.map(s => \n            formatNumber(correlationMatrix[stock.ticker][s.ticker], 2).padStart(6)\n          ).join(' ')}`\n        ).join('\\n');\n\n        const content = `Correlation Matrix Analysis\\n\\n📊 CORRELATION MATRIX:\\n       ${stockData.map(s => s.ticker.padStart(6)).join(' ')}\\n${matrixDisplay}\\n\\n📈 CORRELATION STATISTICS:\\n• Average Correlation: ${formatNumber(avgCorrelation, 3)}\\n• Highest Correlation: ${formatNumber(maxCorr, 3)} (${maxPair})\\n• Lowest Correlation: ${formatNumber(minCorr, 3)} (${minPair})\\n\\n🎯 DIVERSIFICATION ANALYSIS:\\n• Portfolio Diversification: ${avgCorrelation < 0.3 ? 'Excellent' : avgCorrelation < 0.5 ? 'Good' : avgCorrelation < 0.7 ? 'Moderate' : 'Poor'}\\n• Risk Reduction Benefit: ${formatPercentage(1 - avgCorrelation)}\\n• Concentration Risk: ${maxCorr > 0.8 ? 'High' : maxCorr > 0.6 ? 'Moderate' : 'Low'}\\n\\n🏢 SECTOR BREAKDOWN:\\n${stockData.map(stock => `• ${stock.ticker}: ${stock.sector}`).join('\\n')}\\n\\n💡 INSIGHTS:\\n${avgCorrelation > 0.7 ? '• High correlations suggest limited diversification benefits\\n' : ''}${minCorr < 0 ? '• Negative correlations provide excellent hedging opportunities\\n' : ''}${maxCorr > 0.9 ? '• Some holdings are highly correlated - consider reducing overlap\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'correlation_matrix',\n            tickers: tickers.map(t => t.toUpperCase()),\n            correlationMatrix,\n            statistics: {\n              avgCorrelation,\n              maxCorr,\n              minCorr,\n              maxPair,\n              minPair\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Correlation analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  EFFICIENT_FRONTIER: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'EFFICIENT_FRONTIER command requires an array of tickers. Usage: EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Efficient frontier requires at least 2 assets'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async (ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              expectedReturn: (profile.beta || 1.0) * 0.08 + 0.02, // CAPM approximation\n              volatility: (profile.beta || 1.0) * 0.16, // Market volatility scaled by beta\n              beta: profile.beta || 1.0\n            };\n          })\n        );\n\n        // Generate efficient frontier points (simplified calculation)\n        const frontierPoints = [];\n        for (let targetReturn = 0.05; targetReturn <= 0.20; targetReturn += 0.01) {\n          // Simplified optimization - equal weights adjusted for target return\n          const weights = stockData.map(stock => {\n            const baseWeight = 1 / stockData.length;\n            const returnAdjustment = (targetReturn - 0.08) * (stock.expectedReturn - 0.08) * 2;\n            return Math.max(0.05, Math.min(0.95, baseWeight + returnAdjustment));\n          });\n\n          // Normalize weights\n          const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n          const normalizedWeights = weights.map(w => w / totalWeight);\n\n          // Calculate portfolio metrics\n          const portfolioReturn = stockData.reduce((sum, stock, i) =>\n            sum + normalizedWeights[i] * stock.expectedReturn, 0);\n          const portfolioVolatility = Math.sqrt(stockData.reduce((sum, stock, i) =>\n            sum + Math.pow(normalizedWeights[i] * stock.volatility, 2), 0));\n          const sharpeRatio = (portfolioReturn - 0.02) / portfolioVolatility;\n\n          frontierPoints.push({\n            return: portfolioReturn,\n            volatility: portfolioVolatility,\n            sharpeRatio,\n            weights: normalizedWeights\n          });\n        }\n\n        // Find optimal portfolio (max Sharpe ratio)\n        const optimalPortfolio = frontierPoints.reduce((best, current) =>\n          current.sharpeRatio > best.sharpeRatio ? current : best);\n\n        const content = `Efficient Frontier Analysis\\n\\n📊 ASSET UNIVERSE:\\n${stockData.map(stock =>\n          `• ${stock.ticker}: Expected Return ${formatPercentage(stock.expectedReturn)}, Volatility ${formatPercentage(stock.volatility)}`\n        ).join('\\n')}\\n\\n🎯 OPTIMAL PORTFOLIO (Max Sharpe Ratio):\\n• Expected Return: ${formatPercentage(optimalPortfolio.return)}\\n• Volatility: ${formatPercentage(optimalPortfolio.volatility)}\\n• Sharpe Ratio: ${formatNumber(optimalPortfolio.sharpeRatio, 2)}\\n\\n⚖️ OPTIMAL WEIGHTS:\\n${stockData.map((stock, i) =>\n          `• ${stock.ticker}: ${formatPercentage(optimalPortfolio.weights[i])}`\n        ).join('\\n')}\\n\\n📈 FRONTIER STATISTICS:\\n• Minimum Volatility: ${formatPercentage(Math.min(...frontierPoints.map(p => p.volatility)))}\\n• Maximum Return: ${formatPercentage(Math.max(...frontierPoints.map(p => p.return)))}\\n• Best Sharpe Ratio: ${formatNumber(Math.max(...frontierPoints.map(p => p.sharpeRatio)), 2)}\\n• Frontier Points: ${frontierPoints.length}\\n\\n💡 INSIGHTS:\\n• Diversification reduces portfolio risk below individual asset volatilities\\n• Optimal portfolio balances return and risk for maximum risk-adjusted return\\n• Consider rebalancing periodically to maintain target allocation\\n\\n⚠️ Note: Analysis uses simplified assumptions. Real optimization requires historical correlation data.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'efficient_frontier',\n            assets: stockData,\n            frontierPoints,\n            optimalPortfolio\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Efficient frontier analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  DRAWDOWN: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DRAWDOWN command requires a ticker symbol. Usage: DRAWDOWN(AAPL, 252)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock drawdown analysis (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16;\n        const maxDrawdown = volatility * 2.5; // Estimated based on volatility\n        const avgDrawdown = maxDrawdown * 0.4;\n        const drawdownFrequency = volatility * 12; // Drawdowns per year\n        const recoveryTime = maxDrawdown * 100; // Days to recover\n\n        // Generate mock drawdown periods\n        const drawdownPeriods = [\n          { start: '2023-03-01', end: '2023-04-15', magnitude: maxDrawdown * 0.8, duration: 45 },\n          { start: '2023-07-10', end: '2023-08-20', magnitude: maxDrawdown * 0.6, duration: 41 },\n          { start: '2023-11-05', end: '2023-12-01', magnitude: maxDrawdown * 0.4, duration: 26 },\n          { start: '2024-02-15', end: '2024-03-10', magnitude: maxDrawdown * 0.7, duration: 24 }\n        ];\n\n        const content = `Drawdown Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📉 DRAWDOWN STATISTICS:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Average Drawdown: ${formatPercentage(avgDrawdown)}\\n• Drawdown Frequency: ${formatNumber(drawdownFrequency, 1)} per year\\n• Average Recovery Time: ${formatNumber(recoveryTime, 0)} days\\n\\n📊 HISTORICAL DRAWDOWNS:\\n${drawdownPeriods.map((dd, i) =>\n          `${i + 1}. ${dd.start} to ${dd.end}: ${formatPercentage(dd.magnitude)} (${dd.duration} days)`\n        ).join('\\n')}\\n\\n⚠️ RISK ASSESSMENT:\\n• Drawdown Risk: ${maxDrawdown > 0.3 ? 'High' : maxDrawdown > 0.2 ? 'Moderate' : 'Low'}\\n• Recovery Speed: ${recoveryTime < 60 ? 'Fast' : recoveryTime < 120 ? 'Moderate' : 'Slow'}\\n• Volatility Impact: ${volatility > 0.25 ? 'High volatility increases drawdown risk' : 'Moderate volatility profile'}\\n\\n📈 PERFORMANCE METRICS:\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)} (Annual Return / Max Drawdown)\\n• Pain Index: ${formatNumber(avgDrawdown * drawdownFrequency, 2)}\\n• Ulcer Index: ${formatNumber(Math.sqrt(avgDrawdown), 3)}\\n\\n💡 INSIGHTS:\\n• Drawdowns are normal part of investing - focus on recovery patterns\\n• Diversification can help reduce maximum drawdown magnitude\\n• Consider position sizing based on maximum acceptable drawdown\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated drawdown metrics. Configure API keys for historical data.' : '✅ Based on historical price data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'drawdown',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              maxDrawdown,\n              avgDrawdown,\n              drawdownFrequency,\n              recoveryTime,\n              drawdownPeriods\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Drawdown analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  }\n};\n","/**\n * Advanced Valuation Model Commands\n * DDM, Residual Income, Asset-Based, and other sophisticated valuation techniques\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const valuationCommands = {\n  DDM: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DDM command requires a ticker symbol. Usage: DDM(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // DDM calculations\n        const currentDividend = profile.dividendYield * profile.price || 0;\n        const dividendGrowthRate = 0.05; // Assumed 5% growth\n        const requiredReturn = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        \n        if (currentDividend === 0) {\n          return {\n            type: 'warning',\n            content: `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n⚠️ NO DIVIDEND ANALYSIS:\\n• Current Dividend: $0.00\\n• Dividend Yield: 0.00%\\n• Company does not pay dividends\\n\\n💡 ALTERNATIVE VALUATION METHODS:\\n• Consider using DCF(${ticker.toUpperCase()}) for non-dividend paying stocks\\n• Growth companies often reinvest earnings rather than pay dividends\\n• Use COMP(${ticker.toUpperCase()}) for relative valuation\\n\\n📊 COMPANY METRICS:\\n• Current Price: ${formatCurrency(profile.price)}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}x\\n• Beta: ${formatNumber(profile.beta, 2)}`\n          };\n        }\n\n        // Gordon Growth Model\n        const gordonValue = currentDividend * (1 + dividendGrowthRate) / (requiredReturn - dividendGrowthRate);\n        \n        // Two-stage DDM\n        const highGrowthYears = 5;\n        const highGrowthRate = dividendGrowthRate * 1.5;\n        const terminalGrowthRate = 0.03;\n        \n        let presentValueHighGrowth = 0;\n        for (let year = 1; year <= highGrowthYears; year++) {\n          const dividend = currentDividend * Math.pow(1 + highGrowthRate, year);\n          const presentValue = dividend / Math.pow(1 + requiredReturn, year);\n          presentValueHighGrowth += presentValue;\n        }\n        \n        const terminalDividend = currentDividend * Math.pow(1 + highGrowthRate, highGrowthYears) * (1 + terminalGrowthRate);\n        const terminalValue = terminalDividend / (requiredReturn - terminalGrowthRate);\n        const presentValueTerminal = terminalValue / Math.pow(1 + requiredReturn, highGrowthYears);\n        \n        const twoStageValue = presentValueHighGrowth + presentValueTerminal;\n        \n        // Calculate upside/downside\n        const gordonUpside = ((gordonValue - profile.price) / profile.price) * 100;\n        const twoStageUpside = ((twoStageValue - profile.price) / profile.price) * 100;\n\n        const content = `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💰 DIVIDEND INFORMATION:\\n• Current Annual Dividend: ${formatCurrency(currentDividend)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n• Estimated Growth Rate: ${formatPercentage(dividendGrowthRate)}\\n• Required Return (CAPM): ${formatPercentage(requiredReturn)}\\n\\n📊 GORDON GROWTH MODEL:\\n• Fair Value: ${formatCurrency(gordonValue)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(gordonUpside / 100)}\\n\\n📈 TWO-STAGE DDM:\\n• High Growth Period: ${highGrowthYears} years at ${formatPercentage(highGrowthRate)}\\n• Terminal Growth: ${formatPercentage(terminalGrowthRate)}\\n• PV of High Growth Dividends: ${formatCurrency(presentValueHighGrowth)}\\n• PV of Terminal Value: ${formatCurrency(presentValueTerminal)}\\n• Total Fair Value: ${formatCurrency(twoStageValue)}\\n• Upside/(Downside): ${formatPercentage(twoStageUpside / 100)}\\n\\n🎯 VALUATION SUMMARY:\\n• Gordon Model: ${gordonUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(gordonUpside) / 100)}\\n• Two-Stage Model: ${twoStageUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(twoStageUpside) / 100)}\\n• Average Fair Value: ${formatCurrency((gordonValue + twoStageValue) / 2)}\\n\\n⚠️ KEY ASSUMPTIONS:\\n• Dividend growth rates are estimates\\n• Required return based on CAPM\\n• Terminal growth rate of ${formatPercentage(terminalGrowthRate)} assumed\\n• Model assumes dividends grow in perpetuity\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'ddm',\n            ticker: ticker.toUpperCase(),\n            results: {\n              currentDividend,\n              gordonValue,\n              twoStageValue,\n              gordonUpside,\n              twoStageUpside,\n              requiredReturn,\n              dividendGrowthRate\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DDM analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  RESIDUAL_INCOME: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RESIDUAL_INCOME command requires a ticker symbol. Usage: RESIDUAL_INCOME(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // Residual Income calculations\n        const bookValue = profile.bookValue || profile.mktCap / 2; // Fallback estimate\n        const roe = profile.returnOnEquityTTM || 0.15; // Fallback 15%\n        const costOfEquity = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        const netIncome = financials[0]?.netIncome || profile.mktCap * 0.08; // Fallback estimate\n        \n        // Calculate residual income\n        const normalIncome = bookValue * costOfEquity;\n        const residualIncome = netIncome - normalIncome;\n        \n        // Project residual income for 5 years\n        const projectionYears = 5;\n        const residualIncomeGrowth = Math.max(-0.05, Math.min(0.10, roe - costOfEquity)); // Fade to zero\n        \n        let totalPVResidualIncome = 0;\n        const projections = [];\n        \n        for (let year = 1; year <= projectionYears; year++) {\n          const projectedRI = residualIncome * Math.pow(1 + residualIncomeGrowth * (1 - year * 0.15), year);\n          const presentValue = projectedRI / Math.pow(1 + costOfEquity, year);\n          totalPVResidualIncome += presentValue;\n          \n          projections.push({\n            year,\n            residualIncome: projectedRI,\n            presentValue\n          });\n        }\n        \n        // Terminal value (assume residual income fades to zero)\n        const terminalRI = projections[projectionYears - 1].residualIncome * 0.5;\n        const terminalValue = terminalRI / costOfEquity;\n        const pvTerminalValue = terminalValue / Math.pow(1 + costOfEquity, projectionYears);\n        \n        // Calculate intrinsic value\n        const intrinsicValue = bookValue + totalPVResidualIncome + pvTerminalValue;\n        const valuePerShare = intrinsicValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((valuePerShare - profile.price) / profile.price) * 100;\n\n        const content = `Residual Income Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BASE METRICS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• ROE: ${formatPercentage(roe)}\\n• Cost of Equity: ${formatPercentage(costOfEquity)}\\n• Net Income: ${formatCurrency(netIncome, 'USD', true)}\\n\\n💰 RESIDUAL INCOME ANALYSIS:\\n• Normal Income: ${formatCurrency(normalIncome, 'USD', true)}\\n• Current Residual Income: ${formatCurrency(residualIncome, 'USD', true)}\\n• RI Growth Rate: ${formatPercentage(residualIncomeGrowth)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${projections.map(p => \n          `Year ${p.year}: RI ${formatCurrency(p.residualIncome, 'USD', true)}, PV ${formatCurrency(p.presentValue, 'USD', true)}`\n        ).join('\\n')}\\n\\n🎯 VALUATION RESULTS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• PV of Residual Income: ${formatCurrency(totalPVResidualIncome, 'USD', true)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminalValue, 'USD', true)}\\n• Total Intrinsic Value: ${formatCurrency(intrinsicValue, 'USD', true)}\\n• Value Per Share: ${formatCurrency(valuePerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n📊 KEY INSIGHTS:\\n• ${residualIncome > 0 ? 'Company generates positive economic value' : 'Company destroys economic value'}\\n• ROE vs Cost of Equity: ${roe > costOfEquity ? 'Value Creating' : 'Value Destroying'}\\n• ${upside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(upside) / 100)}\\n\\n⚠️ MODEL ASSUMPTIONS:\\n• Residual income growth fades over time\\n• Terminal value assumes sustainable competitive advantage\\n• Cost of equity based on CAPM\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'residual_income',\n            ticker: ticker.toUpperCase(),\n            results: {\n              bookValue,\n              residualIncome,\n              intrinsicValue,\n              valuePerShare,\n              upside,\n              projections\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Residual income analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  ASSET_BASED: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ASSET_BASED command requires a ticker symbol. Usage: ASSET_BASED(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const balanceSheet = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'balance-sheet-statement');\n\n        // Asset-based valuation\n        const totalAssets = balanceSheet[0]?.totalAssets || profile.mktCap * 1.5; // Fallback\n        const totalLiabilities = balanceSheet[0]?.totalLiabilities || profile.totalDebt || totalAssets * 0.4;\n        const bookValue = totalAssets - totalLiabilities;\n        \n        // Adjust assets to market value\n        const cashAndEquivalents = balanceSheet[0]?.cashAndCashEquivalents || profile.totalCash || totalAssets * 0.1;\n        const inventory = balanceSheet[0]?.inventory || totalAssets * 0.15;\n        const ppe = balanceSheet[0]?.propertyPlantEquipmentNet || totalAssets * 0.3;\n        const intangibleAssets = balanceSheet[0]?.intangibleAssets || totalAssets * 0.2;\n        const otherAssets = totalAssets - cashAndEquivalents - inventory - ppe - intangibleAssets;\n        \n        // Apply market value adjustments\n        const adjustments = {\n          cash: { book: cashAndEquivalents, market: cashAndEquivalents, adjustment: 1.0 },\n          inventory: { book: inventory, market: inventory * 0.8, adjustment: 0.8 }, // 20% discount\n          ppe: { book: ppe, market: ppe * 1.2, adjustment: 1.2 }, // 20% premium for real estate\n          intangibles: { book: intangibleAssets, market: intangibleAssets * 0.5, adjustment: 0.5 }, // 50% discount\n          other: { book: otherAssets, market: otherAssets * 0.9, adjustment: 0.9 }\n        };\n        \n        const totalMarketAssets = Object.values(adjustments).reduce((sum, adj) => sum + adj.market, 0);\n        const netAssetValue = totalMarketAssets - totalLiabilities;\n        const navPerShare = netAssetValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((navPerShare - profile.price) / profile.price) * 100;\n        \n        // Liquidation value (more conservative)\n        const liquidationValue = totalMarketAssets * 0.7 - totalLiabilities; // 30% liquidation discount\n        const liquidationPerShare = liquidationValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n\n        const content = `Asset-Based Valuation for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BALANCE SHEET SUMMARY:\\n• Total Assets: ${formatCurrency(totalAssets, 'USD', true)}\\n• Total Liabilities: ${formatCurrency(totalLiabilities, 'USD', true)}\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n\\n💰 ASSET BREAKDOWN & ADJUSTMENTS:\\n• Cash & Equivalents: ${formatCurrency(adjustments.cash.book, 'USD', true)} → ${formatCurrency(adjustments.cash.market, 'USD', true)} (${formatPercentage(adjustments.cash.adjustment - 1)})\\n• Inventory: ${formatCurrency(adjustments.inventory.book, 'USD', true)} → ${formatCurrency(adjustments.inventory.market, 'USD', true)} (${formatPercentage(adjustments.inventory.adjustment - 1)})\\n• PP&E: ${formatCurrency(adjustments.ppe.book, 'USD', true)} → ${formatCurrency(adjustments.ppe.market, 'USD', true)} (${formatPercentage(adjustments.ppe.adjustment - 1)})\\n• Intangibles: ${formatCurrency(adjustments.intangibles.book, 'USD', true)} → ${formatCurrency(adjustments.intangibles.market, 'USD', true)} (${formatPercentage(adjustments.intangibles.adjustment - 1)})\\n• Other Assets: ${formatCurrency(adjustments.other.book, 'USD', true)} → ${formatCurrency(adjustments.other.market, 'USD', true)} (${formatPercentage(adjustments.other.adjustment - 1)})\\n\\n🎯 VALUATION RESULTS:\\n• Adjusted Asset Value: ${formatCurrency(totalMarketAssets, 'USD', true)}\\n• Net Asset Value: ${formatCurrency(netAssetValue, 'USD', true)}\\n• NAV Per Share: ${formatCurrency(navPerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n🔥 LIQUIDATION ANALYSIS:\\n• Liquidation Value: ${formatCurrency(liquidationValue, 'USD', true)}\\n• Liquidation Per Share: ${formatCurrency(liquidationPerShare)}\\n• Liquidation Premium: ${formatPercentage((liquidationPerShare / profile.price - 1))}\\n\\n📈 ASSET EFFICIENCY:\\n• Asset Turnover: ${formatNumber(profile.revenue / totalAssets, 2)}x\\n• Book Value Multiple: ${formatNumber(profile.price / (bookValue / (profile.sharesOutstanding || profile.mktCap / profile.price)), 2)}x\\n• Tangible Book Multiple: ${formatNumber(profile.pb, 2)}x\\n\\n💡 INSIGHTS:\\n• ${upside > 0 ? 'Trading below asset value - potential value opportunity' : 'Trading above asset value - premium for intangibles/growth'}\\n• Asset-based valuation most relevant for asset-heavy businesses\\n• Consider liquidation value as downside protection\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'asset_based',\n            ticker: ticker.toUpperCase(),\n            results: {\n              totalAssets,\n              netAssetValue,\n              navPerShare,\n              liquidationValue,\n              liquidationPerShare,\n              upside,\n              adjustments\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Asset-based valuation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Technical Analysis Commands\n * Technical indicators, chart patterns, and market intelligence\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const technicalCommands = {\n  TECHNICALS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'TECHNICALS command requires a ticker symbol. Usage: TECHNICALS(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock technical indicators (in real implementation, would calculate from price data)\n        const price = profile.price;\n        const volatility = (profile.beta || 1.0) * 0.16;\n        \n        // Generate mock technical indicators\n        const sma20 = price * (1 + (Math.random() - 0.5) * 0.1);\n        const sma50 = price * (1 + (Math.random() - 0.5) * 0.15);\n        const ema12 = price * (1 + (Math.random() - 0.5) * 0.08);\n        const ema26 = price * (1 + (Math.random() - 0.5) * 0.12);\n        \n        const rsi = 30 + Math.random() * 40; // RSI between 30-70\n        const macd = (ema12 - ema26);\n        const macdSignal = macd * (0.9 + Math.random() * 0.2);\n        const macdHistogram = macd - macdSignal;\n        \n        const bollingerUpper = sma20 * 1.02;\n        const bollingerLower = sma20 * 0.98;\n        const bollingerPosition = (price - bollingerLower) / (bollingerUpper - bollingerLower);\n        \n        // Support and resistance levels\n        const support1 = price * 0.95;\n        const support2 = price * 0.90;\n        const resistance1 = price * 1.05;\n        const resistance2 = price * 1.10;\n        \n        // Generate signals\n        const signals = [];\n        if (price > sma20 && sma20 > sma50) signals.push('Bullish trend (Price > SMA20 > SMA50)');\n        if (price < sma20 && sma20 < sma50) signals.push('Bearish trend (Price < SMA20 < SMA50)');\n        if (rsi < 30) signals.push('Oversold condition (RSI < 30)');\n        if (rsi > 70) signals.push('Overbought condition (RSI > 70)');\n        if (macdHistogram > 0 && macd > macdSignal) signals.push('MACD bullish crossover');\n        if (macdHistogram < 0 && macd < macdSignal) signals.push('MACD bearish crossover');\n        if (bollingerPosition > 0.8) signals.push('Near upper Bollinger Band');\n        if (bollingerPosition < 0.2) signals.push('Near lower Bollinger Band');\n\n        const content = `Technical Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 PRICE & MOVING AVERAGES:\\n• Current Price: ${formatCurrency(price)}\\n• SMA(20): ${formatCurrency(sma20)} ${price > sma20 ? '📈' : '📉'}\\n• SMA(50): ${formatCurrency(sma50)} ${price > sma50 ? '📈' : '📉'}\\n• EMA(12): ${formatCurrency(ema12)}\\n• EMA(26): ${formatCurrency(ema26)}\\n\\n📈 MOMENTUM INDICATORS:\\n• RSI(14): ${formatNumber(rsi, 1)} ${rsi > 70 ? '🔴 Overbought' : rsi < 30 ? '🟢 Oversold' : '🟡 Neutral'}\\n• MACD: ${formatNumber(macd, 3)}\\n• MACD Signal: ${formatNumber(macdSignal, 3)}\\n• MACD Histogram: ${formatNumber(macdHistogram, 3)} ${macdHistogram > 0 ? '📈' : '📉'}\\n\\n🎯 BOLLINGER BANDS:\\n• Upper Band: ${formatCurrency(bollingerUpper)}\\n• Middle (SMA20): ${formatCurrency(sma20)}\\n• Lower Band: ${formatCurrency(bollingerLower)}\\n• Position: ${formatPercentage(bollingerPosition)} ${bollingerPosition > 0.8 ? '🔴 Near Upper' : bollingerPosition < 0.2 ? '🟢 Near Lower' : '🟡 Middle'}\\n\\n⚖️ SUPPORT & RESISTANCE:\\n• Resistance 2: ${formatCurrency(resistance2)}\\n• Resistance 1: ${formatCurrency(resistance1)}\\n• Current: ${formatCurrency(price)}\\n• Support 1: ${formatCurrency(support1)}\\n• Support 2: ${formatCurrency(support2)}\\n\\n🚨 ACTIVE SIGNALS:\\n${signals.length > 0 ? signals.map(signal => `• ${signal}`).join('\\n') : '• No active signals'}\\n\\n📊 TREND ANALYSIS:\\n• Short-term (20-day): ${price > sma20 ? 'Bullish' : 'Bearish'}\\n• Medium-term (50-day): ${price > sma50 ? 'Bullish' : 'Bearish'}\\n• Momentum: ${rsi > 50 ? 'Positive' : 'Negative'}\\n• Volatility: ${volatility > 0.25 ? 'High' : volatility > 0.15 ? 'Moderate' : 'Low'}\\n\\n💡 TRADING INSIGHTS:\\n• ${price > sma20 && rsi < 70 ? 'Potential uptrend with room to run' : ''}\\n• ${price < sma20 && rsi > 30 ? 'Potential downtrend with selling pressure' : ''}\\n• ${Math.abs(bollingerPosition - 0.5) < 0.2 ? 'Price consolidating in middle of range' : ''}\\n• Watch for breakout above ${formatCurrency(resistance1)} or breakdown below ${formatCurrency(support1)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated technical data. Configure API keys for live price data.' : '✅ Based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'technical',\n            ticker: ticker.toUpperCase(),\n            indicators: {\n              price,\n              sma20,\n              sma50,\n              rsi,\n              macd,\n              macdSignal,\n              bollingerUpper,\n              bollingerLower,\n              support1,\n              support2,\n              resistance1,\n              resistance2\n            },\n            signals\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Technical analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SUPPORT_RESISTANCE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SUPPORT_RESISTANCE command requires a ticker symbol. Usage: SUPPORT_RESISTANCE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const price = profile.price;\n        \n        // Generate support and resistance levels based on price\n        const levels = [\n          { type: 'Resistance', level: price * 1.15, strength: 'Strong', touches: 3 },\n          { type: 'Resistance', level: price * 1.08, strength: 'Moderate', touches: 2 },\n          { type: 'Resistance', level: price * 1.03, strength: 'Weak', touches: 1 },\n          { type: 'Current', level: price, strength: 'Current Price', touches: 0 },\n          { type: 'Support', level: price * 0.97, strength: 'Weak', touches: 1 },\n          { type: 'Support', level: price * 0.92, strength: 'Moderate', touches: 2 },\n          { type: 'Support', level: price * 0.85, strength: 'Strong', touches: 4 }\n        ];\n\n        // Calculate distances and probabilities\n        const nearestSupport = levels.filter(l => l.type === 'Support' && l.level < price)[0];\n        const nearestResistance = levels.filter(l => l.type === 'Resistance' && l.level > price)[0];\n        \n        const supportDistance = ((price - nearestSupport.level) / price) * 100;\n        const resistanceDistance = ((nearestResistance.level - price) / price) * 100;\n\n        const content = `Support & Resistance Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🎯 KEY LEVELS:\\n${levels.map(level => {\n          const distance = ((level.level - price) / price) * 100;\n          const arrow = level.type === 'Current' ? '👉' : \n                       level.type === 'Resistance' ? '🔴' : '🟢';\n          return `${arrow} ${level.type}: ${formatCurrency(level.level)} (${level.strength}) ${level.touches > 0 ? `[${level.touches} touches]` : ''} ${level.type !== 'Current' ? `(${formatPercentage(Math.abs(distance) / 100)} away)` : ''}`;\n        }).join('\\n')}\\n\\n📊 LEVEL ANALYSIS:\\n• Nearest Support: ${formatCurrency(nearestSupport.level)} (${formatPercentage(supportDistance / 100)} below)\\n• Nearest Resistance: ${formatCurrency(nearestResistance.level)} (${formatPercentage(resistanceDistance / 100)} above)\\n• Support Strength: ${nearestSupport.strength}\\n• Resistance Strength: ${nearestResistance.strength}\\n\\n📈 TRADING RANGES:\\n• Current Range: ${formatCurrency(nearestSupport.level)} - ${formatCurrency(nearestResistance.level)}\\n• Range Width: ${formatPercentage((nearestResistance.level - nearestSupport.level) / price)}\\n• Position in Range: ${formatPercentage((price - nearestSupport.level) / (nearestResistance.level - nearestSupport.level))}\\n\\n🎯 BREAKOUT TARGETS:\\n• Upside Target: ${formatCurrency(nearestResistance.level * 1.05)}\\n• Downside Target: ${formatCurrency(nearestSupport.level * 0.95)}\\n• Risk/Reward Ratio: ${formatNumber(resistanceDistance / supportDistance, 2)}:1\\n\\n💡 TRADING INSIGHTS:\\n• ${supportDistance < 3 ? '⚠️ Close to support - watch for bounce or breakdown' : ''}\\n• ${resistanceDistance < 3 ? '⚠️ Close to resistance - watch for breakout or rejection' : ''}\\n• ${nearestSupport.strength === 'Strong' ? '🛡️ Strong support should provide good downside protection' : ''}\\n• ${nearestResistance.strength === 'Strong' ? '🚧 Strong resistance may limit upside potential' : ''}\\n• Volume confirmation needed for breakouts\\n\\n🔍 LEVEL QUALITY:\\n• Support levels tested ${nearestSupport.touches} times\\n• Resistance levels tested ${nearestResistance.touches} times\\n• More touches = stronger level\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated levels. Configure API keys for historical price data.' : '✅ Based on historical price action'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'support_resistance',\n            ticker: ticker.toUpperCase(),\n            levels,\n            nearestSupport,\n            nearestResistance,\n            supportDistance,\n            resistanceDistance\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Support & resistance analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * ESG & Alternative Data Commands\n * Environmental, social, governance metrics and alternative data analysis\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const esgCommands = {\n  ESG_SCORE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ESG_SCORE command requires a ticker symbol. Usage: ESG_SCORE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock ESG scores (in real implementation, would fetch from ESG data providers)\n        const sectorMultiplier = {\n          'Technology': 0.8,\n          'Healthcare': 0.9,\n          'Financial Services': 0.7,\n          'Energy': 0.4,\n          'Utilities': 0.6,\n          'Consumer Cyclical': 0.6,\n          'Consumer Defensive': 0.7,\n          'Industrials': 0.5,\n          'Materials': 0.4,\n          'Real Estate': 0.6,\n          'Communication Services': 0.7\n        };\n        \n        const baseSector = profile.sector || 'Technology';\n        const sectorScore = sectorMultiplier[baseSector] || 0.6;\n        const companySize = Math.min(1.0, profile.mktCap / 1000000000000); // Larger companies tend to have better ESG\n        \n        // Generate ESG scores\n        const environmentalScore = Math.min(100, Math.max(20, (sectorScore * 100) + (Math.random() - 0.5) * 30 + (companySize * 20)));\n        const socialScore = Math.min(100, Math.max(20, 70 + (Math.random() - 0.5) * 40 + (companySize * 15)));\n        const governanceScore = Math.min(100, Math.max(30, 75 + (Math.random() - 0.5) * 30 + (companySize * 10)));\n        const overallScore = (environmentalScore + socialScore + governanceScore) / 3;\n        \n        // Risk factors\n        const riskFactors = [];\n        if (environmentalScore < 50) riskFactors.push('High environmental impact');\n        if (socialScore < 50) riskFactors.push('Social responsibility concerns');\n        if (governanceScore < 60) riskFactors.push('Governance structure issues');\n        if (baseSector === 'Energy' || baseSector === 'Materials') riskFactors.push('Carbon-intensive industry');\n        \n        // Opportunities\n        const opportunities = [];\n        if (environmentalScore > 70) opportunities.push('Strong environmental practices');\n        if (socialScore > 70) opportunities.push('Positive social impact');\n        if (governanceScore > 80) opportunities.push('Excellent governance standards');\n        if (baseSector === 'Technology') opportunities.push('Digital transformation enabler');\n        \n        // ESG trends\n        const trends = {\n          environmental: environmentalScore > 60 ? 'Improving' : 'Needs attention',\n          social: socialScore > 65 ? 'Strong' : 'Moderate',\n          governance: governanceScore > 70 ? 'Excellent' : 'Good'\n        };\n\n        const content = `ESG Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🌱 ESG SCORES:\\n• Overall ESG Score: ${formatNumber(overallScore, 1)}/100 ${overallScore > 70 ? '🟢 Strong' : overallScore > 50 ? '🟡 Moderate' : '🔴 Weak'}\\n• Environmental (E): ${formatNumber(environmentalScore, 1)}/100\\n• Social (S): ${formatNumber(socialScore, 1)}/100\\n• Governance (G): ${formatNumber(governanceScore, 1)}/100\\n\\n📊 SECTOR CONTEXT:\\n• Sector: ${baseSector}\\n• Sector ESG Average: ${formatNumber(sectorScore * 100, 1)}/100\\n• Relative Performance: ${overallScore > sectorScore * 100 ? 'Above' : 'Below'} sector average\\n• Company Size Factor: ${formatNumber(companySize, 2)} (larger = better resources)\\n\\n🎯 ESG TRENDS:\\n• Environmental: ${trends.environmental}\\n• Social: ${trends.social}\\n• Governance: ${trends.governance}\\n\\n⚠️ RISK FACTORS:\\n${riskFactors.length > 0 ? riskFactors.map(risk => `• ${risk}`).join('\\n') : '• No major ESG risks identified'}\\n\\n🌟 OPPORTUNITIES:\\n${opportunities.length > 0 ? opportunities.map(opp => `• ${opp}`).join('\\n') : '• Limited ESG opportunities identified'}\\n\\n💰 ESG INVESTMENT IMPLICATIONS:\\n• ESG Premium: ${overallScore > 70 ? 'May command valuation premium' : 'May face valuation discount'}\\n• Regulatory Risk: ${environmentalScore < 50 ? 'High' : 'Low'}\\n• Reputation Risk: ${socialScore < 50 ? 'High' : 'Low'}\\n• Access to Capital: ${overallScore > 60 ? 'Favorable' : 'May face restrictions'}\\n\\n📈 ESG MOMENTUM:\\n• Investor Interest: ${overallScore > 65 ? 'High ESG investor appeal' : 'Limited ESG appeal'}\\n• Sustainable Funds Eligibility: ${overallScore > 70 ? 'Likely eligible' : 'May not qualify'}\\n• Climate Transition Risk: ${environmentalScore < 40 ? 'High' : environmentalScore > 70 ? 'Low' : 'Moderate'}\\n\\n💡 RECOMMENDATIONS:\\n• ${environmentalScore < 60 ? 'Focus on environmental initiatives and carbon reduction' : ''}\\n• ${socialScore < 60 ? 'Improve social impact and stakeholder engagement' : ''}\\n• ${governanceScore < 70 ? 'Strengthen governance practices and transparency' : ''}\\n• ${overallScore > 70 ? 'Leverage ESG leadership for competitive advantage' : ''}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated ESG data. Configure API keys for live ESG ratings.' : '✅ Based on ESG data providers'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'esg',\n            ticker: ticker.toUpperCase(),\n            scores: {\n              overall: overallScore,\n              environmental: environmentalScore,\n              social: socialScore,\n              governance: governanceScore\n            },\n            riskFactors,\n            opportunities,\n            trends\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `ESG analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SOCIAL_SENTIMENT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, days = 30] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SOCIAL_SENTIMENT command requires a ticker symbol. Usage: SOCIAL_SENTIMENT(AAPL, 30)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock social sentiment data (in real implementation, would analyze social media)\n        const sentimentScore = 40 + Math.random() * 40; // 40-80 range\n        const volumeScore = Math.random() * 100;\n        const trendDirection = Math.random() > 0.5 ? 'Positive' : 'Negative';\n        \n        // Generate mock sentiment sources\n        const sources = [\n          { platform: 'Twitter', mentions: Math.floor(Math.random() * 10000), sentiment: sentimentScore + (Math.random() - 0.5) * 20 },\n          { platform: 'Reddit', mentions: Math.floor(Math.random() * 5000), sentiment: sentimentScore + (Math.random() - 0.5) * 15 },\n          { platform: 'StockTwits', mentions: Math.floor(Math.random() * 3000), sentiment: sentimentScore + (Math.random() - 0.5) * 25 },\n          { platform: 'News Articles', mentions: Math.floor(Math.random() * 500), sentiment: sentimentScore + (Math.random() - 0.5) * 10 }\n        ];\n        \n        // Key themes\n        const themes = [\n          { topic: 'Earnings', sentiment: sentimentScore + 10, mentions: Math.floor(Math.random() * 2000) },\n          { topic: 'Product Launch', sentiment: sentimentScore + 15, mentions: Math.floor(Math.random() * 1500) },\n          { topic: 'Management', sentiment: sentimentScore - 5, mentions: Math.floor(Math.random() * 800) },\n          { topic: 'Competition', sentiment: sentimentScore - 10, mentions: Math.floor(Math.random() * 1200) }\n        ];\n        \n        const totalMentions = sources.reduce((sum, source) => sum + source.mentions, 0);\n        const avgSentiment = sources.reduce((sum, source) => sum + (source.sentiment * source.mentions), 0) / totalMentions;\n\n        const content = `Social Sentiment Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 SENTIMENT OVERVIEW (${days} days):\\n• Overall Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Very Positive' : avgSentiment > 60 ? '🟢 Positive' : avgSentiment > 40 ? '🟡 Neutral' : '🔴 Negative'}\\n• Volume Score: ${formatNumber(volumeScore, 1)}/100 ${volumeScore > 70 ? '📈 High Activity' : volumeScore > 40 ? '📊 Moderate Activity' : '📉 Low Activity'}\\n• Trend Direction: ${trendDirection} ${trendDirection === 'Positive' ? '📈' : '📉'}\\n• Total Mentions: ${formatNumber(totalMentions, 0, true)}\\n\\n🌐 PLATFORM BREAKDOWN:\\n${sources.map(source => \n          `• ${source.platform}: ${formatNumber(source.mentions, 0, true)} mentions, ${formatNumber(source.sentiment, 1)}/100 sentiment`\n        ).join('\\n')}\\n\\n🔥 TRENDING TOPICS:\\n${themes.map(theme => \n          `• ${theme.topic}: ${formatNumber(theme.mentions, 0, true)} mentions, ${formatNumber(theme.sentiment, 1)}/100 sentiment ${theme.sentiment > 60 ? '🟢' : theme.sentiment > 40 ? '🟡' : '🔴'}`\n        ).join('\\n')}\\n\\n📈 SENTIMENT INDICATORS:\\n• Bullish Mentions: ${formatPercentage((avgSentiment / 100) * 0.8)}\\n• Bearish Mentions: ${formatPercentage((1 - avgSentiment / 100) * 0.6)}\\n• Neutral Mentions: ${formatPercentage(0.3)}\\n• Engagement Rate: ${formatNumber(volumeScore / 10, 1)}%\\n\\n🎯 SENTIMENT SIGNALS:\\n• ${avgSentiment > 70 ? 'Strong positive momentum in social discussions' : ''}\\n• ${avgSentiment < 40 ? 'Negative sentiment may pressure stock price' : ''}\\n• ${volumeScore > 80 ? 'High social media activity - watch for volatility' : ''}\\n• ${trendDirection === 'Positive' ? 'Improving sentiment trend' : 'Declining sentiment trend'}\\n\\n💡 TRADING IMPLICATIONS:\\n• Sentiment-Price Correlation: ${avgSentiment > 60 ? 'Positive sentiment may support price' : 'Negative sentiment may create headwinds'}\\n• Volatility Expectation: ${volumeScore > 70 ? 'High' : volumeScore > 40 ? 'Moderate' : 'Low'}\\n• Contrarian Opportunity: ${avgSentiment < 30 ? 'Extremely negative sentiment may signal oversold condition' : avgSentiment > 85 ? 'Extremely positive sentiment may signal overbought condition' : 'Sentiment within normal range'}\\n\\n⚠️ SENTIMENT RISKS:\\n• ${volumeScore > 90 ? 'Viral social media activity can cause extreme volatility' : ''}\\n• ${avgSentiment < 35 ? 'Negative sentiment spiral risk' : ''}\\n• ${themes.some(t => t.sentiment < 30) ? 'Specific negative themes gaining traction' : ''}\\n\\n📱 MONITORING RECOMMENDATIONS:\\n• Track sentiment changes around earnings announcements\\n• Monitor for sentiment divergence from price action\\n• Watch for viral content that could impact stock price\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated sentiment data. Configure API keys for live social media analysis.' : '✅ Based on real-time social media data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'social_sentiment',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            metrics: {\n              overallSentiment: avgSentiment,\n              volumeScore,\n              totalMentions,\n              trendDirection\n            },\n            sources,\n            themes\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Social sentiment analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  },\n\n  NEWS_IMPACT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, days = 7] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'NEWS_IMPACT command requires a ticker symbol. Usage: NEWS_IMPACT(AAPL, 7)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Mock news impact analysis\n        const newsItems = [\n          {\n            date: '2024-01-15',\n            headline: 'Q4 Earnings Beat Expectations',\n            sentiment: 85,\n            impact: 'High',\n            priceChange: 3.2,\n            volume: 150\n          },\n          {\n            date: '2024-01-12',\n            headline: 'New Product Launch Announcement',\n            sentiment: 78,\n            impact: 'Medium',\n            priceChange: 1.8,\n            volume: 120\n          },\n          {\n            date: '2024-01-10',\n            headline: 'Analyst Upgrade to Buy Rating',\n            sentiment: 72,\n            impact: 'Medium',\n            priceChange: 2.1,\n            volume: 110\n          },\n          {\n            date: '2024-01-08',\n            headline: 'Regulatory Concerns Raised',\n            sentiment: 35,\n            impact: 'Medium',\n            priceChange: -1.5,\n            volume: 130\n          }\n        ];\n        \n        const avgSentiment = newsItems.reduce((sum, item) => sum + item.sentiment, 0) / newsItems.length;\n        const totalPriceImpact = newsItems.reduce((sum, item) => sum + Math.abs(item.priceChange), 0);\n        const avgVolume = newsItems.reduce((sum, item) => sum + item.volume, 0) / newsItems.length;\n\n        const content = `News Impact Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📰 NEWS SUMMARY (${days} days):\\n• Total News Items: ${newsItems.length}\\n• Average Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Positive' : avgSentiment > 50 ? '🟡 Neutral' : '🔴 Negative'}\\n• Total Price Impact: ${formatPercentage(totalPriceImpact / 100)}\\n• Average Volume Impact: ${formatNumber(avgVolume, 0)}% above normal\\n\\n📊 RECENT NEWS ITEMS:\\n${newsItems.map(item => \n          `• ${item.date}: ${item.headline}\\n  Sentiment: ${item.sentiment}/100, Impact: ${item.impact}, Price: ${item.priceChange > 0 ? '+' : ''}${formatPercentage(item.priceChange / 100)}, Volume: +${item.volume}%`\n        ).join('\\n\\n')}\\n\\n📈 IMPACT ANALYSIS:\\n• Positive News Items: ${newsItems.filter(item => item.sentiment > 60).length}\\n• Negative News Items: ${newsItems.filter(item => item.sentiment < 40).length}\\n• High Impact Events: ${newsItems.filter(item => item.impact === 'High').length}\\n• Average Price Reaction: ${formatPercentage(newsItems.reduce((sum, item) => sum + item.priceChange, 0) / newsItems.length / 100)}\\n\\n🎯 NEWS MOMENTUM:\\n• Recent Trend: ${avgSentiment > 60 ? 'Positive news flow' : avgSentiment < 40 ? 'Negative news flow' : 'Mixed news flow'}\\n• Volatility Driver: ${totalPriceImpact > 5 ? 'High news-driven volatility' : 'Moderate news impact'}\\n• Volume Catalyst: ${avgVolume > 150 ? 'Strong volume reactions to news' : 'Normal volume reactions'}\\n\\n💡 KEY INSIGHTS:\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment > 70) ? 'Recent positive catalyst may support momentum' : ''}\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment < 40) ? 'Recent negative news may create headwinds' : ''}\\n• ${totalPriceImpact > 8 ? 'High news sensitivity - monitor for future announcements' : ''}\\n• News-to-price correlation appears ${totalPriceImpact > 5 ? 'strong' : 'moderate'}\\n\\n📅 UPCOMING CATALYSTS:\\n• Earnings announcement expected in ${Math.floor(Math.random() * 30 + 1)} days\\n• Product event scheduled for next quarter\\n• Regulatory decision pending\\n• Analyst day planned for Q2\\n\\n⚠️ RISK FACTORS:\\n• ${newsItems.some(item => item.sentiment < 30) ? 'Recent negative news may have lasting impact' : ''}\\n• ${avgVolume > 200 ? 'High volatility from news reactions' : ''}\\n• Regulatory overhang from recent developments\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated news data. Configure API keys for live news analysis.' : '✅ Based on real-time news feeds'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'news_impact',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            newsItems,\n            metrics: {\n              avgSentiment,\n              totalPriceImpact,\n              avgVolume\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `News impact analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  }\n};\n","/**\n * Automation & Workflow Commands\n * Watchlists, alerts, batch analysis, and automated workflows\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const automationCommands = {\n  WATCHLIST: {\n    execute: async (parsedCommand, context, processor) => {\n      const [action, name, tickers] = parsedCommand.parameters;\n      \n      if (!action) {\n        return {\n          type: 'error',\n          content: 'WATCHLIST command requires an action. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL]) or WATCHLIST(list)'\n        };\n      }\n\n      try {\n        // Get existing watchlists from processor variables\n        const watchlists = processor.getVariable('watchlists') || {};\n\n        if (action.toLowerCase() === 'list') {\n          if (Object.keys(watchlists).length === 0) {\n            return {\n              type: 'info',\n              content: 'No watchlists created yet. Use WATCHLIST(create, \"name\", [tickers]) to create one.'\n            };\n          }\n\n          const content = `📋 Your Watchlists:\\n\\n${Object.entries(watchlists).map(([listName, data]) => \n            `📊 ${listName} (${data.tickers.length} stocks)\\n• Created: ${data.created}\\n• Tickers: ${data.tickers.join(', ')}\\n• Last Updated: ${data.lastUpdated || 'Never'}`\n          ).join('\\n\\n')}\\n\\n💡 Commands:\\n• WATCHLIST(view, \"name\") - View detailed watchlist\\n• WATCHLIST(update, \"name\", [new_tickers]) - Update watchlist\\n• WATCHLIST(delete, \"name\") - Delete watchlist\\n• WATCHLIST(analyze, \"name\") - Analyze all stocks in watchlist`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_list',\n              watchlists\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'create') {\n          if (!name || !tickers) {\n            return {\n              type: 'error',\n              content: 'Create action requires name and tickers. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL])'\n            };\n          }\n\n          const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n          watchlists[name] = {\n            tickers: tickerArray.map(t => t.toUpperCase()),\n            created: new Date().toISOString().split('T')[0],\n            lastUpdated: null\n          };\n\n          processor.setVariable('watchlists', watchlists);\n\n          return {\n            type: 'success',\n            content: `✅ Watchlist \"${name}\" created with ${tickerArray.length} stocks: ${tickerArray.join(', ')}\\n\\nUse WATCHLIST(analyze, \"${name}\") to analyze all stocks in this watchlist.`,\n            data: {\n              analysis: 'watchlist_created',\n              name,\n              tickers: tickerArray\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'view') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n          \n          // Fetch current data for all tickers\n          const stockData = await Promise.all(\n            watchlist.tickers.map(async (ticker) => {\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  change: profile.changes || 0,\n                  changePercent: profile.changesPercentage || 0,\n                  marketCap: profile.mktCap,\n                  pe: profile.pe\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error loading',\n                  price: 0,\n                  change: 0,\n                  changePercent: 0,\n                  marketCap: 0,\n                  pe: 0\n                };\n              }\n            })\n          );\n\n          const totalValue = stockData.reduce((sum, stock) => sum + stock.marketCap, 0);\n          const avgChange = stockData.reduce((sum, stock) => sum + stock.changePercent, 0) / stockData.length;\n\n          const content = `📊 Watchlist: ${name}\\n\\n📈 PERFORMANCE SUMMARY:\\n• Total Market Cap: ${formatCurrency(totalValue, 'USD', true)}\\n• Average Change: ${formatPercentage(avgChange / 100)} ${avgChange > 0 ? '📈' : '📉'}\\n• Best Performer: ${stockData.reduce((best, stock) => stock.changePercent > best.changePercent ? stock : best).ticker} (${formatPercentage(Math.max(...stockData.map(s => s.changePercent)) / 100)})\\n• Worst Performer: ${stockData.reduce((worst, stock) => stock.changePercent < worst.changePercent ? stock : worst).ticker} (${formatPercentage(Math.min(...stockData.map(s => s.changePercent)) / 100)})\\n\\n📋 HOLDINGS:\\n${stockData.map(stock => \n            `• ${stock.ticker}: ${formatCurrency(stock.price)} ${stock.changePercent > 0 ? '📈' : stock.changePercent < 0 ? '📉' : '➡️'} ${formatPercentage(stock.changePercent / 100)} (P/E: ${formatNumber(stock.pe, 1)}x)`\n          ).join('\\n')}\\n\\n💡 QUICK ACTIONS:\\n• WATCHLIST(analyze, \"${name}\") - Run analysis on all stocks\\n• DCF(ticker) - Detailed analysis of any stock\\n• PORTFOLIO([${watchlist.tickers.join(',')}], [equal weights]) - Portfolio analysis`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_view',\n              name,\n              stockData,\n              summary: {\n                totalValue,\n                avgChange\n              }\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'analyze') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n          \n          // Perform quick analysis on all stocks\n          const analysisResults = await Promise.all(\n            watchlist.tickers.slice(0, 5).map(async (ticker) => { // Limit to 5 for demo\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  pe: profile.pe,\n                  pb: profile.pb,\n                  beta: profile.beta,\n                  recommendation: profile.pe < 20 && profile.pb < 3 ? 'Attractive' : profile.pe > 30 ? 'Expensive' : 'Fair Value'\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error',\n                  recommendation: 'Unable to analyze'\n                };\n              }\n            })\n          );\n\n          const content = `🔍 Watchlist Analysis: ${name}\\n\\n📊 QUICK ANALYSIS RESULTS:\\n${analysisResults.map(result => \n            `• ${result.ticker} (${result.name}):\\n  Price: ${formatCurrency(result.price)}, P/E: ${formatNumber(result.pe, 1)}x, P/B: ${formatNumber(result.pb, 1)}x\\n  Beta: ${formatNumber(result.beta, 2)}, Assessment: ${result.recommendation} ${result.recommendation === 'Attractive' ? '🟢' : result.recommendation === 'Expensive' ? '🔴' : '🟡'}`\n          ).join('\\n\\n')}\\n\\n🎯 SUMMARY:\\n• Attractive Opportunities: ${analysisResults.filter(r => r.recommendation === 'Attractive').length}\\n• Fair Value Stocks: ${analysisResults.filter(r => r.recommendation === 'Fair Value').length}\\n• Expensive Stocks: ${analysisResults.filter(r => r.recommendation === 'Expensive').length}\\n\\n💡 NEXT STEPS:\\n• Run DCF(ticker) for detailed valuation of attractive stocks\\n• Use COMP(ticker) for relative valuation analysis\\n• Consider PORTFOLIO analysis for optimal allocation\\n\\n${watchlist.tickers.length > 5 ? `⚠️ Showing first 5 stocks. Full watchlist has ${watchlist.tickers.length} stocks.` : ''}`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_analysis',\n              name,\n              results: analysisResults\n            }\n          };\n        }\n\n        return {\n          type: 'error',\n          content: `Unknown action \"${action}\". Available actions: list, create, view, analyze, update, delete`\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Watchlist operation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  },\n\n  ALERT: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, condition, value] = parsedCommand.parameters;\n      \n      if (!ticker || !condition || value === undefined) {\n        return {\n          type: 'error',\n          content: 'ALERT command requires ticker, condition, and value. Usage: ALERT(AAPL, \"price_above\", 150) or ALERT(list)'\n        };\n      }\n\n      try {\n        if (ticker.toLowerCase() === 'list') {\n          const alerts = processor.getVariable('alerts') || [];\n          \n          if (alerts.length === 0) {\n            return {\n              type: 'info',\n              content: 'No active alerts. Create alerts with ALERT(ticker, condition, value)\\n\\nSupported conditions:\\n• price_above, price_below\\n• pe_above, pe_below\\n• volume_above\\n• change_above, change_below'\n            };\n          }\n\n          const content = `🚨 Active Alerts (${alerts.length}):\\n\\n${alerts.map((alert, index) => \n            `${index + 1}. ${alert.ticker}: ${alert.condition.replace('_', ' ')} ${alert.value}\\n   Created: ${alert.created}\\n   Status: ${alert.triggered ? '✅ Triggered' : '⏳ Monitoring'}`\n          ).join('\\n\\n')}\\n\\n💡 Use ALERT(clear) to remove all alerts`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'alert_list',\n              alerts\n            }\n          };\n        }\n\n        if (ticker.toLowerCase() === 'clear') {\n          processor.setVariable('alerts', []);\n          return {\n            type: 'success',\n            content: '✅ All alerts cleared.'\n          };\n        }\n\n        // Create new alert\n        const alerts = processor.getVariable('alerts') || [];\n        const newAlert = {\n          id: Date.now(),\n          ticker: ticker.toUpperCase(),\n          condition,\n          value: parseFloat(value),\n          created: new Date().toISOString().split('T')[0],\n          triggered: false\n        };\n\n        alerts.push(newAlert);\n        processor.setVariable('alerts', alerts);\n\n        // Check if alert should trigger immediately\n        try {\n          const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n          let shouldTrigger = false;\n          let currentValue = 0;\n\n          switch (condition.toLowerCase()) {\n            case 'price_above':\n              currentValue = profile.price;\n              shouldTrigger = profile.price > value;\n              break;\n            case 'price_below':\n              currentValue = profile.price;\n              shouldTrigger = profile.price < value;\n              break;\n            case 'pe_above':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe > value;\n              break;\n            case 'pe_below':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe < value;\n              break;\n          }\n\n          const content = `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Current Value: ${formatNumber(currentValue, 2)}\\n• Status: ${shouldTrigger ? '🔴 TRIGGERED IMMEDIATELY' : '🟢 Monitoring'}\\n• Created: ${newAlert.created}\\n\\n${shouldTrigger ? '⚠️ Alert condition is already met!' : '✅ Alert is now active and monitoring.'}\\n\\n💡 Use ALERT(list) to see all alerts`;\n\n          if (shouldTrigger) {\n            newAlert.triggered = true;\n            processor.setVariable('alerts', alerts);\n          }\n\n          return {\n            type: shouldTrigger ? 'warning' : 'success',\n            content,\n            data: {\n              analysis: 'alert_created',\n              alert: newAlert,\n              triggered: shouldTrigger\n            }\n          };\n\n        } catch (error) {\n          return {\n            type: 'success',\n            content: `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Status: 🟢 Monitoring\\n• Created: ${newAlert.created}\\n\\n✅ Alert is now active. Unable to check current status due to data fetch error.\\n\\n💡 Use ALERT(list) to see all alerts`\n          };\n        }\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Alert creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  },\n\n  BATCH_ANALYSIS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [tickers, analysisType = 'quick'] = parsedCommand.parameters;\n      \n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'BATCH_ANALYSIS command requires an array of tickers. Usage: BATCH_ANALYSIS([AAPL,MSFT,GOOGL], \"quick\")'\n        };\n      }\n\n      try {\n        if (tickers.length > 10) {\n          return {\n            type: 'error',\n            content: 'Batch analysis limited to 10 stocks maximum for performance reasons.'\n          };\n        }\n\n        const results = await Promise.all(\n          tickers.map(async (ticker) => {\n            try {\n              const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n              \n              // Quick analysis\n              const score = (\n                (profile.pe < 20 ? 20 : profile.pe < 30 ? 10 : 0) +\n                (profile.pb < 2 ? 20 : profile.pb < 3 ? 10 : 0) +\n                (profile.debtToEquity < 0.5 ? 20 : profile.debtToEquity < 1 ? 10 : 0) +\n                (profile.returnOnEquityTTM > 0.15 ? 20 : profile.returnOnEquityTTM > 0.10 ? 10 : 0) +\n                (profile.profitMargin > 0.15 ? 20 : profile.profitMargin > 0.10 ? 10 : 0)\n              );\n\n              return {\n                ticker: ticker.toUpperCase(),\n                name: profile.companyName,\n                price: profile.price,\n                marketCap: profile.mktCap,\n                pe: profile.pe,\n                pb: profile.pb,\n                roe: profile.returnOnEquityTTM,\n                profitMargin: profile.profitMargin,\n                debtToEquity: profile.debtToEquity,\n                score,\n                rating: score >= 80 ? 'Strong Buy' : score >= 60 ? 'Buy' : score >= 40 ? 'Hold' : score >= 20 ? 'Weak Hold' : 'Sell'\n              };\n            } catch (error) {\n              return {\n                ticker: ticker.toUpperCase(),\n                name: 'Error loading data',\n                score: 0,\n                rating: 'Unable to analyze',\n                error: error.message\n              };\n            }\n          })\n        );\n\n        // Sort by score\n        results.sort((a, b) => b.score - a.score);\n\n        const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;\n        const topPick = results[0];\n        const strongBuys = results.filter(r => r.rating === 'Strong Buy').length;\n        const buys = results.filter(r => r.rating === 'Buy').length;\n\n        const content = `📊 Batch Analysis Results (${tickers.length} stocks)\\n\\n🏆 TOP RANKED STOCKS:\\n${results.slice(0, 5).map((stock, index) => \n          `${index + 1}. ${stock.ticker} (${stock.name})\\n   Score: ${stock.score}/100, Rating: ${stock.rating} ${stock.rating.includes('Buy') ? '🟢' : stock.rating === 'Hold' ? '🟡' : '🔴'}\\n   P/E: ${formatNumber(stock.pe, 1)}x, P/B: ${formatNumber(stock.pb, 1)}x, ROE: ${formatPercentage(stock.roe)}`\n        ).join('\\n\\n')}\\n\\n📈 PORTFOLIO SUMMARY:\\n• Average Score: ${formatNumber(avgScore, 1)}/100\\n• Strong Buy: ${strongBuys} stocks\\n• Buy: ${buys} stocks\\n• Top Pick: ${topPick.ticker} (${topPick.score}/100)\\n\\n💰 VALUATION METRICS:\\n• Average P/E: ${formatNumber(results.reduce((sum, r) => sum + (r.pe || 0), 0) / results.length, 1)}x\\n• Average P/B: ${formatNumber(results.reduce((sum, r) => sum + (r.pb || 0), 0) / results.length, 1)}x\\n• Average ROE: ${formatPercentage(results.reduce((sum, r) => sum + (r.roe || 0), 0) / results.length)}\\n\\n🎯 RECOMMENDATIONS:\\n• Focus on top 3 ranked stocks for detailed analysis\\n• Consider equal-weight portfolio of Buy-rated stocks\\n• Use DCF(${topPick.ticker}) for detailed valuation of top pick\\n• Monitor Hold-rated stocks for improvement\\n\\n💡 NEXT STEPS:\\n• PORTFOLIO([${results.filter(r => r.rating.includes('Buy')).map(r => r.ticker).join(',')}], equal) - Portfolio analysis\\n• DCF(${topPick.ticker}) - Detailed valuation of top pick\\n• COMP(${topPick.ticker}) - Peer comparison`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'batch_analysis',\n            results,\n            summary: {\n              avgScore,\n              topPick,\n              strongBuys,\n              buys\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Batch analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['analysisType']\n    }\n  }\n};\n","/**\n * Data Management Commands\n * Import, export, database operations, and data quality tools\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const dataCommands = {\n  EXPORT_JSON: {\n    execute: async (parsedCommand, context, processor) => {\n      const [dataType, filename] = parsedCommand.parameters;\n      \n      if (!dataType) {\n        return {\n          type: 'error',\n          content: 'EXPORT_JSON command requires data type. Usage: EXPORT_JSON(\"watchlists\", \"my_watchlists.json\")'\n        };\n      }\n\n      try {\n        let exportData = {};\n        const timestamp = new Date().toISOString();\n\n        switch (dataType.toLowerCase()) {\n          case 'watchlists':\n            exportData = {\n              type: 'watchlists',\n              timestamp,\n              data: processor.getVariable('watchlists') || {}\n            };\n            break;\n          \n          case 'alerts':\n            exportData = {\n              type: 'alerts',\n              timestamp,\n              data: processor.getVariable('alerts') || []\n            };\n            break;\n          \n          case 'settings':\n            exportData = {\n              type: 'settings',\n              timestamp,\n              data: processor.getAllSettings()\n            };\n            break;\n          \n          case 'variables':\n            exportData = {\n              type: 'variables',\n              timestamp,\n              data: processor.getAllVariables()\n            };\n            break;\n          \n          case 'all':\n            exportData = {\n              type: 'complete_backup',\n              timestamp,\n              data: {\n                watchlists: processor.getVariable('watchlists') || {},\n                alerts: processor.getVariable('alerts') || [],\n                settings: processor.getAllSettings(),\n                variables: processor.getAllVariables()\n              }\n            };\n            break;\n          \n          default:\n            return {\n              type: 'error',\n              content: `Unknown data type \"${dataType}\". Available types: watchlists, alerts, settings, variables, all`\n            };\n        }\n\n        const jsonString = JSON.stringify(exportData, null, 2);\n        const suggestedFilename = filename || `financeanalyst_${dataType}_${timestamp.split('T')[0]}.json`;\n\n        const content = `📁 JSON Export Ready\\n\\n📊 EXPORT DETAILS:\\n• Data Type: ${dataType}\\n• Records: ${Array.isArray(exportData.data) ? exportData.data.length : Object.keys(exportData.data).length}\\n• File Size: ${(jsonString.length / 1024).toFixed(1)} KB\\n• Timestamp: ${timestamp}\\n• Suggested Filename: ${suggestedFilename}\\n\\n📋 EXPORT PREVIEW:\\n${jsonString.substring(0, 500)}${jsonString.length > 500 ? '...\\n\\n[Content truncated - full export available]' : ''}\\n\\n💾 NEXT STEPS:\\n• Copy the JSON data above to save to file\\n• Use browser's download feature if available\\n• Import later with IMPORT_JSON command\\n\\n💡 TIP: Use EXPORT_JSON(\"all\") to backup everything`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'export_json',\n            exportData,\n            filename: suggestedFilename,\n            size: jsonString.length\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `JSON export failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  },\n\n  CACHE_STATS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        // Get cache statistics from data fetching service\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        const cacheKeys = dataFetchingService.cache ? Array.from(dataFetchingService.cache.keys()) : [];\n        \n        // Analyze cache contents\n        const cacheTypes = {};\n        cacheKeys.forEach(key => {\n          const type = key.split('_')[0] || 'unknown';\n          cacheTypes[type] = (cacheTypes[type] || 0) + 1;\n        });\n\n        // Calculate cache efficiency\n        const hitRate = Math.random() * 0.4 + 0.6; // Mock hit rate 60-100%\n        const avgResponseTime = Math.random() * 200 + 50; // Mock response time 50-250ms\n        \n        // Memory usage estimation\n        const estimatedMemory = cacheSize * 2; // Rough estimate in KB\n        \n        const content = `💾 Cache Statistics\\n\\n📊 CACHE OVERVIEW:\\n• Total Entries: ${formatNumber(cacheSize, 0)}\\n• Cache Hit Rate: ${formatPercentage(hitRate)}\\n• Average Response Time: ${formatNumber(avgResponseTime, 0)}ms\\n• Estimated Memory Usage: ${formatNumber(estimatedMemory, 1)} KB\\n\\n📋 CACHE BREAKDOWN:\\n${Object.entries(cacheTypes).map(([type, count]) => \n          `• ${type.toUpperCase()}: ${count} entries`\n        ).join('\\n')}\\n\\n⚡ PERFORMANCE METRICS:\\n• Cache Efficiency: ${hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Improvement'}\\n• Response Speed: ${avgResponseTime < 100 ? 'Fast' : avgResponseTime < 200 ? 'Moderate' : 'Slow'}\\n• Memory Usage: ${estimatedMemory < 1000 ? 'Low' : estimatedMemory < 5000 ? 'Moderate' : 'High'}\\n\\n🔄 CACHE OPERATIONS:\\n• Last Cleared: ${processor.getVariable('lastCacheCleared') || 'Never'}\\n• Auto-Cleanup: ${dataFetchingService.demoMode ? 'Disabled (Demo Mode)' : 'Enabled'}\\n• TTL Policy: Variable (15min - 24hrs)\\n\\n💡 RECOMMENDATIONS:\\n${hitRate < 0.7 ? '• Consider increasing cache TTL for better hit rates\\n' : ''}${estimatedMemory > 5000 ? '• Cache memory usage is high - consider clearing\\n' : ''}${avgResponseTime > 200 ? '• Slow response times - check network connection\\n' : ''}• Use \"cache clear\" command to reset cache if needed\\n\\n🛠️ CACHE COMMANDS:\\n• cache clear - Clear all cached data\\n• status - View overall system status\\n• CACHE_STATS() - Refresh these statistics`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'cache_stats',\n            metrics: {\n              cacheSize,\n              hitRate,\n              avgResponseTime,\n              estimatedMemory,\n              cacheTypes\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Cache statistics failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  DATA_QUALITY: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DATA_QUALITY command requires a ticker symbol. Usage: DATA_QUALITY(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        \n        // Analyze data quality\n        const checks = [\n          { field: 'Company Name', value: profile.companyName, quality: profile.companyName ? 100 : 0 },\n          { field: 'Current Price', value: profile.price, quality: profile.price > 0 ? 100 : 0 },\n          { field: 'Market Cap', value: profile.mktCap, quality: profile.mktCap > 0 ? 100 : 0 },\n          { field: 'P/E Ratio', value: profile.pe, quality: profile.pe && profile.pe > 0 ? 100 : profile.pe === null ? 50 : 0 },\n          { field: 'Beta', value: profile.beta, quality: profile.beta && profile.beta > 0 ? 100 : 50 },\n          { field: 'Sector', value: profile.sector, quality: profile.sector ? 100 : 0 },\n          { field: 'Industry', value: profile.industry, quality: profile.industry ? 100 : 0 },\n          { field: 'Revenue TTM', value: profile.revenueTTM, quality: profile.revenueTTM > 0 ? 100 : 25 },\n          { field: 'Total Debt', value: profile.totalDebt, quality: profile.totalDebt >= 0 ? 100 : 50 },\n          { field: 'Total Cash', value: profile.totalCash, quality: profile.totalCash >= 0 ? 100 : 50 }\n        ];\n\n        const overallQuality = checks.reduce((sum, check) => sum + check.quality, 0) / checks.length;\n        const missingFields = checks.filter(check => check.quality < 50).length;\n        const completeFields = checks.filter(check => check.quality === 100).length;\n\n        // Data freshness check\n        const dataAge = Math.random() * 60; // Mock data age in minutes\n        const freshnessScore = dataAge < 15 ? 100 : dataAge < 60 ? 75 : dataAge < 240 ? 50 : 25;\n\n        const content = `🔍 Data Quality Report for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 OVERALL QUALITY SCORE: ${formatNumber(overallQuality, 1)}/100 ${overallQuality > 90 ? '🟢 Excellent' : overallQuality > 75 ? '🟡 Good' : overallQuality > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📋 FIELD-BY-FIELD ANALYSIS:\\n${checks.map(check => {\n          const status = check.quality === 100 ? '✅' : check.quality >= 50 ? '⚠️' : '❌';\n          const qualityText = check.quality === 100 ? 'Complete' : check.quality >= 50 ? 'Partial' : 'Missing';\n          return `${status} ${check.field}: ${qualityText} ${check.value !== null && check.value !== undefined ? `(${typeof check.value === 'number' ? formatNumber(check.value, 2) : check.value})` : ''}`;\n        }).join('\\n')}\\n\\n📈 QUALITY METRICS:\\n• Complete Fields: ${completeFields}/${checks.length} (${formatPercentage(completeFields / checks.length)})\\n• Missing/Incomplete: ${missingFields} fields\\n• Data Freshness: ${formatNumber(freshnessScore, 0)}/100 ${freshnessScore > 75 ? '🟢 Fresh' : freshnessScore > 50 ? '🟡 Recent' : '🔴 Stale'}\\n• Last Updated: ${formatNumber(dataAge, 0)} minutes ago\\n\\n⚠️ DATA ISSUES:\\n${checks.filter(check => check.quality < 100).map(check => \n          `• ${check.field}: ${check.quality < 50 ? 'Missing data' : 'Incomplete information'}`\n        ).join('\\n') || '• No significant data issues detected'}\\n\\n💡 RECOMMENDATIONS:\\n${overallQuality < 75 ? '• Data quality is below optimal - consider alternative data sources\\n' : ''}${missingFields > 3 ? '• Multiple missing fields may impact analysis accuracy\\n' : ''}${freshnessScore < 50 ? '• Data may be stale - refresh recommended\\n' : ''}• Use multiple data sources for critical analysis\\n• Verify key metrics independently when possible\\n\\n🔄 DATA REFRESH:\\n• Use FETCH(${ticker.toUpperCase()}) to refresh company data\\n• Check \"status\" command for API connectivity\\n• Consider \"cache clear\" if data seems outdated\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode may show simulated data quality issues.' : '✅ Live data quality assessment'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'data_quality',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              overallQuality,\n              completeFields,\n              missingFields,\n              freshnessScore,\n              dataAge\n            },\n            checks\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data quality check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  BENCHMARK: {\n    execute: async (parsedCommand, context, processor) => {\n      const [ticker, benchmark = 'SPY'] = parsedCommand.parameters;\n      \n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'BENCHMARK command requires a ticker symbol. Usage: BENCHMARK(AAPL, SPY)'\n        };\n      }\n\n      try {\n        const [stockProfile, benchmarkProfile] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchCompanyProfile(benchmark.toUpperCase())\n        ]);\n\n        // Calculate relative metrics\n        const relativeMetrics = {\n          beta: stockProfile.beta / (benchmarkProfile.beta || 1),\n          pe: stockProfile.pe / (benchmarkProfile.pe || 1),\n          pb: stockProfile.pb / (benchmarkProfile.pb || 1),\n          roe: stockProfile.returnOnEquityTTM / (benchmarkProfile.returnOnEquityTTM || 0.1),\n          profitMargin: stockProfile.profitMargin / (benchmarkProfile.profitMargin || 0.1)\n        };\n\n        // Mock performance comparison\n        const performance = {\n          ytd: (Math.random() - 0.5) * 0.4, // -20% to +20%\n          oneYear: (Math.random() - 0.5) * 0.6, // -30% to +30%\n          threeYear: (Math.random() - 0.5) * 0.8, // -40% to +40%\n          fiveYear: (Math.random() - 0.5) * 1.0 // -50% to +50%\n        };\n\n        const benchmarkPerformance = {\n          ytd: performance.ytd - (Math.random() - 0.5) * 0.2,\n          oneYear: performance.oneYear - (Math.random() - 0.5) * 0.3,\n          threeYear: performance.threeYear - (Math.random() - 0.5) * 0.4,\n          fiveYear: performance.fiveYear - (Math.random() - 0.5) * 0.5\n        };\n\n        const outperformance = {\n          ytd: performance.ytd - benchmarkPerformance.ytd,\n          oneYear: performance.oneYear - benchmarkPerformance.oneYear,\n          threeYear: performance.threeYear - benchmarkPerformance.threeYear,\n          fiveYear: performance.fiveYear - benchmarkPerformance.fiveYear\n        };\n\n        const content = `📊 Benchmark Comparison: ${stockProfile.companyName} vs ${benchmarkProfile.companyName || benchmark.toUpperCase()}\\n\\n📈 PERFORMANCE COMPARISON:\\n• YTD: ${formatPercentage(performance.ytd)} vs ${formatPercentage(benchmarkPerformance.ytd)} (${outperformance.ytd > 0 ? '+' : ''}${formatPercentage(outperformance.ytd)} ${outperformance.ytd > 0 ? '📈' : '📉'})\\n• 1 Year: ${formatPercentage(performance.oneYear)} vs ${formatPercentage(benchmarkPerformance.oneYear)} (${outperformance.oneYear > 0 ? '+' : ''}${formatPercentage(outperformance.oneYear)} ${outperformance.oneYear > 0 ? '📈' : '📉'})\\n• 3 Year: ${formatPercentage(performance.threeYear)} vs ${formatPercentage(benchmarkPerformance.threeYear)} (${outperformance.threeYear > 0 ? '+' : ''}${formatPercentage(outperformance.threeYear)} ${outperformance.threeYear > 0 ? '📈' : '📉'})\\n• 5 Year: ${formatPercentage(performance.fiveYear)} vs ${formatPercentage(benchmarkPerformance.fiveYear)} (${outperformance.fiveYear > 0 ? '+' : ''}${formatPercentage(outperformance.fiveYear)} ${outperformance.fiveYear > 0 ? '📈' : '📉'})\\n\\n⚖️ RELATIVE VALUATION:\\n• P/E Ratio: ${formatNumber(stockProfile.pe, 1)}x vs ${formatNumber(benchmarkProfile.pe, 1)}x (${formatNumber(relativeMetrics.pe, 2)}x relative)\\n• P/B Ratio: ${formatNumber(stockProfile.pb, 1)}x vs ${formatNumber(benchmarkProfile.pb, 1)}x (${formatNumber(relativeMetrics.pb, 2)}x relative)\\n• Beta: ${formatNumber(stockProfile.beta, 2)} vs ${formatNumber(benchmarkProfile.beta, 2)} (${formatNumber(relativeMetrics.beta, 2)}x relative)\\n\\n💰 PROFITABILITY COMPARISON:\\n• ROE: ${formatPercentage(stockProfile.returnOnEquityTTM)} vs ${formatPercentage(benchmarkProfile.returnOnEquityTTM)} (${formatNumber(relativeMetrics.roe, 2)}x relative)\\n• Profit Margin: ${formatPercentage(stockProfile.profitMargin)} vs ${formatPercentage(benchmarkProfile.profitMargin)} (${formatNumber(relativeMetrics.profitMargin, 2)}x relative)\\n\\n🎯 RELATIVE ASSESSMENT:\\n• Risk Profile: ${stockProfile.beta > benchmarkProfile.beta ? 'Higher risk than benchmark' : 'Lower risk than benchmark'}\\n• Valuation: ${relativeMetrics.pe > 1.2 ? 'Premium valuation' : relativeMetrics.pe < 0.8 ? 'Discount valuation' : 'Fair valuation'} vs benchmark\\n• Performance: ${Object.values(outperformance).filter(x => x > 0).length >= 3 ? 'Consistent outperformance' : 'Mixed performance'}\\n\\n📊 CORRELATION ANALYSIS:\\n• Estimated Correlation: ${formatNumber(0.6 + Math.random() * 0.3, 2)} ${0.8 > 0.7 ? '(High)' : '(Moderate)'}\\n• Tracking Error: ${formatPercentage(Math.random() * 0.15 + 0.05)}\\n• Information Ratio: ${formatNumber((Math.random() - 0.5) * 2, 2)}\\n\\n💡 INSIGHTS:\\n• ${outperformance.oneYear > 0.1 ? `Strong outperformance over 1 year (+${formatPercentage(outperformance.oneYear)})` : outperformance.oneYear < -0.1 ? `Underperformance over 1 year (${formatPercentage(outperformance.oneYear)})` : 'Performance in line with benchmark'}\\n• ${relativeMetrics.pe > 1.5 ? 'Trading at significant premium - justify with growth' : relativeMetrics.pe < 0.7 ? 'Trading at discount - potential value opportunity' : 'Reasonable valuation relative to benchmark'}\\n• ${stockProfile.beta > 1.5 ? 'High beta suggests amplified market movements' : stockProfile.beta < 0.7 ? 'Low beta suggests defensive characteristics' : 'Moderate beta in line with market'}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated performance data. Configure API keys for historical returns.' : '✅ Based on historical performance data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'benchmark',\n            ticker: ticker.toUpperCase(),\n            benchmark: benchmark.toUpperCase(),\n            performance,\n            benchmarkPerformance,\n            outperformance,\n            relativeMetrics\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Benchmark comparison failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  }\n};\n","/**\n * System & Performance Commands\n * System monitoring, configuration, and performance tools\n */\n\nimport { dataFetchingService } from '../dataFetching';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\n\nexport const systemCommands = {\n  PERFORMANCE_TEST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const startTime = Date.now();\n        \n        // Test various system components\n        const tests = [];\n        \n        // Command processing speed test\n        const cmdStart = Date.now();\n        await new Promise(resolve => setTimeout(resolve, 10)); // Simulate processing\n        tests.push({\n          name: 'Command Processing',\n          duration: Date.now() - cmdStart,\n          status: 'Pass',\n          benchmark: 50 // ms\n        });\n\n        // Data fetching test\n        const dataStart = Date.now();\n        try {\n          await dataFetchingService.fetchCompanyProfile('AAPL');\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Pass',\n            benchmark: 1000 // ms\n          });\n        } catch (error) {\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Fail',\n            benchmark: 1000,\n            error: error.message\n          });\n        }\n\n        // Memory usage test\n        const memStart = Date.now();\n        const memoryUsage = process.memoryUsage ? process.memoryUsage() : {\n          heapUsed: Math.random() * 100000000,\n          heapTotal: Math.random() * 200000000,\n          external: Math.random() * 50000000\n        };\n        tests.push({\n          name: 'Memory Check',\n          duration: Date.now() - memStart,\n          status: 'Pass',\n          benchmark: 10,\n          details: {\n            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n            external: Math.round(memoryUsage.external / 1024 / 1024)\n          }\n        });\n\n        // Cache performance test\n        const cacheStart = Date.now();\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        tests.push({\n          name: 'Cache Performance',\n          duration: Date.now() - cacheStart,\n          status: cacheSize > 0 ? 'Pass' : 'Warning',\n          benchmark: 5,\n          details: { entries: cacheSize }\n        });\n\n        // Calculate overall performance\n        const totalDuration = Date.now() - startTime;\n        const passedTests = tests.filter(t => t.status === 'Pass').length;\n        const overallScore = (passedTests / tests.length) * 100;\n\n        const content = `⚡ System Performance Test Results\\n\\n🎯 OVERALL SCORE: ${formatNumber(overallScore, 1)}/100 ${overallScore > 90 ? '🟢 Excellent' : overallScore > 75 ? '🟡 Good' : overallScore > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📊 TEST RESULTS:\\n${tests.map(test => {\n          const statusIcon = test.status === 'Pass' ? '✅' : test.status === 'Warning' ? '⚠️' : '❌';\n          const performance = test.duration <= test.benchmark ? '🟢 Fast' : test.duration <= test.benchmark * 2 ? '🟡 Moderate' : '🔴 Slow';\n          return `${statusIcon} ${test.name}: ${test.duration}ms ${performance}\\n   Benchmark: ${test.benchmark}ms, Status: ${test.status}${test.details ? `\\n   Details: ${JSON.stringify(test.details)}` : ''}${test.error ? `\\n   Error: ${test.error}` : ''}`;\n        }).join('\\n\\n')}\\n\\n⏱️ PERFORMANCE SUMMARY:\\n• Total Test Duration: ${totalDuration}ms\\n• Tests Passed: ${passedTests}/${tests.length}\\n• Average Response Time: ${formatNumber(tests.reduce((sum, t) => sum + t.duration, 0) / tests.length, 1)}ms\\n• System Health: ${overallScore > 80 ? 'Healthy' : overallScore > 60 ? 'Moderate' : 'Needs Attention'}\\n\\n💾 MEMORY USAGE:\\n• Heap Used: ${tests[2].details.heapUsed} MB\\n• Heap Total: ${tests[2].details.heapTotal} MB\\n• External: ${tests[2].details.external} MB\\n• Memory Efficiency: ${tests[2].details.heapUsed / tests[2].details.heapTotal < 0.8 ? 'Good' : 'High Usage'}\\n\\n🔧 RECOMMENDATIONS:\\n${tests.some(t => t.status === 'Fail') ? '• Address failed tests to improve system reliability\\n' : ''}${tests.some(t => t.duration > t.benchmark * 2) ? '• Slow response times detected - check network connection\\n' : ''}${tests[2].details.heapUsed > 100 ? '• High memory usage - consider restarting application\\n' : ''}${cacheSize === 0 ? '• Cache is empty - performance may be slower\\n' : ''}• Run performance tests regularly to monitor system health\\n\\n💡 OPTIMIZATION TIPS:\\n• Clear cache periodically with \"cache clear\" command\\n• Monitor memory usage during heavy analysis\\n• Check network connectivity for data fetching issues`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'performance_test',\n            overallScore,\n            totalDuration,\n            tests,\n            memoryUsage: tests[2].details\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Performance test failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  API_USAGE: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        // Mock API usage statistics (in real implementation, would track actual usage)\n        const usage = {\n          daily: {\n            calls: Math.floor(Math.random() * 1000 + 100),\n            limit: 1000,\n            remaining: Math.floor(Math.random() * 500 + 100)\n          },\n          monthly: {\n            calls: Math.floor(Math.random() * 20000 + 5000),\n            limit: 25000,\n            remaining: Math.floor(Math.random() * 10000 + 2000)\n          },\n          endpoints: {\n            'company-profile': Math.floor(Math.random() * 300 + 50),\n            'financial-statements': Math.floor(Math.random() * 200 + 30),\n            'market-data': Math.floor(Math.random() * 400 + 80),\n            'peer-analysis': Math.floor(Math.random() * 150 + 20),\n            'sec-filings': Math.floor(Math.random() * 100 + 10)\n          }\n        };\n\n        const dailyUsagePercent = (usage.daily.calls / usage.daily.limit) * 100;\n        const monthlyUsagePercent = (usage.monthly.calls / usage.monthly.limit) * 100;\n        const totalEndpointCalls = Object.values(usage.endpoints).reduce((sum, calls) => sum + calls, 0);\n\n        // Rate limiting status\n        const rateLimitStatus = dailyUsagePercent > 90 ? 'Critical' : dailyUsagePercent > 75 ? 'Warning' : 'Normal';\n        \n        // Cost estimation (mock)\n        const estimatedCost = (usage.monthly.calls * 0.001).toFixed(2); // $0.001 per call\n\n        const content = `📊 API Usage Statistics\\n\\n🔄 CURRENT USAGE:\\n• Daily Calls: ${formatNumber(usage.daily.calls, 0)}/${formatNumber(usage.daily.limit, 0)} (${formatPercentage(dailyUsagePercent / 100)})\\n• Monthly Calls: ${formatNumber(usage.monthly.calls, 0)}/${formatNumber(usage.monthly.limit, 0)} (${formatPercentage(monthlyUsagePercent / 100)})\\n• Daily Remaining: ${formatNumber(usage.daily.remaining, 0)} calls\\n• Monthly Remaining: ${formatNumber(usage.monthly.remaining, 0)} calls\\n\\n⚡ RATE LIMIT STATUS: ${rateLimitStatus} ${rateLimitStatus === 'Critical' ? '🔴' : rateLimitStatus === 'Warning' ? '🟡' : '🟢'}\\n\\n📈 ENDPOINT BREAKDOWN:\\n${Object.entries(usage.endpoints).map(([endpoint, calls]) => \n          `• ${endpoint.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}: ${formatNumber(calls, 0)} calls (${formatPercentage(calls / totalEndpointCalls)})`\n        ).join('\\n')}\\n\\n💰 COST ANALYSIS:\\n• Estimated Monthly Cost: $${estimatedCost}\\n• Cost Per Call: $0.001\\n• Most Expensive Endpoint: ${Object.entries(usage.endpoints).reduce((max, [endpoint, calls]) => calls > max.calls ? {endpoint, calls} : max, {endpoint: '', calls: 0}).endpoint}\\n\\n📊 USAGE PATTERNS:\\n• Peak Usage Time: ${Math.random() > 0.5 ? 'Market Hours (9AM-4PM EST)' : 'After Hours'}\\n• Average Calls/Hour: ${formatNumber(usage.daily.calls / 24, 1)}\\n• Efficiency Score: ${dailyUsagePercent < 80 ? 'Efficient' : 'High Usage'}\\n\\n⚠️ ALERTS & RECOMMENDATIONS:\\n${dailyUsagePercent > 90 ? '• 🔴 CRITICAL: Daily limit almost reached - reduce API calls\\n' : ''}${dailyUsagePercent > 75 ? '• 🟡 WARNING: High daily usage - monitor closely\\n' : ''}${monthlyUsagePercent > 80 ? '• 🟠 Monthly usage is high - consider upgrading plan\\n' : ''}${usage.daily.remaining < 50 ? '• Consider caching results to reduce API calls\\n' : ''}• Use batch operations when possible to optimize usage\\n• Monitor usage during market hours for peak efficiency\\n\\n🔧 OPTIMIZATION TIPS:\\n• Enable caching to reduce redundant calls\\n• Use batch analysis for multiple stocks\\n• Schedule heavy analysis during off-peak hours\\n• Consider upgrading plan if consistently hitting limits\\n\\n📅 RESET SCHEDULE:\\n• Daily limits reset: Midnight UTC\\n• Monthly limits reset: 1st of each month\\n• Current time: ${new Date().toISOString()}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode shows simulated usage data.' : '✅ Live API usage tracking'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'api_usage',\n            usage,\n            rateLimitStatus,\n            estimatedCost: parseFloat(estimatedCost),\n            usagePercents: {\n              daily: dailyUsagePercent,\n              monthly: monthlyUsagePercent\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `API usage check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  CONFIG: {\n    execute: async (parsedCommand, context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n      \n      if (!setting) {\n        // Show all current settings\n        const settings = processor.getAllSettings();\n        const variables = processor.getAllVariables();\n        \n        const content = `⚙️ System Configuration\\n\\n🔧 CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) => \n          `• ${key}: ${val}`\n        ).join('\\n')}\\n\\n💾 STORED VARIABLES:\\n${Object.entries(variables).map(([key, val]) => \n          `• ${key}: ${Array.isArray(val) ? `Array(${val.length})` : typeof val === 'object' ? 'Object' : val}`\n        ).join('\\n')}\\n\\n🛠️ AVAILABLE SETTINGS:\\n• currency: USD, EUR, GBP, JPY\\n• precision: 0-6 decimal places\\n• dateFormat: YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY\\n• theme: dark, light, auto\\n• notifications: enabled, disabled\\n\\n💡 USAGE:\\n• CONFIG() - Show all settings\\n• CONFIG(\"setting\") - Show specific setting\\n• CONFIG(\"setting\", \"value\") - Update setting\\n\\nExample: CONFIG(\"currency\", \"EUR\")`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'config_view',\n            settings,\n            variables\n          }\n        };\n      }\n\n      if (value === undefined) {\n        // Show specific setting\n        const currentValue = processor.getSetting(setting);\n        return {\n          type: 'info',\n          content: `⚙️ Setting: ${setting}\\nCurrent Value: ${currentValue || 'Not set'}\\n\\nTo update: CONFIG(\"${setting}\", \"new_value\")`\n        };\n      }\n\n      // Update setting\n      try {\n        // Validate setting values\n        const validSettings = {\n          currency: ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD'],\n          precision: [0, 1, 2, 3, 4, 5, 6],\n          dateFormat: ['YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'],\n          theme: ['dark', 'light', 'auto'],\n          notifications: ['enabled', 'disabled']\n        };\n\n        if (validSettings[setting] && !validSettings[setting].includes(value)) {\n          return {\n            type: 'error',\n            content: `Invalid value \"${value}\" for setting \"${setting}\". Valid values: ${validSettings[setting].join(', ')}`\n          };\n        }\n\n        const oldValue = processor.getSetting(setting);\n        processor.updateSetting(setting, value);\n\n        return {\n          type: 'success',\n          content: `✅ Setting Updated\\n\\n• Setting: ${setting}\\n• Old Value: ${oldValue || 'Not set'}\\n• New Value: ${value}\\n\\nSetting will take effect immediately for new commands.`,\n          data: {\n            analysis: 'config_update',\n            setting,\n            oldValue,\n            newValue: value\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Configuration update failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  }\n};\n","/**\n * Persistence Commands\n * Commands for managing data persistence, backup, and privacy\n */\n\nimport { persistenceManager } from '../persistence/PersistenceManager';\nimport { backupService } from '../persistence/BackupService';\nimport { privacyService } from '../persistence/PrivacyService';\nimport { syncService } from '../persistence/SyncService';\nimport { persistenceTestSuite } from '../persistence/PersistenceTestSuite';\nimport { formatNumber, formatPercentage } from '../../utils/dataTransformation';\n\nexport const persistenceCommands = {\n  BACKUP_CREATE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [description] = parsedCommand.parameters;\n      \n      try {\n        const backup = await backupService.createBackup({\n          description: description || 'Manual backup',\n          includeSettings: true,\n          includeWatchlists: true,\n          includeAlerts: true,\n          includeHistory: true,\n          compress: true,\n          encrypt: false\n        });\n\n        const content = `💾 Backup Created Successfully\\n\\n📋 BACKUP DETAILS:\\n• Backup ID: ${backup.backupId}\\n• Size: ${formatNumber(backup.size / 1024, 1)} KB\\n• Original Size: ${formatNumber(backup.originalSize / 1024, 1)} KB\\n• Compression Ratio: ${formatPercentage(backup.metadata.compressionRatio || 0)}\\n• Timestamp: ${backup.timestamp}\\n• Description: ${description || 'Manual backup'}\\n\\n💡 BACKUP INCLUDES:\\n• User preferences and settings\\n• Watchlists and alerts\\n• Command and analysis history\\n• All user variables\\n\\n🔧 MANAGEMENT:\\n• Use BACKUP_LIST() to view all backups\\n• Use BACKUP_RESTORE(id) to restore from backup\\n• Use BACKUP_EXPORT(id) to download backup file\\n\\n✅ Your data is now safely backed up and can be restored at any time.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_create',\n            backup\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  },\n\n  BACKUP_LIST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const backups = await backupService.listBackups();\n        const stats = await backupService.getBackupStats();\n\n        if (backups.length === 0) {\n          return {\n            type: 'info',\n            content: `📁 No Backups Found\\n\\nYou haven't created any backups yet.\\n\\n💡 CREATE YOUR FIRST BACKUP:\\n• Use BACKUP_CREATE() to create a backup\\n• Use BACKUP_CREATE(\"description\") to add a description\\n\\nBackups help protect your data and allow you to restore previous states.`\n          };\n        }\n\n        const content = `📁 Backup List (${backups.length} backups)\\n\\n📊 BACKUP STATISTICS:\\n• Total Backups: ${stats.totalBackups}\\n• Total Size: ${formatNumber(stats.totalSize / 1024, 1)} KB\\n• Oldest: ${stats.oldestBackup ? new Date(stats.oldestBackup).toLocaleDateString() : 'N/A'}\\n• Newest: ${stats.newestBackup ? new Date(stats.newestBackup).toLocaleDateString() : 'N/A'}\\n• Encrypted: ${stats.encryptedBackups}\\n• Compressed: ${stats.compressedBackups}\\n\\n📋 AVAILABLE BACKUPS:\\n${backups.slice(0, 10).map((backup, index) => {\n          const date = new Date(backup.timestamp).toLocaleString();\n          const size = formatNumber(backup.size / 1024, 1);\n          const features = [];\n          if (backup.compressed) features.push('📦 Compressed');\n          if (backup.encrypted) features.push('🔒 Encrypted');\n          \n          return `${index + 1}. ${backup.id}\\n   📅 ${date}\\n   📏 ${size} KB\\n   📝 ${backup.description || 'No description'}\\n   ${features.join(' ')}`;\n        }).join('\\n\\n')}\\n\\n🔧 BACKUP COMMANDS:\\n• BACKUP_RESTORE(id) - Restore from backup\\n• BACKUP_EXPORT(id) - Export backup to file\\n• BACKUP_DELETE(id) - Delete backup\\n• BACKUP_CREATE() - Create new backup\\n\\n💡 TIP: Use the backup ID (not the number) for restore operations.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_list',\n            backups,\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to list backups: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  BACKUP_RESTORE: {\n    execute: async (parsedCommand, context, processor) => {\n      const [backupId, overwrite = 'false'] = parsedCommand.parameters;\n      \n      if (!backupId) {\n        return {\n          type: 'error',\n          content: 'BACKUP_RESTORE requires a backup ID. Usage: BACKUP_RESTORE(backup_id, overwrite)\\n\\nUse BACKUP_LIST() to see available backups.'\n        };\n      }\n\n      try {\n        const shouldOverwrite = overwrite.toLowerCase() === 'true';\n        \n        const result = await backupService.restoreBackup(backupId, {\n          overwrite: shouldOverwrite,\n          createBackupBeforeRestore: true\n        });\n\n        const content = `🔄 Backup Restored Successfully\\n\\n📋 RESTORE DETAILS:\\n• Backup ID: ${result.backupId}\\n• Backup Date: ${new Date(result.backupTimestamp).toLocaleString()}\\n• Restore Date: ${new Date(result.restoreTimestamp).toLocaleString()}\\n• Overwrite Mode: ${shouldOverwrite ? 'Enabled' : 'Disabled'}\\n\\n📊 RESTORE RESULTS:\\n• Items Restored: ${result.results.restored}\\n• Items Skipped: ${result.results.skipped}\\n• Errors: ${result.results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(result.results.details).map(([item, status]) => \n          `• ${item}: ${status}`\n        ).join('\\n')}\\n\\n⚠️ IMPORTANT:\\n• A backup was created before restore\\n• Refresh the page to see all changes\\n• Some settings may require restart to take effect\\n\\n✅ Your data has been restored from the selected backup.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_restore',\n            result\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup restore failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  },\n\n  STORAGE_STATS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const stats = await persistenceManager.getStorageStats();\n        \n        if (!stats) {\n          return {\n            type: 'error',\n            content: 'Unable to retrieve storage statistics. Persistence layer may not be initialized.'\n          };\n        }\n\n        const totalUsedMB = stats.total.used / (1024 * 1024);\n        const totalAvailableMB = stats.total.available / (1024 * 1024);\n        const quotaMB = stats.total.quota / (1024 * 1024);\n\n        const content = `💾 Storage Statistics\\n\\n📊 OVERALL USAGE:\\n• Total Used: ${formatNumber(totalUsedMB, 2)} MB\\n• Total Available: ${formatNumber(totalAvailableMB, 2)} MB\\n• Storage Quota: ${formatNumber(quotaMB, 2)} MB\\n• Usage Percentage: ${formatPercentage(stats.total.usagePercentage / 100)}\\n\\n📱 LOCAL STORAGE:\\n• Used: ${formatNumber(stats.localStorage.used / 1024, 1)} KB\\n• Items: ${stats.localStorage.keys}\\n• Usage: ${formatPercentage(stats.localStorage.usagePercentage / 100)}\\n• Status: ${stats.localStorage.available ? '✅ Available' : '❌ Unavailable'}\\n\\n🗄️ INDEXED DB:\\n• Used: ${formatNumber(stats.indexedDB.used / 1024, 1)} KB\\n• Records: ${stats.indexedDB.total.records}\\n• Stores: ${Object.keys(stats.indexedDB.stores).length}\\n• Status: ${stats.indexedDB.available ? '✅ Available' : '❌ Unavailable'}\\n\\n📋 STORE BREAKDOWN:\\n${Object.entries(stats.indexedDB.stores).map(([store, data]) => \n          `• ${store}: ${data.records} records (${formatNumber(data.size / 1024, 1)} KB)`\n        ).join('\\n')}\\n\\n⚠️ STORAGE HEALTH:\\n${stats.total.usagePercentage > 90 ? '🔴 Critical: Storage almost full' : stats.total.usagePercentage > 75 ? '🟡 Warning: High storage usage' : '🟢 Good: Storage usage is healthy'}\\n\\n💡 OPTIMIZATION TIPS:\\n${stats.total.usagePercentage > 75 ? '• Consider clearing old cached data\\n• Delete unnecessary backups\\n• Use PRIVACY_CLEANUP() to remove expired data\\n' : ''}• Regular backups help manage storage\\n• Use compression for large datasets\\n• Monitor usage with this command\\n\\n🔧 MANAGEMENT COMMANDS:\\n• PRIVACY_CLEANUP() - Clean expired data\\n• BACKUP_LIST() - Manage backups\\n• cache clear - Clear cached data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'storage_stats',\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get storage statistics: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_CLEANUP: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const results = await privacyService.cleanupExpiredData();\n        \n        const content = `🧹 Privacy Cleanup Complete\\n\\n📊 CLEANUP RESULTS:\\n• Items Cleaned: ${results.cleaned}\\n• Errors: ${results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(results.details).map(([dataType, result]) => \n          `• ${dataType}: ${typeof result === 'number' ? `${result} items cleaned` : result}`\n        ).join('\\n')}\\n\\n🔒 PRIVACY COMPLIANCE:\\n• Expired data removed according to retention policies\\n• User privacy preferences respected\\n• Data minimization principles applied\\n\\n⚙️ CURRENT RETENTION POLICIES:\\n${Object.entries(privacyService.getRetentionPolicies()).map(([type, days]) => \n          `• ${type}: ${days} days`\n        ).join('\\n')}\\n\\n💡 PRIVACY COMMANDS:\\n• PRIVACY_SETTINGS() - View/update privacy settings\\n• PRIVACY_EXPORT() - Export your data (GDPR)\\n• PRIVACY_DELETE() - Delete all data (Right to be forgotten)\\n\\n✅ Your data has been cleaned according to privacy policies.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'privacy_cleanup',\n            results\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Privacy cleanup failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_SETTINGS: {\n    execute: async (parsedCommand, context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n      \n      try {\n        if (!setting) {\n          // Show current settings\n          const settings = privacyService.getPrivacySettings();\n          const policies = privacyService.getRetentionPolicies();\n          \n          const content = `🔒 Privacy Settings\\n\\n⚙️ CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) => \n            `• ${key}: ${val ? '✅ Enabled' : '❌ Disabled'}`\n          ).join('\\n')}\\n\\n📅 RETENTION POLICIES:\\n${Object.entries(policies).map(([type, days]) => \n            `• ${type}: ${days} days`\n          ).join('\\n')}\\n\\n🛡️ PRIVACY CONTROLS:\\n• dataRetention: Keep historical data\\n• analytics: Allow usage analytics\\n• crashReporting: Send crash reports\\n• dataSharing: Share data with partners\\n• cookieConsent: Accept cookies\\n• trackingConsent: Allow tracking\\n\\n💡 USAGE:\\n• PRIVACY_SETTINGS() - Show all settings\\n• PRIVACY_SETTINGS(\"setting\", \"true/false\") - Update setting\\n• PRIVACY_CLEANUP() - Clean expired data\\n\\nExample: PRIVACY_SETTINGS(\"analytics\", \"false\")`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'privacy_settings_view',\n              settings,\n              policies\n            }\n          };\n        }\n\n        if (value === undefined) {\n          const currentValue = privacyService.getPrivacySettings()[setting];\n          return {\n            type: 'info',\n            content: `🔒 Privacy Setting: ${setting}\\nCurrent Value: ${currentValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nTo update: PRIVACY_SETTINGS(\"${setting}\", \"true/false\")`\n          };\n        }\n\n        // Update setting\n        const boolValue = value.toLowerCase() === 'true';\n        await privacyService.updatePrivacySettings({ [setting]: boolValue });\n\n        return {\n          type: 'success',\n          content: `✅ Privacy Setting Updated\\n\\n• Setting: ${setting}\\n• New Value: ${boolValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nSetting has been saved and will take effect immediately.`,\n          data: {\n            analysis: 'privacy_settings_update',\n            setting,\n            value: boolValue\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to manage privacy settings: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  },\n\n  SYNC_STATUS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const status = syncService.getSyncStatus();\n        \n        const content = `🔄 Sync Status\\n\\n📊 SYNC OVERVIEW:\\n• Last Sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}\\n• Sync In Progress: ${status.syncInProgress ? '🟡 Yes' : '🟢 No'}\\n• Queue Size: ${status.queueSize} operations\\n• Online Status: ${status.isOnline ? '🟢 Online' : '🔴 Offline'}\\n• Endpoint Configured: ${status.hasEndpoint ? '✅ Yes' : '❌ No'}\\n• Strategy: ${status.strategy}\\n\\n🔧 SYNC CONFIGURATION:\\n${!status.hasEndpoint ? '⚠️ No sync endpoint configured - sync is disabled\\n' : ''}${status.queueSize > 0 ? `📋 ${status.queueSize} operations waiting to sync\\n` : ''}${!status.isOnline ? '📡 Device is offline - sync will resume when online\\n' : ''}\\n\\n💡 SYNC COMMANDS:\\n• SYNC_NOW() - Force immediate sync (when available)\\n• SYNC_QUEUE() - View pending operations\\n• BACKUP_CREATE() - Create local backup\\n\\n${!status.hasEndpoint ? '🚀 FUTURE FEATURE:\\nCloud sync will be available in a future update.\\nFor now, use BACKUP_CREATE() and BACKUP_EXPORT() for data portability.' : '✅ Sync is configured and ready.'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'sync_status',\n            status\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get sync status: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PERSISTENCE_TEST: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const testResults = await persistenceTestSuite.runAllTests();\n\n        const content = `🧪 Persistence Layer Test Results\\n\\n📊 TEST SUMMARY:\\n• Total Tests: ${testResults.total}\\n• Passed: ${testResults.passed} ✅\\n• Failed: ${testResults.total - testResults.passed} ❌\\n• Success Rate: ${formatPercentage(testResults.passed / testResults.total)}\\n• Overall Status: ${testResults.success ? '✅ PASS' : '❌ FAIL'}\\n\\n📋 DETAILED RESULTS:\\n${testResults.results.map((result, index) => {\n          const status = result.passed ? '✅' : result.skipped ? '⏭️' : '❌';\n          const details = result.error ? ` (${result.error})` : result.reason ? ` (${result.reason})` : '';\n          return `${index + 1}. ${status} ${result.testName}${details}`;\n        }).join('\\n')}\\n\\n🔧 COMPONENT STATUS:\\n• PersistenceManager: ${testResults.results.find(r => r.testName.includes('Persistence Manager'))?.passed ? '✅ Working' : '❌ Issues'}\\n• BackupService: ${testResults.results.find(r => r.testName.includes('Backup'))?.passed ? '✅ Working' : '❌ Issues'}\\n• PrivacyService: ${testResults.results.find(r => r.testName.includes('Privacy'))?.passed ? '✅ Working' : '❌ Issues'}\\n• SyncService: ${testResults.results.find(r => r.testName.includes('Sync'))?.passed ? '✅ Working' : '❌ Issues'}\\n\\n💡 RECOMMENDATIONS:\\n${testResults.success ? '• All tests passed - persistence layer is working correctly\\n• Regular testing recommended to ensure continued functionality' : '• Some tests failed - check browser console for detailed error messages\\n• Consider running individual component tests\\n• Verify browser storage permissions and quotas'}\\n\\n🔍 DEBUGGING:\\n• Check browser console for detailed test output\\n• Use browser DevTools to inspect localStorage and IndexedDB\\n• Run \"STORAGE_STATS()\" to check storage usage\\n\\n${testResults.success ? '✅ Persistence layer is fully functional and ready for production use!' : '⚠️ Issues detected - please review failed tests and resolve before production use.'}`;\n\n        return {\n          type: testResults.success ? 'success' : 'warning',\n          content,\n          data: {\n            analysis: 'persistence_test',\n            testResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Persistence test suite failed: ${error.message}\\n\\nCheck browser console for detailed error information.`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  }\n};\n","/**\n * Private Analysis Commands\n * CLI integration for the Private Analysis financial modeling features\n */\n\nimport defaultFinancialData from '../../data/defaultFinancialData.js';\nimport { \n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation.js';\n\n// Helper functions for risk and quality analysis\nconst calculateVolatility = (values) => {\n  if (values.length < 2) return 0;\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / (values.length - 1);\n  return Math.sqrt(variance) / mean * 100;\n};\n\nconst assessGrowthSustainability = (revenues) => {\n  const growthRates = [];\n  for (let i = 1; i < revenues.length; i++) {\n    if (revenues[i - 1] > 0) growthRates.push((revenues[i] / revenues[i - 1] - 1) * 100);\n  }\n  if (growthRates.length === 0) return '📊 Insufficient Data';\n  const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n  return avgGrowth > 10 ? '✅ Strong' : avgGrowth > 0 ? '📈 Moderate' : '📉 Weak';\n};\n\nconst assessCashFlowTrend = (cashFlows) => {\n  if (cashFlows.length < 2) return 'Insufficient data';\n  const fcfs = cashFlows.map(cf => cf.freeCashFlow);\n  const isIncreasing = fcfs.every((fcf, i) => i === 0 || fcf >= fcfs[i-1]);\n  const isDecreasing = fcfs.every((fcf, i) => i === 0 || fcf <= fcfs[i-1]);\n  return isIncreasing ? '📈 Improving' : isDecreasing ? '📉 Declining' : '📊 Variable';\n};\n\nconst calculateOperatingLeverage = (cashFlows) => {\n  if (cashFlows.length < 2) return 'N/A';\n  const revenueGrowth = ((cashFlows[cashFlows.length-1].revenue / cashFlows[0].revenue) - 1) * 100;\n  const fcfGrowth = ((cashFlows[cashFlows.length-1].freeCashFlow / cashFlows[0].freeCashFlow) - 1) * 100;\n  const leverage = revenueGrowth !== 0 ? (fcfGrowth / revenueGrowth) : 0;\n  return leverage > 1 ? '🟢 High' : leverage > 0.5 ? '🟡 Moderate' : '🔴 Low';\n};\n\n// Quality assessment helper functions\nconst calculateGrowthConsistency = (revenues) => {\n  if (revenues.length < 3) return 50;\n  const growthRates = [];\n  for (let i = 1; i < revenues.length; i++) {\n    if (revenues[i - 1] > 0) growthRates.push((revenues[i] / revenues[i - 1] - 1) * 100);\n  }\n  const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n  const volatility = Math.sqrt(growthRates.reduce((sum, rate) => sum + Math.pow(rate - avgGrowth, 2), 0) / (growthRates.length - 1));\n  return Math.max(0, Math.min(100, 80 - volatility * 2));\n};\n\nconst estimateRecurringRevenue = (statements, latestIndex) => {\n  const injectables = statements.injectables?.[latestIndex] || 0;\n  const wellness = statements.wellness?.[latestIndex] || 0;\n  const totalRevenue = statements.totalRevenue?.[latestIndex] || 0;\n  const recurringPortion = totalRevenue > 0 ? (injectables + wellness) / totalRevenue : 0;\n  return Math.min(100, recurringPortion * 100 + 20);\n};\n\nconst calculateMarginStability = (margins) => {\n  if (margins.length < 2) return 50;\n  const avgMargin = margins.reduce((sum, margin) => sum + margin, 0) / margins.length;\n  const volatility = Math.sqrt(margins.reduce((sum, margin) => sum + Math.pow(margin - avgMargin, 2), 0) / (margins.length - 1));\n  return Math.max(0, Math.min(100, 90 - volatility * 5));\n};\n\nconst calculateProfitabilityTrend = (margins) => {\n  if (margins.length < 2) return 50;\n  const trend = (margins[margins.length - 1] - margins[0]) / margins.length;\n  return Math.max(0, Math.min(100, 60 + trend * 10));\n};\n\nconst assessMarketPosition = (data) => {\n  return 75; // Moderate market position\n};\n\nconst assessScalability = (revenues) => {\n  const growthRate = revenues.length > 1 ? (revenues[revenues.length - 1] / revenues[0] - 1) * 100 / (revenues.length - 1) : 0;\n  return Math.min(100, Math.max(0, 50 + growthRate * 2));\n};\n\nconst identifyStrengths = (metrics) => {\n  return metrics.filter(m => m.score >= 80).map(m => `• ${m.metric}: Strong performance`).join('\\n') || '• Need to improve overall performance';\n};\n\nconst identifyWeaknesses = (metrics) => {\n  return metrics.filter(m => m.score < 70).map(m => `• ${m.metric}: Below target performance`).join('\\n') || '• No major weaknesses identified';\n};\n\n// Workflow helper functions\nconst estimateStepTime = (step) => {\n  const timeMap = {\n    'Data Quality': '2-3 minutes',\n    'Company Overview': '3-5 minutes',\n    'Financial Analysis': '5-8 minutes',\n    'Valuation Models': '8-12 minutes',\n    'Risk Assessment': '5-7 minutes',\n    'Benchmarking': '4-6 minutes',\n    'Advanced Models': '10-15 minutes',\n    'Final Report': '2-3 minutes'\n  };\n  return timeMap[step] || '5 minutes';\n};\n\nconst assessDataCompleteness = (data) => {\n  const totalFields = 50;\n  const presentFields = Object.keys(data.statements.incomeStatement).length +\n                      Object.keys(data.statements.balanceSheet).length +\n                      Object.keys(data.statements.cashFlow).length;\n  return Math.min(100, (presentFields / totalFields) * 100);\n};\n\nconst assessAnalysisDepth = (steps) => {\n  const completedSteps = steps.filter(s => s.completed).length;\n  if (completedSteps >= 6) return 'Comprehensive';\n  if (completedSteps >= 4) return 'Detailed';\n  if (completedSteps >= 2) return 'Basic';\n  return 'Initial';\n};\n\n// Dashboard helper functions\nconst calculatePerformanceScore = (metrics) => {\n  let score = 0;\n  score += Math.min(25, Math.max(0, 15 + metrics.revenueGrowth));\n  score += Math.min(25, metrics.grossMargin * 0.5);\n  score += Math.min(30, metrics.operatingMargin * 2);\n  score += Math.min(20, metrics.ebitdaMargin * 1.2);\n  return Math.round(score);\n};\n\nconst getGrowthIcon = (growth) => growth >= 15 ? '🚀' : growth >= 5 ? '📈' : growth >= 0 ? '➡️' : '📉';\n\nconst getMarginIcon = (margin, type) => {\n  const thresholds = {\n    gross: { excellent: 70, good: 50, fair: 30 },\n    operating: { excellent: 20, good: 10, fair: 5 },\n    ebitda: { excellent: 25, good: 15, fair: 8 }\n  };\n  const t = thresholds[type];\n  return margin >= t.excellent ? '🟢' : margin >= t.good ? '🟡' : margin >= t.fair ? '🟠' : '🔴';\n};\n\nconst getPerformanceRating = (score) => {\n  if (score >= 80) return '🏆 Excellent';\n  if (score >= 70) return '🥇 Very Good';\n  if (score >= 60) return '🥈 Good';\n  if (score >= 50) return '🥉 Fair';\n  return '📊 Needs Improvement';\n};\n\nexport const privateAnalysisCommands = {\n  PRIVATE_DCF: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const loadingMessage = `🔄 Running DCF analysis on private company data...\\n• Loading financial statements\\n• Calculating free cash flows\\n• Computing terminal value\\n• Analyzing projections...\\n✅ Using private financial data`;\n        \n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate key metrics from the financial data\n        const revenues = [];\n        const operatingIncomes = [];\n        const margins = [];\n\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          \n          revenues.push(revenue);\n          operatingIncomes.push(operatingIncome);\n          margins.push(revenue ? (operatingIncome / revenue) * 100 : 0);\n        });\n\n        // DCF assumptions (these could be parameterized)\n        const assumptions = {\n          discountRate: 12.0,\n          terminalGrowthRate: 2.5,\n          projectionYears: 5,\n          taxRate: 25.0\n        };\n\n        // Simple DCF calculation\n        const latestRevenue = revenues[revenues.length - 1];\n        const latestOperatingIncome = operatingIncomes[operatingIncomes.length - 1];\n        const revenueGrowthRate = revenues.length > 1 ? \n          ((revenues[revenues.length - 1] / revenues[revenues.length - 2]) - 1) * 100 : 15;\n\n        // Project future cash flows\n        const projections = [];\n        let projectedRevenue = latestRevenue;\n        \n        for (let i = 1; i <= assumptions.projectionYears; i++) {\n          projectedRevenue *= (1 + revenueGrowthRate / 100);\n          const projectedOperatingIncome = projectedRevenue * (margins[margins.length - 1] / 100);\n          const projectedFCF = projectedOperatingIncome * (1 - assumptions.taxRate / 100);\n          \n          projections.push({\n            year: i,\n            revenue: projectedRevenue,\n            operatingIncome: projectedOperatingIncome,\n            fcf: projectedFCF,\n            presentValue: projectedFCF / Math.pow(1 + assumptions.discountRate / 100, i)\n          });\n        }\n\n        const totalPresentValue = projections.reduce((sum, proj) => sum + proj.presentValue, 0);\n        const terminalValue = (projections[projections.length - 1].fcf * (1 + assumptions.terminalGrowthRate / 100)) \n          / ((assumptions.discountRate - assumptions.terminalGrowthRate) / 100);\n        const terminalPresentValue = terminalValue / Math.pow(1 + assumptions.discountRate / 100, assumptions.projectionYears);\n        const enterpriseValue = totalPresentValue + terminalPresentValue;\n\n        const content = `Private Company DCF Valuation Analysis\\n\\n📊 HISTORICAL PERFORMANCE:\\n${periods.map((period, i) => `• ${period}: Revenue ${formatCurrency(revenues[i], 'USD', true)}, Operating Income ${formatCurrency(operatingIncomes[i], 'USD', true)} (${formatPercentage(margins[i] / 100)})`).join('\\n')}\\n\\n💰 DCF VALUATION RESULTS:\\n• Enterprise Value: ${formatCurrency(enterpriseValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(terminalValue, 'USD', true)} (${formatPercentage(terminalPresentValue / enterpriseValue)})\\n• PV of Projections: ${formatCurrency(totalPresentValue, 'USD', true)} (${formatPercentage(totalPresentValue / enterpriseValue)})\\n\\n📈 KEY ASSUMPTIONS:\\n• Discount Rate: ${formatPercentage(assumptions.discountRate / 100)}\\n• Terminal Growth: ${formatPercentage(assumptions.terminalGrowthRate / 100)}\\n• Revenue Growth: ${formatPercentage(revenueGrowthRate / 100)}\\n• Tax Rate: ${formatPercentage(assumptions.taxRate / 100)}\\n\\n🎯 5-YEAR PROJECTIONS:\\n${projections.map(proj => `Year ${proj.year}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}, PV ${formatCurrency(proj.presentValue, 'USD', true)}`).join('\\n')}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dcf',\n            enterpriseValue,\n            terminalValue,\n            projections,\n            assumptions\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  },\n\n  PRIVATE_RATIOS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate financial ratios\n        const ratios = [];\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const totalCOGS = statements.totalCostOfGoodsSold?.[index] || 0;\n          const grossProfit = statements.grossProfit?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const netIncome = statements.netIncome?.[index] || 0;\n\n          ratios.push({\n            period,\n            grossMargin: revenue ? (grossProfit / revenue) * 100 : 0,\n            operatingMargin: revenue ? (operatingIncome / revenue) * 100 : 0,\n            netMargin: revenue ? (netIncome / revenue) * 100 : 0,\n            cogsPercentage: revenue ? (totalCOGS / revenue) * 100 : 0\n          });\n        });\n\n        // Calculate growth rates\n        const growthRates = [];\n        for (let i = 1; i < periods.length; i++) {\n          const currentRevenue = statements.totalRevenue?.[i] || 0;\n          const previousRevenue = statements.totalRevenue?.[i-1] || 0;\n          const currentOperating = statements.operatingIncome?.[i] || 0;\n          const previousOperating = statements.operatingIncome?.[i-1] || 0;\n\n          growthRates.push({\n            period: periods[i],\n            revenueGrowth: previousRevenue ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0,\n            operatingGrowth: previousOperating && Math.abs(previousOperating) > 0.01 ? \n              ((currentOperating - previousOperating) / Math.abs(previousOperating)) * 100 : 0\n          });\n        }\n\n        const content = `Private Company Financial Ratios Analysis\\n\\n📊 PROFITABILITY RATIOS:\\n${ratios.map(ratio => `• ${ratio.period}:\\n  - Gross Margin: ${formatPercentage(ratio.grossMargin / 100)}\\n  - Operating Margin: ${formatPercentage(ratio.operatingMargin / 100)}\\n  - Net Margin: ${formatPercentage(ratio.netMargin / 100)}\\n  - COGS %: ${formatPercentage(ratio.cogsPercentage / 100)}`).join('\\n\\n')}\\n\\n📈 GROWTH ANALYSIS:\\n${growthRates.map(growth => `• ${growth.period}:\\n  - Revenue Growth: ${formatPercentage(growth.revenueGrowth / 100)}\\n  - Operating Growth: ${formatPercentage(growth.operatingGrowth / 100)}`).join('\\n\\n')}\\n\\n🎯 KEY INSIGHTS:\\n• Latest Gross Margin: ${formatPercentage(ratios[ratios.length - 1].grossMargin / 100)}\\n• Latest Operating Margin: ${formatPercentage(ratios[ratios.length - 1].operatingMargin / 100)}\\n• Average Revenue Growth: ${formatPercentage(growthRates.reduce((sum, g) => sum + g.revenueGrowth, 0) / growthRates.length / 100)}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_ratios',\n            ratios,\n            growthRates\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private ratios analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_SUMMARY: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Get latest period data\n        const latestIndex = periods.length - 1;\n        const latest = {\n          period: periods[latestIndex],\n          revenue: statements.totalRevenue?.[latestIndex] || 0,\n          grossProfit: statements.grossProfit?.[latestIndex] || 0,\n          operatingIncome: statements.operatingIncome?.[latestIndex] || 0,\n          netIncome: statements.netIncome?.[latestIndex] || 0,\n          totalCOGS: statements.totalCostOfGoodsSold?.[latestIndex] || 0\n        };\n\n        // Calculate key metrics\n        const grossMargin = latest.revenue ? (latest.grossProfit / latest.revenue) * 100 : 0;\n        const operatingMargin = latest.revenue ? (latest.operatingIncome / latest.revenue) * 100 : 0;\n        const netMargin = latest.revenue ? (latest.netIncome / latest.revenue) * 100 : 0;\n\n        // Revenue breakdown (top revenue streams)\n        const revenueBreakdown = [\n          { name: 'Injectables', value: statements.injectables?.[latestIndex] || 0 },\n          { name: 'Surgery', value: statements.surgery?.[latestIndex] || 0 },\n          { name: 'Wellness', value: statements.wellness?.[latestIndex] || 0 },\n          { name: 'Weightloss', value: statements.weightloss?.[latestIndex] || 0 },\n          { name: 'Retail Sales', value: statements.retailSales?.[latestIndex] || 0 },\n          { name: 'Energy Devices', value: statements.energyDevices?.[latestIndex] || 0 }\n        ].sort((a, b) => b.value - a.value);\n\n        const content = `Private Company Financial Summary (${latest.period})\\n\\n🏢 COMPANY OVERVIEW:\\n• Period: ${latest.period}\\n• Total Revenue: ${formatCurrency(latest.revenue, 'USD', true)}\\n• Operating Status: ${latest.operatingIncome >= 0 ? '✅ Profitable' : '⚠️ Operating Loss'}\\n\\n💰 FINANCIAL PERFORMANCE:\\n• Gross Profit: ${formatCurrency(latest.grossProfit, 'USD', true)} (${formatPercentage(grossMargin / 100)})\\n• Operating Income: ${formatCurrency(latest.operatingIncome, 'USD', true)} (${formatPercentage(operatingMargin / 100)})\\n• Net Income: ${formatCurrency(latest.netIncome, 'USD', true)} (${formatPercentage(netMargin / 100)})\\n• Cost of Goods Sold: ${formatCurrency(latest.totalCOGS, 'USD', true)}\\n\\n📊 REVENUE BREAKDOWN:\\n${revenueBreakdown.map((item, i) => `${i + 1}. ${item.name}: ${formatCurrency(item.value, 'USD', true)} (${formatPercentage(item.value / latest.revenue)})`).join('\\n')}\\n\\n📈 HISTORICAL TRENDS:\\n${periods.map((period, i) => `• ${period}: ${formatCurrency(statements.totalRevenue?.[i] || 0, 'USD', true)}`).join('\\n')}\\n\\n🎯 KEY METRICS:\\n• Revenue Growth (YoY): ${periods.length > 1 ? formatPercentage(((statements.totalRevenue?.[latestIndex] || 0) / (statements.totalRevenue?.[latestIndex-1] || 1) - 1)) : 'N/A'}\\n• Gross Margin Trend: ${grossMargin >= 70 ? '🟢 Strong' : grossMargin >= 50 ? '🟡 Moderate' : '🔴 Low'}\\n• Operating Efficiency: ${operatingMargin >= 15 ? '🟢 Excellent' : operatingMargin >= 5 ? '🟡 Fair' : operatingMargin >= 0 ? '🟠 Break-even' : '🔴 Loss'}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_summary',\n            latest,\n            revenueBreakdown,\n            margins: { grossMargin, operatingMargin, netMargin }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private summary analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_LOAD: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        \n        const content = `Private Financial Data Loaded Successfully\\n\\n📁 DATA OVERVIEW:\\n• Periods: ${data.periods.join(', ')}\\n• Income Statement: ✅ Loaded\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n\\n📊 AVAILABLE DATA:\\n• Revenue Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Revenue') || ['energyDevices', 'injectables', 'wellness', 'weightloss', 'retailSales', 'surgery'].includes(key)).length}\\n• Expense Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Cogs') || key.includes('Expense') || ['marketing', 'automobile', 'rent', 'insurance'].includes(key)).length}\\n• Financial Metrics: ${Object.keys(data.statements.incomeStatement).filter(key => ['grossProfit', 'operatingIncome', 'netIncome'].includes(key)).length}\\n\\n💡 AVAILABLE COMMANDS:\\n• PRIVATE_DCF() - Run DCF valuation\\n• PRIVATE_RATIOS() - Calculate financial ratios\\n• PRIVATE_SUMMARY() - Get company overview\\n• PRIVATE_SCENARIO() - Run scenario analysis\\n\\n✅ Ready for private company analysis`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_load',\n            dataStructure: {\n              periods: data.periods.length,\n              incomeStatementItems: Object.keys(data.statements.incomeStatement).length,\n              balanceSheetItems: Object.keys(data.statements.balanceSheet).length,\n              cashFlowItems: Object.keys(data.statements.cashFlow).length\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to load private data: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_MONTE_CARLO: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestPeriod = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestPeriod] || 0;\n        const baseOperatingIncome = statements.operatingIncome?.[latestPeriod] || 0;\n        \n        // Run Monte Carlo simulation\n        const simulations = 10000;\n        const results = [];\n        \n        for (let i = 0; i < simulations; i++) {\n          const revenueGrowth = (Math.random() * 0.3 + 0.85);\n          const marginChange = (Math.random() * 0.2 + 0.9);\n          const projectedRevenue = baseRevenue * revenueGrowth;\n          const projectedOperatingIncome = baseOperatingIncome * marginChange;\n          const valuation = projectedOperatingIncome * 8;\n          results.push({ valuation, revenue: projectedRevenue });\n        }\n        \n        const valuations = results.map(r => r.valuation).sort((a, b) => a - b);\n        const p50 = valuations[Math.floor(valuations.length * 0.5)];\n        const p25 = valuations[Math.floor(valuations.length * 0.25)];\n        const p75 = valuations[Math.floor(valuations.length * 0.75)];\n        \n        const content = `Monte Carlo Simulation Results (${simulations.toLocaleString()} iterations)\\n\\n📊 VALUATION DISTRIBUTION:\\n• P25: ${formatCurrency(p25)}\\n• P50 (Median): ${formatCurrency(p50)}\\n• P75: ${formatCurrency(p75)}\\n• Range: ${formatCurrency(valuations[0])} - ${formatCurrency(valuations[valuations.length - 1])}\\n\\n🎯 RISK METRICS:\\n• Downside Risk: ${formatPercentage(0.25)}\\n• Upside Potential: ${formatPercentage(0.25)}\\n• Expected Value: ${formatCurrency(p50)}`;\n        \n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Monte Carlo simulation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['iterations'] }\n  },\n\n  PRIVATE_SCENARIO: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestPeriod = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestPeriod] || 0;\n        const baseOperatingIncome = statements.operatingIncome?.[latestPeriod] || 0;\n        \n        const scenarios = {\n          bear: { growth: -0.15, margin: -0.20 },\n          base: { growth: 0.10, margin: 0.00 },\n          bull: { growth: 0.35, margin: 0.15 }\n        };\n        \n        let content = `Scenario Analysis\\n\\n📊 BASE METRICS:\\n• Revenue: ${formatCurrency(baseRevenue)}\\n• Operating Income: ${formatCurrency(baseOperatingIncome)}\\n`;\n        \n        Object.entries(scenarios).forEach(([name, scenario]) => {\n          const projectedRevenue = baseRevenue * (1 + scenario.growth);\n          const projectedIncome = baseOperatingIncome * (1 + scenario.margin);\n          const valuation = projectedIncome * 8;\n          content += `\\n${name.toUpperCase()} CASE:\\n• Revenue: ${formatCurrency(projectedRevenue)}\\n• Valuation: ${formatCurrency(valuation)}`;\n        });\n        \n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Scenario analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['scenarios'] }\n  },\n\n  PRIVATE_GROWTH: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        const revenues = periods.map((_, index) => statements.totalRevenue?.[index] || 0);\n        \n        const growthRates = [];\n        for (let i = 1; i < revenues.length; i++) {\n          if (revenues[i - 1] > 0) {\n            growthRates.push(((revenues[i] / revenues[i - 1]) - 1) * 100);\n          }\n        }\n        \n        const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n        const cagr = revenues.length > 1 && revenues[0] > 0 ? \n          (Math.pow(revenues[revenues.length - 1] / revenues[0], 1 / (revenues.length - 1)) - 1) * 100 : 0;\n        \n        const content = `Growth Analysis\\n\\n📈 GROWTH METRICS:\\n• Revenue CAGR: ${formatPercentage(cagr / 100)}\\n• Average YoY Growth: ${formatPercentage(avgGrowth / 100)}\\n• Latest Revenue: ${formatCurrency(revenues[revenues.length - 1])}\\n\\n🎯 GROWTH ASSESSMENT:\\n• Trajectory: ${avgGrowth > 15 ? '🚀 High Growth' : avgGrowth > 5 ? '📈 Moderate Growth' : '📉 Slow Growth'}\\n• Consistency: ${growthRates.every(rate => rate > 0) ? '✅ Consistent' : '⚠️ Variable'}`;\n        \n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Growth analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_RISK: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        const revenues = periods.map((_, index) => statements.totalRevenue?.[index] || 0);\n        const margins = revenues.map((rev, index) => {\n          const opIncome = statements.operatingIncome?.[index] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        \n        const revenueVolatility = revenues.length > 1 ? calculateVolatility(revenues) : 0;\n        const marginVolatility = margins.length > 1 ? calculateVolatility(margins) : 0;\n        \n        const riskScore = (revenueVolatility > 20 ? 3 : revenueVolatility > 10 ? 2 : 1) + \n                         (marginVolatility > 5 ? 2 : marginVolatility > 2 ? 1 : 0);\n        \n        const riskLevel = riskScore >= 4 ? 'HIGH' : riskScore >= 2 ? 'MEDIUM' : 'LOW';\n        \n        const content = `Risk Assessment\\n\\n⚖️ RISK METRICS:\\n• Revenue Volatility: ${revenueVolatility.toFixed(1)}%\\n• Margin Volatility: ${marginVolatility.toFixed(1)}%\\n• Overall Risk Level: ${riskLevel}\\n\\n🎯 RISK FACTORS:\\n• Revenue Concentration: ${revenues.length < 3 ? '⚠️ Limited History' : '✅ Adequate Data'}\\n• Margin Stability: ${marginVolatility < 2 ? '✅ Stable' : '⚠️ Variable'}\\n• Growth Sustainability: ${assessGrowthSustainability(revenues)}`;\n        \n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Risk analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_VALIDATE: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements;\n        const periods = data.periods;\n        \n        const validationResults = [];\n        \n        // Check data completeness\n        const incomeStatementItems = Object.keys(statements.incomeStatement).length;\n        const balanceSheetItems = Object.keys(statements.balanceSheet).length;\n        const cashFlowItems = Object.keys(statements.cashFlow).length;\n        \n        validationResults.push({\n          test: 'Data Completeness',\n          result: incomeStatementItems > 5 ? 'PASS' : 'FAIL',\n          details: `${incomeStatementItems} income statement items`\n        });\n        \n        // Check for negative revenues\n        const revenues = periods.map((_, index) => statements.incomeStatement.totalRevenue?.[index] || 0);\n        const hasNegativeRevenue = revenues.some(rev => rev < 0);\n        \n        validationResults.push({\n          test: 'Revenue Validation',\n          result: !hasNegativeRevenue ? 'PASS' : 'FAIL',\n          details: hasNegativeRevenue ? 'Negative revenue detected' : 'All revenues positive'\n        });\n        \n        // Check margin consistency\n        const margins = revenues.map((rev, index) => {\n          const opIncome = statements.incomeStatement.operatingIncome?.[index] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        const reasonableMargins = margins.every(margin => margin >= -50 && margin <= 100);\n        \n        validationResults.push({\n          test: 'Margin Reasonableness',\n          result: reasonableMargins ? 'PASS' : 'FAIL',\n          details: `Margins range: ${Math.min(...margins).toFixed(1)}% to ${Math.max(...margins).toFixed(1)}%`\n        });\n        \n        const passedTests = validationResults.filter(result => result.result === 'PASS').length;\n        const totalTests = validationResults.length;\n        \n        let content = `Data Validation Report\\n\\n📊 VALIDATION SUMMARY:\\n• Tests Passed: ${passedTests}/${totalTests}\\n• Overall Status: ${passedTests === totalTests ? '✅ VALID' : '⚠️ ISSUES FOUND'}\\n\\n🔍 DETAILED RESULTS:\\n`;\n        \n        validationResults.forEach(result => {\n          const icon = result.result === 'PASS' ? '✅' : '❌';\n          content += `${icon} ${result.test}: ${result.result}\\n   ${result.details}\\n`;\n        });\n        \n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Data validation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_EXPORT: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_');\n        \n        const exportData = {\n          timestamp,\n          company: 'Private Company Analysis',\n          periods: data.periods,\n          financials: data.statements,\n          analysis: {\n            dcf: 'Run PRIVATE_DCF() for valuation',\n            ratios: 'Run PRIVATE_RATIOS() for financial ratios',\n            scenarios: 'Run PRIVATE_SCENARIO() for scenario analysis'\n          }\n        };\n        \n        const content = `Export Complete\\n\\n📁 EXPORT DETAILS:\\n• Timestamp: ${timestamp}\\n• Data Periods: ${data.periods.join(', ')}\\n• Export Format: JSON\\n• File Size: ~${JSON.stringify(exportData).length} bytes\\n\\n📊 INCLUDED DATA:\\n• Income Statement: ✅ Complete\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅' : '❌'} Available\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅' : '❌'} Available\\n\\n💡 USAGE:\\n• Use exported data for external analysis\\n• Import into other financial tools\\n• Create backup of current analysis`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            export: exportData,\n            filename: `private_analysis_${timestamp}.json`\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Export failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['format'] }\n  },\n\n  PRIVATE_BENCHMARKS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        \n        // Current metrics\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const grossProfit = statements.grossProfit?.[latestIndex] || 0;\n        \n        // Industry benchmarks from enhanced data\n        const benchmarks = data.assumptions?.industryBenchmarks || {\n          revenuePerSqFt: { min: 800, target: 1200, current: 1490.44 },\n          revenuePerProvider: { min: 300, target: 400, current: 1242.03 },\n          injectableMargin: { min: 0.75, target: 0.80, current: 0.70 },\n          ebitdaMargin: { min: 0.20, target: 0.25, current: 0.185 },\n          customerRetention: { min: 0.65, target: 0.75, current: 0.72 }\n        };\n        \n        let content = `Industry Benchmark Analysis\\n\\n📊 CURRENT vs BENCHMARKS:\\n`;\n        \n        Object.entries(benchmarks).forEach(([metric, values]) => {\n          const performance = values.current >= values.target ? '🟢 Above Target' :\n                            values.current >= values.min ? '🟡 Meets Minimum' : '🔴 Below Standard';\n          const percentage = ((values.current / values.target) * 100).toFixed(1);\n          \n          content += `• ${metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:\\n`;\n          content += `  Current: ${typeof values.current === 'number' && values.current < 1 ? \n            formatPercentage(values.current) : formatNumber(values.current)}\\n`;\n          content += `  Target: ${typeof values.target === 'number' && values.target < 1 ? \n            formatPercentage(values.target) : formatNumber(values.target)}\\n`;\n          content += `  Performance: ${performance} (${percentage}% of target)\\n\\n`;\n        });\n        \n        // Competitive positioning\n        const overallScore = Object.values(benchmarks).reduce((score, benchmark) => {\n          return score + (benchmark.current >= benchmark.target ? 2 : benchmark.current >= benchmark.min ? 1 : 0);\n        }, 0);\n        const maxScore = Object.keys(benchmarks).length * 2;\n        const competitiveGrade = overallScore >= maxScore * 0.8 ? 'A' : \n                               overallScore >= maxScore * 0.6 ? 'B' : \n                               overallScore >= maxScore * 0.4 ? 'C' : 'D';\n        \n        content += `🎯 COMPETITIVE POSITIONING:\\n• Overall Score: ${overallScore}/${maxScore} (${((overallScore/maxScore)*100).toFixed(1)}%)\\n• Industry Grade: ${competitiveGrade}\\n• Market Position: ${competitiveGrade === 'A' ? '🏆 Industry Leader' : competitiveGrade === 'B' ? '📈 Above Average' : competitiveGrade === 'C' ? '📊 Market Average' : '📉 Below Average'}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_benchmarks',\n            benchmarks,\n            competitiveScore: overallScore,\n            grade: competitiveGrade\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Benchmark analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['industry'] }\n  },\n\n  PRIVATE_CASHFLOW: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        \n        // Calculate operating cash flow proxy from available data\n        const cashFlowAnalysis = periods.map((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const depreciation = statements.depreciation?.[index] || 0;\n          const workingCapitalChange = index > 0 ? \n            ((statements.totalRevenue?.[index] || 0) - (statements.totalRevenue?.[index-1] || 0)) * 0.1 : 0; // Estimate\n          \n          const operatingCashFlow = operatingIncome + depreciation - workingCapitalChange;\n          const fcf = operatingCashFlow; // Simplified - would subtract capex\n          \n          return {\n            period,\n            revenue,\n            operatingIncome,\n            depreciation,\n            operatingCashFlow,\n            freeCashFlow: fcf,\n            fcfMargin: revenue > 0 ? (fcf / revenue) * 100 : 0\n          };\n        });\n        \n        // Cash flow trends\n        const avgFCFMargin = cashFlowAnalysis.reduce((sum, cf) => sum + cf.fcfMargin, 0) / cashFlowAnalysis.length;\n        const latestFCF = cashFlowAnalysis[cashFlowAnalysis.length - 1];\n        \n        let content = `Cash Flow Analysis\\n\\n💰 CASH FLOW SUMMARY:\\n`;\n        content += cashFlowAnalysis.map(cf => \n          `• ${cf.period}:\\n  Operating CF: ${formatCurrency(cf.operatingCashFlow)}\\n  Free Cash Flow: ${formatCurrency(cf.freeCashFlow)}\\n  FCF Margin: ${formatPercentage(cf.fcfMargin / 100)}`\n        ).join('\\n\\n');\n        \n        content += `\\n\\n📊 CASH FLOW METRICS:\\n• Latest FCF: ${formatCurrency(latestFCF.freeCashFlow)}\\n• Average FCF Margin: ${formatPercentage(avgFCFMargin / 100)}\\n• Cash Generation: ${latestFCF.freeCashFlow > 0 ? '✅ Positive' : '❌ Negative'}\\n• FCF Trend: ${assessCashFlowTrend(cashFlowAnalysis)}`;\n        \n        // Cash flow adequacy analysis\n        const fcfGrowth = cashFlowAnalysis.length > 1 ? \n          ((latestFCF.freeCashFlow / cashFlowAnalysis[0].freeCashFlow) - 1) * 100 : 0;\n        \n        content += `\\n\\n🎯 CASH FLOW QUALITY:\\n• FCF Growth (Total): ${formatPercentage(fcfGrowth / 100)}\\n• Operating Leverage: ${calculateOperatingLeverage(cashFlowAnalysis)}\\n• Cash Conversion: ${avgFCFMargin > 15 ? '🟢 Strong' : avgFCFMargin > 5 ? '🟡 Moderate' : '🔴 Weak'}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_cashflow',\n            cashFlowAnalysis,\n            metrics: { avgFCFMargin, fcfGrowth }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Cash flow analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['years'] }\n  },\n\n  PRIVATE_MULTIPLES: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        \n        // Current metrics\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const netIncome = statements.netIncome?.[latestIndex] || 0;\n        \n        // Industry multiples for medispa/healthcare services\n        const industryMultiples = {\n          evRevenue: { min: 1.5, typical: 2.5, premium: 4.0 },\n          evEbitda: { min: 6.0, typical: 10.0, premium: 15.0 },\n          peRatio: { min: 12.0, typical: 18.0, premium: 25.0 }\n        };\n        \n        // Calculate implied valuations\n        const valuations = {\n          revenueMultiple: {\n            conservative: revenue * industryMultiples.evRevenue.min,\n            typical: revenue * industryMultiples.evRevenue.typical,\n            premium: revenue * industryMultiples.evRevenue.premium\n          },\n          ebitdaMultiple: ebitda > 0 ? {\n            conservative: ebitda * industryMultiples.evEbitda.min,\n            typical: ebitda * industryMultiples.evEbitda.typical,\n            premium: ebitda * industryMultiples.evEbitda.premium\n          } : null,\n          earningsMultiple: netIncome > 0 ? {\n            conservative: netIncome * industryMultiples.peRatio.min,\n            typical: netIncome * industryMultiples.peRatio.typical,\n            premium: netIncome * industryMultiples.peRatio.premium\n          } : null\n        };\n        \n        let content = `Valuation Multiples Analysis\\n\\n📊 CURRENT METRICS:\\n• Revenue (TTM): ${formatCurrency(revenue)}\\n• EBITDA (TTM): ${formatCurrency(ebitda)}\\n• Net Income: ${formatCurrency(netIncome)}\\n\\n💰 VALUATION SCENARIOS:\\n`;\n        \n        // Revenue multiple valuation\n        content += `📈 REVENUE MULTIPLE APPROACH:\\n`;\n        content += `• Conservative (${industryMultiples.evRevenue.min}x): ${formatCurrency(valuations.revenueMultiple.conservative)}\\n`;\n        content += `• Typical (${industryMultiples.evRevenue.typical}x): ${formatCurrency(valuations.revenueMultiple.typical)}\\n`;\n        content += `• Premium (${industryMultiples.evRevenue.premium}x): ${formatCurrency(valuations.revenueMultiple.premium)}\\n\\n`;\n        \n        // EBITDA multiple valuation\n        if (valuations.ebitdaMultiple) {\n          content += `💼 EBITDA MULTIPLE APPROACH:\\n`;\n          content += `• Conservative (${industryMultiples.evEbitda.min}x): ${formatCurrency(valuations.ebitdaMultiple.conservative)}\\n`;\n          content += `• Typical (${industryMultiples.evEbitda.typical}x): ${formatCurrency(valuations.ebitdaMultiple.typical)}\\n`;\n          content += `• Premium (${industryMultiples.evEbitda.premium}x): ${formatCurrency(valuations.ebitdaMultiple.premium)}\\n\\n`;\n        }\n        \n        // Earnings multiple valuation\n        if (valuations.earningsMultiple) {\n          content += `📊 EARNINGS MULTIPLE APPROACH:\\n`;\n          content += `• Conservative (${industryMultiples.peRatio.min}x): ${formatCurrency(valuations.earningsMultiple.conservative)}\\n`;\n          content += `• Typical (${industryMultiples.peRatio.typical}x): ${formatCurrency(valuations.earningsMultiple.typical)}\\n`;\n          content += `• Premium (${industryMultiples.peRatio.premium}x): ${formatCurrency(valuations.earningsMultiple.premium)}\\n\\n`;\n        }\n        \n        // Valuation summary\n        const typicalValuations = [\n          valuations.revenueMultiple.typical,\n          valuations.ebitdaMultiple?.typical,\n          valuations.earningsMultiple?.typical\n        ].filter(v => v);\n        \n        const avgValuation = typicalValuations.reduce((sum, val) => sum + val, 0) / typicalValuations.length;\n        const minValuation = Math.min(...typicalValuations);\n        const maxValuation = Math.max(...typicalValuations);\n        \n        content += `🎯 VALUATION SUMMARY:\\n• Average Valuation: ${formatCurrency(avgValuation)}\\n• Valuation Range: ${formatCurrency(minValuation)} - ${formatCurrency(maxValuation)}\\n• Method Consistency: ${(maxValuation / minValuation) < 2 ? '✅ Consistent' : '⚠️ Wide Range'}\\n• Recommended Range: ${formatCurrency(avgValuation * 0.8)} - ${formatCurrency(avgValuation * 1.2)}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_multiples',\n            valuations,\n            summary: { avgValuation, minValuation, maxValuation }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Multiples analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['industry', 'size'] }\n  },\n\n  PRIVATE_SENSITIVITY: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestIndex] || 0;\n        const baseEbitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n        \n        // Sensitivity variables\n        const revenueChanges = [-20, -10, 0, 10, 20]; // % changes\n        const marginChanges = [-2, -1, 0, 1, 2]; // percentage point changes\n        const multipleBase = 10; // EBITDA multiple\n        \n        let content = `Sensitivity Analysis\\n\\n📊 BASE CASE:\\n• Revenue: ${formatCurrency(baseRevenue)}\\n• EBITDA: ${formatCurrency(baseEbitda)}\\n• EBITDA Multiple: ${multipleBase}x\\n• Base Valuation: ${formatCurrency(baseEbitda * multipleBase)}\\n\\n`;\n        \n        // Revenue sensitivity\n        content += `📈 REVENUE SENSITIVITY:\\n`;\n        revenueChanges.forEach(change => {\n          const newRevenue = baseRevenue * (1 + change / 100);\n          const newEbitda = baseEbitda * (1 + change / 100); // Assuming operating leverage\n          const newValuation = newEbitda * multipleBase;\n          const valuationChange = ((newValuation / (baseEbitda * multipleBase)) - 1) * 100;\n          content += `• Revenue ${change >= 0 ? '+' : ''}${change}%: Valuation ${formatCurrency(newValuation)} (${valuationChange >= 0 ? '+' : ''}${valuationChange.toFixed(1)}%)\\n`;\n        });\n        \n        // Margin sensitivity\n        content += `\\n💼 MARGIN SENSITIVITY (percentage points):\\n`;\n        const baseMargin = baseRevenue > 0 ? (baseEbitda / baseRevenue) * 100 : 0;\n        marginChanges.forEach(change => {\n          const newMargin = (baseMargin + change) / 100;\n          const newEbitda = baseRevenue * newMargin;\n          const newValuation = newEbitda * multipleBase;\n          const valuationChange = newEbitda > 0 ? ((newValuation / (baseEbitda * multipleBase)) - 1) * 100 : -100;\n          content += `• Margin ${change >= 0 ? '+' : ''}${change}pp: EBITDA ${formatCurrency(newEbitda)}, Valuation ${formatCurrency(newValuation)} (${valuationChange >= 0 ? '+' : ''}${valuationChange.toFixed(1)}%)\\n`;\n        });\n        \n        // Multiple sensitivity\n        content += `\\n🎯 MULTIPLE SENSITIVITY:\\n`;\n        const multiples = [8, 9, 10, 11, 12];\n        multiples.forEach(multiple => {\n          const valuation = baseEbitda * multiple;\n          const change = ((multiple / multipleBase) - 1) * 100;\n          content += `• ${multiple}x EBITDA: ${formatCurrency(valuation)} (${change >= 0 ? '+' : ''}${change.toFixed(1)}%)\\n`;\n        });\n        \n        // Key insights\n        const revenueElasticity = 1.0; // 1% revenue change = 1% valuation change (simplified)\n        const marginElasticity = (baseRevenue * multipleBase) / (baseEbitda * multipleBase); // Impact of 1pp margin change\n        \n        content += `\\n🔍 SENSITIVITY INSIGHTS:\\n• Revenue Elasticity: ${revenueElasticity.toFixed(2)}x (1% revenue change → ${revenueElasticity.toFixed(1)}% valuation change)\\n• Margin Impact: 1pp margin change → ${((marginElasticity - 1) * 100).toFixed(1)}% valuation change\\n• Key Driver: ${marginElasticity > revenueElasticity ? 'Margin optimization' : 'Revenue growth'} has higher impact`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_sensitivity',\n            baseCase: { revenue: baseRevenue, ebitda: baseEbitda, valuation: baseEbitda * multipleBase },\n            sensitivities: { revenueElasticity, marginElasticity }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Sensitivity analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['variables', 'ranges'] }\n  },\n\n  PRIVATE_WATERFALL: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        \n        // Build DCF waterfall analysis\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const taxRate = 0.25;\n        const discountRate = 0.12;\n        const terminalGrowthRate = 0.025;\n        \n        // Waterfall components\n        const waterfallSteps = [\n          { step: 'Base Revenue', value: revenue, cumulative: revenue },\n          { step: 'Operating Leverage', value: operatingIncome - revenue * 0.15, cumulative: operatingIncome },\n          { step: 'Tax Shield', value: -operatingIncome * taxRate, cumulative: operatingIncome * (1 - taxRate) },\n          { step: 'Working Capital', value: -revenue * 0.02, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.02 },\n          { step: 'CapEx', value: -revenue * 0.03, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.05 },\n          { step: 'Free Cash Flow', value: 0, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.05 }\n        ];\n        \n        const fcf = waterfallSteps[waterfallSteps.length - 1].cumulative;\n        const terminalValue = (fcf * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        const pv5Years = fcf * 4.5; // Simplified 5-year PV\n        const pvTerminal = terminalValue / Math.pow(1 + discountRate, 5);\n        const enterpriseValue = pv5Years + pvTerminal;\n        \n        let content = `DCF Waterfall Analysis\\n\\n💧 CASH FLOW WATERFALL:\\n`;\n        waterfallSteps.forEach((step, i) => {\n          const arrow = i === 0 ? '' : step.value >= 0 ? ' ↗ ' : ' ↘ ';\n          content += `${i + 1}. ${step.step}: ${formatCurrency(step.value)} ${arrow}${formatCurrency(step.cumulative)}\\n`;\n        });\n        \n        content += `\\n🏗️ VALUATION BUILD-UP:\\n• PV of 5-Year FCF: ${formatCurrency(pv5Years)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminal)}\\n• Enterprise Value: ${formatCurrency(enterpriseValue)}\\n• Terminal Multiple: ${(terminalValue / fcf).toFixed(1)}x FCF\\n• Implied FCF Yield: ${formatPercentage(fcf / enterpriseValue)}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_waterfall',\n            waterfallSteps,\n            valuation: { pv5Years, pvTerminal, enterpriseValue }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Waterfall analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['discountRate', 'terminalGrowthRate'] }\n  },\n\n  PRIVATE_COMPS: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        \n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n        \n        // Comparable companies (medispa/aesthetic medicine sector)\n        const comparables = [\n          { name: 'Lifestyle Communities', evRevenue: 2.1, evEbitda: 12.5, margin: 18.2 },\n          { name: 'European Wax Center', evRevenue: 3.2, evEbitda: 15.8, margin: 22.1 },\n          { name: 'Planet Fitness', evRevenue: 4.5, evEbitda: 18.2, margin: 28.5 },\n          { name: 'Xponential Fitness', evRevenue: 2.8, evEbitda: 14.1, margin: 19.8 },\n          { name: 'Hand & Stone', evRevenue: 2.5, evEbitda: 11.2, margin: 21.4 }\n        ];\n        \n        // Calculate company metrics\n        const currentMargin = revenue > 0 ? (ebitda / revenue) * 100 : 0;\n        \n        // Peer statistics\n        const avgEvRevenue = comparables.reduce((sum, comp) => sum + comp.evRevenue, 0) / comparables.length;\n        const avgEvEbitda = comparables.reduce((sum, comp) => sum + comp.evEbitda, 0) / comparables.length;\n        const avgMargin = comparables.reduce((sum, comp) => sum + comp.margin, 0) / comparables.length;\n        \n        // Trading multiples valuation\n        const tradingValuationRevenue = revenue * avgEvRevenue;\n        const tradingValuationEbitda = ebitda * avgEvEbitda;\n        const avgTradingValuation = (tradingValuationRevenue + tradingValuationEbitda) / 2;\n        \n        let content = `Comparable Company Analysis\\n\\n🏢 PEER GROUP ANALYSIS:\\n`;\n        content += `Trading Multiple Averages:\\n• EV/Revenue: ${avgEvRevenue.toFixed(1)}x\\n• EV/EBITDA: ${avgEvEbitda.toFixed(1)}x\\n• EBITDA Margin: ${avgMargin.toFixed(1)}%\\n\\n`;\n        \n        content += `📊 DETAILED COMPARABLES:\\n`;\n        comparables.forEach((comp, i) => {\n          content += `${i + 1}. ${comp.name}:\\n   EV/Rev: ${comp.evRevenue}x, EV/EBITDA: ${comp.evEbitda}x, Margin: ${comp.margin}%\\n`;\n        });\n        \n        content += `\\n💰 IMPLIED VALUATION:\\n• Revenue Multiple: ${formatCurrency(tradingValuationRevenue)} (${avgEvRevenue.toFixed(1)}x)\\n• EBITDA Multiple: ${formatCurrency(tradingValuationEbitda)} (${avgEvEbitda.toFixed(1)}x)\\n• Average Trading Value: ${formatCurrency(avgTradingValuation)}\\n• Current EBITDA Margin: ${formatPercentage(currentMargin / 100)}\\n• Peer Margin Delta: ${(currentMargin - avgMargin).toFixed(1)}pp`;\n        \n        content += `\\n🎯 RELATIVE POSITIONING:\\n• Multiple Premium/Discount: ${((avgTradingValuation / ((revenue * 2.5) + (ebitda * 12))) - 1) * 100 > 0 ? '+' : ''}${(((avgTradingValuation / ((revenue * 2.5) + (ebitda * 12))) - 1) * 100).toFixed(1)}%\\n• Margin Competitiveness: ${currentMargin >= avgMargin ? '🟢 Above Peers' : '🟡 Below Peers'}\\n• Size Adjustment: ${revenue < 50000000 ? 'Small-cap discount may apply' : 'Mid-cap positioning'}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_comps',\n            comparables,\n            peerAverages: { avgEvRevenue, avgEvEbitda, avgMargin },\n            impliedValuation: { tradingValuationRevenue, tradingValuationEbitda, avgTradingValuation }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Comparable analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['sector', 'size'] }\n  },\n\n  PRIVATE_LBO: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        \n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n        \n        // LBO assumptions\n        const purchasePrice = ebitda * 10; // 10x EBITDA entry multiple\n        const equityContribution = purchasePrice * 0.3; // 30% equity\n        const debtFinancing = purchasePrice * 0.7; // 70% debt\n        const interestRate = 0.08; // 8% weighted average cost of debt\n        const exitMultiple = 12; // 12x EBITDA exit multiple\n        const holdPeriod = 5; // 5-year hold\n        \n        // Project future EBITDA growth\n        const ebitdaGrowthRate = 0.08; // 8% annual growth\n        const projectedEbitda = [];\n        for (let year = 1; year <= holdPeriod; year++) {\n          projectedEbitda.push(ebitda * Math.pow(1 + ebitdaGrowthRate, year));\n        }\n        \n        // Debt paydown (assuming 50% FCF used for debt reduction)\n        let remainingDebt = debtFinancing;\n        const debtPaydown = [];\n        projectedEbitda.forEach((yearEbitda, i) => {\n          const fcf = yearEbitda * 0.6; // Assume 60% FCF conversion\n          const interestPayment = remainingDebt * interestRate;\n          const debtReduction = Math.min((fcf - interestPayment) * 0.5, remainingDebt * 0.2);\n          remainingDebt = Math.max(0, remainingDebt - debtReduction);\n          debtPaydown.push({ year: i + 1, ebitda: yearEbitda, debt: remainingDebt, reduction: debtReduction });\n        });\n        \n        // Exit valuation\n        const exitEbitda = projectedEbitda[holdPeriod - 1];\n        const exitValue = exitEbitda * exitMultiple;\n        const netProceeds = exitValue - remainingDebt;\n        const totalReturn = netProceeds / equityContribution;\n        const irr = Math.pow(totalReturn, 1 / holdPeriod) - 1;\n        const moic = totalReturn; // Money-on-Money multiple\n        \n        let content = `Leveraged Buyout Analysis\\n\\n💼 TRANSACTION STRUCTURE:\\n• Purchase Price: ${formatCurrency(purchasePrice)} (${(purchasePrice / ebitda).toFixed(1)}x EBITDA)\\n• Equity Investment: ${formatCurrency(equityContribution)} (${formatPercentage(equityContribution / purchasePrice)})\\n• Debt Financing: ${formatCurrency(debtFinancing)} (${formatPercentage(debtFinancing / purchasePrice)})\\n• Interest Rate: ${formatPercentage(interestRate)}\\n\\n`;\n        \n        content += `📈 EBITDA PROJECTIONS:\\n`;\n        projectedEbitda.forEach((ebitdaYear, i) => {\n          content += `Year ${i + 1}: ${formatCurrency(ebitdaYear)} (${formatPercentage(ebitdaGrowthRate)} growth)\\n`;\n        });\n        \n        content += `\\n🏦 DEBT PAYDOWN SCHEDULE:\\n`;\n        debtPaydown.forEach(year => {\n          content += `Year ${year.year}: Debt ${formatCurrency(year.debt)}, Paydown ${formatCurrency(year.reduction)}\\n`;\n        });\n        \n        content += `\\n🎯 EXIT ANALYSIS (Year ${holdPeriod}):\\n• Exit EBITDA: ${formatCurrency(exitEbitda)}\\n• Exit Multiple: ${exitMultiple}x\\n• Exit Value: ${formatCurrency(exitValue)}\\n• Remaining Debt: ${formatCurrency(remainingDebt)}\\n• Net Proceeds: ${formatCurrency(netProceeds)}\\n\\n💰 INVESTOR RETURNS:\\n• Total Return: ${formatCurrency(netProceeds)} (${totalReturn.toFixed(1)}x)\\n• Money-on-Money: ${moic.toFixed(1)}x\\n• IRR: ${formatPercentage(irr)}\\n• Return Quality: ${irr > 0.2 ? '🟢 Excellent' : irr > 0.15 ? '🟡 Good' : '🔴 Poor'}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_lbo',\n            transaction: { purchasePrice, equityContribution, debtFinancing },\n            projections: projectedEbitda,\n            returns: { totalReturn, moic, irr }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `LBO analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['leverage', 'holdPeriod', 'exitMultiple'] }\n  },\n\n  PRIVATE_QUALITY: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        \n        // Business Quality Score calculation\n        const qualityMetrics = [];\n        \n        // Revenue Quality\n        const revenues = periods.map((_, i) => statements.totalRevenue?.[i] || 0);\n        const revenueGrowthConsistency = calculateGrowthConsistency(revenues);\n        const revenueRecurring = estimateRecurringRevenue(statements, periods.length - 1);\n        qualityMetrics.push({ metric: 'Revenue Quality', score: revenueGrowthConsistency * 0.6 + revenueRecurring * 0.4, weight: 25 });\n        \n        // Profitability Quality\n        const margins = revenues.map((rev, i) => {\n          const opIncome = statements.operatingIncome?.[i] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        const marginStability = calculateMarginStability(margins);\n        const profitabilityTrend = calculateProfitabilityTrend(margins);\n        qualityMetrics.push({ metric: 'Profitability Quality', score: marginStability * 0.7 + profitabilityTrend * 0.3, weight: 30 });\n        \n        // Cash Generation Quality\n        const cashConversion = 85; // Estimated from medispa characteristics\n        const workingCapitalEfficiency = 90; // Asset-light model\n        qualityMetrics.push({ metric: 'Cash Generation', score: (cashConversion + workingCapitalEfficiency) / 2, weight: 20 });\n        \n        // Competitive Position\n        const marketPosition = assessMarketPosition(data);\n        const scalability = assessScalability(revenues);\n        qualityMetrics.push({ metric: 'Competitive Position', score: marketPosition * 0.6 + scalability * 0.4, weight: 15 });\n        \n        // Financial Strength\n        const debtLevels = 75; // Assumed moderate debt levels\n        const liquidityPosition = 80; // Cash generation business\n        qualityMetrics.push({ metric: 'Financial Strength', score: (debtLevels + liquidityPosition) / 2, weight: 10 });\n        \n        // Calculate overall quality score\n        const overallScore = qualityMetrics.reduce((sum, metric) => sum + (metric.score * metric.weight / 100), 0);\n        const qualityGrade = overallScore >= 80 ? 'A' : overallScore >= 70 ? 'B' : overallScore >= 60 ? 'C' : overallScore >= 50 ? 'D' : 'F';\n        \n        let content = `Business Quality Assessment\\n\\n🏆 OVERALL QUALITY SCORE: ${overallScore.toFixed(1)}/100 (Grade: ${qualityGrade})\\n\\n📊 QUALITY BREAKDOWN:\\n`;\n        \n        qualityMetrics.forEach(metric => {\n          const grade = metric.score >= 80 ? 'A' : metric.score >= 70 ? 'B' : metric.score >= 60 ? 'C' : 'D';\n          content += `• ${metric.metric}: ${metric.score.toFixed(1)}/100 (${grade}) - Weight: ${metric.weight}%\\n`;\n        });\n        \n        content += `\\n🎯 QUALITY ANALYSIS:\\n• Investment Grade: ${qualityGrade === 'A' ? '🟢 High Quality' : qualityGrade === 'B' ? '🟡 Good Quality' : qualityGrade === 'C' ? '🟠 Average Quality' : '🔴 Below Average'}\\n• Risk Profile: ${overallScore >= 75 ? 'Low-Medium Risk' : overallScore >= 60 ? 'Medium Risk' : 'Medium-High Risk'}\\n• Valuation Multiple Premium: ${overallScore >= 80 ? '10-15%' : overallScore >= 70 ? '5-10%' : overallScore >= 60 ? '0-5%' : 'Discount warranted'}\\n\\n💡 KEY STRENGTHS:\\n${identifyStrengths(qualityMetrics)}\\n\\n⚠️ AREAS FOR IMPROVEMENT:\\n${identifyWeaknesses(qualityMetrics)}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_quality',\n            overallScore,\n            qualityGrade,\n            metrics: qualityMetrics\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Quality assessment failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['weights'] }\n  },\n\n  PRIVATE_HELP: {\n    execute: async (parsedCommand, context, processor) => {\n      const commands = [\n        { cmd: 'PRIVATE_LOAD()', desc: 'Load and validate private financial data' },\n        { cmd: 'PRIVATE_SUMMARY()', desc: 'Generate executive summary of company performance' },\n        { cmd: 'PRIVATE_DCF()', desc: 'Run discounted cash flow valuation analysis' },\n        { cmd: 'PRIVATE_RATIOS()', desc: 'Calculate comprehensive financial ratios' },\n        { cmd: 'PRIVATE_BENCHMARKS()', desc: 'Compare metrics against industry benchmarks' },\n        { cmd: 'PRIVATE_MULTIPLES()', desc: 'Valuation using industry multiples approach' },\n        { cmd: 'PRIVATE_CASHFLOW()', desc: 'Analyze cash flow generation and quality' },\n        { cmd: 'PRIVATE_GROWTH()', desc: 'Assess revenue growth trends and sustainability' },\n        { cmd: 'PRIVATE_RISK()', desc: 'Evaluate business risk factors and volatility' },\n        { cmd: 'PRIVATE_SCENARIO()', desc: 'Run bull/base/bear case scenario analysis' },\n        { cmd: 'PRIVATE_MONTE_CARLO()', desc: 'Monte Carlo simulation for valuation ranges' },\n        { cmd: 'PRIVATE_SENSITIVITY()', desc: 'Sensitivity analysis on key variables' },\n        { cmd: 'PRIVATE_VALIDATE()', desc: 'Validate data quality and completeness' },\n        { cmd: 'PRIVATE_EXPORT()', desc: 'Export analysis data and results' },\n        { cmd: 'PRIVATE_WATERFALL()', desc: 'DCF waterfall and value bridge analysis' },\n        { cmd: 'PRIVATE_COMPS()', desc: 'Comparable company trading multiples analysis' },\n        { cmd: 'PRIVATE_LBO()', desc: 'Leveraged buyout model and returns analysis' },\n        { cmd: 'PRIVATE_QUALITY()', desc: 'Business quality and investment grade assessment' },\n        { cmd: 'PRIVATE_WORKFLOW()', desc: 'Interactive analysis workflow with recommendations' },\n        { cmd: 'PRIVATE_DASHBOARD()', desc: 'Executive dashboard with key metrics summary' },\n        { cmd: 'PRIVATE_AUDIT()', desc: 'Comprehensive financial audit and red flags analysis' },\n        { cmd: 'PRIVATE_FORECAST()', desc: 'Multi-scenario financial forecasting model' },\n        { cmd: 'PRIVATE_ESG()', desc: 'ESG scoring and sustainable investment analysis' }\n      ];\n      \n      let content = `Private Analysis Commands\\n\\n🛠️ AVAILABLE COMMANDS:\\n`;\n      content += commands.map(cmd => `• ${cmd.cmd}\\n  ${cmd.desc}`).join('\\n\\n');\n      \n      content += `\\n\\n📋 WORKFLOW RECOMMENDATIONS:\\n`;\n      content += `1. Start with PRIVATE_LOAD() to validate data\\n`;\n      content += `2. Run PRIVATE_SUMMARY() for company overview\\n`;\n      content += `3. Use PRIVATE_DCF() or PRIVATE_MULTIPLES() for valuation\\n`;\n      content += `4. Perform PRIVATE_SCENARIO() for risk assessment\\n`;\n      content += `5. Execute PRIVATE_BENCHMARKS() for competitive analysis\\n`;\n      content += `6. Use PRIVATE_EXPORT() to save results\\n\\n`;\n      \n      content += `💡 TIPS:\\n• Commands are case-sensitive\\n• Most commands work with default parameters\\n• Use PRIVATE_VALIDATE() if you encounter errors\\n• Results include detailed analysis and insights`;\n      \n      return {\n        type: 'success',\n        content,\n        data: {\n          analysis: 'private_help',\n          commands: commands.map(cmd => cmd.cmd)\n        }\n      };\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_WORKFLOW: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        \n        // Workflow assessment\n        const workflowSteps = [\n          { step: 'Data Quality', completed: true, score: 85, next: 'PRIVATE_VALIDATE()' },\n          { step: 'Company Overview', completed: false, score: 0, next: 'PRIVATE_SUMMARY()' },\n          { step: 'Financial Analysis', completed: false, score: 0, next: 'PRIVATE_RATIOS()' },\n          { step: 'Valuation Models', completed: false, score: 0, next: 'PRIVATE_DCF() & PRIVATE_MULTIPLES()' },\n          { step: 'Risk Assessment', completed: false, score: 0, next: 'PRIVATE_RISK() & PRIVATE_SCENARIO()' },\n          { step: 'Benchmarking', completed: false, score: 0, next: 'PRIVATE_BENCHMARKS() & PRIVATE_COMPS()' },\n          { step: 'Advanced Models', completed: false, score: 0, next: 'PRIVATE_LBO() & PRIVATE_MONTE_CARLO()' },\n          { step: 'Final Report', completed: false, score: 0, next: 'PRIVATE_EXPORT()' }\n        ];\n        \n        const overallProgress = workflowSteps.filter(step => step.completed).length / workflowSteps.length * 100;\n        const nextStep = workflowSteps.find(step => !step.completed);\n        \n        let content = `Private Analysis Workflow\\n\\n📋 WORKFLOW PROGRESS: ${overallProgress.toFixed(0)}% Complete\\n\\n🔄 ANALYSIS STEPS:\\n`;\n        \n        workflowSteps.forEach((step, i) => {\n          const status = step.completed ? '✅' : i === workflowSteps.findIndex(s => !s.completed) ? '🔄' : '⏳';\n          content += `${i + 1}. ${status} ${step.step} ${step.completed ? `(${step.score}%)` : ''}\\n   Next: ${step.next}\\n\\n`;\n        });\n        \n        content += `🎯 RECOMMENDED NEXT STEPS:\\n• ${nextStep ? nextStep.next : 'All steps completed!'}\\n• Focus on ${nextStep ? nextStep.step.toLowerCase() : 'final review'}\\n• Estimated time: ${estimateStepTime(nextStep?.step)}\\n\\n📊 WORKFLOW INSIGHTS:\\n• Data completeness: ${assessDataCompleteness(data)}%\\n• Analysis depth: ${assessAnalysisDepth(workflowSteps)}\\n• Report readiness: ${overallProgress >= 80 ? '🟢 Ready' : overallProgress >= 50 ? '🟡 Partial' : '🔴 Incomplete'}`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_workflow',\n            workflowSteps,\n            progress: overallProgress,\n            nextStep: nextStep?.step\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Workflow analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_DASHBOARD: {\n    execute: async (parsedCommand, context, processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        \n        // Key metrics calculation\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const grossProfit = statements.grossProfit?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const ebitda = operatingIncome + (statements.depreciation?.[latestIndex] || revenue * 0.02);\n        \n        // Growth metrics\n        const revenueGrowth = latestIndex > 0 && statements.totalRevenue?.[latestIndex - 1] > 0 ?\n          ((revenue / statements.totalRevenue[latestIndex - 1]) - 1) * 100 : 0;\n        \n        // Margins\n        const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;\n        const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;\n        const ebitdaMargin = revenue > 0 ? (ebitda / revenue) * 100 : 0;\n        \n        // Valuation estimates\n        const revenueMultiple = 2.5;\n        const ebitdaMultiple = 10.0;\n        const impliedValuation = (revenue * revenueMultiple + ebitda * ebitdaMultiple) / 2;\n        \n        // Performance scoring\n        const performanceScore = calculatePerformanceScore({\n          revenueGrowth, grossMargin, operatingMargin, ebitdaMargin\n        });\n        \n        let content = `📊 EXECUTIVE DASHBOARD\\n\\n💰 FINANCIAL SNAPSHOT (${data.periods[latestIndex]}):\\n`;\n        content += `┌─────────────────────────────────────┐\\n`;\n        content += `│ Revenue:        ${formatCurrency(revenue).padEnd(20)} │\\n`;\n        content += `│ EBITDA:         ${formatCurrency(ebitda).padEnd(20)} │\\n`;\n        content += `│ Operating Inc:  ${formatCurrency(operatingIncome).padEnd(20)} │\\n`;\n        content += `│ Est. Valuation: ${formatCurrency(impliedValuation).padEnd(20)} │\\n`;\n        content += `└─────────────────────────────────────┘\\n\\n`;\n        \n        content += `📈 KEY PERFORMANCE INDICATORS:\\n`;\n        content += `• Revenue Growth:    ${revenueGrowth >= 0 ? '+' : ''}${revenueGrowth.toFixed(1)}% ${getGrowthIcon(revenueGrowth)}\\n`;\n        content += `• Gross Margin:      ${grossMargin.toFixed(1)}% ${getMarginIcon(grossMargin, 'gross')}\\n`;\n        content += `• Operating Margin:  ${operatingMargin.toFixed(1)}% ${getMarginIcon(operatingMargin, 'operating')}\\n`;\n        content += `• EBITDA Margin:     ${ebitdaMargin.toFixed(1)}% ${getMarginIcon(ebitdaMargin, 'ebitda')}\\n\\n`;\n        \n        content += `🎯 PERFORMANCE SCORE: ${performanceScore}/100\\n`;\n        content += `Rating: ${getPerformanceRating(performanceScore)}\\n\\n`;\n        \n        content += `🔍 QUICK ACTIONS:\\n• Run PRIVATE_DCF() for detailed valuation\\n• Execute PRIVATE_BENCHMARKS() for peer comparison\\n• Use PRIVATE_SCENARIO() for risk modeling\\n• Try PRIVATE_QUALITY() for investment grade analysis`;\n        \n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dashboard',\n            metrics: { revenue, ebitda, operatingIncome, impliedValuation },\n            kpis: { revenueGrowth, grossMargin, operatingMargin, ebitdaMargin },\n            performanceScore\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Dashboard generation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['period'] }\n  },\n\n  PRIVATE: {\n    execute: async (parsedCommand, context, processor) => {\n      const commands = [\n        // Core Analysis Commands\n        { cmd: 'PRIVATE_LOAD()', desc: 'Load and validate private financial data', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_SUMMARY()', desc: 'Generate executive summary of company performance', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_DCF()', desc: 'Run discounted cash flow valuation analysis', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_RATIOS()', desc: 'Calculate comprehensive financial ratios', cat: '📊 CORE ANALYSIS' },\n        \n        // Valuation Commands\n        { cmd: 'PRIVATE_WATERFALL()', desc: 'DCF waterfall and value bridge analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_COMPS()', desc: 'Comparable company trading multiples analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_LBO()', desc: 'Leveraged buyout model and returns analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_MULTIPLES()', desc: 'Valuation using industry multiples approach', cat: '💰 VALUATION' },\n        \n        // Analytics Commands\n        { cmd: 'PRIVATE_QUALITY()', desc: 'Business quality and investment grade assessment', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_BENCHMARKS()', desc: 'Compare metrics against industry benchmarks', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_CASHFLOW()', desc: 'Analyze cash flow generation and quality', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_GROWTH()', desc: 'Assess revenue growth trends and sustainability', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_RISK()', desc: 'Evaluate business risk factors and volatility', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_MONTE_CARLO()', desc: 'Monte Carlo simulation for valuation ranges', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_SCENARIO()', desc: 'Run bull/base/bear case scenario analysis', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_SENSITIVITY()', desc: 'Sensitivity analysis on key variables', cat: '📈 ANALYTICS' },\n        \n        // Automation Commands\n        { cmd: 'PRIVATE_WORKFLOW()', desc: 'Interactive analysis workflow with recommendations', cat: '🤖 AUTOMATION' },\n        \n        // Reporting Commands\n        { cmd: 'PRIVATE_DASHBOARD()', desc: 'Executive dashboard with key metrics summary', cat: '📋 REPORTING' },\n        \n        // Data Management Commands\n        { cmd: 'PRIVATE_VALIDATE()', desc: 'Validate data quality and completeness', cat: '💾 DATA MANAGEMENT' },\n        { cmd: 'PRIVATE_EXPORT()', desc: 'Export analysis data and results', cat: '💾 DATA MANAGEMENT' },\n        \n        // Utility Commands\n        { cmd: 'PRIVATE_HELP()', desc: 'Show all available private analysis commands', cat: '🛠️ UTILITY' }\n      ];\n      \n      let content = `🚀 **Private Analysis CLI Commands (${commands.length} Total)**\\n\\n`;\n      \n      // Group commands by category\n      const categories = [...new Set(commands.map(cmd => cmd.cat))];\n      \n      categories.forEach(category => {\n        const categoryCommands = commands.filter(cmd => cmd.cat === category);\n        content += `### **${category}**\\n`;\n        categoryCommands.forEach(cmd => {\n          content += `- **${cmd.cmd}** - ${cmd.desc}\\n`;\n        });\n        content += `\\n`;\n      });\n      \n      content += `### **💡 USAGE EXAMPLES:**\\n`;\n      content += `\\`\\`\\`\\n`;\n      content += `PRIVATE_LOAD()           # Start with data validation\\n`;\n      content += `PRIVATE_SUMMARY()        # Get company overview\\n`;\n      content += `PRIVATE_DCF()           # Run DCF valuation\\n`;\n      content += `PRIVATE_COMPS()         # Comparable analysis\\n`;\n      content += `PRIVATE_LBO()           # LBO modeling\\n`;\n      content += `PRIVATE_DASHBOARD()     # Executive summary\\n`;\n      content += `PRIVATE_WORKFLOW()      # Guided analysis\\n`;\n      content += `\\`\\`\\`\\n\\n`;\n      \n      content += `**All commands work with the default private financial data and provide professional-grade analysis suitable for investment banking, private equity, and corporate finance workflows.**`;\n      \n      return {\n        type: 'success',\n        content,\n        data: {\n          analysis: 'private_commands_list',\n          commands: commands.map(cmd => cmd.cmd),\n          totalCommands: commands.length\n        }\n      };\n    },\n    parameterSchema: { required: [], optional: [] }\n  }\n};\n","/**\n * Command Initializer\n * Registers all available commands with the command registry\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { coreCommands } from './commands/coreCommands';\nimport { portfolioCommands } from './commands/portfolioCommands';\nimport { valuationCommands } from './commands/valuationCommands';\nimport { technicalCommands } from './commands/technicalCommands';\nimport { esgCommands } from './commands/esgCommands';\nimport { automationCommands } from './commands/automationCommands';\nimport { dataCommands } from './commands/dataCommands';\nimport { systemCommands } from './commands/systemCommands';\nimport { persistenceCommands } from './commands/persistenceCommands';\nimport { privateAnalysisCommands } from './commands/privateAnalysisCommands';\n\n/**\n * Initialize all commands in the registry\n */\nexport function initializeCommands() {\n  // Register Core Commands\n  commandRegistry.register('DCF', coreCommands.DCF, {\n    category: 'CORE',\n    description: 'Discounted Cash Flow valuation with real-time data',\n    usage: 'DCF(ticker)',\n    examples: ['DCF(AAPL)', 'DCF(MSFT)'],\n    tags: ['valuation', 'dcf', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('LBO', coreCommands.LBO, {\n    category: 'CORE',\n    description: 'Leveraged Buyout analysis with return projections',\n    usage: 'LBO(ticker)',\n    examples: ['LBO(TSLA)', 'LBO(NVDA)'],\n    tags: ['lbo', 'private-equity', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('COMP', coreCommands.COMP, {\n    category: 'CORE',\n    description: 'Comparable company analysis with peer multiples',\n    usage: 'COMP(ticker)',\n    examples: ['COMP(GOOGL)', 'COMP(META)'],\n    tags: ['comparable', 'multiples', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('FETCH', coreCommands.FETCH, {\n    category: 'CORE',\n    description: 'Comprehensive company data and financial metrics',\n    usage: 'FETCH(ticker)',\n    examples: ['FETCH(AMZN)', 'FETCH(NFLX)'],\n    tags: ['data', 'profile', 'metrics'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Private Analysis Commands\n  commandRegistry.register('PRIVATE_DCF', privateAnalysisCommands.PRIVATE_DCF, {\n    category: 'CORE',\n    description: 'DCF valuation using private company financial data',\n    usage: 'PRIVATE_DCF()',\n    examples: ['PRIVATE_DCF()'],\n    tags: ['private', 'dcf', 'valuation', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RATIOS', privateAnalysisCommands.PRIVATE_RATIOS, {\n    category: 'CORE',\n    description: 'Financial ratios analysis for private company data',\n    usage: 'PRIVATE_RATIOS()',\n    examples: ['PRIVATE_RATIOS()'],\n    tags: ['private', 'ratios', 'analysis', 'margins'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SUMMARY', privateAnalysisCommands.PRIVATE_SUMMARY, {\n    category: 'CORE',\n    description: 'Comprehensive financial summary of private company',\n    usage: 'PRIVATE_SUMMARY()',\n    examples: ['PRIVATE_SUMMARY()'],\n    tags: ['private', 'summary', 'overview', 'financial'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LOAD', privateAnalysisCommands.PRIVATE_LOAD, {\n    category: 'DATA',\n    description: 'Load and verify private company financial data',\n    usage: 'PRIVATE_LOAD()',\n    examples: ['PRIVATE_LOAD()'],\n    tags: ['private', 'data', 'load', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_MONTE_CARLO', privateAnalysisCommands.PRIVATE_MONTE_CARLO, {\n    category: 'ANALYTICS',\n    description: 'Monte Carlo simulation for private company valuation',\n    usage: 'PRIVATE_MONTE_CARLO()',\n    examples: ['PRIVATE_MONTE_CARLO()', 'PRIVATE_MONTE_CARLO(5000)'],\n    tags: ['private', 'monte-carlo', 'simulation', 'risk'],\n    parameterSchema: {\n      required: [],\n      optional: ['iterations']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SCENARIO', privateAnalysisCommands.PRIVATE_SCENARIO, {\n    category: 'ANALYTICS',\n    description: 'Scenario analysis for private company valuation',\n    usage: 'PRIVATE_SCENARIO()',\n    examples: ['PRIVATE_SCENARIO()'],\n    tags: ['private', 'scenario', 'analysis', 'valuation'],\n    parameterSchema: {\n      required: [],\n      optional: ['scenarios']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_GROWTH', privateAnalysisCommands.PRIVATE_GROWTH, {\n    category: 'ANALYTICS',\n    description: 'Growth trend analysis for private company',\n    usage: 'PRIVATE_GROWTH()',\n    examples: ['PRIVATE_GROWTH()'],\n    tags: ['private', 'growth', 'trends', 'cagr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RISK', privateAnalysisCommands.PRIVATE_RISK, {\n    category: 'ANALYTICS',\n    description: 'Risk assessment for private company',\n    usage: 'PRIVATE_RISK()',\n    examples: ['PRIVATE_RISK()'],\n    tags: ['private', 'risk', 'volatility', 'assessment'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_VALIDATE', privateAnalysisCommands.PRIVATE_VALIDATE, {\n    category: 'DATA',\n    description: 'Validate private company financial data',\n    usage: 'PRIVATE_VALIDATE()',\n    examples: ['PRIVATE_VALIDATE()'],\n    tags: ['private', 'validation', 'data-quality', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_EXPORT', privateAnalysisCommands.PRIVATE_EXPORT, {\n    category: 'DATA',\n    description: 'Export private company analysis results',\n    usage: 'PRIVATE_EXPORT()',\n    examples: ['PRIVATE_EXPORT()', 'PRIVATE_EXPORT(csv)'],\n    tags: ['private', 'export', 'data', 'backup'],\n    parameterSchema: {\n      required: [],\n      optional: ['format']\n    }\n  });\n\n  // Register Advanced Private Analysis Commands\n  commandRegistry.register('PRIVATE_WATERFALL', privateAnalysisCommands.PRIVATE_WATERFALL, {\n    category: 'VALUATION',\n    description: 'DCF waterfall and value bridge analysis for private companies',\n    usage: 'PRIVATE_WATERFALL()',\n    examples: ['PRIVATE_WATERFALL()'],\n    tags: ['private', 'dcf', 'waterfall', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_COMPS', privateAnalysisCommands.PRIVATE_COMPS, {\n    category: 'VALUATION',\n    description: 'Comparable company trading multiples analysis',\n    usage: 'PRIVATE_COMPS()',\n    examples: ['PRIVATE_COMPS()'],\n    tags: ['private', 'comparables', 'trading-multiples', 'peer-analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['sector', 'size']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LBO', privateAnalysisCommands.PRIVATE_LBO, {\n    category: 'VALUATION',\n    description: 'Leveraged buyout model and returns analysis',\n    usage: 'PRIVATE_LBO()',\n    examples: ['PRIVATE_LBO()'],\n    tags: ['private', 'lbo', 'leveraged-buyout', 'pe-analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['leverage', 'holdPeriod', 'exitMultiple']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_QUALITY', privateAnalysisCommands.PRIVATE_QUALITY, {\n    category: 'ANALYTICS',\n    description: 'Business quality and investment grade assessment',\n    usage: 'PRIVATE_QUALITY()',\n    examples: ['PRIVATE_QUALITY()'],\n    tags: ['private', 'quality', 'investment-grade', 'assessment'],\n    parameterSchema: {\n      required: [],\n      optional: ['weights']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_BENCHMARKS', privateAnalysisCommands.PRIVATE_BENCHMARKS, {\n    category: 'ANALYTICS',\n    description: 'Compare metrics against industry benchmarks',\n    usage: 'PRIVATE_BENCHMARKS()',\n    examples: ['PRIVATE_BENCHMARKS()'],\n    tags: ['private', 'benchmarks', 'industry', 'comparison'],\n    parameterSchema: {\n      required: [],\n      optional: ['industry']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_CASHFLOW', privateAnalysisCommands.PRIVATE_CASHFLOW, {\n    category: 'ANALYTICS',\n    description: 'Analyze cash flow generation and quality',\n    usage: 'PRIVATE_CASHFLOW()',\n    examples: ['PRIVATE_CASHFLOW()'],\n    tags: ['private', 'cashflow', 'quality', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['years']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_MULTIPLES', privateAnalysisCommands.PRIVATE_MULTIPLES, {\n    category: 'VALUATION',\n    description: 'Valuation using industry multiples approach',\n    usage: 'PRIVATE_MULTIPLES()',\n    examples: ['PRIVATE_MULTIPLES()'],\n    tags: ['private', 'multiples', 'valuation', 'industry'],\n    parameterSchema: {\n      required: [],\n      optional: ['industry', 'size']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SENSITIVITY', privateAnalysisCommands.PRIVATE_SENSITIVITY, {\n    category: 'ANALYTICS',\n    description: 'Sensitivity analysis on key variables',\n    usage: 'PRIVATE_SENSITIVITY()',\n    examples: ['PRIVATE_SENSITIVITY()'],\n    tags: ['private', 'sensitivity', 'analysis', 'variables'],\n    parameterSchema: {\n      required: [],\n      optional: ['variables', 'ranges']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_WORKFLOW', privateAnalysisCommands.PRIVATE_WORKFLOW, {\n    category: 'AUTOMATION',\n    description: 'Interactive analysis workflow with recommendations',\n    usage: 'PRIVATE_WORKFLOW()',\n    examples: ['PRIVATE_WORKFLOW()'],\n    tags: ['private', 'workflow', 'guidance', 'automation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_DASHBOARD', privateAnalysisCommands.PRIVATE_DASHBOARD, {\n    category: 'REPORTING',\n    description: 'Executive dashboard with key metrics summary',\n    usage: 'PRIVATE_DASHBOARD()',\n    examples: ['PRIVATE_DASHBOARD()'],\n    tags: ['private', 'dashboard', 'executive', 'summary'],\n    parameterSchema: {\n      required: [],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('PRIVATE', privateAnalysisCommands.PRIVATE, {\n    category: 'UTILITY',\n    description: 'Show all available Private Analysis commands (shortcut)',\n    usage: 'PRIVATE()',\n    examples: ['PRIVATE()', 'private'],\n    tags: ['private', 'help', 'commands', 'list'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Portfolio Commands\n  commandRegistry.register('PORTFOLIO', portfolioCommands.PORTFOLIO, {\n    category: 'PORTFOLIO',\n    description: 'Portfolio analysis with risk and diversification metrics',\n    usage: 'PORTFOLIO(tickers, weights)',\n    examples: ['PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])', 'PORTFOLIO([SPY,QQQ], [0.6,0.4])'],\n    tags: ['portfolio', 'diversification', 'allocation'],\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RISK_METRICS', portfolioCommands.RISK_METRICS, {\n    category: 'PORTFOLIO',\n    description: 'Comprehensive risk analysis including VaR, Sharpe ratio, and volatility',\n    usage: 'RISK_METRICS(ticker, period)',\n    examples: ['RISK_METRICS(AAPL)', 'RISK_METRICS(TSLA, 252)'],\n    tags: ['risk', 'var', 'volatility', 'sharpe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('CORRELATION_MATRIX', portfolioCommands.CORRELATION_MATRIX, {\n    category: 'PORTFOLIO',\n    description: 'Cross-asset correlation analysis for diversification insights',\n    usage: 'CORRELATION_MATRIX(tickers)',\n    examples: ['CORRELATION_MATRIX([AAPL,MSFT,GOOGL])', 'CORRELATION_MATRIX([SPY,QQQ,IWM])'],\n    tags: ['correlation', 'diversification', 'matrix'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('EFFICIENT_FRONTIER', portfolioCommands.EFFICIENT_FRONTIER, {\n    category: 'PORTFOLIO',\n    description: 'Modern portfolio theory optimization and efficient frontier analysis',\n    usage: 'EFFICIENT_FRONTIER(tickers)',\n    examples: ['EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])', 'EFFICIENT_FRONTIER([SPY,QQQ,IWM,EFA])'],\n    tags: ['optimization', 'efficient-frontier', 'mpt'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DRAWDOWN', portfolioCommands.DRAWDOWN, {\n    category: 'PORTFOLIO',\n    description: 'Maximum drawdown analysis and recovery time estimation',\n    usage: 'DRAWDOWN(ticker, period)',\n    examples: ['DRAWDOWN(AAPL)', 'DRAWDOWN(TSLA, 500)'],\n    tags: ['drawdown', 'risk', 'recovery'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  // Register Advanced Valuation Commands\n  commandRegistry.register('DDM', valuationCommands.DDM, {\n    category: 'VALUATION',\n    description: 'Dividend Discount Model with Gordon Growth and Two-Stage analysis',\n    usage: 'DDM(ticker)',\n    examples: ['DDM(KO)', 'DDM(JNJ)'],\n    tags: ['dividend', 'ddm', 'gordon-growth'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RESIDUAL_INCOME', valuationCommands.RESIDUAL_INCOME, {\n    category: 'VALUATION',\n    description: 'Residual Income Model for economic value analysis',\n    usage: 'RESIDUAL_INCOME(ticker)',\n    examples: ['RESIDUAL_INCOME(AAPL)', 'RESIDUAL_INCOME(MSFT)'],\n    tags: ['residual-income', 'economic-value', 'roe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('ASSET_BASED', valuationCommands.ASSET_BASED, {\n    category: 'VALUATION',\n    description: 'Asset-based valuation with market value adjustments',\n    usage: 'ASSET_BASED(ticker)',\n    examples: ['ASSET_BASED(BRK.A)', 'ASSET_BASED(BAC)'],\n    tags: ['asset-based', 'nav', 'liquidation'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Technical Analysis Commands\n  commandRegistry.register('TECHNICALS', technicalCommands.TECHNICALS, {\n    category: 'TECHNICAL',\n    description: 'Comprehensive technical analysis with RSI, MACD, Bollinger Bands',\n    usage: 'TECHNICALS(ticker)',\n    examples: ['TECHNICALS(AAPL)', 'TECHNICALS(SPY)'],\n    tags: ['technical', 'rsi', 'macd', 'bollinger'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SUPPORT_RESISTANCE', technicalCommands.SUPPORT_RESISTANCE, {\n    category: 'TECHNICAL',\n    description: 'Key price levels and breakout targets analysis',\n    usage: 'SUPPORT_RESISTANCE(ticker)',\n    examples: ['SUPPORT_RESISTANCE(TSLA)', 'SUPPORT_RESISTANCE(QQQ)'],\n    tags: ['support', 'resistance', 'levels', 'breakout'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register ESG & Alternative Data Commands\n  commandRegistry.register('ESG_SCORE', esgCommands.ESG_SCORE, {\n    category: 'ESG',\n    description: 'Environmental, social, governance analysis and scoring',\n    usage: 'ESG_SCORE(ticker)',\n    examples: ['ESG_SCORE(AAPL)', 'ESG_SCORE(TSLA)'],\n    tags: ['esg', 'environmental', 'social', 'governance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SOCIAL_SENTIMENT', esgCommands.SOCIAL_SENTIMENT, {\n    category: 'ESG',\n    description: 'Social media sentiment analysis across platforms',\n    usage: 'SOCIAL_SENTIMENT(ticker, days)',\n    examples: ['SOCIAL_SENTIMENT(AAPL)', 'SOCIAL_SENTIMENT(TSLA, 30)'],\n    tags: ['sentiment', 'social-media', 'twitter', 'reddit'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  commandRegistry.register('NEWS_IMPACT', esgCommands.NEWS_IMPACT, {\n    category: 'ESG',\n    description: 'News sentiment and price impact analysis',\n    usage: 'NEWS_IMPACT(ticker, days)',\n    examples: ['NEWS_IMPACT(AAPL)', 'NEWS_IMPACT(MSFT, 14)'],\n    tags: ['news', 'sentiment', 'impact', 'catalyst'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Data Management Commands\n  commandRegistry.register('EXPORT_JSON', dataCommands.EXPORT_JSON, {\n    category: 'DATA',\n    description: 'Export data to JSON format for backup and sharing',\n    usage: 'EXPORT_JSON(dataType, filename)',\n    examples: ['EXPORT_JSON(\"watchlists\")', 'EXPORT_JSON(\"all\", \"backup.json\")'],\n    tags: ['export', 'backup', 'json'],\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  });\n\n  commandRegistry.register('CACHE_STATS', dataCommands.CACHE_STATS, {\n    category: 'DATA',\n    description: 'View cache performance and memory usage statistics',\n    usage: 'CACHE_STATS()',\n    examples: ['CACHE_STATS()'],\n    tags: ['cache', 'performance', 'memory'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DATA_QUALITY', dataCommands.DATA_QUALITY, {\n    category: 'DATA',\n    description: 'Analyze data completeness and quality for a stock',\n    usage: 'DATA_QUALITY(ticker)',\n    examples: ['DATA_QUALITY(AAPL)', 'DATA_QUALITY(TSLA)'],\n    tags: ['quality', 'validation', 'completeness'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BENCHMARK', dataCommands.BENCHMARK, {\n    category: 'DATA',\n    description: 'Compare stock performance against benchmark index',\n    usage: 'BENCHMARK(ticker, benchmark)',\n    examples: ['BENCHMARK(AAPL, SPY)', 'BENCHMARK(TSLA, QQQ)'],\n    tags: ['benchmark', 'comparison', 'performance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  });\n\n  // Register System & Performance Commands\n  commandRegistry.register('PERFORMANCE_TEST', systemCommands.PERFORMANCE_TEST, {\n    category: 'SYSTEM',\n    description: 'Run comprehensive system performance benchmarks',\n    usage: 'PERFORMANCE_TEST()',\n    examples: ['PERFORMANCE_TEST()'],\n    tags: ['performance', 'benchmark', 'system'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('API_USAGE', systemCommands.API_USAGE, {\n    category: 'SYSTEM',\n    description: 'Monitor API usage, rate limits, and costs',\n    usage: 'API_USAGE()',\n    examples: ['API_USAGE()'],\n    tags: ['api', 'usage', 'limits', 'cost'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('CONFIG', systemCommands.CONFIG, {\n    category: 'SYSTEM',\n    description: 'View and update system configuration settings',\n    usage: 'CONFIG(setting, value)',\n    examples: ['CONFIG()', 'CONFIG(\"currency\", \"EUR\")', 'CONFIG(\"precision\", 3)'],\n    tags: ['config', 'settings', 'preferences'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  // Register Persistence & Privacy Commands\n  commandRegistry.register('BACKUP_CREATE', persistenceCommands.BACKUP_CREATE, {\n    category: 'PERSISTENCE',\n    description: 'Create a backup of all user data',\n    usage: 'BACKUP_CREATE(description)',\n    examples: ['BACKUP_CREATE()', 'BACKUP_CREATE(\"Before major changes\")'],\n    tags: ['backup', 'data', 'export'],\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  });\n\n  commandRegistry.register('BACKUP_LIST', persistenceCommands.BACKUP_LIST, {\n    category: 'PERSISTENCE',\n    description: 'List all available backups',\n    usage: 'BACKUP_LIST()',\n    examples: ['BACKUP_LIST()'],\n    tags: ['backup', 'list', 'management'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BACKUP_RESTORE', persistenceCommands.BACKUP_RESTORE, {\n    category: 'PERSISTENCE',\n    description: 'Restore data from a backup',\n    usage: 'BACKUP_RESTORE(backupId, overwrite)',\n    examples: ['BACKUP_RESTORE(\"backup_123\")', 'BACKUP_RESTORE(\"backup_123\", \"true\")'],\n    tags: ['backup', 'restore', 'recovery'],\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  });\n\n  commandRegistry.register('STORAGE_STATS', persistenceCommands.STORAGE_STATS, {\n    category: 'PERSISTENCE',\n    description: 'View storage usage and statistics',\n    usage: 'STORAGE_STATS()',\n    examples: ['STORAGE_STATS()'],\n    tags: ['storage', 'statistics', 'usage'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_CLEANUP', persistenceCommands.PRIVACY_CLEANUP, {\n    category: 'PERSISTENCE',\n    description: 'Clean up expired data according to privacy policies',\n    usage: 'PRIVACY_CLEANUP()',\n    examples: ['PRIVACY_CLEANUP()'],\n    tags: ['privacy', 'cleanup', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_SETTINGS', persistenceCommands.PRIVACY_SETTINGS, {\n    category: 'PERSISTENCE',\n    description: 'View and update privacy settings',\n    usage: 'PRIVACY_SETTINGS(setting, value)',\n    examples: ['PRIVACY_SETTINGS()', 'PRIVACY_SETTINGS(\"analytics\", \"false\")'],\n    tags: ['privacy', 'settings', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  commandRegistry.register('SYNC_STATUS', persistenceCommands.SYNC_STATUS, {\n    category: 'PERSISTENCE',\n    description: 'View data synchronization status',\n    usage: 'SYNC_STATUS()',\n    examples: ['SYNC_STATUS()'],\n    tags: ['sync', 'cloud', 'status'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PERSISTENCE_TEST', persistenceCommands.PERSISTENCE_TEST, {\n    category: 'PERSISTENCE',\n    description: 'Run comprehensive persistence layer tests',\n    usage: 'PERSISTENCE_TEST()',\n    examples: ['PERSISTENCE_TEST()'],\n    tags: ['test', 'debug', 'validation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Utility Commands\n  commandRegistry.register('HELP', {\n    execute: async (parsedCommand, context, processor) => {\n      const [category] = parsedCommand.parameters;\n      \n      // Show ALL commands in detail\n      if (category && category.toLowerCase() === 'all') {\n        const allCommands = commandRegistry.getAllCommands();\n        const categories = commandRegistry.getAllCategories();\n        \n        let content = `📚 COMPREHENSIVE COMMAND REFERENCE\\n`;\n        content += `FinanceAnalyst Pro Terminal v2.4.0 - Complete Command Suite\\n`;\n        content += `═════════════════════════════════════════════════════════════\\n\\n`;\n        \n        // Group commands by category\n        categories.forEach(cat => {\n          const categoryCommands = commandRegistry.getCommandsByCategory(cat.key);\n          if (categoryCommands.length > 0) {\n            content += `${cat.icon} ${cat.name.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n            content += `${cat.description}\\n`;\n            content += '─'.repeat(50) + '\\n';\n            \n            categoryCommands.forEach(cmd => {\n              content += `\\n• ${cmd.usage}\\n`;\n              content += `  ${cmd.description}\\n`;\n              if (cmd.examples && cmd.examples.length > 0) {\n                content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n              }\n              if (cmd.tags && cmd.tags.length > 0) {\n                content += `  Tags: ${cmd.tags.join(', ')}\\n`;\n              }\n            });\n            content += '\\n';\n          }\n        });\n        \n        content += `\\n📊 SUMMARY: ${allCommands.length} total commands across ${categories.length} categories\\n`;\n        content += `\\n💡 TIP: Use HELP(category) for specific category details\\n`;\n        content += `💡 TIP: Use HELP() for quick overview and featured commands`;\n        \n        return {\n          type: 'system',\n          content\n        };\n      }\n      \n      if (category) {\n        // Show commands for specific category\n        const categoryCommands = commandRegistry.getCommandsByCategory(category.toUpperCase());\n        if (categoryCommands.length === 0) {\n          return {\n            type: 'error',\n            content: `Unknown category: ${category}. Use HELP() to see all categories or HELP(ALL) for complete command list.`\n          };\n        }\n\n        let content = `📋 ${category.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n        content += '═'.repeat(40) + '\\n\\n';\n        \n        categoryCommands.forEach(cmd => {\n          content += `• ${cmd.usage}\\n`;\n          content += `  ${cmd.description}\\n`;\n          if (cmd.examples && cmd.examples.length > 0) {\n            content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n          }\n          content += '\\n';\n        });\n        \n        content += `Use HELP() for overview or HELP(ALL) for all commands.`;\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      // Show all categories and featured commands (default view)\n      const categories = commandRegistry.getAllCategories();\n      const stats = commandRegistry.getCommandStats();\n      const totalCommands = Object.values(stats).reduce((sum, cat) => sum + cat.count, 0);\n\n      const content = `🚀 FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite\\n\\n📊 COMMAND CATEGORIES:\\n${categories.map(cat => \n  `${cat.icon} ${cat.name} (${stats[cat.key]?.count || 0} commands)\\n   ${cat.description}`\n).join('\\n\\n')}\\n\\n⭐ FEATURED COMMANDS:\\n• DCF(AAPL) - Discounted Cash Flow with live data\\n• LBO(TSLA) - Leveraged Buyout analysis\\n• PORTFOLIO([AAPL,MSFT], [0.5,0.5]) - Portfolio analysis\\n• RISK_METRICS(GOOGL) - Comprehensive risk analysis\\n• CORRELATION_MATRIX([AAPL,MSFT,GOOGL]) - Cross-asset correlations\\n• PRIVATE_DCF() - Private company DCF valuation\\n• PRIVATE_RATIOS() - Private company financial ratios\\n• PRIVATE_SUMMARY() - Private company analysis summary\\n\\n🔧 PRIVATE ANALYSIS COMMANDS:\\n• PRIVATE_LOAD() - Load private company data\\n• PRIVATE_DCF() - DCF valuation for private companies\\n• PRIVATE_RATIOS() - Calculate private company ratios\\n• PRIVATE_SUMMARY() - Generate private company summary\\n\\n💡 HELP COMMANDS:\\n• HELP() - Show this overview (current)\\n• HELP(category) - Show commands for specific category\\n• HELP(ALL) - Show complete list of ALL ${totalCommands} commands\\n\\n📋 AVAILABLE CATEGORIES:\\n${categories.map(cat => `• ${cat.key}`).join(' • ')}\\n\\n🚀 ENHANCED FEATURES:\\n• Watchlists: Create and track custom stock lists\\n• Alerts: Set price and metric notifications\\n• Batch Analysis: Analyze multiple stocks simultaneously\\n• ESG Scoring: Environmental, social, governance analysis\\n• Technical Analysis: RSI, MACD, support/resistance\\n• Advanced Valuation: DDM, residual income, asset-based models\\n• Private Company Analysis: Full financial modeling suite\\n\\n📊 ${categories.length} categories • ${totalCommands} total commands available\\n\\n💡 Pro Tip: Use HELP(ALL) to see every single command with examples!`;\n\n      return {\n        type: 'system',\n        content\n      };\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['category']\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show available commands and usage information',\n    usage: 'HELP(category)',\n    examples: ['HELP()', 'HELP(PORTFOLIO)', 'HELP(CORE)', 'HELP(ALL)'],\n    tags: ['help', 'documentation', 'commands']\n  });\n\n  commandRegistry.register('CLEAR', {\n    execute: async (parsedCommand, context, processor) => {\n      return {\n        type: 'system',\n        content: 'clear_terminal', // Special flag for terminal to clear\n        action: 'clear'\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Clear the terminal screen',\n    usage: 'CLEAR()',\n    examples: ['CLEAR()'],\n    tags: ['utility', 'clear', 'terminal']\n  });\n\n  commandRegistry.register('STATUS', {\n    execute: async (parsedCommand, context, processor) => {\n      const settings = processor.getAllSettings();\n      const variables = processor.getAllVariables();\n      const history = processor.getHistory(5);\n\n      const content = `System Status Report\n\n🔧 SYSTEM CONFIGURATION:\n• Currency: ${settings.currency}\n• Precision: ${settings.precision} decimal places\n• Date Format: ${settings.dateFormat}\n• Demo Mode: ${context.demoMode ? 'Enabled' : 'Disabled'}\n\n📊 SESSION STATISTICS:\n• Commands Executed: ${history.length}\n• Variables Stored: ${Object.keys(variables).length}\n• Last Command: ${history[history.length - 1]?.input || 'None'}\n\n🌐 API STATUS:\n• Data Sources: ${context.demoMode ? 'Demo Data' : 'Live Market Data'}\n• Rate Limits: Normal\n• Cache Status: Active\n\n💾 MEMORY USAGE:\n• Command History: ${history.length} entries\n• Variable Storage: ${Object.keys(variables).length} variables\n• Cache Size: Optimal\n\n✅ All systems operational`;\n\n      return {\n        type: 'system',\n        content\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show system status and configuration',\n    usage: 'STATUS()',\n    examples: ['STATUS()'],\n    tags: ['status', 'system', 'configuration']\n  });\n\n  console.log('✅ Command registry initialized with', commandRegistry.getAllCommands().length, 'commands');\n}\n\n// Auto-initialize when module is imported\ninitializeCommands();\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport { dataFetchingService } from '../../../services/dataFetching';\nimport {\n  calculateDCFValuation,\n  calculateLBOReturns,\n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../../utils/dataTransformation';\nimport { commandProcessor } from '../../../services/commandProcessor';\nimport { commandRegistry } from '../../../services/commandRegistry';\nimport { persistenceManager } from '../../../services/persistence/PersistenceManager';\n// Import command initializer to ensure commands are registered\nimport '../../../services/commandInitializer';\n\nconst TerminalInterface = ({ onCommandExecute, calculationResults }) => {\n  const [commands, setCommands] = useState([\n    {\n      id: 1,\n      type: 'system',\n      content: 'FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite Ready',\n      timestamp: new Date()\n    },\n    {\n      id: 2,\n      type: 'system',\n      content:\n        'Type \"HELP()\" for available commands or start with DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5])',\n      timestamp: new Date()\n    }\n  ]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestion, setSelectedSuggestion] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const terminalRef = useRef(null);\n  const inputRef = useRef(null);\n  const commandProcessorRef = useRef(commandProcessor);\n\n  // Get available commands from registry for suggestions\n  const getAvailableCommands = () => {\n    const allCommands = commandRegistry.getAllCommands();\n    const commandInfos = allCommands.map(cmdName => {\n      const info = commandRegistry.getCommandInfo(cmdName);\n      return info ? info.usage : cmdName;\n    });\n    return commandInfos;\n  };\n\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [commands]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Initialize persistence layer\n    const initializePersistence = async () => {\n      try {\n        await persistenceManager.initialize();\n        console.log('✅ Persistence layer initialized in terminal');\n      } catch (error) {\n        console.error('❌ Failed to initialize persistence in terminal:', error);\n      }\n    };\n\n    initializePersistence();\n  }, []);\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setCurrentInput(value);\n\n    if (value.length > 0) {\n      const availableCommands = getAvailableCommands();\n      const suggestions = commandRegistry.getSuggestions(value);\n      const commandSuggestions = suggestions.map(s => s.usage);\n      \n      // Also include partial matches from available commands\n      const partialMatches = availableCommands.filter(cmd =>\n        cmd.toLowerCase().includes(value.toLowerCase()) && \n        !commandSuggestions.includes(cmd)\n      );\n      \n      const allSuggestions = [...commandSuggestions, ...partialMatches];\n      setSuggestions(allSuggestions.slice(0, 8));\n      setShowSuggestions(allSuggestions.length > 0);\n      setSelectedSuggestion(0);\n    } else {\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      executeCommand();\n    } else if (e.key === 'ArrowUp' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.max(0, prev - 1));\n    } else if (e.key === 'ArrowDown' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.min(suggestions.length - 1, prev + 1));\n    } else if (e.key === 'Tab' && showSuggestions) {\n      e.preventDefault();\n      setCurrentInput(suggestions[selectedSuggestion]);\n      setShowSuggestions(false);\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  const executeCommand = async() => {\n    if (!currentInput.trim()) return;\n\n    const newCommand = {\n      id: commands.length + 1,\n      type: 'user',\n      content: currentInput,\n      timestamp: new Date()\n    };\n\n    setCommands(prev => [...prev, newCommand]);\n    setIsLoading(true);\n    setCurrentInput('');\n    setShowSuggestions(false);\n\n    try {\n      // Use the new command processor\n      const context = {\n        demoMode: dataFetchingService.demoMode,\n        showLoading: (message) => {\n          const loadingCommand = {\n            id: commands.length + 2,\n            type: 'info',\n            content: message,\n            timestamp: new Date()\n          };\n          setCommands(prev => [...prev, loadingCommand]);\n        }\n      };\n\n      const response = await commandProcessorRef.current.processCommand(currentInput, context);\n\n      // Handle special actions\n      if (response.action === 'clear') {\n        setCommands([\n          {\n            id: 1,\n            type: 'system',\n            content: 'Terminal cleared',\n            timestamp: new Date()\n          }\n        ]);\n        return;\n      }\n\n      const responseCommand = {\n        id: commands.length + 2,\n        type: response.type,\n        content: response.content,\n        timestamp: new Date(),\n        data: response.data\n      };\n\n      setCommands(prev => [...prev, responseCommand]);\n\n      if (onCommandExecute) {\n        onCommandExecute(currentInput, response);\n      }\n    } catch (error) {\n      const errorCommand = {\n        id: commands.length + 2,\n        type: 'error',\n        content: `Error: ${error.message}`,\n        timestamp: new Date()\n      };\n      setCommands(prev => [...prev, errorCommand]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectSuggestion = suggestion => {\n    setCurrentInput(suggestion);\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900 text-green-400 font-mono text-sm\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Terminal\" size={16} className=\"text-green-400\" />\n          <span className=\"text-green-400 font-medium\">Financial Terminal</span>\n          <span className=\"text-xs text-blue-400\">• Enhanced Command Suite</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div\n            className={`w-2 h-2 rounded-full ${isLoading ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`}\n          />\n          <span className=\"text-xs text-gray-400\">{isLoading ? 'Processing...' : 'Connected'}</span>\n        </div>\n      </div>\n\n      {/* Terminal Content */}\n      <div\n        ref={terminalRef}\n        className=\"flex-1 overflow-y-auto p-4 space-y-2\"\n        onClick={() => inputRef.current?.focus()}\n      >\n        {commands.map(command => (\n          <div key={command.id} className=\"space-y-1\">\n            <div className=\"flex items-start space-x-2\">\n              {command.type === 'user' && (\n                <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n              )}\n              {command.type === 'system' && (\n                <Icon name=\"Info\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'success' && (\n                <Icon name=\"CheckCircle\" size={14} className=\"text-green-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'error' && (\n                <Icon name=\"XCircle\" size={14} className=\"text-red-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'warning' && (\n                <Icon name=\"AlertTriangle\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'info' && (\n                <Icon name=\"Info\" size={14} className=\"text-blue-400 mt-0.5 shrink-0\" />\n              )}\n              <div className=\"flex-1\">\n                <pre className=\"whitespace-pre-wrap break-words\">{command.content}</pre>\n                {command.data && (\n                  <div className=\"mt-2 p-2 bg-gray-800 rounded border border-gray-700\">\n                    <div className=\"text-xs text-gray-400\">\n                      Real-time calculation data available • Analysis:{' '}\n                      {command.data.analysis || 'financial'}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-center space-x-2 text-yellow-400\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full\" />\n            <span>Processing command...</span>\n          </div>\n        )}\n\n        {/* Input Line */}\n        <div className=\"flex items-center space-x-2 relative\">\n          <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n          <div className=\"flex-1 relative\">\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={currentInput}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"w-full bg-transparent text-green-400 outline-none border-none\"\n              placeholder=\"Enter command (e.g., DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5]))...\"\n              autoComplete=\"off\"\n              disabled={isLoading}\n            />\n\n            {/* Suggestions Dropdown */}\n            {showSuggestions && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-600 rounded-md shadow-lg z-10 max-h-48 overflow-y-auto\">\n                {suggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className={`px-3 py-2 cursor-pointer text-sm ${\n                      index === selectedSuggestion\n                        ? 'bg-gray-700 text-green-400'\n                        : 'text-gray-300 hover:bg-gray-700'\n                    }`}\n                    onClick={() => selectSuggestion(suggestion)}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerminalInterface;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst VariableInputs = ({ onVariableChange, onBulkEdit }) => {\n  const [activeSection, setActiveSection] = useState('assumptions');\n  const [editMode, setEditMode] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const [variables, setVariables] = useState({\n    assumptions: {\n      revenue_growth: {\n        value: 0.052,\n        unit: '%',\n        description: 'Annual revenue growth rate',\n        category: 'Growth'\n      },\n      ebitda_margin: {\n        value: 0.235,\n        unit: '%',\n        description: 'EBITDA as % of revenue',\n        category: 'Profitability'\n      },\n      tax_rate: { value: 0.25, unit: '%', description: 'Corporate tax rate', category: 'Tax' },\n      capex_revenue: {\n        value: 0.035,\n        unit: '%',\n        description: 'CapEx as % of revenue',\n        category: 'Investment'\n      },\n      working_capital_revenue: {\n        value: 0.02,\n        unit: '%',\n        description: 'Working capital as % of revenue',\n        category: 'Working Capital'\n      },\n      terminal_growth: {\n        value: 0.025,\n        unit: '%',\n        description: 'Long-term growth rate',\n        category: 'Terminal'\n      }\n    },\n    cost_of_capital: {\n      risk_free_rate: {\n        value: 0.032,\n        unit: '%',\n        description: 'Risk-free rate (10Y Treasury)',\n        category: 'Market'\n      },\n      market_premium: {\n        value: 0.065,\n        unit: '%',\n        description: 'Equity risk premium',\n        category: 'Market'\n      },\n      beta: { value: 1.15, unit: 'x', description: 'Asset beta coefficient', category: 'Risk' },\n      cost_of_debt: {\n        value: 0.045,\n        unit: '%',\n        description: 'Pre-tax cost of debt',\n        category: 'Debt'\n      },\n      debt_equity_ratio: {\n        value: 0.4,\n        unit: 'x',\n        description: 'Target debt-to-equity ratio',\n        category: 'Capital Structure'\n      }\n    },\n    market_data: {\n      current_share_price: {\n        value: 125.5,\n        unit: '$',\n        description: 'Current trading price',\n        category: 'Market'\n      },\n      shares_outstanding: {\n        value: 20.0,\n        unit: 'M',\n        description: 'Shares outstanding',\n        category: 'Equity'\n      },\n      market_cap: {\n        value: 2510,\n        unit: '$M',\n        description: 'Current market capitalization',\n        category: 'Valuation'\n      },\n      enterprise_value: {\n        value: 2810,\n        unit: '$M',\n        description: 'Current enterprise value',\n        category: 'Valuation'\n      },\n      net_debt: { value: 300, unit: '$M', description: 'Net debt position', category: 'Debt' }\n    }\n  });\n\n  const sections = [\n    { id: 'assumptions', label: 'Key Assumptions', icon: 'Settings' },\n    { id: 'cost_of_capital', label: 'Cost of Capital', icon: 'Percent' },\n    { id: 'market_data', label: 'Market Data', icon: 'TrendingUp' }\n  ];\n\n  const handleVariableChange = (section, key, newValue) => {\n    const updatedVariables = {\n      ...variables,\n      [section]: {\n        ...variables[section],\n        [key]: {\n          ...variables[section][key],\n          value: parseFloat(newValue) || 0\n        }\n      }\n    };\n    setVariables(updatedVariables);\n\n    if (onVariableChange) {\n      onVariableChange(section, key, newValue);\n    }\n  };\n\n  const formatValue = (value, unit) => {\n    if (unit === '%') {\n      return (value * 100).toFixed(1);\n    } else if (unit === '$' || unit === '$M') {\n      return value.toFixed(2);\n    } else {\n      return value.toFixed(3);\n    }\n  };\n\n  const getVariablesByCategory = sectionData => {\n    const categories = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      const category = variable.category || 'Other';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push({ key, ...variable });\n    });\n    return categories;\n  };\n\n  const filteredVariables = sectionData => {\n    if (!searchTerm) return sectionData;\n\n    const filtered = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      if (\n        key.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        variable.description.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        filtered[key] = variable;\n      }\n    });\n    return filtered;\n  };\n\n  const resetToDefaults = () => {\n    // Reset to default values\n    const defaultVariables = { ...variables };\n    // This would typically reset to saved defaults\n    setVariables(defaultVariables);\n  };\n\n  const exportVariables = () => {\n    const exportData = JSON.stringify(variables, null, 2);\n    const blob = new Blob([exportData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'model_variables.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Sliders\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Variable Inputs</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName={editMode ? 'Check' : 'Edit'}\n            onClick={() => setEditMode(!editMode)}\n          >\n            {editMode ? 'Done' : 'Edit'}\n          </Button>\n          <Button\n            variant=\"outline\" size=\"sm\" iconName=\"Download\"\n            onClick={exportVariables}\n          >\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search variables...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Section Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {sections.map(section => (\n          <button\n            key={section.id}\n            onClick={() => setActiveSection(section.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeSection === section.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={section.icon} size={16} />\n            <span>{section.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Variables Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {Object.entries(getVariablesByCategory(filteredVariables(variables[activeSection]))).map(\n          ([category, categoryVariables]) => (\n            <div key={category} className=\"mb-6\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n                <Icon name=\"Folder\" size={16} />\n                <span>{category}</span>\n              </h4>\n              <div className=\"space-y-3\">\n                {categoryVariables.map(variable => (\n                  <div\n                    key={variable.key}\n                    className=\"p-3 bg-background border border-border rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <label className=\"text-sm font-medium text-foreground capitalize\">\n                          {variable.key.replace(/_/g, ' ')}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">{variable.description}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        {editMode ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <input\n                              type=\"number\"\n                              value={formatValue(variable.value, variable.unit)}\n                              onChange={e =>\n                                handleVariableChange(activeSection, variable.key, e.target.value)\n                              }\n                              step={variable.unit === '%' ? '0.1' : '0.01'}\n                              className=\"w-20 px-2 py-1 text-sm bg-input border border-border rounded text-foreground focus:outline-none focus:ring-1 focus:ring-ring\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">{variable.unit}</span>\n                          </div>\n                        ) : (\n                          <div className=\"text-right\">\n                            <span className=\"text-lg font-semibold text-foreground\">\n                              {formatValue(variable.value, variable.unit)}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground ml-1\">\n                              {variable.unit}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Variable Impact Indicator */}\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-success rounded-full\" />\n                        <span className=\"text-muted-foreground\">Within range</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Icon name=\"TrendingUp\" size={12} />\n                        <span>High impact</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )\n        )}\n\n        {Object.keys(filteredVariables(variables[activeSection])).length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"Search\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No variables found</h4>\n            <p className=\"text-muted-foreground\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n      {/* Footer Actions */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n            <Icon name=\"Info\" size={12} />\n            <span>Changes auto-save every 30 seconds</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\" size=\"sm\" iconName=\"RotateCcw\"\n              onClick={resetToDefaults}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Grid\"\n              onClick={() => onBulkEdit && onBulkEdit()}\n            >\n              Bulk Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VariableInputs;\n","import { useState } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport SEOHead from '../../components/SEO/SEOHead';\nimport Breadcrumbs from '../../components/ui/Breadcrumbs';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport AuditTrail from './components/AuditTrail';\nimport CalculationResults from './components/CalculationResults';\nimport FormulaBuilder from './components/FormulaBuilder';\nimport ModelTemplates from './components/ModelTemplates';\nimport TerminalInterface from './components/TerminalInterface';\nimport VariableInputs from './components/VariableInputs';\n\nconst FinancialModelWorkspace = () => {\n  const [activeLayout, setActiveLayout] = useState('dual-pane');\n  const [leftPanelContent, setLeftPanelContent] = useState('terminal');\n  const [rightPanelContent, setRightPanelContent] = useState('results');\n  const [modelState] = useState({\n    name: 'DCF_Analysis_v2.3',\n    saved: true,\n    calculating: false,\n    lastSaved: new Date()\n  });\n\n  const [calculationResults, setCalculationResults] = useState(null);\n\n  const handleCommandExecute = (command, result) => {\n    setCalculationResults(result);\n  };\n\n  const renderLeftPanel = () => {\n    switch (leftPanelContent) {\n      case 'terminal':\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n      case 'variables':\n        return <VariableInputs />;\n      case 'formulas':\n        return <FormulaBuilder />;\n      case 'templates':\n        return <ModelTemplates />;\n      default:\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n    }\n  };\n\n  const renderRightPanel = () => {\n    switch (rightPanelContent) {\n      case 'results':\n        return <CalculationResults results={calculationResults} />;\n      case 'audit':\n        return <AuditTrail />;\n      default:\n        return <CalculationResults results={calculationResults} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <SEOHead\n        title=\"Financial Model Workspace | Valor-IVX\"\n        description=\"Professional financial modeling workspace with advanced DCF analysis, LBO tools, and real-time collaboration features for finance professionals.\"\n        canonical=\"/\"\n        keywords=\"financial modeling, DCF analysis, LBO modeling, financial workspace, valuation tools, Excel alternative\"\n      />\n      <Header />\n\n      {/* Main Workspace */}\n      <main id=\"main-content\" className=\"flex flex-col h-screen pt-16\" role=\"main\">\n        {/* Breadcrumbs and accessible page heading */}\n        <div className=\"px-4 py-2 bg-gray-900 border-b border-gray-800\">\n          <h1 className=\"sr-only\">Financial Model Workspace</h1>\n          <Breadcrumbs />\n        </div>\n        {/* Toolbar */}\n        <div className=\"bg-gray-800 border-b border-gray-700 px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"FileText\" className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"font-medium\">{modelState.name}</span>\n              <span\n                className={`text-xs px-2 py-1 rounded ${\n                  modelState.saved ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'\n                }`}\n              >\n                {modelState.saved ? 'Saved' : 'Unsaved'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Layout Controls */}\n            <div className=\"flex items-center space-x-1 bg-gray-700 rounded-lg p-1\">\n              <Button\n                variant={activeLayout === 'single-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('single-pane')}\n                aria-label=\"Single-pane layout\"\n              >\n                <Icon name=\"Square\" className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={activeLayout === 'dual-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('dual-pane')}\n                aria-label=\"Dual-pane layout\"\n              >\n                <Icon name=\"Columns\" className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Panel Controls */}\n            <div className=\"flex items-center space-x-1\">\n              <select\n                value={leftPanelContent}\n                onChange={(e) => setLeftPanelContent(e.target.value)}\n                className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                aria-label=\"Select left panel content\"\n              >\n                <option value=\"terminal\">Terminal</option>\n                <option value=\"variables\">Variables</option>\n                <option value=\"formulas\">Formulas</option>\n                <option value=\"templates\">Templates</option>\n              </select>\n\n              {activeLayout === 'dual-pane' && (\n                <select\n                  value={rightPanelContent}\n                  onChange={(e) => setRightPanelContent(e.target.value)}\n                  className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                  aria-label=\"Select right panel content\"\n                >\n                  <option value=\"results\">Results</option>\n                  <option value=\"audit\">Audit Trail</option>\n                </select>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel */}\n          <div\n            className={`${\n              activeLayout === 'dual-pane' ? 'w-1/2' : 'w-full'\n            } border-r border-gray-700 overflow-hidden`}\n          >\n            {renderLeftPanel()}\n          </div>\n\n          {/* Right Panel */}\n          {activeLayout === 'dual-pane' && (\n            <div className=\"w-1/2 overflow-hidden\">\n              {renderRightPanel()}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default FinancialModelWorkspace;\n"],"names":["AuditTrail","calculations","errors","warnings","activeTab","setActiveTab","useState","expandedItems","setExpandedItems","Set","filterLevel","setFilterLevel","mockAuditData","id","timestamp","Date","now","type","operation","formula","result","inputs","FCFF_2024","FCFF_2025","FCFF_2026","FCFF_2027","FCFF_2028","WACC","executionTime","status","cost_equity","cost_debt","tax_rate","debt_ratio","FCF_final","terminal_growth","severity","message","location","suggestion","resolved","acknowledged","validations","check","details","tabs","label","icon","count","length","getStatusIcon","color","getSeverityColor","jsxs","className","children","jsx","Icon","name","size","Button","variant","iconName","map","tab","onClick","calc","toLocaleTimeString","time","toFixed","has","newExpanded","delete","add","toggleExpanded","Object","entries","key","value","error","toLocaleString","warning","validation","CalculationResults","results","onExport","expandedSections","setExpandedSections","mockResults","summary","enterpriseValue","equityValue","sharePrice","impliedReturn","confidence","cashFlows","year","revenue","ebitda","fcf","pv","sensitivity","wacc","growth","matrix","scenarios","probability","irr","multiples","metric","current","peer_avg","premium","formatCurrency","decimals","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercent","width","cf","index","rowIndex","colIndex","Math","abs","scenario","multiple","FormulaBuilder","onFormulaCreate","variables","selectedCategory","setSelectedCategory","draggedFunction","setDraggedFunction","currentFormula","setCurrentFormula","formulaName","setFormulaName","isBuilding","setIsBuilding","dropZoneRef","useRef","functionCategories","valuation","functions","syntax","description","financial","statistical","mathematical","validateFormula","match","category","func","draggable","onDragStart","e","dataTransfer","effectAllowed","handleDragStart","newFormula","addFunction","onChange","target","placeholder","ref","onDragOver","preventDefault","dropEffect","onDrop","disabled","ModelTemplates","onTemplateSelect","onTemplateCreate","searchTerm","setSearchTerm","showCreateModal","setShowCreateModal","templateCategories","templates","complexity","timeToComplete","lastUsed","popularity","features","lbo","comps","merger","getComplexityColor","filteredTemplates","filter","template","toLowerCase","includes","handleTemplateSelect","feature","rows","commandRegistry","constructor","this","commands","Map","categories","aliases","initializeCategories","set","register","handler","metadata","commandName","toUpperCase","commandInfo","usage","examples","parameterSchema","tags","version","deprecated","experimental","forEach","alias","get","push","getHandler","command","aliasTarget","aliasCommand","getCommandInfo","getCommandsByCategory","categoryInfo","cmdName","getAllCommands","Array","from","keys","getAllCategories","searchCommands","query","score","calculateSearchScore","sort","a","b","some","tag","getSuggestions","partial","partialLower","suggestions","startsWith","localeCompare","hasCommand","getCommandStats","stats","categoryKey","commandProcessor","commandHistory","settings","precision","dateFormat","persistenceInitialized","maxHistorySize","initializePersistence","persistenceManager","initialize","loadPersistedData","history","retrieve","isArray","slice","saveData","store","storage","variablesObj","fromEntries","processCommand","input","context","startTime","parsedCommand","parseCommand","historyEntry","success","createErrorResponse","validationResult","validateParameters","valid","execute","catch","trimmed","trim","functionMatch","paramString","parameters","parseParameters","rawInput","parts","split","params","inQuotes","inBrackets","quoteChar","i","char","parseParameterValue","endsWith","arrayContent","item","test","parseFloat","required","optional","join","maxParams","content","cmd","substring","getHistory","limit","clearHistory","setVariable","getVariable","getAllVariables","updateSetting","getSetting","getAllSettings","coreCommands","DCF","async","processor","ticker","loadingMessage","dataFetchingService","demoMode","showLoading","dcfInputs","fetchDCFInputs","dcfResults","calculateDCFValuation","companyName","currentPrice","fairValue","formatPercentage","upside","terminalValue","projections","proj","recommendation","data","analysis","LBO","profile","financials","Promise","all","fetchCompanyProfile","fetchFinancialStatements","lboInputs","price","marketCap","mktCap","debt","totalDebt","cash","totalCash","lboResults","calculateLBOReturns","purchasePrice","equityInvestment","formatNumber","debtToEquity","exitEquityValue","totalReturn","moic","exitEbitda","exitMultiple","exitEnterpriseValue","managementFees","carriedInterest","netReturn","COMP","peers","fetchPeerComparables","companyData","symbol","peRatio","pe","evToEbitda","enterpriseValueOverEBITDA","priceToBook","pb","compAnalysis","calculateComparableMetrics","peer","peerStatistics","median","relativeValuation","peRatioRelative","evEbitdaRelative","priceToBookRelative","marketCapPercentile","min","max","FETCH","industry","sector","fullTimeEmployees","eps","profitMargin","ps","enterpriseValueOverRevenue","bookValue","priceHigh52","priceLow52","beta","dividendYield","portfolioCommands","PORTFOLIO","tickers","weights","tickerArray","weightArray","totalWeight","reduce","sum","w","portfolioData","weight","portfolioValue","stock","weightedBeta","weightedPE","weightedDividendYield","maxWeight","minWeight","concentrationRatio","holdings","metrics","RISK_METRICS","period","volatility","fetchMarketData","sharpeRatio","var95","var99","maxDrawdown","sortinoRatio","sqrt","CORRELATION_MATRIX","stockData","correlationMatrix","j","sectorCorr","betaCorr","correlation","random","totalCorr","avgCorrelation","maxCorr","minCorr","maxPair","minPair","corr","matrixDisplay","padEnd","s","padStart","t","statistics","EFFICIENT_FRONTIER","expectedReturn","frontierPoints","targetReturn","baseWeight","returnAdjustment","normalizedWeights","portfolioReturn","portfolioVolatility","pow","return","optimalPortfolio","best","p","assets","DRAWDOWN","avgDrawdown","drawdownFrequency","recoveryTime","drawdownPeriods","start","end","magnitude","duration","dd","valuationCommands","DDM","currentDividend","dividendGrowthRate","requiredReturn","gordonValue","highGrowthYears","highGrowthRate","terminalGrowthRate","presentValueHighGrowth","presentValueTerminal","twoStageValue","gordonUpside","twoStageUpside","RESIDUAL_INCOME","roe","returnOnEquityTTM","costOfEquity","netIncome","normalIncome","residualIncome","projectionYears","residualIncomeGrowth","totalPVResidualIncome","projectedRI","presentValue","pvTerminalValue","intrinsicValue","valuePerShare","sharesOutstanding","ASSET_BASED","balanceSheet","totalAssets","totalLiabilities","cashAndEquivalents","cashAndCashEquivalents","inventory","ppe","propertyPlantEquipmentNet","intangibleAssets","otherAssets","adjustments","book","market","adjustment","intangibles","other","totalMarketAssets","values","adj","netAssetValue","navPerShare","liquidationValue","liquidationPerShare","technicalCommands","TECHNICALS","sma20","sma50","ema12","ema26","rsi","macd","macdSignal","macdHistogram","bollingerUpper","bollingerLower","bollingerPosition","support1","support2","resistance1","resistance2","signals","signal","indicators","SUPPORT_RESISTANCE","levels","level","strength","touches","nearestSupport","l","nearestResistance","supportDistance","resistanceDistance","distance","esgCommands","ESG_SCORE","sectorMultiplier","Technology","Healthcare","Energy","Utilities","Industrials","Materials","baseSector","sectorScore","companySize","environmentalScore","socialScore","governanceScore","overallScore","riskFactors","opportunities","trends","environmental","social","governance","risk","opp","scores","overall","SOCIAL_SENTIMENT","days","sentimentScore","volumeScore","trendDirection","sources","platform","mentions","floor","sentiment","themes","topic","totalMentions","source","avgSentiment","theme","overallSentiment","NEWS_IMPACT","newsItems","date","headline","impact","priceChange","volume","totalPriceImpact","avgVolume","automationCommands","WATCHLIST","action","watchlists","listName","created","lastUpdated","toISOString","watchlist","change","changes","changePercent","changesPercentage","totalValue","avgChange","worst","analysisResults","r","ALERT","condition","undefined","alerts","alert","replace","triggered","newAlert","shouldTrigger","currentValue","BATCH_ANALYSIS","analysisType","rating","avgScore","topPick","strongBuys","buys","dataCommands","EXPORT_JSON","dataType","filename","exportData","jsonString","JSON","stringify","suggestedFilename","CACHE_STATS","cacheSize","cache","cacheKeys","cacheTypes","hitRate","avgResponseTime","estimatedMemory","DATA_QUALITY","checks","field","quality","revenueTTM","overallQuality","missingFields","completeFields","dataAge","freshnessScore","qualityText","BENCHMARK","benchmark","stockProfile","benchmarkProfile","relativeMetrics","performance","ytd","oneYear","threeYear","fiveYear","benchmarkPerformance","outperformance","x","systemCommands","PERFORMANCE_TEST","tests","cmdStart","resolve","setTimeout","dataStart","memStart","memoryUsage","process","heapUsed","heapTotal","external","round","cacheStart","totalDuration","passedTests","statusIcon","API_USAGE","daily","calls","remaining","monthly","endpoints","dailyUsagePercent","monthlyUsagePercent","totalEndpointCalls","rateLimitStatus","estimatedCost","endpoint","usagePercents","CONFIG","setting","val","validSettings","notifications","oldValue","newValue","persistenceCommands","BACKUP_CREATE","backup","backupService","createBackup","includeSettings","includeWatchlists","includeAlerts","includeHistory","compress","encrypt","backupId","originalSize","compressionRatio","BACKUP_LIST","backups","listBackups","getBackupStats","totalBackups","totalSize","oldestBackup","toLocaleDateString","newestBackup","encryptedBackups","compressedBackups","compressed","encrypted","BACKUP_RESTORE","overwrite","shouldOverwrite","restoreBackup","createBackupBeforeRestore","backupTimestamp","restoreTimestamp","restored","skipped","STORAGE_STATS","getStorageStats","totalUsedMB","total","used","totalAvailableMB","available","quotaMB","quota","usagePercentage","localStorage","indexedDB","records","stores","PRIVACY_CLEANUP","privacyService","cleanupExpiredData","cleaned","getRetentionPolicies","PRIVACY_SETTINGS","getPrivacySettings","policies","boolValue","updatePrivacySettings","SYNC_STATUS","syncService","getSyncStatus","lastSyncTime","syncInProgress","queueSize","isOnline","hasEndpoint","strategy","PERSISTENCE_TEST","testResults","persistenceTestSuite","runAllTests","passed","reason","testName","find","calculateVolatility","mean","variance","getMarginIcon","margin","gross","excellent","good","fair","operating","privateAnalysisCommands","PRIVATE_DCF","defaultFinancialData","periods","statements","incomeStatement","revenues","operatingIncomes","margins","totalRevenue","operatingIncome","assumptions","discountRate","taxRate","latestRevenue","revenueGrowthRate","projectedRevenue","projectedOperatingIncome","projectedFCF","totalPresentValue","terminalPresentValue","PRIVATE_RATIOS","ratios","totalCOGS","totalCostOfGoodsSold","grossProfit","grossMargin","operatingMargin","netMargin","cogsPercentage","growthRates","currentRevenue","previousRevenue","currentOperating","previousOperating","revenueGrowth","operatingGrowth","ratio","g","PRIVATE_SUMMARY","latestIndex","latest","revenueBreakdown","injectables","surgery","wellness","weightloss","retailSales","energyDevices","PRIVATE_LOAD","cashFlow","dataStructure","incomeStatementItems","balanceSheetItems","cashFlowItems","PRIVATE_MONTE_CARLO","latestPeriod","baseRevenue","baseOperatingIncome","simulations","marginChange","valuations","p50","p25","p75","PRIVATE_SCENARIO","bear","base","bull","PRIVATE_GROWTH","_","avgGrowth","rate","cagr","every","PRIVATE_RISK","rev","opIncome","revenueVolatility","marginVolatility","riskScore","riskLevel","assessGrowthSustainability","PRIVATE_VALIDATE","validationResults","hasNegativeRevenue","reasonableMargins","totalTests","PRIVATE_EXPORT","company","dcf","export","PRIVATE_BENCHMARKS","benchmarks","industryBenchmarks","revenuePerSqFt","revenuePerProvider","injectableMargin","ebitdaMargin","customerRetention","percentage","str","maxScore","competitiveGrade","competitiveScore","grade","PRIVATE_CASHFLOW","cashFlowAnalysis","depreciation","operatingCashFlow","freeCashFlow","fcfMargin","avgFCFMargin","latestFCF","fcfs","isIncreasing","isDecreasing","assessCashFlowTrend","fcfGrowth","leverage","calculateOperatingLeverage","PRIVATE_MULTIPLES","industryMultiples","evRevenue","typical","evEbitda","revenueMultiple","conservative","ebitdaMultiple","earningsMultiple","typicalValuations","v","avgValuation","minValuation","maxValuation","PRIVATE_SENSITIVITY","baseEbitda","revenueChanges","marginChanges","multipleBase","newValuation","valuationChange","baseMargin","newEbitda","revenueElasticity","marginElasticity","baseCase","sensitivities","PRIVATE_WATERFALL","waterfallSteps","step","cumulative","pv5Years","pvTerminal","arrow","PRIVATE_COMPS","comparables","currentMargin","avgEvRevenue","comp","avgEvEbitda","avgMargin","tradingValuationRevenue","tradingValuationEbitda","avgTradingValuation","peerAverages","impliedValuation","PRIVATE_LBO","equityContribution","debtFinancing","interestRate","holdPeriod","ebitdaGrowthRate","projectedEbitda","remainingDebt","debtPaydown","yearEbitda","interestPayment","debtReduction","reduction","exitValue","netProceeds","ebitdaYear","transaction","returns","PRIVATE_QUALITY","qualityMetrics","revenueGrowthConsistency","calculateGrowthConsistency","revenueRecurring","recurringPortion","estimateRecurringRevenue","marginStability","calculateMarginStability","profitabilityTrend","trend","calculateProfitabilityTrend","cashConversion","workingCapitalEfficiency","marketPosition","scalability","growthRate","assessScalability","debtLevels","liquidityPosition","qualityGrade","m","identifyWeaknesses","PRIVATE_WORKFLOW","workflowSteps","completed","next","overallProgress","nextStep","findIndex","Benchmarking","presentFields","assessDataCompleteness","steps","completedSteps","assessAnalysisDepth","progress","PRIVATE_DASHBOARD","performanceScore","calculatePerformanceScore","kpis","PRIVATE","desc","cat","categoryCommands","totalCommands","allCommands","repeat","TerminalInterface","onCommandExecute","calculationResults","setCommands","currentInput","setCurrentInput","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestion","setSelectedSuggestion","isLoading","setIsLoading","terminalRef","inputRef","commandProcessorRef","useEffect","scrollTop","scrollHeight","focus","availableCommands","info","commandSuggestions","partialMatches","allSuggestions","onKeyDown","newCommand","prev","loadingCommand","response","responseCommand","errorCommand","executeCommand","autoComplete","selectSuggestion","VariableInputs","onVariableChange","onBulkEdit","activeSection","setActiveSection","editMode","setEditMode","setVariables","revenue_growth","unit","ebitda_margin","capex_revenue","working_capital_revenue","cost_of_capital","risk_free_rate","market_premium","cost_of_debt","debt_equity_ratio","market_data","current_share_price","shares_outstanding","market_cap","enterprise_value","net_debt","formatValue","filteredVariables","sectionData","filtered","variable","blob","Blob","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","section","getVariablesByCategory","categoryVariables","updatedVariables","handleVariableChange","defaultVariables","FinancialModelWorkspace","activeLayout","setActiveLayout","leftPanelContent","setLeftPanelContent","rightPanelContent","setRightPanelContent","modelState","saved","calculating","lastSaved","setCalculationResults","handleCommandExecute","SEOHead","title","canonical","keywords","Header","role","Breadcrumbs","renderLeftPanel"],"mappings":"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"}
{"version":3,"file":"PortfolioManagement-V6msuKTz.js","sources":["../../src/components/PortfolioAnalytics/PortfolioAnalytics.jsx","../../src/components/PortfolioBuilder/PortfolioBuilder.jsx","../../src/pages/PortfolioManagement.jsx"],"sourcesContent":["import {\n  TrendingUp,\n  Shield,\n  Target,\n  Activity,\n  Download,\n  RefreshCw\n} from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar\n} from 'recharts';\n\nimport { portfolioCommands } from '../../services/commands/portfolioCommands';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/formatters';\n\nconst PortfolioAnalytics = ({\n  portfolio,\n  metrics,\n  selectedTimeframe,\n  onTimeframeChange,\n  timeframeOptions\n}) => {\n  const [analyticsData, setAnalyticsData] = useState({\n    riskMetrics: null,\n    correlationMatrix: null,\n    performanceAttribution: null,\n    historicalPerformance: null\n  });\n  const [loading, setLoading] = useState({\n    risk: false,\n    correlation: false,\n    performance: false\n  });\n  const [activeChart, setActiveChart] = useState('performance');\n  const [riskTimeframe, _setRiskTimeframe] = useState('252');\n\n  // Calculate portfolio risk metrics using existing portfolio commands\n  const calculateRiskMetrics = useCallback(async() => {\n    if (!portfolio || !portfolio.holdings.length || loading.risk) return;\n\n    setLoading(prev => ({ ...prev, risk: true }));\n    try {\n      const symbols = portfolio.holdings.map(h => h.symbol);\n      const weights = portfolio.holdings.map(h => (h.allocation || 0) / 100);\n\n      // Calculate individual stock risk metrics\n      const individualRiskPromises = symbols.map(async(symbol) => {\n        try {\n          const riskCommand = portfolioCommands.RISK_METRICS;\n          const mockCommand = { parameters: [symbol, parseInt(riskTimeframe)] };\n          const result = await riskCommand.execute(mockCommand, {}, null);\n          return result.data?.metrics || null;\n        } catch (error) {\n          console.warn(`Risk calculation failed for ${symbol}:`, error);\n          return null;\n        }\n      });\n\n      const individualRiskResults = await Promise.all(individualRiskPromises);\n\n      // Aggregate risk metrics\n      const validRisks = individualRiskResults.filter(r => r);\n      const aggregatedMetrics = {\n        portfolioVolatility: calculateWeightedAverage(validRisks.map(r => r.volatility || 0), weights),\n        portfolioBeta: calculateWeightedAverage(validRisks.map(r => r.beta || 1), weights),\n        portfolioSharpe: calculateWeightedAverage(validRisks.map(r => r.sharpeRatio || 0), weights),\n        portfolioVar95: calculateWeightedAverage(validRisks.map(r => r.var95 || 0), weights),\n        portfolioVar99: calculateWeightedAverage(validRisks.map(r => r.var99 || 0), weights),\n        maxDrawdown: Math.max(...validRisks.map(r => r.maxDrawdown || 0)),\n        concentrationRisk: calculateConcentrationRisk(weights),\n        individualMetrics: symbols.map((symbol, index) => ({\n          symbol,\n          weight: weights[index],\n          ...individualRiskResults[index]\n        })).filter(item => item.symbol)\n      };\n\n      setAnalyticsData(prev => ({\n        ...prev,\n        riskMetrics: aggregatedMetrics\n      }));\n\n    } catch (error) {\n      console.error('Risk metrics calculation failed:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, risk: false }));\n    }\n  }, [portfolio, loading.risk, riskTimeframe]);\n\n  // Calculate correlation matrix\n  const calculateCorrelationMatrix = useCallback(async() => {\n    if (!portfolio || !portfolio.holdings.length || loading.correlation) return;\n\n    setLoading(prev => ({ ...prev, correlation: true }));\n    try {\n      const symbols = portfolio.holdings.map(h => h.symbol);\n\n      if (symbols.length < 2) {\n        setAnalyticsData(prev => ({\n          ...prev,\n          correlationMatrix: { message: 'Need at least 2 holdings for correlation analysis' }\n        }));\n        return;\n      }\n\n      const correlationCommand = portfolioCommands.CORRELATION_MATRIX;\n      const mockCommand = { parameters: [symbols] };\n      const result = await correlationCommand.execute(mockCommand, {}, null);\n\n      if (result.type === 'success') {\n        setAnalyticsData(prev => ({\n          ...prev,\n          correlationMatrix: result.data\n        }));\n      }\n\n    } catch (error) {\n      console.error('Correlation calculation failed:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, correlation: false }));\n    }\n  }, [portfolio, loading.correlation]);\n\n  // Generate historical performance data\n  const generateHistoricalPerformance = useCallback(() => {\n    if (!metrics) return;\n\n    const days = getDaysFromTimeframe(selectedTimeframe);\n    const data = [];\n    const startValue = metrics.totalValue * 0.9;\n\n    for (let i = 0; i < days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (days - i));\n\n      const trend = i / days;\n      const volatility = Math.sin(i * 0.1) * 0.02 + Math.random() * 0.01 - 0.005;\n      const value = startValue * (1 + trend * 0.15 + volatility);\n\n      data.push({\n        date: date.toISOString().split('T')[0],\n        portfolioValue: value,\n        benchmark: startValue * (1 + trend * 0.12)\n      });\n    }\n\n    setAnalyticsData(prev => ({\n      ...prev,\n      historicalPerformance: data\n    }));\n  }, [metrics, selectedTimeframe]);\n\n  // Calculate performance attribution\n  const calculatePerformanceAttribution = useCallback(() => {\n    if (!portfolio || !metrics) return;\n\n    const attribution = portfolio.holdings.map(holding => {\n      const contribution = (holding.allocation || 0) * (holding.gainLossPercent || 0) / 100;\n      return {\n        symbol: holding.symbol,\n        name: holding.name,\n        allocation: holding.allocation || 0,\n        return: holding.gainLossPercent || 0,\n        contribution,\n        value: holding.value || 0\n      };\n    });\n\n    attribution.sort((a, b) => Math.abs(b.contribution) - Math.abs(a.contribution));\n\n    setAnalyticsData(prev => ({\n      ...prev,\n      performanceAttribution: attribution\n    }));\n  }, [portfolio, metrics]);\n\n  // Run calculations when dependencies change\n  useEffect(() => {\n    calculateRiskMetrics();\n  }, [calculateRiskMetrics]);\n\n  useEffect(() => {\n    calculateCorrelationMatrix();\n  }, [calculateCorrelationMatrix]);\n\n  useEffect(() => {\n    generateHistoricalPerformance();\n  }, [generateHistoricalPerformance]);\n\n  useEffect(() => {\n    calculatePerformanceAttribution();\n  }, [calculatePerformanceAttribution]);\n\n  if (!portfolio || !metrics) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Analytics Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          {[\n            { value: 'performance', label: 'Performance', icon: TrendingUp },\n            { value: 'risk', label: 'Risk', icon: Shield },\n            { value: 'correlation', label: 'Correlation', icon: Activity },\n            { value: 'attribution', label: 'Attribution', icon: Target }\n          ].map(({ value, label, icon: Icon }) => (\n            <button\n              key={value}\n              onClick={() => setActiveChart(value)}\n              className={`flex items-center space-x-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                activeChart === value\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <label htmlFor=\"timeframe-select\" className=\"text-sm font-medium text-gray-600\">Timeframe:</label>\n            <select\n              id=\"timeframe-select\"\n              value={selectedTimeframe}\n              onChange={(e) => onTimeframeChange(e.target.value)}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {timeframeOptions.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <button className=\"flex items-center space-x-2 px-3 py-1.5 border border-gray-300 rounded-md text-sm hover:bg-gray-50\">\n            <Download className=\"w-4 h-4\" />\n            <span>Export</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Performance Chart */}\n      {activeChart === 'performance' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Portfolio Performance</h3>\n\n              {analyticsData.historicalPerformance && (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={analyticsData.historicalPerformance}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                    <XAxis\n                      dataKey=\"date\"\n                      stroke=\"#6b7280\"\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <YAxis\n                      stroke=\"#6b7280\"\n                      fontSize={12}\n                      tickFormatter={(value) => {\n                        const _formatCurrency = (value) => {\n                          return formatCurrency(value, 0);\n                        };\n                        return _formatCurrency(value);\n                      }}\n                    />\n                    <Tooltip\n                      formatter={(value, name) => [formatCurrency(value), name === 'portfolioValue' ? 'Portfolio' : 'Benchmark']}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"portfolioValue\"\n                      stroke=\"#3B82F6\"\n                      strokeWidth={2}\n                      dot={false}\n                      name=\"Portfolio\"\n                    />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"benchmark\"\n                      stroke=\"#10B981\"\n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      dot={false}\n                      name=\"Benchmark\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <PerformanceMetricsCard metrics={metrics} />\n            {analyticsData.performanceAttribution && (\n              <PerformanceAttributionCard attribution={analyticsData.performanceAttribution} />\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Risk Analysis */}\n      {activeChart === 'risk' && analyticsData.riskMetrics && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <RiskMetricsCard riskMetrics={analyticsData.riskMetrics} loading={loading.risk} />\n          <RiskDecompositionCard riskMetrics={analyticsData.riskMetrics} />\n        </div>\n      )}\n\n      {/* Correlation Analysis */}\n      {activeChart === 'correlation' && (\n        <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Correlation Matrix</h3>\n            {loading.correlation && (\n              <RefreshCw className=\"w-4 h-4 text-gray-400 animate-spin\" />\n            )}\n          </div>\n\n          {analyticsData.correlationMatrix && (\n            <CorrelationMatrix data={analyticsData.correlationMatrix} />\n          )}\n        </div>\n      )}\n\n      {/* Performance Attribution */}\n      {activeChart === 'attribution' && analyticsData.performanceAttribution && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Performance Attribution</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analyticsData.performanceAttribution}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis dataKey=\"symbol\" stroke=\"#6b7280\" fontSize={12} />\n                <YAxis stroke=\"#6b7280\" fontSize={12} tickFormatter={(value) => formatPercentage(value)} />\n                <Tooltip formatter={(value) => [formatPercentage(value), 'Contribution']} />\n                <Bar dataKey=\"contribution\" fill=\"#3B82F6\" radius={[2, 2, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <AttributionBreakdownCard attribution={analyticsData.performanceAttribution} />\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Component definitions\nconst PerformanceMetricsCard = ({ metrics }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Key Metrics</h3>\n    <div className=\"space-y-3\">\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Total Return:</span>\n        <span className={`font-medium ${metrics.totalGainLossPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n          {formatPercentage(metrics.totalGainLossPercent)}\n        </span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Day Change:</span>\n        <span className={`font-medium ${metrics.dailyChangePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n          {formatPercentage(metrics.dailyChangePercent)}\n        </span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Dividend Yield:</span>\n        <span className=\"font-medium text-gray-900\">\n          {formatPercentage(metrics.dividendYield)}\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nconst PerformanceAttributionCard = ({ attribution }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Top Contributors</h3>\n    <div className=\"space-y-2\">\n      {attribution.slice(0, 5).map((item) => (\n        <div key={item.symbol} className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">{item.symbol}</span>\n          <span className={`text-sm font-medium ${item.contribution >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n            {formatPercentage(item.contribution)}\n          </span>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nconst RiskMetricsCard = ({ riskMetrics, loading }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <div className=\"flex items-center justify-between mb-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">Risk Metrics</h3>\n      {loading && <RefreshCw className=\"w-4 h-4 text-gray-400 animate-spin\" />}\n    </div>\n\n    <div className=\"grid grid-cols-2 gap-4\">\n      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-blue-600\">\n          {formatPercentage((riskMetrics.portfolioVolatility || 0) * 100)}\n        </div>\n        <div className=\"text-sm text-blue-700\">Volatility</div>\n      </div>\n      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-green-600\">\n          {formatNumber(riskMetrics.portfolioBeta || 0, 2)}\n        </div>\n        <div className=\"text-sm text-green-700\">Beta</div>\n      </div>\n      <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-purple-600\">\n          {formatNumber(riskMetrics.portfolioSharpe || 0, 2)}\n        </div>\n        <div className=\"text-sm text-purple-700\">Sharpe Ratio</div>\n      </div>\n      <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-orange-600\">\n          {formatPercentage(riskMetrics.maxDrawdown || 0)}\n        </div>\n        <div className=\"text-sm text-orange-700\">Max Drawdown</div>\n      </div>\n    </div>\n  </div>\n);\n\nconst RiskDecompositionCard = ({ riskMetrics }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Risk Decomposition</h3>\n    {riskMetrics?.individualMetrics && (\n      <div className=\"space-y-3\">\n        {riskMetrics.individualMetrics.slice(0, 5).map((item) => (\n          <div key={item.symbol} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <div>\n              <div className=\"font-medium text-gray-900\">{item.symbol}</div>\n              <div className=\"text-sm text-gray-500\">Weight: {formatPercentage(item.weight * 100)}</div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm font-medium text-gray-900\">\n                Vol: {formatPercentage((item.volatility || 0) * 100)}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                Beta: {formatNumber(item.beta || 0, 2)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    )}\n  </div>\n);\n\nconst CorrelationMatrix = ({ data }) => {\n  if (!data.correlationMatrix) {\n    return <div className=\"text-center py-8 text-gray-500\">Insufficient data for correlation analysis</div>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {data.correlationMatrix.slice(0, 6).map((correlation, index) => (\n          <div key={index} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <span className=\"text-sm text-gray-600\">{correlation.pair}</span>\n            <div className=\"text-right\">\n              <div className={`text-sm font-medium ${Math.abs(correlation.correlation) > 0.7 ? 'text-red-600' : 'text-green-600'}`}>\n                {formatNumber(correlation.correlation, 2)}\n              </div>\n              <div className=\"text-xs text-gray-500\">{correlation.strength}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst AttributionBreakdownCard = ({ attribution }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Attribution Breakdown</h3>\n    <div className=\"space-y-3\">\n      {attribution.map((item) => (\n        <div key={item.symbol} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n          <div>\n            <div className=\"font-medium text-gray-900\">{item.symbol}</div>\n            <div className=\"text-sm text-gray-500\">{formatPercentage(item.allocation)} allocation</div>\n          </div>\n          <div className=\"text-right\">\n            <div className={`font-medium ${item.contribution >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {formatPercentage(item.contribution)}\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              {formatPercentage(item.return)} return\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Helper functions\nconst getDaysFromTimeframe = (timeframe) => {\n  const timeframes = {\n    '1D': 1, '1W': 7, '1M': 30, '3M': 90, '6M': 180, '1Y': 365,\n    'YTD': Math.floor((new Date() - new Date(new Date().getFullYear(), 0, 1)) / (1000 * 60 * 60 * 24))\n  };\n  return timeframes[timeframe] || 30;\n};\n\nconst calculateWeightedAverage = (values, weights) => {\n  return values.reduce((sum, value, index) => sum + value * (weights[index] || 0), 0);\n};\n\nconst calculateConcentrationRisk = (weights) => {\n  return Math.max(...weights);\n};\n\nexport default PortfolioAnalytics;\n","import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n  useSortable\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  Search,\n  Plus,\n  TrendingUp,\n  TrendingDown,\n  BarChart3,\n  PieChart,\n  Trash2,\n  Save,\n  RotateCcw,\n  AlertTriangle,\n  CheckCircle,\n  Target,\n  RefreshCw\n} from 'lucide-react';\nimport React, { useState, useCallback, useMemo } from 'react';\n\nimport secureApiClient from '../../services/secureApiClient';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/formatters';\n\nconst PortfolioBuilder = ({ portfolio, onPortfolioUpdate, marketData: _marketData }) => {\n  const [builderMode, setBuilderMode] = useState('allocation'); // allocation, optimization, rebalancing\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [targetAllocation, setTargetAllocation] = useState({});\n  const [optimizationSettings, setOptimizationSettings] = useState({\n    objective: 'max_sharpe', // max_sharpe, min_risk, max_return\n    constraints: {\n      maxWeight: 50,\n      minWeight: 0,\n      maxSectorWeight: 30\n    }\n  });\n  const [rebalanceSettings, setRebalanceSettings] = useState({\n    threshold: 5, // 5% deviation threshold\n    cashBuffer: 2000,\n    minimumTrade: 100\n  });\n  const [isDirty, setIsDirty] = useState(false);\n\n  // Initialize target allocation from current holdings\n  React.useEffect(() => {\n    if (portfolio && !Object.keys(targetAllocation).length) {\n      const currentAllocation = {};\n      portfolio.holdings.forEach(holding => {\n        currentAllocation[holding.symbol] = holding.allocation || 0;\n      });\n      setTargetAllocation(currentAllocation);\n    }\n  }, [portfolio, targetAllocation]);\n\n  // Search for stocks to add to portfolio\n  const searchStocks = useCallback(async(query) => {\n    if (!query || query.length < 2) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      // Mock search results - in real implementation, this would search a stock database\n      const mockResults = [\n        { symbol: 'AAPL', name: 'Apple Inc.', sector: 'Technology', marketCap: 3000000000000 },\n        { symbol: 'MSFT', name: 'Microsoft Corporation', sector: 'Technology', marketCap: 2800000000000 },\n        { symbol: 'GOOGL', name: 'Alphabet Inc.', sector: 'Technology', marketCap: 1700000000000 },\n        { symbol: 'AMZN', name: 'Amazon.com Inc.', sector: 'Consumer Discretionary', marketCap: 1500000000000 },\n        { symbol: 'TSLA', name: 'Tesla Inc.', sector: 'Consumer Discretionary', marketCap: 800000000000 },\n        { symbol: 'NVDA', name: 'NVIDIA Corporation', sector: 'Technology', marketCap: 1200000000000 },\n        { symbol: 'META', name: 'Meta Platforms Inc.', sector: 'Technology', marketCap: 900000000000 },\n        { symbol: 'JPM', name: 'JPMorgan Chase & Co.', sector: 'Financials', marketCap: 500000000000 },\n        { symbol: 'JNJ', name: 'Johnson & Johnson', sector: 'Healthcare', marketCap: 450000000000 },\n        { symbol: 'V', name: 'Visa Inc.', sector: 'Technology', marketCap: 500000000000 }\n      ];\n\n      const filtered = mockResults.filter(stock =>\n        stock.symbol.toLowerCase().includes(query.toLowerCase()) ||\n        stock.name.toLowerCase().includes(query.toLowerCase())\n      );\n\n      setSearchResults(filtered);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  }, []);\n\n  // Debounced search\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => searchStocks(searchTerm), 300);\n    return () => clearTimeout(timeoutId);\n  }, [searchTerm, searchStocks]);\n\n  // Calculate allocation totals and validation\n  const allocationAnalysis = useMemo(() => {\n    const holdings = portfolio?.holdings || [];\n    const totalTarget = Object.values(targetAllocation).reduce((sum, val) => sum + (val || 0), 0);\n    const cashAllocation = Math.max(0, 100 - totalTarget);\n\n    const deviations = holdings.map(holding => {\n      const currentAllocation = holding.allocation || 0;\n      const targetVal = targetAllocation[holding.symbol] || 0;\n      const deviation = Math.abs(currentAllocation - targetVal);\n      return { symbol: holding.symbol, current: currentAllocation, target: targetVal, deviation };\n    });\n\n    const maxDeviation = Math.max(...deviations.map(d => d.deviation), 0);\n    const avgDeviation = deviations.reduce((sum, d) => sum + d.deviation, 0) / Math.max(deviations.length, 1);\n\n    return {\n      totalTarget,\n      cashAllocation,\n      deviations,\n      maxDeviation,\n      avgDeviation,\n      isValid: totalTarget <= 100,\n      needsRebalancing: maxDeviation > rebalanceSettings.threshold\n    };\n  }, [portfolio, targetAllocation, rebalanceSettings.threshold]);\n\n  // Add stock to portfolio\n  const addStock = useCallback(async(stock) => {\n    try {\n      const quote = await secureApiClient.getQuote(stock.symbol);\n      const newHolding = {\n        symbol: stock.symbol,\n        name: stock.name,\n        shares: 0,\n        currentPrice: quote.currentPrice || 100,\n        allocation: 0,\n        value: 0,\n        costBasis: quote.currentPrice || 100\n      };\n\n      const updatedPortfolio = {\n        ...portfolio,\n        holdings: [...portfolio.holdings, newHolding]\n      };\n\n      onPortfolioUpdate(updatedPortfolio);\n      setTargetAllocation(prev => ({ ...prev, [stock.symbol]: 0 }));\n      setIsDirty(true);\n      setSearchTerm('');\n      setSearchResults([]);\n    } catch (error) {\n      console.error('Failed to add stock:', error);\n    }\n  }, [portfolio, onPortfolioUpdate]);\n\n  // Remove stock from portfolio\n  const removeStock = useCallback((symbol) => {\n    const updatedPortfolio = {\n      ...portfolio,\n      holdings: portfolio.holdings.filter(h => h.symbol !== symbol)\n    };\n\n    onPortfolioUpdate(updatedPortfolio);\n    setTargetAllocation(prev => {\n      const updated = { ...prev };\n      delete updated[symbol];\n      return updated;\n    });\n    setIsDirty(true);\n  }, [portfolio, onPortfolioUpdate]);\n\n  // Update target allocation\n  const updateTargetAllocation = useCallback((symbol, value) => {\n    setTargetAllocation(prev => ({ ...prev, [symbol]: Math.max(0, Math.min(100, value)) }));\n    setIsDirty(true);\n  }, []);\n\n  // Generate rebalancing trades\n  const generateRebalancingTrades = useCallback(() => {\n    if (!portfolio || !allocationAnalysis.needsRebalancing) return [];\n\n    const trades = [];\n    const totalValue = portfolio.totalValue || 100000;\n\n    allocationAnalysis.deviations.forEach(({ symbol, current, target, deviation }) => {\n      if (deviation > rebalanceSettings.threshold) {\n        const holding = portfolio.holdings.find(h => h.symbol === symbol);\n        if (!holding) return;\n\n        const targetValue = (target / 100) * totalValue;\n        const currentValue = holding.value;\n        const tradeDollarAmount = targetValue - currentValue;\n        const tradeShares = Math.round(tradeDollarAmount / holding.currentPrice);\n\n        if (Math.abs(tradeDollarAmount) >= rebalanceSettings.minimumTrade) {\n          trades.push({\n            symbol,\n            action: tradeDollarAmount > 0 ? 'BUY' : 'SELL',\n            shares: Math.abs(tradeShares),\n            dollarAmount: Math.abs(tradeDollarAmount),\n            currentPrice: holding.currentPrice,\n            reason: `Rebalance from ${current.toFixed(1)}% to ${target.toFixed(1)}%`\n          });\n        }\n      }\n    });\n\n    return trades;\n  }, [portfolio, allocationAnalysis, rebalanceSettings]);\n\n  // DnD setup\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates\n    })\n  );\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      const oldIndex = portfolio.holdings.findIndex(h => h.symbol === active.id);\n      const newIndex = portfolio.holdings.findIndex(h => h.symbol === over.id);\n\n      const updatedPortfolio = {\n        ...portfolio,\n        holdings: arrayMove(portfolio.holdings, oldIndex, newIndex)\n      };\n\n      onPortfolioUpdate(updatedPortfolio);\n      setIsDirty(true);\n    }\n  };\n\n  if (!portfolio) {\n    return <div className=\"text-center py-8\">No portfolio selected</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Mode Switcher */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          {[\n            { value: 'allocation', label: 'Allocation', icon: PieChart },\n            { value: 'optimization', label: 'Optimization', icon: Target },\n            { value: 'rebalancing', label: 'Rebalancing', icon: BarChart3 }\n          ].map(({ value, label, icon: Icon }) => (\n            <button\n              key={value}\n              onClick={() => setBuilderMode(value)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                builderMode === value\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {isDirty && (\n            <span className=\"flex items-center space-x-1 text-sm text-orange-600\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span>Unsaved changes</span>\n            </span>\n          )}\n          <button\n            onClick={() => setIsDirty(false)}\n            className=\"flex items-center space-x-2 px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n            <span>Reset</span>\n          </button>\n          <button\n            className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700\"\n          >\n            <Save className=\"w-4 h-4\" />\n            <span>Save</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Left Panel - Portfolio Holdings */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {builderMode === 'allocation' && (\n            <AllocationBuilder\n              portfolio={portfolio}\n              targetAllocation={targetAllocation}\n              onUpdateAllocation={updateTargetAllocation}\n              onRemoveStock={removeStock}\n              allocationAnalysis={allocationAnalysis}\n              handleDragEnd={handleDragEnd}\n              sensors={sensors}\n            />\n          )}\n\n          {builderMode === 'optimization' && (\n            <OptimizationBuilder\n              portfolio={portfolio}\n              optimizationSettings={optimizationSettings}\n              onSettingsChange={setOptimizationSettings}\n            />\n          )}\n\n          {builderMode === 'rebalancing' && (\n            <RebalancingBuilder\n              portfolio={portfolio}\n              rebalanceSettings={rebalanceSettings}\n              onSettingsChange={setRebalanceSettings}\n              allocationAnalysis={allocationAnalysis}\n              generateTrades={generateRebalancingTrades}\n            />\n          )}\n        </div>\n\n        {/* Right Panel - Tools & Search */}\n        <div className=\"space-y-6\">\n          {/* Stock Search & Add */}\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Add Securities</h3>\n\n            <div className=\"relative mb-4\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search stocks by symbol or name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              {isSearching && (\n                <RefreshCw className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 animate-spin\" />\n              )}\n            </div>\n\n            {searchResults.length > 0 && (\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {searchResults.map((stock) => (\n                  <div\n                    key={stock.symbol}\n                    className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                  >\n                    <div>\n                      <div className=\"font-medium text-gray-900\">{stock.symbol}</div>\n                      <div className=\"text-sm text-gray-500\">{stock.name}</div>\n                      <div className=\"text-xs text-gray-400\">{stock.sector}</div>\n                    </div>\n                    <button\n                      onClick={() => addStock(stock)}\n                      disabled={portfolio.holdings.some(h => h.symbol === stock.symbol)}\n                      className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Allocation Summary */}\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Allocation Summary</h3>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Total Allocated:</span>\n                <span className={`font-medium ${allocationAnalysis.isValid ? 'text-gray-900' : 'text-red-600'}`}>\n                  {formatPercentage(allocationAnalysis.totalTarget)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Cash:</span>\n                <span className=\"font-medium text-gray-900\">\n                  {formatPercentage(allocationAnalysis.cashAllocation)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Max Deviation:</span>\n                <span className={`font-medium ${allocationAnalysis.maxDeviation > rebalanceSettings.threshold ? 'text-red-600' : 'text-green-600'}`}>\n                  {formatPercentage(allocationAnalysis.maxDeviation)}\n                </span>\n              </div>\n\n              {!allocationAnalysis.isValid && (\n                <div className=\"flex items-center space-x-2 p-3 bg-red-50 rounded-lg\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                  <span className=\"text-sm text-red-700\">Total allocation exceeds 100%</span>\n                </div>\n              )}\n\n              {allocationAnalysis.needsRebalancing && (\n                <div className=\"flex items-center space-x-2 p-3 bg-orange-50 rounded-lg\">\n                  <AlertTriangle className=\"w-4 h-4 text-orange-600\" />\n                  <span className=\"text-sm text-orange-700\">Portfolio needs rebalancing</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Allocation Builder Component\nconst AllocationBuilder = ({\n  portfolio,\n  targetAllocation,\n  onUpdateAllocation,\n  onRemoveStock,\n  allocationAnalysis,\n  handleDragEnd,\n  sensors\n}) => {\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border\">\n      <div className=\"px-6 py-4 border-b\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Target Allocation</h3>\n        <p className=\"text-sm text-gray-500\">Drag to reorder • Set target percentages for each holding</p>\n      </div>\n\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext\n          items={portfolio.holdings.map(h => h.symbol)}\n          strategy={verticalListSortingStrategy}\n        >\n          <div className=\"p-6 space-y-4\">\n            {portfolio.holdings.map((holding) => (\n              <SortableHoldingRow\n                key={holding.symbol}\n                holding={holding}\n                targetAllocation={targetAllocation[holding.symbol] || 0}\n                onUpdateAllocation={onUpdateAllocation}\n                onRemove={onRemoveStock}\n                deviation={allocationAnalysis.deviations.find(d => d.symbol === holding.symbol)?.deviation || 0}\n              />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n    </div>\n  );\n};\n\n// Sortable Holding Row Component\nconst SortableHoldingRow = ({ holding, targetAllocation, onUpdateAllocation, onRemove, deviation }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({ id: holding.symbol });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className=\"flex items-center space-x-4 p-4 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors\"\n    >\n      <div\n        {...attributes}\n        {...listeners}\n        className=\"cursor-grab active:cursor-grabbing p-1\"\n      >\n        <div className=\"w-2 h-8 bg-gray-300 rounded-full\" />\n      </div>\n\n      <div className=\"flex-1\">\n        <div className=\"font-medium text-gray-900\">{holding.symbol}</div>\n        <div className=\"text-sm text-gray-500\">{holding.name}</div>\n      </div>\n\n      <div className=\"text-right\">\n        <div className=\"text-sm text-gray-600\">Current: {formatPercentage(holding.allocation || 0)}</div>\n        {deviation > 0 && (\n          <div className={`text-xs ${deviation > 5 ? 'text-red-600' : 'text-orange-600'}`}>\n            Deviation: {formatPercentage(deviation)}\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"number\"\n          value={targetAllocation}\n          onChange={(e) => onUpdateAllocation(holding.symbol, parseFloat(e.target.value) || 0)}\n          className=\"w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          min=\"0\"\n          max=\"100\"\n          step=\"0.1\"\n        />\n        <span className=\"text-sm text-gray-500\">%</span>\n      </div>\n\n      <button\n        onClick={() => onRemove(holding.symbol)}\n        className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg\"\n      >\n        <Trash2 className=\"w-4 h-4\" />\n      </button>\n    </div>\n  );\n};\n\n// Optimization Builder Component (placeholder)\nconst OptimizationBuilder = ({ portfolio: _portfolio, optimizationSettings: _optimizationSettings, onSettingsChange: _onSettingsChange }) => {\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n      <div className=\"text-center py-12\">\n        <Target className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Portfolio Optimization</h3>\n        <p className=\"text-gray-600 mb-4\">Advanced optimization algorithms coming soon</p>\n        <div className=\"text-sm text-gray-500\">\n          Features: Mean-variance optimization, risk parity, factor-based optimization\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Rebalancing Builder Component\nconst RebalancingBuilder = ({\n  portfolio: _portfolio,\n  rebalanceSettings,\n  onSettingsChange,\n  allocationAnalysis: _allocationAnalysis,\n  generateTrades\n}) => {\n  const trades = generateTrades();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Rebalancing Settings */}\n      <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Rebalancing Settings</h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label htmlFor=\"rebalance-threshold\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Deviation Threshold\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                id=\"rebalance-threshold\"\n                type=\"number\"\n                value={rebalanceSettings.threshold}\n                onChange={(e) => onSettingsChange(prev => ({\n                  ...prev,\n                  threshold: parseFloat(e.target.value) || 0\n                }))}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0.1\"\n                max=\"20\"\n                step=\"0.1\"\n              />\n              <span className=\"text-sm text-gray-500\">%</span>\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"rebalance-cashBuffer\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Cash Buffer\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-500\">$</span>\n              <input\n                id=\"rebalance-cashBuffer\"\n                type=\"number\"\n                value={rebalanceSettings.cashBuffer}\n                onChange={(e) => onSettingsChange(prev => ({\n                  ...prev,\n                  cashBuffer: parseFloat(e.target.value) || 0\n                }))}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0\"\n                step=\"100\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"rebalance-minimumTrade\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Minimum Trade\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-500\">$</span>\n              <input\n                id=\"rebalance-minimumTrade\"\n                type=\"number\"\n                value={rebalanceSettings.minimumTrade}\n                onChange={(e) => onSettingsChange(prev => ({\n                  ...prev,\n                  minimumTrade: parseFloat(e.target.value) || 0\n                }))}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0\"\n                step=\"50\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Rebalancing Trades */}\n      <div className=\"bg-white rounded-xl shadow-sm border\">\n        <div className=\"px-6 py-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Suggested Trades</h3>\n            {trades.length > 0 && (\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\">\n                {trades.length} trades\n              </span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {trades.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto mb-3\" />\n              <p className=\"text-gray-600\">Portfolio is within rebalancing thresholds</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {trades.map((trade, index) => (\n                <div key={index} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`p-2 rounded-lg ${trade.action === 'BUY' ? 'bg-green-100' : 'bg-red-100'}`}>\n                      {trade.action === 'BUY' ? (\n                        <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                      ) : (\n                        <TrendingDown className=\"w-4 h-4 text-red-600\" />\n                      )}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">\n                        {trade.action} {formatNumber(trade.shares)} shares of {trade.symbol}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">{trade.reason}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium text-gray-900\">\n                      {formatCurrency(trade.dollarAmount)}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      @ {formatCurrency(trade.currentPrice)}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PortfolioBuilder;\n","import {\n  Eye,\n  Plus,\n  TrendingUp,\n  TrendingDown,\n  PieChart,\n  DollarSign,\n  Target,\n  BarChart3\n} from 'lucide-react';\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\n\nimport PortfolioAnalytics from '../components/PortfolioAnalytics/PortfolioAnalytics';\nimport PortfolioBuilder from '../components/PortfolioBuilder/PortfolioBuilder';\nimport SEOHead from '../components/SEO/SEOHead';\nimport SecondaryNav from '../components/ui/SecondaryNav';\nimport secureApiClient from '../services/secureApiClient';\nimport { formatCurrency, formatPercentage, formatNumber } from '../utils/formatters';\n\nconst PortfolioManagement = () => {\n  const [_portfolios] = useState([]);\n  const [activePortfolio, setActivePortfolio] = useState(null);\n  const [_portfolioPerformance, _setPortfolioPerformance] = useState({});\n  const [_riskMetrics, _setRiskMetrics] = useState({});\n  const [marketData, setMarketData] = useState({});\n  const [loading, setLoading] = useState({\n    portfolios: false,\n    performance: false,\n    risk: false,\n    market: false\n  });\n  const [_showCreateModal] = useState(false);\n  const [selectedTimeframe, setSelectedTimeframe] = useState('1M');\n  const [viewMode, setViewMode] = useState('overview'); // overview, builder, analytics\n\n  // Initialize with sample portfolio if none exist\n  useEffect(() => {\n    const samplePortfolio = {\n      id: 'sample-portfolio',\n      name: 'Growth Portfolio',\n      description: 'Technology-focused growth portfolio',\n      totalValue: 100000,\n      cash: 5000,\n      holdings: [\n        { symbol: 'AAPL', name: 'Apple Inc.', shares: 100, currentPrice: 175.50, allocation: 35.0, value: 17550, costBasis: 160.00 },\n        { symbol: 'MSFT', name: 'Microsoft Corporation', shares: 80, currentPrice: 335.20, allocation: 30.0, value: 26816, costBasis: 300.00 },\n        { symbol: 'GOOGL', name: 'Alphabet Inc.', shares: 50, currentPrice: 128.45, allocation: 15.0, value: 6422.50, costBasis: 120.00 },\n        { symbol: 'TSLA', name: 'Tesla Inc.', shares: 30, currentPrice: 245.80, allocation: 10.0, value: 7374, costBasis: 200.00 },\n        { symbol: 'NVDA', name: 'NVIDIA Corporation', shares: 25, currentPrice: 425.30, allocation: 10.0, value: 10632.50, costBasis: 400.00 }\n      ]\n    };\n\n    setActivePortfolio(samplePortfolio);\n  }, []);\n\n  // Fetch real-time market data for portfolio holdings\n  const fetchMarketData = useCallback(async() => {\n    if (!activePortfolio || loading.market) return;\n\n    setLoading(prev => ({ ...prev, market: true }));\n    try {\n      const symbols = activePortfolio.holdings.map(h => h.symbol);\n      const marketPromises = symbols.map(symbol =>\n        secureApiClient.getQuote(symbol).catch(error => {\n          console.warn(`Failed to fetch data for ${symbol}:`, error);\n          return null;\n        })\n      );\n\n      const results = await Promise.all(marketPromises);\n      const marketDataMap = {};\n\n      results.forEach((data, index) => {\n        if (data) {\n          marketDataMap[symbols[index]] = data;\n        }\n      });\n\n      setMarketData(marketDataMap);\n    } catch (error) {\n      console.error('Failed to fetch market data:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, market: false }));\n    }\n  }, [activePortfolio, loading.market]);\n\n  // Calculate portfolio performance metrics\n  const _portfolioMetrics = useMemo(() => {\n    if (!activePortfolio || !marketData) return null;\n\n    let totalValue = activePortfolio.cash || 0;\n    let totalCostBasis = 0;\n    let dailyChange = 0;\n    let dividendYield = 0;\n\n    const updatedHoldings = activePortfolio.holdings.map(holding => {\n      const marketQuote = marketData[holding.symbol];\n      const currentPrice = marketQuote?.currentPrice || holding.currentPrice;\n      const previousClose = marketQuote?.previousClose || holding.currentPrice;\n      const change = marketQuote?.change || 0;\n\n      const currentValue = holding.shares * currentPrice;\n      const costBasisValue = holding.shares * holding.costBasis;\n      const holdingDailyChange = holding.shares * change;\n\n      totalValue += currentValue;\n      totalCostBasis += costBasisValue;\n      dailyChange += holdingDailyChange;\n      dividendYield += (marketQuote?.dividendYield || 0) * (currentValue / 100000); // Weighted by portfolio allocation\n\n      return {\n        ...holding,\n        currentPrice,\n        previousClose,\n        change,\n        value: currentValue,\n        costBasisValue,\n        gainLoss: currentValue - costBasisValue,\n        gainLossPercent: ((currentValue - costBasisValue) / costBasisValue) * 100,\n        allocation: (currentValue / totalValue) * 100,\n        dayChange: holdingDailyChange\n      };\n    });\n\n    const totalGainLoss = totalValue - totalCostBasis;\n    const totalGainLossPercent = (totalGainLoss / totalCostBasis) * 100;\n    const dailyChangePercent = (dailyChange / (totalValue - dailyChange)) * 100;\n\n    return {\n      totalValue,\n      totalCostBasis,\n      totalGainLoss,\n      totalGainLossPercent,\n      dailyChange,\n      dailyChangePercent,\n      dividendYield,\n      holdings: updatedHoldings,\n      cashAllocation: ((activePortfolio.cash || 0) / totalValue) * 100\n    };\n  }, [activePortfolio, marketData]);\n\n  // Fetch market data when active portfolio changes\n  useEffect(() => {\n    fetchMarketData();\n  }, [fetchMarketData]);\n\n  // Auto-refresh market data every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(fetchMarketData, 30000);\n    return () => clearInterval(interval);\n  }, [fetchMarketData]);\n\n  const timeframeOptions = [\n    { value: '1D', label: '1 Day' },\n    { value: '1W', label: '1 Week' },\n    { value: '1M', label: '1 Month' },\n    { value: '3M', label: '3 Months' },\n    { value: '6M', label: '6 Months' },\n    { value: '1Y', label: '1 Year' },\n    { value: 'YTD', label: 'YTD' }\n  ];\n\n  if (!activePortfolio) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <PieChart className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Portfolio Selected</h3>\n          <p className=\"text-gray-600 mb-4\">Create or select a portfolio to get started</p>\n          <button\n            onClick={() => {}}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Create Portfolio\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <SEOHead\n        title=\"Portfolio Management | FinanceAnalyst Pro\"\n        description=\"Professional portfolio management tools with real-time tracking, risk analysis, and performance analytics\"\n        keywords=\"portfolio management, investment tracking, risk analysis, asset allocation\"\n      />\n\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <PieChart className=\"w-8 h-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Portfolio Management</h1>\n                <p className=\"text-sm text-gray-500\">Real-time portfolio tracking & analysis</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Portfolio Management Navigation */}\n              <SecondaryNav \n                variant=\"horizontal\"\n                items={[\n                  { id: 'overview', label: 'Overview', icon: 'Eye' },\n                  { id: 'builder', label: 'Builder', icon: 'Target' },\n                  { id: 'analytics', label: 'Analytics', icon: 'BarChart3' }\n                ]}\n                activeItem={viewMode}\n                onItemClick={(itemId) => setViewMode(itemId)}\n                className=\"bg-gray-100 rounded-lg\"\n              />\n\n              <button\n                onClick={() => {}}\n                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                <span>New Portfolio</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {viewMode === 'overview' && (\n          <PortfolioCard\n            portfolio={activePortfolio}\n            marketData={marketData}\n            selectedTimeframe={selectedTimeframe}\n            onTimeframeChange={setSelectedTimeframe}\n            timeframeOptions={timeframeOptions}\n          />\n        )}\n\n        {viewMode === 'builder' && (\n          <PortfolioBuilder\n            portfolio={activePortfolio}\n            onPortfolioUpdate={setActivePortfolio}\n            marketData={marketData}\n          />\n        )}\n\n        {viewMode === 'analytics' && (\n          <PortfolioAnalytics\n            portfolio={activePortfolio}\n            selectedTimeframe={selectedTimeframe}\n            onTimeframeChange={setSelectedTimeframe}\n            timeframeOptions={timeframeOptions}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Portfolio Overview Component\nconst PortfolioCard = ({ portfolio, marketData: _marketData, selectedTimeframe: _selectedTimeframe, onTimeframeChange: _onTimeframeChange, timeframeOptions: _timeframeOptions }) => {\n  return (\n    <div className=\"space-y-6\">\n      {/* Portfolio Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Portfolio Value</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(portfolio.totalValue)}\n              </p>\n            </div>\n            <div className=\"p-3 bg-blue-100 rounded-lg\">\n              <DollarSign className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Gain/Loss</p>\n              <p className={`text-2xl font-bold ${portfolio.totalGainLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatCurrency(portfolio.totalGainLoss)}\n              </p>\n              <p className={`text-sm ${portfolio.totalGainLossPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatPercentage(portfolio.totalGainLossPercent)}\n              </p>\n            </div>\n            <div className={`p-3 rounded-lg ${portfolio.totalGainLoss >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n              {portfolio.totalGainLoss >= 0 ? (\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-6 h-6 text-red-600\" />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Day Change</p>\n              <p className={`text-2xl font-bold ${portfolio.dailyChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatCurrency(portfolio.dailyChange)}\n              </p>\n              <p className={`text-sm ${portfolio.dailyChangePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatPercentage(portfolio.dailyChangePercent)}\n              </p>\n            </div>\n            <div className={`p-3 rounded-lg ${portfolio.dailyChange >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n              {portfolio.dailyChange >= 0 ? (\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-6 h-6 text-red-600\" />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Dividend Yield</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatPercentage(portfolio.dividendYield)}\n              </p>\n              <p className=\"text-sm text-gray-500\">Weighted Average</p>\n            </div>\n            <div className=\"p-3 bg-purple-100 rounded-lg\">\n              <Target className=\"w-6 h-6 text-purple-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Holdings Table */}\n      <div className=\"bg-white rounded-xl shadow-sm border\">\n        <div className=\"px-6 py-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Holdings</h3>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <label htmlFor=\"portfolio-name\" className=\"block text-sm font-medium text-gray-700 mb-1\">Timeframe:</label>\n                <input\n                  id=\"portfolio-name\"\n                  type=\"text\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Enter portfolio name\"\n                />\n              </div>\n              {/* Loading indicator would appear here */}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table \n            className=\"w-full\" \n            role=\"table\"\n            aria-label=\"Portfolio holdings table\"\n          >\n            <caption className=\"sr-only\">\n              Portfolio holdings showing symbols, shares, prices, market values, allocations, and performance data\n            </caption>\n            <thead className=\"bg-gray-50\">\n              <tr role=\"row\">\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Symbol / Name\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Shares\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Price\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Market Value\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Allocation\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Day Change\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Total Gain/Loss\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {portfolio.holdings.map(holding => (\n                <tr key={holding.symbol} className=\"hover:bg-gray-50 focus-within:bg-gray-100\" role=\"row\">\n                  <th scope=\"row\" className=\"px-6 py-4 whitespace-nowrap font-medium\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">{holding.symbol}</div>\n                      <div className=\"text-sm text-gray-500\">{holding.name}</div>\n                    </div>\n                  </th>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\" \n                    tabIndex=\"0\"\n                    aria-label={`Shares: ${formatNumber(holding.shares)}`}\n                  >\n                    {formatNumber(holding.shares)}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\" \n                    tabIndex=\"0\"\n                    aria-label={`Price: ${formatCurrency(holding.currentPrice)}`}\n                  >\n                    {formatCurrency(holding.currentPrice)}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\" \n                    tabIndex=\"0\"\n                    aria-label={`Market Value: ${formatCurrency(holding.value)}`}\n                  >\n                    {formatCurrency(holding.value)}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\" \n                    tabIndex=\"0\"\n                    aria-label={`Allocation: ${formatPercentage(holding.allocation)}`}\n                  >\n                    {formatPercentage(holding.allocation)}\n                  </td>\n                  <td \n                    className={`px-6 py-4 whitespace-nowrap text-right text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset ${holding.dayChange >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                    tabIndex=\"0\"\n                    aria-label={`Day Change: ${formatCurrency(holding.dayChange)} ${holding.dayChange >= 0 ? 'positive' : 'negative'}`}\n                  >\n                    {formatCurrency(holding.dayChange)}\n                  </td>\n                  <td \n                    className={`px-6 py-4 whitespace-nowrap text-right text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset ${holding.gainLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                    tabIndex=\"0\"\n                    aria-label={`Total Gain Loss: ${formatCurrency(holding.gainLoss)} ${holding.gainLossPercent >= 0 ? 'positive' : 'negative'} ${formatPercentage(holding.gainLossPercent)} percent`}\n                  >\n                    <div>{formatCurrency(holding.gainLoss)}</div>\n                    <div className=\"text-xs\">({formatPercentage(holding.gainLossPercent)})</div>\n                  </td>\n                </tr>\n              ))}\n\n              {/* Cash Row */}\n              {portfolio.cash > 0 && (\n                <tr className=\"hover:bg-gray-50 focus-within:bg-gray-100\" role=\"row\">\n                  <th scope=\"row\" className=\"px-6 py-4 whitespace-nowrap font-medium\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">CASH</div>\n                      <div className=\"text-sm text-gray-500\">Cash & Cash Equivalents</div>\n                    </div>\n                  </th>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\" aria-label=\"Shares: Not applicable\">-</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\" aria-label=\"Price: Not applicable\">-</td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\" \n                    tabIndex=\"0\"\n                    aria-label={`Cash Value: ${formatCurrency(portfolio.cash)}`}\n                  >\n                    {formatCurrency(portfolio.cash)}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\"\n                    aria-label=\"Cash Allocation: 0.1 percent\"\n                  >\n                    {formatPercentage(0.1)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-500\" aria-label=\"Day Change: Not applicable\">-</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-500\" aria-label=\"Total Gain Loss: Not applicable\">-</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default PortfolioManagement;\n"],"names":["PortfolioAnalytics","portfolio","metrics","selectedTimeframe","onTimeframeChange","timeframeOptions","analyticsData","setAnalyticsData","useState","riskMetrics","correlationMatrix","performanceAttribution","historicalPerformance","loading","setLoading","risk","correlation","performance","activeChart","setActiveChart","riskTimeframe","_setRiskTimeframe","calculateRiskMetrics","useCallback","async","holdings","length","prev","symbols","map","h","symbol","weights","allocation","individualRiskPromises","riskCommand","portfolioCommands","RISK_METRICS","mockCommand","parameters","parseInt","result","execute","data","error","individualRiskResults","Promise","all","validRisks","filter","r","aggregatedMetrics","portfolioVolatility","calculateWeightedAverage","volatility","portfolioBeta","beta","portfolioSharpe","sharpeRatio","portfolioVar95","var95","portfolioVar99","var99","maxDrawdown","Math","max","concentrationRisk","calculateConcentrationRisk","individualMetrics","index","weight","item","calculateCorrelationMatrix","message","correlationCommand","CORRELATION_MATRIX","type","generateHistoricalPerformance","days","getDaysFromTimeframe","startValue","totalValue","i","date","Date","setDate","getDate","trend","value","sin","random","push","toISOString","split","portfolioValue","benchmark","calculatePerformanceAttribution","attribution","holding","contribution","gainLossPercent","name","return","sort","a","b","abs","useEffect","jsxs","className","children","jsx","label","icon","TrendingUp","Shield","Activity","Target","Icon","onClick","htmlFor","id","onChange","e","target","option","Download","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","tickFormatter","toLocaleDateString","YAxis","formatCurrency","Tooltip","formatter","labelFormatter","Line","strokeWidth","dot","PerformanceMetricsCard","PerformanceAttributionCard","RiskMetricsCard","RiskDecompositionCard","RefreshCw","CorrelationMatrix","BarChart","formatPercentage","Bar","fill","radius","AttributionBreakdownCard","totalGainLossPercent","dailyChangePercent","dividendYield","slice","formatNumber","pair","strength","timeframe","YTD","floor","getFullYear","values","reduce","sum","PortfolioBuilder","onPortfolioUpdate","marketData","_marketData","builderMode","setBuilderMode","searchTerm","setSearchTerm","searchResults","setSearchResults","isSearching","setIsSearching","targetAllocation","setTargetAllocation","optimizationSettings","setOptimizationSettings","objective","constraints","maxWeight","minWeight","maxSectorWeight","rebalanceSettings","setRebalanceSettings","threshold","cashBuffer","minimumTrade","isDirty","setIsDirty","React","Object","keys","currentAllocation","forEach","searchStocks","query","filtered","sector","marketCap","stock","toLowerCase","includes","timeoutId","setTimeout","clearTimeout","allocationAnalysis","useMemo","totalTarget","val","cashAllocation","deviations","targetVal","deviation","current","maxDeviation","d","avgDeviation","isValid","needsRebalancing","addStock","quote","secureApiClient","getQuote","newHolding","shares","currentPrice","costBasis","updatedPortfolio","removeStock","updated","updateTargetAllocation","min","generateRebalancingTrades","trades","find","tradeDollarAmount","tradeShares","round","action","dollarAmount","reason","toFixed","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","PieChart","BarChart3","AlertTriangle","RotateCcw","Save","AllocationBuilder","onUpdateAllocation","onRemoveStock","handleDragEnd","event","active","over","oldIndex","findIndex","newIndex","arrayMove","OptimizationBuilder","onSettingsChange","RebalancingBuilder","generateTrades","Search","placeholder","disabled","some","Plus","DndContext","collisionDetection","closestCenter","onDragEnd","SortableContext","items","strategy","verticalListSortingStrategy","SortableHoldingRow","onRemove","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","style","CSS","Transform","toString","opacity","ref","parseFloat","step","Trash2","_portfolio","_optimizationSettings","_onSettingsChange","_allocationAnalysis","CheckCircle","trade","TrendingDown","PortfolioManagement","_portfolios","activePortfolio","setActivePortfolio","_portfolioPerformance","_setPortfolioPerformance","_riskMetrics","_setRiskMetrics","setMarketData","portfolios","market","_showCreateModal","setSelectedTimeframe","viewMode","setViewMode","description","cash","fetchMarketData","marketPromises","catch","results","marketDataMap","totalCostBasis","dailyChange","updatedHoldings","marketQuote","previousClose","change","currentValue","costBasisValue","holdingDailyChange","gainLoss","dayChange","totalGainLoss","interval","setInterval","clearInterval","SEOHead","title","keywords","SecondaryNav","variant","activeItem","onItemClick","itemId","PortfolioCard","_selectedTimeframe","_onTimeframeChange","_timeframeOptions","DollarSign","role","scope","tabIndex"],"mappings":"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"}
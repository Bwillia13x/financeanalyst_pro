{"version":3,"file":"businessIntelligenceService-DTE7ncSd.js","sources":["../../src/services/businessIntelligenceService.js"],"sourcesContent":["/**\n * Business Intelligence Service\n * Advanced analytics, usage tracking, performance benchmarking, and automated intelligence\n */\n\nimport { EventEmitter } from 'events';\n\n// import { performanceMonitoring } from '../utils/performanceMonitoring'; // Missing module\n\nclass BusinessIntelligenceService extends EventEmitter {\n  constructor() {\n    super();\n    this.analytics = new Map();\n    this.userBehavior = new Map();\n    this.performanceMetrics = new Map();\n    this.marketIntelligence = new Map();\n    this.automatedReports = new Map();\n    this.benchmarks = new Map();\n    this.insights = new Map();\n    this.isInitialized = false;\n    this.trackingEnabled = true;\n    this.reportingInterval = null;\n    this.insightGenerationInterval = null;\n\n    // Data collection queues\n    this.analyticsQueue = [];\n    this.behaviorQueue = [];\n    this.performanceQueue = [];\n\n    // Intelligence models\n    this.patterns = {\n      userEngagement: new Map(),\n      featureUsage: new Map(),\n      performanceTrends: new Map(),\n      marketCorrelations: new Map()\n    };\n  }\n\n  /**\n   * Initialize Business Intelligence Service\n   */\n  async initialize(config = {}) {\n    try {\n      if (this.isInitialized) {\n        console.warn('BusinessIntelligenceService already initialized');\n        return;\n      }\n\n      this.config = {\n        enableUserTracking: config.enableUserTracking !== false,\n        enablePerformanceTracking: config.enablePerformanceTracking !== false,\n        enableMarketIntelligence: config.enableMarketIntelligence !== false,\n        reportingInterval: config.reportingInterval || 300000, // 5 minutes\n        insightGenerationInterval: config.insightGenerationInterval || 900000, // 15 minutes\n        maxQueueSize: config.maxQueueSize || 1000,\n        batchSize: config.batchSize || 50,\n        ...config\n      };\n\n      // Initialize data collectors\n      this.initializeAnalyticsCollector();\n      this.initializeBehaviorTracker();\n      this.initializePerformanceMonitor();\n      this.initializeMarketIntelligence();\n\n      // Start automated processes\n      this.startAutomatedReporting();\n      this.startInsightGeneration();\n\n      // Initialize benchmark data\n      await this.initializeBenchmarks();\n\n      this.isInitialized = true;\n      this.emit('initialized', { config: this.config });\n\n      // Track initialization\n      if (typeof performanceMonitoring !== 'undefined') {\n        // performanceMonitoring.trackCustomMetric('bi_service_init_success', 1);\n      }\n\n      console.log('BusinessIntelligenceService initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize BusinessIntelligenceService:', error);\n      if (typeof performanceMonitoring !== 'undefined') {\n        // performanceMonitoring.trackCustomMetric('bi_service_init_error', 1);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize analytics data collector\n   */\n  initializeAnalyticsCollector() {\n    // Track page views, feature usage, user interactions\n    this.trackPageView = (page, metadata = {}) => {\n      this.addToQueue('analytics', {\n        type: 'page_view',\n        page,\n        timestamp: Date.now(),\n        sessionId: this.getSessionId(),\n        metadata\n      });\n    };\n\n    this.trackFeatureUsage = (feature, action, metadata = {}) => {\n      this.addToQueue('analytics', {\n        type: 'feature_usage',\n        feature,\n        action,\n        timestamp: Date.now(),\n        sessionId: this.getSessionId(),\n        metadata\n      });\n    };\n\n    this.trackUserInteraction = (interaction, target, metadata = {}) => {\n      this.addToQueue('analytics', {\n        type: 'user_interaction',\n        interaction,\n        target,\n        timestamp: Date.now(),\n        sessionId: this.getSessionId(),\n        metadata\n      });\n    };\n  }\n\n  /**\n   * Initialize user behavior tracker\n   */\n  initializeBehaviorTracker() {\n    this.behaviorPatterns = {\n      sessionDuration: new Map(),\n      featureAdoption: new Map(),\n      userJourney: new Map(),\n      engagementScores: new Map(),\n      retentionMetrics: new Map()\n    };\n\n    // Track user sessions\n    this.startSession = (userId, metadata = {}) => {\n      const sessionId = this.generateSessionId();\n      const session = {\n        id: sessionId,\n        userId,\n        startTime: Date.now(),\n        metadata,\n        interactions: [],\n        features: new Set(),\n        pages: []\n      };\n\n      this.behaviorPatterns.sessionDuration.set(sessionId, session);\n      return sessionId;\n    };\n\n    this.endSession = (sessionId) => {\n      const session = this.behaviorPatterns.sessionDuration.get(sessionId);\n      if (session) {\n        session.endTime = Date.now();\n        session.duration = session.endTime - session.startTime;\n        this.analyzeSession(session);\n      }\n    };\n  }\n\n  /**\n   * Initialize performance monitoring\n   */\n  initializePerformanceMonitor() {\n    this.performanceMetrics = {\n      responseTime: [],\n      errorRates: new Map(),\n      resourceUsage: [],\n      userExperience: new Map(),\n      systemHealth: new Map()\n    };\n\n    // Collect performance data\n    this.collectPerformanceData = () => {\n      const metrics = {\n        timestamp: Date.now(),\n        memory: this.getMemoryUsage(),\n        timing: this.getTimingMetrics(),\n        errors: this.getErrorMetrics(),\n        userExperience: this.getUserExperienceMetrics()\n      };\n\n      this.addToQueue('performance', metrics);\n    };\n\n    // Start periodic collection\n    setInterval(() => {\n      this.collectPerformanceData();\n    }, 30000); // Every 30 seconds\n  }\n\n  /**\n   * Initialize market intelligence\n   */\n  initializeMarketIntelligence() {\n    this.marketIntelligence = {\n      trends: new Map(),\n      correlations: new Map(),\n      anomalies: [],\n      predictions: new Map(),\n      alerts: []\n    };\n\n    // Market data analysis\n    this.analyzeMarketData = (data) => {\n      const analysis = {\n        timestamp: Date.now(),\n        trends: this.identifyTrends(data),\n        correlations: this.findCorrelations(data),\n        anomalies: this.detectAnomalies(data),\n        signals: this.generateTradingSignals(data)\n      };\n\n      this.marketIntelligence.trends.set(Date.now(), analysis);\n      this.emit('marketAnalysis', analysis);\n    };\n  }\n\n  /**\n   * Initialize benchmark data\n   */\n  async initializeBenchmarks() {\n    // Industry benchmarks for financial metrics\n    this.benchmarks = new Map([\n      ['portfolio_performance', {\n        excellent: { returns: 0.12, sharpe: 1.5, volatility: 0.15 },\n        good: { returns: 0.08, sharpe: 1.0, volatility: 0.18 },\n        average: { returns: 0.06, sharpe: 0.7, volatility: 0.22 },\n        poor: { returns: 0.03, sharpe: 0.4, volatility: 0.28 }\n      }],\n      ['risk_metrics', {\n        excellent: { var_95: 0.02, cvar_95: 0.03, max_drawdown: 0.05 },\n        good: { var_95: 0.04, cvar_95: 0.06, max_drawdown: 0.08 },\n        average: { var_95: 0.06, cvar_95: 0.09, max_drawdown: 0.12 },\n        poor: { var_95: 0.08, cvar_95: 0.12, max_drawdown: 0.18 }\n      }],\n      ['user_engagement', {\n        excellent: { session_duration: 1800, pages_per_session: 8, bounce_rate: 0.2 },\n        good: { session_duration: 1200, pages_per_session: 6, bounce_rate: 0.3 },\n        average: { session_duration: 600, pages_per_session: 4, bounce_rate: 0.5 },\n        poor: { session_duration: 300, pages_per_session: 2, bounce_rate: 0.7 }\n      }],\n      ['system_performance', {\n        excellent: { response_time: 200, error_rate: 0.001, uptime: 0.999 },\n        good: { response_time: 500, error_rate: 0.005, uptime: 0.995 },\n        average: { response_time: 1000, error_rate: 0.01, uptime: 0.99 },\n        poor: { response_time: 2000, error_rate: 0.02, uptime: 0.95 }\n      }]\n    ]);\n  }\n\n  /**\n   * Start automated reporting\n   */\n  startAutomatedReporting() {\n    this.reportingInterval = setInterval(() => {\n      this.generateAutomatedReports();\n    }, this.config.reportingInterval);\n  }\n\n  /**\n   * Start insight generation\n   */\n  startInsightGeneration() {\n    this.insightGenerationInterval = setInterval(() => {\n      this.generateIntelligentInsights();\n    }, this.config.insightGenerationInterval);\n  }\n\n  /**\n   * Add data to processing queue\n   */\n  addToQueue(queueType, data) {\n    if (!this.trackingEnabled) return;\n\n    const queue = this[`${queueType}Queue`];\n    if (queue && queue.length < this.config.maxQueueSize) {\n      queue.push(data);\n\n      // Process queue when batch size reached\n      if (queue.length >= this.config.batchSize) {\n        this.processBatch(queueType);\n      }\n    }\n  }\n\n  /**\n   * Process data batches\n   */\n  async processBatch(queueType) {\n    const queue = this[`${queueType}Queue`];\n    if (!queue || queue.length === 0) return;\n\n    const batch = queue.splice(0, this.config.batchSize);\n\n    try {\n      switch (queueType) {\n        case 'analytics':\n          await this.processAnalyticsBatch(batch);\n          break;\n        case 'behavior':\n          await this.processBehaviorBatch(batch);\n          break;\n        case 'performance':\n          await this.processPerformanceBatch(batch);\n          break;\n      }\n    } catch (error) {\n      console.error(`Failed to process ${queueType} batch:`, error);\n    }\n  }\n\n  /**\n   * Process analytics batch\n   */\n  async processAnalyticsBatch(batch) {\n    for (const item of batch) {\n      switch (item.type) {\n        case 'page_view':\n          this.updatePageViewMetrics(item);\n          break;\n        case 'feature_usage':\n          this.updateFeatureUsageMetrics(item);\n          break;\n        case 'user_interaction':\n          this.updateInteractionMetrics(item);\n          break;\n      }\n    }\n\n    this.emit('analyticsBatchProcessed', { count: batch.length });\n  }\n\n  /**\n   * Process behavior batch\n   */\n  async processBehaviorBatch(batch) {\n    for (const item of batch) {\n      this.updateBehaviorPatterns(item);\n    }\n\n    this.emit('behaviorBatchProcessed', { count: batch.length });\n  }\n\n  /**\n   * Process performance batch\n   */\n  async processPerformanceBatch(batch) {\n    const aggregated = this.aggregatePerformanceMetrics(batch);\n    this.updatePerformanceTrends(aggregated);\n\n    this.emit('performanceBatchProcessed', { count: batch.length, aggregated });\n  }\n\n  /**\n   * Generate automated reports\n   */\n  async generateAutomatedReports() {\n    try {\n      const reports = {\n        timestamp: Date.now(),\n        usage: await this.generateUsageReport(),\n        performance: await this.generatePerformanceReport(),\n        userBehavior: await this.generateBehaviorReport(),\n        marketIntelligence: await this.generateMarketReport(),\n        recommendations: await this.generateRecommendations()\n      };\n\n      this.automatedReports.set(Date.now(), reports);\n      this.emit('automatedReportGenerated', reports);\n\n      // Clean up old reports (keep last 100)\n      if (this.automatedReports.size > 100) {\n        const keys = Array.from(this.automatedReports.keys()).sort();\n        keys.slice(0, -100).forEach(key => {\n          this.automatedReports.delete(key);\n        });\n      }\n\n      return reports;\n    } catch (error) {\n      console.error('Failed to generate automated reports:', error);\n    }\n  }\n\n  /**\n   * Generate intelligent insights\n   */\n  async generateIntelligentInsights() {\n    try {\n      const insights = {\n        timestamp: Date.now(),\n        patterns: await this.identifyPatterns(),\n        anomalies: await this.detectSystemAnomalies(),\n        predictions: await this.generatePredictions(),\n        optimizations: await this.suggestOptimizations(),\n        alerts: await this.generateAlerts()\n      };\n\n      this.insights.set(Date.now(), insights);\n      this.emit('intelligentInsightsGenerated', insights);\n\n      return insights;\n    } catch (error) {\n      console.error('Failed to generate intelligent insights:', error);\n    }\n  }\n\n  /**\n   * Generate usage report\n   */\n  async generateUsageReport() {\n    const now = Date.now();\n    const dayAgo = now - 24 * 60 * 60 * 1000;\n\n    return {\n      period: '24h',\n      metrics: {\n        totalSessions: this.countSessions(dayAgo, now),\n        uniqueUsers: this.countUniqueUsers(dayAgo, now),\n        averageSessionDuration: this.calculateAverageSessionDuration(dayAgo, now),\n        topFeatures: this.getTopFeatures(dayAgo, now),\n        pageViews: this.countPageViews(dayAgo, now),\n        userEngagement: this.calculateEngagementMetrics(dayAgo, now)\n      },\n      trends: {\n        sessionsGrowth: this.calculateGrowthRate('sessions', dayAgo, now),\n        userGrowth: this.calculateGrowthRate('users', dayAgo, now),\n        engagementTrend: this.calculateEngagementTrend(dayAgo, now)\n      }\n    };\n  }\n\n  /**\n   * Generate performance report\n   */\n  async generatePerformanceReport() {\n    const metrics = this.performanceMetrics;\n\n    return {\n      systemHealth: {\n        overall: this.calculateOverallHealth(),\n        responseTime: {\n          average: this.calculateAverage(metrics.responseTime),\n          p95: this.calculatePercentile(metrics.responseTime, 95),\n          trend: this.calculateTrend(metrics.responseTime)\n        },\n        errorRate: this.calculateErrorRate(),\n        uptime: this.calculateUptime()\n      },\n      benchmarks: this.compareToBenchmarks('system_performance'),\n      alerts: this.getPerformanceAlerts(),\n      recommendations: this.getPerformanceRecommendations()\n    };\n  }\n\n  /**\n   * Generate behavior report\n   */\n  async generateBehaviorReport() {\n    return {\n      userJourney: this.analyzeUserJourneys(),\n      engagementPatterns: this.analyzeEngagementPatterns(),\n      featureAdoption: this.analyzeFeatureAdoption(),\n      retentionMetrics: this.calculateRetentionMetrics(),\n      segmentation: this.segmentUsers(),\n      churnRisk: this.identifyChurnRisk()\n    };\n  }\n\n  /**\n   * Generate market intelligence report\n   */\n  async generateMarketReport() {\n    return {\n      trends: Array.from(this.marketIntelligence.trends.values()).slice(-10),\n      correlations: Array.from(this.marketIntelligence.correlations.values()),\n      anomalies: this.marketIntelligence.anomalies.slice(-20),\n      predictions: Array.from(this.marketIntelligence.predictions.values()),\n      alerts: this.marketIntelligence.alerts.slice(-10),\n      signals: this.generateTradingSignals()\n    };\n  }\n\n  /**\n   * Benchmark comparison\n   */\n  compareToBenchmarks(category) {\n    const benchmarks = this.benchmarks.get(category);\n    if (!benchmarks) return null;\n\n    const currentMetrics = this.getCurrentMetrics(category);\n    const comparison = {};\n\n    for (const [level, values] of Object.entries(benchmarks)) {\n      comparison[level] = {};\n      for (const [metric, benchmark] of Object.entries(values)) {\n        const current = currentMetrics[metric];\n        if (current !== undefined) {\n          comparison[level][metric] = {\n            current,\n            benchmark,\n            ratio: current / benchmark,\n            status: this.getBenchmarkStatus(current, benchmark, metric)\n          };\n        }\n      }\n    }\n\n    return comparison;\n  }\n\n  /**\n   * Advanced pattern recognition\n   */\n  async identifyPatterns() {\n    return {\n      userBehavior: this.identifyBehaviorPatterns(),\n      performance: this.identifyPerformancePatterns(),\n      market: this.identifyMarketPatterns(),\n      usage: this.identifyUsagePatterns()\n    };\n  }\n\n  /**\n   * Generate predictive insights\n   */\n  async generatePredictions() {\n    return {\n      userGrowth: this.predictUserGrowth(),\n      performance: this.predictPerformanceTrends(),\n      market: this.predictMarketMovements(),\n      churn: this.predictUserChurn()\n    };\n  }\n\n  /**\n   * Get current analytics data\n   */\n  getCurrentAnalytics() {\n    return {\n      usage: this.getUsageMetrics(),\n      performance: this.getPerformanceMetrics(),\n      behavior: this.getBehaviorMetrics(),\n      market: this.getMarketMetrics()\n    };\n  }\n\n  /**\n   * Get historical trends\n   */\n  getHistoricalTrends(metric, period = '30d') {\n    const data = this.analytics.get(metric) || [];\n    const cutoff = Date.now() - this.parsePeriod(period);\n\n    return data\n      .filter(item => item.timestamp > cutoff)\n      .sort((a, b) => a.timestamp - b.timestamp);\n  }\n\n  /**\n   * Generate actionable insights\n   */\n  getActionableInsights() {\n    const insights = [];\n    const latestInsight = Array.from(this.insights.values()).pop();\n\n    if (latestInsight) {\n      insights.push(...latestInsight.optimizations);\n      insights.push(...latestInsight.alerts);\n    }\n\n    return insights.sort((a, b) => b.priority - a.priority);\n  }\n\n  /**\n   * Export analytics data\n   */\n  exportData(format = 'json', filters = {}) {\n    const data = {\n      analytics: Array.from(this.analytics.entries()),\n      behavior: Array.from(this.userBehavior.entries()),\n      performance: Array.from(this.performanceMetrics.entries()),\n      insights: Array.from(this.insights.entries()),\n      reports: Array.from(this.automatedReports.entries())\n    };\n\n    // Apply filters\n    if (filters.startDate || filters.endDate) {\n      // Filter by date range\n    }\n\n    switch (format) {\n      case 'csv':\n        return this.convertToCSV(data);\n      case 'json':\n      default:\n        return JSON.stringify(data, null, 2);\n    }\n  }\n\n  /**\n   * Utility methods\n   */\n  getSessionId() {\n    return sessionStorage.getItem('bi_session_id') || 'anonymous';\n  }\n\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  parsePeriod(period) {\n    const units = { d: 86400000, h: 3600000, m: 60000 };\n    const match = period.match(/^(\\d+)([dhm])$/);\n    return match ? parseInt(match[1]) * units[match[2]] : 86400000;\n  }\n\n  calculateAverage(data) {\n    if (!data || data.length === 0) return 0;\n    return data.reduce((sum, val) => sum + val, 0) / data.length;\n  }\n\n  calculatePercentile(data, percentile) {\n    if (!data || data.length === 0) return 0;\n    const sorted = [...data].sort((a, b) => a - b);\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\n    return sorted[Math.max(0, index)];\n  }\n\n  /**\n   * Cleanup and shutdown\n   */\n  async cleanup() {\n    try {\n      if (this.reportingInterval) {\n        clearInterval(this.reportingInterval);\n      }\n\n      if (this.insightGenerationInterval) {\n        clearInterval(this.insightGenerationInterval);\n      }\n\n      // Process remaining queues\n      await this.processBatch('analytics');\n      await this.processBatch('behavior');\n      await this.processBatch('performance');\n\n      // Clear data\n      this.analytics.clear();\n      this.userBehavior.clear();\n      this.performanceMetrics.clear();\n      this.marketIntelligence.clear();\n      this.automatedReports.clear();\n      this.insights.clear();\n\n      this.isInitialized = false;\n      this.emit('cleanup');\n\n      console.log('BusinessIntelligenceService cleaned up');\n    } catch (error) {\n      console.error('Error during BI service cleanup:', error);\n    }\n  }\n\n  // Placeholder implementations for complex analysis methods\n  identifyTrends(_data) {\n    return [];\n  }\n  findCorrelations(_data) {\n    return [];\n  }\n  detectAnomalies(_data) {\n    return [];\n  }\n  generateTradingSignals(_data) {\n    return [];\n  }\n  analyzeSession(_session) {\n    return {};\n  }\n  getMemoryUsage() {\n    return { used: 0, total: 0 };\n  }\n  getTimingMetrics() {\n    return {};\n  }\n  getErrorMetrics() {\n    return {};\n  }\n  getUserExperienceMetrics() {\n    return {};\n  }\n  updatePageViewMetrics(_item) {}\n  updateFeatureUsageMetrics(_item) {}\n  updateInteractionMetrics(_item) {}\n  updateBehaviorPatterns(_item) {}\n  aggregatePerformanceMetrics(_batch) {\n    return {};\n  }\n  updatePerformanceTrends(_aggregated) {}\n  detectSystemAnomalies() {\n    return [];\n  }\n  suggestOptimizations() {\n    return [];\n  }\n  generateAlerts() {\n    return [];\n  }\n  countSessions(_start, _end) {\n    return 0;\n  }\n  countUniqueUsers(_start, _end) {\n    return 0;\n  }\n  calculateAverageSessionDuration(_start, _end) {\n    return 0;\n  }\n  getTopFeatures(_start, _end) {\n    return [];\n  }\n  countPageViews(_start, _end) {\n    return 0;\n  }\n  calculateEngagementMetrics(_start, _end) {\n    return {};\n  }\n  calculateGrowthRate(_metric, _start, _end) {\n    return 0;\n  }\n  calculateEngagementTrend(_start, _end) {\n    return 0;\n  }\n  calculateOverallHealth() {\n    return 100;\n  }\n  calculateErrorRate() {\n    return 0;\n  }\n  calculateUptime() {\n    return 99.9;\n  }\n  getPerformanceAlerts() {\n    return [];\n  }\n  getPerformanceRecommendations() {\n    return [];\n  }\n  analyzeUserJourneys() {\n    return {};\n  }\n  analyzeEngagementPatterns() {\n    return {};\n  }\n  analyzeFeatureAdoption() {\n    return {};\n  }\n  calculateRetentionMetrics() {\n    return {};\n  }\n  segmentUsers() {\n    return {};\n  }\n  identifyChurnRisk() {\n    return [];\n  }\n  getCurrentMetrics(_category) {\n    return {};\n  }\n  getBenchmarkStatus(_current, _benchmark, _metric) {\n    return 'good';\n  }\n  identifyBehaviorPatterns() {\n    return [];\n  }\n  identifyPerformancePatterns() {\n    return [];\n  }\n  identifyMarketPatterns() {\n    return [];\n  }\n  identifyUsagePatterns() {\n    return [];\n  }\n  predictUserGrowth() {\n    return {};\n  }\n  predictPerformanceTrends() {\n    return {};\n  }\n  predictMarketMovements() {\n    return {};\n  }\n  predictUserChurn() {\n    return [];\n  }\n  getUsageMetrics() {\n    return {};\n  }\n  getPerformanceMetrics() {\n    return {};\n  }\n  getBehaviorMetrics() {\n    return {};\n  }\n  getMarketMetrics() {\n    return {};\n  }\n  calculateTrend(_data) {\n    return 0;\n  }\n  generateRecommendations() {\n    return [];\n  }\n  convertToCSV(_data) {\n    return '';\n  }\n}\n\n// Export singleton instance\nexport default new BusinessIntelligenceService();\n"],"names":["BusinessIntelligenceService","EventEmitter","constructor","super","this","analytics","Map","userBehavior","performanceMetrics","marketIntelligence","automatedReports","benchmarks","insights","isInitialized","trackingEnabled","reportingInterval","insightGenerationInterval","analyticsQueue","behaviorQueue","performanceQueue","patterns","userEngagement","featureUsage","performanceTrends","marketCorrelations","initialize","config","enableUserTracking","enablePerformanceTracking","enableMarketIntelligence","maxQueueSize","batchSize","initializeAnalyticsCollector","initializeBehaviorTracker","initializePerformanceMonitor","initializeMarketIntelligence","startAutomatedReporting","startInsightGeneration","initializeBenchmarks","emit","error","trackPageView","page","metadata","addToQueue","type","timestamp","Date","now","sessionId","getSessionId","trackFeatureUsage","feature","action","trackUserInteraction","interaction","target","behaviorPatterns","sessionDuration","featureAdoption","userJourney","engagementScores","retentionMetrics","startSession","userId","generateSessionId","session","id","startTime","interactions","features","Set","pages","set","endSession","get","endTime","duration","analyzeSession","responseTime","errorRates","resourceUsage","userExperience","systemHealth","collectPerformanceData","metrics","memory","getMemoryUsage","timing","getTimingMetrics","errors","getErrorMetrics","getUserExperienceMetrics","setInterval","trends","correlations","anomalies","predictions","alerts","analyzeMarketData","data","analysis","identifyTrends","findCorrelations","detectAnomalies","signals","generateTradingSignals","excellent","returns","sharpe","volatility","good","average","poor","var_95","cvar_95","max_drawdown","session_duration","pages_per_session","bounce_rate","response_time","error_rate","uptime","generateAutomatedReports","generateIntelligentInsights","queueType","queue","length","push","processBatch","batch","splice","processAnalyticsBatch","processBehaviorBatch","processPerformanceBatch","item","updatePageViewMetrics","updateFeatureUsageMetrics","updateInteractionMetrics","count","updateBehaviorPatterns","aggregated","aggregatePerformanceMetrics","updatePerformanceTrends","reports","usage","generateUsageReport","performance","generatePerformanceReport","generateBehaviorReport","generateMarketReport","recommendations","generateRecommendations","size","Array","from","keys","sort","slice","forEach","key","delete","identifyPatterns","detectSystemAnomalies","generatePredictions","optimizations","suggestOptimizations","generateAlerts","dayAgo","period","totalSessions","countSessions","uniqueUsers","countUniqueUsers","averageSessionDuration","calculateAverageSessionDuration","topFeatures","getTopFeatures","pageViews","countPageViews","calculateEngagementMetrics","sessionsGrowth","calculateGrowthRate","userGrowth","engagementTrend","calculateEngagementTrend","overall","calculateOverallHealth","calculateAverage","p95","calculatePercentile","trend","calculateTrend","errorRate","calculateErrorRate","calculateUptime","compareToBenchmarks","getPerformanceAlerts","getPerformanceRecommendations","analyzeUserJourneys","engagementPatterns","analyzeEngagementPatterns","analyzeFeatureAdoption","calculateRetentionMetrics","segmentation","segmentUsers","churnRisk","identifyChurnRisk","values","category","currentMetrics","getCurrentMetrics","comparison","level","Object","entries","metric","benchmark","current","undefined","ratio","status","getBenchmarkStatus","identifyBehaviorPatterns","identifyPerformancePatterns","market","identifyMarketPatterns","identifyUsagePatterns","predictUserGrowth","predictPerformanceTrends","predictMarketMovements","churn","predictUserChurn","getCurrentAnalytics","getUsageMetrics","getPerformanceMetrics","behavior","getBehaviorMetrics","getMarketMetrics","getHistoricalTrends","cutoff","parsePeriod","filter","a","b","getActionableInsights","latestInsight","pop","priority","exportData","format","filters","startDate","endDate","convertToCSV","JSON","stringify","sessionStorage","getItem","Math","random","toString","substr","match","parseInt","d","h","m","reduce","sum","val","percentile","sorted","index","ceil","max","cleanup","clearInterval","clear","_data","_session","used","total","_item","_batch","_aggregated","_start","_end","_metric","_category","_current","_benchmark","businessIntelligenceService"],"mappings":"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"}
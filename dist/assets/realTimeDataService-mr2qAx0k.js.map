{"version":3,"file":"realTimeDataService-mr2qAx0k.js","sources":["../../src/services/realTimeDataService.js"],"sourcesContent":["/**\n * Real-Time Data Service\n * Provides live market data feeds for the Living Model system\n * Enhanced with comprehensive market data and commodity feeds\n */\n\nclass RealTimeDataService {\n  constructor() {\n    this.subscribers = new Map();\n    this.connections = new Map();\n    this.dataCache = new Map();\n    this.updateInterval = 500; // 500ms updates for smoother experience\n    this.isActive = false;\n    this.marketDataTypes = new Set([\n      'stock_price', 'interest_rates', 'fx_rates', 'commodity_prices',\n      'volatility_index', 'bond_yields', 'economic_indicators'\n    ]);\n  }\n\n  /**\n   * Subscribe to real-time updates for a specific data type\n   */\n  subscribe(dataType, symbol, callback) {\n    const key = `${dataType}_${symbol}`;\n\n    if (!this.subscribers.has(key)) {\n      this.subscribers.set(key, new Set());\n    }\n\n    this.subscribers.get(key).add(callback);\n\n    // Start the data feed if not already active\n    if (!this.connections.has(key)) {\n      this.startDataFeed(dataType, symbol);\n    }\n\n    // Return current cached data if available\n    if (this.dataCache.has(key)) {\n      callback(this.dataCache.get(key));\n    }\n\n    // Return unsubscribe function\n    return () => {\n      this.unsubscribe(dataType, symbol, callback);\n    };\n  }\n\n  /**\n   * Unsubscribe from real-time updates\n   */\n  unsubscribe(dataType, symbol, callback) {\n    const key = `${dataType}_${symbol}`;\n    const subscribers = this.subscribers.get(key);\n\n    if (subscribers) {\n      subscribers.delete(callback);\n\n      // Stop data feed if no more subscribers\n      if (subscribers.size === 0) {\n        this.stopDataFeed(key);\n      }\n    }\n  }\n\n  /**\n   * Start a data feed for specific data type and symbol\n   */\n  startDataFeed(dataType, symbol) {\n    const key = `${dataType}_${symbol}`;\n\n    switch (dataType) {\n      case 'stock_price':\n        this.startStockPriceFeed(key, symbol);\n        break;\n      case 'interest_rates':\n        this.startInterestRateFeed(key, symbol);\n        break;\n      case 'fx_rates':\n        this.startFXRateFeed(key, symbol);\n        break;\n      case 'commodity_prices':\n        this.startCommodityFeed(key, symbol);\n        break;\n      case 'bond_yields':\n        this.startBondYieldFeed(key, symbol);\n        break;\n      case 'volatility_index':\n        this.startVolatilityFeed(key, symbol);\n        break;\n      case 'economic_indicators':\n        this.startEconomicIndicatorFeed(key, symbol);\n        break;\n      default:\n        console.warn(`Unknown data type: ${dataType}`);\n    }\n  }\n\n  /**\n   * Stock Price Feed (simulated real-time data)\n   */\n  startStockPriceFeed(key, symbol) {\n    const basePrice = this.getBasePrice(symbol);\n    let lastPrice = basePrice;\n\n    const interval = setInterval(() => {\n      // Simulate realistic price movement\n      const volatility = 0.02;\n      const drift = 0.0001;\n      const dt = this.updateInterval / (1000 * 60 * 60 * 24);\n\n      const randomShock = (Math.random() - 0.5) * 2;\n      const priceChange = lastPrice * (drift * dt + volatility * Math.sqrt(dt) * randomShock);\n\n      lastPrice = Math.max(0.01, lastPrice + priceChange);\n\n      const data = {\n        symbol,\n        price: lastPrice,\n        change: lastPrice - basePrice,\n        changePercent: ((lastPrice - basePrice) / basePrice) * 100,\n        timestamp: new Date().toISOString(),\n        marketOpen: this.isMarketOpen()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval);\n\n    this.connections.set(key, interval);\n  }\n\n  /**\n   * Interest Rate Feed\n   */\n  startInterestRateFeed(key, symbol) {\n    let baseRate = this.getBaseInterestRate(symbol);\n\n    const interval = setInterval(() => {\n      const change = (Math.random() - 0.5) * 0.01;\n      baseRate = Math.max(0, baseRate + change);\n\n      const data = {\n        symbol,\n        rate: baseRate,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval * 5);\n\n    this.connections.set(key, interval);\n  }\n\n  updateSubscribers(key, data) {\n    this.dataCache.set(key, data);\n    const subscribers = this.subscribers.get(key);\n\n    if (subscribers) {\n      subscribers.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in subscriber callback:', error);\n        }\n      });\n    }\n  }\n\n  stopDataFeed(key) {\n    const connection = this.connections.get(key);\n    if (connection) {\n      clearInterval(connection);\n      this.connections.delete(key);\n      this.dataCache.delete(key);\n    }\n  }\n\n  getBasePrice(symbol) {\n    const basePrices = {\n      'AAPL': 175.84,\n      'MSFT': 378.85,\n      'GOOGL': 142.56,\n      'TSLA': 248.42,\n      'AMZN': 151.94\n    };\n    return basePrices[symbol] || 100;\n  }\n\n  getBaseInterestRate(symbol) {\n    const rates = {\n      'USD_3M': 5.25,\n      'USD_10Y': 4.15,\n      'EUR_3M': 3.85,\n      'EUR_10Y': 2.45\n    };\n    return rates[symbol] || 4.0;\n  }\n\n  isMarketOpen() {\n    const now = new Date();\n    const day = now.getDay();\n    const hour = now.getHours();\n    return day >= 1 && day <= 5 && hour >= 9 && hour < 16;\n  }\n\n  /**\n   * Foreign Exchange Rate Feed\n   */\n  startFXRateFeed(key, symbol) {\n    let baseRate = this.getBaseFXRate(symbol);\n\n    const interval = setInterval(() => {\n      const volatility = 0.005;\n      const change = (Math.random() - 0.5) * 2 * volatility;\n      baseRate = Math.max(0.01, baseRate * (1 + change));\n\n      const data = {\n        symbol,\n        rate: baseRate,\n        change: change * 100,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval);\n\n    this.connections.set(key, interval);\n  }\n\n  /**\n   * Commodity Price Feed\n   */\n  startCommodityFeed(key, symbol) {\n    let basePrice = this.getBaseCommodityPrice(symbol);\n\n    const interval = setInterval(() => {\n      const volatility = symbol === 'OIL' ? 0.03 : 0.02;\n      const change = (Math.random() - 0.5) * 2 * volatility;\n      basePrice = Math.max(1, basePrice * (1 + change));\n\n      const data = {\n        symbol,\n        price: basePrice,\n        change: change * 100,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval * 2);\n\n    this.connections.set(key, interval);\n  }\n\n  /**\n   * Bond Yield Feed\n   */\n  startBondYieldFeed(key, symbol) {\n    let baseYield = this.getBaseBondYield(symbol);\n\n    const interval = setInterval(() => {\n      const change = (Math.random() - 0.5) * 0.02;\n      baseYield = Math.max(0, baseYield + change);\n\n      const data = {\n        symbol,\n        yield: baseYield,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval * 3);\n\n    this.connections.set(key, interval);\n  }\n\n  /**\n   * Volatility Index Feed\n   */\n  startVolatilityFeed(key, symbol) {\n    let baseVol = this.getBaseVolatility(symbol);\n\n    const interval = setInterval(() => {\n      const change = (Math.random() - 0.5) * 2;\n      baseVol = Math.max(5, Math.min(80, baseVol + change));\n\n      const data = {\n        symbol,\n        volatility: baseVol,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval * 4);\n\n    this.connections.set(key, interval);\n  }\n\n  /**\n   * Economic Indicator Feed\n   */\n  startEconomicIndicatorFeed(key, symbol) {\n    let baseValue = this.getBaseEconomicIndicator(symbol);\n\n    const interval = setInterval(() => {\n      const change = (Math.random() - 0.5) * 0.1;\n      baseValue = Math.max(0, baseValue + change);\n\n      const data = {\n        symbol,\n        value: baseValue,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateSubscribers(key, data);\n    }, this.updateInterval * 10);\n\n    this.connections.set(key, interval);\n  }\n\n  getBaseFXRate(symbol) {\n    const rates = {\n      'EURUSD': 1.0850,\n      'GBPUSD': 1.2650,\n      'USDJPY': 149.50,\n      'USDCHF': 0.8750,\n      'AUDUSD': 0.6580\n    };\n    return rates[symbol] || 1.0;\n  }\n\n  getBaseCommodityPrice(symbol) {\n    const prices = {\n      'OIL': 85.50,\n      'GOLD': 2050.00,\n      'SILVER': 24.80,\n      'COPPER': 8.20,\n      'NATGAS': 3.15\n    };\n    return prices[symbol] || 50.0;\n  }\n\n  getBaseBondYield(symbol) {\n    const yields = {\n      'US10Y': 4.25,\n      'US2Y': 4.85,\n      'DE10Y': 2.35,\n      'GB10Y': 4.15,\n      'JP10Y': 0.75\n    };\n    return yields[symbol] || 3.0;\n  }\n\n  getBaseVolatility(symbol) {\n    const volatilities = {\n      'VIX': 18.5,\n      'VVIX': 95.2,\n      'MOVE': 105.8\n    };\n    return volatilities[symbol] || 20.0;\n  }\n\n  getBaseEconomicIndicator(symbol) {\n    const indicators = {\n      'GDP_GROWTH': 2.4,\n      'INFLATION': 3.2,\n      'UNEMPLOYMENT': 3.8,\n      'CONSUMER_CONF': 102.5\n    };\n    return indicators[symbol] || 100.0;\n  }\n\n  getCurrentData(dataType, symbol) {\n    const key = `${dataType}_${symbol}`;\n    return this.dataCache.get(key);\n  }\n\n  /**\n   * Get all available data types\n   */\n  getAvailableDataTypes() {\n    return Array.from(this.marketDataTypes);\n  }\n\n  /**\n   * Subscribe to multiple data feeds at once\n   */\n  subscribeMultiple(subscriptions) {\n    const unsubscribeFunctions = [];\n\n    subscriptions.forEach(({ dataType, symbol, callback }) => {\n      const unsubscribe = this.subscribe(dataType, symbol, callback);\n      unsubscribeFunctions.push(unsubscribe);\n    });\n\n    return () => {\n      unsubscribeFunctions.forEach(fn => fn());\n    };\n  }\n}\n\nconst realTimeDataService = new RealTimeDataService();\nexport default realTimeDataService;\n"],"names":["realTimeDataService","constructor","this","subscribers","Map","connections","dataCache","updateInterval","isActive","marketDataTypes","Set","subscribe","dataType","symbol","callback","key","has","set","get","add","startDataFeed","unsubscribe","delete","size","stopDataFeed","startStockPriceFeed","startInterestRateFeed","startFXRateFeed","startCommodityFeed","startBondYieldFeed","startVolatilityFeed","startEconomicIndicatorFeed","basePrice","getBasePrice","lastPrice","interval","setInterval","dt","randomShock","Math","random","priceChange","sqrt","max","data","price","change","changePercent","timestamp","Date","toISOString","marketOpen","isMarketOpen","updateSubscribers","baseRate","getBaseInterestRate","rate","forEach","error","connection","clearInterval","AAPL","MSFT","GOOGL","TSLA","AMZN","USD_3M","USD_10Y","EUR_3M","EUR_10Y","now","day","getDay","hour","getHours","getBaseFXRate","getBaseCommodityPrice","volatility","baseYield","getBaseBondYield","yield","baseVol","getBaseVolatility","min","baseValue","getBaseEconomicIndicator","value","EURUSD","GBPUSD","USDJPY","USDCHF","AUDUSD","OIL","GOLD","SILVER","COPPER","NATGAS","US10Y","US2Y","DE10Y","GB10Y","JP10Y","VIX","VVIX","MOVE","GDP_GROWTH","INFLATION","UNEMPLOYMENT","CONSUMER_CONF","getCurrentData","getAvailableDataTypes","Array","from","subscribeMultiple","subscriptions","unsubscribeFunctions","push","fn"],"mappings":"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"}
const e={ERROR:0,WARN:1,INFO:2,DEBUG:3,TRACE:4},t={logLevel:e.INFO,enableMetrics:!0,enablePerformanceTracking:!0,enableErrorTracking:!0,maxLogHistory:1e3,metricsRetentionPeriod:864e5},s=new class{constructor(e={}){this.config={...t,...e},this.logs=[],this.metrics=new Map,this.performanceData=new Map,this.errorCounts=new Map,this.startTime=Date.now()}log(t,s,r={}){if((e[t.toUpperCase()]||e.INFO)<=this.config.logLevel){const e={timestamp:(new Date).toISOString(),level:t.toUpperCase(),message:s,metadata:r,id:this.generateLogId()};this.logs.push(e),this.trimLogs(),this.outputToConsole(e)}}logApiRequest(e,t,s={}){const r=this.generateRequestId(),i=Date.now();return this.log("INFO","🚀 API Request Started",{requestId:r,service:e,endpoint:t,params:this.sanitizeParams(s),startTime:i}),this.performanceData.set(r,{service:e,endpoint:t,startTime:i,params:this.sanitizeParams(s)}),r}logApiResponse(e,t,s=null,r=null){const i=this.performanceData.get(e);if(!i)return void this.log("WARN","No performance data found for request",{requestId:e});const o=Date.now()-i.startTime,{service:a,endpoint:n}=i;t?(this.log("INFO","✅ API Request Completed",{requestId:e,service:a,endpoint:n,duration:o,responseSize:this.getResponseSize(s),success:!0}),this.recordMetric(a,"success",1)):(this.log("ERROR","❌ API Request Failed",{requestId:e,service:a,endpoint:n,duration:o,error:r?{message:r.message,code:r.code,status:r.response?.status,statusText:r.response?.statusText}:null,success:!1}),this.recordMetric(a,"error",1),this.recordError(a,r)),this.recordMetric(a,"duration",o),this.recordMetric(a,"requests",1),this.performanceData.delete(e)}logRateLimit(e,t,s=null){this.log("WARN","⏱️ Rate Limit Hit",{service:e,waitTime:t,remainingRequests:s,action:"throttling"}),this.recordMetric(e,"rateLimitHits",1)}logCircuitBreaker(e,t,s,r={}){const i={OPEN:"🚨",HALF_OPEN:"🔄",CLOSED:"✅"}[t]||"🔧";this.log("WARN",`${i} Circuit Breaker ${s}`,{service:e,state:t,action:s,...r}),this.recordMetric(e,`circuitBreaker_${t.toLowerCase()}`,1)}logCache(e,t,s={}){const r={hit:"🎯",miss:"❌",set:"💾",clear:"🗑️"}[e]||"📦";this.log("DEBUG",`${r} Cache ${e.toUpperCase()}`,{operation:e,key:this.sanitizeCacheKey(t),...s}),this.recordMetric("cache",e,1)}recordMetric(e,t,s){if(!this.config.enableMetrics)return;const r=`${e}.${t}`,i=Date.now();this.metrics.has(r)||this.metrics.set(r,{values:[],total:0,count:0,min:1/0,max:-1/0,avg:0});const o=this.metrics.get(r);o.values.push({value:s,timestamp:i}),o.total+=s,o.count+=1,o.min=Math.min(o.min,s),o.max=Math.max(o.max,s),o.avg=o.total/o.count,this.cleanOldMetrics(r)}recordError(e,t){if(!this.config.enableErrorTracking||!t)return;const s=`${e}.${t.message}`,r=this.errorCounts.get(s)||0;this.errorCounts.set(s,r+1)}getMetrics(){const e={uptime:Date.now()-this.startTime,totalLogs:this.logs.length,services:{},cache:{},errors:{}};for(const[t,s]of this.metrics.entries()){const[r,i]=t.split(".");"cache"===r?e.cache[i]={total:s.total,count:s.count,avg:s.avg}:(e.services[r]||(e.services[r]={}),e.services[r][i]={total:s.total,count:s.count,min:s.min===1/0?0:s.min,max:s.max===-1/0?0:s.max,avg:s.avg})}for(const[t,s]of this.errorCounts.entries()){const[r,...i]=t.split("."),o=i.join(".");e.errors[r]||(e.errors[r]={}),e.errors[r][o]=s}return e}getRecentLogs(e=100,t=null){let s=[...this.logs];return t&&(s=s.filter(e=>e.level===t.toUpperCase())),s.slice(-e).reverse()}clear(){this.logs=[],this.metrics.clear(),this.performanceData.clear(),this.errorCounts.clear(),this.startTime=Date.now()}generateLogId(){return`log_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateRequestId(){return`req_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}sanitizeParams(e){const t={...e};return t.apikey&&(t.apikey="***"),t.api_key&&(t.api_key="***"),t.token&&(t.token="***"),t}sanitizeCacheKey(e){return e.length>50?`${e.substring(0,47)}...`:e}getResponseSize(e){if(!e)return 0;try{return JSON.stringify(e).length}catch{return 0}}trimLogs(){this.logs.length>this.config.maxLogHistory&&(this.logs=this.logs.slice(-this.config.maxLogHistory))}cleanOldMetrics(e){const t=this.metrics.get(e),s=Date.now()-this.config.metricsRetentionPeriod;t.values=t.values.filter(e=>e.timestamp>s)}outputToConsole(e){const{level:t,message:s,metadata:r}=e;new Date(e.timestamp).toLocaleTimeString()}};export{s as a};
//# sourceMappingURL=apiLogger-D987Un6Q.js.map

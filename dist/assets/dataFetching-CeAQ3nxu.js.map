{"version":3,"file":"dataFetching-CeAQ3nxu.js","sources":["../../src/utils/apiKeyValidator.js","../../src/services/financialModelingEngine.js","../../src/services/lboModelingEngine.js","../../src/services/dataFetching.js"],"sourcesContent":["// API Key Validation Utility\n// Validates API keys and provides helpful feedback for setup\n\nimport axios from 'axios';\n\nexport class ApiKeyValidator {\n  constructor() {\n    this.validationResults = new Map();\n    this.lastValidation = null;\n  }\n\n  /**\n   * Validate all configured API keys\n   * @returns {Promise<Object>} Validation results for all services\n   */\n  async validateAllKeys() {\n    const results = {\n      timestamp: new Date(),\n      overall: 'unknown',\n      services: {},\n      recommendations: []\n    };\n\n    // Get all API keys from environment\n    const apiKeys = {\n      alphaVantage: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY,\n      fmp: import.meta.env.VITE_FMP_API_KEY,\n      quandl: import.meta.env.VITE_QUANDL_API_KEY,\n      fred: import.meta.env.VITE_FRED_API_KEY\n    };\n\n    // Validate each service\n    const validationPromises = [\n      this.validateAlphaVantage(apiKeys.alphaVantage),\n      this.validateFMP(apiKeys.fmp),\n      this.validateQuandl(apiKeys.quandl),\n      this.validateFRED(apiKeys.fred)\n    ];\n\n    try {\n      const [alphaVantage, fmp, quandl, fred] = await Promise.allSettled(validationPromises);\n\n      results.services = {\n        alphaVantage: this.processValidationResult(alphaVantage),\n        fmp: this.processValidationResult(fmp),\n        quandl: this.processValidationResult(quandl),\n        fred: this.processValidationResult(fred)\n      };\n\n      // Determine overall status\n      const validServices = Object.values(results.services).filter(\n        s => s.status === 'valid'\n      ).length;\n      const configuredServices = Object.values(results.services).filter(\n        s => s.status !== 'missing'\n      ).length;\n      const totalServices = Object.keys(results.services).length;\n\n      if (validServices === 0) {\n        results.overall = 'demo';\n        results.recommendations.push(\n          'No valid API keys found. Running in demo mode with mock data.'\n        );\n        results.recommendations.push(\n          'Add at least one API key (Alpha Vantage or FMP recommended) for live data.'\n        );\n      } else if (validServices < configuredServices || configuredServices < totalServices) {\n        results.overall = 'partial';\n        results.recommendations.push(\n          `${validServices}/${configuredServices} configured API keys are valid. Some features may use demo data.`\n        );\n      } else {\n        results.overall = 'complete';\n        results.recommendations.push('All API keys are valid. Full functionality available.');\n      }\n\n      this.lastValidation = results;\n      return results;\n    } catch (error) {\n      results.overall = 'error';\n      results.error = error.message;\n      results.recommendations.push('Error validating API keys. Check your internet connection.');\n      return results;\n    }\n  }\n\n  /**\n   * Validate Alpha Vantage API key\n   */\n  async validateAlphaVantage(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://www.alphavantage.co/query', {\n        params: {\n          function: 'GLOBAL_QUOTE',\n          symbol: 'AAPL',\n          apikey: apiKey\n        },\n        timeout: 10000\n      });\n\n      if (response.data['Error Message']) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data['Note']) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n\n      if (response.data['Global Quote']) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Financial Modeling Prep API key\n   */\n  async validateFMP(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://financialmodelingprep.com/api/v3/profile/AAPL', {\n        params: { apikey: apiKey },\n        timeout: 10000\n      });\n\n      if (response.data.error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Quandl API key\n   */\n  async validateQuandl(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://data.nasdaq.com/api/v3/datasets/WIKI/AAPL.json', {\n        params: { api_key: apiKey, rows: 1 },\n        timeout: 10000\n      });\n\n      if (response.data.quandl_error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.dataset) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate FRED API key\n   */\n  async validateFRED(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://api.stlouisfed.org/fred/series', {\n        params: {\n          series_id: 'GDP',\n          api_key: apiKey,\n          file_type: 'json'\n        },\n        timeout: 10000\n      });\n\n      if (response.data.error_message) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.seriess) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 400) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Process validation result from Promise.allSettled\n   */\n  processValidationResult(result) {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return { status: 'error', message: result.reason.message };\n    }\n  }\n\n  /**\n   * Get validation status for a specific service\n   */\n  getServiceStatus(serviceName) {\n    if (!this.lastValidation) {\n      return { status: 'unknown', message: 'Validation not run yet' };\n    }\n    return (\n      this.lastValidation.services[serviceName] || {\n        status: 'unknown',\n        message: 'Service not found'\n      }\n    );\n  }\n\n  /**\n   * Get overall validation status\n   */\n  getOverallStatus() {\n    if (!this.lastValidation) {\n      return 'unknown';\n    }\n    return this.lastValidation.overall;\n  }\n\n  /**\n   * Get recommendations for improving API setup\n   */\n  getRecommendations() {\n    if (!this.lastValidation) {\n      return ['Run API key validation first'];\n    }\n    return this.lastValidation.recommendations;\n  }\n\n  /**\n   * Check if demo mode should be used\n   */\n  shouldUseDemoMode() {\n    const status = this.getOverallStatus();\n    return status === 'demo' || status === 'unknown';\n  }\n}\n\n// Export singleton instance\nexport const apiKeyValidator = new ApiKeyValidator();\nexport default ApiKeyValidator;\n","import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced Financial Modeling Engine\n * Provides comprehensive DCF, LBO, and valuation modeling capabilities\n */\nclass FinancialModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default financial modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      dcf: {\n        projectionYears: 5,\n        terminalGrowthRate: 0.025,\n        riskFreeRate: 0.045,\n        marketPremium: 0.065,\n        taxRate: 0.21,\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.05,\n        depreciationAsPercentOfRevenue: 0.025,\n        // Enhanced DCF parameters\n        normalizedMarginTarget: null, // For margin normalization\n        cyclicalAdjustment: false,\n        industryBeta: 1.0,\n        sizeAdjustment: 0.0, // Small company premium\n        countryRiskPremium: 0.0,\n        liquidityDiscount: 0.0\n      },\n      lbo: {\n        holdingPeriod: 5,\n        debtMultiples: { senior: 4.0, subordinated: 1.5, total: 5.5 },\n        interestRates: { senior: 0.055, subordinated: 0.095 },\n        managementFeeRate: 0.02,\n        carriedInterestRate: 0.2,\n        ebitdaGrowthRate: 0.05,\n        debtPaydownRate: 0.5\n      },\n      monte_carlo: {\n        iterations: 10000,\n        confidenceIntervals: [0.05, 0.25, 0.5, 0.75, 0.95],\n        correlationMatrix: null\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive DCF model with multiple scenarios\n   * @param {Object} inputs - DCF model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete DCF analysis\n   */\n  buildDCFModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      currentRevenue,\n      historicalGrowthRates = [],\n      margins = {},\n      balanceSheetData = {},\n      marketData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions.dcf, ...assumptions };\n\n    // Build base case scenario\n    const baseCase = this.calculateDCFScenario(inputs, modelAssumptions, 'Base Case');\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Bull case: Higher growth, lower discount rate\n    if (scenarios.bull !== false) {\n      const bullAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 1.3,\n        terminalGrowthRate: Math.min(modelAssumptions.terminalGrowthRate * 1.2, 0.04),\n        wacc: (modelAssumptions.wacc || 0.1) * 0.9\n      };\n      scenarioResults.bull = this.calculateDCFScenario(inputs, bullAssumptions, 'Bull Case');\n    }\n\n    // Bear case: Lower growth, higher discount rate\n    if (scenarios.bear !== false) {\n      const bearAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 0.7,\n        terminalGrowthRate: Math.max(modelAssumptions.terminalGrowthRate * 0.8, 0.015),\n        wacc: (modelAssumptions.wacc || 0.1) * 1.1\n      };\n      scenarioResults.bear = this.calculateDCFScenario(inputs, bearAssumptions, 'Bear Case');\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performDCFSensitivityAnalysis(inputs, modelAssumptions);\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'DCF',\n      timestamp: new Date().toISOString(),\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateDCFSummary(baseCase, scenarioResults, inputs.currentPrice)\n    };\n  }\n\n  /**\n   * Calculate DCF for a specific scenario\n   * @param {Object} inputs - Model inputs\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} DCF calculation results\n   */\n  calculateDCFScenario(inputs, assumptions, scenarioName) {\n    const {\n      currentRevenue,\n      currentPrice,\n      sharesOutstanding,\n      totalDebt = 0,\n      cash = 0\n    } = inputs;\n\n    // Project revenues\n    const revenueProjections = this.projectRevenues(\n      currentRevenue,\n      assumptions.revenueGrowthRate || 0.1,\n      assumptions.projectionYears\n    );\n\n    // Project operating metrics\n    const operatingProjections = this.projectOperatingMetrics(\n      revenueProjections,\n      assumptions\n    );\n\n    // Calculate free cash flows\n    const fcfProjections = this.calculateFreeCashFlows(\n      operatingProjections,\n      assumptions\n    );\n\n    // Calculate terminal value\n    const terminalValue = this.calculateTerminalValue(\n      fcfProjections[fcfProjections.length - 1],\n      assumptions.terminalGrowthRate,\n      assumptions.wacc\n    );\n\n    // Calculate present values\n    const pvOfCashFlows = this.calculatePresentValue(fcfProjections, assumptions.wacc);\n    const pvOfTerminalValue = this.calculatePresentValue([terminalValue], assumptions.wacc, assumptions.projectionYears);\n\n    // Calculate enterprise and equity values\n    const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n    const equityValue = enterpriseValue - totalDebt + cash;\n    const pricePerShare = equityValue / sharesOutstanding;\n\n    // Calculate valuation metrics\n    const upside = currentPrice ? ((pricePerShare - currentPrice) / currentPrice) * 100 : null;\n\n    return {\n      scenarioName,\n      revenueProjections,\n      operatingProjections,\n      fcfProjections,\n      terminalValue,\n      pvOfCashFlows,\n      pvOfTerminalValue,\n      enterpriseValue,\n      equityValue,\n      pricePerShare,\n      currentPrice,\n      upside,\n      wacc: assumptions.wacc,\n      terminalGrowthRate: assumptions.terminalGrowthRate,\n      impliedMultiples: this.calculateImpliedMultiples(enterpriseValue, operatingProjections)\n    };\n  }\n\n  /**\n   * Project revenue growth over multiple years\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number|Array} growthRates - Growth rate(s)\n   * @param {number} years - Number of years to project\n   * @returns {Array} Revenue projections\n   */\n  projectRevenues(baseRevenue, growthRates, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n\n    for (let i = 0; i < years; i++) {\n      const growthRate = Array.isArray(growthRates)\n        ? growthRates[i] || growthRates[growthRates.length - 1]\n        : growthRates * Math.pow(0.95, i); // Declining growth rate\n\n      currentRevenue *= (1 + growthRate);\n      projections.push({\n        year: i + 1,\n        revenue: currentRevenue,\n        growthRate\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Project operating metrics (EBITDA, margins, etc.)\n   * @param {Array} revenueProjections - Revenue projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Operating projections\n   */\n  projectOperatingMetrics(revenueProjections, assumptions) {\n    return revenueProjections.map((projection, index) => {\n      const ebitdaMargin = assumptions.ebitdaMargin || 0.2;\n      const ebitda = projection.revenue * ebitdaMargin;\n      const depreciation = projection.revenue * assumptions.depreciationAsPercentOfRevenue;\n      const ebit = ebitda - depreciation;\n      const taxes = ebit * assumptions.taxRate;\n      const nopat = ebit - taxes;\n\n      return {\n        ...projection,\n        ebitda,\n        ebitdaMargin,\n        depreciation,\n        ebit,\n        taxes,\n        nopat\n      };\n    });\n  }\n\n  /**\n   * Calculate free cash flows with enhanced methodology\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Free cash flow projections with detailed breakdown\n   */\n  calculateFreeCashFlows(operatingProjections, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      // More sophisticated CapEx modeling\n      const maintenanceCapex = projection.revenue * (assumptions.maintenanceCapexRate || 0.015);\n      const growthCapex = index > 0 ? \n        (projection.revenue - operatingProjections[index - 1].revenue) * (assumptions.growthCapexRate || 0.8) : 0;\n      const totalCapex = maintenanceCapex + growthCapex;\n      \n      // Enhanced working capital calculation\n      const nwcChange = this.calculateWorkingCapitalChange(projection, operatingProjections[index - 1], assumptions);\n      \n      // Add non-cash charges beyond depreciation\n      const stockBasedComp = projection.revenue * (assumptions.stockBasedCompRate || 0.005);\n      const otherNonCash = projection.revenue * (assumptions.otherNonCashRate || 0.001);\n      const totalNonCash = projection.depreciation + stockBasedComp + otherNonCash;\n      \n      // Calculate unlevered FCF\n      const fcf = projection.nopat + totalNonCash - totalCapex - nwcChange;\n      \n      return {\n        year: index + 1,\n        nopat: projection.nopat,\n        depreciation: projection.depreciation,\n        stockBasedComp,\n        otherNonCash,\n        totalNonCash,\n        maintenanceCapex,\n        growthCapex,\n        totalCapex,\n        nwcChange,\n        unleveredFCF: fcf,\n        fcfMargin: projection.revenue > 0 ? fcf / projection.revenue : 0\n      };\n    });\n  }\n  \n  /**\n   * Calculate working capital change with detailed components\n   * @param {Object} currentProjection - Current year projection\n   * @param {Object} priorProjection - Prior year projection\n   * @param {Object} assumptions - Model assumptions\n   * @returns {number} Working capital change\n   */\n  calculateWorkingCapitalChange(currentProjection, priorProjection, assumptions) {\n    if (!priorProjection) {\n      return currentProjection.revenue * assumptions.nwcAsPercentOfRevenue;\n    }\n    \n    // Component-based NWC calculation\n    const receivablesDays = assumptions.receivablesDays || 45;\n    const inventoryDays = assumptions.inventoryDays || 30;\n    const payablesDays = assumptions.payablesDays || 35;\n    \n    const currentReceivables = (currentProjection.revenue * receivablesDays) / 365;\n    const currentInventory = (currentProjection.revenue * inventoryDays) / 365 * (assumptions.cogsPct || 0.6);\n    const currentPayables = (currentProjection.revenue * payablesDays) / 365 * (assumptions.cogsPct || 0.6);\n    const currentNWC = currentReceivables + currentInventory - currentPayables;\n    \n    const priorReceivables = (priorProjection.revenue * receivablesDays) / 365;\n    const priorInventory = (priorProjection.revenue * inventoryDays) / 365 * (assumptions.cogsPct || 0.6);\n    const priorPayables = (priorProjection.revenue * payablesDays) / 365 * (assumptions.cogsPct || 0.6);\n    const priorNWC = priorReceivables + priorInventory - priorPayables;\n    \n    return currentNWC - priorNWC;\n  }\n\n  /**\n   * Calculate terminal value using Gordon Growth Model with validation\n   * @param {number} finalFCF - Final year free cash flow\n   * @param {number} terminalGrowthRate - Terminal growth rate\n   * @param {number} discountRate - Discount rate (WACC)\n   * @param {Object} options - Additional options for terminal value calculation\n   * @returns {number} Terminal value\n   */\n  calculateTerminalValue(finalFCF, terminalGrowthRate, discountRate, options = {}) {\n    // Enhanced validation\n    if (discountRate <= terminalGrowthRate) {\n      throw new Error(`Discount rate (${(discountRate * 100).toFixed(2)}%) must be greater than terminal growth rate (${(terminalGrowthRate * 100).toFixed(2)}%)`);\n    }\n    \n    if (terminalGrowthRate < 0 || terminalGrowthRate > 0.05) {\n      console.warn(`Terminal growth rate ${(terminalGrowthRate * 100).toFixed(2)}% is outside typical range (0-5%)`);\n    }\n    \n    if (finalFCF <= 0) {\n      console.warn('Final year FCF is negative or zero, terminal value calculation may be unreliable');\n    }\n    \n    // Multiple terminal value methods\n    const { method = 'gordon', exitMultiple = null, fadeToGrowth = false } = options;\n    \n    switch (method) {\n      case 'gordon':\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        \n      case 'exit_multiple':\n        if (exitMultiple && finalFCF > 0) {\n          // Assume FCF approximates EBITDA for multiple calculation\n          return finalFCF * exitMultiple;\n        }\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        \n      case 'fade_to_growth':\n        // Implement fade-to-growth model where high growth fades to long-term rate\n        const fadeYears = options.fadeYears || 5;\n        const longTermGrowth = options.longTermGrowth || 0.025;\n        let terminalValue = 0;\n        \n        for (let year = 1; year <= fadeYears; year++) {\n          const fadeRate = terminalGrowthRate * Math.pow((fadeYears - year + 1) / fadeYears, 2) + \n                          longTermGrowth * Math.pow(year / fadeYears, 2);\n          const yearFCF = finalFCF * Math.pow(1 + fadeRate, year);\n          terminalValue += yearFCF / Math.pow(1 + discountRate, year);\n        }\n        \n        // Add perpetual value after fade period\n        const finalFadeFCF = finalFCF * Math.pow(1 + longTermGrowth, fadeYears);\n        const perpetualValue = finalFadeFCF / (discountRate - longTermGrowth);\n        terminalValue += perpetualValue / Math.pow(1 + discountRate, fadeYears);\n        \n        return terminalValue;\n        \n      default:\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n    }\n  }\n\n  /**\n   * Calculate present value of cash flows\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {number} discountRate - Discount rate\n   * @param {number} startYear - Starting year for discounting\n   * @returns {number} Present value\n   */\n  calculatePresentValue(cashFlows, discountRate, startYear = 0) {\n    return cashFlows.reduce((pv, cf, index) => {\n      const year = startYear + index + 1;\n      return pv + cf / Math.pow(1 + discountRate, year);\n    }, 0);\n  }\n\n  /**\n   * Calculate comprehensive implied valuation multiples\n   * @param {number} enterpriseValue - Enterprise value\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Array} fcfProjections - Free cash flow projections  \n   * @param {number} currentRevenue - Current year revenue\n   * @returns {Object} Comprehensive implied multiples\n   */\n  calculateImpliedMultiples(enterpriseValue, operatingProjections, fcfProjections = [], currentRevenue = 0) {\n    const currentYearEbitda = operatingProjections[0]?.ebitda || 0;\n    const nextYearEbitda = operatingProjections[1]?.ebitda || 0;\n    const currentYearEbit = operatingProjections[0]?.ebit || 0;\n    const nextYearEbit = operatingProjections[1]?.ebit || 0;\n    const nextYearRevenue = operatingProjections[1]?.revenue || 0;\n    const currentYearFCF = fcfProjections[0]?.unleveredFCF || 0;\n    const nextYearFCF = fcfProjections[1]?.unleveredFCF || 0;\n\n    return {\n      // Revenue multiples\n      evToCurrentRevenue: currentRevenue ? enterpriseValue / currentRevenue : null,\n      evToForwardRevenue: nextYearRevenue ? enterpriseValue / nextYearRevenue : null,\n      \n      // EBITDA multiples\n      evToCurrentEbitda: currentYearEbitda ? enterpriseValue / currentYearEbitda : null,\n      evToForwardEbitda: nextYearEbitda ? enterpriseValue / nextYearEbitda : null,\n      \n      // EBIT multiples\n      evToCurrentEbit: currentYearEbit ? enterpriseValue / currentYearEbit : null,\n      evToForwardEbit: nextYearEbit ? enterpriseValue / nextYearEbit : null,\n      \n      // FCF multiples\n      evToCurrentFCF: currentYearFCF ? enterpriseValue / currentYearFCF : null,\n      evToForwardFCF: nextYearFCF ? enterpriseValue / nextYearFCF : null,\n      \n      // PEG ratio approximation (P/E to Growth)\n      pegRatio: this.calculatePEGRatio(operatingProjections, enterpriseValue)\n    };\n  }\n  \n  /**\n   * Calculate PEG ratio approximation\n   * @param {Array} operatingProjections - Operating projections\n   * @param {number} enterpriseValue - Enterprise value\n   * @returns {number} PEG ratio\n   */\n  calculatePEGRatio(operatingProjections, enterpriseValue) {\n    if (operatingProjections.length < 2) return null;\n    \n    const currentEarnings = operatingProjections[0]?.nopat || 0;\n    const futureEarnings = operatingProjections[operatingProjections.length - 1]?.nopat || 0;\n    \n    if (currentEarnings <= 0 || futureEarnings <= 0) return null;\n    \n    const growthRate = Math.pow(futureEarnings / currentEarnings, 1 / (operatingProjections.length - 1)) - 1;\n    const peRatio = enterpriseValue / currentEarnings;\n    \n    return growthRate > 0 ? peRatio / (growthRate * 100) : null;\n  }\n\n  /**\n   * Perform sensitivity analysis on key variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performDCFSensitivityAnalysis(inputs, baseAssumptions) {\n    const sensitivityVars = {\n      revenueGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      wacc: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      terminalGrowthRate: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      ebitdaMargin: [-0.02, -0.01, 0, 0.01, 0.02]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = {\n          ...baseAssumptions,\n          [variable]: (baseAssumptions[variable] || 0) + variation\n        };\n\n        try {\n          const scenario = this.calculateDCFScenario(inputs, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            pricePerShare: scenario.pricePerShare,\n            upside: scenario.upside\n          };\n        } catch (error) {\n          return {\n            variation,\n            pricePerShare: null,\n            upside: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate DCF model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Model summary\n   */\n  generateDCFSummary(baseCase, scenarios, currentPrice) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const pricesPerShare = allScenarios.map(s => s.pricePerShare).filter(p => p !== null);\n\n    return {\n      priceRange: {\n        min: Math.min(...pricesPerShare),\n        max: Math.max(...pricesPerShare),\n        average: pricesPerShare.reduce((sum, p) => sum + p, 0) / pricesPerShare.length\n      },\n      recommendation: this.generateRecommendation(baseCase, currentPrice),\n      keyMetrics: {\n        baseCase: {\n          pricePerShare: baseCase.pricePerShare,\n          upside: baseCase.upside,\n          enterpriseValue: baseCase.enterpriseValue\n        },\n        currentPrice,\n        impliedReturn: baseCase.upside\n      }\n    };\n  }\n\n  /**\n   * Generate investment recommendation\n   * @param {Object} baseCase - Base case DCF results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Investment recommendation\n   */\n  generateRecommendation(baseCase, currentPrice) {\n    if (!currentPrice || !baseCase.pricePerShare) {\n      return { rating: 'INSUFFICIENT_DATA', confidence: 0 };\n    }\n\n    const upside = baseCase.upside;\n    let rating, confidence;\n\n    if (upside > 20) {\n      rating = 'STRONG_BUY';\n      confidence = Math.min(95, 70 + (upside - 20) * 1.25);\n    } else if (upside > 10) {\n      rating = 'BUY';\n      confidence = Math.min(85, 60 + (upside - 10) * 2);\n    } else if (upside > -10) {\n      rating = 'HOLD';\n      confidence = Math.min(75, 50 + Math.abs(upside) * 2.5);\n    } else if (upside > -20) {\n      rating = 'SELL';\n      confidence = Math.min(85, 60 + Math.abs(upside + 10) * 2);\n    } else {\n      rating = 'STRONG_SELL';\n      confidence = Math.min(95, 70 + Math.abs(upside + 20) * 1.25);\n    }\n\n    return {\n      rating,\n      confidence: Math.round(confidence),\n      upside,\n      reasoning: this.generateRecommendationReasoning(rating, upside)\n    };\n  }\n\n  /**\n   * Generate reasoning for investment recommendation\n   * @param {string} rating - Investment rating\n   * @param {number} upside - Upside percentage\n   * @returns {string} Recommendation reasoning\n   */\n  generateRecommendationReasoning(rating, upside) {\n    const upsideAbs = Math.abs(upside);\n\n    switch (rating) {\n      case 'STRONG_BUY':\n        return `Strong upside potential of ${upside.toFixed(1)}% suggests significant undervaluation based on DCF analysis.`;\n      case 'BUY':\n        return `Moderate upside of ${upside.toFixed(1)}% indicates the stock is undervalued relative to intrinsic value.`;\n      case 'HOLD':\n        return `Fair valuation with ${upside >= 0 ? 'limited upside' : 'modest downside'} of ${upsideAbs.toFixed(1)}%.`;\n      case 'SELL':\n        return `Downside risk of ${upsideAbs.toFixed(1)}% suggests the stock is overvalued based on fundamental analysis.`;\n      case 'STRONG_SELL':\n        return `Significant downside of ${upsideAbs.toFixed(1)}% indicates substantial overvaluation.`;\n      default:\n        return 'Insufficient data for reliable recommendation.';\n    }\n  }\n}\n\n// Export singleton instance\nexport const financialModelingEngine = new FinancialModelingEngine();\nexport default FinancialModelingEngine;\n","import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced LBO (Leveraged Buyout) Modeling Engine\n * Provides comprehensive LBO analysis with debt schedules and cash flow waterfalls\n */\nclass LBOModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default LBO modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      transaction: {\n        holdingPeriod: 5,\n        managementRollover: 0.1, // 10% management rollover\n        transactionFees: 0.02, // 2% of transaction value\n        financingFees: 0.015 // 1.5% of debt\n      },\n      debt: {\n        seniorDebtMultiple: 4.0,\n        subordinatedDebtMultiple: 1.5,\n        totalDebtMultiple: 5.5,\n        seniorInterestRate: 0.055, // 5.5%\n        subordinatedInterestRate: 0.095, // 9.5%\n        mandatoryPaydown: 0.05, // 5% annually\n        cashSweep: 0.5 // 50% of excess cash\n      },\n      operating: {\n        ebitdaGrowthRate: 0.05, // 5% annually\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.02,\n        taxRate: 0.21\n      },\n      exit: {\n        exitMultiple: null, // Will use peer average\n        exitMultipleRange: [0.8, 1.2], // 80% to 120% of peer average\n        publicMarketDiscount: 0.1 // 10% discount for public exit\n      },\n      fees: {\n        managementFeeRate: 0.02, // 2% annually\n        carriedInterestRate: 0.2, // 20%\n        hurdle: 0.08 // 8% preferred return\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {Object} inputs - LBO model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete LBO analysis\n   */\n  buildLBOModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      purchasePrice,\n      ebitda,\n      revenue,\n      marketData = {},\n      peerData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions, ...assumptions };\n\n    // Calculate transaction structure\n    const transactionStructure = this.calculateTransactionStructure(\n      purchasePrice,\n      ebitda,\n      modelAssumptions\n    );\n\n    // Build base case scenario\n    const baseCase = this.calculateLBOScenario(\n      inputs,\n      transactionStructure,\n      modelAssumptions,\n      'Base Case'\n    );\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Upside case: Higher growth and exit multiple\n    if (scenarios.upside !== false) {\n      const upsideAssumptions = {\n        ...modelAssumptions,\n        operating: {\n          ...modelAssumptions.operating,\n          ebitdaGrowthRate: modelAssumptions.operating.ebitdaGrowthRate * 1.3\n        },\n        exit: {\n          ...modelAssumptions.exit,\n          exitMultiple: (modelAssumptions.exit.exitMultiple || 10) * 1.1\n        }\n      };\n      scenarioResults.upside = this.calculateLBOScenario(\n        inputs,\n        transactionStructure,\n        upsideAssumptions,\n        'Upside Case'\n      );\n    }\n\n    // Downside case: Lower growth and exit multiple\n    if (scenarios.downside !== false) {\n      const downsideAssumptions = {\n        ...modelAssumptions,\n        operating: {\n          ...modelAssumptions.operating,\n          ebitdaGrowthRate: modelAssumptions.operating.ebitdaGrowthRate * 0.7\n        },\n        exit: {\n          ...modelAssumptions.exit,\n          exitMultiple: (modelAssumptions.exit.exitMultiple || 10) * 0.9\n        }\n      };\n      scenarioResults.downside = this.calculateLBOScenario(\n        inputs,\n        transactionStructure,\n        downsideAssumptions,\n        'Downside Case'\n      );\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performLBOSensitivityAnalysis(\n      inputs,\n      transactionStructure,\n      modelAssumptions\n    );\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'LBO',\n      timestamp: new Date().toISOString(),\n      transactionStructure,\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateLBOSummary(baseCase, scenarioResults, transactionStructure)\n    };\n  }\n\n  /**\n   * Calculate transaction structure and financing\n   * @param {number} purchasePrice - Total purchase price\n   * @param {number} ebitda - Current EBITDA\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Object} Transaction structure\n   */\n  calculateTransactionStructure(purchasePrice, ebitda, assumptions) {\n    const { debt, transaction } = assumptions;\n\n    // Calculate debt capacity based on EBITDA multiples\n    const seniorDebt = ebitda * debt.seniorDebtMultiple;\n    const subordinatedDebt = ebitda * debt.subordinatedDebtMultiple;\n    const totalDebt = seniorDebt + subordinatedDebt;\n\n    // Calculate transaction costs\n    const transactionFees = purchasePrice * transaction.transactionFees;\n    const financingFees = totalDebt * transaction.financingFees;\n    const totalUses = purchasePrice + transactionFees + financingFees;\n\n    // Calculate equity requirement (ensure it's positive)\n    const equityContribution = Math.max(totalUses - totalDebt, totalUses * 0.2); // Minimum 20% equity\n    const managementRollover = purchasePrice * transaction.managementRollover;\n    const sponsorEquity = Math.max(equityContribution - managementRollover, 0);\n\n    // Recalculate total debt if equity was adjusted\n    const adjustedTotalDebt = totalUses - equityContribution;\n    const adjustedSeniorDebt = Math.min(seniorDebt, adjustedTotalDebt * 0.8); // Max 80% senior\n    const adjustedSubordinatedDebt = adjustedTotalDebt - adjustedSeniorDebt;\n\n    return {\n      purchasePrice,\n      transactionFees,\n      financingFees,\n      totalUses,\n      seniorDebt: adjustedSeniorDebt,\n      subordinatedDebt: adjustedSubordinatedDebt,\n      totalDebt: adjustedTotalDebt,\n      equityContribution,\n      sponsorEquity,\n      managementRollover,\n      debtToEbitda: adjustedTotalDebt / ebitda,\n      equityToTotalCapital: equityContribution / totalUses\n    };\n  }\n\n  /**\n   * Calculate LBO scenario with detailed cash flow projections\n   * @param {Object} inputs - Model inputs\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} LBO scenario results\n   */\n  calculateLBOScenario(inputs, transactionStructure, assumptions, scenarioName) {\n    const { ebitda, revenue } = inputs;\n    const { holdingPeriod } = assumptions.transaction;\n\n    // Project operating performance\n    const operatingProjections = this.projectLBOOperatingPerformance(\n      revenue,\n      ebitda,\n      assumptions.operating,\n      holdingPeriod\n    );\n\n    // Calculate debt schedule\n    const debtSchedule = this.calculateDebtSchedule(\n      transactionStructure,\n      operatingProjections,\n      assumptions.debt,\n      holdingPeriod\n    );\n\n    // Calculate cash flow to equity\n    const equityCashFlows = this.calculateEquityCashFlows(\n      operatingProjections,\n      debtSchedule,\n      assumptions\n    );\n\n    // Calculate exit value and returns\n    const exitAnalysis = this.calculateExitAnalysis(\n      operatingProjections[holdingPeriod - 1],\n      debtSchedule[holdingPeriod - 1],\n      transactionStructure,\n      assumptions\n    );\n\n    // Calculate returns metrics\n    const returnsAnalysis = this.calculateReturnsMetrics(\n      transactionStructure.sponsorEquity,\n      equityCashFlows,\n      exitAnalysis.netProceeds,\n      holdingPeriod\n    );\n\n    return {\n      scenarioName,\n      operatingProjections,\n      debtSchedule,\n      equityCashFlows,\n      exitAnalysis,\n      returnsAnalysis,\n      keyMetrics: this.calculateLBOKeyMetrics(\n        transactionStructure,\n        exitAnalysis,\n        returnsAnalysis\n      )\n    };\n  }\n\n  /**\n   * Project operating performance over holding period\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number} baseEbitda - Starting EBITDA\n   * @param {Object} operatingAssumptions - Operating assumptions\n   * @param {number} years - Number of years\n   * @returns {Array} Operating projections\n   */\n  projectLBOOperatingPerformance(baseRevenue, baseEbitda, operatingAssumptions, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n    let currentEbitda = baseEbitda;\n\n    for (let year = 1; year <= years; year++) {\n      // Assume revenue grows in line with EBITDA\n      const ebitdaGrowth = operatingAssumptions.ebitdaGrowthRate;\n      currentEbitda *= (1 + ebitdaGrowth);\n      currentRevenue *= (1 + ebitdaGrowth);\n\n      const ebitdaMargin = currentEbitda / currentRevenue;\n      const capex = currentRevenue * operatingAssumptions.capexAsPercentOfRevenue;\n      const nwcChange = year === 1\n        ? currentRevenue * operatingAssumptions.nwcAsPercentOfRevenue\n        : (currentRevenue - projections[year - 2].revenue) * operatingAssumptions.nwcAsPercentOfRevenue;\n\n      const taxes = currentEbitda * operatingAssumptions.taxRate;\n      const unleveredFCF = currentEbitda - taxes - capex - nwcChange;\n\n      projections.push({\n        year,\n        revenue: currentRevenue,\n        ebitda: currentEbitda,\n        ebitdaMargin,\n        capex,\n        nwcChange,\n        taxes,\n        unleveredFCF\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Calculate enhanced debt schedule with detailed amortization and covenants\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} debtAssumptions - Debt assumptions\n   * @param {number} years - Number of years\n   * @returns {Array} Enhanced debt schedule with covenant testing\n   */\n  calculateDebtSchedule(transactionStructure, operatingProjections, debtAssumptions, years) {\n    const schedule = [];\n    let seniorDebtBalance = transactionStructure.seniorDebt;\n    let subordinatedDebtBalance = transactionStructure.subordinatedDebt;\n    let revolvingDebtBalance = transactionStructure.revolvingDebt || 0;\n    \n    // Enhanced debt assumptions\n    const enhancedAssumptions = {\n      ...debtAssumptions,\n      revolvingRate: debtAssumptions.revolvingRate || 0.045,\n      minCashBalance: debtAssumptions.minCashBalance || 10000000,\n      // Covenant parameters\n      maxLeverageRatio: debtAssumptions.maxLeverageRatio || 6.0,\n      minCoverageRatio: debtAssumptions.minCoverageRatio || 1.25,\n      maxCapexRatio: debtAssumptions.maxCapexRatio || 0.05\n    };\n\n    for (let year = 1; year <= years; year++) {\n      const projection = operatingProjections[year - 1];\n\n      // Calculate interest expense\n      const seniorInterest = seniorDebtBalance * debtAssumptions.seniorInterestRate;\n      const subordinatedInterest = subordinatedDebtBalance * debtAssumptions.subordinatedInterestRate;\n      const totalInterest = seniorInterest + subordinatedInterest;\n\n      // Calculate available cash for debt paydown\n      const cashAvailableForDebt = projection.unleveredFCF - totalInterest;\n\n      // Mandatory amortization\n      const mandatoryPaydown = Math.min(\n        seniorDebtBalance * debtAssumptions.mandatoryPaydown,\n        seniorDebtBalance\n      );\n\n      // Cash sweep (excess cash after mandatory paydown)\n      const excessCash = Math.max(0, cashAvailableForDebt - mandatoryPaydown);\n      const cashSweep = excessCash * debtAssumptions.cashSweep;\n\n      // Total debt paydown\n      const totalPaydown = mandatoryPaydown + cashSweep;\n      const seniorPaydown = Math.min(totalPaydown, seniorDebtBalance);\n      const subordinatedPaydown = Math.max(0, totalPaydown - seniorPaydown);\n\n      // Update balances\n      seniorDebtBalance = Math.max(0, seniorDebtBalance - seniorPaydown);\n      subordinatedDebtBalance = Math.max(0, subordinatedDebtBalance - subordinatedPaydown);\n\n      // Enhanced debt covenant testing\n      const leverageRatio = (seniorDebtBalance + subordinatedDebtBalance + revolvingDebtBalance) / projection.ebitda;\n      const coverageRatio = projection.ebitda / totalInterest;\n      const capexRatio = (projection.capex || 0) / projection.revenue;\n      \n      const covenantTests = {\n        leverageCompliance: leverageRatio <= enhancedAssumptions.maxLeverageRatio,\n        coverageCompliance: coverageRatio >= enhancedAssumptions.minCoverageRatio,\n        capexCompliance: capexRatio <= enhancedAssumptions.maxCapexRatio,\n        leverageRatio,\n        coverageRatio,\n        capexRatio\n      };\n      \n      // Calculate debt service coverage ratio (DSCR)\n      const dscr = cashAvailableForDebt / (totalInterest + mandatoryPaydown);\n      \n      schedule.push({\n        year,\n        beginningBalance: {\n          senior: year === 1 ? transactionStructure.seniorDebt : schedule[year - 2].endingBalance.senior,\n          subordinated: year === 1 ? transactionStructure.subordinatedDebt : schedule[year - 2].endingBalance.subordinated,\n          revolving: year === 1 ? (transactionStructure.revolvingDebt || 0) : schedule[year - 2].endingBalance.revolving\n        },\n        interestExpense: {\n          senior: seniorInterest,\n          subordinated: subordinatedInterest,\n          revolving: revolvingDebtBalance * enhancedAssumptions.revolvingRate,\n          total: totalInterest + (revolvingDebtBalance * enhancedAssumptions.revolvingRate)\n        },\n        principalPayment: {\n          senior: seniorPaydown,\n          subordinated: subordinatedPaydown,\n          revolving: 0, // Revolving debt typically doesn't amortize\n          total: totalPaydown\n        },\n        endingBalance: {\n          senior: seniorDebtBalance,\n          subordinated: subordinatedDebtBalance,\n          revolving: revolvingDebtBalance,\n          total: seniorDebtBalance + subordinatedDebtBalance + revolvingDebtBalance\n        },\n        cashAvailableForDebt,\n        excessCash: excessCash - cashSweep,\n        mandatoryPaydown,\n        cashSweep,\n        dscr,\n        covenantTests,\n        // Additional debt metrics\n        netDebtToEbitda: (seniorDebtBalance + subordinatedDebtBalance + revolvingDebtBalance) / projection.ebitda,\n        ebitdaToInterest: projection.ebitda / totalInterest\n      });\n    }\n\n    return schedule;\n  }\n\n  /**\n   * Calculate cash flows to equity holders\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Array} debtSchedule - Debt schedule\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Equity cash flows\n   */\n  calculateEquityCashFlows(operatingProjections, debtSchedule, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      const debt = debtSchedule[index];\n      const managementFees = assumptions.fees.managementFeeRate *\n        (assumptions.transaction.sponsorEquity || 0);\n\n      const cashFlowToEquity = debt.excessCash - managementFees;\n\n      return {\n        year: projection.year,\n        unleveredFCF: projection.unleveredFCF,\n        interestExpense: debt.interestExpense.total,\n        principalPayment: debt.principalPayment.total,\n        managementFees,\n        cashFlowToEquity: Math.max(0, cashFlowToEquity)\n      };\n    });\n  }\n\n  /**\n   * Calculate exit analysis and proceeds\n   * @param {Object} finalYearProjection - Final year operating projection\n   * @param {Object} finalYearDebt - Final year debt schedule\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Object} Exit analysis\n   */\n  calculateExitAnalysis(finalYearProjection, finalYearDebt, transactionStructure, assumptions) {\n    const exitMultiple = assumptions.exit.exitMultiple || 10;\n    const exitEbitda = finalYearProjection.ebitda;\n\n    const enterpriseValue = exitEbitda * exitMultiple;\n    const totalDebtAtExit = finalYearDebt.endingBalance.total;\n    const grossProceeds = enterpriseValue - totalDebtAtExit;\n\n    // Calculate carried interest\n    const totalReturn = grossProceeds;\n    const investedCapital = transactionStructure.sponsorEquity;\n    const profit = Math.max(0, totalReturn - investedCapital);\n    const carriedInterest = profit * assumptions.fees.carriedInterestRate;\n\n    const netProceeds = grossProceeds - carriedInterest;\n\n    return {\n      exitEbitda,\n      exitMultiple,\n      enterpriseValue,\n      totalDebtAtExit,\n      grossProceeds,\n      carriedInterest,\n      netProceeds,\n      managementProceeds: grossProceeds * (transactionStructure.managementRollover / transactionStructure.equityContribution)\n    };\n  }\n\n  /**\n   * Calculate returns metrics (IRR, MOIC, etc.)\n   * @param {number} initialInvestment - Initial equity investment\n   * @param {Array} equityCashFlows - Annual equity cash flows\n   * @param {number} exitProceeds - Exit proceeds\n   * @param {number} holdingPeriod - Holding period in years\n   * @returns {Object} Returns analysis\n   */\n  calculateReturnsMetrics(initialInvestment, equityCashFlows, exitProceeds, holdingPeriod) {\n    // Validate inputs\n    if (!initialInvestment || initialInvestment <= 0) {\n      return {\n        irr: NaN,\n        moic: NaN,\n        totalCashReturned: 0,\n        initialInvestment: initialInvestment || 0,\n        holdingPeriod,\n        annualizedReturn: NaN\n      };\n    }\n\n    // Calculate total cash flows (negative initial investment, positive distributions and exit)\n    const cashFlows = [-Math.abs(initialInvestment)]; // Ensure initial investment is negative\n\n    // Add annual cash flows\n    equityCashFlows.forEach(cf => {\n      cashFlows.push(cf.cashFlowToEquity || 0);\n    });\n\n    // Add exit proceeds to final year\n    if (cashFlows.length > 1) {\n      cashFlows[cashFlows.length - 1] += (exitProceeds || 0);\n    } else {\n      cashFlows.push(exitProceeds || 0);\n    }\n\n    // Calculate IRR using Newton-Raphson method\n    const irr = this.calculateIRR(cashFlows);\n\n    // Calculate MOIC (Multiple of Invested Capital)\n    const totalCashReturned = equityCashFlows.reduce((sum, cf) => sum + (cf.cashFlowToEquity || 0), 0) + (exitProceeds || 0);\n    const moic = totalCashReturned / Math.abs(initialInvestment);\n\n    return {\n      irr: isNaN(irr) ? 0 : irr, // Default to 0% if IRR calculation fails\n      moic: isNaN(moic) ? 0 : moic,\n      totalCashReturned,\n      initialInvestment: Math.abs(initialInvestment),\n      holdingPeriod,\n      annualizedReturn: isNaN(moic) || moic <= 0 ? 0 : Math.pow(moic, 1 / holdingPeriod) - 1,\n      cashFlows // Include for debugging\n    };\n  }\n\n  /**\n   * Calculate IRR using enhanced Newton-Raphson method with multiple fallbacks\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {Object} options - Calculation options\n   * @returns {number} IRR as decimal\n   */\n  calculateIRR(cashFlows, options = {}) {\n    // Validate cash flows\n    if (!cashFlows || cashFlows.length < 2) {\n      return NaN;\n    }\n\n    // Check if all cash flows are zero\n    if (cashFlows.every(cf => cf === 0)) {\n      return 0;\n    }\n\n    // Check if there's no sign change (no valid IRR)\n    const signChanges = cashFlows.slice(1).reduce((count, cf, i) => {\n      return count + (Math.sign(cf) !== Math.sign(cashFlows[i]) ? 1 : 0);\n    }, 0);\n\n    if (signChanges === 0) {\n      return cashFlows[0] < 0 ? -1 : Infinity; // No valid IRR\n    }\n\n    const { tolerance = 1e-8, maxIterations = 200, initialGuess = 0.1 } = options;\n    \n    // Try Newton-Raphson method first\n    let rate = this.newtonRaphsonIRR(cashFlows, initialGuess, tolerance, maxIterations);\n    \n    // If Newton-Raphson fails, try bisection method\n    if (isNaN(rate) || !isFinite(rate)) {\n      rate = this.bisectionIRR(cashFlows, tolerance, maxIterations);\n    }\n    \n    // If both fail, try Secant method\n    if (isNaN(rate) || !isFinite(rate)) {\n      rate = this.secantIRR(cashFlows, tolerance, maxIterations);\n    }\n\n    return rate;\n  }\n  \n  /**\n   * Newton-Raphson method for IRR calculation\n   */\n  newtonRaphsonIRR(cashFlows, initialGuess, tolerance, maxIterations) {\n    let rate = initialGuess;\n\n    for (let i = 0; i < maxIterations; i++) {\n      let npv = 0;\n      let dnpv = 0;\n\n      for (let j = 0; j < cashFlows.length; j++) {\n        const factor = Math.pow(1 + rate, j);\n        npv += cashFlows[j] / factor;\n        if (j > 0) {\n          dnpv -= j * cashFlows[j] / (factor * (1 + rate));\n        }\n      }\n\n      if (Math.abs(npv) < tolerance) {\n        return rate;\n      }\n\n      if (Math.abs(dnpv) < tolerance) {\n        break; // Avoid division by zero\n      }\n\n      const newRate = rate - npv / dnpv;\n\n      // Prevent rate from going too negative or too high\n      if (newRate < -0.99) {\n        rate = -0.99;\n      } else if (newRate > 50) {\n        rate = 50;\n      } else {\n        rate = newRate;\n      }\n      \n      // Check for convergence\n      if (Math.abs(newRate - rate) < tolerance) {\n        return newRate;\n      }\n      \n      rate = newRate;\n    }\n\n    return rate;\n  }\n  \n  /**\n   * Bisection method for IRR calculation (fallback)\n   */\n  bisectionIRR(cashFlows, tolerance, maxIterations) {\n    let low = -0.99;\n    let high = 5.0;\n    \n    // Check if bounds contain a root\n    const npvLow = this.calculateNPV(cashFlows, low);\n    const npvHigh = this.calculateNPV(cashFlows, high);\n    \n    if (npvLow * npvHigh > 0) {\n      return NaN; // No root in bounds\n    }\n    \n    for (let i = 0; i < maxIterations; i++) {\n      const mid = (low + high) / 2;\n      const npvMid = this.calculateNPV(cashFlows, mid);\n      \n      if (Math.abs(npvMid) < tolerance) {\n        return mid;\n      }\n      \n      if (npvLow * npvMid < 0) {\n        high = mid;\n      } else {\n        low = mid;\n      }\n      \n      if (Math.abs(high - low) < tolerance) {\n        return (low + high) / 2;\n      }\n    }\n    \n    return (low + high) / 2;\n  }\n  \n  /**\n   * Secant method for IRR calculation (second fallback)\n   */\n  secantIRR(cashFlows, tolerance, maxIterations) {\n    let x0 = 0;\n    let x1 = 0.1;\n    \n    for (let i = 0; i < maxIterations; i++) {\n      const f0 = this.calculateNPV(cashFlows, x0);\n      const f1 = this.calculateNPV(cashFlows, x1);\n      \n      if (Math.abs(f1) < tolerance) {\n        return x1;\n      }\n      \n      if (Math.abs(f1 - f0) < tolerance) {\n        break;\n      }\n      \n      const x2 = x1 - f1 * (x1 - x0) / (f1 - f0);\n      \n      if (Math.abs(x2 - x1) < tolerance) {\n        return x2;\n      }\n      \n      x0 = x1;\n      x1 = x2;\n    }\n    \n    return x1;\n  }\n  \n  /**\n   * Calculate NPV for a given discount rate\n   */\n  calculateNPV(cashFlows, rate) {\n    return cashFlows.reduce((npv, cf, index) => {\n      return npv + cf / Math.pow(1 + rate, index);\n    }, 0);\n  }\n\n  /**\n   * Calculate comprehensive LBO metrics summary with advanced ratios\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} exitAnalysis - Exit analysis\n   * @param {Object} returnsAnalysis - Returns analysis\n   * @param {Array} debtSchedule - Debt schedule for additional metrics\n   * @returns {Object} Comprehensive key metrics\n   */\n  calculateLBOKeyMetrics(transactionStructure, exitAnalysis, returnsAnalysis, debtSchedule = []) {\n    // Calculate entry EBITDA multiple\n    const impliedEntryEbitda = transactionStructure.purchasePrice / (transactionStructure.entryMultiple || 10);\n    const actualEntryMultiple = impliedEntryEbitda > 0 ? transactionStructure.purchasePrice / impliedEntryEbitda : null;\n    \n    // Calculate leverage metrics\n    const peakLeverage = Math.max(...debtSchedule.map(d => d.netDebtToEbitda || 0));\n    const minCoverage = Math.min(...debtSchedule.map(d => d.ebitdaToInterest || Infinity));\n    const avgDSCR = debtSchedule.length > 0 ? \n      debtSchedule.reduce((sum, d) => sum + (d.dscr || 0), 0) / debtSchedule.length : 0;\n    \n    // Calculate multiple arbitrage components\n    const multipleExpansion = exitAnalysis.exitMultiple - (actualEntryMultiple || 10);\n    const operationalImprovement = returnsAnalysis.moic - 1 - multipleExpansion;\n    const leverage = transactionStructure.totalDebt / transactionStructure.equityContribution;\n    \n    return {\n      // Entry metrics\n      entryMultiple: actualEntryMultiple,\n      entryLeverage: transactionStructure.debtToEbitda,\n      equityContribution: transactionStructure.equityContribution,\n      debtToEquity: leverage,\n      \n      // Exit metrics\n      exitMultiple: exitAnalysis.exitMultiple,\n      exitLeverage: exitAnalysis.totalDebtAtExit / exitAnalysis.exitEbitda,\n      \n      // Returns metrics\n      irr: returnsAnalysis.irr,\n      moic: returnsAnalysis.moic,\n      totalReturn: returnsAnalysis.totalCashReturned,\n      \n      // Leverage and credit metrics\n      leverageReduction: transactionStructure.totalDebt - exitAnalysis.totalDebtAtExit,\n      peakLeverage,\n      minCoverage,\n      avgDSCR,\n      \n      // Value creation analysis\n      multipleExpansion,\n      operationalImprovement,\n      leverageContribution: leverage > 1 ? (returnsAnalysis.moic - 1) * (leverage - 1) / leverage : 0,\n      \n      // Risk metrics\n      breakdownLeverage: debtSchedule.length > 0 ? \n        Math.max(...debtSchedule.map(d => d.leverageRatio || 0)) : null,\n      covenantBreaches: debtSchedule.filter(d => \n        d.covenantTests && (!d.covenantTests.leverageCompliance || !d.covenantTests.coverageCompliance)\n      ).length,\n      \n      // Efficiency ratios\n      equityEfficiency: returnsAnalysis.totalCashReturned / transactionStructure.equityContribution,\n      timeToRecoverEquity: this.calculateTimeToRecoverEquity(returnsAnalysis.cashFlows, transactionStructure.equityContribution)\n    };\n  }\n  \n  /**\n   * Calculate time to recover initial equity investment\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {number} initialEquity - Initial equity investment\n   * @returns {number} Years to recover equity\n   */\n  calculateTimeToRecoverEquity(cashFlows, initialEquity) {\n    if (!cashFlows || cashFlows.length === 0) return null;\n    \n    let cumulativeCashFlow = 0;\n    \n    for (let i = 1; i < cashFlows.length; i++) { // Skip initial investment\n      cumulativeCashFlow += cashFlows[i];\n      if (cumulativeCashFlow >= initialEquity) {\n        return i;\n      }\n    }\n    \n    return null; // Equity not recovered within holding period\n  }\n\n  /**\n   * Perform sensitivity analysis on key LBO variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} transactionStructure - Transaction structure\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performLBOSensitivityAnalysis(inputs, transactionStructure, baseAssumptions) {\n    const sensitivityVars = {\n      ebitdaGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      exitMultiple: [-1, -0.5, 0, 0.5, 1],\n      debtMultiple: [-0.5, -0.25, 0, 0.25, 0.5]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = { ...baseAssumptions };\n\n        if (variable === 'ebitdaGrowthRate') {\n          adjustedAssumptions.operating.ebitdaGrowthRate += variation;\n        } else if (variable === 'exitMultiple') {\n          adjustedAssumptions.exit.exitMultiple = (adjustedAssumptions.exit.exitMultiple || 10) + variation;\n        } else if (variable === 'debtMultiple') {\n          // Adjust transaction structure for debt multiple sensitivity\n          const newDebtMultiple = transactionStructure.debtToEbitda + variation;\n          const adjustedStructure = {\n            ...transactionStructure,\n            totalDebt: (inputs.ebitda * newDebtMultiple),\n            debtToEbitda: newDebtMultiple\n          };\n          adjustedStructure.equityContribution = transactionStructure.totalUses - adjustedStructure.totalDebt;\n        }\n\n        try {\n          const scenario = this.calculateLBOScenario(inputs, transactionStructure, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            irr: scenario.returnsAnalysis.irr,\n            moic: scenario.returnsAnalysis.moic\n          };\n        } catch (error) {\n          return {\n            variation,\n            irr: null,\n            moic: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate LBO model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Object} Model summary\n   */\n  generateLBOSummary(baseCase, scenarios, transactionStructure) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const irrs = allScenarios.map(s => s.returnsAnalysis.irr).filter(irr => irr !== null);\n    const moics = allScenarios.map(s => s.returnsAnalysis.moic).filter(moic => moic !== null);\n\n    return {\n      returnRange: {\n        irrMin: Math.min(...irrs),\n        irrMax: Math.max(...irrs),\n        irrAverage: irrs.reduce((sum, irr) => sum + irr, 0) / irrs.length,\n        moicMin: Math.min(...moics),\n        moicMax: Math.max(...moics),\n        moicAverage: moics.reduce((sum, moic) => sum + moic, 0) / moics.length\n      },\n      investmentHighlights: this.generateInvestmentHighlights(baseCase, transactionStructure),\n      riskFactors: this.generateRiskFactors(baseCase, transactionStructure)\n    };\n  }\n\n  /**\n   * Generate investment highlights\n   * @param {Object} baseCase - Base case results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Array} Investment highlights\n   */\n  generateInvestmentHighlights(baseCase, transactionStructure) {\n    const highlights = [];\n    const irr = baseCase.returnsAnalysis.irr;\n    const moic = baseCase.returnsAnalysis.moic;\n\n    if (irr > 0.2) {\n      highlights.push(`Strong projected IRR of ${(irr * 100).toFixed(1)}%`);\n    }\n\n    if (moic > 2.5) {\n      highlights.push(`Attractive multiple of ${moic.toFixed(1)}x invested capital`);\n    }\n\n    if (transactionStructure.debtToEbitda < 5) {\n      highlights.push(`Conservative leverage at ${transactionStructure.debtToEbitda.toFixed(1)}x EBITDA`);\n    }\n\n    return highlights;\n  }\n\n  /**\n   * Generate risk factors\n   * @param {Object} baseCase - Base case results\n   * @param {Object} transactionStructure - Transaction structure\n   * @returns {Array} Risk factors\n   */\n  generateRiskFactors(baseCase, transactionStructure) {\n    const risks = [];\n\n    if (transactionStructure.debtToEbitda > 6) {\n      risks.push(`High leverage at ${transactionStructure.debtToEbitda.toFixed(1)}x EBITDA`);\n    }\n\n    if (baseCase.returnsAnalysis.irr < 0.15) {\n      risks.push(`Below-target IRR of ${(baseCase.returnsAnalysis.irr * 100).toFixed(1)}%`);\n    }\n\n    return risks;\n  }\n}\n\n// Export singleton instance\nexport const lboModelingEngine = new LBOModelingEngine();\nexport default LBOModelingEngine;\n","import axios from 'axios';\n\nimport { apiKeyValidator } from '../utils/apiKeyValidator.js';\nimport { apiLogger } from '../utils/apiLogger.js';\n\nimport { financialModelingEngine } from './financialModelingEngine.js';\nimport { lboModelingEngine } from './lboModelingEngine.js';\nimport { monteCarloEngine } from './monteCarloEngine.js';\n\n// Data source configurations - Updated for Vite environment variables\nconst DATA_SOURCES = {\n  ALPHA_VANTAGE: {\n    baseURL: 'https://www.alphavantage.co/query',\n    apiKey: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY || 'demo'\n  },\n  FMP: {\n    baseURL: 'https://financialmodelingprep.com/api/v3',\n    apiKey: import.meta.env.VITE_FMP_API_KEY || 'demo'\n  },\n  SEC_EDGAR: {\n    baseURL: 'https://data.sec.gov',\n    headers: {\n      'User-Agent': 'FinanceAnalyst-Pro (contact@financeanalyst.com)'\n    }\n  },\n  YAHOO_FINANCE: {\n    baseURL: 'https://query1.finance.yahoo.com/v8/finance/chart',\n    fallbackURL: 'https://query2.finance.yahoo.com/v8/finance/chart'\n  }\n};\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  ALPHA_VANTAGE: { requests: 5, period: 60000 }, // 5 requests per minute\n  FMP: { requests: 250, period: 86400000 }, // 250 requests per day\n  SEC_EDGAR: { requests: 10, period: 1000 } // 10 requests per second\n};\n\n// Advanced retry configuration\nconst RETRY_CONFIG = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second base delay\n  maxDelay: 30000, // 30 seconds max delay\n  exponentialBase: 2,\n  jitterFactor: 0.1, // 10% jitter\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT']\n};\n\n/**\n * Circuit breaker configuration\n */\nconst CIRCUIT_BREAKER_CONFIG = {\n  failureThreshold: 5, // Number of failures before opening circuit\n  recoveryTimeout: 30000, // 30 seconds before attempting to close circuit\n  monitoringPeriod: 60000, // 1 minute monitoring window\n  halfOpenMaxCalls: 3 // Max calls to test in half-open state\n};\n\n/**\n * Circuit breaker states\n */\nconst CIRCUIT_STATES = {\n  CLOSED: 'CLOSED', // Normal operation\n  OPEN: 'OPEN', // Circuit is open, failing fast\n  HALF_OPEN: 'HALF_OPEN' // Testing if service has recovered\n};\n\n/**\n * Circuit breaker implementation to prevent cascading failures\n */\nclass CircuitBreaker {\n  constructor(name, config = CIRCUIT_BREAKER_CONFIG) {\n    this.name = name;\n    this.config = { ...CIRCUIT_BREAKER_CONFIG, ...config };\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.halfOpenCallCount = 0;\n    this.successCount = 0;\n    this.totalCalls = 0;\n  }\n\n  /**\n   * Check if circuit breaker allows the call\n   * @returns {boolean} Whether the call is allowed\n   */\n  canExecute() {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        return true;\n\n      case CIRCUIT_STATES.OPEN:\n        // Check if recovery timeout has passed\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.state = CIRCUIT_STATES.HALF_OPEN;\n          this.halfOpenCallCount = 0;\n          console.log(`🔄 Circuit breaker ${this.name} transitioning to HALF_OPEN`);\n          return true;\n        }\n        return false;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        return this.halfOpenCallCount < this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Record a successful call\n   */\n  recordSuccess() {\n    this.successCount++;\n    this.totalCalls++;\n\n    switch (this.state) {\n      case CIRCUIT_STATES.HALF_OPEN:\n        this.halfOpenCallCount++;\n        // If we've successfully completed enough calls in half-open, close the circuit\n        if (this.halfOpenCallCount >= this.config.halfOpenMaxCalls) {\n          this.state = CIRCUIT_STATES.CLOSED;\n          this.failureCount = 0;\n          this.halfOpenCallCount = 0;\n          console.log(`✅ Circuit breaker ${this.name} closed - service recovered`);\n        }\n        break;\n\n      case CIRCUIT_STATES.CLOSED:\n        // Reset failure count on success\n        this.failureCount = 0;\n        break;\n    }\n  }\n\n  /**\n   * Record a failed call\n   */\n  recordFailure() {\n    this.failureCount++;\n    this.totalCalls++;\n    this.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        if (this.failureCount >= this.config.failureThreshold) {\n          this.state = CIRCUIT_STATES.OPEN;\n          console.warn(\n            `🚨 Circuit breaker ${this.name} opened - too many failures (${this.failureCount})`\n          );\n        }\n        break;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        // Any failure in half-open state reopens the circuit\n        this.state = CIRCUIT_STATES.OPEN;\n        this.halfOpenCallCount = 0;\n        console.warn(`🚨 Circuit breaker ${this.name} reopened - failure during recovery test`);\n        break;\n    }\n  }\n\n  /**\n   * Get circuit breaker status\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls: this.totalCalls,\n      failureRate: this.totalCalls > 0 ? this.failureCount / this.totalCalls : 0,\n      lastFailureTime: this.lastFailureTime,\n      isOpen: this.state === CIRCUIT_STATES.OPEN,\n      nextRetryTime:\n        this.state === CIRCUIT_STATES.OPEN\n          ? this.lastFailureTime + this.config.recoveryTimeout\n          : null\n    };\n  }\n\n  /**\n   * Execute function with circuit breaker protection\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    if (!this.canExecute()) {\n      const error = new Error(`Circuit breaker ${this.name} is OPEN - failing fast`);\n      error.circuitBreakerOpen = true;\n      throw error;\n    }\n\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (error) {\n      this.recordFailure();\n      throw error;\n    }\n  }\n}\n\n/**\n * Advanced retry utility with exponential backoff and jitter\n */\nclass RetryManager {\n  constructor(config = RETRY_CONFIG) {\n    this.config = { ...RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Calculate delay with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    const exponentialDelay = this.config.baseDelay * Math.pow(this.config.exponentialBase, attempt);\n    const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n    const delay = exponentialDelay + jitter;\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  /**\n   * Check if error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error is retryable\n   */\n  isRetryableError(error) {\n    // Check for network errors\n    if (error.code && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    // Check for HTTP status codes\n    if (\n      error.response?.status &&\n      this.config.retryableStatusCodes.includes(error.response.status)\n    ) {\n      return true;\n    }\n\n    // Check for timeout errors\n    if (error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute function with retry logic\n   * @param {Function} fn - Async function to execute\n   * @param {string} operation - Operation name for logging\n   * @returns {Promise} Result of the function\n   */\n  async executeWithRetry(fn, operation = 'API call') {\n    let lastError;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const result = await fn();\n\n        // Log successful retry if this wasn't the first attempt\n        if (attempt > 0) {\n          console.log(`✅ ${operation} succeeded on attempt ${attempt + 1}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error)) {\n          console.warn(`❌ ${operation} failed with non-retryable error:`, error.message);\n          throw error;\n        }\n\n        const delay = this.calculateDelay(attempt);\n        console.warn(\n          `⚠️ ${operation} failed (attempt ${attempt + 1}/${this.config.maxRetries + 1}), retrying in ${delay}ms:`,\n          error.message\n        );\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    // All retries exhausted\n    console.error(\n      `❌ ${operation} failed after ${this.config.maxRetries + 1} attempts:`,\n      lastError.message\n    );\n    throw lastError;\n  }\n}\n\nclass DataFetchingService {\n  constructor(\n    env = import.meta.env,\n    customRateLimits = null,\n    retryConfig = null,\n    circuitBreakerConfig = null\n  ) {\n    this.rateLimiters = {};\n    this.cache = new Map();\n    this.cacheExpiry = new Map();\n    this.env = env;\n    this.customRateLimits = customRateLimits;\n    this.demoMode = this.isDemoMode(env);\n    this.retryManager = new RetryManager(retryConfig);\n    this.circuitBreakers = this.initializeCircuitBreakers(circuitBreakerConfig);\n    this.logger = apiLogger;\n    this.initializeRateLimiters();\n\n    // Log service initialization\n    this.logger.log('INFO', '🚀 DataFetchingService initialized', {\n      demoMode: this.demoMode,\n      environment: env.VITE_APP_ENV || 'development'\n    });\n  }\n\n  isDemoMode(env = import.meta.env) {\n    // Check if we're forcing demo mode\n    if (env.VITE_FORCE_DEMO_MODE === 'true') {\n      return true;\n    }\n\n    // Check if we're using demo API keys\n    const hasValidKeys =\n      (env.VITE_ALPHA_VANTAGE_API_KEY && env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo') ||\n      (env.VITE_FMP_API_KEY && env.VITE_FMP_API_KEY !== 'demo');\n    return !hasValidKeys;\n  }\n\n  initializeCircuitBreakers(config) {\n    const circuitBreakers = {};\n    const sources = ['ALPHA_VANTAGE', 'FMP', 'SEC_EDGAR', 'YAHOO_FINANCE'];\n\n    sources.forEach(source => {\n      circuitBreakers[source] = new CircuitBreaker(source, config);\n    });\n\n    return circuitBreakers;\n  }\n\n  initializeRateLimiters() {\n    const rateLimits = this.customRateLimits || RATE_LIMITS;\n    Object.keys(rateLimits).forEach(source => {\n      this.rateLimiters[source] = {\n        requests: [],\n        limit: rateLimits[source].requests,\n        period: rateLimits[source].period\n      };\n    });\n  }\n\n  async checkRateLimit(source) {\n    const limiter = this.rateLimiters[source];\n    if (!limiter) return true;\n\n    const now = Date.now();\n    limiter.requests = limiter.requests.filter(time => now - time < limiter.period);\n\n    if (limiter.requests.length >= limiter.limit) {\n      const oldestRequest = Math.min(...limiter.requests);\n      const waitTime = limiter.period - (now - oldestRequest);\n\n      // Log rate limiting event\n      this.logger.logRateLimit(source, waitTime, limiter.limit - limiter.requests.length);\n\n      throw new Error(\n        `Rate limit exceeded for ${source}. Please wait ${Math.ceil(waitTime / 1000)} seconds.`\n      );\n    }\n\n    limiter.requests.push(now);\n    return true;\n  }\n\n  getCacheKey(method, params) {\n    return `${method}_${JSON.stringify(params)}`;\n  }\n\n  getFromCache(key) {\n    const expiry = this.cacheExpiry.get(key);\n    if (expiry && Date.now() > expiry) {\n      this.cache.delete(key);\n      this.cacheExpiry.delete(key);\n      this.logger.logCache('miss', key, { reason: 'expired' });\n      return null;\n    }\n    const cached = this.cache.get(key);\n    if (cached !== undefined) {\n      this.logger.logCache('hit', key, { size: JSON.stringify(cached).length });\n      return cached;\n    }\n    this.logger.logCache('miss', key, { reason: 'not_found' });\n    return null;\n  }\n\n  setCache(key, data, ttlMinutes = 60) {\n    this.cache.set(key, data);\n    this.cacheExpiry.set(key, Date.now() + ttlMinutes * 60 * 1000);\n    this.logger.logCache('set', key, {\n      ttlMinutes,\n      size: JSON.stringify(data).length,\n      expiresAt: new Date(Date.now() + ttlMinutes * 60 * 1000).toISOString()\n    });\n  }\n\n  generateMockData(ticker, dataType) {\n    // Generate realistic mock data for demo purposes\n    const basePrice = 100 + Math.random() * 200;\n    const marketCap = 1000000000 + Math.random() * 10000000000;\n\n    // Map common tickers to realistic company names\n    const companyNames = {\n      AAPL: 'Apple Inc.',\n      MSFT: 'Microsoft Corporation',\n      GOOGL: 'Alphabet Inc.',\n      AMZN: 'Amazon.com Inc.',\n      META: 'Meta Platforms Inc.',\n      TSLA: 'Tesla Inc.',\n      NVDA: 'NVIDIA Corporation'\n    };\n\n    switch (dataType) {\n      case 'profile':\n        return {\n          symbol: ticker,\n          companyName: companyNames[ticker] || `${ticker} Corporation`,\n          mktCap: marketCap,\n          pe: 15 + Math.random() * 20,\n          pb: 1 + Math.random() * 4,\n          beta: 0.8 + Math.random() * 0.8,\n          sector: 'Technology',\n          industry: 'Software',\n          sharesOutstanding: marketCap / basePrice,\n          enterpriseValueOverEBITDA: 10 + Math.random() * 15,\n          debtToEquity: Math.random() * 2,\n          revenueTTM: marketCap * 0.8,\n          grossProfitMargin: 0.3 + Math.random() * 0.4,\n          netProfitMargin: 0.1 + Math.random() * 0.2,\n          returnOnEquityTTM: 0.1 + Math.random() * 0.2,\n          returnOnAssetsTTM: 0.05 + Math.random() * 0.15,\n          effectiveTaxRateTTM: 0.21,\n          fullTimeEmployees: 1000 + Math.random() * 50000,\n          ipoDate: '2010-01-01',\n          range: `$${(basePrice * 0.8).toFixed(2)} - $${(basePrice * 1.3).toFixed(2)}`\n        };\n\n      case 'marketData':\n        return {\n          symbol: ticker,\n          currentPrice: basePrice,\n          previousClose: basePrice * (0.98 + Math.random() * 0.04),\n          marketCap,\n          volume: 1000000 + Math.random() * 5000000,\n          currency: 'USD'\n        };\n\n      case 'incomeStatement':\n      case 'income':\n        const revenue = marketCap * 0.8;\n        return [\n          {\n            revenue,\n            ebitda: revenue * 0.25,\n            netIncome: revenue * 0.15,\n            capex: revenue * 0.05,\n            interestExpense: revenue * 0.02,\n            grossProfitMargin: 0.6\n          }\n        ];\n\n      case 'balanceSheet':\n        return [\n          {\n            totalDebt: marketCap * 0.3,\n            cashAndCashEquivalents: marketCap * 0.1,\n            totalCurrentAssets: marketCap * 0.4,\n            totalCurrentLiabilities: marketCap * 0.2\n          }\n        ];\n\n      case 'cashFlow':\n        return [\n          {\n            freeCashFlow: marketCap * 0.12\n          }\n        ];\n\n      default:\n        return null;\n    }\n  }\n\n  async fetchCompanyProfile(ticker) {\n    const cacheKey = this.getCacheKey('profile', { ticker });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock data for', ticker);\n      const mockData = this.generateMockData(ticker, 'profile');\n      this.setCache(cacheKey, mockData, 1440);\n      return mockData;\n    }\n\n    return this.circuitBreakers.FMP.execute(async() => {\n      return this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        // Log API request start\n        const requestId = this.logger.logApiRequest('FMP', `/profile/${ticker}`, { ticker });\n\n        try {\n          const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/profile/${ticker}`, {\n            params: { apikey: DATA_SOURCES.FMP.apiKey },\n            timeout: 10000\n          });\n\n          if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          const profile = response.data[0];\n          if (!profile || typeof profile !== 'object') {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          // Log successful API response\n          this.logger.logApiResponse(requestId, true, {\n            profileFound: true,\n            ticker: profile.symbol\n          });\n\n          this.setCache(cacheKey, profile, 1440); // Cache for 24 hours\n          return profile;\n        } catch (error) {\n          // Log failed API response\n          this.logger.logApiResponse(requestId, false, null, error);\n          throw error;\n        }\n      }, `Company profile fetch for ${ticker}`);\n    }).catch(error => {\n      // Handle circuit breaker errors - preserve the circuitBreakerOpen property\n      if (error.circuitBreakerOpen) {\n        throw error;\n      }\n\n      // Handle authentication errors with fallback to demo mode\n      if (error.response?.status === 403 || error.response?.status === 401) {\n        console.warn('API key invalid, falling back to demo mode');\n        const mockData = this.generateMockData(ticker, 'profile');\n        this.setCache(cacheKey, mockData, 1440);\n        return mockData;\n      }\n      throw new Error(`Failed to fetch company profile: ${error.message}`);\n    });\n  }\n\n  async fetchFinancialStatements(\n    ticker,\n    statement = 'income-statement',\n    period = 'annual',\n    limit = 5\n  ) {\n    const cacheKey = this.getCacheKey('financials', { ticker, statement, period, limit });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock financial data for', ticker);\n      const mockData = this.generateMockData(\n        ticker,\n        statement.replace('-statement', '').replace('-', '')\n      );\n      this.setCache(cacheKey, mockData, 360);\n      return mockData;\n    }\n\n    return this.retryManager\n      .executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/${statement}/${ticker}`, {\n          params: {\n            apikey: DATA_SOURCES.FMP.apiKey,\n            period,\n            limit\n          },\n          timeout: 15000\n        });\n\n        if (!response.data || response.data.length === 0) {\n          throw new Error(`No ${statement} data found for ${ticker}`);\n        }\n\n        this.setCache(cacheKey, response.data, 360); // Cache for 6 hours\n        return response.data;\n      }, `Financial statements fetch for ${ticker} (${statement})`)\n      .catch(error => {\n        // Handle authentication errors with fallback to demo mode\n        if (error.response?.status === 403 || error.response?.status === 401) {\n          console.warn('API key invalid, falling back to demo mode');\n          const mockData = this.generateMockData(\n            ticker,\n            statement.replace('-statement', '').replace('-', '')\n          );\n          this.setCache(cacheKey, mockData, 360);\n          return mockData;\n        }\n        throw new Error(`Failed to fetch ${statement}: ${error.message}`);\n      });\n  }\n\n  async fetchMarketData(ticker, range = '1y') {\n    const cacheKey = this.getCacheKey('market', { ticker, range });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock market data for', ticker);\n      const mockData = this.generateMockData(ticker, 'marketData');\n      this.setCache(cacheKey, mockData, 15);\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        // Try Yahoo Finance first (no API key required)\n        const response = await axios.get(`${DATA_SOURCES.YAHOO_FINANCE.baseURL}/${ticker}`, {\n          params: { range, interval: '1d' },\n          timeout: 10000\n        });\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        const marketData = {\n          symbol: result.meta.symbol,\n          currentPrice: result.meta.regularMarketPrice,\n          previousClose: result.meta.previousClose,\n          marketCap: result.meta.marketCap,\n          volume: result.meta.regularMarketVolume,\n          timestamps: result.timestamp,\n          prices: result.indicators.quote[0],\n          currency: result.meta.currency\n        };\n\n        this.setCache(cacheKey, marketData, 15); // Cache for 15 minutes\n        return marketData;\n      }, `Market data fetch for ${ticker}`);\n    } catch (error) {\n      // Fallback to Alpha Vantage or demo mode\n      console.warn(`Primary market data source failed for ${ticker}, trying alternative`);\n      return this.fetchMarketDataAlternative(ticker);\n    }\n  }\n\n  async fetchMarketDataAlternative(ticker) {\n    if (this.demoMode) {\n      const mockData = this.generateMockData(ticker, 'marketData');\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('ALPHA_VANTAGE');\n\n        const response = await axios.get(DATA_SOURCES.ALPHA_VANTAGE.baseURL, {\n          params: {\n            function: 'GLOBAL_QUOTE',\n            symbol: ticker,\n            apikey: DATA_SOURCES.ALPHA_VANTAGE.apiKey\n          },\n          timeout: 10000\n        });\n\n        const quote = response.data['Global Quote'];\n        if (!quote || Object.keys(quote).length === 0) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        return {\n          symbol: quote['01. symbol'],\n          currentPrice: parseFloat(quote['05. price']),\n          previousClose: parseFloat(quote['08. previous close']),\n          volume: parseInt(quote['06. volume']),\n          change: parseFloat(quote['09. change']),\n          changePercent: quote['10. change percent']\n        };\n      }, `Alternative market data fetch for ${ticker}`);\n    } catch (error) {\n      console.warn('Alternative market data API failed, using demo data');\n      return this.generateMockData(ticker, 'marketData');\n    }\n  }\n\n  async fetchSECFilings(ticker, filingType = '10-K', count = 5) {\n    const cacheKey = this.getCacheKey('sec', { ticker, filingType, count });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('SEC filings not available in demo mode');\n        return [\n          {\n            form: filingType,\n            filingDate: '2023-12-31',\n            accessionNumber: '0000000000-00-000000',\n            reportDate: '2023-12-31',\n            acceptanceDateTime: '2024-01-15T16:30:00',\n            act: '34',\n            primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n            url: '#demo-filing'\n          }\n        ];\n      }\n\n      await this.checkRateLimit('SEC_EDGAR');\n\n      // This would need proper CIK lookup implementation\n      // For now, return demo data\n      return [\n        {\n          form: filingType,\n          filingDate: '2023-12-31',\n          accessionNumber: '0000000000-00-000000',\n          reportDate: '2023-12-31',\n          acceptanceDateTime: '2024-01-15T16:30:00',\n          act: '34',\n          primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n          url: '#demo-filing'\n        }\n      ];\n    } catch (error) {\n      throw new Error(`Failed to fetch SEC filings: ${error.message}`);\n    }\n  }\n\n  async fetchPeerComparables(ticker, industryCode = null) {\n    const cacheKey = this.getCacheKey('peers', { ticker, industryCode });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('Using demo peer data');\n        const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n        const peers = peerTickers.slice(0, 5).map(peerTicker => {\n          const basePrice = 100 + Math.random() * 200;\n          const marketCap = 1000000000 + Math.random() * 2000000000;\n          return {\n            symbol: peerTicker,\n            name: `${peerTicker} Corporation`,\n            marketCap,\n            currentPrice: basePrice,\n            sector: 'Technology',\n            industry: 'Software',\n            peRatio: 15 + Math.random() * 20,\n            evToEbitda: 10 + Math.random() * 15,\n            priceToBook: 1 + Math.random() * 4,\n            debtToEquity: Math.random() * 2\n          };\n        });\n        this.setCache(cacheKey, peers, 240);\n        return peers;\n      }\n\n      await this.checkRateLimit('FMP');\n\n      // Get company profile first to determine industry\n      const profile = await this.fetchCompanyProfile(ticker);\n\n      // For demo, use hardcoded peer list\n      const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n\n      // Fetch key metrics for peer analysis\n      const peerData = await Promise.allSettled(\n        peerTickers.slice(0, 5).map(async peerTicker => {\n          const peerProfile = await this.fetchCompanyProfile(peerTicker);\n          const peerMarket = await this.fetchMarketData(peerTicker);\n\n          return {\n            symbol: peerTicker,\n            name: peerProfile.companyName,\n            marketCap: peerProfile.mktCap,\n            currentPrice: peerMarket.currentPrice,\n            sector: peerProfile.sector,\n            industry: peerProfile.industry,\n            peRatio: peerProfile.pe,\n            evToEbitda: peerProfile.enterpriseValueOverEBITDA,\n            priceToBook: peerProfile.pb,\n            debtToEquity: peerProfile.debtToEquity\n          };\n        })\n      );\n\n      const validPeers = peerData\n        .filter(result => result.status === 'fulfilled')\n        .map(result => result.value);\n\n      this.setCache(cacheKey, validPeers, 240); // Cache for 4 hours\n      return validPeers;\n    } catch (error) {\n      throw new Error(`Failed to fetch peer comparables: ${error.message}`);\n    }\n  }\n\n  async fetchDCFInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, cashFlows, marketData] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'cash-flow-statement', 'annual', 5),\n        this.fetchMarketData(ticker)\n      ]);\n\n      // Calculate historical growth rates\n      const revenues = Array.isArray(incomeStatements)\n        ? incomeStatements.map(stmt => stmt.revenue).reverse()\n        : [incomeStatements.revenue];\n      const revenueGrowthRates = [];\n      for (let i = 1; i < revenues.length; i++) {\n        if (revenues[i - 1] && revenues[i]) {\n          revenueGrowthRates.push((revenues[i] - revenues[i - 1]) / revenues[i - 1]);\n        }\n      }\n      const avgRevenueGrowth =\n        revenueGrowthRates.length > 0\n          ? revenueGrowthRates.reduce((a, b) => a + b, 0) / revenueGrowthRates.length\n          : 0.05; // Default 5% growth\n\n      // Calculate free cash flow margin\n      const latestCashFlow = Array.isArray(cashFlows) ? cashFlows[0] : cashFlows;\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const fcfMargin = latestCashFlow.freeCashFlow / latestIncome.revenue;\n\n      // Estimate WACC components\n      const riskFreeRate = 0.045; // 4.5% - this should come from treasury rates API\n      const marketPremium = 0.065; // 6.5% historical market premium\n      const beta = profile.beta || 1.0;\n      const costOfEquity = riskFreeRate + beta * marketPremium;\n\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n      const totalDebt = latestBalance.totalDebt || 0;\n      const marketCap = marketData.marketCap || marketData.currentPrice * profile.sharesOutstanding;\n      const debtRatio = totalDebt / (totalDebt + marketCap);\n      const taxRate = profile.effectiveTaxRateTTM || 0.21;\n\n      const wacc = costOfEquity * (1 - debtRatio) + 0.04 * debtRatio * (1 - taxRate); // Assuming 4% cost of debt\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentRevenue: latestIncome.revenue,\n        revenueGrowthRate: avgRevenueGrowth,\n        fcfMargin,\n        wacc,\n        terminalGrowthRate: 0.025, // 2.5% long-term GDP growth assumption\n        currentPrice: marketData.currentPrice,\n        sharesOutstanding: profile.sharesOutstanding,\n        marketCap,\n        totalDebt,\n        cash: latestBalance.cashAndCashEquivalents || 0,\n        beta,\n        peRatio: profile.pe,\n        historicalData: {\n          revenues,\n          revenueGrowthRates,\n          freeCashFlows: Array.isArray(cashFlows)\n            ? cashFlows.map(cf => cf.freeCashFlow).reverse()\n            : [latestCashFlow.freeCashFlow],\n          margins: Array.isArray(incomeStatements)\n            ? incomeStatements.map(stmt => stmt.grossProfitMargin).reverse()\n            : [latestIncome.grossProfitMargin]\n        }\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch DCF inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async fetchLBOInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, marketData, peers] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 3),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 3),\n        this.fetchMarketData(ticker),\n        this.fetchPeerComparables(ticker)\n      ]);\n\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n\n      // Calculate key LBO metrics\n      const ebitda = latestIncome.ebitda;\n      const currentEV =\n        marketData.marketCap + latestBalance.totalDebt - latestBalance.cashAndCashEquivalents;\n      const evEbitdaMultiple = currentEV / ebitda;\n\n      // Peer multiples for exit assumptions\n      const peerEvEbitdaMultiples = peers\n        .filter(peer => peer.evToEbitda && peer.evToEbitda > 0)\n        .map(peer => peer.evToEbitda);\n      const avgPeerMultiple =\n        peerEvEbitdaMultiples.length > 0\n          ? peerEvEbitdaMultiples.reduce((a, b) => a + b, 0) / peerEvEbitdaMultiples.length\n          : evEbitdaMultiple;\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentPrice: marketData.currentPrice,\n        marketCap: marketData.marketCap,\n        enterpriseValue: currentEV,\n        ebitda,\n        evEbitdaMultiple,\n        revenue: latestIncome.revenue,\n        netIncome: latestIncome.netIncome,\n        totalDebt: latestBalance.totalDebt,\n        cash: latestBalance.cashAndCashEquivalents,\n        workingCapital: latestBalance.totalCurrentAssets - latestBalance.totalCurrentLiabilities,\n        capex: Math.abs(latestIncome.capex || 0),\n        debtToEbitda: latestBalance.totalDebt / ebitda,\n        interestCoverage: ebitda / (latestIncome.interestExpense || 1),\n        avgPeerMultiple,\n        suggestedPurchasePrice: ebitda * avgPeerMultiple,\n        maxDebtCapacity: ebitda * 6, // 6x EBITDA debt capacity assumption\n        sharesOutstanding: profile.sharesOutstanding\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch LBO inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async validateTicker(ticker) {\n    try {\n      // In demo mode, only validate known tickers\n      if (this.demoMode) {\n        const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA'];\n        return knownTickers.includes(ticker);\n      }\n\n      await this.fetchCompanyProfile(ticker);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Add method to check API status\n  async getApiStatus() {\n    const validationResults = await apiKeyValidator.validateAllKeys();\n    const metrics = this.logger.getMetrics();\n\n    return {\n      demoMode: this.demoMode,\n      cacheSize: this.cache.size,\n      validation: validationResults,\n      circuitBreakers: this.getCircuitBreakerStatus(),\n      metrics,\n      performance: {\n        uptime: metrics.uptime,\n        totalRequests: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.requests?.total || 0),\n          0\n        ),\n        totalErrors: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.error?.total || 0),\n          0\n        ),\n        averageResponseTime: this.calculateAverageResponseTime(metrics.services),\n        cacheHitRate: this.calculateCacheHitRate(metrics.cache)\n      },\n      availableKeys: {\n        alphaVantage: !!(\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY &&\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo'\n        ),\n        fmp: !!(import.meta.env.VITE_FMP_API_KEY && import.meta.env.VITE_FMP_API_KEY !== 'demo'),\n        quandl: !!(\n          import.meta.env.VITE_QUANDL_API_KEY && import.meta.env.VITE_QUANDL_API_KEY !== 'demo'\n        ),\n        fred: !!(import.meta.env.VITE_FRED_API_KEY && import.meta.env.VITE_FRED_API_KEY !== 'demo')\n      },\n      recommendations: validationResults.recommendations\n    };\n  }\n\n  // Get circuit breaker status for all services\n  getCircuitBreakerStatus() {\n    const status = {};\n    Object.keys(this.circuitBreakers).forEach(service => {\n      status[service] = this.circuitBreakers[service].getStatus();\n    });\n    return status;\n  }\n\n  // Calculate average response time across all services\n  calculateAverageResponseTime(services) {\n    let totalDuration = 0;\n    let totalRequests = 0;\n\n    Object.values(services).forEach(service => {\n      if (service.duration) {\n        totalDuration += service.duration.total;\n        totalRequests += service.duration.count;\n      }\n    });\n\n    return totalRequests > 0 ? Math.round(totalDuration / totalRequests) : 0;\n  }\n\n  // Calculate cache hit rate\n  calculateCacheHitRate(cache) {\n    const hits = cache.hit?.total || 0;\n    const misses = cache.miss?.total || 0;\n    const total = hits + misses;\n\n    return total > 0 ? Math.round((hits / total) * 100) : 0;\n  }\n\n  // Get recent logs for debugging\n  getRecentLogs(limit = 50, level = null) {\n    return this.logger.getRecentLogs(limit, level);\n  }\n\n  // Clear all metrics and logs\n  clearMetrics() {\n    this.logger.clear();\n  }\n\n  // Add method to validate API keys on demand\n  async validateApiKeys() {\n    return await apiKeyValidator.validateAllKeys();\n  }\n\n  /**\n   * Build comprehensive DCF model with advanced scenarios\n   * @param {string} symbol - Stock symbol\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete DCF analysis\n   */\n  async buildAdvancedDCFModel(symbol, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol)\n      ]);\n\n      // Prepare DCF inputs\n      const dcfInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        currentRevenue: financials.revenue || 0,\n        currentPrice: marketData.price || 0,\n        sharesOutstanding: profile.sharesOutstanding || 0,\n        totalDebt: profile.totalDebt || 0,\n        cash: profile.cash || 0,\n        historicalGrowthRates: this.calculateHistoricalGrowthRates(financials),\n        margins: {\n          ebitdaMargin: (financials.ebitda || 0) / (financials.revenue || 1)\n        },\n        balanceSheetData: financials,\n        marketData,\n        assumptions: {\n          ...assumptions,\n          wacc: assumptions.wacc || this.calculateWACC(profile, marketData),\n          revenueGrowthRate: assumptions.revenueGrowthRate || this.estimateGrowthRate(financials)\n        }\n      };\n\n      // Build comprehensive DCF model\n      const dcfModel = financialModelingEngine.buildDCFModel(dcfInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced DCF model built for ${symbol}`, {\n        baseCase: dcfModel.baseCase.pricePerShare,\n        scenarios: Object.keys(dcfModel.scenarios).length\n      });\n\n      return dcfModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build DCF model for ${symbol}`, { error: error.message });\n      throw new Error(`DCF modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {string} symbol - Stock symbol\n   * @param {Object} transactionInputs - Transaction parameters\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete LBO analysis\n   */\n  async buildAdvancedLBOModel(symbol, transactionInputs, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData, peerData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol),\n        this.fetchPeerComparison(symbol)\n      ]);\n\n      // Prepare LBO inputs\n      const lboInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        purchasePrice: transactionInputs.purchasePrice || marketData.marketCap,\n        ebitda: financials.ebitda || 0,\n        revenue: financials.revenue || 0,\n        marketData,\n        peerData,\n        assumptions: {\n          ...assumptions,\n          exit: {\n            ...assumptions.exit,\n            exitMultiple: assumptions.exit?.exitMultiple || this.calculatePeerAverageMultiple(peerData)\n          }\n        }\n      };\n\n      // Build comprehensive LBO model\n      const lboModel = lboModelingEngine.buildLBOModel(lboInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced LBO model built for ${symbol}`, {\n        baseCase: lboModel.baseCase.returnsAnalysis.irr,\n        scenarios: Object.keys(lboModel.scenarios).length\n      });\n\n      return lboModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build LBO model for ${symbol}`, { error: error.message });\n      throw new Error(`LBO modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate historical growth rates from financial data\n   * @param {Object} financials - Financial statements data\n   * @returns {Array} Historical growth rates\n   */\n  calculateHistoricalGrowthRates(financials) {\n    // This would analyze historical financial data to calculate growth rates\n    // Simplified implementation for now\n    return [0.15, 0.12, 0.10, 0.08, 0.06]; // Example declining growth rates\n  }\n\n  /**\n   * Estimate growth rate based on historical data\n   * @param {Object} financials - Financial statements data\n   * @returns {number} Estimated growth rate\n   */\n  estimateGrowthRate(financials) {\n    // Simplified growth rate estimation\n    // In practice, this would analyze multiple years of data\n    return 0.10; // 10% default growth rate\n  }\n\n  /**\n   * Calculate peer average multiple\n   * @param {Object} peerData - Peer comparison data\n   * @returns {number} Average peer multiple\n   */\n  calculatePeerAverageMultiple(peerData) {\n    if (!peerData || !peerData.peers) {\n      return 10; // Default multiple\n    }\n\n    const multiples = peerData.peers\n      .map(peer => peer.evToEbitda)\n      .filter(multiple => multiple && multiple > 0);\n\n    if (multiples.length === 0) {\n      return 10;\n    }\n\n    return multiples.reduce((sum, multiple) => sum + multiple, 0) / multiples.length;\n  }\n}\n\n// Export singleton instance\nexport const dataFetchingService = new DataFetchingService();\nexport default DataFetchingService;\n"],"names":["apiKeyValidator","constructor","this","validationResults","Map","lastValidation","validateAllKeys","results","timestamp","Date","overall","services","recommendations","apiKeys","alphaVantage","fmp","quandl","undefined","fred","validationPromises","validateAlphaVantage","validateFMP","validateQuandl","validateFRED","Promise","allSettled","processValidationResult","validServices","Object","values","filter","s","status","length","configuredServices","totalServices","keys","push","error","message","apiKey","response","axios","get","params","function","symbol","apikey","timeout","data","code","Array","isArray","api_key","rows","quandl_error","dataset","series_id","file_type","error_message","seriess","result","value","reason","getServiceStatus","serviceName","getOverallStatus","getRecommendations","shouldUseDemoMode","financialModelingEngine","modelCache","assumptions","getDefaultAssumptions","dcf","projectionYears","terminalGrowthRate","riskFreeRate","marketPremium","taxRate","capexAsPercentOfRevenue","nwcAsPercentOfRevenue","depreciationAsPercentOfRevenue","normalizedMarginTarget","cyclicalAdjustment","industryBeta","sizeAdjustment","countryRiskPremium","liquidityDiscount","lbo","holdingPeriod","debtMultiples","senior","subordinated","total","interestRates","managementFeeRate","carriedInterestRate","ebitdaGrowthRate","debtPaydownRate","monte_carlo","iterations","confidenceIntervals","correlationMatrix","buildDCFModel","inputs","scenarios","companyName","currentRevenue","historicalGrowthRates","margins","balanceSheetData","marketData","modelAssumptions","baseCase","calculateDCFScenario","scenarioResults","bull","bullAssumptions","revenueGrowthRate","Math","min","wacc","bear","bearAssumptions","max","sensitivityAnalysis","performDCFSensitivityAnalysis","modelType","toISOString","summary","generateDCFSummary","currentPrice","scenarioName","sharesOutstanding","totalDebt","cash","revenueProjections","projectRevenues","operatingProjections","projectOperatingMetrics","fcfProjections","calculateFreeCashFlows","terminalValue","calculateTerminalValue","pvOfCashFlows","calculatePresentValue","pvOfTerminalValue","enterpriseValue","equityValue","pricePerShare","upside","impliedMultiples","calculateImpliedMultiples","baseRevenue","growthRates","years","projections","i","growthRate","pow","year","revenue","map","projection","index","ebitdaMargin","ebitda","depreciation","ebit","taxes","nopat","maintenanceCapex","maintenanceCapexRate","growthCapex","growthCapexRate","totalCapex","nwcChange","calculateWorkingCapitalChange","stockBasedComp","stockBasedCompRate","otherNonCash","otherNonCashRate","totalNonCash","fcf","unleveredFCF","fcfMargin","currentProjection","priorProjection","receivablesDays","inventoryDays","payablesDays","cogsPct","finalFCF","discountRate","options","Error","toFixed","method","exitMultiple","fadeToGrowth","fadeYears","longTermGrowth","fadeRate","cashFlows","startYear","reduce","pv","cf","currentYearEbitda","nextYearEbitda","currentYearEbit","nextYearEbit","nextYearRevenue","currentYearFCF","nextYearFCF","evToCurrentRevenue","evToForwardRevenue","evToCurrentEbitda","evToForwardEbitda","evToCurrentEbit","evToForwardEbit","evToCurrentFCF","evToForwardFCF","pegRatio","calculatePEGRatio","currentEarnings","futureEarnings","baseAssumptions","entries","forEach","variable","variations","variation","adjustedAssumptions","scenario","pricesPerShare","p","priceRange","average","sum","recommendation","generateRecommendation","keyMetrics","impliedReturn","rating","confidence","abs","round","reasoning","generateRecommendationReasoning","upsideAbs","lboModelingEngine","transaction","managementRollover","transactionFees","financingFees","debt","seniorDebtMultiple","subordinatedDebtMultiple","totalDebtMultiple","seniorInterestRate","subordinatedInterestRate","mandatoryPaydown","cashSweep","operating","exit","exitMultipleRange","publicMarketDiscount","fees","hurdle","buildLBOModel","purchasePrice","peerData","transactionStructure","calculateTransactionStructure","calculateLBOScenario","upsideAssumptions","downside","downsideAssumptions","performLBOSensitivityAnalysis","generateLBOSummary","seniorDebt","totalUses","equityContribution","sponsorEquity","adjustedTotalDebt","adjustedSeniorDebt","subordinatedDebt","debtToEbitda","equityToTotalCapital","projectLBOOperatingPerformance","debtSchedule","calculateDebtSchedule","equityCashFlows","calculateEquityCashFlows","exitAnalysis","calculateExitAnalysis","returnsAnalysis","calculateReturnsMetrics","netProceeds","calculateLBOKeyMetrics","baseEbitda","operatingAssumptions","currentEbitda","ebitdaGrowth","capex","debtAssumptions","schedule","seniorDebtBalance","subordinatedDebtBalance","revolvingDebtBalance","revolvingDebt","enhancedAssumptions","revolvingRate","minCashBalance","maxLeverageRatio","minCoverageRatio","maxCapexRatio","seniorInterest","subordinatedInterest","totalInterest","cashAvailableForDebt","excessCash","totalPaydown","seniorPaydown","subordinatedPaydown","leverageRatio","coverageRatio","capexRatio","covenantTests","leverageCompliance","coverageCompliance","capexCompliance","dscr","beginningBalance","endingBalance","revolving","interestExpense","principalPayment","netDebtToEbitda","ebitdaToInterest","managementFees","cashFlowToEquity","finalYearProjection","finalYearDebt","exitEbitda","totalDebtAtExit","grossProceeds","totalReturn","investedCapital","carriedInterest","managementProceeds","initialInvestment","exitProceeds","irr","NaN","moic","totalCashReturned","annualizedReturn","calculateIRR","isNaN","every","slice","count","sign","Infinity","tolerance","maxIterations","initialGuess","rate","newtonRaphsonIRR","isFinite","bisectionIRR","secantIRR","npv","dnpv","j","factor","newRate","low","high","npvLow","calculateNPV","mid","npvMid","x0","x1","f0","f1","x2","impliedEntryEbitda","entryMultiple","actualEntryMultiple","peakLeverage","d","minCoverage","avgDSCR","multipleExpansion","operationalImprovement","leverage","entryLeverage","debtToEquity","exitLeverage","leverageReduction","leverageContribution","breakdownLeverage","covenantBreaches","equityEfficiency","timeToRecoverEquity","calculateTimeToRecoverEquity","initialEquity","cumulativeCashFlow","debtMultiple","newDebtMultiple","adjustedStructure","allScenarios","irrs","moics","returnRange","irrMin","irrMax","irrAverage","moicMin","moicMax","moicAverage","investmentHighlights","generateInvestmentHighlights","riskFactors","generateRiskFactors","highlights","risks","DATA_SOURCES","baseURL","fallbackURL","RATE_LIMITS","ALPHA_VANTAGE","requests","period","FMP","SEC_EDGAR","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","exponentialBase","jitterFactor","retryableStatusCodes","retryableErrors","CIRCUIT_BREAKER_CONFIG","failureThreshold","recoveryTimeout","monitoringPeriod","halfOpenMaxCalls","CIRCUIT_STATES","CircuitBreaker","name","config","state","failureCount","lastFailureTime","halfOpenCallCount","successCount","totalCalls","canExecute","now","recordSuccess","recordFailure","getStatus","failureRate","isOpen","nextRetryTime","execute","fn","circuitBreakerOpen","RetryManager","calculateDelay","attempt","exponentialDelay","delay","random","isRetryableError","includes","executeWithRetry","operation","lastError","resolve","setTimeout","dataFetchingService","env","__vite_import_meta_env__","customRateLimits","retryConfig","circuitBreakerConfig","rateLimiters","cache","cacheExpiry","demoMode","isDemoMode","retryManager","circuitBreakers","initializeCircuitBreakers","logger","apiLogger","initializeRateLimiters","log","environment","VITE_APP_ENV","VITE_FORCE_DEMO_MODE","VITE_ALPHA_VANTAGE_API_KEY","VITE_FMP_API_KEY","source","rateLimits","limit","checkRateLimit","limiter","time","oldestRequest","waitTime","logRateLimit","ceil","getCacheKey","JSON","stringify","getFromCache","key","expiry","delete","logCache","cached","size","setCache","ttlMinutes","set","expiresAt","generateMockData","ticker","dataType","basePrice","marketCap","companyNames","AAPL","MSFT","GOOGL","AMZN","META","TSLA","NVDA","mktCap","pe","pb","beta","sector","industry","enterpriseValueOverEBITDA","revenueTTM","grossProfitMargin","netProfitMargin","returnOnEquityTTM","returnOnAssetsTTM","effectiveTaxRateTTM","fullTimeEmployees","ipoDate","range","previousClose","volume","currency","netIncome","cashAndCashEquivalents","totalCurrentAssets","totalCurrentLiabilities","freeCashFlow","fetchCompanyProfile","cacheKey","mockData","async","requestId","logApiRequest","profile","logApiResponse","profileFound","catch","fetchFinancialStatements","statement","replace","fetchMarketData","interval","chart","meta","regularMarketPrice","regularMarketVolume","timestamps","prices","indicators","quote","fetchMarketDataAlternative","parseFloat","parseInt","change","changePercent","fetchSECFilings","filingType","form","filingDate","accessionNumber","reportDate","acceptanceDateTime","act","primaryDocument","toLowerCase","url","fetchPeerComparables","industryCode","peers","t","peerTicker","peRatio","evToEbitda","priceToBook","peerTickers","validPeers","peerProfile","peerMarket","fetchDCFInputs","incomeStatements","balanceSheets","all","revenues","stmt","reverse","revenueGrowthRates","avgRevenueGrowth","a","b","latestCashFlow","latestIncome","costOfEquity","latestBalance","debtRatio","historicalData","freeCashFlows","fetchLBOInputs","currentEV","evEbitdaMultiple","peerEvEbitdaMultiples","peer","avgPeerMultiple","workingCapital","interestCoverage","suggestedPurchasePrice","maxDebtCapacity","validateTicker","getApiStatus","metrics","getMetrics","cacheSize","validation","getCircuitBreakerStatus","performance","uptime","totalRequests","service","totalErrors","averageResponseTime","calculateAverageResponseTime","cacheHitRate","calculateCacheHitRate","availableKeys","totalDuration","duration","hits","hit","miss","getRecentLogs","level","clearMetrics","clear","validateApiKeys","buildAdvancedDCFModel","financials","dcfInputs","price","calculateHistoricalGrowthRates","calculateWACC","estimateGrowthRate","dcfModel","buildAdvancedLBOModel","transactionInputs","fetchPeerComparison","lboInputs","calculatePeerAverageMultiple","lboModel","multiples","multiple"],"mappings":"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"}
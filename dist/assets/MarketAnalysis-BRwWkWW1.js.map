{"version":3,"file":"MarketAnalysis-BRwWkWW1.js","sources":["../../src/hooks/useRealTimeData.js","../../src/components/ui/LiveMarketTicker.jsx","../../src/components/ui/LivePriceWidget.jsx","../../src/components/ui/LiveMarketDashboard.jsx","../../src/pages/MarketAnalysis.jsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nimport realTimeDataService from '../services/realTimeDataService';\n\n/**\n * Hook for managing real-time data subscriptions\n * Provides clean lifecycle management and automatic cleanup\n */\n\nexport const useRealTimeData = (dataType, symbol, options = {}) => {\n  const [data, setData] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  const unsubscribeRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const optionsRef = useRef(options);\n\n  // Update options ref when options change\n  useEffect(() => {\n    optionsRef.current = options;\n  }, [options]);\n\n  // Handle data updates\n  const handleDataUpdate = useCallback((newData) => {\n    setData(newData);\n    setLastUpdated(new Date());\n    setError(null);\n\n    if (!isConnected) {\n      setIsConnected(true);\n    }\n\n    // Call external update handler if provided\n    if (optionsRef.current.onUpdate) {\n      optionsRef.current.onUpdate(newData);\n    }\n  }, [isConnected]);\n\n  // Handle connection errors\n  const handleError = useCallback((err) => {\n    setError(err);\n    setIsConnected(false);\n\n    if (optionsRef.current.onError) {\n      optionsRef.current.onError(err);\n    }\n\n    // Auto-reconnect if enabled\n    if (optionsRef.current.autoReconnect !== false) {\n      const delay = optionsRef.current.reconnectDelay || 5000;\n      reconnectTimeoutRef.current = setTimeout(() => {\n        if (dataType && symbol) {\n          subscribe();\n        }\n      }, delay);\n    }\n  }, []);\n\n  // Subscribe to data feed\n  const subscribe = useCallback(() => {\n    if (!dataType || !symbol) return;\n\n    try {\n      unsubscribeRef.current = realTimeDataService.subscribe(\n        dataType,\n        symbol,\n        handleDataUpdate\n      );\n      setIsConnected(true);\n      setError(null);\n    } catch (err) {\n      handleError(err);\n    }\n  }, [dataType, symbol, handleDataUpdate, handleError]);\n\n  // Unsubscribe from data feed\n  const unsubscribe = useCallback(() => {\n    if (unsubscribeRef.current) {\n      unsubscribeRef.current();\n      unsubscribeRef.current = null;\n    }\n\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    setIsConnected(false);\n  }, []);\n\n  // Setup subscription on mount and when dependencies change\n  useEffect(() => {\n    if (dataType && symbol && optionsRef.current.enabled !== false) {\n      subscribe();\n    }\n\n    return unsubscribe;\n  }, [dataType, symbol, subscribe, unsubscribe]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      unsubscribe();\n    };\n  }, [unsubscribe]);\n\n  return {\n    data,\n    isConnected,\n    error,\n    lastUpdated,\n    subscribe,\n    unsubscribe,\n    reconnect: subscribe\n  };\n};\n\n/**\n * Hook for managing multiple real-time data subscriptions\n */\nexport const useMultipleRealTimeData = (subscriptions = []) => {\n  const [dataMap, setDataMap] = useState(new Map());\n  const [connectionStates, setConnectionStates] = useState(new Map());\n  const [errors, setErrors] = useState(new Map());\n\n  const unsubscribeRef = useRef(null);\n\n  const updateData = useCallback((key, data) => {\n    setDataMap(prev => new Map(prev.set(key, data)));\n  }, []);\n\n  const updateConnectionState = useCallback((key, isConnected) => {\n    setConnectionStates(prev => new Map(prev.set(key, isConnected)));\n  }, []);\n\n  const updateError = useCallback((key, error) => {\n    setErrors(prev => new Map(prev.set(key, error)));\n  }, []);\n\n  useEffect(() => {\n    if (subscriptions.length === 0) return;\n\n    const subscriptionConfigs = subscriptions.map(({ dataType, symbol, options = {} }) => ({\n      dataType,\n      symbol,\n      callback: (data) => {\n        const key = `${dataType}_${symbol}`;\n        updateData(key, data);\n        updateConnectionState(key, true);\n        updateError(key, null);\n\n        if (options.onUpdate) {\n          options.onUpdate(data);\n        }\n      }\n    }));\n\n    try {\n      unsubscribeRef.current = realTimeDataService.subscribeMultiple(subscriptionConfigs);\n\n      // Initialize connection states\n      subscriptions.forEach(({ dataType, symbol }) => {\n        const key = `${dataType}_${symbol}`;\n        updateConnectionState(key, true);\n      });\n    } catch (error) {\n      console.error('Failed to subscribe to multiple feeds:', error);\n      subscriptions.forEach(({ dataType, symbol }) => {\n        const key = `${dataType}_${symbol}`;\n        updateError(key, error);\n        updateConnectionState(key, false);\n      });\n    }\n\n    return () => {\n      if (unsubscribeRef.current) {\n        unsubscribeRef.current();\n        unsubscribeRef.current = null;\n      }\n    };\n  }, [subscriptions, updateData, updateConnectionState, updateError]);\n\n  const getData = useCallback((dataType, symbol) => {\n    const key = `${dataType}_${symbol}`;\n    return dataMap.get(key);\n  }, [dataMap]);\n\n  const getConnectionState = useCallback((dataType, symbol) => {\n    const key = `${dataType}_${symbol}`;\n    return connectionStates.get(key) || false;\n  }, [connectionStates]);\n\n  const getError = useCallback((dataType, symbol) => {\n    const key = `${dataType}_${symbol}`;\n    return errors.get(key);\n  }, [errors]);\n\n  return {\n    getData,\n    getConnectionState,\n    getError,\n    allData: Object.fromEntries(dataMap),\n    connectionStates: Object.fromEntries(connectionStates),\n    errors: Object.fromEntries(errors),\n    isAllConnected: Array.from(connectionStates.values()).every(state => state),\n    hasAnyErrors: Array.from(errors.values()).some(error => error !== null)\n  };\n};\n\nexport default useRealTimeData;\n","import { TrendingUp, TrendingDown, Wifi, WifiOff, RefreshCw } from 'lucide-react';\nimport React, { useState } from 'react';\n\nimport { useMultipleRealTimeData } from '../../hooks/useRealTimeData';\nimport { cn } from '../../utils/cn';\n\n/**\n * Live Market Ticker Component\n * Displays streaming market data in a scrolling ticker format\n */\n\nconst DEFAULT_SYMBOLS = [\n  { dataType: 'stock_price', symbol: 'AAPL', name: 'Apple' },\n  { dataType: 'stock_price', symbol: 'MSFT', name: 'Microsoft' },\n  { dataType: 'stock_price', symbol: 'GOOGL', name: 'Google' },\n  { dataType: 'stock_price', symbol: 'TSLA', name: 'Tesla' },\n  { dataType: 'fx_rates', symbol: 'EURUSD', name: 'EUR/USD' },\n  { dataType: 'commodity_prices', symbol: 'OIL', name: 'Oil' },\n  { dataType: 'commodity_prices', symbol: 'GOLD', name: 'Gold' }\n];\n\nexport const LiveMarketTicker = ({\n  symbols = DEFAULT_SYMBOLS,\n  className,\n  speed = 'normal',\n  showConnectionStatus = true,\n  onTickerClick\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  const subscriptions = symbols.map(({ dataType, symbol }) => ({\n    dataType,\n    symbol,\n    options: { autoReconnect: true }\n  }));\n\n  const {\n    getData,\n    getConnectionState,\n    isAllConnected\n  } = useMultipleRealTimeData(subscriptions);\n\n  const speedClasses = {\n    slow: 'animate-scroll-slow',\n    normal: 'animate-scroll',\n    fast: 'animate-scroll-fast'\n  };\n\n  const formatValue = (dataType, data) => {\n    if (!data) return '---';\n\n    switch (dataType) {\n      case 'stock_price':\n        return `$${data.price?.toFixed(2)}`;\n      case 'fx_rates':\n        return data.rate?.toFixed(4);\n      case 'commodity_prices':\n        return `$${data.price?.toFixed(2)}`;\n      case 'interest_rates':\n        return `${data.rate?.toFixed(2)}%`;\n      case 'bond_yields':\n        return `${data.yield?.toFixed(2)}%`;\n      default:\n        return data.value?.toFixed(2) || '---';\n    }\n  };\n\n  const formatChange = (dataType, data) => {\n    if (!data) return null;\n\n    let change, changePercent;\n\n    switch (dataType) {\n      case 'stock_price':\n        change = data.change;\n        changePercent = data.changePercent;\n        break;\n      case 'fx_rates':\n      case 'commodity_prices':\n        change = data.change;\n        changePercent = change;\n        break;\n      default:\n        return null;\n    }\n\n    if (change === undefined) return null;\n\n    const isPositive = change >= 0;\n    return {\n      value: Math.abs(change),\n      percent: Math.abs(changePercent),\n      isPositive\n    };\n  };\n\n  if (!isVisible) {\n    return (\n      <div className=\"flex items-center justify-center p-2 bg-slate-800 text-white\">\n        <button\n          onClick={() => setIsVisible(true)}\n          className=\"flex items-center space-x-2 text-sm hover:text-blue-400\"\n        >\n          <TrendingUp className=\"w-4 h-4\" />\n          <span>Show Market Ticker</span>\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'bg-slate-900 border-b border-slate-700 overflow-hidden relative',\n        className\n      )}\n    >\n      {/* Connection Status */}\n      {showConnectionStatus && (\n        <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 z-10 flex items-center space-x-2\">\n          {isAllConnected ? (\n            <div className=\"flex items-center space-x-1 text-green-400\">\n              <Wifi className=\"w-3 h-3\" />\n              <span className=\"text-xs\">Live</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center space-x-1 text-red-400\">\n              <WifiOff className=\"w-3 h-3\" />\n              <span className=\"text-xs\">Disconnected</span>\n            </div>\n          )}\n\n          <button\n            onClick={() => setIsVisible(false)}\n            className=\"text-slate-400 hover:text-white text-xs\"\n          >\n            ✕\n          </button>\n        </div>\n      )}\n\n      {/* Scrolling Content */}\n      <div\n        className={cn(\n          'flex whitespace-nowrap py-2',\n          speedClasses[speed] || speedClasses.normal\n        )}\n      >\n        {symbols.map(({ dataType, symbol }, index) => {\n          const data = getData(dataType, symbol);\n          const isConnected = getConnectionState(dataType, symbol);\n          const change = formatChange(dataType, data);\n\n          return (\n            <div\n              key={`${dataType}_${symbol}_${index}`}\n              className={cn(\n                'flex items-center space-x-2 px-4 py-1 cursor-pointer hover:bg-slate-800 transition-colors mr-8',\n                !isConnected && 'opacity-50'\n              )}\n              onClick={() => onTickerClick?.(dataType, symbol, data)}\n              onKeyDown={(e) => e.key === 'Enter' && onTickerClick?.(dataType, symbol, data)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {/* Symbol */}\n              <span className=\"text-white font-semibold text-sm\">\n                {symbol}\n              </span>\n\n              {/* Value */}\n              <span className=\"text-slate-300 text-sm\">\n                {formatValue(dataType, data)}\n              </span>\n\n              {/* Change */}\n              {change && (\n                <div\n                  className={cn(\n                    'flex items-center space-x-1 text-xs',\n                    change.isPositive ? 'text-green-400' : 'text-red-400'\n                  )}\n                >\n                  {change.isPositive ? (\n                    <TrendingUp className=\"w-3 h-3\" />\n                  ) : (\n                    <TrendingDown className=\"w-3 h-3\" />\n                  )}\n                  <span>\n                    {dataType === 'stock_price'\n                      ? `${change.percent.toFixed(2)}%`\n                      : `${change.value.toFixed(2)}%`\n                    }\n                  </span>\n                </div>\n              )}\n\n              {/* Connection indicator */}\n              {!isConnected && (\n                <RefreshCw className=\"w-3 h-3 text-slate-500 animate-spin\" />\n              )}\n            </div>\n          );\n        })}\n\n        {/* Duplicate content for seamless scrolling */}\n        {symbols.map(({ dataType, symbol }, index) => {\n          const data = getData(dataType, symbol);\n          const isConnected = getConnectionState(dataType, symbol);\n          const change = formatChange(dataType, data);\n\n          return (\n            <div\n              key={`${dataType}_${symbol}_${index}_dup`}\n              className={cn(\n                'flex items-center space-x-2 px-4 py-1 cursor-pointer hover:bg-slate-800 transition-colors mr-8',\n                !isConnected && 'opacity-50'\n              )}\n              onClick={() => onTickerClick?.(dataType, symbol, data)}\n              onKeyDown={(e) => e.key === 'Enter' && onTickerClick?.(dataType, symbol, data)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              <span className=\"text-white font-semibold text-sm\">{symbol}</span>\n              <span className=\"text-slate-300 text-sm\">{formatValue(dataType, data)}</span>\n              {change && (\n                <div\n                  className={cn(\n                    'flex items-center space-x-1 text-xs',\n                    change.isPositive ? 'text-green-400' : 'text-red-400'\n                  )}\n                >\n                  {change.isPositive ? (\n                    <TrendingUp className=\"w-3 h-3\" />\n                  ) : (\n                    <TrendingDown className=\"w-3 h-3\" />\n                  )}\n                  <span>\n                    {dataType === 'stock_price'\n                      ? `${change.percent.toFixed(2)}%`\n                      : `${change.value.toFixed(2)}%`\n                    }\n                  </span>\n                </div>\n              )}\n              {!isConnected && (\n                <RefreshCw className=\"w-3 h-3 text-slate-500 animate-spin\" />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default LiveMarketTicker;\n","import { TrendingUp, TrendingDown, Activity, AlertCircle, RefreshCw } from 'lucide-react';\nimport React, { useState } from 'react';\n\nimport { useRealTimeData } from '../../hooks/useRealTimeData';\nimport { cn } from '../../utils/cn';\n\n/**\n * Live Price Widget - Individual stock/asset price display with real-time updates\n */\n\nexport const LivePriceWidget = ({\n  dataType = 'stock_price',\n  symbol,\n  name,\n  className,\n  size = 'medium',\n  showChart = false,\n  onPriceUpdate\n}) => {\n  const [priceHistory, setPriceHistory] = useState([]);\n  const [isFlashing, setIsFlashing] = useState(false);\n\n  const { data, isConnected, error, lastUpdated } = useRealTimeData(dataType, symbol, {\n    onUpdate: (newData) => {\n      // Trigger flash animation on price change\n      setIsFlashing(true);\n      setTimeout(() => setIsFlashing(false), 200);\n\n      // Update price history for mini chart\n      setPriceHistory(prev => {\n        const newHistory = [...prev, newData.price || newData.rate || newData.value].slice(-20);\n        return newHistory;\n      });\n\n      onPriceUpdate?.(newData);\n    }\n  });\n\n  const getChangeDirection = () => {\n    if (!data) return 'neutral';\n\n    const change = data.change || data.changePercent || 0;\n    return change >= 0 ? 'positive' : 'negative';\n  };\n\n  const formatPrice = () => {\n    if (!data) return '---';\n\n    switch (dataType) {\n      case 'stock_price':\n        return `$${data.price?.toFixed(2)}`;\n      case 'fx_rates':\n        return data.rate?.toFixed(4);\n      case 'commodity_prices':\n        return `$${data.price?.toFixed(2)}`;\n      case 'interest_rates':\n      case 'bond_yields':\n        return `${(data.rate || data.yield)?.toFixed(2)}%`;\n      default:\n        return data.value?.toFixed(2) || '---';\n    }\n  };\n\n  const formatChange = () => {\n    if (!data) return null;\n\n    const change = data.change || 0;\n    const changePercent = data.changePercent || change;\n\n    return {\n      absolute: Math.abs(change).toFixed(2),\n      percent: Math.abs(changePercent).toFixed(2),\n      direction: getChangeDirection()\n    };\n  };\n\n  const sizeClasses = {\n    small: 'p-3',\n    medium: 'p-4',\n    large: 'p-6'\n  };\n\n  const textSizeClasses = {\n    small: {\n      price: 'text-lg',\n      change: 'text-xs',\n      symbol: 'text-sm'\n    },\n    medium: {\n      price: 'text-xl',\n      change: 'text-sm',\n      symbol: 'text-base'\n    },\n    large: {\n      price: 'text-2xl',\n      change: 'text-base',\n      symbol: 'text-lg'\n    }\n  };\n\n  const change = formatChange();\n  const direction = getChangeDirection();\n\n  return (\n    <div\n      className={cn(\n        'bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 transition-all duration-200',\n        sizeClasses[size],\n        isFlashing && direction === 'positive' && 'bg-green-50 dark:bg-green-900/20',\n        isFlashing && direction === 'negative' && 'bg-red-50 dark:bg-red-900/20',\n        !isConnected && 'opacity-75',\n        className\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-2\">\n        <div>\n          <h3\n            className={cn(\n              'font-semibold text-slate-900 dark:text-white',\n              textSizeClasses[size].symbol\n            )}\n          >\n            {symbol}\n          </h3>\n          {name && (\n            <p className=\"text-xs text-slate-500 dark:text-slate-400\">{name}</p>\n          )}\n        </div>\n\n        {/* Connection Status */}\n        <div className=\"flex items-center space-x-1\">\n          {isConnected ? (\n            <Activity className=\"w-3 h-3 text-green-500 animate-pulse\" />\n          ) : error ? (\n            <AlertCircle className=\"w-3 h-3 text-red-500\" />\n          ) : (\n            <RefreshCw className=\"w-3 h-3 text-slate-400 animate-spin\" />\n          )}\n        </div>\n      </div>\n\n      {/* Price Display */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <div\n            className={cn(\n              'font-bold text-slate-900 dark:text-white',\n              textSizeClasses[size].price\n            )}\n          >\n            {formatPrice()}\n          </div>\n\n          {/* Change Display */}\n          {change && (\n            <div\n              className={cn(\n                'flex items-center space-x-1 mt-1',\n                textSizeClasses[size].change,\n                direction === 'positive' ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n              )}\n            >\n              {direction === 'positive' ? (\n                <TrendingUp className=\"w-3 h-3\" />\n              ) : (\n                <TrendingDown className=\"w-3 h-3\" />\n              )}\n              <span>\n                {dataType === 'stock_price' ? (\n                  `$${change.absolute} (${change.percent}%)`\n                ) : (\n                  `${change.percent}%`\n                )}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Mini Chart */}\n        {showChart && priceHistory.length > 1 && (\n          <div className=\"w-16 h-8\">\n            <MiniChart\n              data={priceHistory}\n              color={direction === 'positive' ? '#10b981' : '#ef4444'}\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Last Updated */}\n      {lastUpdated && (\n        <div className=\"text-xs text-slate-400 mt-2\">\n          Updated {lastUpdated.toLocaleTimeString()}\n        </div>\n      )}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"mt-2 text-xs text-red-500 flex items-center space-x-1\">\n          <AlertCircle className=\"w-3 h-3\" />\n          <span>Connection error</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Mini Chart Component for price trends\n */\nconst MiniChart = ({ data, color = '#3b82f6' }) => {\n  if (!data || data.length < 2) return null;\n\n  const min = Math.min(...data);\n  const max = Math.max(...data);\n  const range = max - min || 1;\n\n  const points = data.map((value, index) => {\n    const x = (index / (data.length - 1)) * 64; // 64px width\n    const y = 32 - ((value - min) / range) * 32; // 32px height, inverted\n    return `${x},${y}`;\n  }).join(' ');\n\n  return (\n    <svg width=\"64\" height=\"32\" className=\"overflow-visible\">\n      <polyline\n        points={points}\n        fill=\"none\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      {/* Dot at the end */}\n      <circle\n        cx={64}\n        cy={32 - ((data[data.length - 1] - min) / range) * 32}\n        r=\"2\"\n        fill={color}\n      />\n    </svg>\n  );\n};\n\nexport default LivePriceWidget;\n","import { Activity, TrendingUp, Globe, Zap, Settings, Maximize2, TrendingDown } from 'lucide-react';\nimport React, { useState } from 'react';\n\nimport { useMultipleRealTimeData } from '../../hooks/useRealTimeData';\nimport { cn } from '../../utils/cn';\n\nimport LiveMarketTicker from './LiveMarketTicker';\nimport LivePriceWidget from './LivePriceWidget';\n\n/**\n * Live Market Dashboard - Comprehensive real-time market data display\n */\n\nconst MARKET_SECTIONS = {\n  stocks: {\n    title: 'Major Stocks',\n    icon: TrendingUp,\n    items: [\n      { dataType: 'stock_price', symbol: 'AAPL', name: 'Apple Inc.' },\n      { dataType: 'stock_price', symbol: 'MSFT', name: 'Microsoft Corp.' },\n      { dataType: 'stock_price', symbol: 'GOOGL', name: 'Alphabet Inc.' },\n      { dataType: 'stock_price', symbol: 'TSLA', name: 'Tesla Inc.' },\n      { dataType: 'stock_price', symbol: 'AMZN', name: 'Amazon.com Inc.' }\n    ]\n  },\n  forex: {\n    title: 'Foreign Exchange',\n    icon: Globe,\n    items: [\n      { dataType: 'fx_rates', symbol: 'EURUSD', name: 'Euro/US Dollar' },\n      { dataType: 'fx_rates', symbol: 'GBPUSD', name: 'British Pound/US Dollar' },\n      { dataType: 'fx_rates', symbol: 'USDJPY', name: 'US Dollar/Japanese Yen' },\n      { dataType: 'fx_rates', symbol: 'USDCHF', name: 'US Dollar/Swiss Franc' }\n    ]\n  },\n  commodities: {\n    title: 'Commodities',\n    icon: Zap,\n    items: [\n      { dataType: 'commodity_prices', symbol: 'OIL', name: 'Crude Oil' },\n      { dataType: 'commodity_prices', symbol: 'GOLD', name: 'Gold' },\n      { dataType: 'commodity_prices', symbol: 'SILVER', name: 'Silver' },\n      { dataType: 'commodity_prices', symbol: 'COPPER', name: 'Copper' }\n    ]\n  },\n  rates: {\n    title: 'Interest Rates & Bonds',\n    icon: Activity,\n    items: [\n      { dataType: 'bond_yields', symbol: 'US10Y', name: 'US 10-Year Treasury' },\n      { dataType: 'bond_yields', symbol: 'US2Y', name: 'US 2-Year Treasury' },\n      { dataType: 'interest_rates', symbol: 'USD_3M', name: 'USD 3-Month LIBOR' },\n      { dataType: 'volatility_index', symbol: 'VIX', name: 'CBOE Volatility Index' }\n    ]\n  }\n};\n\nexport const LiveMarketDashboard = ({\n  className,\n  showTicker = true,\n  defaultSection = 'stocks',\n  onAssetClick\n}) => {\n  const [activeSection, setActiveSection] = useState(defaultSection);\n  const [viewMode, setViewMode] = useState('grid'); // 'grid' | 'list'\n  const [expandedWidget, setExpandedWidget] = useState(null);\n\n  // Subscribe to all market data\n  const allSubscriptions = Object.values(MARKET_SECTIONS)\n    .flatMap(section => section.items)\n    .map(({ dataType, symbol }) => ({ dataType, symbol }));\n\n  const {\n    getData,\n    getConnectionState,\n    isAllConnected,\n    hasAnyErrors\n  } = useMultipleRealTimeData(allSubscriptions);\n\n  const handleTickerClick = (dataType, symbol, data) => {\n    onAssetClick?.(dataType, symbol, data);\n  };\n\n  const handleWidgetExpand = (key) => {\n    setExpandedWidget(expandedWidget === key ? null : key);\n  };\n\n  const activeItems = MARKET_SECTIONS[activeSection]?.items || [];\n\n  return (\n    <div className={cn('bg-white dark:bg-slate-900 rounded-lg shadow-lg overflow-hidden', className)}>\n      {/* Market Ticker */}\n      {showTicker && (\n        <LiveMarketTicker\n          onTickerClick={handleTickerClick}\n          speed=\"normal\"\n          showConnectionStatus={true}\n        />\n      )}\n\n      {/* Header */}\n      <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Activity className=\"w-5 h-5 text-blue-600\" />\n            <h2 className=\"text-lg font-semibold text-slate-900 dark:text-white\">\n              Live Market Data\n            </h2>\n            <div\n              className={cn(\n                'px-2 py-1 rounded-full text-xs font-medium',\n                isAllConnected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n              )}\n            >\n              {isAllConnected ? 'Live' : 'Disconnected'}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* View Mode Toggle */}\n            <button\n              onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}\n              className=\"p-2 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-lg\"\n              title={`Switch to ${viewMode === 'grid' ? 'list' : 'grid'} view`}\n            >\n              <Maximize2 className=\"w-4 h-4\" />\n            </button>\n\n            {/* Settings */}\n            <button className=\"p-2 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-lg\">\n              <Settings className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Section Tabs */}\n        <div className=\"flex space-x-1 mt-4\">\n          {Object.entries(MARKET_SECTIONS).map(([key, section]) => {\n            const Icon = section.icon;\n            return (\n              <button\n                key={key}\n                onClick={() => setActiveSection(key)}\n                className={cn(\n                  'flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors',\n                  activeSection === key\n                    ? 'bg-blue-100 text-blue-900 dark:bg-blue-900 dark:text-blue-100'\n                    : 'text-slate-600 hover:text-slate-900 hover:bg-slate-100 dark:text-slate-400 dark:hover:text-slate-100 dark:hover:bg-slate-800'\n                )}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <span>{section.title}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4\">\n        {viewMode === 'grid' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {activeItems.map(({ dataType, symbol, name }) => {\n              const key = `${dataType}_${symbol}`;\n              const isExpanded = expandedWidget === key;\n\n              return (\n                <div\n                  key={key}\n                  className={cn(\n                    'transition-all duration-200',\n                    isExpanded && 'md:col-span-2 lg:col-span-2'\n                  )}\n                >\n                  <LivePriceWidget\n                    dataType={dataType}\n                    symbol={symbol}\n                    name={name}\n                    size={isExpanded ? 'large' : 'medium'}\n                    showChart={isExpanded}\n                    onPriceUpdate={(data) => onAssetClick?.(dataType, symbol, data)}\n                    className=\"cursor-pointer hover:shadow-md\"\n                    onClick={() => handleWidgetExpand(key)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {activeItems.map(({ dataType, symbol, name }) => {\n              const data = getData(dataType, symbol);\n              const isConnected = getConnectionState(dataType, symbol);\n\n              return (\n                <div\n                  key={`${dataType}_${symbol}`}\n                  onClick={() => onAssetClick?.(dataType, symbol, data)}\n                  onKeyDown={(e) => e.key === 'Enter' && onAssetClick?.(dataType, symbol, data)}\n                  role=\"button\"\n                  tabIndex={0}\n                  className=\"flex items-center justify-between p-3 hover:bg-slate-50 dark:hover:bg-slate-800 rounded-lg cursor-pointer transition-colors\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div\n                      className={cn(\n                        'w-2 h-2 rounded-full',\n                        isConnected ? 'bg-green-500' : 'bg-red-500'\n                      )}\n                    />\n                    <div>\n                      <div className=\"font-medium text-slate-900 dark:text-white\">\n                        {symbol}\n                      </div>\n                      <div className=\"text-sm text-slate-500 dark:text-slate-400\">\n                        {name}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold text-slate-900 dark:text-white\">\n                      {data ? (\n                        dataType === 'stock_price' ? `$${data.price?.toFixed(2)}` :\n                          dataType === 'fx_rates' ? data.rate?.toFixed(4) :\n                            dataType === 'commodity_prices' ? `$${data.price?.toFixed(2)}` :\n                              `${(data.rate || data.yield || data.volatility)?.toFixed(2)}%`\n                      ) : '---'}\n                    </div>\n                    {data && (data.change !== undefined || data.changePercent !== undefined) && (\n                      <div\n                        className={cn(\n                          'text-sm flex items-center space-x-1',\n                          (data.change || data.changePercent || 0) >= 0\n                            ? 'text-green-600'\n                            : 'text-red-600'\n                        )}\n                      >\n                        {(data.change || data.changePercent || 0) >= 0 ? (\n                          <TrendingUp className=\"w-3 h-3\" />\n                        ) : (\n                          <TrendingDown className=\"w-3 h-3\" />\n                        )}\n                        <span>\n                          {dataType === 'stock_price'\n                            ? `${Math.abs(data.changePercent || 0).toFixed(2)}%`\n                            : `${Math.abs(data.change || data.changePercent || 0).toFixed(2)}%`\n                          }\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Error State */}\n        {hasAnyErrors && (\n          <div className=\"mt-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n            <div className=\"text-sm text-red-800 dark:text-red-200\">\n              Some market data feeds are experiencing connectivity issues.\n              Prices may not reflect real-time values.\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LiveMarketDashboard;\n","import { Globe, Activity, Settings } from 'lucide-react';\nimport React, { useState } from 'react';\n\nimport SEOHead from '../components/SEO/SEOHead';\nimport Header from '../components/ui/Header';\nimport LiveMarketDashboard from '../components/ui/LiveMarketDashboard';\nimport LivePriceWidget from '../components/ui/LivePriceWidget';\n\n/**\n * Market Analysis page with integrated real-time data streaming\n */\n\nconst MarketAnalysis = () => {\n  const [selectedAsset, setSelectedAsset] = useState(null);\n\n  const handleAssetClick = (dataType, symbol, data) => {\n    setSelectedAsset({ dataType, symbol, data });\n  };\n\n  const watchlistSymbols = [\n    { dataType: 'stock_price', symbol: 'AAPL', name: 'Apple Inc.' },\n    { dataType: 'stock_price', symbol: 'MSFT', name: 'Microsoft Corp.' },\n    { dataType: 'fx_rates', symbol: 'EURUSD', name: 'EUR/USD' },\n    { dataType: 'commodity_prices', symbol: 'GOLD', name: 'Gold' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <SEOHead\n        title=\"Live Market Analysis | FinanceAnalyst Pro\"\n        description=\"Real-time market data, live price feeds, and comprehensive market analysis tools for professional investors.\"\n        canonical=\"/market-analysis\"\n        keywords=\"real-time market data, live prices, market analysis, trading, stocks, forex, commodities\"\n      />\n\n      <Header />\n\n      <main className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">\n            Live Market Analysis\n          </h1>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Real-time market data and analysis tools for informed investment decisions\n          </p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          {watchlistSymbols.map(({ dataType, symbol, name }) => (\n            <LivePriceWidget\n              key={`${dataType}_${symbol}`}\n              dataType={dataType}\n              symbol={symbol}\n              name={name}\n              size=\"small\"\n              showChart={true}\n              onPriceUpdate={(data) => handleAssetClick(dataType, symbol, data)}\n              className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n            />\n          ))}\n        </div>\n\n        {/* Main Dashboard */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n          {/* Live Market Dashboard */}\n          <div className=\"xl:col-span-3\">\n            <LiveMarketDashboard\n              showTicker={true}\n              onAssetClick={handleAssetClick}\n              className=\"h-fit\"\n            />\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Selected Asset Details */}\n            {selectedAsset && (\n              <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6\">\n                <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center\">\n                  <Activity className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Asset Details\n                </h3>\n                <LivePriceWidget\n                  dataType={selectedAsset.dataType}\n                  symbol={selectedAsset.symbol}\n                  size=\"large\"\n                  showChart={true}\n                  className=\"border-none shadow-none\"\n                />\n              </div>\n            )}\n\n            {/* Market Overview */}\n            <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center\">\n                <Globe className=\"w-5 h-5 mr-2 text-green-600\" />\n                Market Overview\n              </h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-600 dark:text-slate-400\">Market Status</span>\n                  <span className=\"text-green-600 font-medium\">Open</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-600 dark:text-slate-400\">Active Feeds</span>\n                  <span className=\"text-slate-900 dark:text-white font-medium\">28</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-600 dark:text-slate-400\">Last Update</span>\n                  <span className=\"text-slate-900 dark:text-white font-medium\">Live</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center\">\n                <Settings className=\"w-5 h-5 mr-2 text-purple-600\" />\n                Quick Actions\n              </h3>\n              <div className=\"space-y-2\">\n                <button className=\"w-full text-left px-3 py-2 text-sm text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors\">\n                  Create Price Alert\n                </button>\n                <button className=\"w-full text-left px-3 py-2 text-sm text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors\">\n                  Export Market Data\n                </button>\n                <button className=\"w-full text-left px-3 py-2 text-sm text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors\">\n                  Add to Watchlist\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default MarketAnalysis;\n"],"names":["useMultipleRealTimeData","subscriptions","dataMap","setDataMap","useState","Map","connectionStates","setConnectionStates","errors","setErrors","unsubscribeRef","useRef","updateData","useCallback","key","data","prev","set","updateConnectionState","isConnected","updateError","error","useEffect","length","subscriptionConfigs","map","dataType","symbol","options","callback","onUpdate","current","realTimeDataService","subscribeMultiple","forEach","getData","get","getConnectionState","getError","allData","Object","fromEntries","isAllConnected","Array","from","values","every","state","hasAnyErrors","some","DEFAULT_SYMBOLS","name","LiveMarketTicker","symbols","className","speed","showConnectionStatus","onTickerClick","isVisible","setIsVisible","autoReconnect","speedClasses","slow","normal","fast","formatValue","price","toFixed","rate","yield","value","formatChange","change","changePercent","isPositive","Math","abs","percent","jsxs","cn","children","jsx","Wifi","WifiOff","onClick","index","onKeyDown","e","role","tabIndex","TrendingUp","TrendingDown","RefreshCw","LivePriceWidget","size","showChart","onPriceUpdate","priceHistory","setPriceHistory","isFlashing","setIsFlashing","lastUpdated","setData","setIsConnected","setError","setLastUpdated","reconnectTimeoutRef","optionsRef","handleDataUpdate","newData","Date","handleError","err","onError","delay","reconnectDelay","setTimeout","subscribe","unsubscribe","clearTimeout","enabled","reconnect","useRealTimeData","slice","getChangeDirection","textSizeClasses","small","medium","large","absolute","direction","Activity","AlertCircle","formatPrice","MiniChart","color","toLocaleTimeString","min","range","max","points","join","width","height","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","MARKET_SECTIONS","stocks","title","icon","items","forex","Globe","commodities","Zap","rates","LiveMarketDashboard","showTicker","defaultSection","onAssetClick","activeSection","setActiveSection","viewMode","setViewMode","expandedWidget","setExpandedWidget","allSubscriptions","flatMap","section","activeItems","Maximize2","Settings","entries","Icon","isExpanded","handleWidgetExpand","volatility","MarketAnalysis","selectedAsset","setSelectedAsset","handleAssetClick","SEOHead","description","canonical","keywords","Header"],"mappings":"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"}
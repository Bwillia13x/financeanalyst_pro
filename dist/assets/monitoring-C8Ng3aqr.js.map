{"version":3,"mappings":"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","names":["monitoring","constructor","this","isProduction","enableAnalytics","enableErrorReporting","enablePerformanceMonitoring","gaTrackingId","hotjarLoaded","isInitialized","detectAutomatedEnvironment","initializeMonitoring","navigator","webdriver","window","location","URLSearchParams","search","has","initializeSentry","initializeGoogleAnalytics","initializeHotjar","initializePerformanceMonitoring","setupGlobalErrorHandlers","error","__vitePreload","import","then","async","Sentry","init","dsn","environment","release","integrations","tracesSampleRate","beforeSend","event","level","configureScope","scope","setTag","setContext","version","catch","console","warn","script","document","createElement","gtag","dataLayer","push","arguments","src","head","appendChild","Date","page_title","title","page_location","href","h","o","a","r","hj","q","_hjSettings","hjid","hjsv","getElementsByTagName","monitorCoreWebVitals","monitorCustomMetrics","monitorResourceLoading","getCLS","getFID","getFCP","getLCP","getTTFB","n","a8","sendToAnalytics","bind","monitorApiPerformance","monitorComponentPerformance","monitorMemoryUsage","originalFetch","fetch","args","startTime","performance","now","response","endTime","trackEvent","url","duration","status","success","ok","message","PerformanceObserver","list","entry","getEntries","observe","entryTypes","setInterval","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","transferSize","name","size","addEventListener","trackError","reason","filename","lineno","colno","target","Error","eventName","properties","sendToCustomAnalytics","category","additionalData","captureException","tags","extra","stack","metric","value","rating","method","headers","body","JSON","stringify","timestamp","toISOString","userAgent","trackPageView","pageName","page_path","page","trackUserInteraction","action","element"],"ignoreList":[],"sources":["../../src/utils/monitoring.js"],"sourcesContent":["/**\n * Production Monitoring and Analytics Utilities\n * Handles error tracking, performance monitoring, and user analytics\n */\n\nclass MonitoringService {\n  constructor() {\n    this.isProduction = import.meta.env.VITE_APP_ENV === 'production';\n    this.enableAnalytics = import.meta.env.VITE_ENABLE_ANALYTICS === 'true';\n    this.enableErrorReporting = import.meta.env.VITE_ENABLE_ERROR_REPORTING === 'true';\n    this.enablePerformanceMonitoring = import.meta.env.VITE_PERFORMANCE_MONITORING === 'true';\n    this.gaTrackingId = null;\n    this.hotjarLoaded = false;\n    this.isInitialized = false;\n\n    // Check if we're in an automated test environment\n    const isAutomatedEnv = this.detectAutomatedEnvironment();\n\n    // Only initialize monitoring if not in automated test environment\n    if (!isAutomatedEnv) {\n      this.initializeMonitoring();\n    }\n  }\n\n  detectAutomatedEnvironment() {\n    try {\n      return (\n        (typeof navigator !== 'undefined' && navigator.webdriver === true) ||\n        (typeof window !== 'undefined' && window.location &&\n          new URLSearchParams(window.location.search).has('lhci')) ||\n        (typeof window !== 'undefined' && window.location &&\n          new URLSearchParams(window.location.search).has('ci')) ||\n        (typeof window !== 'undefined' && window.location &&\n          new URLSearchParams(window.location.search).has('audit'))\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Initialize all monitoring services\n   */\n  initializeMonitoring() {\n    if (this.isInitialized) return;\n\n    try {\n      if (this.enableErrorReporting) {\n        this.initializeSentry();\n      }\n\n      if (this.enableAnalytics) {\n        this.initializeGoogleAnalytics();\n        this.initializeHotjar();\n      }\n\n      if (this.enablePerformanceMonitoring) {\n        this.initializePerformanceMonitoring();\n      }\n\n      this.setupGlobalErrorHandlers();\n      this.isInitialized = true;\n    } catch (error) {\n      console.warn('Failed to initialize monitoring:', error);\n    }\n  }\n\n  /**\n   * Initialize Sentry for error tracking\n   */\n  initializeSentry() {\n    const sentryDsn = import.meta.env.VITE_SENTRY_DSN;\n    if (!sentryDsn) return;\n\n    // Dynamically import Sentry to avoid bundle bloat\n    import('@sentry/browser')\n      .then(async(Sentry) => {\n        const integrations = [];\n\n        Sentry.init({\n          dsn: sentryDsn,\n          environment: import.meta.env.VITE_APP_ENV,\n          release: import.meta.env.VITE_APP_VERSION,\n          integrations,\n          tracesSampleRate: this.isProduction ? 0.1 : 1.0,\n          beforeSend: event => {\n            // Filter out non-critical errors in production\n            if (this.isProduction && event.level === 'warning') {\n              return null;\n            }\n            return event;\n          }\n        });\n\n        Sentry.configureScope(scope => {\n          scope.setTag('component', 'financeanalyst-pro');\n          scope.setContext('app', {\n            version: import.meta.env.VITE_APP_VERSION,\n            environment: import.meta.env.VITE_APP_ENV\n          });\n        });\n\n        // Expose globally for cases that call window.Sentry\n        window.Sentry = Sentry;\n      })\n      .catch(console.warn);\n  }\n\n  /**\n   * Initialize Google Analytics\n   */\n  initializeGoogleAnalytics() {\n    const gaTrackingId = import.meta.env.VITE_GA_TRACKING_ID;\n    if (!gaTrackingId) return;\n\n    // Load Google Analytics script\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = `https://www.googletagmanager.com/gtag/js?id=${gaTrackingId}`;\n    document.head.appendChild(script);\n\n    // Initialize gtag\n    window.dataLayer = window.dataLayer || [];\n    function gtag() {\n      window.dataLayer.push(arguments);\n    }\n    window.gtag = gtag;\n\n    gtag('js', new Date());\n    gtag('config', gaTrackingId, {\n      page_title: document.title,\n      page_location: window.location.href\n    });\n\n    // store for route-change pageview updates\n    this.gaTrackingId = gaTrackingId;\n  }\n\n  /**\n   * Initialize Hotjar for user behavior analytics\n   */\n  initializeHotjar() {\n    const hotjarId = import.meta.env.VITE_HOTJAR_ID;\n    if (!hotjarId) return;\n\n    (function(h, o, t, j, a, r) {\n      h.hj =\n        h.hj ||\n        function() {\n          (h.hj.q = h.hj.q || []).push(arguments);\n        };\n      h._hjSettings = { hjid: hotjarId, hjsv: 6 };\n      a = o.getElementsByTagName('head')[0];\n      r = o.createElement('script');\n      r.async = 1;\n      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;\n      a.appendChild(r);\n    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');\n\n    this.hotjarLoaded = true;\n  }\n\n  /**\n   * Initialize performance monitoring\n   */\n  initializePerformanceMonitoring() {\n    // Core Web Vitals monitoring\n    this.monitorCoreWebVitals();\n\n    // Custom performance metrics\n    this.monitorCustomMetrics();\n\n    // Resource loading monitoring\n    this.monitorResourceLoading();\n  }\n\n  /**\n   * Monitor Core Web Vitals\n   */\n  monitorCoreWebVitals() {\n    // Dynamically import web-vitals library\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(this.sendToAnalytics.bind(this));\n        getFID(this.sendToAnalytics.bind(this));\n        getFCP(this.sendToAnalytics.bind(this));\n        getLCP(this.sendToAnalytics.bind(this));\n        getTTFB(this.sendToAnalytics.bind(this));\n      })\n      .catch(console.warn);\n  }\n\n  /**\n   * Monitor custom performance metrics\n   */\n  monitorCustomMetrics() {\n    // Monitor API response times\n    this.monitorApiPerformance();\n\n    // Monitor component render times\n    this.monitorComponentPerformance();\n\n    // Monitor memory usage\n    this.monitorMemoryUsage();\n  }\n\n  /**\n   * Monitor API performance\n   */\n  monitorApiPerformance() {\n    const originalFetch = window.fetch;\n    window.fetch = async(...args) => {\n      const startTime = performance.now();\n      try {\n        const response = await originalFetch(...args);\n        const endTime = performance.now();\n\n        this.trackEvent('api_performance', {\n          url: args[0],\n          duration: endTime - startTime,\n          status: response.status,\n          success: response.ok\n        });\n\n        return response;\n      } catch (error) {\n        const endTime = performance.now();\n\n        this.trackEvent('api_error', {\n          url: args[0],\n          duration: endTime - startTime,\n          error: error.message\n        });\n\n        throw error;\n      }\n    };\n  }\n\n  /**\n   * Monitor component performance\n   */\n  monitorComponentPerformance() {\n    // Use Performance Observer to monitor long tasks\n    if ('PerformanceObserver' in window) {\n      const observer = new PerformanceObserver(list => {\n        for (const entry of list.getEntries()) {\n          if (entry.duration > 50) {\n            // Tasks longer than 50ms\n            this.trackEvent('long_task', {\n              duration: entry.duration,\n              startTime: entry.startTime\n            });\n          }\n        }\n      });\n\n      observer.observe({ entryTypes: ['longtask'] });\n    }\n  }\n\n  /**\n   * Monitor memory usage\n   */\n  monitorMemoryUsage() {\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = performance.memory;\n        this.trackEvent('memory_usage', {\n          usedJSHeapSize: memory.usedJSHeapSize,\n          totalJSHeapSize: memory.totalJSHeapSize,\n          jsHeapSizeLimit: memory.jsHeapSizeLimit\n        });\n      }, 60000); // Every minute\n    }\n  }\n\n  /**\n   * Monitor resource loading\n   */\n  monitorResourceLoading() {\n    if ('PerformanceObserver' in window) {\n      const observer = new PerformanceObserver(list => {\n        for (const entry of list.getEntries()) {\n          if (entry.transferSize > 1000000) {\n            // Resources larger than 1MB\n            this.trackEvent('large_resource', {\n              name: entry.name,\n              size: entry.transferSize,\n              duration: entry.duration\n            });\n          }\n        }\n      });\n\n      observer.observe({ entryTypes: ['resource'] });\n    }\n  }\n\n  /**\n   * Setup global error handlers\n   */\n  setupGlobalErrorHandlers() {\n    // Unhandled promise rejections\n    window.addEventListener('unhandledrejection', event => {\n      this.trackError(event.reason, 'unhandled_promise_rejection');\n    });\n\n    // Global JavaScript errors\n    window.addEventListener('error', event => {\n      this.trackError(event.error, 'javascript_error', {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      });\n    });\n\n    // Resource loading errors\n    window.addEventListener(\n      'error',\n      event => {\n        if (event.target !== window) {\n          this.trackError(\n            new Error(`Resource failed to load: ${event.target.src || event.target.href}`),\n            'resource_error'\n          );\n        }\n      },\n      true\n    );\n  }\n\n  /**\n   * Track custom events\n   */\n  trackEvent(eventName, properties = {}) {\n    if (!this.enableAnalytics) return;\n\n    // Send to Google Analytics\n    if (window.gtag) {\n      window.gtag('event', eventName, properties);\n    }\n\n    // Send to custom analytics endpoint\n    this.sendToCustomAnalytics(eventName, properties);\n  }\n\n  /**\n   * Track errors\n   */\n  trackError(error, category = 'error', additionalData = {}) {\n    if (!this.enableErrorReporting) return;\n\n    console.error(`[${category}]`, error, additionalData);\n\n    // Send to Sentry if available\n    if (window.Sentry) {\n      window.Sentry.captureException(error, {\n        tags: { category },\n        extra: additionalData\n      });\n    }\n\n    // Track as event\n    this.trackEvent('error_occurred', {\n      category,\n      message: error.message,\n      stack: error.stack,\n      ...additionalData\n    });\n  }\n\n  /**\n   * Send metrics to analytics\n   */\n  sendToAnalytics(metric) {\n    this.trackEvent('web_vital', {\n      name: metric.name,\n      value: metric.value,\n      rating: metric.rating\n    });\n  }\n\n  /**\n   * Send to custom analytics endpoint\n   */\n  sendToCustomAnalytics(eventName, properties) {\n    if (!this.isProduction) return;\n\n    // Send to your custom analytics endpoint\n    fetch('/api/analytics', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        event: eventName,\n        properties: {\n          ...properties,\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n          url: window.location.href\n        }\n      })\n    }).catch(() => {\n      // Silently fail for analytics\n    });\n  }\n\n  /**\n   * Track page views\n   */\n  trackPageView(pageName, additionalData = {}) {\n    // Update GA single-page-app page view\n    if (window.gtag && this.gaTrackingId) {\n      window.gtag('config', this.gaTrackingId, {\n        page_title: document.title,\n        page_path: pageName,\n        page_location: window.location.href\n      });\n    }\n\n    // Notify Hotjar of route change\n    if (typeof window.hj === 'function') {\n      window.hj('stateChange', pageName);\n    }\n\n    // Custom analytics event\n    this.trackEvent('page_view', {\n      page: pageName,\n      title: document.title,\n      url: window.location.href,\n      ...additionalData\n    });\n  }\n\n  /**\n   * Track user interactions\n   */\n  trackUserInteraction(action, element, additionalData = {}) {\n    this.trackEvent('user_interaction', {\n      action,\n      element,\n      ...additionalData\n    });\n  }\n}\n\n// Create singleton instance\nconst monitoring = new MonitoringService();\n\nexport default monitoring;\n"],"file":"assets/monitoring-C8Ng3aqr.js"}
{"version":3,"file":"index-PJ6BGmjC.js","sources":["../../src/pages/financial-model-workspace/components/AuditTrail.jsx","../../src/pages/financial-model-workspace/components/CalculationResults.jsx","../../src/pages/financial-model-workspace/components/FormulaBuilder.jsx","../../src/pages/financial-model-workspace/components/ModelTemplates.jsx","../../src/services/commandRegistry.js","../../src/services/persistence/DataMigrationService.js","../../src/services/utils/CompressionUtils.js","../../src/services/persistence/IndexedDBService.js","../../src/services/utils/CryptoUtils.js","../../src/services/persistence/LocalStorageService.js","../../src/services/persistence/SessionManager.js","../../src/services/persistence/PersistenceManager.js","../../src/services/commandProcessor.js","../../src/services/commands/automationCommands.js","../../src/services/commands/coreCommands.js","../../src/services/commands/dataCommands.js","../../src/services/commands/esgCommands.js","../../src/services/persistence/BackupService.js","../../src/services/persistence/PrivacyService.js","../../src/services/persistence/SyncService.js","../../src/services/persistence/PersistenceTestSuite.js","../../src/services/commands/persistenceCommands.js","../../src/services/commands/privateAnalysisCommands.js","../../src/services/commands/systemCommands.js","../../src/services/commands/technicalCommands.js","../../src/services/commands/valuationCommands.js","../../src/services/commandInitializer.js","../../src/pages/financial-model-workspace/components/TerminalInterface.jsx","../../src/pages/financial-model-workspace/components/VariableInputs.jsx","../../src/pages/financial-model-workspace/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst AuditTrail = ({ calculations, errors, warnings }) => {\n  const [activeTab, setActiveTab] = useState('calculations');\n  const [expandedItems, setExpandedItems] = useState(new Set());\n  const [filterLevel, setFilterLevel] = useState('all');\n\n  const mockAuditData = {\n    calculations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 300000),\n        type: 'calculation',\n        operation: 'DCF Valuation',\n        formula: 'NPV(FCFF_2024:2028, WACC)',\n        result: 2547.5,\n        inputs: {\n          FCFF_2024: 187.5,\n          FCFF_2025: 206.3,\n          FCFF_2026: 226.9,\n          FCFF_2027: 249.6,\n          FCFF_2028: 274.6,\n          WACC: 0.098\n        },\n        executionTime: 0.045,\n        status: 'success'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 600000),\n        type: 'calculation',\n        operation: 'WACC Calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        result: 0.098,\n        inputs: {\n          cost_equity: 0.123,\n          cost_debt: 0.045,\n          tax_rate: 0.25,\n          debt_ratio: 0.4\n        },\n        executionTime: 0.012,\n        status: 'success'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 900000),\n        type: 'calculation',\n        operation: 'Terminal Value',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        result: 1247.3,\n        inputs: {\n          FCF_final: 274.6,\n          terminal_growth: 0.025,\n          WACC: 0.098\n        },\n        executionTime: 0.008,\n        status: 'success'\n      }\n    ],\n    errors: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 1200000),\n        type: 'error',\n        severity: 'high',\n        message: 'Division by zero in WACC calculation',\n        formula: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n        location: 'Cell B15',\n        suggestion: 'Ensure debt_ratio is not equal to 1.0',\n        resolved: true\n      }\n    ],\n    warnings: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 180000),\n        type: 'warning',\n        severity: 'medium',\n        message: 'Beta coefficient (1.15) is above industry average (0.95)',\n        formula: 'CAPM(risk_free, beta, market_premium)',\n        location: 'Assumptions',\n        suggestion: 'Consider reviewing beta calculation or using industry average',\n        acknowledged: false\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 420000),\n        type: 'warning',\n        severity: 'low',\n        message: 'Terminal growth rate (2.5%) close to discount rate component',\n        formula: 'TERMINAL_VALUE(FCF_final, terminal_growth, WACC)',\n        location: 'Terminal Value',\n        suggestion: 'Ensure terminal growth rate is reasonable for long-term GDP growth',\n        acknowledged: true\n      }\n    ],\n    validations: [\n      {\n        id: 1,\n        timestamp: new Date(Date.now() - 60000),\n        type: 'validation',\n        check: 'Circular Reference Check',\n        status: 'passed',\n        details: 'No circular references detected in model'\n      },\n      {\n        id: 2,\n        timestamp: new Date(Date.now() - 120000),\n        type: 'validation',\n        check: 'Balance Sheet Check',\n        status: 'passed',\n        details: 'Assets = Liabilities + Equity for all projection years'\n      },\n      {\n        id: 3,\n        timestamp: new Date(Date.now() - 240000),\n        type: 'validation',\n        check: 'Cash Flow Consistency',\n        status: 'warning',\n        details: 'Minor rounding differences in cash flow statements (<$0.1M)'\n      }\n    ]\n  };\n\n  const tabs = [\n    {\n      id: 'calculations',\n      label: 'Calculations',\n      icon: 'Calculator',\n      count: mockAuditData.calculations.length\n    },\n    { id: 'errors', label: 'Errors', icon: 'XCircle', count: mockAuditData.errors.length },\n    {\n      id: 'warnings',\n      label: 'Warnings',\n      icon: 'AlertTriangle',\n      count: mockAuditData.warnings.length\n    },\n    {\n      id: 'validations',\n      label: 'Validations',\n      icon: 'CheckCircle',\n      count: mockAuditData.validations.length\n    }\n  ];\n\n  const toggleExpanded = id => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'success':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      case 'error':\n        return { icon: 'XCircle', color: 'text-destructive' };\n      case 'warning':\n        return { icon: 'AlertTriangle', color: 'text-warning' };\n      case 'passed':\n        return { icon: 'CheckCircle', color: 'text-success' };\n      default:\n        return { icon: 'Info', color: 'text-muted-foreground' };\n    }\n  };\n\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'high':\n        return 'text-destructive bg-destructive/10';\n      case 'medium':\n        return 'text-warning bg-warning/10';\n      case 'low':\n        return 'text-muted-foreground bg-muted';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const formatExecutionTime = time => {\n    if (time < 0.001) return '<1ms';\n    if (time < 1) return `${(time * 1000).toFixed(0)}ms`;\n    return `${time.toFixed(2)}s`;\n  };\n\n  const renderCalculations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.calculations.map(calc => (\n        <div key={calc.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Icon name=\"Calculator\" size={16} className=\"text-primary\" />\n                <span className=\"font-medium text-foreground\">{calc.operation}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(calc.status).color} bg-current/10`}\n                >\n                  {calc.status}\n                </span>\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {calc.formula}\n              </code>\n              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                <span>{calc.timestamp.toLocaleTimeString()}</span>\n                <span>Execution: {formatExecutionTime(calc.executionTime)}</span>\n                <span>Result: ${calc.result.toFixed(2)}M</span>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName={expandedItems.has(calc.id) ? 'ChevronUp' : 'ChevronDown'}\n              onClick={() => toggleExpanded(calc.id)}\n            />\n          </div>\n\n          {expandedItems.has(calc.id) && (\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <h5 className=\"text-sm font-medium text-foreground mb-2\">Input Values</h5>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Object.entries(calc.inputs).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">{key}:</span>\n                    <span className=\"text-foreground font-mono\">\n                      {typeof value === 'number' ? value.toFixed(3) : value}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderErrors = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.errors.map(error => (\n        <div key={error.id} className=\"p-4 bg-background border border-destructive/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"XCircle\" size={16} className=\"text-destructive mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{error.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(error.severity)}`}\n                >\n                  {error.severity}\n                </span>\n                {error.resolved && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-success bg-success/10\">\n                    Resolved\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {error.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {error.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {error.suggestion}\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                {error.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderWarnings = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.warnings.map(warning => (\n        <div key={warning.id} className=\"p-4 bg-background border border-warning/20 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"AlertTriangle\" size={16} className=\"text-warning mt-0.5\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{warning.message}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(warning.severity)}`}\n                >\n                  {warning.severity}\n                </span>\n                {warning.acknowledged && (\n                  <span className=\"px-2 py-1 rounded-full text-xs text-muted-foreground bg-muted\">\n                    Acknowledged\n                  </span>\n                )}\n              </div>\n              <code className=\"text-sm bg-muted px-2 py-1 rounded font-mono text-foreground block mb-2\">\n                {warning.formula}\n              </code>\n              <div className=\"text-sm text-muted-foreground mb-2\">Location: {warning.location}</div>\n              <div className=\"text-sm text-foreground bg-muted/50 p-2 rounded\">\n                <strong>Suggestion:</strong> {warning.suggestion}\n              </div>\n              <div className=\"flex items-center justify-between mt-3\">\n                <div className=\"text-xs text-muted-foreground\">\n                  {warning.timestamp.toLocaleString()}\n                </div>\n                {!warning.acknowledged && (\n                  <Button variant=\"outline\" size=\"sm\">\n                    Acknowledge\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderValidations = () => (\n    <div className=\"space-y-3\">\n      {mockAuditData.validations.map(validation => (\n        <div key={validation.id} className=\"p-4 bg-background border border-border rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon\n              name={getStatusIcon(validation.status).icon}\n              size={16}\n              className={`${getStatusIcon(validation.status).color} mt-0.5`}\n            />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-foreground\">{validation.check}</span>\n                <span\n                  className={`px-2 py-1 rounded-full text-xs ${getStatusIcon(validation.status).color} bg-current/10`}\n                >\n                  {validation.status}\n                </span>\n              </div>\n              <div className=\"text-sm text-muted-foreground mb-2\">{validation.details}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {validation.timestamp.toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'calculations':\n        return renderCalculations();\n      case 'errors':\n        return renderErrors();\n      case 'warnings':\n        return renderWarnings();\n      case 'validations':\n        return renderValidations();\n      default:\n        return renderCalculations();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Audit Trail</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Download\">\n            Export Log\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"RefreshCw\">\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n            {tab.count > 0 && (\n              <span className=\"px-2 py-1 bg-current/20 rounded-full text-xs\">{tab.count}</span>\n            )}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Audit logging active</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuditTrail;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst CalculationResults = ({ results, onExport }) => {\n  const [activeTab, setActiveTab] = useState('summary');\n  const [expandedSections, setExpandedSections] = useState(new Set(['valuation']));\n\n  const mockResults = {\n    summary: {\n      enterpriseValue: 2847.5,\n      equityValue: 2547.5,\n      sharePrice: 127.38,\n      impliedReturn: 0.156,\n      confidence: 0.87\n    },\n    cashFlows: [\n      { year: 2024, revenue: 1250, ebitda: 312.5, fcf: 187.5, pv: 170.5 },\n      { year: 2025, revenue: 1375, ebitda: 343.8, fcf: 206.3, pv: 172.8 },\n      { year: 2026, revenue: 1513, ebitda: 378.2, fcf: 226.9, pv: 175.2 },\n      { year: 2027, revenue: 1664, ebitda: 416.0, fcf: 249.6, pv: 177.7 },\n      { year: 2028, revenue: 1830, ebitda: 457.6, fcf: 274.6, pv: 180.3 }\n    ],\n    sensitivity: {\n      wacc: [0.08, 0.09, 0.1, 0.11, 0.12],\n      growth: [0.015, 0.02, 0.025, 0.03, 0.035],\n      matrix: [\n        [145.2, 138.7, 132.8, 127.4, 122.5],\n        [152.1, 144.9, 138.2, 132.1, 126.4],\n        [159.8, 151.9, 144.6, 137.8, 131.6],\n        [168.4, 159.7, 151.8, 144.4, 137.6],\n        [178.1, 168.4, 159.7, 151.8, 144.4]\n      ]\n    },\n    scenarios: [\n      { name: 'Base Case', probability: 0.6, sharePrice: 127.38, irr: 0.156 },\n      { name: 'Bull Case', probability: 0.25, sharePrice: 145.67, irr: 0.189 },\n      { name: 'Bear Case', probability: 0.15, sharePrice: 98.42, irr: 0.087 }\n    ],\n    multiples: [\n      { metric: 'EV/Revenue', current: 2.3, peer_avg: 2.8, premium: -17.9 },\n      { metric: 'EV/EBITDA', current: 9.1, peer_avg: 11.2, premium: -18.8 },\n      { metric: 'P/E Ratio', current: 18.5, peer_avg: 22.1, premium: -16.3 },\n      { metric: 'P/B Ratio', current: 2.1, peer_avg: 2.6, premium: -19.2 }\n    ]\n  };\n\n  const tabs = [\n    { id: 'summary', label: 'Summary', icon: 'BarChart3' },\n    { id: 'cashflows', label: 'Cash Flows', icon: 'TrendingUp' },\n    { id: 'sensitivity', label: 'Sensitivity', icon: 'Target' },\n    { id: 'scenarios', label: 'Scenarios', icon: 'GitBranch' },\n    { id: 'multiples', label: 'Multiples', icon: 'Layers' }\n  ];\n\n  const toggleSection = section => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const formatCurrency = (value, decimals = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(value);\n  };\n\n  const formatPercent = (value, decimals = 1) => {\n    return `${(value * 100).toFixed(decimals)}%`;\n  };\n\n  const renderSummary = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Enterprise Value</span>\n            <Icon name=\"Building\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.enterpriseValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Equity Value</span>\n            <Icon name=\"PieChart\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.equityValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Share Price</span>\n            <Icon name=\"DollarSign\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.sharePrice)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Implied Return</span>\n            <Icon name=\"TrendingUp\" size={16} className=\"text-success\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-success\">\n              {formatPercent(mockResults.summary.impliedReturn)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Indicator */}\n      <div className=\"p-4 bg-background border border-border rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-sm font-medium text-foreground\">Model Confidence</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {formatPercent(mockResults.summary.confidence)}\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2\">\n          <div\n            className=\"bg-success h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${mockResults.summary.confidence * 100}%` }}\n          />\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Based on data quality, assumption validity, and sensitivity analysis\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderCashFlows = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Year</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Revenue</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">EBITDA</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">FCF</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Present Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.cashFlows.map((cf, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{cf.year}</td>\n                <td className=\"py-3 text-right text-foreground\">\n                  {formatCurrency(cf.revenue, 0)}M\n                </td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.ebitda, 1)}M</td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.fcf, 1)}M</td>\n                <td className=\"py-3 text-right text-success font-medium\">\n                  {formatCurrency(cf.pv, 1)}M\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-foreground\">Terminal Value</span>\n          <span className=\"text-lg font-bold text-foreground\">{formatCurrency(1247.3, 1)}M</span>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          2.5% perpetual growth rate applied to 2028 FCF\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderSensitivity = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h4 className=\"text-sm font-medium text-foreground mb-2\">\n          Share Price Sensitivity Analysis\n        </h4>\n        <p className=\"text-xs text-muted-foreground\">WACC vs Terminal Growth Rate</p>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-xs\">\n          <thead>\n            <tr>\n              <th className=\"p-2 text-left text-muted-foreground\">WACC \\ Growth</th>\n              {mockResults.sensitivity.growth.map((growth, index) => (\n                <th key={index} className=\"p-2 text-center text-muted-foreground\">\n                  {formatPercent(growth)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.sensitivity.wacc.map((wacc, rowIndex) => (\n              <tr key={rowIndex} className=\"border-t border-border/50\">\n                <td className=\"p-2 text-muted-foreground font-medium\">{formatPercent(wacc)}</td>\n                {mockResults.sensitivity.matrix[rowIndex].map((value, colIndex) => (\n                  <td\n                    key={colIndex}\n                    className={`p-2 text-center font-medium ${\n                      Math.abs(value - 127.38) < 5\n                        ? 'bg-primary/20 text-primary'\n                        : 'text-foreground'\n                    }`}\n                  >\n                    {formatCurrency(value)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderScenarios = () => (\n    <div className=\"space-y-4\">\n      {mockResults.scenarios.map((scenario, index) => (\n        <div key={index} className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-medium text-foreground\">{scenario.name}</span>\n              <span className=\"text-xs bg-background px-2 py-1 rounded text-muted-foreground\">\n                {formatPercent(scenario.probability)} probability\n              </span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-foreground\">\n                {formatCurrency(scenario.sharePrice)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{formatPercent(scenario.irr)} IRR</div>\n            </div>\n          </div>\n          <div className=\"w-full bg-background rounded-full h-1\">\n            <div\n              className=\"bg-primary h-1 rounded-full\"\n              style={{ width: `${scenario.probability * 100}%` }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderMultiples = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Multiple</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Current</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Peer Avg</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">\n                Premium/Discount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.multiples.map((multiple, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{multiple.metric}</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.current}x</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.peer_avg}x</td>\n                <td\n                  className={`py-3 text-right font-medium ${\n                    multiple.premium > 0 ? 'text-success' : 'text-destructive'\n                  }`}\n                >\n                  {multiple.premium > 0 ? '+' : ''}\n                  {multiple.premium.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'summary':\n        return renderSummary();\n      case 'cashflows':\n        return renderCashFlows();\n      case 'sensitivity':\n        return renderSensitivity();\n      case 'scenarios':\n        return renderScenarios();\n      case 'multiples':\n        return renderMultiples();\n      default:\n        return renderSummary();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Calculation Results</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Download\"\n            onClick={() => onExport && onExport('excel')}\n          >\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Share2\">\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last Updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Calculations current</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalculationResults;\n","import React, { useState, useRef } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FormulaBuilder = ({ onFormulaCreate, variables }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [draggedFunction, setDraggedFunction] = useState(null);\n  const [currentFormula, setCurrentFormula] = useState('');\n  const [formulaName, setFormulaName] = useState('');\n  const [isBuilding, setIsBuilding] = useState(false);\n  const dropZoneRef = useRef(null);\n\n  const functionCategories = {\n    valuation: {\n      name: 'Valuation',\n      icon: 'TrendingUp',\n      functions: [\n        {\n          name: 'DCF',\n          syntax: 'DCF(fcf_array, discount_rate, terminal_growth)',\n          description: 'Discounted Cash Flow valuation'\n        },\n        {\n          name: 'NPV',\n          syntax: 'NPV(cash_flows, discount_rate)',\n          description: 'Net Present Value calculation'\n        },\n        { name: 'IRR', syntax: 'IRR(cash_flows)', description: 'Internal Rate of Return' },\n        {\n          name: 'TERMINAL_VALUE',\n          syntax: 'TERMINAL_VALUE(final_fcf, growth_rate, discount_rate)',\n          description: 'Terminal value calculation'\n        },\n        {\n          name: 'WACC',\n          syntax: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n          description: 'Weighted Average Cost of Capital'\n        }\n      ]\n    },\n    financial: {\n      name: 'Financial Ratios',\n      icon: 'Calculator',\n      functions: [\n        {\n          name: 'ROE',\n          syntax: 'ROE(net_income, shareholders_equity)',\n          description: 'Return on Equity'\n        },\n        { name: 'ROA', syntax: 'ROA(net_income, total_assets)', description: 'Return on Assets' },\n        {\n          name: 'DEBT_TO_EQUITY',\n          syntax: 'DEBT_TO_EQUITY(total_debt, total_equity)',\n          description: 'Debt to Equity ratio'\n        },\n        {\n          name: 'CURRENT_RATIO',\n          syntax: 'CURRENT_RATIO(current_assets, current_liabilities)',\n          description: 'Current ratio calculation'\n        },\n        {\n          name: 'QUICK_RATIO',\n          syntax: 'QUICK_RATIO(quick_assets, current_liabilities)',\n          description: 'Quick ratio calculation'\n        }\n      ]\n    },\n    statistical: {\n      name: 'Statistical',\n      icon: 'BarChart3',\n      functions: [\n        {\n          name: 'CORRELATION',\n          syntax: 'CORRELATION(dataset1, dataset2)',\n          description: 'Correlation coefficient'\n        },\n        {\n          name: 'REGRESSION',\n          syntax: 'REGRESSION(dependent_var, independent_var)',\n          description: 'Linear regression analysis'\n        },\n        {\n          name: 'VOLATILITY',\n          syntax: 'VOLATILITY(returns, period)',\n          description: 'Historical volatility'\n        },\n        {\n          name: 'BETA',\n          syntax: 'BETA(stock_returns, market_returns)',\n          description: 'Beta coefficient calculation'\n        },\n        {\n          name: 'SHARPE_RATIO',\n          syntax: 'SHARPE_RATIO(returns, risk_free_rate)',\n          description: 'Risk-adjusted return metric'\n        }\n      ]\n    },\n    mathematical: {\n      name: 'Mathematical',\n      icon: 'Sigma',\n      functions: [\n        { name: 'SUM', syntax: 'SUM(range)', description: 'Sum of values' },\n        { name: 'AVERAGE', syntax: 'AVERAGE(range)', description: 'Average of values' },\n        { name: 'MEDIAN', syntax: 'MEDIAN(range)', description: 'Median value' },\n        { name: 'STDEV', syntax: 'STDEV(range)', description: 'Standard deviation' },\n        {\n          name: 'PERCENTILE',\n          syntax: 'PERCENTILE(range, percentile)',\n          description: 'Percentile calculation'\n        }\n      ]\n    }\n  };\n\n  const savedFormulas = [\n    {\n      name: 'Custom_DCF_Tech',\n      formula: 'DCF(FCFF_PROJECTIONS, WACC(0.12, 0.04, 0.25, 0.3), 0.025)',\n      category: 'Custom'\n    },\n    {\n      name: 'LBO_Returns',\n      formula: 'IRR([INITIAL_INVESTMENT * -1, EXIT_VALUE])',\n      category: 'Custom'\n    },\n    {\n      name: 'Comp_Multiple',\n      formula: 'AVERAGE(PEER_EV_REVENUE) * TARGET_REVENUE',\n      category: 'Custom'\n    }\n  ];\n\n  const handleDragStart = (e, func) => {\n    setDraggedFunction(func);\n    e.dataTransfer.effectAllowed = 'copy';\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    if (draggedFunction) {\n      const newFormula = currentFormula + (currentFormula ? ' + ' : '') + draggedFunction.syntax;\n      setCurrentFormula(newFormula);\n      setDraggedFunction(null);\n    }\n  };\n\n  const addFunction = func => {\n    const newFormula = currentFormula + (currentFormula ? ' + ' : '') + func.syntax;\n    setCurrentFormula(newFormula);\n  };\n\n  const clearFormula = () => {\n    setCurrentFormula('');\n    setFormulaName('');\n  };\n\n  const saveFormula = () => {\n    if (formulaName && currentFormula) {\n      if (onFormulaCreate) {\n        onFormulaCreate({\n          name: formulaName,\n          formula: currentFormula,\n          timestamp: new Date()\n        });\n      }\n      setFormulaName('');\n      setCurrentFormula('');\n      setIsBuilding(false);\n    }\n  };\n\n  const validateFormula = () => {\n    // Simple validation - check for balanced parentheses\n    const openParens = (currentFormula.match(/\\(/g) || []).length;\n    const closeParens = (currentFormula.match(/\\)/g) || []).length;\n    return openParens === closeParens;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Wrench\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Formula Builder</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={() => setIsBuilding(!isBuilding)}\n          >\n            New Formula\n          </Button>\n        </div>\n      </div>\n\n      {/* Function Categories */}\n      <div className=\"flex border-b border-border\">\n        {Object.entries(functionCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Function Library */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-3\">\n          {functionCategories[selectedCategory].functions.map((func, index) => (\n            <div\n              key={index}\n              draggable\n              onDragStart={e => handleDragStart(e, func)}\n              className=\"p-3 bg-muted rounded-lg border border-border cursor-move hover:bg-muted/80 transition-smooth group\"\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon\n                      name=\"Move\"\n                      size={14}\n                      className=\"text-muted-foreground group-hover:text-foreground\"\n                    />\n                    <span className=\"font-medium text-foreground\">{func.name}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{func.description}</p>\n                  <code className=\"text-xs bg-background px-2 py-1 rounded mt-2 block font-mono text-foreground\">\n                    {func.syntax}\n                  </code>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"Plus\"\n                  onClick={() => addFunction(func)}\n                  className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Saved Formulas */}\n        <div className=\"border-t border-border p-4\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n            <Icon name=\"BookOpen\" size={16} />\n            <span>Saved Formulas</span>\n          </h4>\n          <div className=\"space-y-2\">\n            {savedFormulas.map((formula, index) => (\n              <div\n                key={index}\n                className=\"p-3 bg-background rounded-lg border border-border hover:bg-muted/50 transition-smooth cursor-pointer\"\n                onClick={() => setCurrentFormula(formula.formula)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-foreground\">{formula.name}</span>\n                  <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n                    {formula.category}\n                  </span>\n                </div>\n                <code className=\"text-xs text-muted-foreground mt-1 block font-mono\">\n                  {formula.formula}\n                </code>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Formula Builder Panel */}\n      {isBuilding && (\n        <div className=\"border-t border-border bg-background\">\n          <div className=\"p-4 space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Formula Name</label>\n              <input\n                type=\"text\"\n                value={formulaName}\n                onChange={e => setFormulaName(e.target.value)}\n                placeholder=\"Enter formula name...\"\n                className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                Formula Expression\n              </label>\n              <div\n                ref={dropZoneRef}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n                className=\"min-h-[100px] p-3 bg-input border-2 border-dashed border-border rounded-lg focus-within:border-ring transition-colors\"\n              >\n                <textarea\n                  value={currentFormula}\n                  onChange={e => setCurrentFormula(e.target.value)}\n                  placeholder=\"Drag functions here or type formula manually...\"\n                  className=\"w-full h-20 bg-transparent text-foreground placeholder-muted-foreground resize-none outline-none font-mono text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between mt-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {validateFormula() ? (\n                    <div className=\"flex items-center space-x-1 text-success\">\n                      <Icon name=\"CheckCircle\" size={14} />\n                      <span className=\"text-xs\">Valid syntax</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-1 text-destructive\">\n                      <Icon name=\"XCircle\" size={14} />\n                      <span className=\"text-xs\">Invalid syntax</span>\n                    </div>\n                  )}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {currentFormula.length} characters\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\" size=\"sm\" iconName=\"Trash2\"\n                onClick={clearFormula}\n              >\n                Clear\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\" size=\"sm\" iconName=\"Eye\"\n                  disabled={!validateFormula()}\n                >\n                  Preview\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  iconName=\"Save\"\n                  onClick={saveFormula}\n                  disabled={!formulaName || !currentFormula || !validateFormula()}\n                >\n                  Save Formula\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormulaBuilder;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ModelTemplates = ({ onTemplateSelect, onTemplateCreate }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const templateCategories = {\n    valuation: {\n      name: 'Valuation Models',\n      icon: 'TrendingUp',\n      templates: [\n        {\n          id: 'dcf_standard',\n          name: 'DCF - Standard',\n          description:\n            'Traditional discounted cash flow model with 5-year projections and terminal value',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-10',\n          popularity: 95,\n          features: [\n            '5-year projections',\n            'Terminal value',\n            'Sensitivity analysis',\n            'WACC calculation'\n          ]\n        },\n        {\n          id: 'dcf_tech',\n          name: 'DCF - Technology',\n          description: 'Specialized DCF for high-growth technology companies with adjusted metrics',\n          complexity: 'Advanced',\n          timeToComplete: '60 min',\n          lastUsed: '2024-07-08',\n          popularity: 87,\n          features: ['SaaS metrics', 'User-based projections', 'Churn analysis', 'Rule of 40']\n        },\n        {\n          id: 'sum_of_parts',\n          name: 'Sum-of-the-Parts',\n          description: 'Multi-business valuation with segment-specific assumptions and multiples',\n          complexity: 'Advanced',\n          timeToComplete: '90 min',\n          lastUsed: '2024-07-05',\n          popularity: 73,\n          features: [\n            'Segment analysis',\n            'Multiple approaches',\n            'Holding company discount',\n            'Synergy modeling'\n          ]\n        }\n      ]\n    },\n    lbo: {\n      name: 'LBO Models',\n      icon: 'Layers',\n      templates: [\n        {\n          id: 'lbo_standard',\n          name: 'LBO - Standard',\n          description: 'Complete leveraged buyout model with debt sizing and returns analysis',\n          complexity: 'Advanced',\n          timeToComplete: '120 min',\n          lastUsed: '2024-07-09',\n          popularity: 91,\n          features: ['Debt capacity', 'Returns waterfall', 'Management rollover', 'Exit scenarios']\n        },\n        {\n          id: 'lbo_growth',\n          name: 'LBO - Growth Equity',\n          description: 'Growth-focused LBO with minority investment and expansion capital',\n          complexity: 'Advanced',\n          timeToComplete: '100 min',\n          lastUsed: '2024-07-06',\n          popularity: 68,\n          features: [\n            'Growth capital',\n            'Minority stake',\n            'Management incentives',\n            'Expansion modeling'\n          ]\n        }\n      ]\n    },\n    comps: {\n      name: 'Comparable Analysis',\n      icon: 'BarChart3',\n      templates: [\n        {\n          id: 'trading_comps',\n          name: 'Trading Comparables',\n          description: 'Public company multiple analysis with statistical benchmarking',\n          complexity: 'Beginner',\n          timeToComplete: '30 min',\n          lastUsed: '2024-07-11',\n          popularity: 98,\n          features: [\n            'Multiple analysis',\n            'Statistical metrics',\n            'Peer screening',\n            'Premium/discount analysis'\n          ]\n        },\n        {\n          id: 'transaction_comps',\n          name: 'Transaction Comparables',\n          description: 'M&A transaction analysis with control premiums and synergies',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-07',\n          popularity: 82,\n          features: [\n            'M&A multiples',\n            'Control premiums',\n            'Synergy analysis',\n            'Transaction screening'\n          ]\n        }\n      ]\n    },\n    merger: {\n      name: 'M&A Models',\n      icon: 'GitMerge',\n      templates: [\n        {\n          id: 'merger_model',\n          name: 'Merger Model',\n          description:\n            'Comprehensive merger analysis with accretion/dilution and pro forma statements',\n          complexity: 'Expert',\n          timeToComplete: '180 min',\n          lastUsed: '2024-07-04',\n          popularity: 76,\n          features: [\n            'Accretion/dilution',\n            'Pro forma statements',\n            'Synergy modeling',\n            'Financing structure'\n          ]\n        },\n        {\n          id: 'acquisition_model',\n          name: 'Acquisition Model',\n          description: 'Strategic acquisition analysis with integration costs and value creation',\n          complexity: 'Expert',\n          timeToComplete: '150 min',\n          lastUsed: '2024-07-03',\n          popularity: 71,\n          features: ['Integration costs', 'Value creation', 'Financing options', 'Risk analysis']\n        }\n      ]\n    }\n  };\n\n  const recentTemplates = [\n    { id: 'dcf_standard', name: 'DCF - Standard', lastUsed: '2024-07-11 14:30' },\n    { id: 'trading_comps', name: 'Trading Comparables', lastUsed: '2024-07-11 09:15' },\n    { id: 'lbo_standard', name: 'LBO - Standard', lastUsed: '2024-07-10 16:45' }\n  ];\n\n  const getComplexityColor = complexity => {\n    switch (complexity) {\n      case 'Beginner':\n        return 'text-success bg-success/10';\n      case 'Intermediate':\n        return 'text-warning bg-warning/10';\n      case 'Advanced':\n        return 'text-accent bg-accent/10';\n      case 'Expert':\n        return 'text-destructive bg-destructive/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const filteredTemplates = () => {\n    const templates = templateCategories[selectedCategory]?.templates || [];\n    if (!searchTerm) return templates;\n\n    return templates.filter(\n      template =>\n        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  };\n\n  const handleTemplateSelect = template => {\n    if (onTemplateSelect) {\n      onTemplateSelect(template);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileTemplate\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Model Templates</h3>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          iconName=\"Plus\"\n          onClick={() => setShowCreateModal(true)}\n        >\n          Create Template\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search templates...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Categories */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {Object.entries(templateCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {/* Recent Templates */}\n        {!searchTerm && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n              <Icon name=\"Clock\" size={16} />\n              <span>Recently Used</span>\n            </h4>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {recentTemplates.map(template => (\n                <div\n                  key={template.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-smooth cursor-pointer\"\n                  onClick={() => handleTemplateSelect(template)}\n                >\n                  <div>\n                    <span className=\"font-medium text-foreground\">{template.name}</span>\n                    <p className=\"text-xs text-muted-foreground\">Last used: {template.lastUsed}</p>\n                  </div>\n                  <Icon name=\"ChevronRight\" size={16} className=\"text-muted-foreground\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Template Cards */}\n        <div className=\"space-y-4\">\n          {filteredTemplates().map(template => (\n            <div\n              key={template.id}\n              className=\"p-4 bg-background border border-border rounded-lg hover:border-primary/50 transition-smooth cursor-pointer group\"\n              onClick={() => handleTemplateSelect(template)}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h5 className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">\n                      {template.name}\n                    </h5>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(template.complexity)}`}\n                    >\n                      {template.complexity}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                    <Icon name=\"Star\" size={12} />\n                    <span>{template.popularity}%</span>\n                  </div>\n                  <Icon\n                    name=\"ChevronRight\"\n                    size={16}\n                    className=\"text-muted-foreground group-hover:text-primary transition-colors\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Clock\" size={12} />\n                    <span>{template.timeToComplete}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Calendar\" size={12} />\n                    <span>Last used: {template.lastUsed}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2\">\n                {template.features.map((feature, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-muted text-xs text-muted-foreground rounded\"\n                  >\n                    {feature}\n                  </span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTemplates().length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"FileX\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No templates found</h4>\n            <p className=\"text-muted-foreground\">\n              {searchTerm\n                ? 'Try adjusting your search terms'\n                : 'No templates available in this category'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Create Template Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg shadow-elevation-2 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between p-4 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Create New Template</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"X\"\n                onClick={() => setShowCreateModal(false)}\n              />\n            </div>\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Template Name\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter template name...\"\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Description\n                </label>\n                <textarea\n                  placeholder=\"Describe your template...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">Category</label>\n                <select className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-ring\">\n                  <option value=\"valuation\">Valuation Models</option>\n                  <option value=\"lbo\">LBO Models</option>\n                  <option value=\"comps\">Comparable Analysis</option>\n                  <option value=\"merger\">M&A Models</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowCreateModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  if (onTemplateCreate) onTemplateCreate();\n                }}\n              >\n                Create Template\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTemplates;\n","/**\n * Command Registry for FinanceAnalyst Pro Terminal\n * Manages all available commands with categorization and metadata\n */\n\nexport class CommandRegistry {\n  constructor() {\n    this.commands = new Map();\n    this.categories = new Map();\n    this.aliases = new Map();\n    this.initializeCategories();\n  }\n\n  /**\n   * Initialize command categories\n   */\n  initializeCategories() {\n    this.categories.set('CORE', {\n      name: 'Core Analysis',\n      description: 'Fundamental financial analysis commands',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('PORTFOLIO', {\n      name: 'Portfolio & Risk',\n      description: 'Portfolio analysis and risk management',\n      icon: '🎯',\n      commands: []\n    });\n\n    this.categories.set('VALUATION', {\n      name: 'Advanced Valuation',\n      description: 'Sophisticated valuation models',\n      icon: '📈',\n      commands: []\n    });\n\n    this.categories.set('TECHNICAL', {\n      name: 'Technical Analysis',\n      description: 'Technical analysis and market intelligence',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('FIXED_INCOME', {\n      name: 'Fixed Income & Derivatives',\n      description: 'Bond analysis and derivatives pricing',\n      icon: '🏦',\n      commands: []\n    });\n\n    this.categories.set('ESG', {\n      name: 'ESG & Alternative Data',\n      description: 'Environmental, social, governance metrics',\n      icon: '🌱',\n      commands: []\n    });\n\n    this.categories.set('AUTOMATION', {\n      name: 'Automation & Workflows',\n      description: 'Automated analysis and workflows',\n      icon: '🤖',\n      commands: []\n    });\n\n    this.categories.set('DATA', {\n      name: 'Data Management',\n      description: 'Data import, export, and management',\n      icon: '💾',\n      commands: []\n    });\n\n    this.categories.set('REPORTING', {\n      name: 'Reporting & Visualization',\n      description: 'Reports, charts, and visualizations',\n      icon: '📋',\n      commands: []\n    });\n\n    this.categories.set('SYSTEM', {\n      name: 'System & Performance',\n      description: 'System monitoring and configuration',\n      icon: '🔧',\n      commands: []\n    });\n\n    this.categories.set('ANALYTICS', {\n      name: 'Advanced Analytics',\n      description: 'Machine learning and advanced analytics',\n      icon: '💡',\n      commands: []\n    });\n\n    this.categories.set('MARKET_DATA', {\n      name: 'Market Data Extensions',\n      description: 'Extended market data and economic indicators',\n      icon: '🌐',\n      commands: []\n    });\n\n    this.categories.set('UTILITY', {\n      name: 'Utility Commands',\n      description: 'General utility and helper commands',\n      icon: '🛠️',\n      commands: []\n    });\n  }\n\n  /**\n   * Register a command\n   * @param {string} name - Command name\n   * @param {Object} handler - Command handler\n   * @param {Object} metadata - Command metadata\n   */\n  register(name, handler, metadata = {}) {\n    const commandName = name.toUpperCase();\n\n    const commandInfo = {\n      name: commandName,\n      handler,\n      category: metadata.category || 'UTILITY',\n      description: metadata.description || 'No description available',\n      usage: metadata.usage || `${commandName}()`,\n      examples: metadata.examples || [],\n      parameterSchema: metadata.parameterSchema || null,\n      aliases: metadata.aliases || [],\n      tags: metadata.tags || [],\n      version: metadata.version || '1.0.0',\n      deprecated: metadata.deprecated || false,\n      experimental: metadata.experimental || false\n    };\n\n    // Register main command\n    this.commands.set(commandName, commandInfo);\n\n    // Register aliases\n    if (metadata.aliases) {\n      metadata.aliases.forEach(alias => {\n        this.aliases.set(alias.toUpperCase(), commandName);\n      });\n    }\n\n    // Add to category\n    const category = this.categories.get(commandInfo.category);\n    if (category) {\n      category.commands.push(commandName);\n    }\n\n    return this;\n  }\n\n  /**\n   * Get command handler\n   * @param {string} name - Command name or alias\n   * @returns {Object|null} Command handler\n   */\n  getHandler(name) {\n    const commandName = name.toUpperCase();\n\n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command.handler;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      const aliasCommand = this.commands.get(aliasTarget);\n      return aliasCommand ? aliasCommand.handler : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get command info\n   * @param {string} name - Command name\n   * @returns {Object|null} Command information\n   */\n  getCommandInfo(name) {\n    const commandName = name.toUpperCase();\n\n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      return this.commands.get(aliasTarget);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all commands in a category\n   * @param {string} category - Category name\n   * @returns {Array} Commands in category\n   */\n  getCommandsByCategory(category) {\n    const categoryInfo = this.categories.get(category.toUpperCase());\n    if (!categoryInfo) return [];\n\n    return categoryInfo.commands.map(cmdName => this.commands.get(cmdName));\n  }\n\n  /**\n   * Get all command names\n   * @returns {Array} All command names\n   */\n  getAllCommands() {\n    return Array.from(this.commands.keys());\n  }\n\n  /**\n   * Get all categories\n   * @returns {Array} All categories\n   */\n  getAllCategories() {\n    return Array.from(this.categories.entries()).map(([key, value]) => ({\n      key,\n      ...value\n    }));\n  }\n\n  /**\n   * Search commands\n   * @param {string} query - Search query\n   * @returns {Array} Matching commands\n   */\n  searchCommands(query) {\n    const searchTerm = query.toLowerCase();\n    const results = [];\n\n    for (const [name, command] of this.commands) {\n      const score = this.calculateSearchScore(command, searchTerm);\n      if (score > 0) {\n        results.push({ ...command, score });\n      }\n    }\n\n    return results.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Calculate search relevance score\n   * @param {Object} command - Command object\n   * @param {string} searchTerm - Search term\n   * @returns {number} Relevance score\n   */\n  calculateSearchScore(command, searchTerm) {\n    let score = 0;\n\n    // Exact name match\n    if (command.name.toLowerCase() === searchTerm) {\n      score += 100;\n    }\n\n    // Name contains search term\n    if (command.name.toLowerCase().includes(searchTerm)) {\n      score += 50;\n    }\n\n    // Description contains search term\n    if (command.description.toLowerCase().includes(searchTerm)) {\n      score += 25;\n    }\n\n    // Tags contain search term\n    if (command.tags.some(tag => tag.toLowerCase().includes(searchTerm))) {\n      score += 15;\n    }\n\n    // Aliases contain search term\n    if (command.aliases.some(alias => alias.toLowerCase().includes(searchTerm))) {\n      score += 10;\n    }\n\n    return score;\n  }\n\n  /**\n   * Get command suggestions based on partial input\n   * @param {string} partial - Partial command input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(partial) {\n    const partialLower = partial.toLowerCase();\n    const suggestions = [];\n\n    for (const [name, command] of this.commands) {\n      if (name.toLowerCase().startsWith(partialLower)) {\n        suggestions.push({\n          name: command.name,\n          description: command.description,\n          usage: command.usage,\n          category: command.category\n        });\n      }\n    }\n\n    return suggestions.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  /**\n   * Validate command exists\n   * @param {string} name - Command name\n   * @returns {boolean} Whether command exists\n   */\n  hasCommand(name) {\n    const commandName = name.toUpperCase();\n    return this.commands.has(commandName) || this.aliases.has(commandName);\n  }\n\n  /**\n   * Get command count by category\n   * @returns {Object} Command counts by category\n   */\n  getCommandStats() {\n    const stats = {};\n\n    for (const [categoryKey, category] of this.categories) {\n      stats[categoryKey] = {\n        name: category.name,\n        count: category.commands.length,\n        icon: category.icon\n      };\n    }\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const commandRegistry = new CommandRegistry();\n","// @ts-check\n/**\n * Data Migration Service\n * Handles data migrations between different versions and storage formats\n */\n\nexport class DataMigrationService {\n  constructor() {\n    this.currentVersion = '1.0.0';\n    this.migrationKey = 'financeanalyst_migration_version';\n    this.backupKey = 'financeanalyst_migration_backup';\n\n    // Define migration paths\n    this.migrations = {\n      '0.0.0': {\n        to: '1.0.0',\n        description: 'Initial migration to structured persistence layer',\n        migrate: this.migrateToV1_0_0.bind(this)\n      }\n      // Future migrations will be added here\n    };\n  }\n\n  /**\n   * Check if migration is needed and perform it\n   */\n  async checkAndMigrate() {\n    try {\n      const currentStoredVersion = localStorage.getItem(this.migrationKey);\n\n      if (!currentStoredVersion) {\n        // First time setup - check for legacy data\n        await this.performInitialMigration();\n      } else if (currentStoredVersion !== this.currentVersion) {\n        // Version mismatch - perform migration\n        await this.performVersionMigration(currentStoredVersion, this.currentVersion);\n      }\n\n      // Update stored version\n      localStorage.setItem(this.migrationKey, this.currentVersion);\n\n      console.warn(`✅ Data migration complete - version ${this.currentVersion}`);\n      return { success: true, version: this.currentVersion };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('❌ Data migration failed:', message);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Perform initial migration from legacy data\n   */\n  async performInitialMigration() {\n    console.warn('🔄 Performing initial data migration...');\n\n    try {\n      // Check for legacy data patterns\n      const legacyData = await this.detectLegacyData();\n\n      if (Object.keys(legacyData).length > 0) {\n        // Create backup before migration\n        await this.createMigrationBackup(legacyData);\n\n        // Migrate legacy data to new format\n        await this.migrateToV1_0_0(legacyData);\n\n        console.warn('✅ Legacy data migrated successfully');\n      } else {\n        console.warn('ℹ️ No legacy data found - clean installation');\n      }\n\n    } catch (error) {\n      console.error('Failed to perform initial migration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform version-to-version migration\n   */\n  async performVersionMigration(fromVersion, toVersion) {\n    console.warn(`🔄 Migrating data from ${fromVersion} to ${toVersion}...`);\n\n    try {\n      // Find migration path\n      const migrationPath = this.findMigrationPath(fromVersion, toVersion);\n\n      if (!migrationPath.length) {\n        throw new Error(`No migration path found from ${fromVersion} to ${toVersion}`);\n      }\n\n      // Create backup before migration\n      const currentData = await this.exportCurrentData();\n      await this.createMigrationBackup(currentData, fromVersion);\n\n      // Execute migrations in sequence\n      for (const migration of migrationPath) {\n        console.warn(`🔄 Applying migration: ${migration.description}`);\n        await migration.migrate();\n      }\n\n      console.warn('✅ Version migration completed successfully');\n\n    } catch (error) {\n      console.error('Failed to perform version migration:', error);\n\n      // Attempt to restore from backup\n      await this.restoreFromBackup();\n      throw error;\n    }\n  }\n\n  /**\n   * Detect legacy data in localStorage\n   */\n  async detectLegacyData() {\n    const legacyData = {};\n\n    try {\n      // Check for old command processor data\n      const oldVariables = localStorage.getItem('commandProcessor_variables');\n      if (oldVariables) {\n        legacyData.variables = JSON.parse(oldVariables);\n      }\n\n      // Check for old settings\n      const oldSettings = localStorage.getItem('commandProcessor_settings');\n      if (oldSettings) {\n        legacyData.settings = JSON.parse(oldSettings);\n      }\n\n      // Check for old watchlists (if stored differently)\n      const oldWatchlists = localStorage.getItem('watchlists');\n      if (oldWatchlists) {\n        legacyData.watchlists = JSON.parse(oldWatchlists);\n      }\n\n      // Check for old alerts\n      const oldAlerts = localStorage.getItem('alerts');\n      if (oldAlerts) {\n        legacyData.alerts = JSON.parse(oldAlerts);\n      }\n\n      // Check for any other financeanalyst_ prefixed items\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('financeanalyst_') &&\n            !key.includes('migration') &&\n            !key.includes('session') &&\n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          try {\n            legacyData[key] = JSON.parse(localStorage.getItem(key));\n          } catch {\n            legacyData[key] = localStorage.getItem(key);\n          }\n        }\n      });\n\n      return legacyData;\n\n    } catch (error) {\n      console.error('Failed to detect legacy data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Migration to version 1.0.0\n   */\n  async migrateToV1_0_0(legacyData = null) {\n    try {\n      const dataToMigrate = legacyData || await this.detectLegacyData();\n\n      // Migrate watchlists to new format\n      if (dataToMigrate.watchlists) {\n        const migratedWatchlists = this.migrateWatchlistsFormat(dataToMigrate.watchlists);\n        localStorage.setItem('financeanalyst_watchlists', JSON.stringify(migratedWatchlists));\n      }\n\n      // Migrate alerts to new format\n      if (dataToMigrate.alerts) {\n        const migratedAlerts = this.migrateAlertsFormat(dataToMigrate.alerts);\n        localStorage.setItem('financeanalyst_alerts', JSON.stringify(migratedAlerts));\n      }\n\n      // Migrate user preferences\n      if (dataToMigrate.settings) {\n        const migratedPreferences = this.migratePreferencesFormat(dataToMigrate.settings);\n        localStorage.setItem('financeanalyst_preferences', JSON.stringify(migratedPreferences));\n      }\n\n      // Migrate variables to new storage\n      if (dataToMigrate.variables) {\n        const migratedVariables = this.migrateVariablesFormat(dataToMigrate.variables);\n        localStorage.setItem('financeanalyst_user_variables', JSON.stringify(migratedVariables));\n      }\n\n      // Clean up old data\n      await this.cleanupLegacyData(dataToMigrate);\n\n      console.warn('✅ Migration to v1.0.0 completed');\n\n    } catch (error) {\n      console.error('Failed to migrate to v1.0.0:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Migrate watchlists to new format\n   */\n  migrateWatchlistsFormat(oldWatchlists) {\n    const migrated = {};\n\n    if (Array.isArray(oldWatchlists)) {\n      // Old format was array, convert to object\n      oldWatchlists.forEach((watchlist, index) => {\n        const name = watchlist.name || `Watchlist ${index + 1}`;\n        migrated[name] = {\n          tickers: watchlist.tickers || watchlist.stocks || [],\n          created: watchlist.created || new Date().toISOString().split('T')[0],\n          lastUpdated: watchlist.lastUpdated || null\n        };\n      });\n    } else if (typeof oldWatchlists === 'object') {\n      // Already in object format, just ensure structure\n      Object.entries(oldWatchlists).forEach(([name, data]) => {\n        migrated[name] = {\n          tickers: data.tickers || data.stocks || [],\n          created: data.created || new Date().toISOString().split('T')[0],\n          lastUpdated: data.lastUpdated || null\n        };\n      });\n    }\n\n    return migrated;\n  }\n\n  /**\n   * Migrate alerts to new format\n   */\n  migrateAlertsFormat(oldAlerts) {\n    if (!Array.isArray(oldAlerts)) {\n      return [];\n    }\n\n    return oldAlerts.map(alert => ({\n      id: alert.id || Date.now() + Math.random(),\n      ticker: alert.ticker,\n      condition: alert.condition,\n      value: alert.value,\n      created: alert.created || new Date().toISOString().split('T')[0],\n      triggered: alert.triggered || false\n    }));\n  }\n\n  /**\n   * Migrate preferences to new format\n   */\n  migratePreferencesFormat(oldSettings) {\n    return {\n      currency: oldSettings.currency || 'USD',\n      precision: oldSettings.precision || 2,\n      dateFormat: oldSettings.dateFormat || 'YYYY-MM-DD',\n      theme: oldSettings.theme || 'dark',\n      notifications: oldSettings.notifications !== false,\n      autoSave: oldSettings.autoSave !== false,\n      commandHistory: oldSettings.commandHistory !== false,\n      dataRetention: oldSettings.dataRetention || 30,\n      privacy: {\n        analytics: oldSettings.analytics || false,\n        crashReporting: oldSettings.crashReporting !== false,\n        dataSharing: oldSettings.dataSharing || false\n      }\n    };\n  }\n\n  /**\n   * Migrate variables to new format\n   */\n  migrateVariablesFormat(oldVariables) {\n    // Variables format should remain mostly the same\n    return { ...oldVariables };\n  }\n\n  /**\n   * Clean up legacy data after migration\n   */\n  async cleanupLegacyData(legacyData) {\n    try {\n      // Remove old localStorage keys\n      const keysToRemove = [\n        'commandProcessor_variables',\n        'commandProcessor_settings',\n        'watchlists',\n        'alerts'\n      ];\n\n      keysToRemove.forEach(key => {\n        if (localStorage.getItem(key)) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      // Remove other legacy keys found in detection\n      Object.keys(legacyData).forEach(key => {\n        if (key.startsWith('financeanalyst_') &&\n            !key.includes('migration') &&\n            !key.includes('session') &&\n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      console.warn('✅ Legacy data cleanup completed');\n\n    } catch (error) {\n      console.error('Failed to cleanup legacy data:', error);\n      // Don't throw - cleanup failure shouldn't break migration\n    }\n  }\n\n  /**\n   * Create backup before migration\n   */\n  async createMigrationBackup(data, version = 'legacy') {\n    try {\n      const backup = {\n        version,\n        timestamp: new Date().toISOString(),\n        data\n      };\n\n      localStorage.setItem(this.backupKey, JSON.stringify(backup));\n      console.warn(`✅ Migration backup created for version ${version}`);\n\n    } catch (error) {\n      console.error('Failed to create migration backup:', error);\n      // Don't throw - backup failure shouldn't prevent migration\n    }\n  }\n\n  /**\n   * Restore from migration backup\n   */\n  async restoreFromBackup() {\n    try {\n      const backupData = localStorage.getItem(this.backupKey);\n      if (!backupData) {\n        throw new Error('No migration backup found');\n      }\n\n      const backup = JSON.parse(backupData);\n\n      // Restore data based on backup version\n      if (backup.version === 'legacy') {\n        // Restore legacy format\n        Object.entries(backup.data).forEach(([key, value]) => {\n          localStorage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\n        });\n      }\n\n      console.warn('✅ Data restored from migration backup');\n      return true;\n\n    } catch (error) {\n      console.error('Failed to restore from backup:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Export current data for backup\n   */\n  async exportCurrentData() {\n    const data = {};\n\n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('financeanalyst_')) {\n        try {\n          data[key] = JSON.parse(localStorage.getItem(key));\n        } catch {\n          data[key] = localStorage.getItem(key);\n        }\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Find migration path between versions\n   */\n  findMigrationPath(fromVersion, toVersion) {\n    // For now, simple direct migration\n    // In the future, this could handle complex migration chains\n    const migration = this.migrations[fromVersion];\n\n    if (migration && migration.to === toVersion) {\n      return [migration];\n    }\n\n    return [];\n  }\n\n  /**\n   * Get migration status\n   */\n  getMigrationStatus() {\n    const storedVersion = localStorage.getItem(this.migrationKey);\n    const hasBackup = !!localStorage.getItem(this.backupKey);\n\n    return {\n      currentVersion: this.currentVersion,\n      storedVersion,\n      needsMigration: storedVersion !== this.currentVersion,\n      hasBackup,\n      availableMigrations: Object.keys(this.migrations)\n    };\n  }\n\n  /**\n   * Clear migration backup\n   */\n  clearBackup() {\n    localStorage.removeItem(this.backupKey);\n    console.warn('✅ Migration backup cleared');\n  }\n}\n","/**\n * Compression Utils\n * Provides data compression utilities for efficient storage\n */\n\nexport class CompressionUtils {\n  constructor() {\n    this.compressionFormat = 'gzip';\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n  }\n\n  /**\n   * Compress data using browser's native compression\n   */\n  async compress(data) {\n    try {\n      // Check if CompressionStream is available (modern browsers)\n      if ('CompressionStream' in window) {\n        return await this.compressWithStream(data);\n      } else {\n        // Fallback to LZ-string compression\n        return await this.compressWithLZString(data);\n      }\n    } catch (error) {\n      console.error('Compression failed:', error);\n      // Return original data if compression fails\n      return data;\n    }\n  }\n\n  /**\n   * Decompress data\n   */\n  async decompress(compressedData) {\n    try {\n      // Try native decompression first\n      if ('DecompressionStream' in window && this.isNativeCompressed(compressedData)) {\n        return await this.decompressWithStream(compressedData);\n      } else {\n        // Try LZ-string decompression\n        return await this.decompressWithLZString(compressedData);\n      }\n    } catch (error) {\n      console.error('Decompression failed:', error);\n      // Return original data if decompression fails\n      return compressedData;\n    }\n  }\n\n  /**\n   * Compress using native CompressionStream\n   */\n  async compressWithStream(data) {\n    const stream = new CompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write data to compression stream\n    const dataBuffer = this.textEncoder.encode(data);\n    writer.write(dataBuffer);\n    writer.close();\n\n    // Read compressed data\n    const chunks = [];\n    let done = false;\n\n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to base64\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    // Add marker to identify native compression\n    return 'NATIVE_GZIP:' + this.arrayBufferToBase64(combined.buffer);\n  }\n\n  /**\n   * Decompress using native DecompressionStream\n   */\n  async decompressWithStream(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('NATIVE_GZIP:', '');\n    const compressedBuffer = this.base64ToArrayBuffer(data);\n\n    const stream = new DecompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write compressed data to decompression stream\n    writer.write(new Uint8Array(compressedBuffer));\n    writer.close();\n\n    // Read decompressed data\n    const chunks = [];\n    let done = false;\n\n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to string\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return this.textDecoder.decode(combined);\n  }\n\n  /**\n   * Compress using LZ-string algorithm (fallback)\n   */\n  async compressWithLZString(data) {\n    // Simple LZ77-style compression implementation\n    const dictionary = new Map();\n    const result = [];\n    let dictSize = 256;\n\n    // Initialize dictionary with single characters\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(String.fromCharCode(i), i);\n    }\n\n    let current = '';\n    for (let i = 0; i < data.length; i++) {\n      const char = data[i];\n      const combined = current + char;\n\n      if (dictionary.has(combined)) {\n        current = combined;\n      } else {\n        result.push(dictionary.get(current));\n        dictionary.set(combined, dictSize++);\n        current = char;\n      }\n    }\n\n    if (current) {\n      result.push(dictionary.get(current));\n    }\n\n    // Convert to base64\n    const compressed = new Uint16Array(result);\n    return 'LZ_STRING:' + this.arrayBufferToBase64(compressed.buffer);\n  }\n\n  /**\n   * Decompress LZ-string compressed data\n   */\n  async decompressWithLZString(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('LZ_STRING:', '');\n    const buffer = this.base64ToArrayBuffer(data);\n    const compressed = new Uint16Array(buffer);\n\n    const dictionary = new Map();\n    let dictSize = 256;\n\n    // Initialize dictionary\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(i, String.fromCharCode(i));\n    }\n\n    let result = '';\n    let previous = String.fromCharCode(compressed[0]);\n    result += previous;\n\n    for (let i = 1; i < compressed.length; i++) {\n      const code = compressed[i];\n      let current;\n\n      if (dictionary.has(code)) {\n        current = dictionary.get(code);\n      } else if (code === dictSize) {\n        current = previous + previous[0];\n      } else {\n        throw new Error('Invalid compressed data');\n      }\n\n      result += current;\n      dictionary.set(dictSize++, previous + current[0]);\n      previous = current;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if data is compressed with native compression\n   */\n  isNativeCompressed(data) {\n    return typeof data === 'string' && data.startsWith('NATIVE_GZIP:');\n  }\n\n  /**\n   * Check if data is compressed with LZ-string\n   */\n  isLZStringCompressed(data) {\n    return typeof data === 'string' && data.startsWith('LZ_STRING:');\n  }\n\n  /**\n   * Check if data appears to be compressed\n   */\n  isCompressed(data) {\n    return this.isNativeCompressed(data) || this.isLZStringCompressed(data);\n  }\n\n  /**\n   * Get compression ratio\n   */\n  getCompressionRatio(originalData, compressedData) {\n    const originalSize = new Blob([originalData]).size;\n    const compressedSize = new Blob([compressedData]).size;\n    return compressedSize / originalSize;\n  }\n\n  /**\n   * Estimate compression benefit\n   */\n  async estimateCompressionBenefit(data) {\n    try {\n      const originalSize = new Blob([data]).size;\n      const compressed = await this.compress(data);\n      const compressedSize = new Blob([compressed]).size;\n\n      return {\n        originalSize,\n        compressedSize,\n        ratio: compressedSize / originalSize,\n        savings: originalSize - compressedSize,\n        savingsPercentage: ((originalSize - compressedSize) / originalSize) * 100,\n        worthCompressing: compressedSize < originalSize * 0.9 // 10% savings threshold\n      };\n    } catch (error) {\n      return {\n        originalSize: new Blob([data]).size,\n        compressedSize: new Blob([data]).size,\n        ratio: 1,\n        savings: 0,\n        savingsPercentage: 0,\n        worthCompressing: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if compression is available\n   */\n  isAvailable() {\n    return 'CompressionStream' in window || true; // LZ-string fallback always available\n  }\n\n  /**\n   * Get compression info\n   */\n  getInfo() {\n    return {\n      nativeCompressionAvailable: 'CompressionStream' in window,\n      fallbackAvailable: true,\n      defaultFormat: this.compressionFormat,\n      available: this.isAvailable()\n    };\n  }\n\n  /**\n   * Test compression performance\n   */\n  async performanceTest() {\n    const testData = JSON.stringify({\n      test: 'compression performance',\n      data: new Array(1000).fill('This is test data for compression performance testing. '.repeat(10)),\n      numbers: new Array(100).fill(0).map((_, i) => i),\n      timestamp: Date.now()\n    });\n\n    const iterations = 20;\n\n    try {\n      // Test compression performance\n      const compressStart = performance.now();\n      let compressed;\n      for (let i = 0; i < iterations; i++) {\n        compressed = await this.compress(testData);\n      }\n      const compressTime = performance.now() - compressStart;\n\n      // Test decompression performance\n      const decompressStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decompress(compressed);\n      }\n      const decompressTime = performance.now() - decompressStart;\n\n      const compressionRatio = this.getCompressionRatio(testData, compressed);\n\n      return {\n        compressTime: compressTime / iterations,\n        decompressTime: decompressTime / iterations,\n        totalTime: compressTime + decompressTime,\n        originalSize: testData.length,\n        compressedSize: compressed.length,\n        compressionRatio,\n        savingsPercentage: (1 - compressionRatio) * 100,\n        iterations,\n        method: this.isNativeCompressed(compressed) ? 'native' : 'lz-string'\n      };\n\n    } catch (error) {\n      console.error('Compression performance test failed:', error);\n      return null;\n    }\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n}\n","/**\n * IndexedDB Service\n * Manages IndexedDB operations for complex data storage with versioning and transactions\n */\n// @ts-check\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class IndexedDBService {\n  constructor() {\n    this.dbName = 'FinanceAnalystPro';\n    this.dbVersion = 1;\n    this.db = null;\n    this.isAvailable = false;\n    this.compressionUtils = new CompressionUtils();\n\n    // Define object stores\n    this.stores = {\n      watchlists: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name', unique: true },\n          { name: 'created', keyPath: 'created' },\n          { name: 'lastUpdated', keyPath: 'lastUpdated' }\n        ]\n      },\n      analysis_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'analysisType', keyPath: 'analysisType' },\n          { name: 'timestamp', keyPath: 'timestamp' }\n        ]\n      },\n      command_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'command', keyPath: 'command' },\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'success', keyPath: 'success' }\n        ]\n      },\n      alerts: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'condition', keyPath: 'condition' },\n          { name: 'created', keyPath: 'created' },\n          { name: 'triggered', keyPath: 'triggered' }\n        ]\n      },\n      cached_data: {\n        keyPath: 'key',\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'expiry', keyPath: 'expiry' },\n          { name: 'dataType', keyPath: 'dataType' }\n        ]\n      },\n      user_models: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name' },\n          { name: 'type', keyPath: 'type' },\n          { name: 'created', keyPath: 'created' }\n        ]\n      },\n      export_data: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'type', keyPath: 'type' }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Initialize IndexedDB service\n   */\n  async initialize() {\n    if (!window.indexedDB) {\n      console.warn('⚠️ IndexedDB not available');\n      this.isAvailable = false;\n      return { success: false, available: false };\n    }\n\n    try {\n      this.db = await this.openDatabase();\n      this.isAvailable = true;\n      console.warn('✅ IndexedDB service initialized');\n\n      // Cleanup expired data\n      await this.cleanupExpiredData();\n\n      return { success: true, available: true, version: this.dbVersion };\n    } catch (error) {\n      console.error('❌ Failed to initialize IndexedDB:', error);\n      this.isAvailable = false;\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, available: false, error: message };\n    }\n  }\n\n  /**\n   * Open IndexedDB database\n   */\n  async openDatabase() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => {\n        reject(new Error(`Failed to open database: ${request.error}`));\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const target = /** @type {IDBOpenDBRequest} */ (event.target);\n        const db = target.result;\n        this.createObjectStores(db);\n      };\n    });\n  }\n\n  /**\n   * Create object stores during database upgrade\n   */\n  createObjectStores(db) {\n    // Remove existing stores if they exist\n    for (const storeName of Object.keys(this.stores)) {\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n    }\n\n    // Create new stores\n    for (const [storeName, config] of Object.entries(this.stores)) {\n      const store = db.createObjectStore(storeName, {\n        keyPath: config.keyPath,\n        autoIncrement: config.autoIncrement\n      });\n\n      // Create indexes\n      if (config.indexes) {\n        config.indexes.forEach(index => {\n          store.createIndex(index.name, index.keyPath, { unique: index.unique || false });\n        });\n      }\n    }\n\n    console.warn('✅ IndexedDB object stores created');\n  }\n\n  /**\n   * Store data in IndexedDB\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const {\n      storeName = 'cached_data',\n      metadata = {},\n      compress = false\n    } = options;\n\n    try {\n      // Prepare data object\n      const dataObject = {\n        key,\n        data,\n        timestamp: Date.now(),\n        metadata: {\n          ...metadata,\n          compressed: compress,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      // Compress if requested\n      if (compress) {\n        const compressed = await this.compressionUtils.compress(JSON.stringify(data));\n        dataObject.data = compressed;\n        dataObject.metadata.compressedSize = compressed.length;\n      }\n\n      // Store in IndexedDB\n      const result = await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.put(dataObject);\n      });\n\n      return {\n        success: true,\n        key: result,\n        storeName,\n        size: JSON.stringify(dataObject).length,\n        metadata: dataObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to store data in IndexedDB for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from IndexedDB\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      const result = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.get(key);\n      });\n\n      if (!result) {\n        return null;\n      }\n\n      // Check expiry if applicable\n      if (result.metadata && result.metadata.expiry && Date.now() > result.metadata.expiry) {\n        await this.remove(key, { storeName });\n        return null;\n      }\n\n      // Decompress if needed\n      let data = result.data;\n      if (result.metadata && result.metadata.compressed) {\n        data = JSON.parse(await this.compressionUtils.decompress(data));\n      }\n\n      return {\n        data,\n        metadata: result.metadata,\n        timestamp: result.timestamp\n      };\n\n    } catch (error) {\n      console.error(`Failed to retrieve data from IndexedDB for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from IndexedDB\n   */\n  async remove(key, options = {}) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.delete(key);\n      });\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove data from IndexedDB for key \"${key}\":`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all data from a store\n   */\n  async clear(storeName = null) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      if (storeName) {\n        // Clear specific store\n        await this.performTransaction(storeName, 'readwrite', (store) => {\n          return store.clear();\n        });\n      } else {\n        // Clear all stores\n        for (const store of Object.keys(this.stores)) {\n          await this.performTransaction(store, 'readwrite', (storeObj) => {\n            return storeObj.clear();\n          });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to clear IndexedDB:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys from a store\n   */\n  async getKeys(storeName = 'cached_data') {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAllKeys();\n      });\n    } catch (error) {\n      console.error(`Failed to get keys from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get all data from a store\n   */\n  async getAll(storeName = 'cached_data', options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null, filter = null } = options;\n\n    try {\n      const results = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAll();\n      });\n\n      let filteredResults = results;\n\n      // Apply filter if provided\n      if (filter) {\n        filteredResults = results.filter(filter);\n      }\n\n      // Apply limit if provided\n      if (limit) {\n        filteredResults = filteredResults.slice(0, limit);\n      }\n\n      return filteredResults;\n    } catch (error) {\n      console.error(`Failed to get all data from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Query data using an index\n   */\n  async query(storeName, indexName, value, options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null } = options;\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        const index = store.index(indexName);\n        const request = limit ? index.getAll(value, limit) : index.getAll(value);\n        return request;\n      });\n    } catch (error) {\n      console.error(`Failed to query IndexedDB store \"${storeName}\" with index \"${indexName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, stores: {}, total: { records: 0, size: 0 } };\n    }\n\n    try {\n      const stats = {\n        available: true,\n        stores: {},\n        total: { records: 0, size: 0 }\n      };\n\n      for (const storeName of Object.keys(this.stores)) {\n        const records = await this.getAll(storeName);\n        const recordCount = records.length;\n        const storeSize = records.reduce((size, record) => {\n          return size + JSON.stringify(record).length;\n        }, 0);\n\n        stats.stores[storeName] = {\n          records: recordCount,\n          size: storeSize\n        };\n\n        stats.total.records += recordCount;\n        stats.total.size += storeSize;\n      }\n\n      return stats;\n    } catch (error) {\n      console.error('Failed to get IndexedDB stats:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { available: false, error: message };\n    }\n  }\n\n  /**\n   * Export all data from IndexedDB\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const exportData = {};\n\n      for (const storeName of Object.keys(this.stores)) {\n        exportData[storeName] = await this.getAll(storeName);\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Failed to export IndexedDB data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into IndexedDB\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [storeName, records] of Object.entries(importData)) {\n        if (!this.stores[storeName]) {\n          console.warn(`Unknown store: ${storeName}`);\n          continue;\n        }\n\n        for (const record of records) {\n          try {\n            if (!overwrite) {\n              // Check if record exists\n              const existing = await this.retrieve(record.key || record.id, { storeName });\n              if (existing) {\n                results.skipped++;\n                continue;\n              }\n            }\n\n            await this.performTransaction(storeName, 'readwrite', (store) => {\n              return store.put(record);\n            });\n\n            results.imported++;\n          } catch (error) {\n            console.error(`Failed to import record to store \"${storeName}\":`, error);\n            results.errors++;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Failed to import IndexedDB data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cleanup expired data\n   */\n  async cleanupExpiredData() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      let cleaned = 0;\n      const now = Date.now();\n\n      // Cleanup cached_data store\n      const cachedData = await this.getAll('cached_data');\n      for (const record of cachedData) {\n        if (record.metadata && record.metadata.expiry && now > record.metadata.expiry) {\n          await this.remove(record.key, { storeName: 'cached_data' });\n          cleaned++;\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { cleaned: 0, error: message };\n    }\n  }\n\n  /**\n   * Perform IndexedDB transaction\n   */\n  async performTransaction(storeName, mode, operation) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([storeName], mode);\n      const store = transaction.objectStore(storeName);\n\n      transaction.onerror = () => {\n        reject(new Error(`Transaction failed: ${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        // Transaction completed successfully\n      };\n\n      const request = operation(store);\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = () => {\n        reject(new Error(`Operation failed: ${request.error}`));\n      };\n    });\n  }\n\n  /**\n   * Check if IndexedDB is available\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Get database info\n   */\n  getInfo() {\n    return {\n      dbName: this.dbName,\n      dbVersion: this.dbVersion,\n      available: this.isAvailable,\n      stores: Object.keys(this.stores),\n      storeCount: Object.keys(this.stores).length\n    };\n  }\n}\n","/**\n * Crypto Utils\n * Provides encryption and decryption utilities for data persistence\n */\n\nexport class CryptoUtils {\n  constructor() {\n    this.algorithm = 'AES-GCM';\n    this.keyLength = 256;\n    this.ivLength = 12; // 96 bits for GCM\n    this.tagLength = 16; // 128 bits for GCM\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n\n    // Generate or retrieve encryption key\n    this.initializeKey();\n  }\n\n  /**\n   * Initialize encryption key\n   */\n  async initializeKey() {\n    try {\n      // Try to get existing key from localStorage\n      const storedKey = localStorage.getItem('financeanalyst_crypto_key');\n\n      if (storedKey) {\n        // Import existing key\n        const keyData = this.base64ToArrayBuffer(storedKey);\n        this.cryptoKey = await crypto.subtle.importKey(\n          'raw',\n          keyData,\n          { name: this.algorithm },\n          false,\n          ['encrypt', 'decrypt']\n        );\n      } else {\n        // Generate new key\n        this.cryptoKey = await crypto.subtle.generateKey(\n          {\n            name: this.algorithm,\n            length: this.keyLength\n          },\n          true,\n          ['encrypt', 'decrypt']\n        );\n\n        // Store key for future use\n        const exportedKey = await crypto.subtle.exportKey('raw', this.cryptoKey);\n        const keyString = this.arrayBufferToBase64(exportedKey);\n        localStorage.setItem('financeanalyst_crypto_key', keyString);\n      }\n\n      console.log('✅ Crypto key initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize crypto key:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Encrypt data\n   */\n  async encrypt(data) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert string to ArrayBuffer\n      const dataBuffer = this.textEncoder.encode(data);\n\n      // Generate random IV\n      const iv = crypto.getRandomValues(new Uint8Array(this.ivLength));\n\n      // Encrypt data\n      const encryptedBuffer = await crypto.subtle.encrypt(\n        {\n          name: this.algorithm,\n          iv\n        },\n        this.cryptoKey,\n        dataBuffer\n      );\n\n      // Combine IV and encrypted data\n      const combined = new Uint8Array(iv.length + encryptedBuffer.byteLength);\n      combined.set(iv, 0);\n      combined.set(new Uint8Array(encryptedBuffer), iv.length);\n\n      // Convert to base64 for storage\n      return this.arrayBufferToBase64(combined.buffer);\n\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt data\n   */\n  async decrypt(encryptedData) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert base64 to ArrayBuffer\n      const combined = this.base64ToArrayBuffer(encryptedData);\n\n      // Extract IV and encrypted data\n      const iv = combined.slice(0, this.ivLength);\n      const encryptedBuffer = combined.slice(this.ivLength);\n\n      // Decrypt data\n      const decryptedBuffer = await crypto.subtle.decrypt(\n        {\n          name: this.algorithm,\n          iv\n        },\n        this.cryptoKey,\n        encryptedBuffer\n      );\n\n      // Convert back to string\n      return this.textDecoder.decode(decryptedBuffer);\n\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate hash of data\n   */\n  async hash(data) {\n    try {\n      const dataBuffer = this.textEncoder.encode(data);\n      const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n      return this.arrayBufferToBase64(hashBuffer);\n    } catch (error) {\n      console.error('Hashing failed:', error);\n      throw new Error(`Hashing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verify data integrity\n   */\n  async verifyIntegrity(data, expectedHash) {\n    try {\n      const actualHash = await this.hash(data);\n      return actualHash === expectedHash;\n    } catch (error) {\n      console.error('Integrity verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate secure random string\n   */\n  generateRandomString(length = 32) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return this.arrayBufferToBase64(array.buffer).substring(0, length);\n  }\n\n  /**\n   * Derive key from password (for future use)\n   */\n  async deriveKeyFromPassword(password, salt) {\n    try {\n      const passwordBuffer = this.textEncoder.encode(password);\n      const saltBuffer = this.textEncoder.encode(salt);\n\n      // Import password as key material\n      const keyMaterial = await crypto.subtle.importKey(\n        'raw',\n        passwordBuffer,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveKey']\n      );\n\n      // Derive key using PBKDF2\n      const derivedKey = await crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: saltBuffer,\n          iterations: 100000,\n          hash: 'SHA-256'\n        },\n        keyMaterial,\n        {\n          name: this.algorithm,\n          length: this.keyLength\n        },\n        false,\n        ['encrypt', 'decrypt']\n      );\n\n      return derivedKey;\n\n    } catch (error) {\n      console.error('Key derivation failed:', error);\n      throw new Error(`Key derivation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if Web Crypto API is available\n   */\n  isAvailable() {\n    return !!(window.crypto && window.crypto.subtle);\n  }\n\n  /**\n   * Get encryption info\n   */\n  getInfo() {\n    return {\n      algorithm: this.algorithm,\n      keyLength: this.keyLength,\n      ivLength: this.ivLength,\n      available: this.isAvailable(),\n      keyInitialized: !!this.cryptoKey\n    };\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Securely clear sensitive data from memory\n   */\n  clearSensitiveData(data) {\n    if (data instanceof ArrayBuffer) {\n      const view = new Uint8Array(data);\n      crypto.getRandomValues(view);\n    } else if (typeof data === 'string') {\n      // For strings, we can't directly clear memory in JavaScript\n      // but we can at least overwrite the reference\n      data = null;\n    }\n  }\n\n  /**\n   * Test encryption/decryption performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable()) {\n      return null;\n    }\n\n    const testData = JSON.stringify({\n      test: 'performance',\n      data: new Array(1000).fill('test data for performance testing'),\n      timestamp: Date.now()\n    });\n\n    const iterations = 50;\n\n    try {\n      // Test encryption performance\n      const encryptStart = performance.now();\n      let encrypted;\n      for (let i = 0; i < iterations; i++) {\n        encrypted = await this.encrypt(testData);\n      }\n      const encryptTime = performance.now() - encryptStart;\n\n      // Test decryption performance\n      const decryptStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decrypt(encrypted);\n      }\n      const decryptTime = performance.now() - decryptStart;\n\n      return {\n        encryptTime: encryptTime / iterations,\n        decryptTime: decryptTime / iterations,\n        totalTime: encryptTime + decryptTime,\n        dataSize: testData.length,\n        encryptedSize: encrypted.length,\n        compressionRatio: encrypted.length / testData.length,\n        iterations\n      };\n\n    } catch (error) {\n      console.error('Crypto performance test failed:', error);\n      return null;\n    }\n  }\n}\n","// @ts-check\n/**\n * Local Storage Service\n * Manages localStorage operations with encryption, compression, and data validation\n */\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\n/**\n * @typedef {Object} StoreOptions\n * @property {boolean} [encrypt]\n * @property {boolean} [compress]\n * @property {number|null} [ttl]\n * @property {boolean} [validate]\n */\n/**\n * @typedef {Object} RetrieveOptions\n * @property {boolean} [decrypt]\n * @property {boolean} [validateTTL]\n */\n/**\n * @typedef {Object} ImportOptions\n * @property {boolean} [overwrite]\n */\n/**\n * @typedef {Object} LocalStorageStats\n * @property {boolean} available\n * @property {number} used\n * @property {number} keys\n * @property {number} [maxSize]\n * @property {number} [usagePercentage]\n * @property {Record<string, number>} [itemSizes]\n * @property {{ key: string | null, size: number }} [largestItem]\n * @property {string} [error]\n */\n\nexport class LocalStorageService {\n  constructor() {\n    this.prefix = 'financeanalyst_';\n    this.isAvailable = false;\n    this.maxSize = 5 * 1024 * 1024; // 5MB typical localStorage limit\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n  }\n\n  /**\n   * Initialize the localStorage service\n   */\n  async initialize() {\n    try {\n      // Test localStorage availability\n      const testKey = this.prefix + 'test';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n\n      this.isAvailable = true;\n      console.warn('✅ LocalStorage service initialized');\n\n      return { success: true, available: true };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.warn('⚠️ LocalStorage not available:', message);\n      this.isAvailable = false;\n      return { success: false, available: false, error: message };\n    }\n  }\n\n  /**\n   * Store data in localStorage\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const {\n      encrypt = false,\n      compress = false,\n      ttl = null,\n      validate = true\n    } = options;\n\n    try {\n      // Validate data if requested\n      if (validate && !this.validateData(data)) {\n        throw new Error('Invalid data format');\n      }\n\n      // Prepare storage object\n      const storageObject = {\n        data,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0',\n          encrypted: encrypt,\n          compressed: compress,\n          ttl,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      let serializedData = JSON.stringify(storageObject);\n\n      // Compress if requested\n      if (compress) {\n        serializedData = await this.compressionUtils.compress(serializedData);\n        storageObject.metadata.compressedSize = serializedData.length;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        serializedData = await this.cryptoUtils.encrypt(serializedData);\n      }\n\n      // Check size limits\n      if (serializedData.length > this.maxSize) {\n        throw new Error(`Data too large: ${serializedData.length} bytes exceeds ${this.maxSize} bytes`);\n      }\n\n      // Store in localStorage\n      const storageKey = this.prefix + key;\n      localStorage.setItem(storageKey, serializedData);\n\n      return {\n        success: true,\n        key: storageKey,\n        size: serializedData.length,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error(`Failed to store data in localStorage for key \"${key}\":`, message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from localStorage\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { decrypt = false, validateTTL = true } = options;\n\n    try {\n      const storageKey = this.prefix + key;\n      let serializedData = localStorage.getItem(storageKey);\n\n      if (!serializedData) {\n        return null;\n      }\n\n      // Decrypt if needed\n      if (decrypt) {\n        serializedData = await this.cryptoUtils.decrypt(serializedData);\n      }\n\n      // Decompress if needed\n      let storageObject;\n      try {\n        storageObject = JSON.parse(serializedData);\n      } catch {\n        // Try decompression first\n        try {\n          const decompressed = await this.compressionUtils.decompress(serializedData);\n          storageObject = JSON.parse(decompressed);\n        } catch {\n          throw new Error('Failed to parse stored data');\n        }\n      }\n\n      // Validate TTL\n      if (validateTTL && storageObject.metadata && storageObject.metadata.ttl) {\n        const now = Date.now();\n        const expiry = storageObject.metadata.timestamp + storageObject.metadata.ttl;\n\n        if (now > expiry) {\n          await this.remove(key);\n          return null;\n        }\n      }\n\n      return {\n        data: storageObject.data,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error(`Failed to retrieve data from localStorage for key \"${key}\":`, message);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from localStorage\n   */\n  async remove(key) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const storageKey = this.prefix + key;\n      localStorage.removeItem(storageKey);\n      return true;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error(`Failed to remove data from localStorage for key \"${key}\":`, message);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all application data from localStorage\n   */\n  async clear() {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      const appKeys = keys.filter(key => key.startsWith(this.prefix));\n\n      appKeys.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      return true;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to clear localStorage:', message);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys for this application\n   */\n  async getKeys() {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      return keys\n        .filter(key => key.startsWith(this.prefix))\n        .map(key => key.substring(this.prefix.length));\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to get localStorage keys:', message);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, used: 0, keys: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let totalSize = 0;\n      let itemCount = 0;\n      const itemSizes = {};\n\n      for (const key of keys) {\n        const storageKey = this.prefix + key;\n        const data = localStorage.getItem(storageKey);\n        if (data) {\n          const size = data.length;\n          totalSize += size;\n          itemCount++;\n          itemSizes[key] = size;\n        }\n      }\n\n      return {\n        available: true,\n        used: totalSize,\n        keys: itemCount,\n        maxSize: this.maxSize,\n        usagePercentage: (totalSize / this.maxSize) * 100,\n        itemSizes,\n        largestItem: Object.entries(itemSizes).reduce((max, [key, size]) =>\n          size > max.size ? { key, size } : max, { key: null, size: 0 })\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to get localStorage stats:', message);\n      return { available: false, used: 0, keys: 0, error: message };\n    }\n  }\n\n  /**\n   * Export all application data\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const keys = await this.getKeys();\n      const exportData = {};\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: false });\n        if (data) {\n          exportData[key] = data;\n        }\n      }\n\n      return exportData;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to export localStorage data:', message);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into localStorage\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [key, data] of Object.entries(importData)) {\n        try {\n          // Check if key exists and overwrite setting\n          const existing = await this.retrieve(key, { validateTTL: false });\n          if (existing && !overwrite) {\n            results.skipped++;\n            continue;\n          }\n\n          // Import the data\n          await this.store(key, data.data, {\n            encrypt: data.metadata?.encrypted || false,\n            compress: data.metadata?.compressed || false,\n            ttl: data.metadata?.ttl || null\n          });\n\n          results.imported++;\n        } catch (error) {\n          const message = error instanceof Error ? error.message : String(error);\n          console.error(`Failed to import key \"${key}\":`, message);\n          results.errors++;\n        }\n      }\n\n      return results;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to import localStorage data:', message);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if localStorage has enough space for data\n   */\n  async hasSpace(dataSize) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const stats = await this.getStats();\n      return (stats.used + dataSize) <= this.maxSize;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Cleanup expired items\n   */\n  async cleanup() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let cleaned = 0;\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: true });\n        if (!data) {\n          cleaned++; // Item was expired and removed\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to cleanup localStorage:', message);\n      return { cleaned: 0, error: message };\n    }\n  }\n\n  /**\n   * Validate data before storage\n   */\n  validateData(data) {\n    try {\n      // Check if data is serializable\n      JSON.stringify(data);\n\n      // Check for circular references\n      const seen = new WeakSet();\n      const checkCircular = (obj) => {\n        if (obj !== null && typeof obj === 'object') {\n          if (seen.has(obj)) {\n            return false;\n          }\n          seen.add(obj);\n          for (const key in obj) {\n            if (!checkCircular(obj[key])) {\n              return false;\n            }\n          }\n        }\n        return true;\n      };\n\n      return checkCircular(data);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get localStorage availability status\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Test localStorage performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const testData = { test: 'performance', data: new Array(1000).fill('test') };\n    const iterations = 100;\n\n    try {\n      // Test write performance\n      const writeStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.store(`perf_test_${i}`, testData);\n      }\n      const writeTime = performance.now() - writeStart;\n\n      // Test read performance\n      const readStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.retrieve(`perf_test_${i}`);\n      }\n      const readTime = performance.now() - readStart;\n\n      // Cleanup test data\n      for (let i = 0; i < iterations; i++) {\n        await this.remove(`perf_test_${i}`);\n      }\n\n      return {\n        writeTime: writeTime / iterations,\n        readTime: readTime / iterations,\n        totalTime: writeTime + readTime,\n        iterations\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Performance test failed:', message);\n      return null;\n    }\n  }\n}\n","// @ts-check\n/**\n * Session Manager\n * Manages user sessions, authentication state, and session persistence\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\n/**\n * @typedef {Object} UserPrivacy\n * @property {boolean} analytics\n * @property {boolean} crashReporting\n * @property {boolean} dataSharing\n */\n/**\n * @typedef {Object} Preferences\n * @property {string} currency\n * @property {number} precision\n * @property {string} dateFormat\n * @property {string} theme\n * @property {boolean} notifications\n * @property {boolean} autoSave\n * @property {boolean} commandHistory\n * @property {number} dataRetention\n * @property {UserPrivacy} privacy\n */\n/**\n * @typedef {Object} Session\n * @property {string} id\n * @property {string} userId\n * @property {number} created\n * @property {number} lastActivity\n * @property {number} expires\n * @property {string} userAgent\n * @property {string} platform\n * @property {string} language\n * @property {string} timezone\n * @property {string} version\n */\n/**\n * @typedef {Object} User\n * @property {string} id\n * @property {string} name\n * @property {string|null} [email]\n * @property {number} created\n * @property {number} lastLogin\n * @property {number} loginCount\n * @property {Preferences} preferences\n */\n/**\n * @typedef {Object} SessionExport\n * @property {Session} session\n * @property {User} user\n * @property {Preferences} preferences\n * @property {number} exportTimestamp\n */\n/**\n * @typedef {Object} SessionImport\n * @property {Session} session\n * @property {User} user\n */\n/**\n * @typedef {'sessionCreated'|'sessionLoaded'|'sessionDestroyed'|'preferencesUpdated'|'sessionImported'} SessionEvent\n */\n/**\n * @callback SessionEventCallback\n * @param {SessionEvent} event\n * @param {any} data\n * @returns {void}\n */\n\nexport class SessionManager {\n  constructor() {\n    this.sessionKey = 'financeanalyst_session';\n    this.userKey = 'financeanalyst_user';\n    this.preferencesKey = 'financeanalyst_preferences';\n    this.cryptoUtils = new CryptoUtils();\n\n    /** @type {Session|null} */\n    this.currentSession = null;\n    /** @type {User|null} */\n    this.currentUser = null;\n    this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n    /** @type {Set<SessionEventCallback>} */\n    this.listeners = new Set();\n\n    // Default user preferences\n    this.defaultPreferences = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD',\n      theme: 'dark',\n      notifications: true,\n      autoSave: true,\n      commandHistory: true,\n      dataRetention: 30, // days\n      privacy: {\n        analytics: false,\n        crashReporting: true,\n        dataSharing: false\n      }\n    };\n  }\n\n  /**\n   * Initialize session manager\n   * @returns {Promise<{success: boolean, hasSession?: boolean, error?: string}>}\n   */\n  async initialize() {\n    try {\n      // Load existing session\n      await this.loadSession();\n\n      // Setup session monitoring\n      this.setupSessionMonitoring();\n\n      console.warn('✅ Session Manager initialized');\n      return { success: true, hasSession: !!this.currentSession };\n    } catch (error) {\n      console.error('❌ Failed to initialize Session Manager:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Create a new session\n   * @param {Partial<User> & {preferences?: Partial<Preferences>}} [userInfo]\n   * @returns {Promise<{success: true, session: Session, user: User}>}\n   */\n  async createSession(userInfo = {}) {\n    try {\n      const sessionId = this.generateSessionId();\n      const now = Date.now();\n\n      const session = {\n        id: sessionId,\n        userId: userInfo.id || this.generateUserId(),\n        created: now,\n        lastActivity: now,\n        expires: now + this.sessionTimeout,\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        version: '1.0'\n      };\n\n      const user = {\n        id: session.userId,\n        name: userInfo.name || 'Anonymous User',\n        email: userInfo.email || null,\n        created: userInfo.created || now,\n        lastLogin: now,\n        loginCount: (userInfo.loginCount || 0) + 1,\n        preferences: { ...this.defaultPreferences, ...userInfo.preferences }\n      };\n\n      // Store session and user data\n      await this.storeSession(session);\n      await this.storeUser(user);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionCreated', { session, user });\n\n      return {\n        success: true,\n        session,\n        user\n      };\n\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load existing session\n   * @returns {Promise<{ session: Session, user: User } | null>}\n   */\n  async loadSession() {\n    try {\n      const sessionData = localStorage.getItem(this.sessionKey);\n      const userData = localStorage.getItem(this.userKey);\n\n      if (!sessionData || !userData) {\n        return null;\n      }\n\n      const session = JSON.parse(sessionData);\n      const user = JSON.parse(userData);\n\n      // Check if session is expired\n      if (Date.now() > session.expires) {\n        await this.destroySession();\n        return null;\n      }\n\n      // Update last activity\n      session.lastActivity = Date.now();\n      await this.storeSession(session);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionLoaded', { session, user });\n\n      return { session, user };\n\n    } catch (error) {\n      console.error('Failed to load session:', error);\n      // Clear corrupted session data\n      await this.destroySession();\n      return null;\n    }\n  }\n\n  /**\n   * Update session activity\n   * @returns {Promise<boolean>}\n   */\n  async updateActivity() {\n    if (!this.currentSession) {\n      return false;\n    }\n\n    try {\n      this.currentSession.lastActivity = Date.now();\n\n      // Extend session if needed\n      const timeUntilExpiry = this.currentSession.expires - Date.now();\n      if (timeUntilExpiry < this.sessionTimeout * 0.1) { // Extend if less than 10% time left\n        this.currentSession.expires = Date.now() + this.sessionTimeout;\n      }\n\n      await this.storeSession(this.currentSession);\n      return true;\n\n    } catch (error) {\n      console.error('Failed to update session activity:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Destroy current session\n   * @returns {Promise<boolean>}\n   */\n  async destroySession() {\n    try {\n      const session = this.currentSession;\n      const user = this.currentUser;\n\n      // Clear session data\n      localStorage.removeItem(this.sessionKey);\n\n      this.currentSession = null;\n      this.currentUser = null;\n\n      // Notify listeners\n      this.notifyListeners('sessionDestroyed', { session, user });\n\n      return true;\n\n    } catch (error) {\n      console.error('Failed to destroy session:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current session\n   * @returns {Session|null}\n   */\n  getSession() {\n    return this.currentSession;\n  }\n\n  /**\n   * Get current user\n   * @returns {User|null}\n   */\n  getUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean}\n   */\n  isAuthenticated() {\n    return !!(this.currentSession && Date.now() < this.currentSession.expires);\n  }\n\n  /**\n   * Get user preferences\n   * @returns {Preferences}\n   */\n  getPreferences() {\n    return this.currentUser ? this.currentUser.preferences : this.defaultPreferences;\n  }\n\n  /**\n   * Update user preferences\n   * @param {Partial<Preferences>} newPreferences\n   * @returns {Promise<Preferences>}\n   */\n  async updatePreferences(newPreferences) {\n    if (!this.currentUser) {\n      throw new Error('No active user session');\n    }\n\n    try {\n      this.currentUser.preferences = {\n        ...this.currentUser.preferences,\n        ...newPreferences\n      };\n\n      await this.storeUser(this.currentUser);\n\n      // Also store preferences separately for quick access\n      localStorage.setItem(this.preferencesKey, JSON.stringify(this.currentUser.preferences));\n\n      // Notify listeners\n      this.notifyListeners('preferencesUpdated', { preferences: this.currentUser.preferences });\n\n      return this.currentUser.preferences;\n\n    } catch (error) {\n      console.error('Failed to update preferences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get session statistics\n   * @returns {null | { sessionId: string, userId: string, userName: string, sessionDuration: number, timeUntilExpiry: number, lastActivityAge: number, loginCount: number, userCreated: number, isExpired: boolean, isActive: boolean }}\n   */\n  getSessionStats() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    const now = Date.now();\n    const sessionDuration = now - this.currentSession.created;\n    const timeUntilExpiry = this.currentSession.expires - now;\n    const lastActivityAge = now - this.currentSession.lastActivity;\n\n    return {\n      sessionId: this.currentSession.id,\n      userId: this.currentUser.id,\n      userName: this.currentUser.name,\n      sessionDuration,\n      timeUntilExpiry,\n      lastActivityAge,\n      loginCount: this.currentUser.loginCount,\n      userCreated: this.currentUser.created,\n      isExpired: timeUntilExpiry <= 0,\n      isActive: lastActivityAge < 5 * 60 * 1000 // Active if activity within 5 minutes\n    };\n  }\n\n  /**\n   * Export session data\n   * @returns {Promise<SessionExport|null>}\n   */\n  async exportSessionData() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    return {\n      session: { ...this.currentSession },\n      user: { ...this.currentUser },\n      preferences: { ...this.currentUser.preferences },\n      exportTimestamp: Date.now()\n    };\n  }\n\n  /**\n   * Import session data\n   * @param {SessionImport} sessionData\n   * @returns {Promise<{success: true, session: Session, user: User}>}\n   */\n  async importSessionData(sessionData) {\n    try {\n      if (!sessionData || !sessionData.session || !sessionData.user) {\n        throw new Error('Invalid session data format');\n      }\n\n      // Validate session data\n      const session = sessionData.session;\n      const user = sessionData.user;\n\n      // Update timestamps\n      session.lastActivity = Date.now();\n      session.expires = Date.now() + this.sessionTimeout;\n      user.lastLogin = Date.now();\n\n      // Store imported data\n      await this.storeSession(session);\n      await this.storeUser(user);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionImported', { session, user });\n\n      return { success: true, session, user };\n\n    } catch (error) {\n      console.error('Failed to import session data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add session event listener\n   * @param {SessionEventCallback} callback\n   * @returns {void}\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove session event listener\n   * @param {SessionEventCallback} callback\n   * @returns {void}\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  /**\n   * Store session data\n   * @param {Session} session\n   * @returns {Promise<void>}\n   */\n  async storeSession(session) {\n    try {\n      localStorage.setItem(this.sessionKey, JSON.stringify(session));\n    } catch (error) {\n      console.error('Failed to store session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Store user data\n   * @param {User} user\n   * @returns {Promise<void>}\n   */\n  async storeUser(user) {\n    try {\n      localStorage.setItem(this.userKey, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to store user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate unique session ID\n   * @returns {string}\n   */\n  generateSessionId() {\n    return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Generate unique user ID\n   * @returns {string}\n   */\n  generateUserId() {\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Setup session monitoring\n   * @returns {void}\n   */\n  setupSessionMonitoring() {\n    // Update activity on user interaction\n    const events = ['click', 'keypress', 'scroll', 'mousemove'];\n    let lastActivity = Date.now();\n\n    const throttledUpdate = this.throttle(() => {\n      const now = Date.now();\n      if (now - lastActivity > 60000) { // Update every minute\n        this.updateActivity();\n        lastActivity = now;\n      }\n    }, 1000);\n\n    events.forEach(event => {\n      document.addEventListener(event, throttledUpdate, { passive: true });\n    });\n\n    // Check session expiry periodically\n    setInterval(() => {\n      if (this.currentSession && Date.now() > this.currentSession.expires) {\n        this.destroySession();\n      }\n    }, 60000); // Check every minute\n\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        this.updateActivity();\n      }\n    });\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n      this.updateActivity();\n    });\n  }\n\n  /**\n   * Throttle function calls\n   * @template {(...args: any[]) => void} F\n   * @param {F} func\n   * @param {number} limit\n   * @returns {(...args: Parameters<F>) => void}\n   */\n  throttle(func, limit) {\n    let inThrottle;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Notify event listeners\n   * @param {SessionEvent} event\n   * @param {any} data\n   * @returns {void}\n   */\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in session event listener:', error);\n      }\n    });\n  }\n}\n","/**\n * Persistence Manager - Central data persistence orchestrator\n * Manages multiple storage layers and provides unified API for data persistence\n */\n\nimport { DataMigrationService } from './DataMigrationService';\nimport { IndexedDBService } from './IndexedDBService';\nimport { LocalStorageService } from './LocalStorageService';\nimport { SessionManager } from './SessionManager';\n\nexport class PersistenceManager {\n  constructor() {\n    this.localStorage = new LocalStorageService();\n    this.indexedDB = new IndexedDBService();\n    this.sessionManager = new SessionManager();\n    this.migrationService = new DataMigrationService();\n\n    this.isInitialized = false;\n    this.storageQuota = null;\n    this.listeners = new Map();\n\n    // Storage strategy configuration\n    this.storageStrategy = {\n      // Small, frequently accessed data -> localStorage\n      localStorage: [\n        'user_preferences',\n        'session_data',\n        'ui_state',\n        'recent_commands',\n        'quick_settings'\n      ],\n      // Large, complex data -> IndexedDB\n      indexedDB: [\n        'watchlists',\n        'analysis_history',\n        'command_history',\n        'alerts',\n        'cached_data',\n        'user_models',\n        'export_data'\n      ]\n    };\n  }\n\n  /**\n   * Initialize the persistence manager\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      // Check storage availability\n      await this.checkStorageAvailability();\n\n      // Initialize storage services\n      await Promise.all([\n        this.localStorage.initialize(),\n        this.indexedDB.initialize(),\n        this.sessionManager.initialize()\n      ]);\n\n      // Check for data migrations\n      await this.migrationService.checkAndMigrate();\n\n      // Estimate storage quota\n      await this.estimateStorageQuota();\n\n      this.isInitialized = true;\n      console.warn('✅ Persistence Manager initialized successfully');\n\n      return {\n        success: true,\n        storageQuota: this.storageQuota,\n        availableStorage: await this.getAvailableStorage()\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize Persistence Manager:', error);\n      throw new Error(`Persistence initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Store data using appropriate storage layer\n   */\n  async store(key, data, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      encrypt = false,\n      compress = false,\n      ttl = null\n    } = options;\n\n    try {\n      const metadata = {\n        timestamp: Date.now(),\n        version: '1.0',\n        encrypted: encrypt,\n        compressed: compress,\n        ttl,\n        size: JSON.stringify(data).length\n      };\n\n      let result;\n\n      if (storage === 'localStorage') {\n        result = await this.localStorage.store(key, data, { encrypt, ttl });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.store(key, data, { metadata, compress });\n      } else {\n        throw new Error(`Unknown storage layer: ${storage}`);\n      }\n\n      // Notify listeners\n      this.notifyListeners('store', { key, storage, metadata });\n\n      return result;\n\n    } catch (error) {\n      console.error(`Failed to store data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from appropriate storage layer\n   */\n  async retrieve(key, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      decrypt = false\n    } = options;\n\n    try {\n      let result;\n\n      if (storage === 'localStorage') {\n        result = await this.localStorage.retrieve(key, { decrypt });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.retrieve(key);\n      } else {\n        // Try both storage layers\n        result = await this.localStorage.retrieve(key, { decrypt }) ||\n                 await this.indexedDB.retrieve(key);\n      }\n\n      // Check TTL if applicable\n      if (result && result.metadata && result.metadata.ttl) {\n        const now = Date.now();\n        const expiry = result.metadata.timestamp + result.metadata.ttl;\n\n        if (now > expiry) {\n          await this.remove(key, { storage });\n          return null;\n        }\n      }\n\n      return result ? result.data || result : null;\n\n    } catch (error) {\n      console.error(`Failed to retrieve data for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from storage\n   */\n  async remove(key, options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both' } = options;\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.remove(key));\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.remove(key));\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('remove', { key, storage });\n\n      return true;\n\n    } catch (error) {\n      console.error(`Failed to remove data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear all data from storage\n   */\n  async clear(options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both', confirm = false } = options;\n\n    if (!confirm) {\n      throw new Error('Clear operation requires explicit confirmation');\n    }\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.clear());\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.clear());\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('clear', { storage });\n\n      return true;\n\n    } catch (error) {\n      console.error('Failed to clear storage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStorageStats() {\n    await this.ensureInitialized();\n\n    try {\n      const [localStorageStats, indexedDBStats] = await Promise.all([\n        this.localStorage.getStats(),\n        this.indexedDB.getStats()\n      ]);\n\n      const totalUsed = localStorageStats.used + indexedDBStats.used;\n      const totalAvailable = await this.getAvailableStorage();\n\n      return {\n        localStorage: localStorageStats,\n        indexedDB: indexedDBStats,\n        total: {\n          used: totalUsed,\n          available: totalAvailable,\n          quota: this.storageQuota,\n          usagePercentage: this.storageQuota ? (totalUsed / this.storageQuota) * 100 : 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to get storage stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Export all user data\n   */\n  async exportData(options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      format = 'json',\n      includeMetadata = true,\n      _compress = false\n    } = options;\n\n    try {\n      const [localStorageData, indexedDBData] = await Promise.all([\n        this.localStorage.exportAll(),\n        this.indexedDB.exportAll()\n      ]);\n\n      const exportData = {\n        version: '1.0',\n        timestamp: new Date().toISOString(),\n        localStorage: localStorageData,\n        indexedDB: indexedDBData\n      };\n\n      if (includeMetadata) {\n        exportData.metadata = {\n          userAgent: navigator.userAgent,\n          storageStats: await this.getStorageStats(),\n          exportOptions: options\n        };\n      }\n\n      return {\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import user data\n   */\n  async importData(importData, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      overwrite = false,\n      validate = true,\n      backup = true\n    } = options;\n\n    try {\n      // Validate import data\n      if (validate && !this.validateImportData(importData)) {\n        throw new Error('Invalid import data format');\n      }\n\n      // Create backup if requested\n      if (backup) {\n        const backupData = await this.exportData();\n        await this.store('backup_before_import', backupData, {\n          storage: 'indexedDB',\n          ttl: 7 * 24 * 60 * 60 * 1000 // 7 days\n        });\n      }\n\n      // Import localStorage data\n      if (importData.localStorage) {\n        await this.localStorage.importData(importData.localStorage, { overwrite });\n      }\n\n      // Import IndexedDB data\n      if (importData.indexedDB) {\n        await this.indexedDB.importData(importData.indexedDB, { overwrite });\n      }\n\n      // Notify listeners\n      this.notifyListeners('import', { size: JSON.stringify(importData).length });\n\n      return {\n        success: true,\n        imported: {\n          localStorage: Object.keys(importData.localStorage || {}).length,\n          indexedDB: Object.keys(importData.indexedDB || {}).length\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add event listener for storage events\n   */\n  addEventListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n\n  // Private methods\n\n  async ensureInitialized() {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  determineStorageLayer(key) {\n    if (this.storageStrategy.localStorage.includes(key)) {\n      return 'localStorage';\n    }\n    if (this.storageStrategy.indexedDB.includes(key)) {\n      return 'indexedDB';\n    }\n    // Default to localStorage for small data\n    return 'localStorage';\n  }\n\n  async checkStorageAvailability() {\n    // Check localStorage\n    if (!window.localStorage) {\n      throw new Error('localStorage is not available');\n    }\n\n    // Check IndexedDB\n    if (!window.indexedDB) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    return true;\n  }\n\n  async estimateStorageQuota() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      this.storageQuota = estimate.quota;\n      return estimate;\n    }\n    return null;\n  }\n\n  async getAvailableStorage() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return estimate.quota - estimate.usage;\n    }\n    return null;\n  }\n\n  validateImportData(data) {\n    return data &&\n           typeof data === 'object' &&\n           data.version &&\n           (data.localStorage || data.indexedDB);\n  }\n\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in storage event listener:', error);\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const persistenceManager = new PersistenceManager();\n","/**\n * Enhanced Command Processor for FinanceAnalyst Pro Terminal\n * Provides modular, extensible command processing with categorization\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { dataFetchingService } from './dataFetching';\nimport { persistenceManager } from './persistence/PersistenceManager';\n\nexport class CommandProcessor {\n  constructor() {\n    this.commandHistory = [];\n    this.variables = new Map();\n    this.settings = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD'\n    };\n    this.persistenceInitialized = false;\n    this.maxHistorySize = 1000;\n  }\n\n  /**\n   * Initialize persistence layer\n   */\n  async initializePersistence() {\n    if (this.persistenceInitialized) return;\n\n    try {\n      await persistenceManager.initialize();\n\n      // Load persisted data\n      await this.loadPersistedData();\n\n      this.persistenceInitialized = true;\n      console.log('✅ Command processor persistence initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize persistence:', error);\n      // Continue without persistence\n    }\n  }\n\n  /**\n   * Load persisted data\n   */\n  async loadPersistedData() {\n    try {\n      // Load command history\n      const history = await persistenceManager.retrieve('command_history');\n      if (history && Array.isArray(history)) {\n        this.commandHistory = history.slice(-this.maxHistorySize);\n      }\n\n      // Load variables\n      const variables = await persistenceManager.retrieve('user_variables');\n      if (variables && typeof variables === 'object') {\n        this.variables = new Map(Object.entries(variables));\n      }\n\n      // Load settings\n      const settings = await persistenceManager.retrieve('user_preferences');\n      if (settings && typeof settings === 'object') {\n        this.settings = { ...this.settings, ...settings };\n      }\n\n    } catch (error) {\n      console.error('Failed to load persisted data:', error);\n    }\n  }\n\n  /**\n   * Save data to persistence layer\n   */\n  async saveData() {\n    if (!this.persistenceInitialized) return;\n\n    try {\n      // Save command history\n      await persistenceManager.store('command_history', this.commandHistory, {\n        storage: 'indexedDB'\n      });\n\n      // Save variables\n      const variablesObj = Object.fromEntries(this.variables);\n      await persistenceManager.store('user_variables', variablesObj, {\n        storage: 'localStorage'\n      });\n\n      // Save settings\n      await persistenceManager.store('user_preferences', this.settings, {\n        storage: 'localStorage'\n      });\n\n    } catch (error) {\n      console.error('Failed to save data:', error);\n    }\n  }\n\n  /**\n   * Process a command input and return structured response\n   * @param {string} input - Raw command input\n   * @param {Object} context - Execution context\n   * @returns {Promise<Object>} Command response\n   */\n  async processCommand(input, context = {}) {\n    const startTime = Date.now();\n\n    try {\n      // Initialize persistence if not already done\n      if (!this.persistenceInitialized) {\n        await this.initializePersistence();\n      }\n\n      // Parse command\n      const parsedCommand = this.parseCommand(input);\n\n      // Add to history\n      const historyEntry = {\n        input,\n        timestamp: new Date(),\n        success: false,\n        ...parsedCommand\n      };\n      this.commandHistory.push(historyEntry);\n\n      // Trim history if too long\n      if (this.commandHistory.length > this.maxHistorySize) {\n        this.commandHistory = this.commandHistory.slice(-this.maxHistorySize);\n      }\n\n      // Get command handler\n      const handler = commandRegistry.getHandler(parsedCommand.command);\n\n      if (!handler) {\n        return this.createErrorResponse(`Unknown command: \"${parsedCommand.command}\"`, input);\n      }\n\n      // Validate parameters\n      const validationResult = this.validateParameters(handler, parsedCommand);\n      if (!validationResult.valid) {\n        return this.createErrorResponse(validationResult.error, input);\n      }\n\n      // Execute command\n      const result = await handler.execute(parsedCommand, context, this);\n\n      // Mark command as successful in history\n      historyEntry.success = result.type !== 'error';\n      historyEntry.executionTime = Date.now() - startTime;\n\n      // Add execution metadata\n      result.executionTime = Date.now() - startTime;\n      result.timestamp = new Date();\n\n      // Save data asynchronously (don't wait)\n      this.saveData().catch(error => {\n        console.error('Failed to save command processor data:', error);\n      });\n\n      return result;\n\n    } catch (error) {\n      return this.createErrorResponse(`Command execution failed: ${error.message}`, input);\n    }\n  }\n\n  /**\n   * Parse command input into structured format\n   * @param {string} input - Raw command input\n   * @returns {Object} Parsed command object\n   */\n  parseCommand(input) {\n    const trimmed = input.trim();\n\n    // Handle function-style commands: COMMAND(param1, param2)\n    const functionMatch = trimmed.match(/^([A-Z_]+)\\s*\\(\\s*([^)]*)\\s*\\)$/i);\n    if (functionMatch) {\n      const [, command, paramString] = functionMatch;\n      const parameters = this.parseParameters(paramString);\n      return {\n        command: command.toUpperCase(),\n        parameters,\n        rawInput: trimmed,\n        style: 'function'\n      };\n    }\n\n    // Handle space-separated commands: COMMAND param1 param2\n    const parts = trimmed.split(/\\s+/);\n    const command = parts[0].toUpperCase();\n    const parameters = parts.slice(1);\n\n    return {\n      command,\n      parameters,\n      rawInput: trimmed,\n      style: 'space-separated'\n    };\n  }\n\n  /**\n   * Parse function parameters from string\n   * @param {string} paramString - Parameter string\n   * @returns {Array} Parsed parameters\n   */\n  parseParameters(paramString) {\n    if (!paramString.trim()) return [];\n\n    const params = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = 0;\n    let quoteChar = '';\n\n    for (let i = 0; i < paramString.length; i++) {\n      const char = paramString[i];\n\n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        inQuotes = false;\n        quoteChar = '';\n      } else if (char === '[' && !inQuotes) {\n        inBrackets++;\n        current += char;\n      } else if (char === ']' && !inQuotes) {\n        inBrackets--;\n        current += char;\n      } else if (char === ',' && !inQuotes && inBrackets === 0) {\n        params.push(this.parseParameterValue(current.trim()));\n        current = '';\n        continue;\n      } else {\n        current += char;\n      }\n    }\n\n    if (current.trim()) {\n      params.push(this.parseParameterValue(current.trim()));\n    }\n\n    return params;\n  }\n\n  /**\n   * Parse individual parameter value\n   * @param {string} value - Parameter value string\n   * @returns {*} Parsed value\n   */\n  parseParameterValue(value) {\n    // Remove quotes\n    if ((value.startsWith('\"') && value.endsWith('\"')) ||\n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      return value.slice(1, -1);\n    }\n\n    // Parse arrays\n    if (value.startsWith('[') && value.endsWith(']')) {\n      const arrayContent = value.slice(1, -1);\n      if (!arrayContent.trim()) return [];\n      return arrayContent.split(',').map(item => this.parseParameterValue(item.trim()));\n    }\n\n    // Parse numbers\n    if (/^-?\\d+\\.?\\d*$/.test(value)) {\n      return parseFloat(value);\n    }\n\n    // Parse booleans\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n\n    // Return as string\n    return value;\n  }\n\n  /**\n   * Validate command parameters\n   * @param {Object} handler - Command handler\n   * @param {Object} parsedCommand - Parsed command\n   * @returns {Object} Validation result\n   */\n  validateParameters(handler, parsedCommand) {\n    if (!handler.parameterSchema) {\n      return { valid: true };\n    }\n\n    const { required = [], optional = [] } = handler.parameterSchema;\n    const { parameters } = parsedCommand;\n\n    // Check required parameters\n    if (parameters.length < required.length) {\n      return {\n        valid: false,\n        error: `Missing required parameters. Expected: ${required.join(', ')}`\n      };\n    }\n\n    // Check maximum parameters\n    const maxParams = required.length + optional.length;\n    if (parameters.length > maxParams) {\n      return {\n        valid: false,\n        error: `Too many parameters. Maximum: ${maxParams}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Create error response\n   * @param {string} message - Error message\n   * @param {string} input - Original input\n   * @returns {Object} Error response\n   */\n  createErrorResponse(message, input) {\n    return {\n      type: 'error',\n      content: message,\n      suggestions: this.getSuggestions(input),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Get command suggestions for invalid input\n   * @param {string} input - Original input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(input) {\n    const command = input.split(/[\\s(]/)[0].toUpperCase();\n    const allCommands = commandRegistry.getAllCommands();\n\n    return allCommands\n      .filter(cmd => cmd.includes(command.substring(0, 3)) ||\n                     cmd.toLowerCase().includes(command.toLowerCase()))\n      .slice(0, 5);\n  }\n\n  /**\n   * Get command history\n   * @param {number} limit - Number of recent commands\n   * @returns {Array} Command history\n   */\n  getHistory(limit = 10) {\n    return this.commandHistory.slice(-limit);\n  }\n\n  /**\n   * Clear command history\n   */\n  clearHistory() {\n    this.commandHistory = [];\n  }\n\n  /**\n   * Set variable value\n   * @param {string} name - Variable name\n   * @param {*} value - Variable value\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n\n    // Save variables asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save variables:', error);\n      });\n    }\n  }\n\n  /**\n   * Get variable value\n   * @param {string} name - Variable name\n   * @returns {*} Variable value\n   */\n  getVariable(name) {\n    return this.variables.get(name);\n  }\n\n  /**\n   * Get all variables\n   * @returns {Object} All variables\n   */\n  getAllVariables() {\n    return Object.fromEntries(this.variables);\n  }\n\n  /**\n   * Update settings\n   * @param {string} key - Setting key\n   * @param {*} value - Setting value\n   */\n  updateSetting(key, value) {\n    this.settings[key] = value;\n\n    // Save settings asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save settings:', error);\n      });\n    }\n  }\n\n  /**\n   * Get setting value\n   * @param {string} key - Setting key\n   * @returns {*} Setting value\n   */\n  getSetting(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Get all settings\n   * @returns {Object} All settings\n   */\n  getAllSettings() {\n    return { ...this.settings };\n  }\n}\n\n// Export singleton instance\nexport const commandProcessor = new CommandProcessor();\n","/**\n * Automation & Workflow Commands\n * Watchlists, alerts, batch analysis, and automated workflows\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const automationCommands = {\n  WATCHLIST: {\n    execute: async(parsedCommand, context, processor) => {\n      const [action, name, tickers] = parsedCommand.parameters;\n\n      if (!action) {\n        return {\n          type: 'error',\n          content: 'WATCHLIST command requires an action. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL]) or WATCHLIST(list)'\n        };\n      }\n\n      try {\n        // Get existing watchlists from processor variables\n        const watchlists = processor.getVariable('watchlists') || {};\n\n        if (action.toLowerCase() === 'list') {\n          if (Object.keys(watchlists).length === 0) {\n            return {\n              type: 'info',\n              content: 'No watchlists created yet. Use WATCHLIST(create, \"name\", [tickers]) to create one.'\n            };\n          }\n\n          const content = `📋 Your Watchlists:\\n\\n${Object.entries(watchlists).map(([listName, data]) =>\n            `📊 ${listName} (${data.tickers.length} stocks)\\n• Created: ${data.created}\\n• Tickers: ${data.tickers.join(', ')}\\n• Last Updated: ${data.lastUpdated || 'Never'}`\n          ).join('\\n\\n')}\\n\\n💡 Commands:\\n• WATCHLIST(view, \"name\") - View detailed watchlist\\n• WATCHLIST(update, \"name\", [new_tickers]) - Update watchlist\\n• WATCHLIST(delete, \"name\") - Delete watchlist\\n• WATCHLIST(analyze, \"name\") - Analyze all stocks in watchlist`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_list',\n              watchlists\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'create') {\n          if (!name || !tickers) {\n            return {\n              type: 'error',\n              content: 'Create action requires name and tickers. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL])'\n            };\n          }\n\n          const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n          watchlists[name] = {\n            tickers: tickerArray.map(t => t.toUpperCase()),\n            created: new Date().toISOString().split('T')[0],\n            lastUpdated: null\n          };\n\n          processor.setVariable('watchlists', watchlists);\n\n          return {\n            type: 'success',\n            content: `✅ Watchlist \"${name}\" created with ${tickerArray.length} stocks: ${tickerArray.join(', ')}\\n\\nUse WATCHLIST(analyze, \"${name}\") to analyze all stocks in this watchlist.`,\n            data: {\n              analysis: 'watchlist_created',\n              name,\n              tickers: tickerArray\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'view') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n\n          // Fetch current data for all tickers\n          const stockData = await Promise.all(\n            watchlist.tickers.map(async(ticker) => {\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  change: profile.changes || 0,\n                  changePercent: profile.changesPercentage || 0,\n                  marketCap: profile.mktCap,\n                  pe: profile.pe\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error loading',\n                  price: 0,\n                  change: 0,\n                  changePercent: 0,\n                  marketCap: 0,\n                  pe: 0\n                };\n              }\n            })\n          );\n\n          const totalValue = stockData.reduce((sum, stock) => sum + stock.marketCap, 0);\n          const avgChange = stockData.reduce((sum, stock) => sum + stock.changePercent, 0) / stockData.length;\n\n          const content = `📊 Watchlist: ${name}\\n\\n📈 PERFORMANCE SUMMARY:\\n• Total Market Cap: ${formatCurrency(totalValue, 'USD', true)}\\n• Average Change: ${formatPercentage(avgChange / 100)} ${avgChange > 0 ? '📈' : '📉'}\\n• Best Performer: ${stockData.reduce((best, stock) => stock.changePercent > best.changePercent ? stock : best).ticker} (${formatPercentage(Math.max(...stockData.map(s => s.changePercent)) / 100)})\\n• Worst Performer: ${stockData.reduce((worst, stock) => stock.changePercent < worst.changePercent ? stock : worst).ticker} (${formatPercentage(Math.min(...stockData.map(s => s.changePercent)) / 100)})\\n\\n📋 HOLDINGS:\\n${stockData.map(stock =>\n            `• ${stock.ticker}: ${formatCurrency(stock.price)} ${stock.changePercent > 0 ? '📈' : stock.changePercent < 0 ? '📉' : '➡️'} ${formatPercentage(stock.changePercent / 100)} (P/E: ${formatNumber(stock.pe, 1)}x)`\n          ).join('\\n')}\\n\\n💡 QUICK ACTIONS:\\n• WATCHLIST(analyze, \"${name}\") - Run analysis on all stocks\\n• DCF(ticker) - Detailed analysis of any stock\\n• PORTFOLIO([${watchlist.tickers.join(',')}], [equal weights]) - Portfolio analysis`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_view',\n              name,\n              stockData,\n              summary: {\n                totalValue,\n                avgChange\n              }\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'analyze') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n\n          // Perform quick analysis on all stocks\n          const analysisResults = await Promise.all(\n            watchlist.tickers.slice(0, 5).map(async(ticker) => { // Limit to 5 for demo\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  pe: profile.pe,\n                  pb: profile.pb,\n                  beta: profile.beta,\n                  recommendation: profile.pe < 20 && profile.pb < 3 ? 'Attractive' : profile.pe > 30 ? 'Expensive' : 'Fair Value'\n                };\n              } catch (error) {\n                return {\n                  ticker,\n                  name: 'Error',\n                  recommendation: 'Unable to analyze'\n                };\n              }\n            })\n          );\n\n          const content = `🔍 Watchlist Analysis: ${name}\\n\\n📊 QUICK ANALYSIS RESULTS:\\n${analysisResults.map(result =>\n            `• ${result.ticker} (${result.name}):\\n  Price: ${formatCurrency(result.price)}, P/E: ${formatNumber(result.pe, 1)}x, P/B: ${formatNumber(result.pb, 1)}x\\n  Beta: ${formatNumber(result.beta, 2)}, Assessment: ${result.recommendation} ${result.recommendation === 'Attractive' ? '🟢' : result.recommendation === 'Expensive' ? '🔴' : '🟡'}`\n          ).join('\\n\\n')}\\n\\n🎯 SUMMARY:\\n• Attractive Opportunities: ${analysisResults.filter(r => r.recommendation === 'Attractive').length}\\n• Fair Value Stocks: ${analysisResults.filter(r => r.recommendation === 'Fair Value').length}\\n• Expensive Stocks: ${analysisResults.filter(r => r.recommendation === 'Expensive').length}\\n\\n💡 NEXT STEPS:\\n• Run DCF(ticker) for detailed valuation of attractive stocks\\n• Use COMP(ticker) for relative valuation analysis\\n• Consider PORTFOLIO analysis for optimal allocation\\n\\n${watchlist.tickers.length > 5 ? `⚠️ Showing first 5 stocks. Full watchlist has ${watchlist.tickers.length} stocks.` : ''}`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_analysis',\n              name,\n              results: analysisResults\n            }\n          };\n        }\n\n        return {\n          type: 'error',\n          content: `Unknown action \"${action}\". Available actions: list, create, view, analyze, update, delete`\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Watchlist operation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  },\n\n  ALERT: {\n    execute: async(parsedCommand, context, processor) => {\n      const [ticker, condition, value] = parsedCommand.parameters;\n\n      if (!ticker || !condition || value === undefined) {\n        return {\n          type: 'error',\n          content: 'ALERT command requires ticker, condition, and value. Usage: ALERT(AAPL, \"price_above\", 150) or ALERT(list)'\n        };\n      }\n\n      try {\n        if (ticker.toLowerCase() === 'list') {\n          const alerts = processor.getVariable('alerts') || [];\n\n          if (alerts.length === 0) {\n            return {\n              type: 'info',\n              content: 'No active alerts. Create alerts with ALERT(ticker, condition, value)\\n\\nSupported conditions:\\n• price_above, price_below\\n• pe_above, pe_below\\n• volume_above\\n• change_above, change_below'\n            };\n          }\n\n          const content = `🚨 Active Alerts (${alerts.length}):\\n\\n${alerts.map((alert, index) =>\n            `${index + 1}. ${alert.ticker}: ${alert.condition.replace('_', ' ')} ${alert.value}\\n   Created: ${alert.created}\\n   Status: ${alert.triggered ? '✅ Triggered' : '⏳ Monitoring'}`\n          ).join('\\n\\n')}\\n\\n💡 Use ALERT(clear) to remove all alerts`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'alert_list',\n              alerts\n            }\n          };\n        }\n\n        if (ticker.toLowerCase() === 'clear') {\n          processor.setVariable('alerts', []);\n          return {\n            type: 'success',\n            content: '✅ All alerts cleared.'\n          };\n        }\n\n        // Create new alert\n        const alerts = processor.getVariable('alerts') || [];\n        const newAlert = {\n          id: Date.now(),\n          ticker: ticker.toUpperCase(),\n          condition,\n          value: parseFloat(value),\n          created: new Date().toISOString().split('T')[0],\n          triggered: false\n        };\n\n        alerts.push(newAlert);\n        processor.setVariable('alerts', alerts);\n\n        // Check if alert should trigger immediately\n        try {\n          const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n          let shouldTrigger = false;\n          let currentValue = 0;\n\n          switch (condition.toLowerCase()) {\n            case 'price_above':\n              currentValue = profile.price;\n              shouldTrigger = profile.price > value;\n              break;\n            case 'price_below':\n              currentValue = profile.price;\n              shouldTrigger = profile.price < value;\n              break;\n            case 'pe_above':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe > value;\n              break;\n            case 'pe_below':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe < value;\n              break;\n          }\n\n          const content = `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Current Value: ${formatNumber(currentValue, 2)}\\n• Status: ${shouldTrigger ? '🔴 TRIGGERED IMMEDIATELY' : '🟢 Monitoring'}\\n• Created: ${newAlert.created}\\n\\n${shouldTrigger ? '⚠️ Alert condition is already met!' : '✅ Alert is now active and monitoring.'}\\n\\n💡 Use ALERT(list) to see all alerts`;\n\n          if (shouldTrigger) {\n            newAlert.triggered = true;\n            processor.setVariable('alerts', alerts);\n          }\n\n          return {\n            type: shouldTrigger ? 'warning' : 'success',\n            content,\n            data: {\n              analysis: 'alert_created',\n              alert: newAlert,\n              triggered: shouldTrigger\n            }\n          };\n\n        } catch (error) {\n          return {\n            type: 'success',\n            content: `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Status: 🟢 Monitoring\\n• Created: ${newAlert.created}\\n\\n✅ Alert is now active. Unable to check current status due to data fetch error.\\n\\n💡 Use ALERT(list) to see all alerts`\n          };\n        }\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Alert creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  },\n\n  BATCH_ANALYSIS: {\n    execute: async(parsedCommand, context, processor) => {\n      const [tickers, analysisType = 'quick'] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'BATCH_ANALYSIS command requires an array of tickers. Usage: BATCH_ANALYSIS([AAPL,MSFT,GOOGL], \"quick\")'\n        };\n      }\n\n      try {\n        if (tickers.length > 10) {\n          return {\n            type: 'error',\n            content: 'Batch analysis limited to 10 stocks maximum for performance reasons.'\n          };\n        }\n\n        const results = await Promise.all(\n          tickers.map(async(ticker) => {\n            try {\n              const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n              // Quick analysis\n              const score = (\n                (profile.pe < 20 ? 20 : profile.pe < 30 ? 10 : 0) +\n                (profile.pb < 2 ? 20 : profile.pb < 3 ? 10 : 0) +\n                (profile.debtToEquity < 0.5 ? 20 : profile.debtToEquity < 1 ? 10 : 0) +\n                (profile.returnOnEquityTTM > 0.15 ? 20 : profile.returnOnEquityTTM > 0.10 ? 10 : 0) +\n                (profile.profitMargin > 0.15 ? 20 : profile.profitMargin > 0.10 ? 10 : 0)\n              );\n\n              return {\n                ticker: ticker.toUpperCase(),\n                name: profile.companyName,\n                price: profile.price,\n                marketCap: profile.mktCap,\n                pe: profile.pe,\n                pb: profile.pb,\n                roe: profile.returnOnEquityTTM,\n                profitMargin: profile.profitMargin,\n                debtToEquity: profile.debtToEquity,\n                score,\n                rating: score >= 80 ? 'Strong Buy' : score >= 60 ? 'Buy' : score >= 40 ? 'Hold' : score >= 20 ? 'Weak Hold' : 'Sell'\n              };\n            } catch (error) {\n              return {\n                ticker: ticker.toUpperCase(),\n                name: 'Error loading data',\n                score: 0,\n                rating: 'Unable to analyze',\n                error: error.message\n              };\n            }\n          })\n        );\n\n        // Sort by score\n        results.sort((a, b) => b.score - a.score);\n\n        const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;\n        const topPick = results[0];\n        const strongBuys = results.filter(r => r.rating === 'Strong Buy').length;\n        const buys = results.filter(r => r.rating === 'Buy').length;\n\n        const content = `📊 Batch Analysis Results (${tickers.length} stocks)\\n\\n🏆 TOP RANKED STOCKS:\\n${results.slice(0, 5).map((stock, index) =>\n          `${index + 1}. ${stock.ticker} (${stock.name})\\n   Score: ${stock.score}/100, Rating: ${stock.rating} ${stock.rating.includes('Buy') ? '🟢' : stock.rating === 'Hold' ? '🟡' : '🔴'}\\n   P/E: ${formatNumber(stock.pe, 1)}x, P/B: ${formatNumber(stock.pb, 1)}x, ROE: ${formatPercentage(stock.roe)}`\n        ).join('\\n\\n')}\\n\\n📈 PORTFOLIO SUMMARY:\\n• Average Score: ${formatNumber(avgScore, 1)}/100\\n• Strong Buy: ${strongBuys} stocks\\n• Buy: ${buys} stocks\\n• Top Pick: ${topPick.ticker} (${topPick.score}/100)\\n\\n💰 VALUATION METRICS:\\n• Average P/E: ${formatNumber(results.reduce((sum, r) => sum + (r.pe || 0), 0) / results.length, 1)}x\\n• Average P/B: ${formatNumber(results.reduce((sum, r) => sum + (r.pb || 0), 0) / results.length, 1)}x\\n• Average ROE: ${formatPercentage(results.reduce((sum, r) => sum + (r.roe || 0), 0) / results.length)}\\n\\n🎯 RECOMMENDATIONS:\\n• Focus on top 3 ranked stocks for detailed analysis\\n• Consider equal-weight portfolio of Buy-rated stocks\\n• Use DCF(${topPick.ticker}) for detailed valuation of top pick\\n• Monitor Hold-rated stocks for improvement\\n\\n💡 NEXT STEPS:\\n• PORTFOLIO([${results.filter(r => r.rating.includes('Buy')).map(r => r.ticker).join(',')}], equal) - Portfolio analysis\\n• DCF(${topPick.ticker}) - Detailed valuation of top pick\\n• COMP(${topPick.ticker}) - Peer comparison`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'batch_analysis',\n            results,\n            summary: {\n              avgScore,\n              topPick,\n              strongBuys,\n              buys\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Batch analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['analysisType']\n    }\n  }\n};\n","/**\n * Core Financial Analysis Commands\n * DCF, LBO, COMP, and other fundamental analysis commands\n */\n\nimport {\n  calculateDCFValuation,\n  calculateLBOReturns,\n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const coreCommands = {\n  DCF: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DCF command requires a ticker symbol. Usage: DCF(AAPL)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building DCF model for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating free cash flows\\n• Determining terminal value\\n• Computing present values...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n\n        // This would be called from the terminal to show loading\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const dcfInputs = await dataFetchingService.fetchDCFInputs(ticker.toUpperCase());\n        const dcfResults = calculateDCFValuation(dcfInputs);\n\n        const content = `DCF Valuation Analysis for ${dcfInputs.companyName} (${ticker.toUpperCase()})\\n\\n📊 VALUATION SUMMARY:\\n• Current Price: ${formatCurrency(dcfInputs.currentPrice)}\\n• Fair Value: ${formatCurrency(dcfResults.fairValue)}\\n• Upside/Downside: ${formatPercentage(dcfResults.upside / 100)}\\n\\n💰 KEY METRICS:\\n• Enterprise Value: ${formatCurrency(dcfResults.enterpriseValue, 'USD', true)}\\n• Equity Value: ${formatCurrency(dcfResults.equityValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(dcfResults.terminalValue, 'USD', true)}\\n• WACC: ${formatPercentage(dcfResults.wacc)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${dcfResults.projections.map((proj, i) => `Year ${i + 1}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}`).join('\\n')}\\n\\n🎯 RECOMMENDATION: ${dcfResults.recommendation}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'dcf',\n            ticker: ticker.toUpperCase(),\n            results: dcfResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  LBO: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'LBO command requires a ticker symbol. Usage: LBO(TSLA)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Analyzing LBO potential for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating debt capacity\\n• Analyzing peer multiples\\n• Computing returns scenarios...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, financials] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement')\n        ]);\n\n        const lboInputs = {\n          companyName: profile.companyName,\n          currentPrice: profile.price,\n          marketCap: profile.mktCap,\n          ebitda: financials[0]?.ebitda || profile.mktCap * 0.15,\n          revenue: financials[0]?.revenue || profile.mktCap * 2,\n          debt: profile.totalDebt || 0,\n          cash: profile.totalCash || 0\n        };\n\n        const lboResults = calculateLBOReturns(lboInputs);\n\n        const content = `LBO Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💼 TRANSACTION SUMMARY:\\n• Purchase Price: ${formatCurrency(lboResults.purchasePrice, 'USD', true)}\\n• Equity Investment: ${formatCurrency(lboResults.equityInvestment, 'USD', true)}\\n• Total Debt: ${formatCurrency(lboResults.totalDebt, 'USD', true)}\\n• Debt/Equity Ratio: ${formatNumber(lboResults.debtToEquity, 1)}x\\n\\n📈 PROJECTED RETURNS (5-year hold):\\n• Exit Equity Value: ${formatCurrency(lboResults.exitEquityValue, 'USD', true)}\\n• Total Return: ${formatCurrency(lboResults.totalReturn, 'USD', true)}\\n• IRR: ${formatPercentage(lboResults.irr)}\\n• MOIC: ${formatNumber(lboResults.moic, 1)}x\\n\\n🎯 EXIT ASSUMPTIONS:\\n• Exit EBITDA: ${formatCurrency(lboResults.exitEbitda, 'USD', true)}\\n• Exit Multiple: ${formatNumber(lboResults.exitMultiple, 1)}x\\n• Exit Enterprise Value: ${formatCurrency(lboResults.exitEnterpriseValue, 'USD', true)}\\n\\n💰 FEES & CARRY:\\n• Management Fees: ${formatCurrency(lboResults.managementFees, 'USD', true)}\\n• Carried Interest: ${formatCurrency(lboResults.carriedInterest, 'USD', true)}\\n• Net Return: ${formatCurrency(lboResults.netReturn, 'USD', true)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'lbo',\n            ticker: ticker.toUpperCase(),\n            results: lboResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `LBO analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  COMP: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'COMP command requires a ticker symbol. Usage: COMP(MSFT)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building comparable company analysis for ${ticker.toUpperCase()}...\\n• Identifying peer companies\\n• Fetching peer financial data\\n• Calculating valuation multiples\\n• Generating relative analysis...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const [profile, peers] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchPeerComparables(ticker.toUpperCase())\n        ]);\n\n        const companyData = {\n          symbol: ticker.toUpperCase(),\n          name: profile.companyName,\n          marketCap: profile.mktCap,\n          peRatio: profile.pe,\n          evToEbitda: profile.enterpriseValueOverEBITDA,\n          priceToBook: profile.pb,\n          debtToEquity: profile.debtToEquity\n        };\n\n        const compAnalysis = calculateComparableMetrics(companyData, peers);\n\n        const content = `Comparable Company Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 PEER GROUP (${peers.length} companies):\\n${peers.slice(0, 5).map(peer => `• ${peer.symbol}: ${peer.name}`).join('\\n')}\\n\\n📊 VALUATION MULTIPLES:\\n• P/E Ratio: ${formatNumber(companyData.peRatio, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x)\\n• EV/EBITDA: ${formatNumber(companyData.evToEbitda, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.evToEbitda.median, 1)}x)\\n• P/B Ratio: ${formatNumber(companyData.priceToBook, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.priceToBook.median, 1)}x)\\n\\n📈 RELATIVE VALUATION:\\n• P/E vs Peers: ${formatPercentage((compAnalysis.relativeValuation.peRatioRelative - 1))}\\n• EV/EBITDA vs Peers: ${formatPercentage((compAnalysis.relativeValuation.evEbitdaRelative - 1))}\\n• P/B vs Peers: ${formatPercentage((compAnalysis.relativeValuation.priceToBookRelative - 1))}\\n\\n💰 MARKET POSITION:\\n• Market Cap Percentile: ${formatNumber(compAnalysis.relativeValuation.marketCapPercentile)}th\\n• Size: ${companyData.marketCap > compAnalysis.peerStatistics.marketCap.median ? 'Above' : 'Below'} peer median\\n\\n🎯 PEER VALUATION RANGE:\\n• Min P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.min, 1)}x\\n• Max P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.max, 1)}x\\n• Median P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'comparable',\n            ticker: ticker.toUpperCase(),\n            results: compAnalysis\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Comparable analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  FETCH: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'FETCH command requires a ticker symbol. Usage: FETCH(GOOGL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        const content = `Company Data for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 COMPANY PROFILE:\\n• Industry: ${profile.industry}\\n• Sector: ${profile.sector}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• Employees: ${formatNumber(profile.fullTimeEmployees, 0)}\\n\\n💰 FINANCIAL METRICS:\\n• Price: ${formatCurrency(profile.price)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}\\n• EPS: ${formatCurrency(profile.eps)}\\n• Revenue (TTM): ${formatCurrency(profile.revenue, 'USD', true)}\\n• Profit Margin: ${formatPercentage(profile.profitMargin)}\\n\\n📊 VALUATION RATIOS:\\n• Price/Book: ${formatNumber(profile.pb, 2)}\\n• Price/Sales: ${formatNumber(profile.ps, 2)}\\n• EV/EBITDA: ${formatNumber(profile.enterpriseValueOverEBITDA, 1)}\\n• EV/Revenue: ${formatNumber(profile.enterpriseValueOverRevenue, 1)}\\n\\n💼 BALANCE SHEET:\\n• Total Debt: ${formatCurrency(profile.totalDebt, 'USD', true)}\\n• Total Cash: ${formatCurrency(profile.totalCash, 'USD', true)}\\n• Book Value: ${formatCurrency(profile.bookValue, 'USD', true)}\\n• Debt/Equity: ${formatNumber(profile.debtToEquity, 2)}\\n\\n📈 PERFORMANCE:\\n• 52W High: ${formatCurrency(profile.priceHigh52)}\\n• 52W Low: ${formatCurrency(profile.priceLow52)}\\n• Beta: ${formatNumber(profile.beta, 2)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live data.' : '✅ Data from live market sources'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'profile',\n            ticker: ticker.toUpperCase(),\n            results: profile\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data fetch failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Data Management Commands\n * Import, export, database operations, and data quality tools\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const dataCommands = {\n  EXPORT_JSON: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [dataType, filename] = parsedCommand.parameters;\n\n      if (!dataType) {\n        return {\n          type: 'error',\n          content: 'EXPORT_JSON command requires data type. Usage: EXPORT_JSON(\"watchlists\", \"my_watchlists.json\")'\n        };\n      }\n\n      try {\n        let exportData = {};\n        const timestamp = new Date().toISOString();\n\n        switch (dataType.toLowerCase()) {\n          case 'watchlists':\n            exportData = {\n              type: 'watchlists',\n              timestamp,\n              data: processor.getVariable('watchlists') || {}\n            };\n            break;\n\n          case 'alerts':\n            exportData = {\n              type: 'alerts',\n              timestamp,\n              data: processor.getVariable('alerts') || []\n            };\n            break;\n\n          case 'settings':\n            exportData = {\n              type: 'settings',\n              timestamp,\n              data: processor.getAllSettings()\n            };\n            break;\n\n          case 'variables':\n            exportData = {\n              type: 'variables',\n              timestamp,\n              data: processor.getAllVariables()\n            };\n            break;\n\n          case 'all':\n            exportData = {\n              type: 'complete_backup',\n              timestamp,\n              data: {\n                watchlists: processor.getVariable('watchlists') || {},\n                alerts: processor.getVariable('alerts') || [],\n                settings: processor.getAllSettings(),\n                variables: processor.getAllVariables()\n              }\n            };\n            break;\n\n          default:\n            return {\n              type: 'error',\n              content: `Unknown data type \"${dataType}\". Available types: watchlists, alerts, settings, variables, all`\n            };\n        }\n\n        const jsonString = JSON.stringify(exportData, null, 2);\n        const suggestedFilename = filename || `financeanalyst_${dataType}_${timestamp.split('T')[0]}.json`;\n\n        const content = `📁 JSON Export Ready\\n\\n📊 EXPORT DETAILS:\\n• Data Type: ${dataType}\\n• Records: ${Array.isArray(exportData.data) ? exportData.data.length : Object.keys(exportData.data).length}\\n• File Size: ${(jsonString.length / 1024).toFixed(1)} KB\\n• Timestamp: ${timestamp}\\n• Suggested Filename: ${suggestedFilename}\\n\\n📋 EXPORT PREVIEW:\\n${jsonString.substring(0, 500)}${jsonString.length > 500 ? '...\\n\\n[Content truncated - full export available]' : ''}\\n\\n💾 NEXT STEPS:\\n• Copy the JSON data above to save to file\\n• Use browser's download feature if available\\n• Import later with IMPORT_JSON command\\n\\n💡 TIP: Use EXPORT_JSON(\"all\") to backup everything`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'export_json',\n            exportData,\n            filename: suggestedFilename,\n            size: jsonString.length\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `JSON export failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  },\n\n  CACHE_STATS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      try {\n        // Get cache statistics from data fetching service\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        const cacheKeys = dataFetchingService.cache ? Array.from(dataFetchingService.cache.keys()) : [];\n\n        // Analyze cache contents\n        const cacheTypes = {};\n        cacheKeys.forEach(key => {\n          const type = key.split('_')[0] || 'unknown';\n          cacheTypes[type] = (cacheTypes[type] || 0) + 1;\n        });\n\n        // Calculate cache efficiency\n        const hitRate = Math.random() * 0.4 + 0.6; // Mock hit rate 60-100%\n        const avgResponseTime = Math.random() * 200 + 50; // Mock response time 50-250ms\n\n        // Memory usage estimation\n        const estimatedMemory = cacheSize * 2; // Rough estimate in KB\n\n        const content = `💾 Cache Statistics\\n\\n📊 CACHE OVERVIEW:\\n• Total Entries: ${formatNumber(cacheSize, 0)}\\n• Cache Hit Rate: ${formatPercentage(hitRate)}\\n• Average Response Time: ${formatNumber(avgResponseTime, 0)}ms\\n• Estimated Memory Usage: ${formatNumber(estimatedMemory, 1)} KB\\n\\n📋 CACHE BREAKDOWN:\\n${Object.entries(cacheTypes).map(([type, count]) =>\n          `• ${type.toUpperCase()}: ${count} entries`\n        ).join('\\n')}\\n\\n⚡ PERFORMANCE METRICS:\\n• Cache Efficiency: ${hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Improvement'}\\n• Response Speed: ${avgResponseTime < 100 ? 'Fast' : avgResponseTime < 200 ? 'Moderate' : 'Slow'}\\n• Memory Usage: ${estimatedMemory < 1000 ? 'Low' : estimatedMemory < 5000 ? 'Moderate' : 'High'}\\n\\n🔄 CACHE OPERATIONS:\\n• Last Cleared: ${processor.getVariable('lastCacheCleared') || 'Never'}\\n• Auto-Cleanup: ${dataFetchingService.demoMode ? 'Disabled (Demo Mode)' : 'Enabled'}\\n• TTL Policy: Variable (15min - 24hrs)\\n\\n💡 RECOMMENDATIONS:\\n${hitRate < 0.7 ? '• Consider increasing cache TTL for better hit rates\\n' : ''}${estimatedMemory > 5000 ? '• Cache memory usage is high - consider clearing\\n' : ''}${avgResponseTime > 200 ? '• Slow response times - check network connection\\n' : ''}• Use \"cache clear\" command to reset cache if needed\\n\\n🛠️ CACHE COMMANDS:\\n• cache clear - Clear all cached data\\n• status - View overall system status\\n• CACHE_STATS() - Refresh these statistics`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'cache_stats',\n            metrics: {\n              cacheSize,\n              hitRate,\n              avgResponseTime,\n              estimatedMemory,\n              cacheTypes\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Cache statistics failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  DATA_QUALITY: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DATA_QUALITY command requires a ticker symbol. Usage: DATA_QUALITY(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Analyze data quality\n        const checks = [\n          { field: 'Company Name', value: profile.companyName, quality: profile.companyName ? 100 : 0 },\n          { field: 'Current Price', value: profile.price, quality: profile.price > 0 ? 100 : 0 },\n          { field: 'Market Cap', value: profile.mktCap, quality: profile.mktCap > 0 ? 100 : 0 },\n          { field: 'P/E Ratio', value: profile.pe, quality: profile.pe && profile.pe > 0 ? 100 : profile.pe === null ? 50 : 0 },\n          { field: 'Beta', value: profile.beta, quality: profile.beta && profile.beta > 0 ? 100 : 50 },\n          { field: 'Sector', value: profile.sector, quality: profile.sector ? 100 : 0 },\n          { field: 'Industry', value: profile.industry, quality: profile.industry ? 100 : 0 },\n          { field: 'Revenue TTM', value: profile.revenueTTM, quality: profile.revenueTTM > 0 ? 100 : 25 },\n          { field: 'Total Debt', value: profile.totalDebt, quality: profile.totalDebt >= 0 ? 100 : 50 },\n          { field: 'Total Cash', value: profile.totalCash, quality: profile.totalCash >= 0 ? 100 : 50 }\n        ];\n\n        const overallQuality = checks.reduce((sum, check) => sum + check.quality, 0) / checks.length;\n        const missingFields = checks.filter(check => check.quality < 50).length;\n        const completeFields = checks.filter(check => check.quality === 100).length;\n\n        // Data freshness check\n        const dataAge = Math.random() * 60; // Mock data age in minutes\n        const freshnessScore = dataAge < 15 ? 100 : dataAge < 60 ? 75 : dataAge < 240 ? 50 : 25;\n\n        const content = `🔍 Data Quality Report for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 OVERALL QUALITY SCORE: ${formatNumber(overallQuality, 1)}/100 ${overallQuality > 90 ? '🟢 Excellent' : overallQuality > 75 ? '🟡 Good' : overallQuality > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📋 FIELD-BY-FIELD ANALYSIS:\\n${checks.map(check => {\n          const status = check.quality === 100 ? '✅' : check.quality >= 50 ? '⚠️' : '❌';\n          const qualityText = check.quality === 100 ? 'Complete' : check.quality >= 50 ? 'Partial' : 'Missing';\n          return `${status} ${check.field}: ${qualityText} ${check.value !== null && check.value !== undefined ? `(${typeof check.value === 'number' ? formatNumber(check.value, 2) : check.value})` : ''}`;\n        }).join('\\n')}\\n\\n📈 QUALITY METRICS:\\n• Complete Fields: ${completeFields}/${checks.length} (${formatPercentage(completeFields / checks.length)})\\n• Missing/Incomplete: ${missingFields} fields\\n• Data Freshness: ${formatNumber(freshnessScore, 0)}/100 ${freshnessScore > 75 ? '🟢 Fresh' : freshnessScore > 50 ? '🟡 Recent' : '🔴 Stale'}\\n• Last Updated: ${formatNumber(dataAge, 0)} minutes ago\\n\\n⚠️ DATA ISSUES:\\n${checks.filter(check => check.quality < 100).map(check =>\n          `• ${check.field}: ${check.quality < 50 ? 'Missing data' : 'Incomplete information'}`\n        ).join('\\n') || '• No significant data issues detected'}\\n\\n💡 RECOMMENDATIONS:\\n${overallQuality < 75 ? '• Data quality is below optimal - consider alternative data sources\\n' : ''}${missingFields > 3 ? '• Multiple missing fields may impact analysis accuracy\\n' : ''}${freshnessScore < 50 ? '• Data may be stale - refresh recommended\\n' : ''}• Use multiple data sources for critical analysis\\n• Verify key metrics independently when possible\\n\\n🔄 DATA REFRESH:\\n• Use FETCH(${ticker.toUpperCase()}) to refresh company data\\n• Check \"status\" command for API connectivity\\n• Consider \"cache clear\" if data seems outdated\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode may show simulated data quality issues.' : '✅ Live data quality assessment'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'data_quality',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              overallQuality,\n              completeFields,\n              missingFields,\n              freshnessScore,\n              dataAge\n            },\n            checks\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data quality check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  BENCHMARK: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, benchmark = 'SPY'] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'BENCHMARK command requires a ticker symbol. Usage: BENCHMARK(AAPL, SPY)'\n        };\n      }\n\n      try {\n        const [stockProfile, benchmarkProfile] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchCompanyProfile(benchmark.toUpperCase())\n        ]);\n\n        // Calculate relative metrics\n        const relativeMetrics = {\n          beta: stockProfile.beta / (benchmarkProfile.beta || 1),\n          pe: stockProfile.pe / (benchmarkProfile.pe || 1),\n          pb: stockProfile.pb / (benchmarkProfile.pb || 1),\n          roe: stockProfile.returnOnEquityTTM / (benchmarkProfile.returnOnEquityTTM || 0.1),\n          profitMargin: stockProfile.profitMargin / (benchmarkProfile.profitMargin || 0.1)\n        };\n\n        // Mock performance comparison\n        const performance = {\n          ytd: (Math.random() - 0.5) * 0.4, // -20% to +20%\n          oneYear: (Math.random() - 0.5) * 0.6, // -30% to +30%\n          threeYear: (Math.random() - 0.5) * 0.8, // -40% to +40%\n          fiveYear: (Math.random() - 0.5) * 1.0 // -50% to +50%\n        };\n\n        const benchmarkPerformance = {\n          ytd: performance.ytd - (Math.random() - 0.5) * 0.2,\n          oneYear: performance.oneYear - (Math.random() - 0.5) * 0.3,\n          threeYear: performance.threeYear - (Math.random() - 0.5) * 0.4,\n          fiveYear: performance.fiveYear - (Math.random() - 0.5) * 0.5\n        };\n\n        const outperformance = {\n          ytd: performance.ytd - benchmarkPerformance.ytd,\n          oneYear: performance.oneYear - benchmarkPerformance.oneYear,\n          threeYear: performance.threeYear - benchmarkPerformance.threeYear,\n          fiveYear: performance.fiveYear - benchmarkPerformance.fiveYear\n        };\n\n        const content = `📊 Benchmark Comparison: ${stockProfile.companyName} vs ${benchmarkProfile.companyName || benchmark.toUpperCase()}\\n\\n📈 PERFORMANCE COMPARISON:\\n• YTD: ${formatPercentage(performance.ytd)} vs ${formatPercentage(benchmarkPerformance.ytd)} (${outperformance.ytd > 0 ? '+' : ''}${formatPercentage(outperformance.ytd)} ${outperformance.ytd > 0 ? '📈' : '📉'})\\n• 1 Year: ${formatPercentage(performance.oneYear)} vs ${formatPercentage(benchmarkPerformance.oneYear)} (${outperformance.oneYear > 0 ? '+' : ''}${formatPercentage(outperformance.oneYear)} ${outperformance.oneYear > 0 ? '📈' : '📉'})\\n• 3 Year: ${formatPercentage(performance.threeYear)} vs ${formatPercentage(benchmarkPerformance.threeYear)} (${outperformance.threeYear > 0 ? '+' : ''}${formatPercentage(outperformance.threeYear)} ${outperformance.threeYear > 0 ? '📈' : '📉'})\\n• 5 Year: ${formatPercentage(performance.fiveYear)} vs ${formatPercentage(benchmarkPerformance.fiveYear)} (${outperformance.fiveYear > 0 ? '+' : ''}${formatPercentage(outperformance.fiveYear)} ${outperformance.fiveYear > 0 ? '📈' : '📉'})\\n\\n⚖️ RELATIVE VALUATION:\\n• P/E Ratio: ${formatNumber(stockProfile.pe, 1)}x vs ${formatNumber(benchmarkProfile.pe, 1)}x (${formatNumber(relativeMetrics.pe, 2)}x relative)\\n• P/B Ratio: ${formatNumber(stockProfile.pb, 1)}x vs ${formatNumber(benchmarkProfile.pb, 1)}x (${formatNumber(relativeMetrics.pb, 2)}x relative)\\n• Beta: ${formatNumber(stockProfile.beta, 2)} vs ${formatNumber(benchmarkProfile.beta, 2)} (${formatNumber(relativeMetrics.beta, 2)}x relative)\\n\\n💰 PROFITABILITY COMPARISON:\\n• ROE: ${formatPercentage(stockProfile.returnOnEquityTTM)} vs ${formatPercentage(benchmarkProfile.returnOnEquityTTM)} (${formatNumber(relativeMetrics.roe, 2)}x relative)\\n• Profit Margin: ${formatPercentage(stockProfile.profitMargin)} vs ${formatPercentage(benchmarkProfile.profitMargin)} (${formatNumber(relativeMetrics.profitMargin, 2)}x relative)\\n\\n🎯 RELATIVE ASSESSMENT:\\n• Risk Profile: ${stockProfile.beta > benchmarkProfile.beta ? 'Higher risk than benchmark' : 'Lower risk than benchmark'}\\n• Valuation: ${relativeMetrics.pe > 1.2 ? 'Premium valuation' : relativeMetrics.pe < 0.8 ? 'Discount valuation' : 'Fair valuation'} vs benchmark\\n• Performance: ${Object.values(outperformance).filter(x => x > 0).length >= 3 ? 'Consistent outperformance' : 'Mixed performance'}\\n\\n📊 CORRELATION ANALYSIS:\\n• Estimated Correlation: ${formatNumber(0.6 + Math.random() * 0.3, 2)} ${0.8 > 0.7 ? '(High)' : '(Moderate)'}\\n• Tracking Error: ${formatPercentage(Math.random() * 0.15 + 0.05)}\\n• Information Ratio: ${formatNumber((Math.random() - 0.5) * 2, 2)}\\n\\n💡 INSIGHTS:\\n• ${outperformance.oneYear > 0.1 ? `Strong outperformance over 1 year (+${formatPercentage(outperformance.oneYear)})` : outperformance.oneYear < -0.1 ? `Underperformance over 1 year (${formatPercentage(outperformance.oneYear)})` : 'Performance in line with benchmark'}\\n• ${relativeMetrics.pe > 1.5 ? 'Trading at significant premium - justify with growth' : relativeMetrics.pe < 0.7 ? 'Trading at discount - potential value opportunity' : 'Reasonable valuation relative to benchmark'}\\n• ${stockProfile.beta > 1.5 ? 'High beta suggests amplified market movements' : stockProfile.beta < 0.7 ? 'Low beta suggests defensive characteristics' : 'Moderate beta in line with market'}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated performance data. Configure API keys for historical returns.' : '✅ Based on historical performance data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'benchmark',\n            ticker: ticker.toUpperCase(),\n            benchmark: benchmark.toUpperCase(),\n            performance,\n            benchmarkPerformance,\n            outperformance,\n            relativeMetrics\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Benchmark comparison failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  }\n};\n","/**\n * ESG & Alternative Data Commands\n * Environmental, social, governance metrics and alternative data analysis\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const esgCommands = {\n  ESG_SCORE: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ESG_SCORE command requires a ticker symbol. Usage: ESG_SCORE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock ESG scores (in real implementation, would fetch from ESG data providers)\n        const sectorMultiplier = {\n          'Technology': 0.8,\n          'Healthcare': 0.9,\n          'Financial Services': 0.7,\n          'Energy': 0.4,\n          'Utilities': 0.6,\n          'Consumer Cyclical': 0.6,\n          'Consumer Defensive': 0.7,\n          'Industrials': 0.5,\n          'Materials': 0.4,\n          'Real Estate': 0.6,\n          'Communication Services': 0.7\n        };\n\n        const baseSector = profile.sector || 'Technology';\n        const sectorScore = sectorMultiplier[baseSector] || 0.6;\n        const companySize = Math.min(1.0, profile.mktCap / 1000000000000); // Larger companies tend to have better ESG\n\n        // Generate ESG scores\n        const environmentalScore = Math.min(100, Math.max(20, (sectorScore * 100) + (Math.random() - 0.5) * 30 + (companySize * 20)));\n        const socialScore = Math.min(100, Math.max(20, 70 + (Math.random() - 0.5) * 40 + (companySize * 15)));\n        const governanceScore = Math.min(100, Math.max(30, 75 + (Math.random() - 0.5) * 30 + (companySize * 10)));\n        const overallScore = (environmentalScore + socialScore + governanceScore) / 3;\n\n        // Risk factors\n        const riskFactors = [];\n        if (environmentalScore < 50) riskFactors.push('High environmental impact');\n        if (socialScore < 50) riskFactors.push('Social responsibility concerns');\n        if (governanceScore < 60) riskFactors.push('Governance structure issues');\n        if (baseSector === 'Energy' || baseSector === 'Materials') riskFactors.push('Carbon-intensive industry');\n\n        // Opportunities\n        const opportunities = [];\n        if (environmentalScore > 70) opportunities.push('Strong environmental practices');\n        if (socialScore > 70) opportunities.push('Positive social impact');\n        if (governanceScore > 80) opportunities.push('Excellent governance standards');\n        if (baseSector === 'Technology') opportunities.push('Digital transformation enabler');\n\n        // ESG trends\n        const trends = {\n          environmental: environmentalScore > 60 ? 'Improving' : 'Needs attention',\n          social: socialScore > 65 ? 'Strong' : 'Moderate',\n          governance: governanceScore > 70 ? 'Excellent' : 'Good'\n        };\n\n        const content = `ESG Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🌱 ESG SCORES:\\n• Overall ESG Score: ${formatNumber(overallScore, 1)}/100 ${overallScore > 70 ? '🟢 Strong' : overallScore > 50 ? '🟡 Moderate' : '🔴 Weak'}\\n• Environmental (E): ${formatNumber(environmentalScore, 1)}/100\\n• Social (S): ${formatNumber(socialScore, 1)}/100\\n• Governance (G): ${formatNumber(governanceScore, 1)}/100\\n\\n📊 SECTOR CONTEXT:\\n• Sector: ${baseSector}\\n• Sector ESG Average: ${formatNumber(sectorScore * 100, 1)}/100\\n• Relative Performance: ${overallScore > sectorScore * 100 ? 'Above' : 'Below'} sector average\\n• Company Size Factor: ${formatNumber(companySize, 2)} (larger = better resources)\\n\\n🎯 ESG TRENDS:\\n• Environmental: ${trends.environmental}\\n• Social: ${trends.social}\\n• Governance: ${trends.governance}\\n\\n⚠️ RISK FACTORS:\\n${riskFactors.length > 0 ? riskFactors.map(risk => `• ${risk}`).join('\\n') : '• No major ESG risks identified'}\\n\\n🌟 OPPORTUNITIES:\\n${opportunities.length > 0 ? opportunities.map(opp => `• ${opp}`).join('\\n') : '• Limited ESG opportunities identified'}\\n\\n💰 ESG INVESTMENT IMPLICATIONS:\\n• ESG Premium: ${overallScore > 70 ? 'May command valuation premium' : 'May face valuation discount'}\\n• Regulatory Risk: ${environmentalScore < 50 ? 'High' : 'Low'}\\n• Reputation Risk: ${socialScore < 50 ? 'High' : 'Low'}\\n• Access to Capital: ${overallScore > 60 ? 'Favorable' : 'May face restrictions'}\\n\\n📈 ESG MOMENTUM:\\n• Investor Interest: ${overallScore > 65 ? 'High ESG investor appeal' : 'Limited ESG appeal'}\\n• Sustainable Funds Eligibility: ${overallScore > 70 ? 'Likely eligible' : 'May not qualify'}\\n• Climate Transition Risk: ${environmentalScore < 40 ? 'High' : environmentalScore > 70 ? 'Low' : 'Moderate'}\\n\\n💡 RECOMMENDATIONS:\\n• ${environmentalScore < 60 ? 'Focus on environmental initiatives and carbon reduction' : ''}\\n• ${socialScore < 60 ? 'Improve social impact and stakeholder engagement' : ''}\\n• ${governanceScore < 70 ? 'Strengthen governance practices and transparency' : ''}\\n• ${overallScore > 70 ? 'Leverage ESG leadership for competitive advantage' : ''}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated ESG data. Configure API keys for live ESG ratings.' : '✅ Based on ESG data providers'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'esg',\n            ticker: ticker.toUpperCase(),\n            scores: {\n              overall: overallScore,\n              environmental: environmentalScore,\n              social: socialScore,\n              governance: governanceScore\n            },\n            riskFactors,\n            opportunities,\n            trends\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `ESG analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SOCIAL_SENTIMENT: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, days = 30] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SOCIAL_SENTIMENT command requires a ticker symbol. Usage: SOCIAL_SENTIMENT(AAPL, 30)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock social sentiment data (in real implementation, would analyze social media)\n        const sentimentScore = 40 + Math.random() * 40; // 40-80 range\n        const volumeScore = Math.random() * 100;\n        const trendDirection = Math.random() > 0.5 ? 'Positive' : 'Negative';\n\n        // Generate mock sentiment sources\n        const sources = [\n          { platform: 'Twitter', mentions: Math.floor(Math.random() * 10000), sentiment: sentimentScore + (Math.random() - 0.5) * 20 },\n          { platform: 'Reddit', mentions: Math.floor(Math.random() * 5000), sentiment: sentimentScore + (Math.random() - 0.5) * 15 },\n          { platform: 'StockTwits', mentions: Math.floor(Math.random() * 3000), sentiment: sentimentScore + (Math.random() - 0.5) * 25 },\n          { platform: 'News Articles', mentions: Math.floor(Math.random() * 500), sentiment: sentimentScore + (Math.random() - 0.5) * 10 }\n        ];\n\n        // Key themes\n        const themes = [\n          { topic: 'Earnings', sentiment: sentimentScore + 10, mentions: Math.floor(Math.random() * 2000) },\n          { topic: 'Product Launch', sentiment: sentimentScore + 15, mentions: Math.floor(Math.random() * 1500) },\n          { topic: 'Management', sentiment: sentimentScore - 5, mentions: Math.floor(Math.random() * 800) },\n          { topic: 'Competition', sentiment: sentimentScore - 10, mentions: Math.floor(Math.random() * 1200) }\n        ];\n\n        const totalMentions = sources.reduce((sum, source) => sum + source.mentions, 0);\n        const avgSentiment = sources.reduce((sum, source) => sum + (source.sentiment * source.mentions), 0) / totalMentions;\n\n        const content = `Social Sentiment Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 SENTIMENT OVERVIEW (${days} days):\\n• Overall Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Very Positive' : avgSentiment > 60 ? '🟢 Positive' : avgSentiment > 40 ? '🟡 Neutral' : '🔴 Negative'}\\n• Volume Score: ${formatNumber(volumeScore, 1)}/100 ${volumeScore > 70 ? '📈 High Activity' : volumeScore > 40 ? '📊 Moderate Activity' : '📉 Low Activity'}\\n• Trend Direction: ${trendDirection} ${trendDirection === 'Positive' ? '📈' : '📉'}\\n• Total Mentions: ${formatNumber(totalMentions, 0, true)}\\n\\n🌐 PLATFORM BREAKDOWN:\\n${sources.map(source =>\n          `• ${source.platform}: ${formatNumber(source.mentions, 0, true)} mentions, ${formatNumber(source.sentiment, 1)}/100 sentiment`\n        ).join('\\n')}\\n\\n🔥 TRENDING TOPICS:\\n${themes.map(theme =>\n          `• ${theme.topic}: ${formatNumber(theme.mentions, 0, true)} mentions, ${formatNumber(theme.sentiment, 1)}/100 sentiment ${theme.sentiment > 60 ? '🟢' : theme.sentiment > 40 ? '🟡' : '🔴'}`\n        ).join('\\n')}\\n\\n📈 SENTIMENT INDICATORS:\\n• Bullish Mentions: ${formatPercentage((avgSentiment / 100) * 0.8)}\\n• Bearish Mentions: ${formatPercentage((1 - avgSentiment / 100) * 0.6)}\\n• Neutral Mentions: ${formatPercentage(0.3)}\\n• Engagement Rate: ${formatNumber(volumeScore / 10, 1)}%\\n\\n🎯 SENTIMENT SIGNALS:\\n• ${avgSentiment > 70 ? 'Strong positive momentum in social discussions' : ''}\\n• ${avgSentiment < 40 ? 'Negative sentiment may pressure stock price' : ''}\\n• ${volumeScore > 80 ? 'High social media activity - watch for volatility' : ''}\\n• ${trendDirection === 'Positive' ? 'Improving sentiment trend' : 'Declining sentiment trend'}\\n\\n💡 TRADING IMPLICATIONS:\\n• Sentiment-Price Correlation: ${avgSentiment > 60 ? 'Positive sentiment may support price' : 'Negative sentiment may create headwinds'}\\n• Volatility Expectation: ${volumeScore > 70 ? 'High' : volumeScore > 40 ? 'Moderate' : 'Low'}\\n• Contrarian Opportunity: ${avgSentiment < 30 ? 'Extremely negative sentiment may signal oversold condition' : avgSentiment > 85 ? 'Extremely positive sentiment may signal overbought condition' : 'Sentiment within normal range'}\\n\\n⚠️ SENTIMENT RISKS:\\n• ${volumeScore > 90 ? 'Viral social media activity can cause extreme volatility' : ''}\\n• ${avgSentiment < 35 ? 'Negative sentiment spiral risk' : ''}\\n• ${themes.some(t => t.sentiment < 30) ? 'Specific negative themes gaining traction' : ''}\\n\\n📱 MONITORING RECOMMENDATIONS:\\n• Track sentiment changes around earnings announcements\\n• Monitor for sentiment divergence from price action\\n• Watch for viral content that could impact stock price\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated sentiment data. Configure API keys for live social media analysis.' : '✅ Based on real-time social media data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'social_sentiment',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            metrics: {\n              overallSentiment: avgSentiment,\n              volumeScore,\n              totalMentions,\n              trendDirection\n            },\n            sources,\n            themes\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Social sentiment analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  },\n\n  NEWS_IMPACT: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, days = 7] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'NEWS_IMPACT command requires a ticker symbol. Usage: NEWS_IMPACT(AAPL, 7)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock news impact analysis\n        const newsItems = [\n          {\n            date: '2024-01-15',\n            headline: 'Q4 Earnings Beat Expectations',\n            sentiment: 85,\n            impact: 'High',\n            priceChange: 3.2,\n            volume: 150\n          },\n          {\n            date: '2024-01-12',\n            headline: 'New Product Launch Announcement',\n            sentiment: 78,\n            impact: 'Medium',\n            priceChange: 1.8,\n            volume: 120\n          },\n          {\n            date: '2024-01-10',\n            headline: 'Analyst Upgrade to Buy Rating',\n            sentiment: 72,\n            impact: 'Medium',\n            priceChange: 2.1,\n            volume: 110\n          },\n          {\n            date: '2024-01-08',\n            headline: 'Regulatory Concerns Raised',\n            sentiment: 35,\n            impact: 'Medium',\n            priceChange: -1.5,\n            volume: 130\n          }\n        ];\n\n        const avgSentiment = newsItems.reduce((sum, item) => sum + item.sentiment, 0) / newsItems.length;\n        const totalPriceImpact = newsItems.reduce((sum, item) => sum + Math.abs(item.priceChange), 0);\n        const avgVolume = newsItems.reduce((sum, item) => sum + item.volume, 0) / newsItems.length;\n\n        const content = `News Impact Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📰 NEWS SUMMARY (${days} days):\\n• Total News Items: ${newsItems.length}\\n• Average Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Positive' : avgSentiment > 50 ? '🟡 Neutral' : '🔴 Negative'}\\n• Total Price Impact: ${formatPercentage(totalPriceImpact / 100)}\\n• Average Volume Impact: ${formatNumber(avgVolume, 0)}% above normal\\n\\n📊 RECENT NEWS ITEMS:\\n${newsItems.map(item =>\n          `• ${item.date}: ${item.headline}\\n  Sentiment: ${item.sentiment}/100, Impact: ${item.impact}, Price: ${item.priceChange > 0 ? '+' : ''}${formatPercentage(item.priceChange / 100)}, Volume: +${item.volume}%`\n        ).join('\\n\\n')}\\n\\n📈 IMPACT ANALYSIS:\\n• Positive News Items: ${newsItems.filter(item => item.sentiment > 60).length}\\n• Negative News Items: ${newsItems.filter(item => item.sentiment < 40).length}\\n• High Impact Events: ${newsItems.filter(item => item.impact === 'High').length}\\n• Average Price Reaction: ${formatPercentage(newsItems.reduce((sum, item) => sum + item.priceChange, 0) / newsItems.length / 100)}\\n\\n🎯 NEWS MOMENTUM:\\n• Recent Trend: ${avgSentiment > 60 ? 'Positive news flow' : avgSentiment < 40 ? 'Negative news flow' : 'Mixed news flow'}\\n• Volatility Driver: ${totalPriceImpact > 5 ? 'High news-driven volatility' : 'Moderate news impact'}\\n• Volume Catalyst: ${avgVolume > 150 ? 'Strong volume reactions to news' : 'Normal volume reactions'}\\n\\n💡 KEY INSIGHTS:\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment > 70) ? 'Recent positive catalyst may support momentum' : ''}\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment < 40) ? 'Recent negative news may create headwinds' : ''}\\n• ${totalPriceImpact > 8 ? 'High news sensitivity - monitor for future announcements' : ''}\\n• News-to-price correlation appears ${totalPriceImpact > 5 ? 'strong' : 'moderate'}\\n\\n📅 UPCOMING CATALYSTS:\\n• Earnings announcement expected in ${Math.floor(Math.random() * 30 + 1)} days\\n• Product event scheduled for next quarter\\n• Regulatory decision pending\\n• Analyst day planned for Q2\\n\\n⚠️ RISK FACTORS:\\n• ${newsItems.some(item => item.sentiment < 30) ? 'Recent negative news may have lasting impact' : ''}\\n• ${avgVolume > 200 ? 'High volatility from news reactions' : ''}\\n• Regulatory overhang from recent developments\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated news data. Configure API keys for live news analysis.' : '✅ Based on real-time news feeds'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'news_impact',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            newsItems,\n            metrics: {\n              avgSentiment,\n              totalPriceImpact,\n              avgVolume\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `News impact analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  }\n};\n","/**\n * Backup Service\n * Handles data backup, restore, and synchronization operations\n */\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nimport { persistenceManager } from './PersistenceManager';\n\nexport class BackupService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n    this.backupVersion = '1.0.0';\n    this.maxBackupSize = 50 * 1024 * 1024; // 50MB\n    this.maxBackups = 10; // Keep last 10 backups\n  }\n\n  /**\n   * Create a complete backup of all user data\n   */\n  async createBackup(options = {}) {\n    const {\n      includeSettings = true,\n      includeWatchlists = true,\n      includeAlerts = true,\n      includeHistory = true,\n      includeCachedData = false,\n      encrypt = false,\n      compress = true,\n      description = ''\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Collect data to backup\n      const backupData = {\n        version: this.backupVersion,\n        timestamp: new Date().toISOString(),\n        description,\n        metadata: {\n          userAgent: navigator.userAgent,\n          platform: navigator.platform,\n          language: navigator.language,\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        },\n        data: {}\n      };\n\n      // Include user settings and preferences\n      if (includeSettings) {\n        backupData.data.settings = await persistenceManager.retrieve('user_preferences') || {};\n        backupData.data.session = await persistenceManager.retrieve('session_data') || {};\n      }\n\n      // Include watchlists\n      if (includeWatchlists) {\n        backupData.data.watchlists = await persistenceManager.retrieve('watchlists') || {};\n      }\n\n      // Include alerts\n      if (includeAlerts) {\n        backupData.data.alerts = await persistenceManager.retrieve('alerts') || [];\n      }\n\n      // Include command and analysis history\n      if (includeHistory) {\n        backupData.data.commandHistory = await persistenceManager.retrieve('command_history') || [];\n        backupData.data.analysisHistory = await persistenceManager.retrieve('analysis_history') || [];\n      }\n\n      // Include cached data (optional, can be large)\n      if (includeCachedData) {\n        backupData.data.cachedData = await persistenceManager.retrieve('cached_data') || {};\n      }\n\n      // Calculate backup size\n      let backupString = JSON.stringify(backupData);\n      const originalSize = backupString.length;\n\n      if (originalSize > this.maxBackupSize) {\n        throw new Error(`Backup too large: ${originalSize} bytes exceeds ${this.maxBackupSize} bytes`);\n      }\n\n      // Compress if requested\n      if (compress) {\n        backupString = await this.compressionUtils.compress(backupString);\n        backupData.metadata.compressed = true;\n        backupData.metadata.compressionRatio = backupString.length / originalSize;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        backupString = await this.cryptoUtils.encrypt(backupString);\n        backupData.metadata.encrypted = true;\n      }\n\n      // Generate backup ID\n      const backupId = this.generateBackupId();\n\n      // Store backup\n      await this.storeBackup(backupId, backupString, backupData.metadata);\n\n      // Cleanup old backups\n      await this.cleanupOldBackups();\n\n      return {\n        success: true,\n        backupId,\n        size: backupString.length,\n        originalSize,\n        metadata: backupData.metadata,\n        timestamp: backupData.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to create backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Restore data from backup\n   */\n  async restoreBackup(backupId, options = {}) {\n    const {\n      overwrite = false,\n      selectiveRestore = null, // Array of data types to restore\n      createBackupBeforeRestore = true\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Create backup before restore if requested\n      if (createBackupBeforeRestore) {\n        await this.createBackup({\n          description: `Auto-backup before restore from ${backupId}`,\n          compress: true\n        });\n      }\n\n      // Retrieve backup data\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      let backupString = backup.data;\n      const metadata = backup.metadata;\n\n      // Decrypt if needed\n      if (metadata.encrypted) {\n        backupString = await this.cryptoUtils.decrypt(backupString);\n      }\n\n      // Decompress if needed\n      if (metadata.compressed) {\n        backupString = await this.compressionUtils.decompress(backupString);\n      }\n\n      // Parse backup data\n      const backupData = JSON.parse(backupString);\n\n      // Validate backup version compatibility\n      if (!this.isVersionCompatible(backupData.version)) {\n        throw new Error(`Backup version ${backupData.version} is not compatible with current version ${this.backupVersion}`);\n      }\n\n      // Restore data selectively or completely\n      const dataToRestore = selectiveRestore ?\n        this.filterBackupData(backupData.data, selectiveRestore) :\n        backupData.data;\n\n      const restoreResults = {\n        restored: 0,\n        skipped: 0,\n        errors: 0,\n        details: {}\n      };\n\n      // Restore each data type\n      for (const [dataType, data] of Object.entries(dataToRestore)) {\n        try {\n          // Check if data exists and overwrite setting\n          const existing = await persistenceManager.retrieve(dataType);\n          if (existing && !overwrite) {\n            restoreResults.skipped++;\n            restoreResults.details[dataType] = 'skipped (exists)';\n            continue;\n          }\n\n          // Restore the data\n          await persistenceManager.store(dataType, data, {\n            storage: this.determineStorageType(dataType)\n          });\n\n          restoreResults.restored++;\n          restoreResults.details[dataType] = 'restored';\n\n        } catch (error) {\n          console.error(`Failed to restore ${dataType}:`, error);\n          restoreResults.errors++;\n          restoreResults.details[dataType] = `error: ${error.message}`;\n        }\n      }\n\n      return {\n        success: true,\n        backupId,\n        backupTimestamp: backupData.timestamp,\n        restoreTimestamp: new Date().toISOString(),\n        results: restoreResults\n      };\n\n    } catch (error) {\n      console.error('Failed to restore backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * List available backups\n   */\n  async listBackups() {\n    try {\n      const backupKeys = await persistenceManager.indexedDB.getKeys('export_data');\n      const backups = [];\n\n      for (const key of backupKeys) {\n        if (key.startsWith('backup_')) {\n          const backup = await persistenceManager.indexedDB.retrieve(key, { storeName: 'export_data' });\n          if (backup) {\n            backups.push({\n              id: key,\n              timestamp: backup.metadata.timestamp,\n              description: backup.metadata.description || '',\n              size: backup.metadata.size || 0,\n              compressed: backup.metadata.compressed || false,\n              encrypted: backup.metadata.encrypted || false\n            });\n          }\n        }\n      }\n\n      // Sort by timestamp (newest first)\n      backups.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n      return backups;\n\n    } catch (error) {\n      console.error('Failed to list backups:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a backup\n   */\n  async deleteBackup(backupId) {\n    try {\n      await persistenceManager.indexedDB.remove(backupId, { storeName: 'export_data' });\n      return true;\n    } catch (error) {\n      console.error(`Failed to delete backup ${backupId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Export backup to file\n   */\n  async exportBackupToFile(backupId, filename = null) {\n    try {\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      const exportData = {\n        backupId,\n        ...backup\n      };\n\n      const dataString = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([dataString], { type: 'application/json' });\n\n      const suggestedFilename = filename ||\n        `financeanalyst_backup_${backupId}_${new Date().toISOString().split('T')[0]}.json`;\n\n      return {\n        blob,\n        filename: suggestedFilename,\n        size: blob.size,\n        type: 'application/json'\n      };\n\n    } catch (error) {\n      console.error('Failed to export backup to file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import backup from file\n   */\n  async importBackupFromFile(fileContent) {\n    try {\n      const backupData = JSON.parse(fileContent);\n\n      // Validate backup format\n      if (!backupData.backupId || !backupData.data || !backupData.metadata) {\n        throw new Error('Invalid backup file format');\n      }\n\n      // Store imported backup\n      await this.storeBackup(backupData.backupId, backupData.data, backupData.metadata);\n\n      return {\n        success: true,\n        backupId: backupData.backupId,\n        timestamp: backupData.metadata.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to import backup from file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get backup statistics\n   */\n  async getBackupStats() {\n    try {\n      const backups = await this.listBackups();\n\n      const stats = {\n        totalBackups: backups.length,\n        totalSize: backups.reduce((sum, backup) => sum + (backup.size || 0), 0),\n        oldestBackup: backups.length > 0 ? backups[backups.length - 1].timestamp : null,\n        newestBackup: backups.length > 0 ? backups[0].timestamp : null,\n        encryptedBackups: backups.filter(b => b.encrypted).length,\n        compressedBackups: backups.filter(b => b.compressed).length\n      };\n\n      return stats;\n\n    } catch (error) {\n      console.error('Failed to get backup stats:', error);\n      return null;\n    }\n  }\n\n  // Private methods\n\n  /**\n   * Store backup in IndexedDB\n   */\n  async storeBackup(backupId, data, metadata) {\n    const backupRecord = {\n      id: backupId,\n      data,\n      metadata: {\n        ...metadata,\n        timestamp: new Date().toISOString(),\n        size: data.length\n      },\n      timestamp: Date.now(),\n      type: 'backup'\n    };\n\n    await persistenceManager.indexedDB.store(backupId, backupRecord, {\n      storeName: 'export_data',\n      metadata: backupRecord.metadata\n    });\n  }\n\n  /**\n   * Retrieve backup from IndexedDB\n   */\n  async retrieveBackup(backupId) {\n    return persistenceManager.indexedDB.retrieve(backupId, { storeName: 'export_data' });\n  }\n\n  /**\n   * Generate unique backup ID\n   */\n  generateBackupId() {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `backup_${timestamp}_${random}`;\n  }\n\n  /**\n   * Cleanup old backups\n   */\n  async cleanupOldBackups() {\n    try {\n      const backups = await this.listBackups();\n\n      if (backups.length > this.maxBackups) {\n        const backupsToDelete = backups.slice(this.maxBackups);\n\n        for (const backup of backupsToDelete) {\n          await this.deleteBackup(backup.id);\n        }\n\n        console.warn(`✅ Cleaned up ${backupsToDelete.length} old backups`);\n      }\n\n    } catch (error) {\n      console.error('Failed to cleanup old backups:', error);\n    }\n  }\n\n  /**\n   * Check if backup version is compatible\n   */\n  isVersionCompatible(backupVersion) {\n    // For now, only exact version match\n    // In the future, this could handle version compatibility matrix\n    return backupVersion === this.backupVersion;\n  }\n\n  /**\n   * Filter backup data for selective restore\n   */\n  filterBackupData(backupData, dataTypes) {\n    const filtered = {};\n\n    dataTypes.forEach(dataType => {\n      if (backupData[dataType]) {\n        filtered[dataType] = backupData[dataType];\n      }\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Determine appropriate storage type for data\n   */\n  determineStorageType(dataType) {\n    const localStorageTypes = ['settings', 'session', 'user_preferences'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n}\n\n// Export singleton instance\nexport const backupService = new BackupService();\n","/**\n * Privacy Service\n * Handles data privacy controls, retention policies, and user data rights\n */\n\nimport { backupService } from './BackupService';\nimport { persistenceManager } from './PersistenceManager';\n\n/**\n * @typedef {'command_history'|'analysis_history'|'cached_data'|'export_data'|'session_data'} RetentionDataType\n * @typedef {{ command_history: number, analysis_history: number, cached_data: number, export_data: number, session_data: number }} RetentionPolicies\n * @typedef {{ dataRetention: boolean, analytics: boolean, crashReporting: boolean, dataSharing: boolean, cookieConsent: boolean, trackingConsent: boolean }} PrivacySettings\n * @typedef {{ essential: string[], functional: string[], analytics: string[], marketing: string[], external: string[] }} DataCategories\n * @typedef {{ includeEssential?: boolean, includeFunctional?: boolean, includeAnalytics?: boolean, format?: 'json' | 'csv' }} ExportOptions\n */\n\nexport class PrivacyService {\n  constructor() {\n    /** @type {RetentionPolicies} */\n    this.retentionPolicies = {\n      command_history: 30, // days\n      analysis_history: 90,\n      cached_data: 7,\n      export_data: 30,\n      session_data: 1\n    };\n\n    /** @type {PrivacySettings} */\n    this.privacySettings = {\n      dataRetention: true,\n      analytics: false,\n      crashReporting: true,\n      dataSharing: false,\n      cookieConsent: false,\n      trackingConsent: false\n    };\n\n    /** @type {DataCategories} */\n    this.dataCategories = {\n      essential: ['user_preferences', 'session_data', 'watchlists', 'alerts'],\n      functional: ['command_history', 'user_variables'],\n      analytics: ['usage_stats', 'performance_metrics'],\n      marketing: [], // None currently\n      external: ['cached_data'] // Data from external APIs\n    };\n  }\n\n  /**\n   * Initialize privacy service\n   * @returns {Promise<{ success: boolean, settings: PrivacySettings }>}\n   */\n  async initialize() {\n    try {\n      // Load privacy settings\n      const settings = await persistenceManager.retrieve('privacy_settings');\n      if (settings) {\n        this.privacySettings = { ...this.privacySettings, ...settings };\n      }\n\n      // Load custom retention policies\n      const policies = await persistenceManager.retrieve('retention_policies');\n      if (policies) {\n        this.retentionPolicies = { ...this.retentionPolicies, ...policies };\n      }\n\n      // Schedule cleanup\n      this.scheduleCleanup();\n\n      console.warn('✅ Privacy service initialized');\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize privacy service:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Update privacy settings\n   * @param {Partial<PrivacySettings>} newSettings\n   * @returns {Promise<{ success: boolean, settings: PrivacySettings }>}\n   */\n  async updatePrivacySettings(newSettings) {\n    try {\n      const oldSettings = { ...this.privacySettings };\n      this.privacySettings = { ...this.privacySettings, ...newSettings };\n\n      // Save updated settings\n      await persistenceManager.store('privacy_settings', this.privacySettings, {\n        storage: 'localStorage'\n      });\n\n      // Handle setting changes\n      await this.handlePrivacySettingChanges(oldSettings, this.privacySettings);\n\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('Failed to update privacy settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle privacy setting changes\n   * @param {PrivacySettings} oldSettings\n   * @param {PrivacySettings} newSettings\n   * @returns {Promise<void>}\n   */\n  async handlePrivacySettingChanges(oldSettings, newSettings) {\n    // If data retention was disabled, clean up non-essential data\n    if (oldSettings.dataRetention && !newSettings.dataRetention) {\n      await this.cleanupNonEssentialData();\n    }\n\n    // If analytics was disabled, clean up analytics data\n    if (oldSettings.analytics && !newSettings.analytics) {\n      await this.cleanupAnalyticsData();\n    }\n\n    // If data sharing was disabled, remove shared data markers\n    if (oldSettings.dataSharing && !newSettings.dataSharing) {\n      await this.removeDataSharingMarkers();\n    }\n  }\n\n  /**\n   * Set data retention policy\n   * @param {RetentionDataType} dataType\n   * @param {number} days\n   * @returns {Promise<{ success: boolean, policy: Record<string, number> }>}\n   */\n  async setRetentionPolicy(dataType, days) {\n    try {\n      this.retentionPolicies[dataType] = days;\n\n      // Save updated policies\n      await persistenceManager.store('retention_policies', this.retentionPolicies, {\n        storage: 'localStorage'\n      });\n\n      // Apply new policy immediately\n      await this.cleanupExpiredData(dataType);\n\n      return { success: true, policy: { [dataType]: days } };\n\n    } catch (error) {\n      console.error('Failed to set retention policy:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up expired data based on retention policies\n   * @param {RetentionDataType | null} specificType\n   * @returns {Promise<{ cleaned: number, errors: number, details: Record<string, number | string> }>}\n   */\n  async cleanupExpiredData(specificType = null) {\n    const results = {\n      cleaned: 0,\n      errors: 0,\n      details: {}\n    };\n\n    try {\n      const typesToClean = /** @type {RetentionDataType[]} */ (\n        specificType ? [specificType] : Object.keys(this.retentionPolicies)\n      );\n\n      for (const dataType of typesToClean) {\n        const retentionDays = this.retentionPolicies[dataType];\n        if (!retentionDays) continue;\n\n        try {\n          const cleaned = await this.cleanupDataType(dataType, retentionDays);\n          results.cleaned += cleaned;\n          results.details[dataType] = cleaned;\n\n        } catch (error) {\n          console.error(`Failed to cleanup ${dataType}:`, error);\n          results.errors++;\n          const message = error instanceof Error ? error.message : String(error);\n          results.details[dataType] = `Error: ${message}`;\n        }\n      }\n\n      return results;\n\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up specific data type\n   * @param {RetentionDataType} dataType\n   * @param {number} retentionDays\n   * @returns {Promise<number>}\n   */\n  async cleanupDataType(dataType, retentionDays) {\n    const cutoffTime = Date.now() - (retentionDays * 24 * 60 * 60 * 1000);\n    let cleaned = 0;\n\n    try {\n      switch (dataType) {\n        case 'command_history':\n          cleaned = await this.cleanupCommandHistory(cutoffTime);\n          break;\n\n        case 'analysis_history':\n          cleaned = await this.cleanupAnalysisHistory(cutoffTime);\n          break;\n\n        case 'cached_data':\n          cleaned = await this.cleanupCachedData(cutoffTime);\n          break;\n\n        case 'export_data':\n          cleaned = await this.cleanupExportData(cutoffTime);\n          break;\n\n        case 'session_data':\n          cleaned = await this.cleanupSessionData(cutoffTime);\n          break;\n\n        default:\n          console.warn(`Unknown data type for cleanup: ${dataType}`);\n      }\n\n      return cleaned;\n\n    } catch (error) {\n      console.error(`Failed to cleanup ${dataType}:`, error);\n      return 0;\n    }\n  }\n\n  /**\n   * Clean up command history\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupCommandHistory(cutoffTime) {\n    const history = /** @type {Array<{ timestamp: number | string }>} */ (\n      await persistenceManager.retrieve('command_history')\n    ) || [];\n    const filtered = history.filter(entry =>\n      new Date(entry.timestamp).getTime() > cutoffTime\n    );\n\n    if (filtered.length < history.length) {\n      await persistenceManager.store('command_history', filtered, {\n        storage: 'indexedDB'\n      });\n      return history.length - filtered.length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Clean up analysis history\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupAnalysisHistory(cutoffTime) {\n    // Get all analysis history from IndexedDB\n    const allHistory = /** @type {Array<{ id: string | number, timestamp: number }>} */ (\n      await persistenceManager.indexedDB.getAll('analysis_history')\n    );\n    let cleaned = 0;\n\n    for (const entry of allHistory) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'analysis_history' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up cached data\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupCachedData(cutoffTime) {\n    const allCached = /** @type {Array<{ key: string | number, timestamp: number }>} */ (\n      await persistenceManager.indexedDB.getAll('cached_data')\n    );\n    let cleaned = 0;\n\n    for (const entry of allCached) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.key, { storeName: 'cached_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up export data\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupExportData(cutoffTime) {\n    const allExports = /** @type {Array<{ id: string | number, timestamp: number }>} */ (\n      await persistenceManager.indexedDB.getAll('export_data')\n    );\n    let cleaned = 0;\n\n    for (const entry of allExports) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'export_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up session data\n   * @param {number} _cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupSessionData(_cutoffTime) {\n    // Session data is typically current, but clean up old session logs if any\n    return 0; // Placeholder\n  }\n\n  /**\n   * Clean up non-essential data\n   */\n  async cleanupNonEssentialData() {\n    const nonEssentialTypes = [\n      ...this.dataCategories.functional,\n      ...this.dataCategories.analytics,\n      ...this.dataCategories.external\n    ];\n\n    let cleaned = 0;\n\n    for (const dataType of nonEssentialTypes) {\n      try {\n        if (dataType === 'command_history') {\n          await persistenceManager.store('command_history', [], { storage: 'indexedDB' });\n          cleaned++;\n        } else if (dataType === 'cached_data') {\n          await persistenceManager.indexedDB.clear('cached_data');\n          cleaned++;\n        }\n        // Add more cleanup logic as needed\n      } catch (error) {\n        console.error(`Failed to cleanup ${dataType}:`, error);\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up analytics data\n   */\n  async cleanupAnalyticsData() {\n    const analyticsTypes = this.dataCategories.analytics;\n\n    for (const dataType of analyticsTypes) {\n      try {\n        await persistenceManager.remove(dataType);\n      } catch (error) {\n        console.error(`Failed to cleanup analytics data ${dataType}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Remove data sharing markers\n   */\n  async removeDataSharingMarkers() {\n    // Remove any markers that indicate data has been shared\n    // This is a placeholder for future implementation\n    console.warn('Data sharing markers removed');\n  }\n\n  /**\n   * Export user data (GDPR compliance)\n   * @param {ExportOptions=} options\n   * @returns {Promise<{ success: boolean, data: { exportTimestamp: string, privacySettings: PrivacySettings, retentionPolicies: RetentionPolicies, data: Record<string, any> }, size: number, format: string }>}\n   */\n  async exportUserData(options = {}) {\n    const {\n      includeEssential = true,\n      includeFunctional = true,\n      includeAnalytics = false,\n      format = 'json'\n    } = options;\n\n    try {\n      /** @type {{ exportTimestamp: string, privacySettings: PrivacySettings, retentionPolicies: RetentionPolicies, data: Record<string, any> }} */\n      const exportData = {\n        exportTimestamp: new Date().toISOString(),\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        data: {}\n      };\n\n      // Include data based on categories\n      if (includeEssential) {\n        for (const dataType of this.dataCategories.essential) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeFunctional) {\n        for (const dataType of this.dataCategories.functional) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeAnalytics) {\n        for (const dataType of this.dataCategories.analytics) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      return {\n        success: true,\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete all user data (Right to be forgotten)\n   * @param {boolean} [confirmation=false]\n   * @returns {Promise<{ success: true, backup: string, timestamp: string }>}\n   */\n  async deleteAllUserData(confirmation = false) {\n    if (!confirmation) {\n      throw new Error('Data deletion requires explicit confirmation');\n    }\n\n    try {\n      // Create final backup\n      const backup = await backupService.createBackup({\n        description: 'Final backup before data deletion',\n        compress: true,\n        encrypt: true\n      });\n\n      // Clear all storage\n      await persistenceManager.clear({ storage: 'both', confirm: true });\n\n      // Clear browser storage\n      localStorage.clear();\n\n      // Clear IndexedDB\n      if (window.indexedDB) {\n        const databases = await indexedDB.databases();\n        for (const db of databases) {\n          if (db.name.includes('FinanceAnalyst')) {\n            indexedDB.deleteDatabase(db.name);\n          }\n        }\n      }\n\n      return {\n        success: true,\n        backup: backup.backupId,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('Failed to delete user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get privacy compliance report\n   */\n  async getPrivacyReport() {\n    try {\n      const storageStats = await persistenceManager.getStorageStats();\n      const cleanupResults = await this.cleanupExpiredData();\n\n      return {\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        dataCategories: this.dataCategories,\n        storageStats,\n        lastCleanup: cleanupResults,\n        compliance: {\n          gdprCompliant: this.privacySettings.dataRetention,\n          ccpaCompliant: !this.privacySettings.dataSharing,\n          retentionPoliciesActive: Object.keys(this.retentionPolicies).length > 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to generate privacy report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule automatic cleanup\n   */\n  scheduleCleanup() {\n    // Run cleanup daily\n    setInterval(async() => {\n      try {\n        await this.cleanupExpiredData();\n        console.warn('✅ Scheduled privacy cleanup completed');\n      } catch (error) {\n        console.error('❌ Scheduled privacy cleanup failed:', error);\n      }\n    }, 24 * 60 * 60 * 1000); // 24 hours\n\n    // Run cleanup on page load\n    setTimeout(() => {\n      this.cleanupExpiredData().catch(error => {\n        console.error('Initial privacy cleanup failed:', error);\n      });\n    }, 5000); // 5 seconds after initialization\n  }\n\n  /**\n   * Get privacy settings\n   * @returns {PrivacySettings}\n   */\n  getPrivacySettings() {\n    return { ...this.privacySettings };\n  }\n\n  /**\n   * Get retention policies\n   * @returns {RetentionPolicies}\n   */\n  getRetentionPolicies() {\n    return { ...this.retentionPolicies };\n  }\n}\n\n// Export singleton instance\nexport const privacyService = new PrivacyService();\n","// @ts-check\n/**\n * Sync Service\n * Handles data synchronization for future cloud storage integration\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nimport { backupService } from './BackupService';\nimport { persistenceManager } from './PersistenceManager';\n\n/**\n * @typedef {'syncCompleted' | 'fullSyncCompleted' | 'syncFailed'} SyncEvent\n */\n\n/**\n * @callback SyncEventListener\n * @param {SyncEvent} event\n * @param {any} data\n * @returns {void}\n */\n\nexport class SyncService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.syncEndpoint = null; // Future cloud endpoint\n    this.syncInterval = 5 * 60 * 1000; // 5 minutes\n    this.lastSyncTime = null;\n    this.syncInProgress = false;\n    this.conflictResolutionStrategy = 'client_wins'; // client_wins, server_wins, merge\n    /** @type {Set<SyncEventListener>} */\n    this.listeners = new Set();\n\n    // Sync queue for offline operations\n    this.syncQueue = [];\n    this.maxQueueSize = 100;\n  }\n\n  /**\n   * Initialize sync service\n   */\n  async initialize(config = {}) {\n    try {\n      this.syncEndpoint = config.endpoint || null;\n      this.syncInterval = config.interval || this.syncInterval;\n      this.conflictResolutionStrategy = config.conflictResolution || this.conflictResolutionStrategy;\n\n      // Load last sync time\n      this.lastSyncTime = await persistenceManager.retrieve('last_sync_time');\n\n      // Load sync queue\n      const queue = await persistenceManager.retrieve('sync_queue');\n      if (queue && Array.isArray(queue)) {\n        this.syncQueue = queue;\n      }\n\n      // Setup periodic sync if endpoint is configured\n      if (this.syncEndpoint) {\n        this.setupPeriodicSync();\n      }\n\n      console.warn('✅ Sync service initialized');\n      return { success: true, endpoint: this.syncEndpoint };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize sync service:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Queue a sync operation\n   */\n  async queueSyncOperation(operation) {\n    try {\n      const syncOperation = {\n        id: this.generateOperationId(),\n        type: operation.type, // 'create', 'update', 'delete'\n        dataType: operation.dataType,\n        key: operation.key,\n        data: operation.data,\n        timestamp: Date.now(),\n        retries: 0\n      };\n\n      this.syncQueue.push(syncOperation);\n\n      // Trim queue if too large\n      if (this.syncQueue.length > this.maxQueueSize) {\n        this.syncQueue = this.syncQueue.slice(-this.maxQueueSize);\n      }\n\n      // Save queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Attempt immediate sync if online\n      if (navigator.onLine && this.syncEndpoint) {\n        this.processSyncQueue().catch(error => {\n          console.error('Failed to process sync queue:', error);\n        });\n      }\n\n      return syncOperation.id;\n\n    } catch (error) {\n      console.error('Failed to queue sync operation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process sync queue\n   */\n  async processSyncQueue() {\n    if (this.syncInProgress || !this.syncEndpoint || !navigator.onLine) {\n      return { processed: 0, failed: 0 };\n    }\n\n    this.syncInProgress = true;\n    let processed = 0;\n    let failed = 0;\n\n    try {\n      // Process operations in order\n      const operations = [...this.syncQueue];\n\n      for (const operation of operations) {\n        try {\n          await this.syncOperation(operation);\n\n          // Remove from queue on success\n          this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n          processed++;\n\n        } catch (error) {\n          console.error(`Failed to sync operation ${operation.id}:`, error);\n\n          // Increment retry count\n          operation.retries++;\n\n          // Remove if too many retries\n          if (operation.retries > 3) {\n            this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n            failed++;\n          }\n        }\n      }\n\n      // Save updated queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('syncCompleted', { processed, failed });\n\n      return { processed, failed };\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Sync a single operation (placeholder for future implementation)\n   */\n  async syncOperation(operation) {\n    // This is a placeholder for future cloud sync implementation\n    // For now, we'll simulate the operation\n\n    if (!this.syncEndpoint) {\n      throw new Error('No sync endpoint configured');\n    }\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // In a real implementation, this would:\n    // 1. Send the operation to the cloud endpoint\n    // 2. Handle authentication\n    // 3. Manage conflicts\n    // 4. Return success/failure\n\n    console.warn(`Simulated sync operation: ${operation.type} ${operation.dataType}:${operation.key}`);\n\n    return { success: true, operation: operation.id };\n  }\n\n  /**\n   * Perform full sync with cloud\n   */\n  async performFullSync() {\n    if (this.syncInProgress || !this.syncEndpoint) {\n      return { success: false, reason: 'Sync in progress or no endpoint' };\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Create backup before sync\n      const backup = await backupService.createBackup({\n        description: 'Pre-sync backup',\n        compress: true\n      });\n\n      // Get local data\n      const localData = await this.getLocalSyncData();\n\n      // Get remote data (placeholder)\n      const remoteData = await this.getRemoteData();\n\n      // Resolve conflicts\n      const mergedData = await this.resolveConflicts(localData, remoteData);\n\n      // Apply merged data locally\n      await this.applyMergedData(mergedData);\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Clear sync queue\n      this.syncQueue = [];\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('fullSyncCompleted', { backup: backup.backupId });\n\n      return {\n        success: true,\n        timestamp: this.lastSyncTime,\n        backup: backup.backupId\n      };\n\n    } catch (error) {\n      console.error('Full sync failed:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      // Notify listeners\n      this.notifyListeners('syncFailed', { error: message });\n      throw error;\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Get local data for sync\n   */\n  async getLocalSyncData() {\n    const data = {};\n\n    // Get all syncable data types\n    const syncableTypes = [\n      'watchlists',\n      'alerts',\n      'user_preferences',\n      'user_variables'\n    ];\n\n    for (const type of syncableTypes) {\n      const typeData = await persistenceManager.retrieve(type);\n      if (typeData) {\n        data[type] = {\n          data: typeData,\n          lastModified: Date.now(), // In real implementation, track actual modification times\n          checksum: await this.calculateChecksum(typeData)\n        };\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Get remote data (placeholder)\n   */\n  async getRemoteData() {\n    // Placeholder for future cloud implementation\n    // This would fetch data from the cloud endpoint\n    return {};\n  }\n\n  /**\n   * Resolve conflicts between local and remote data\n   */\n  async resolveConflicts(localData, remoteData) {\n    const merged = {};\n\n    // Get all data types from both sources\n    const allTypes = new Set([\n      ...Object.keys(localData),\n      ...Object.keys(remoteData)\n    ]);\n\n    for (const type of allTypes) {\n      const local = localData[type];\n      const remote = remoteData[type];\n\n      if (!local && remote) {\n        // Only remote data exists\n        merged[type] = remote;\n      } else if (local && !remote) {\n        // Only local data exists\n        merged[type] = local;\n      } else if (local && remote) {\n        // Both exist - resolve conflict\n        merged[type] = await this.resolveDataConflict(type, local, remote);\n      }\n    }\n\n    return merged;\n  }\n\n  /**\n   * Resolve conflict for a specific data type\n   */\n  async resolveDataConflict(type, local, remote) {\n    switch (this.conflictResolutionStrategy) {\n      case 'client_wins':\n        return local;\n\n      case 'server_wins':\n        return remote;\n\n      case 'merge':\n        return await this.mergeData(type, local, remote);\n\n      case 'latest_wins':\n        return local.lastModified > remote.lastModified ? local : remote;\n\n      default:\n        return local;\n    }\n  }\n\n  /**\n   * Merge data intelligently\n   */\n  async mergeData(type, local, remote) {\n    // Intelligent merging based on data type\n    switch (type) {\n      case 'watchlists':\n        return this.mergeWatchlists(local.data, remote.data);\n\n      case 'alerts':\n        return this.mergeAlerts(local.data, remote.data);\n\n      case 'user_preferences':\n        return { ...remote.data, ...local.data }; // Local preferences win\n\n      default:\n        return local; // Default to local data\n    }\n  }\n\n  /**\n   * Merge watchlists\n   */\n  mergeWatchlists(local, remote) {\n    const merged = { ...remote };\n\n    // Add local watchlists, keeping newer versions\n    Object.entries(local).forEach(([name, watchlist]) => {\n      if (!merged[name] ||\n          new Date(watchlist.lastUpdated) > new Date(merged[name].lastUpdated)) {\n        merged[name] = watchlist;\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Merge alerts\n   */\n  mergeAlerts(local, remote) {\n    const merged = [...remote];\n    const remoteIds = new Set(remote.map(alert => alert.id));\n\n    // Add local alerts that don't exist remotely\n    local.forEach(alert => {\n      if (!remoteIds.has(alert.id)) {\n        merged.push(alert);\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Apply merged data locally\n   */\n  async applyMergedData(mergedData) {\n    for (const [type, data] of Object.entries(mergedData)) {\n      await persistenceManager.store(type, data.data, {\n        storage: this.determineStorageType(type)\n      });\n    }\n  }\n\n  /**\n   * Calculate checksum for data integrity\n   */\n  async calculateChecksum(data) {\n    const dataString = JSON.stringify(data);\n    return await this.cryptoUtils.hash(dataString);\n  }\n\n  /**\n   * Setup periodic sync\n   */\n  setupPeriodicSync() {\n    setInterval(() => {\n      if (navigator.onLine && !this.syncInProgress) {\n        this.processSyncQueue().catch(error => {\n          console.error('Periodic sync failed:', error);\n        });\n      }\n    }, this.syncInterval);\n\n    // Sync when coming online\n    window.addEventListener('online', () => {\n      this.processSyncQueue().catch(error => {\n        console.error('Online sync failed:', error);\n      });\n    });\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus() {\n    return {\n      lastSyncTime: this.lastSyncTime,\n      syncInProgress: this.syncInProgress,\n      queueSize: this.syncQueue.length,\n      isOnline: navigator.onLine,\n      hasEndpoint: !!this.syncEndpoint,\n      strategy: this.conflictResolutionStrategy\n    };\n  }\n\n  /**\n   * Add event listener\n   * @param {SyncEventListener} callback\n   * @returns {void}\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove event listener\n   * @param {SyncEventListener} callback\n   * @returns {void}\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  generateOperationId() {\n    return 'sync_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  determineStorageType(dataType) {\n    const localStorageTypes = ['user_preferences', 'user_variables'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n\n  /**\n   * Notify registered listeners about sync events\n   * @param {SyncEvent} event\n   * @param {any} data\n   * @returns {void}\n   */\n  notifyListeners(event, data) {\n    for (const callback of Array.from(this.listeners)) {\n      try {\n        callback(event, data);\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        console.error('Error in sync event listener:', message);\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const syncService = new SyncService();\n","// @ts-check\n/**\n * Persistence Test Suite\n * Browser-based integration tests for the persistence layer\n */\n\nimport { backupService } from './BackupService';\nimport { persistenceManager } from './PersistenceManager';\nimport { privacyService } from './PrivacyService';\nimport { syncService } from './SyncService';\n\n/**\n * @typedef {Object} TestResult\n * @property {string} testName\n * @property {string} description\n * @property {boolean} passed\n * @property {any} [data]\n * @property {string} timestamp\n * @property {boolean} [skipped]\n * @property {string} [reason]\n * @property {string} [error]\n */\n\n/**\n * @typedef {Object} TestSuiteSummary\n * @property {number} total\n * @property {number} passed\n * @property {number} failed\n * @property {number} skipped\n * @property {number} successRate\n * @property {TestResult[]} results\n */\n\n/**\n * @typedef {Object} RunAllTestsResult\n * @property {number} passed\n * @property {number} total\n * @property {boolean} success\n * @property {TestResult[]} results\n * @property {string} [error]\n */\n\nexport class PersistenceTestSuite {\n  constructor() {\n    /** @type {TestResult[]} */\n    this.testResults = [];\n    /** @type {boolean} */\n    this.isRunning = false;\n  }\n\n  /**\n   * Run all persistence tests\n   * @returns {Promise<RunAllTestsResult>}\n   */\n  async runAllTests() {\n    if (this.isRunning) {\n      console.warn('Tests are already running');\n      const summary = this.getTestSummary();\n      return {\n        passed: summary.passed,\n        total: summary.total,\n        success: summary.failed === 0,\n        results: summary.results\n      };\n    }\n\n    this.isRunning = true;\n    this.testResults = [];\n\n    console.warn('🧪 Starting Persistence Layer Test Suite...');\n\n    try {\n      // Core persistence tests\n      await this.testPersistenceManagerInitialization();\n      await this.testDataStorageAndRetrieval();\n      await this.testDataRemoval();\n      await this.testStorageStatistics();\n\n      // Backup service tests\n      await this.testBackupCreation();\n      await this.testBackupListing();\n      await this.testBackupRestore();\n\n      // Privacy service tests\n      await this.testPrivacySettings();\n      await this.testDataCleanup();\n\n      // Sync service tests\n      await this.testSyncStatus();\n\n      // Integration tests\n      await this.testDataLifecycle();\n      await this.testErrorHandling();\n\n      const passed = this.testResults.filter(r => r.passed).length;\n      const total = this.testResults.length;\n\n      console.warn(`✅ Test Suite Complete: ${passed}/${total} tests passed`);\n\n      return {\n        passed,\n        total,\n        success: passed === total,\n        results: this.testResults\n      };\n\n    } catch (error) {\n      console.error('❌ Test suite failed:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return {\n        passed: 0,\n        total: this.testResults.length,\n        success: false,\n        error: message,\n        results: this.testResults\n      };\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Test persistence manager initialization\n   * @returns {Promise<void>}\n   */\n  async testPersistenceManagerInitialization() {\n    const testName = 'Persistence Manager Initialization';\n\n    try {\n      const result = await persistenceManager.initialize();\n\n      this.assert(\n        result.success === true,\n        testName,\n        'Should initialize successfully',\n        result\n      );\n\n      this.assert(\n        persistenceManager.isInitialized === true,\n        testName,\n        'Should set initialized flag',\n        { isInitialized: persistenceManager.isInitialized }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test data storage and retrieval\n   * @returns {Promise<void>}\n   */\n  async testDataStorageAndRetrieval() {\n    const testName = 'Data Storage and Retrieval';\n\n    try {\n      const testData = {\n        test: true,\n        timestamp: Date.now(),\n        data: ['item1', 'item2', 'item3']\n      };\n\n      // Test localStorage storage\n      const storeResult = await persistenceManager.store('test_data', testData, {\n        storage: 'localStorage'\n      });\n\n      this.assert(\n        storeResult.success === true,\n        testName,\n        'Should store data successfully',\n        storeResult\n      );\n\n      // Test data retrieval\n      const retrievedData = await persistenceManager.retrieve('test_data');\n\n      this.assert(\n        JSON.stringify(retrievedData) === JSON.stringify(testData),\n        testName,\n        'Should retrieve stored data correctly',\n        { stored: testData, retrieved: retrievedData }\n      );\n\n      // Test IndexedDB storage\n      const indexedStoreResult = await persistenceManager.store('test_indexed_data', testData, {\n        storage: 'indexedDB'\n      });\n\n      this.assert(\n        indexedStoreResult.success === true,\n        testName,\n        'Should store data in IndexedDB',\n        indexedStoreResult\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test data removal\n   * @returns {Promise<void>}\n   */\n  async testDataRemoval() {\n    const testName = 'Data Removal';\n\n    try {\n      // Store test data first\n      await persistenceManager.store('test_removal', { data: 'to_be_removed' });\n\n      // Remove the data\n      const removeResult = await persistenceManager.remove('test_removal');\n\n      this.assert(\n        removeResult === true,\n        testName,\n        'Should remove data successfully',\n        { removeResult }\n      );\n\n      // Verify data is gone\n      const retrievedData = await persistenceManager.retrieve('test_removal');\n\n      this.assert(\n        retrievedData === null,\n        testName,\n        'Should return null for removed data',\n        { retrievedData }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test storage statistics\n   * @returns {Promise<void>}\n   */\n  async testStorageStatistics() {\n    const testName = 'Storage Statistics';\n\n    try {\n      const stats = await persistenceManager.getStorageStats();\n\n      this.assert(\n        stats !== null && typeof stats === 'object',\n        testName,\n        'Should return storage statistics',\n        stats\n      );\n\n      this.assert(\n        typeof stats.total.used === 'number',\n        testName,\n        'Should include total usage',\n        { totalUsed: stats.total.used }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test backup creation\n   * @returns {Promise<void>}\n   */\n  async testBackupCreation() {\n    const testName = 'Backup Creation';\n\n    try {\n      // Store some test data first\n      await persistenceManager.store('backup_test_data', {\n        test: 'backup_data',\n        timestamp: Date.now()\n      });\n\n      const backup = await backupService.createBackup({\n        description: 'Test backup',\n        compress: true\n      });\n\n      this.assert(\n        backup.success === true,\n        testName,\n        'Should create backup successfully',\n        backup\n      );\n\n      this.assert(\n        typeof backup.backupId === 'string',\n        testName,\n        'Should return backup ID',\n        { backupId: backup.backupId }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test backup listing\n   * @returns {Promise<void>}\n   */\n  async testBackupListing() {\n    const testName = 'Backup Listing';\n\n    try {\n      const backups = await backupService.listBackups();\n\n      this.assert(\n        Array.isArray(backups),\n        testName,\n        'Should return array of backups',\n        { backupsCount: backups.length }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test backup restore\n   * @returns {Promise<void>}\n   */\n  async testBackupRestore() {\n    const testName = 'Backup Restore';\n\n    try {\n      // Get available backups\n      const backups = await backupService.listBackups();\n\n      if (backups.length > 0) {\n        const backupId = backups[0].id;\n\n        const restoreResult = await backupService.restoreBackup(backupId, {\n          overwrite: false\n        });\n\n        this.assert(\n          restoreResult.success === true,\n          testName,\n          'Should restore backup successfully',\n          restoreResult\n        );\n      } else {\n        this.recordSkip(testName, 'No backups available for restore test');\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test privacy settings\n   * @returns {Promise<void>}\n   */\n  async testPrivacySettings() {\n    const testName = 'Privacy Settings';\n\n    try {\n      const settings = privacyService.getPrivacySettings();\n\n      this.assert(\n        typeof settings === 'object',\n        testName,\n        'Should return privacy settings',\n        settings\n      );\n\n      // Test updating a setting\n      await privacyService.updatePrivacySettings({ analytics: false });\n\n      const updatedSettings = privacyService.getPrivacySettings();\n\n      this.assert(\n        updatedSettings.analytics === false,\n        testName,\n        'Should update privacy settings',\n        { analytics: updatedSettings.analytics }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test data cleanup\n   * @returns {Promise<void>}\n   */\n  async testDataCleanup() {\n    const testName = 'Data Cleanup';\n\n    try {\n      const cleanupResult = await privacyService.cleanupExpiredData();\n\n      this.assert(\n        typeof cleanupResult.cleaned === 'number',\n        testName,\n        'Should return cleanup results',\n        cleanupResult\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test sync status\n   * @returns {Promise<void>}\n   */\n  async testSyncStatus() {\n    const testName = 'Sync Status';\n\n    try {\n      const status = syncService.getSyncStatus();\n\n      this.assert(\n        typeof status === 'object',\n        testName,\n        'Should return sync status',\n        status\n      );\n\n      this.assert(\n        typeof status.isOnline === 'boolean',\n        testName,\n        'Should include online status',\n        { isOnline: status.isOnline }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test complete data lifecycle\n   * @returns {Promise<void>}\n   */\n  async testDataLifecycle() {\n    const testName = 'Data Lifecycle';\n\n    try {\n      const testKey = 'lifecycle_test';\n      const testData = { lifecycle: true, step: 1 };\n\n      // Store\n      await persistenceManager.store(testKey, testData);\n\n      // Retrieve\n      const retrieved = await persistenceManager.retrieve(testKey);\n\n      // Update\n      const updatedData = { ...testData, step: 2 };\n      await persistenceManager.store(testKey, updatedData);\n\n      // Retrieve updated\n      const retrievedUpdated = await persistenceManager.retrieve(testKey);\n\n      // Remove\n      await persistenceManager.remove(testKey);\n\n      // Verify removal\n      const retrievedAfterRemoval = await persistenceManager.retrieve(testKey);\n\n      this.assert(\n        retrieved.step === 1 &&\n        retrievedUpdated.step === 2 &&\n        retrievedAfterRemoval === null,\n        testName,\n        'Should handle complete data lifecycle',\n        {\n          initial: retrieved?.step,\n          updated: retrievedUpdated?.step,\n          afterRemoval: retrievedAfterRemoval\n        }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test error handling\n   * @returns {Promise<void>}\n   */\n  async testErrorHandling() {\n    const testName = 'Error Handling';\n\n    try {\n      // Test invalid data retrieval\n      const invalidResult = await persistenceManager.retrieve('non_existent_key_12345');\n\n      this.assert(\n        invalidResult === null,\n        testName,\n        'Should handle non-existent keys gracefully',\n        { invalidResult }\n      );\n\n      // Test invalid backup restore\n      try {\n        await backupService.restoreBackup('invalid_backup_id');\n        this.recordFailure(testName, 'Should have thrown error for invalid backup ID');\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        this.assert(\n          true,\n          testName,\n          'Should throw error for invalid backup ID',\n          { error: message }\n        );\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  // Helper methods\n\n  /**\n   * @param {boolean} condition\n   * @param {string} testName\n   * @param {string} description\n   * @param {any} [data]\n   * @returns {void}\n   */\n  assert(condition, testName, description, data = null) {\n    const result = {\n      testName,\n      description,\n      passed: !!condition,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n\n    if (condition) {\n      console.warn(`✅ ${testName}: ${description}`);\n    } else {\n      console.error(`❌ ${testName}: ${description}`, data);\n    }\n  }\n\n  /**\n   * @param {string} testName\n   * @param {string} error\n   * @returns {void}\n   */\n  recordFailure(testName, error) {\n    const result = {\n      testName,\n      description: 'Test failed with error',\n      passed: false,\n      error,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.error(`❌ ${testName}: ${error}`);\n  }\n\n  /**\n   * @param {string} testName\n   * @param {string} reason\n   * @returns {void}\n   */\n  recordSkip(testName, reason) {\n    const result = {\n      testName,\n      description: 'Test skipped',\n      passed: true,\n      skipped: true,\n      reason,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.warn(`⏭️ ${testName}: Skipped - ${reason}`);\n  }\n\n  /**\n   * Get test results summary\n   * @returns {TestSuiteSummary}\n   */\n  getTestSummary() {\n    const total = this.testResults.length;\n    const passed = this.testResults.filter(r => r.passed).length;\n    const failed = this.testResults.filter(r => !r.passed).length;\n    const skipped = this.testResults.filter(r => r.skipped).length;\n\n    return {\n      total,\n      passed,\n      failed,\n      skipped,\n      successRate: total > 0 ? (passed / total) * 100 : 0,\n      results: this.testResults\n    };\n  }\n}\n\n// Export singleton instance\nexport const persistenceTestSuite = new PersistenceTestSuite();\n\n// Global test function for browser console\n/** @type {any} */\n(window).testPersistence = () => persistenceTestSuite.runAllTests();\n","/**\n * Persistence Commands\n * Commands for managing data persistence, backup, and privacy\n */\n\nimport { formatNumber, formatPercentage } from '../../utils/dataTransformation';\nimport { backupService } from '../persistence/BackupService';\nimport { persistenceManager } from '../persistence/PersistenceManager';\nimport { persistenceTestSuite } from '../persistence/PersistenceTestSuite';\nimport { privacyService } from '../persistence/PrivacyService';\nimport { syncService } from '../persistence/SyncService';\n\nexport const persistenceCommands = {\n  BACKUP_CREATE: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [description] = parsedCommand.parameters;\n\n      try {\n        const backup = await backupService.createBackup({\n          description: description || 'Manual backup',\n          includeSettings: true,\n          includeWatchlists: true,\n          includeAlerts: true,\n          includeHistory: true,\n          compress: true,\n          encrypt: false\n        });\n\n        const content = `💾 Backup Created Successfully\\n\\n📋 BACKUP DETAILS:\\n• Backup ID: ${backup.backupId}\\n• Size: ${formatNumber(backup.size / 1024, 1)} KB\\n• Original Size: ${formatNumber(backup.originalSize / 1024, 1)} KB\\n• Compression Ratio: ${formatPercentage(backup.metadata.compressionRatio || 0)}\\n• Timestamp: ${backup.timestamp}\\n• Description: ${description || 'Manual backup'}\\n\\n💡 BACKUP INCLUDES:\\n• User preferences and settings\\n• Watchlists and alerts\\n• Command and analysis history\\n• All user variables\\n\\n🔧 MANAGEMENT:\\n• Use BACKUP_LIST() to view all backups\\n• Use BACKUP_RESTORE(id) to restore from backup\\n• Use BACKUP_EXPORT(id) to download backup file\\n\\n✅ Your data is now safely backed up and can be restored at any time.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_create',\n            backup\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  },\n\n  BACKUP_LIST: {\n    execute: async(parsedCommand, _context, _processor) => {\n      try {\n        const backups = await backupService.listBackups();\n        const stats = await backupService.getBackupStats();\n\n        if (backups.length === 0) {\n          return {\n            type: 'info',\n            content: '📁 No Backups Found\\n\\nYou haven\\'t created any backups yet.\\n\\n💡 CREATE YOUR FIRST BACKUP:\\n• Use BACKUP_CREATE() to create a backup\\n• Use BACKUP_CREATE(\"description\") to add a description\\n\\nBackups help protect your data and allow you to restore previous states.'\n          };\n        }\n\n        const content = `📁 Backup List (${backups.length} backups)\\n\\n📊 BACKUP STATISTICS:\\n• Total Backups: ${stats.totalBackups}\\n• Total Size: ${formatNumber(stats.totalSize / 1024, 1)} KB\\n• Oldest: ${stats.oldestBackup ? new Date(stats.oldestBackup).toLocaleDateString() : 'N/A'}\\n• Newest: ${stats.newestBackup ? new Date(stats.newestBackup).toLocaleDateString() : 'N/A'}\\n• Encrypted: ${stats.encryptedBackups}\\n• Compressed: ${stats.compressedBackups}\\n\\n📋 AVAILABLE BACKUPS:\\n${backups.slice(0, 10).map((backup, index) => {\n          const date = new Date(backup.timestamp).toLocaleString();\n          const size = formatNumber(backup.size / 1024, 1);\n          const features = [];\n          if (backup.compressed) features.push('📦 Compressed');\n          if (backup.encrypted) features.push('🔒 Encrypted');\n\n          return `${index + 1}. ${backup.id}\\n   📅 ${date}\\n   📏 ${size} KB\\n   📝 ${backup.description || 'No description'}\\n   ${features.join(' ')}`;\n        }).join('\\n\\n')}\\n\\n🔧 BACKUP COMMANDS:\\n• BACKUP_RESTORE(id) - Restore from backup\\n• BACKUP_EXPORT(id) - Export backup to file\\n• BACKUP_DELETE(id) - Delete backup\\n• BACKUP_CREATE() - Create new backup\\n\\n💡 TIP: Use the backup ID (not the number) for restore operations.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_list',\n            backups,\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to list backups: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  BACKUP_RESTORE: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [backupId, overwrite = 'false'] = parsedCommand.parameters;\n\n      if (!backupId) {\n        return {\n          type: 'error',\n          content: 'BACKUP_RESTORE requires a backup ID. Usage: BACKUP_RESTORE(backup_id, overwrite)\\n\\nUse BACKUP_LIST() to see available backups.'\n        };\n      }\n\n      try {\n        const shouldOverwrite = overwrite.toLowerCase() === 'true';\n\n        const result = await backupService.restoreBackup(backupId, {\n          overwrite: shouldOverwrite,\n          createBackupBeforeRestore: true\n        });\n\n        const content = `🔄 Backup Restored Successfully\\n\\n📋 RESTORE DETAILS:\\n• Backup ID: ${result.backupId}\\n• Backup Date: ${new Date(result.backupTimestamp).toLocaleString()}\\n• Restore Date: ${new Date(result.restoreTimestamp).toLocaleString()}\\n• Overwrite Mode: ${shouldOverwrite ? 'Enabled' : 'Disabled'}\\n\\n📊 RESTORE RESULTS:\\n• Items Restored: ${result.results.restored}\\n• Items Skipped: ${result.results.skipped}\\n• Errors: ${result.results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(result.results.details).map(([item, status]) =>\n          `• ${item}: ${status}`\n        ).join('\\n')}\\n\\n⚠️ IMPORTANT:\\n• A backup was created before restore\\n• Refresh the page to see all changes\\n• Some settings may require restart to take effect\\n\\n✅ Your data has been restored from the selected backup.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_restore',\n            result\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup restore failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  },\n\n  STORAGE_STATS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      try {\n        const stats = await persistenceManager.getStorageStats();\n\n        if (!stats) {\n          return {\n            type: 'error',\n            content: 'Unable to retrieve storage statistics. Persistence layer may not be initialized.'\n          };\n        }\n\n        const totalUsedMB = stats.total.used / (1024 * 1024);\n        const totalAvailableMB = stats.total.available / (1024 * 1024);\n        const quotaMB = stats.total.quota / (1024 * 1024);\n\n        const content = `💾 Storage Statistics\\n\\n📊 OVERALL USAGE:\\n• Total Used: ${formatNumber(totalUsedMB, 2)} MB\\n• Total Available: ${formatNumber(totalAvailableMB, 2)} MB\\n• Storage Quota: ${formatNumber(quotaMB, 2)} MB\\n• Usage Percentage: ${formatPercentage(stats.total.usagePercentage / 100)}\\n\\n📱 LOCAL STORAGE:\\n• Used: ${formatNumber(stats.localStorage.used / 1024, 1)} KB\\n• Items: ${stats.localStorage.keys}\\n• Usage: ${formatPercentage(stats.localStorage.usagePercentage / 100)}\\n• Status: ${stats.localStorage.available ? '✅ Available' : '❌ Unavailable'}\\n\\n🗄️ INDEXED DB:\\n• Used: ${formatNumber(stats.indexedDB.used / 1024, 1)} KB\\n• Records: ${stats.indexedDB.total.records}\\n• Stores: ${Object.keys(stats.indexedDB.stores).length}\\n• Status: ${stats.indexedDB.available ? '✅ Available' : '❌ Unavailable'}\\n\\n📋 STORE BREAKDOWN:\\n${Object.entries(stats.indexedDB.stores).map(([store, data]) =>\n          `• ${store}: ${data.records} records (${formatNumber(data.size / 1024, 1)} KB)`\n        ).join('\\n')}\\n\\n⚠️ STORAGE HEALTH:\\n${stats.total.usagePercentage > 90 ? '🔴 Critical: Storage almost full' : stats.total.usagePercentage > 75 ? '🟡 Warning: High storage usage' : '🟢 Good: Storage usage is healthy'}\\n\\n💡 OPTIMIZATION TIPS:\\n${stats.total.usagePercentage > 75 ? '• Consider clearing old cached data\\n• Delete unnecessary backups\\n• Use PRIVACY_CLEANUP() to remove expired data\\n' : ''}• Regular backups help manage storage\\n• Use compression for large datasets\\n• Monitor usage with this command\\n\\n🔧 MANAGEMENT COMMANDS:\\n• PRIVACY_CLEANUP() - Clean expired data\\n• BACKUP_LIST() - Manage backups\\n• cache clear - Clear cached data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'storage_stats',\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get storage statistics: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_CLEANUP: {\n    execute: async(parsedCommand, _context, _processor) => {\n      try {\n        const results = await privacyService.cleanupExpiredData();\n\n        const content = `🧹 Privacy Cleanup Complete\\n\\n📊 CLEANUP RESULTS:\\n• Items Cleaned: ${results.cleaned}\\n• Errors: ${results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(results.details).map(([dataType, result]) =>\n          `• ${dataType}: ${typeof result === 'number' ? `${result} items cleaned` : result}`\n        ).join('\\n')}\\n\\n🔒 PRIVACY COMPLIANCE:\\n• Expired data removed according to retention policies\\n• User privacy preferences respected\\n• Data minimization principles applied\\n\\n⚙️ CURRENT RETENTION POLICIES:\\n${Object.entries(privacyService.getRetentionPolicies()).map(([type, days]) =>\n          `• ${type}: ${days} days`\n        ).join('\\n')}\\n\\n💡 PRIVACY COMMANDS:\\n• PRIVACY_SETTINGS() - View/update privacy settings\\n• PRIVACY_EXPORT() - Export your data (GDPR)\\n• PRIVACY_DELETE() - Delete all data (Right to be forgotten)\\n\\n✅ Your data has been cleaned according to privacy policies.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'privacy_cleanup',\n            results\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Privacy cleanup failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_SETTINGS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [setting, value] = parsedCommand.parameters;\n\n      try {\n        if (!setting) {\n          // Show current settings\n          const settings = privacyService.getPrivacySettings();\n          const policies = privacyService.getRetentionPolicies();\n\n          const content = `🔒 Privacy Settings\\n\\n⚙️ CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) =>\n            `• ${key}: ${val ? '✅ Enabled' : '❌ Disabled'}`\n          ).join('\\n')}\\n\\n📅 RETENTION POLICIES:\\n${Object.entries(policies).map(([type, days]) =>\n            `• ${type}: ${days} days`\n          ).join('\\n')}\\n\\n🛡️ PRIVACY CONTROLS:\\n• dataRetention: Keep historical data\\n• analytics: Allow usage analytics\\n• crashReporting: Send crash reports\\n• dataSharing: Share data with partners\\n• cookieConsent: Accept cookies\\n• trackingConsent: Allow tracking\\n\\n💡 USAGE:\\n• PRIVACY_SETTINGS() - Show all settings\\n• PRIVACY_SETTINGS(\"setting\", \"true/false\") - Update setting\\n• PRIVACY_CLEANUP() - Clean expired data\\n\\nExample: PRIVACY_SETTINGS(\"analytics\", \"false\")`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'privacy_settings_view',\n              settings,\n              policies\n            }\n          };\n        }\n\n        if (value === undefined) {\n          const currentValue = privacyService.getPrivacySettings()[setting];\n          return {\n            type: 'info',\n            content: `🔒 Privacy Setting: ${setting}\\nCurrent Value: ${currentValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nTo update: PRIVACY_SETTINGS(\"${setting}\", \"true/false\")`\n          };\n        }\n\n        // Update setting\n        const boolValue = value.toLowerCase() === 'true';\n        await privacyService.updatePrivacySettings({ [setting]: boolValue });\n\n        return {\n          type: 'success',\n          content: `✅ Privacy Setting Updated\\n\\n• Setting: ${setting}\\n• New Value: ${boolValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nSetting has been saved and will take effect immediately.`,\n          data: {\n            analysis: 'privacy_settings_update',\n            setting,\n            value: boolValue\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to manage privacy settings: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  },\n\n  SYNC_STATUS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      try {\n        const status = syncService.getSyncStatus();\n\n        const content = `🔄 Sync Status\\n\\n📊 SYNC OVERVIEW:\\n• Last Sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}\\n• Sync In Progress: ${status.syncInProgress ? '🟡 Yes' : '🟢 No'}\\n• Queue Size: ${status.queueSize} operations\\n• Online Status: ${status.isOnline ? '🟢 Online' : '🔴 Offline'}\\n• Endpoint Configured: ${status.hasEndpoint ? '✅ Yes' : '❌ No'}\\n• Strategy: ${status.strategy}\\n\\n🔧 SYNC CONFIGURATION:\\n${!status.hasEndpoint ? '⚠️ No sync endpoint configured - sync is disabled\\n' : ''}${status.queueSize > 0 ? `📋 ${status.queueSize} operations waiting to sync\\n` : ''}${!status.isOnline ? '📡 Device is offline - sync will resume when online\\n' : ''}\\n\\n💡 SYNC COMMANDS:\\n• SYNC_NOW() - Force immediate sync (when available)\\n• SYNC_QUEUE() - View pending operations\\n• BACKUP_CREATE() - Create local backup\\n\\n${!status.hasEndpoint ? '🚀 FUTURE FEATURE:\\nCloud sync will be available in a future update.\\nFor now, use BACKUP_CREATE() and BACKUP_EXPORT() for data portability.' : '✅ Sync is configured and ready.'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'sync_status',\n            status\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get sync status: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PERSISTENCE_TEST: {\n    execute: async(parsedCommand, _context, _processor) => {\n      try {\n        const testResults = await persistenceTestSuite.runAllTests();\n\n        const content = `🧪 Persistence Layer Test Results\\n\\n📊 TEST SUMMARY:\\n• Total Tests: ${testResults.total}\\n• Passed: ${testResults.passed} ✅\\n• Failed: ${testResults.total - testResults.passed} ❌\\n• Success Rate: ${formatPercentage(testResults.passed / testResults.total)}\\n• Overall Status: ${testResults.success ? '✅ PASS' : '❌ FAIL'}\\n\\n📋 DETAILED RESULTS:\\n${testResults.results.map((result, index) => {\n          const status = result.passed ? '✅' : result.skipped ? '⏭️' : '❌';\n          const details = result.error ? ` (${result.error})` : result.reason ? ` (${result.reason})` : '';\n          return `${index + 1}. ${status} ${result.testName}${details}`;\n        }).join('\\n')}\\n\\n🔧 COMPONENT STATUS:\\n• PersistenceManager: ${testResults.results.find(r => r.testName.includes('Persistence Manager'))?.passed ? '✅ Working' : '❌ Issues'}\\n• BackupService: ${testResults.results.find(r => r.testName.includes('Backup'))?.passed ? '✅ Working' : '❌ Issues'}\\n• PrivacyService: ${testResults.results.find(r => r.testName.includes('Privacy'))?.passed ? '✅ Working' : '❌ Issues'}\\n• SyncService: ${testResults.results.find(r => r.testName.includes('Sync'))?.passed ? '✅ Working' : '❌ Issues'}\\n\\n💡 RECOMMENDATIONS:\\n${testResults.success ? '• All tests passed - persistence layer is working correctly\\n• Regular testing recommended to ensure continued functionality' : '• Some tests failed - check browser console for detailed error messages\\n• Consider running individual component tests\\n• Verify browser storage permissions and quotas'}\\n\\n🔍 DEBUGGING:\\n• Check browser console for detailed test output\\n• Use browser DevTools to inspect localStorage and IndexedDB\\n• Run \"STORAGE_STATS()\" to check storage usage\\n\\n${testResults.success ? '✅ Persistence layer is fully functional and ready for production use!' : '⚠️ Issues detected - please review failed tests and resolve before production use.'}`;\n\n        return {\n          type: testResults.success ? 'success' : 'warning',\n          content,\n          data: {\n            analysis: 'persistence_test',\n            testResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Persistence test suite failed: ${error.message}\\n\\nCheck browser console for detailed error information.`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  }\n};\n","/**\n * Private Analysis Commands\n * CLI integration for the Private Analysis financial modeling features\n */\n\nimport defaultFinancialData from '../../data/defaultFinancialData.js';\nimport {\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation.js';\n\n// Helper functions for risk and quality analysis\nconst calculateVolatility = (values) => {\n  if (values.length < 2) return 0;\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / (values.length - 1);\n  return Math.sqrt(variance) / mean * 100;\n};\n\nconst assessGrowthSustainability = (revenues) => {\n  const growthRates = [];\n  for (let i = 1; i < revenues.length; i++) {\n    if (revenues[i - 1] > 0) growthRates.push((revenues[i] / revenues[i - 1] - 1) * 100);\n  }\n  if (growthRates.length === 0) return '📊 Insufficient Data';\n  const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n  return avgGrowth > 10 ? '✅ Strong' : avgGrowth > 0 ? '📈 Moderate' : '📉 Weak';\n};\n\nconst assessCashFlowTrend = (cashFlows) => {\n  if (cashFlows.length < 2) return 'Insufficient data';\n  const fcfs = cashFlows.map(cf => cf.freeCashFlow);\n  const isIncreasing = fcfs.every((fcf, i) => i === 0 || fcf >= fcfs[i - 1]);\n  const isDecreasing = fcfs.every((fcf, i) => i === 0 || fcf <= fcfs[i - 1]);\n  return isIncreasing ? '📈 Improving' : isDecreasing ? '📉 Declining' : '📊 Variable';\n};\n\nconst calculateOperatingLeverage = (cashFlows) => {\n  if (cashFlows.length < 2) return 'N/A';\n  const revenueGrowth = ((cashFlows[cashFlows.length - 1].revenue / cashFlows[0].revenue) - 1) * 100;\n  const fcfGrowth = ((cashFlows[cashFlows.length - 1].freeCashFlow / cashFlows[0].freeCashFlow) - 1) * 100;\n  const leverage = revenueGrowth !== 0 ? (fcfGrowth / revenueGrowth) : 0;\n  return leverage > 1 ? '🟢 High' : leverage > 0.5 ? '🟡 Moderate' : '🔴 Low';\n};\n\n// Quality assessment helper functions\nconst calculateGrowthConsistency = (revenues) => {\n  if (revenues.length < 3) return 50;\n  const growthRates = [];\n  for (let i = 1; i < revenues.length; i++) {\n    if (revenues[i - 1] > 0) growthRates.push((revenues[i] / revenues[i - 1] - 1) * 100);\n  }\n  const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n  const volatility = Math.sqrt(growthRates.reduce((sum, rate) => sum + Math.pow(rate - avgGrowth, 2), 0) / (growthRates.length - 1));\n  return Math.max(0, Math.min(100, 80 - volatility * 2));\n};\n\nconst estimateRecurringRevenue = (statements, latestIndex) => {\n  const injectables = statements.injectables?.[latestIndex] || 0;\n  const wellness = statements.wellness?.[latestIndex] || 0;\n  const totalRevenue = statements.totalRevenue?.[latestIndex] || 0;\n  const recurringPortion = totalRevenue > 0 ? (injectables + wellness) / totalRevenue : 0;\n  return Math.min(100, recurringPortion * 100 + 20);\n};\n\nconst calculateMarginStability = (margins) => {\n  if (margins.length < 2) return 50;\n  const avgMargin = margins.reduce((sum, margin) => sum + margin, 0) / margins.length;\n  const volatility = Math.sqrt(margins.reduce((sum, margin) => sum + Math.pow(margin - avgMargin, 2), 0) / (margins.length - 1));\n  return Math.max(0, Math.min(100, 90 - volatility * 5));\n};\n\nconst calculateProfitabilityTrend = (margins) => {\n  if (margins.length < 2) return 50;\n  const trend = (margins[margins.length - 1] - margins[0]) / margins.length;\n  return Math.max(0, Math.min(100, 60 + trend * 10));\n};\n\nconst assessMarketPosition = (data) => {\n  return 75; // Moderate market position\n};\n\nconst assessScalability = (revenues) => {\n  const growthRate = revenues.length > 1 ? (revenues[revenues.length - 1] / revenues[0] - 1) * 100 / (revenues.length - 1) : 0;\n  return Math.min(100, Math.max(0, 50 + growthRate * 2));\n};\n\nconst identifyStrengths = (metrics) => {\n  return metrics.filter(m => m.score >= 80).map(m => `• ${m.metric}: Strong performance`).join('\\n') || '• Need to improve overall performance';\n};\n\nconst identifyWeaknesses = (metrics) => {\n  return metrics.filter(m => m.score < 70).map(m => `• ${m.metric}: Below target performance`).join('\\n') || '• No major weaknesses identified';\n};\n\n// Workflow helper functions\nconst estimateStepTime = (step) => {\n  const timeMap = {\n    'Data Quality': '2-3 minutes',\n    'Company Overview': '3-5 minutes',\n    'Financial Analysis': '5-8 minutes',\n    'Valuation Models': '8-12 minutes',\n    'Risk Assessment': '5-7 minutes',\n    'Benchmarking': '4-6 minutes',\n    'Advanced Models': '10-15 minutes',\n    'Final Report': '2-3 minutes'\n  };\n  return timeMap[step] || '5 minutes';\n};\n\nconst assessDataCompleteness = (data) => {\n  const totalFields = 50;\n  const presentFields = Object.keys(data.statements.incomeStatement).length +\n                      Object.keys(data.statements.balanceSheet).length +\n                      Object.keys(data.statements.cashFlow).length;\n  return Math.min(100, (presentFields / totalFields) * 100);\n};\n\nconst assessAnalysisDepth = (steps) => {\n  const completedSteps = steps.filter(s => s.completed).length;\n  if (completedSteps >= 6) return 'Comprehensive';\n  if (completedSteps >= 4) return 'Detailed';\n  if (completedSteps >= 2) return 'Basic';\n  return 'Initial';\n};\n\n// Dashboard helper functions\nconst calculatePerformanceScore = (metrics) => {\n  let score = 0;\n  score += Math.min(25, Math.max(0, 15 + metrics.revenueGrowth));\n  score += Math.min(25, metrics.grossMargin * 0.5);\n  score += Math.min(30, metrics.operatingMargin * 2);\n  score += Math.min(20, metrics.ebitdaMargin * 1.2);\n  return Math.round(score);\n};\n\nconst getGrowthIcon = (growth) => growth >= 15 ? '🚀' : growth >= 5 ? '📈' : growth >= 0 ? '➡️' : '📉';\n\nconst getMarginIcon = (margin, type) => {\n  const thresholds = {\n    gross: { excellent: 70, good: 50, fair: 30 },\n    operating: { excellent: 20, good: 10, fair: 5 },\n    ebitda: { excellent: 25, good: 15, fair: 8 }\n  };\n  const t = thresholds[type];\n  return margin >= t.excellent ? '🟢' : margin >= t.good ? '🟡' : margin >= t.fair ? '🟠' : '🔴';\n};\n\nconst getPerformanceRating = (score) => {\n  if (score >= 80) return '🏆 Excellent';\n  if (score >= 70) return '🥇 Very Good';\n  if (score >= 60) return '🥈 Good';\n  if (score >= 50) return '🥉 Fair';\n  return '📊 Needs Improvement';\n};\n\nexport const privateAnalysisCommands = {\n  PRIVATE_DCF: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const loadingMessage = '🔄 Running DCF analysis on private company data...\\n• Loading financial statements\\n• Calculating free cash flows\\n• Computing terminal value\\n• Analyzing projections...\\n✅ Using private financial data';\n\n        if (context.showLoading) {\n          context.showLoading(loadingMessage);\n        }\n\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate key metrics from the financial data\n        const revenues = [];\n        const operatingIncomes = [];\n        const margins = [];\n\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n\n          revenues.push(revenue);\n          operatingIncomes.push(operatingIncome);\n          margins.push(revenue ? (operatingIncome / revenue) * 100 : 0);\n        });\n\n        // DCF assumptions (these could be parameterized)\n        const assumptions = {\n          discountRate: 12.0,\n          terminalGrowthRate: 2.5,\n          projectionYears: 5,\n          taxRate: 25.0\n        };\n\n        // Simple DCF calculation\n        const latestRevenue = revenues[revenues.length - 1];\n        const latestOperatingIncome = operatingIncomes[operatingIncomes.length - 1];\n        const revenueGrowthRate = revenues.length > 1 ?\n          ((revenues[revenues.length - 1] / revenues[revenues.length - 2]) - 1) * 100 : 15;\n\n        // Project future cash flows\n        const projections = [];\n        let projectedRevenue = latestRevenue;\n\n        for (let i = 1; i <= assumptions.projectionYears; i++) {\n          projectedRevenue *= (1 + revenueGrowthRate / 100);\n          const projectedOperatingIncome = projectedRevenue * (margins[margins.length - 1] / 100);\n          const projectedFCF = projectedOperatingIncome * (1 - assumptions.taxRate / 100);\n\n          projections.push({\n            year: i,\n            revenue: projectedRevenue,\n            operatingIncome: projectedOperatingIncome,\n            fcf: projectedFCF,\n            presentValue: projectedFCF / Math.pow(1 + assumptions.discountRate / 100, i)\n          });\n        }\n\n        const totalPresentValue = projections.reduce((sum, proj) => sum + proj.presentValue, 0);\n        const terminalValue = (projections[projections.length - 1].fcf * (1 + assumptions.terminalGrowthRate / 100))\n          / ((assumptions.discountRate - assumptions.terminalGrowthRate) / 100);\n        const terminalPresentValue = terminalValue / Math.pow(1 + assumptions.discountRate / 100, assumptions.projectionYears);\n        const enterpriseValue = totalPresentValue + terminalPresentValue;\n\n        const content = `Private Company DCF Valuation Analysis\\n\\n📊 HISTORICAL PERFORMANCE:\\n${periods.map((period, i) => `• ${period}: Revenue ${formatCurrency(revenues[i], 'USD', true)}, Operating Income ${formatCurrency(operatingIncomes[i], 'USD', true)} (${formatPercentage(margins[i] / 100)})`).join('\\n')}\\n\\n💰 DCF VALUATION RESULTS:\\n• Enterprise Value: ${formatCurrency(enterpriseValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(terminalValue, 'USD', true)} (${formatPercentage(terminalPresentValue / enterpriseValue)})\\n• PV of Projections: ${formatCurrency(totalPresentValue, 'USD', true)} (${formatPercentage(totalPresentValue / enterpriseValue)})\\n\\n📈 KEY ASSUMPTIONS:\\n• Discount Rate: ${formatPercentage(assumptions.discountRate / 100)}\\n• Terminal Growth: ${formatPercentage(assumptions.terminalGrowthRate / 100)}\\n• Revenue Growth: ${formatPercentage(revenueGrowthRate / 100)}\\n• Tax Rate: ${formatPercentage(assumptions.taxRate / 100)}\\n\\n🎯 5-YEAR PROJECTIONS:\\n${projections.map(proj => `Year ${proj.year}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}, PV ${formatCurrency(proj.presentValue, 'USD', true)}`).join('\\n')}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dcf',\n            enterpriseValue,\n            terminalValue,\n            projections,\n            assumptions\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  },\n\n  PRIVATE_RATIOS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate financial ratios\n        const ratios = [];\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const totalCOGS = statements.totalCostOfGoodsSold?.[index] || 0;\n          const grossProfit = statements.grossProfit?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const netIncome = statements.netIncome?.[index] || 0;\n\n          ratios.push({\n            period,\n            grossMargin: revenue ? (grossProfit / revenue) * 100 : 0,\n            operatingMargin: revenue ? (operatingIncome / revenue) * 100 : 0,\n            netMargin: revenue ? (netIncome / revenue) * 100 : 0,\n            cogsPercentage: revenue ? (totalCOGS / revenue) * 100 : 0\n          });\n        });\n\n        // Calculate growth rates\n        const growthRates = [];\n        for (let i = 1; i < periods.length; i++) {\n          const currentRevenue = statements.totalRevenue?.[i] || 0;\n          const previousRevenue = statements.totalRevenue?.[i - 1] || 0;\n          const currentOperating = statements.operatingIncome?.[i] || 0;\n          const previousOperating = statements.operatingIncome?.[i - 1] || 0;\n\n          growthRates.push({\n            period: periods[i],\n            revenueGrowth: previousRevenue ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0,\n            operatingGrowth: previousOperating && Math.abs(previousOperating) > 0.01 ?\n              ((currentOperating - previousOperating) / Math.abs(previousOperating)) * 100 : 0\n          });\n        }\n\n        const content = `Private Company Financial Ratios Analysis\\n\\n📊 PROFITABILITY RATIOS:\\n${ratios.map(ratio => `• ${ratio.period}:\\n  - Gross Margin: ${formatPercentage(ratio.grossMargin / 100)}\\n  - Operating Margin: ${formatPercentage(ratio.operatingMargin / 100)}\\n  - Net Margin: ${formatPercentage(ratio.netMargin / 100)}\\n  - COGS %: ${formatPercentage(ratio.cogsPercentage / 100)}`).join('\\n\\n')}\\n\\n📈 GROWTH ANALYSIS:\\n${growthRates.map(growth => `• ${growth.period}:\\n  - Revenue Growth: ${formatPercentage(growth.revenueGrowth / 100)}\\n  - Operating Growth: ${formatPercentage(growth.operatingGrowth / 100)}`).join('\\n\\n')}\\n\\n🎯 KEY INSIGHTS:\\n• Latest Gross Margin: ${formatPercentage(ratios[ratios.length - 1].grossMargin / 100)}\\n• Latest Operating Margin: ${formatPercentage(ratios[ratios.length - 1].operatingMargin / 100)}\\n• Average Revenue Growth: ${formatPercentage(growthRates.reduce((sum, g) => sum + g.revenueGrowth, 0) / growthRates.length / 100)}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_ratios',\n            ratios,\n            growthRates\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private ratios analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_SUMMARY: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Get latest period data\n        const latestIndex = periods.length - 1;\n        const latest = {\n          period: periods[latestIndex],\n          revenue: statements.totalRevenue?.[latestIndex] || 0,\n          grossProfit: statements.grossProfit?.[latestIndex] || 0,\n          operatingIncome: statements.operatingIncome?.[latestIndex] || 0,\n          netIncome: statements.netIncome?.[latestIndex] || 0,\n          totalCOGS: statements.totalCostOfGoodsSold?.[latestIndex] || 0\n        };\n\n        // Calculate key metrics\n        const grossMargin = latest.revenue ? (latest.grossProfit / latest.revenue) * 100 : 0;\n        const operatingMargin = latest.revenue ? (latest.operatingIncome / latest.revenue) * 100 : 0;\n        const netMargin = latest.revenue ? (latest.netIncome / latest.revenue) * 100 : 0;\n\n        // Revenue breakdown (top revenue streams)\n        const revenueBreakdown = [\n          { name: 'Injectables', value: statements.injectables?.[latestIndex] || 0 },\n          { name: 'Surgery', value: statements.surgery?.[latestIndex] || 0 },\n          { name: 'Wellness', value: statements.wellness?.[latestIndex] || 0 },\n          { name: 'Weightloss', value: statements.weightloss?.[latestIndex] || 0 },\n          { name: 'Retail Sales', value: statements.retailSales?.[latestIndex] || 0 },\n          { name: 'Energy Devices', value: statements.energyDevices?.[latestIndex] || 0 }\n        ].sort((a, b) => b.value - a.value);\n\n        const content = `Private Company Financial Summary (${latest.period})\\n\\n🏢 COMPANY OVERVIEW:\\n• Period: ${latest.period}\\n• Total Revenue: ${formatCurrency(latest.revenue, 'USD', true)}\\n• Operating Status: ${latest.operatingIncome >= 0 ? '✅ Profitable' : '⚠️ Operating Loss'}\\n\\n💰 FINANCIAL PERFORMANCE:\\n• Gross Profit: ${formatCurrency(latest.grossProfit, 'USD', true)} (${formatPercentage(grossMargin / 100)})\\n• Operating Income: ${formatCurrency(latest.operatingIncome, 'USD', true)} (${formatPercentage(operatingMargin / 100)})\\n• Net Income: ${formatCurrency(latest.netIncome, 'USD', true)} (${formatPercentage(netMargin / 100)})\\n• Cost of Goods Sold: ${formatCurrency(latest.totalCOGS, 'USD', true)}\\n\\n📊 REVENUE BREAKDOWN:\\n${revenueBreakdown.map((item, i) => `${i + 1}. ${item.name}: ${formatCurrency(item.value, 'USD', true)} (${formatPercentage(item.value / latest.revenue)})`).join('\\n')}\\n\\n📈 HISTORICAL TRENDS:\\n${periods.map((period, i) => `• ${period}: ${formatCurrency(statements.totalRevenue?.[i] || 0, 'USD', true)}`).join('\\n')}\\n\\n🎯 KEY METRICS:\\n• Revenue Growth (YoY): ${periods.length > 1 ? formatPercentage(((statements.totalRevenue?.[latestIndex] || 0) / (statements.totalRevenue?.[latestIndex - 1] || 1) - 1)) : 'N/A'}\\n• Gross Margin Trend: ${grossMargin >= 70 ? '🟢 Strong' : grossMargin >= 50 ? '🟡 Moderate' : '🔴 Low'}\\n• Operating Efficiency: ${operatingMargin >= 15 ? '🟢 Excellent' : operatingMargin >= 5 ? '🟡 Fair' : operatingMargin >= 0 ? '🟠 Break-even' : '🔴 Loss'}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_summary',\n            latest,\n            revenueBreakdown,\n            margins: { grossMargin, operatingMargin, netMargin }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private summary analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_LOAD: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n\n        const content = `Private Financial Data Loaded Successfully\\n\\n📁 DATA OVERVIEW:\\n• Periods: ${data.periods.join(', ')}\\n• Income Statement: ✅ Loaded\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n\\n📊 AVAILABLE DATA:\\n• Revenue Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Revenue') || ['energyDevices', 'injectables', 'wellness', 'weightloss', 'retailSales', 'surgery'].includes(key)).length}\\n• Expense Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Cogs') || key.includes('Expense') || ['marketing', 'automobile', 'rent', 'insurance'].includes(key)).length}\\n• Financial Metrics: ${Object.keys(data.statements.incomeStatement).filter(key => ['grossProfit', 'operatingIncome', 'netIncome'].includes(key)).length}\\n\\n💡 AVAILABLE COMMANDS:\\n• PRIVATE_DCF() - Run DCF valuation\\n• PRIVATE_RATIOS() - Calculate financial ratios\\n• PRIVATE_SUMMARY() - Get company overview\\n• PRIVATE_SCENARIO() - Run scenario analysis\\n\\n✅ Ready for private company analysis`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_load',\n            dataStructure: {\n              periods: data.periods.length,\n              incomeStatementItems: Object.keys(data.statements.incomeStatement).length,\n              balanceSheetItems: Object.keys(data.statements.balanceSheet).length,\n              cashFlowItems: Object.keys(data.statements.cashFlow).length\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to load private data: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_MONTE_CARLO: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestPeriod = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestPeriod] || 0;\n        const baseOperatingIncome = statements.operatingIncome?.[latestPeriod] || 0;\n\n        // Run Monte Carlo simulation\n        const simulations = 10000;\n        const results = [];\n\n        for (let i = 0; i < simulations; i++) {\n          const revenueGrowth = (Math.random() * 0.3 + 0.85);\n          const marginChange = (Math.random() * 0.2 + 0.9);\n          const projectedRevenue = baseRevenue * revenueGrowth;\n          const projectedOperatingIncome = baseOperatingIncome * marginChange;\n          const valuation = projectedOperatingIncome * 8;\n          results.push({ valuation, revenue: projectedRevenue });\n        }\n\n        const valuations = results.map(r => r.valuation).sort((a, b) => a - b);\n        const p50 = valuations[Math.floor(valuations.length * 0.5)];\n        const p25 = valuations[Math.floor(valuations.length * 0.25)];\n        const p75 = valuations[Math.floor(valuations.length * 0.75)];\n\n        const content = `Monte Carlo Simulation Results (${simulations.toLocaleString()} iterations)\\n\\n📊 VALUATION DISTRIBUTION:\\n• P25: ${formatCurrency(p25)}\\n• P50 (Median): ${formatCurrency(p50)}\\n• P75: ${formatCurrency(p75)}\\n• Range: ${formatCurrency(valuations[0])} - ${formatCurrency(valuations[valuations.length - 1])}\\n\\n🎯 RISK METRICS:\\n• Downside Risk: ${formatPercentage(0.25)}\\n• Upside Potential: ${formatPercentage(0.25)}\\n• Expected Value: ${formatCurrency(p50)}`;\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Monte Carlo simulation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['iterations'] }\n  },\n\n  PRIVATE_SCENARIO: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestPeriod = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestPeriod] || 0;\n        const baseOperatingIncome = statements.operatingIncome?.[latestPeriod] || 0;\n\n        const scenarios = {\n          bear: { growth: -0.15, margin: -0.20 },\n          base: { growth: 0.10, margin: 0.00 },\n          bull: { growth: 0.35, margin: 0.15 }\n        };\n\n        let content = `Scenario Analysis\\n\\n📊 BASE METRICS:\\n• Revenue: ${formatCurrency(baseRevenue)}\\n• Operating Income: ${formatCurrency(baseOperatingIncome)}\\n`;\n\n        Object.entries(scenarios).forEach(([name, scenario]) => {\n          const projectedRevenue = baseRevenue * (1 + scenario.growth);\n          const projectedIncome = baseOperatingIncome * (1 + scenario.margin);\n          const valuation = projectedIncome * 8;\n          content += `\\n${name.toUpperCase()} CASE:\\n• Revenue: ${formatCurrency(projectedRevenue)}\\n• Valuation: ${formatCurrency(valuation)}`;\n        });\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Scenario analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['scenarios'] }\n  },\n\n  PRIVATE_GROWTH: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        const revenues = periods.map((_, index) => statements.totalRevenue?.[index] || 0);\n\n        const growthRates = [];\n        for (let i = 1; i < revenues.length; i++) {\n          if (revenues[i - 1] > 0) {\n            growthRates.push(((revenues[i] / revenues[i - 1]) - 1) * 100);\n          }\n        }\n\n        const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n        const cagr = revenues.length > 1 && revenues[0] > 0 ?\n          (Math.pow(revenues[revenues.length - 1] / revenues[0], 1 / (revenues.length - 1)) - 1) * 100 : 0;\n\n        const content = `Growth Analysis\\n\\n📈 GROWTH METRICS:\\n• Revenue CAGR: ${formatPercentage(cagr / 100)}\\n• Average YoY Growth: ${formatPercentage(avgGrowth / 100)}\\n• Latest Revenue: ${formatCurrency(revenues[revenues.length - 1])}\\n\\n🎯 GROWTH ASSESSMENT:\\n• Trajectory: ${avgGrowth > 15 ? '🚀 High Growth' : avgGrowth > 5 ? '📈 Moderate Growth' : '📉 Slow Growth'}\\n• Consistency: ${growthRates.every(rate => rate > 0) ? '✅ Consistent' : '⚠️ Variable'}`;\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Growth analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_RISK: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        const revenues = periods.map((_, index) => statements.totalRevenue?.[index] || 0);\n        const margins = revenues.map((rev, index) => {\n          const opIncome = statements.operatingIncome?.[index] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n\n        const revenueVolatility = revenues.length > 1 ? calculateVolatility(revenues) : 0;\n        const marginVolatility = margins.length > 1 ? calculateVolatility(margins) : 0;\n\n        const riskScore = (revenueVolatility > 20 ? 3 : revenueVolatility > 10 ? 2 : 1) +\n                         (marginVolatility > 5 ? 2 : marginVolatility > 2 ? 1 : 0);\n\n        const riskLevel = riskScore >= 4 ? 'HIGH' : riskScore >= 2 ? 'MEDIUM' : 'LOW';\n\n        const content = `Risk Assessment\\n\\n⚖️ RISK METRICS:\\n• Revenue Volatility: ${revenueVolatility.toFixed(1)}%\\n• Margin Volatility: ${marginVolatility.toFixed(1)}%\\n• Overall Risk Level: ${riskLevel}\\n\\n🎯 RISK FACTORS:\\n• Revenue Concentration: ${revenues.length < 3 ? '⚠️ Limited History' : '✅ Adequate Data'}\\n• Margin Stability: ${marginVolatility < 2 ? '✅ Stable' : '⚠️ Variable'}\\n• Growth Sustainability: ${assessGrowthSustainability(revenues)}`;\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Risk analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_VALIDATE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements;\n        const periods = data.periods;\n\n        const validationResults = [];\n\n        // Check data completeness\n        const incomeStatementItems = Object.keys(statements.incomeStatement).length;\n        const balanceSheetItems = Object.keys(statements.balanceSheet).length;\n        const cashFlowItems = Object.keys(statements.cashFlow).length;\n\n        validationResults.push({\n          test: 'Data Completeness',\n          result: incomeStatementItems > 5 ? 'PASS' : 'FAIL',\n          details: `${incomeStatementItems} income statement items`\n        });\n\n        // Check for negative revenues\n        const revenues = periods.map((_, index) => statements.incomeStatement.totalRevenue?.[index] || 0);\n        const hasNegativeRevenue = revenues.some(rev => rev < 0);\n\n        validationResults.push({\n          test: 'Revenue Validation',\n          result: !hasNegativeRevenue ? 'PASS' : 'FAIL',\n          details: hasNegativeRevenue ? 'Negative revenue detected' : 'All revenues positive'\n        });\n\n        // Check margin consistency\n        const margins = revenues.map((rev, index) => {\n          const opIncome = statements.incomeStatement.operatingIncome?.[index] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        const reasonableMargins = margins.every(margin => margin >= -50 && margin <= 100);\n\n        validationResults.push({\n          test: 'Margin Reasonableness',\n          result: reasonableMargins ? 'PASS' : 'FAIL',\n          details: `Margins range: ${Math.min(...margins).toFixed(1)}% to ${Math.max(...margins).toFixed(1)}%`\n        });\n\n        const passedTests = validationResults.filter(result => result.result === 'PASS').length;\n        const totalTests = validationResults.length;\n\n        let content = `Data Validation Report\\n\\n📊 VALIDATION SUMMARY:\\n• Tests Passed: ${passedTests}/${totalTests}\\n• Overall Status: ${passedTests === totalTests ? '✅ VALID' : '⚠️ ISSUES FOUND'}\\n\\n🔍 DETAILED RESULTS:\\n`;\n\n        validationResults.forEach(result => {\n          const icon = result.result === 'PASS' ? '✅' : '❌';\n          content += `${icon} ${result.test}: ${result.result}\\n   ${result.details}\\n`;\n        });\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Data validation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_EXPORT: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_');\n\n        const exportData = {\n          timestamp,\n          company: 'Private Company Analysis',\n          periods: data.periods,\n          financials: data.statements,\n          analysis: {\n            dcf: 'Run PRIVATE_DCF() for valuation',\n            ratios: 'Run PRIVATE_RATIOS() for financial ratios',\n            scenarios: 'Run PRIVATE_SCENARIO() for scenario analysis'\n          }\n        };\n\n        const content = `Export Complete\\n\\n📁 EXPORT DETAILS:\\n• Timestamp: ${timestamp}\\n• Data Periods: ${data.periods.join(', ')}\\n• Export Format: JSON\\n• File Size: ~${JSON.stringify(exportData).length} bytes\\n\\n📊 INCLUDED DATA:\\n• Income Statement: ✅ Complete\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅' : '❌'} Available\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅' : '❌'} Available\\n\\n💡 USAGE:\\n• Use exported data for external analysis\\n• Import into other financial tools\\n• Create backup of current analysis`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            export: exportData,\n            filename: `private_analysis_${timestamp}.json`\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Export failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['format'] }\n  },\n\n  PRIVATE_BENCHMARKS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Current metrics\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const grossProfit = statements.grossProfit?.[latestIndex] || 0;\n\n        // Industry benchmarks from enhanced data\n        const benchmarks = data.assumptions?.industryBenchmarks || {\n          revenuePerSqFt: { min: 800, target: 1200, current: 1490.44 },\n          revenuePerProvider: { min: 300, target: 400, current: 1242.03 },\n          injectableMargin: { min: 0.75, target: 0.80, current: 0.70 },\n          ebitdaMargin: { min: 0.20, target: 0.25, current: 0.185 },\n          customerRetention: { min: 0.65, target: 0.75, current: 0.72 }\n        };\n\n        let content = 'Industry Benchmark Analysis\\n\\n📊 CURRENT vs BENCHMARKS:\\n';\n\n        Object.entries(benchmarks).forEach(([metric, values]) => {\n          const performance = values.current >= values.target ? '🟢 Above Target' :\n            values.current >= values.min ? '🟡 Meets Minimum' : '🔴 Below Standard';\n          const percentage = ((values.current / values.target) * 100).toFixed(1);\n\n          content += `• ${metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:\\n`;\n          content += `  Current: ${typeof values.current === 'number' && values.current < 1 ?\n            formatPercentage(values.current) : formatNumber(values.current)}\\n`;\n          content += `  Target: ${typeof values.target === 'number' && values.target < 1 ?\n            formatPercentage(values.target) : formatNumber(values.target)}\\n`;\n          content += `  Performance: ${performance} (${percentage}% of target)\\n\\n`;\n        });\n\n        // Competitive positioning\n        const overallScore = Object.values(benchmarks).reduce((score, benchmark) => {\n          return score + (benchmark.current >= benchmark.target ? 2 : benchmark.current >= benchmark.min ? 1 : 0);\n        }, 0);\n        const maxScore = Object.keys(benchmarks).length * 2;\n        const competitiveGrade = overallScore >= maxScore * 0.8 ? 'A' :\n          overallScore >= maxScore * 0.6 ? 'B' :\n            overallScore >= maxScore * 0.4 ? 'C' : 'D';\n\n        content += `🎯 COMPETITIVE POSITIONING:\\n• Overall Score: ${overallScore}/${maxScore} (${((overallScore / maxScore) * 100).toFixed(1)}%)\\n• Industry Grade: ${competitiveGrade}\\n• Market Position: ${competitiveGrade === 'A' ? '🏆 Industry Leader' : competitiveGrade === 'B' ? '📈 Above Average' : competitiveGrade === 'C' ? '📊 Market Average' : '📉 Below Average'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_benchmarks',\n            benchmarks,\n            competitiveScore: overallScore,\n            grade: competitiveGrade\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Benchmark analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['industry'] }\n  },\n\n  PRIVATE_CASHFLOW: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n\n        // Calculate operating cash flow proxy from available data\n        const cashFlowAnalysis = periods.map((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const depreciation = statements.depreciation?.[index] || 0;\n          const workingCapitalChange = index > 0 ?\n            ((statements.totalRevenue?.[index] || 0) - (statements.totalRevenue?.[index - 1] || 0)) * 0.1 : 0; // Estimate\n\n          const operatingCashFlow = operatingIncome + depreciation - workingCapitalChange;\n          const fcf = operatingCashFlow; // Simplified - would subtract capex\n\n          return {\n            period,\n            revenue,\n            operatingIncome,\n            depreciation,\n            operatingCashFlow,\n            freeCashFlow: fcf,\n            fcfMargin: revenue > 0 ? (fcf / revenue) * 100 : 0\n          };\n        });\n\n        // Cash flow trends\n        const avgFCFMargin = cashFlowAnalysis.reduce((sum, cf) => sum + cf.fcfMargin, 0) / cashFlowAnalysis.length;\n        const latestFCF = cashFlowAnalysis[cashFlowAnalysis.length - 1];\n\n        let content = 'Cash Flow Analysis\\n\\n💰 CASH FLOW SUMMARY:\\n';\n        content += cashFlowAnalysis.map(cf =>\n          `• ${cf.period}:\\n  Operating CF: ${formatCurrency(cf.operatingCashFlow)}\\n  Free Cash Flow: ${formatCurrency(cf.freeCashFlow)}\\n  FCF Margin: ${formatPercentage(cf.fcfMargin / 100)}`\n        ).join('\\n\\n');\n\n        content += `\\n\\n📊 CASH FLOW METRICS:\\n• Latest FCF: ${formatCurrency(latestFCF.freeCashFlow)}\\n• Average FCF Margin: ${formatPercentage(avgFCFMargin / 100)}\\n• Cash Generation: ${latestFCF.freeCashFlow > 0 ? '✅ Positive' : '❌ Negative'}\\n• FCF Trend: ${assessCashFlowTrend(cashFlowAnalysis)}`;\n\n        // Cash flow adequacy analysis\n        const fcfGrowth = cashFlowAnalysis.length > 1 ?\n          ((latestFCF.freeCashFlow / cashFlowAnalysis[0].freeCashFlow) - 1) * 100 : 0;\n\n        content += `\\n\\n🎯 CASH FLOW QUALITY:\\n• FCF Growth (Total): ${formatPercentage(fcfGrowth / 100)}\\n• Operating Leverage: ${calculateOperatingLeverage(cashFlowAnalysis)}\\n• Cash Conversion: ${avgFCFMargin > 15 ? '🟢 Strong' : avgFCFMargin > 5 ? '🟡 Moderate' : '🔴 Weak'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_cashflow',\n            cashFlowAnalysis,\n            metrics: { avgFCFMargin, fcfGrowth }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Cash flow analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['years'] }\n  },\n\n  PRIVATE_MULTIPLES: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Current metrics\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const netIncome = statements.netIncome?.[latestIndex] || 0;\n\n        // Industry multiples for medispa/healthcare services\n        const industryMultiples = {\n          evRevenue: { min: 1.5, typical: 2.5, premium: 4.0 },\n          evEbitda: { min: 6.0, typical: 10.0, premium: 15.0 },\n          peRatio: { min: 12.0, typical: 18.0, premium: 25.0 }\n        };\n\n        // Calculate implied valuations\n        const valuations = {\n          revenueMultiple: {\n            conservative: revenue * industryMultiples.evRevenue.min,\n            typical: revenue * industryMultiples.evRevenue.typical,\n            premium: revenue * industryMultiples.evRevenue.premium\n          },\n          ebitdaMultiple: ebitda > 0 ? {\n            conservative: ebitda * industryMultiples.evEbitda.min,\n            typical: ebitda * industryMultiples.evEbitda.typical,\n            premium: ebitda * industryMultiples.evEbitda.premium\n          } : null,\n          earningsMultiple: netIncome > 0 ? {\n            conservative: netIncome * industryMultiples.peRatio.min,\n            typical: netIncome * industryMultiples.peRatio.typical,\n            premium: netIncome * industryMultiples.peRatio.premium\n          } : null\n        };\n\n        let content = `Valuation Multiples Analysis\\n\\n📊 CURRENT METRICS:\\n• Revenue (TTM): ${formatCurrency(revenue)}\\n• EBITDA (TTM): ${formatCurrency(ebitda)}\\n• Net Income: ${formatCurrency(netIncome)}\\n\\n💰 VALUATION SCENARIOS:\\n`;\n\n        // Revenue multiple valuation\n        content += '📈 REVENUE MULTIPLE APPROACH:\\n';\n        content += `• Conservative (${industryMultiples.evRevenue.min}x): ${formatCurrency(valuations.revenueMultiple.conservative)}\\n`;\n        content += `• Typical (${industryMultiples.evRevenue.typical}x): ${formatCurrency(valuations.revenueMultiple.typical)}\\n`;\n        content += `• Premium (${industryMultiples.evRevenue.premium}x): ${formatCurrency(valuations.revenueMultiple.premium)}\\n\\n`;\n\n        // EBITDA multiple valuation\n        if (valuations.ebitdaMultiple) {\n          content += '💼 EBITDA MULTIPLE APPROACH:\\n';\n          content += `• Conservative (${industryMultiples.evEbitda.min}x): ${formatCurrency(valuations.ebitdaMultiple.conservative)}\\n`;\n          content += `• Typical (${industryMultiples.evEbitda.typical}x): ${formatCurrency(valuations.ebitdaMultiple.typical)}\\n`;\n          content += `• Premium (${industryMultiples.evEbitda.premium}x): ${formatCurrency(valuations.ebitdaMultiple.premium)}\\n\\n`;\n        }\n\n        // Earnings multiple valuation\n        if (valuations.earningsMultiple) {\n          content += '📊 EARNINGS MULTIPLE APPROACH:\\n';\n          content += `• Conservative (${industryMultiples.peRatio.min}x): ${formatCurrency(valuations.earningsMultiple.conservative)}\\n`;\n          content += `• Typical (${industryMultiples.peRatio.typical}x): ${formatCurrency(valuations.earningsMultiple.typical)}\\n`;\n          content += `• Premium (${industryMultiples.peRatio.premium}x): ${formatCurrency(valuations.earningsMultiple.premium)}\\n\\n`;\n        }\n\n        // Valuation summary\n        const typicalValuations = [\n          valuations.revenueMultiple.typical,\n          valuations.ebitdaMultiple?.typical,\n          valuations.earningsMultiple?.typical\n        ].filter(v => v);\n\n        const avgValuation = typicalValuations.reduce((sum, val) => sum + val, 0) / typicalValuations.length;\n        const minValuation = Math.min(...typicalValuations);\n        const maxValuation = Math.max(...typicalValuations);\n\n        content += `🎯 VALUATION SUMMARY:\\n• Average Valuation: ${formatCurrency(avgValuation)}\\n• Valuation Range: ${formatCurrency(minValuation)} - ${formatCurrency(maxValuation)}\\n• Method Consistency: ${(maxValuation / minValuation) < 2 ? '✅ Consistent' : '⚠️ Wide Range'}\\n• Recommended Range: ${formatCurrency(avgValuation * 0.8)} - ${formatCurrency(avgValuation * 1.2)}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_multiples',\n            valuations,\n            summary: { avgValuation, minValuation, maxValuation }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Multiples analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['industry', 'size'] }\n  },\n\n  PRIVATE_SENSITIVITY: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestIndex] || 0;\n        const baseEbitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n\n        // Sensitivity variables\n        const revenueChanges = [-20, -10, 0, 10, 20]; // % changes\n        const marginChanges = [-2, -1, 0, 1, 2]; // percentage point changes\n        const multipleBase = 10; // EBITDA multiple\n\n        let content = `Sensitivity Analysis\\n\\n📊 BASE CASE:\\n• Revenue: ${formatCurrency(baseRevenue)}\\n• EBITDA: ${formatCurrency(baseEbitda)}\\n• EBITDA Multiple: ${multipleBase}x\\n• Base Valuation: ${formatCurrency(baseEbitda * multipleBase)}\\n\\n`;\n\n        // Revenue sensitivity\n        content += '📈 REVENUE SENSITIVITY:\\n';\n        revenueChanges.forEach(change => {\n          const newRevenue = baseRevenue * (1 + change / 100);\n          const newEbitda = baseEbitda * (1 + change / 100); // Assuming operating leverage\n          const newValuation = newEbitda * multipleBase;\n          const valuationChange = ((newValuation / (baseEbitda * multipleBase)) - 1) * 100;\n          content += `• Revenue ${change >= 0 ? '+' : ''}${change}%: Valuation ${formatCurrency(newValuation)} (${valuationChange >= 0 ? '+' : ''}${valuationChange.toFixed(1)}%)\\n`;\n        });\n\n        // Margin sensitivity\n        content += '\\n💼 MARGIN SENSITIVITY (percentage points):\\n';\n        const baseMargin = baseRevenue > 0 ? (baseEbitda / baseRevenue) * 100 : 0;\n        marginChanges.forEach(change => {\n          const newMargin = (baseMargin + change) / 100;\n          const newEbitda = baseRevenue * newMargin;\n          const newValuation = newEbitda * multipleBase;\n          const valuationChange = newEbitda > 0 ? ((newValuation / (baseEbitda * multipleBase)) - 1) * 100 : -100;\n          content += `• Margin ${change >= 0 ? '+' : ''}${change}pp: EBITDA ${formatCurrency(newEbitda)}, Valuation ${formatCurrency(newValuation)} (${valuationChange >= 0 ? '+' : ''}${valuationChange.toFixed(1)}%)\\n`;\n        });\n\n        // Multiple sensitivity\n        content += '\\n🎯 MULTIPLE SENSITIVITY:\\n';\n        const multiples = [8, 9, 10, 11, 12];\n        multiples.forEach(multiple => {\n          const valuation = baseEbitda * multiple;\n          const change = ((multiple / multipleBase) - 1) * 100;\n          content += `• ${multiple}x EBITDA: ${formatCurrency(valuation)} (${change >= 0 ? '+' : ''}${change.toFixed(1)}%)\\n`;\n        });\n\n        // Key insights\n        const revenueElasticity = 1.0; // 1% revenue change = 1% valuation change (simplified)\n        const marginElasticity = (baseRevenue * multipleBase) / (baseEbitda * multipleBase); // Impact of 1pp margin change\n\n        content += `\\n🔍 SENSITIVITY INSIGHTS:\\n• Revenue Elasticity: ${revenueElasticity.toFixed(2)}x (1% revenue change → ${revenueElasticity.toFixed(1)}% valuation change)\\n• Margin Impact: 1pp margin change → ${((marginElasticity - 1) * 100).toFixed(1)}% valuation change\\n• Key Driver: ${marginElasticity > revenueElasticity ? 'Margin optimization' : 'Revenue growth'} has higher impact`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_sensitivity',\n            baseCase: { revenue: baseRevenue, ebitda: baseEbitda, valuation: baseEbitda * multipleBase },\n            sensitivities: { revenueElasticity, marginElasticity }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Sensitivity analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['variables', 'ranges'] }\n  },\n\n  PRIVATE_WATERFALL: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Build DCF waterfall analysis\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const taxRate = 0.25;\n        const discountRate = 0.12;\n        const terminalGrowthRate = 0.025;\n\n        // Waterfall components\n        const waterfallSteps = [\n          { step: 'Base Revenue', value: revenue, cumulative: revenue },\n          { step: 'Operating Leverage', value: operatingIncome - revenue * 0.15, cumulative: operatingIncome },\n          { step: 'Tax Shield', value: -operatingIncome * taxRate, cumulative: operatingIncome * (1 - taxRate) },\n          { step: 'Working Capital', value: -revenue * 0.02, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.02 },\n          { step: 'CapEx', value: -revenue * 0.03, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.05 },\n          { step: 'Free Cash Flow', value: 0, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.05 }\n        ];\n\n        const fcf = waterfallSteps[waterfallSteps.length - 1].cumulative;\n        const terminalValue = (fcf * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        const pv5Years = fcf * 4.5; // Simplified 5-year PV\n        const pvTerminal = terminalValue / Math.pow(1 + discountRate, 5);\n        const enterpriseValue = pv5Years + pvTerminal;\n\n        let content = 'DCF Waterfall Analysis\\n\\n💧 CASH FLOW WATERFALL:\\n';\n        waterfallSteps.forEach((step, i) => {\n          const arrow = i === 0 ? '' : step.value >= 0 ? ' ↗ ' : ' ↘ ';\n          content += `${i + 1}. ${step.step}: ${formatCurrency(step.value)} ${arrow}${formatCurrency(step.cumulative)}\\n`;\n        });\n\n        content += `\\n🏗️ VALUATION BUILD-UP:\\n• PV of 5-Year FCF: ${formatCurrency(pv5Years)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminal)}\\n• Enterprise Value: ${formatCurrency(enterpriseValue)}\\n• Terminal Multiple: ${(terminalValue / fcf).toFixed(1)}x FCF\\n• Implied FCF Yield: ${formatPercentage(fcf / enterpriseValue)}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_waterfall',\n            waterfallSteps,\n            valuation: { pv5Years, pvTerminal, enterpriseValue }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Waterfall analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['discountRate', 'terminalGrowthRate'] }\n  },\n\n  PRIVATE_COMPS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n\n        // Comparable companies (medispa/aesthetic medicine sector)\n        const comparables = [\n          { name: 'Lifestyle Communities', evRevenue: 2.1, evEbitda: 12.5, margin: 18.2 },\n          { name: 'European Wax Center', evRevenue: 3.2, evEbitda: 15.8, margin: 22.1 },\n          { name: 'Planet Fitness', evRevenue: 4.5, evEbitda: 18.2, margin: 28.5 },\n          { name: 'Xponential Fitness', evRevenue: 2.8, evEbitda: 14.1, margin: 19.8 },\n          { name: 'Hand & Stone', evRevenue: 2.5, evEbitda: 11.2, margin: 21.4 }\n        ];\n\n        // Calculate company metrics\n        const currentMargin = revenue > 0 ? (ebitda / revenue) * 100 : 0;\n\n        // Peer statistics\n        const avgEvRevenue = comparables.reduce((sum, comp) => sum + comp.evRevenue, 0) / comparables.length;\n        const avgEvEbitda = comparables.reduce((sum, comp) => sum + comp.evEbitda, 0) / comparables.length;\n        const avgMargin = comparables.reduce((sum, comp) => sum + comp.margin, 0) / comparables.length;\n\n        // Trading multiples valuation\n        const tradingValuationRevenue = revenue * avgEvRevenue;\n        const tradingValuationEbitda = ebitda * avgEvEbitda;\n        const avgTradingValuation = (tradingValuationRevenue + tradingValuationEbitda) / 2;\n\n        let content = 'Comparable Company Analysis\\n\\n🏢 PEER GROUP ANALYSIS:\\n';\n        content += `Trading Multiple Averages:\\n• EV/Revenue: ${avgEvRevenue.toFixed(1)}x\\n• EV/EBITDA: ${avgEvEbitda.toFixed(1)}x\\n• EBITDA Margin: ${avgMargin.toFixed(1)}%\\n\\n`;\n\n        content += '📊 DETAILED COMPARABLES:\\n';\n        comparables.forEach((comp, i) => {\n          content += `${i + 1}. ${comp.name}:\\n   EV/Rev: ${comp.evRevenue}x, EV/EBITDA: ${comp.evEbitda}x, Margin: ${comp.margin}%\\n`;\n        });\n\n        content += `\\n💰 IMPLIED VALUATION:\\n• Revenue Multiple: ${formatCurrency(tradingValuationRevenue)} (${avgEvRevenue.toFixed(1)}x)\\n• EBITDA Multiple: ${formatCurrency(tradingValuationEbitda)} (${avgEvEbitda.toFixed(1)}x)\\n• Average Trading Value: ${formatCurrency(avgTradingValuation)}\\n• Current EBITDA Margin: ${formatPercentage(currentMargin / 100)}\\n• Peer Margin Delta: ${(currentMargin - avgMargin).toFixed(1)}pp`;\n\n        content += `\\n🎯 RELATIVE POSITIONING:\\n• Multiple Premium/Discount: ${((avgTradingValuation / ((revenue * 2.5) + (ebitda * 12))) - 1) * 100 > 0 ? '+' : ''}${(((avgTradingValuation / ((revenue * 2.5) + (ebitda * 12))) - 1) * 100).toFixed(1)}%\\n• Margin Competitiveness: ${currentMargin >= avgMargin ? '🟢 Above Peers' : '🟡 Below Peers'}\\n• Size Adjustment: ${revenue < 50000000 ? 'Small-cap discount may apply' : 'Mid-cap positioning'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_comps',\n            comparables,\n            peerAverages: { avgEvRevenue, avgEvEbitda, avgMargin },\n            impliedValuation: { tradingValuationRevenue, tradingValuationEbitda, avgTradingValuation }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Comparable analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['sector', 'size'] }\n  },\n\n  PRIVATE_LBO: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n\n        // LBO assumptions\n        const purchasePrice = ebitda * 10; // 10x EBITDA entry multiple\n        const equityContribution = purchasePrice * 0.3; // 30% equity\n        const debtFinancing = purchasePrice * 0.7; // 70% debt\n        const interestRate = 0.08; // 8% weighted average cost of debt\n        const exitMultiple = 12; // 12x EBITDA exit multiple\n        const holdPeriod = 5; // 5-year hold\n\n        // Project future EBITDA growth\n        const ebitdaGrowthRate = 0.08; // 8% annual growth\n        const projectedEbitda = [];\n        for (let year = 1; year <= holdPeriod; year++) {\n          projectedEbitda.push(ebitda * Math.pow(1 + ebitdaGrowthRate, year));\n        }\n\n        // Debt paydown (assuming 50% FCF used for debt reduction)\n        let remainingDebt = debtFinancing;\n        const debtPaydown = [];\n        projectedEbitda.forEach((yearEbitda, i) => {\n          const fcf = yearEbitda * 0.6; // Assume 60% FCF conversion\n          const interestPayment = remainingDebt * interestRate;\n          const debtReduction = Math.min((fcf - interestPayment) * 0.5, remainingDebt * 0.2);\n          remainingDebt = Math.max(0, remainingDebt - debtReduction);\n          debtPaydown.push({ year: i + 1, ebitda: yearEbitda, debt: remainingDebt, reduction: debtReduction });\n        });\n\n        // Exit valuation\n        const exitEbitda = projectedEbitda[holdPeriod - 1];\n        const exitValue = exitEbitda * exitMultiple;\n        const netProceeds = exitValue - remainingDebt;\n        const totalReturn = netProceeds / equityContribution;\n        const irr = Math.pow(totalReturn, 1 / holdPeriod) - 1;\n        const moic = totalReturn; // Money-on-Money multiple\n\n        let content = `Leveraged Buyout Analysis\\n\\n💼 TRANSACTION STRUCTURE:\\n• Purchase Price: ${formatCurrency(purchasePrice)} (${(purchasePrice / ebitda).toFixed(1)}x EBITDA)\\n• Equity Investment: ${formatCurrency(equityContribution)} (${formatPercentage(equityContribution / purchasePrice)})\\n• Debt Financing: ${formatCurrency(debtFinancing)} (${formatPercentage(debtFinancing / purchasePrice)})\\n• Interest Rate: ${formatPercentage(interestRate)}\\n\\n`;\n\n        content += '📈 EBITDA PROJECTIONS:\\n';\n        projectedEbitda.forEach((ebitdaYear, i) => {\n          content += `Year ${i + 1}: ${formatCurrency(ebitdaYear)} (${formatPercentage(ebitdaGrowthRate)} growth)\\n`;\n        });\n\n        content += '\\n🏦 DEBT PAYDOWN SCHEDULE:\\n';\n        debtPaydown.forEach(year => {\n          content += `Year ${year.year}: Debt ${formatCurrency(year.debt)}, Paydown ${formatCurrency(year.reduction)}\\n`;\n        });\n\n        content += `\\n🎯 EXIT ANALYSIS (Year ${holdPeriod}):\\n• Exit EBITDA: ${formatCurrency(exitEbitda)}\\n• Exit Multiple: ${exitMultiple}x\\n• Exit Value: ${formatCurrency(exitValue)}\\n• Remaining Debt: ${formatCurrency(remainingDebt)}\\n• Net Proceeds: ${formatCurrency(netProceeds)}\\n\\n💰 INVESTOR RETURNS:\\n• Total Return: ${formatCurrency(netProceeds)} (${totalReturn.toFixed(1)}x)\\n• Money-on-Money: ${moic.toFixed(1)}x\\n• IRR: ${formatPercentage(irr)}\\n• Return Quality: ${irr > 0.2 ? '🟢 Excellent' : irr > 0.15 ? '🟡 Good' : '🔴 Poor'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_lbo',\n            transaction: { purchasePrice, equityContribution, debtFinancing },\n            projections: projectedEbitda,\n            returns: { totalReturn, moic, irr }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `LBO analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['leverage', 'holdPeriod', 'exitMultiple'] }\n  },\n\n  PRIVATE_QUALITY: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n\n        // Business Quality Score calculation\n        const qualityMetrics = [];\n\n        // Revenue Quality\n        const revenues = periods.map((_, i) => statements.totalRevenue?.[i] || 0);\n        const revenueGrowthConsistency = calculateGrowthConsistency(revenues);\n        const revenueRecurring = estimateRecurringRevenue(statements, periods.length - 1);\n        qualityMetrics.push({ metric: 'Revenue Quality', score: revenueGrowthConsistency * 0.6 + revenueRecurring * 0.4, weight: 25 });\n\n        // Profitability Quality\n        const margins = revenues.map((rev, i) => {\n          const opIncome = statements.operatingIncome?.[i] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        const marginStability = calculateMarginStability(margins);\n        const profitabilityTrend = calculateProfitabilityTrend(margins);\n        qualityMetrics.push({ metric: 'Profitability Quality', score: marginStability * 0.7 + profitabilityTrend * 0.3, weight: 30 });\n\n        // Cash Generation Quality\n        const cashConversion = 85; // Estimated from medispa characteristics\n        const workingCapitalEfficiency = 90; // Asset-light model\n        qualityMetrics.push({ metric: 'Cash Generation', score: (cashConversion + workingCapitalEfficiency) / 2, weight: 20 });\n\n        // Competitive Position\n        const marketPosition = assessMarketPosition(data);\n        const scalability = assessScalability(revenues);\n        qualityMetrics.push({ metric: 'Competitive Position', score: marketPosition * 0.6 + scalability * 0.4, weight: 15 });\n\n        // Financial Strength\n        const debtLevels = 75; // Assumed moderate debt levels\n        const liquidityPosition = 80; // Cash generation business\n        qualityMetrics.push({ metric: 'Financial Strength', score: (debtLevels + liquidityPosition) / 2, weight: 10 });\n\n        // Calculate overall quality score\n        const overallScore = qualityMetrics.reduce((sum, metric) => sum + (metric.score * metric.weight / 100), 0);\n        const qualityGrade = overallScore >= 80 ? 'A' : overallScore >= 70 ? 'B' : overallScore >= 60 ? 'C' : overallScore >= 50 ? 'D' : 'F';\n\n        let content = `Business Quality Assessment\\n\\n🏆 OVERALL QUALITY SCORE: ${overallScore.toFixed(1)}/100 (Grade: ${qualityGrade})\\n\\n📊 QUALITY BREAKDOWN:\\n`;\n\n        qualityMetrics.forEach(metric => {\n          const grade = metric.score >= 80 ? 'A' : metric.score >= 70 ? 'B' : metric.score >= 60 ? 'C' : 'D';\n          content += `• ${metric.metric}: ${metric.score.toFixed(1)}/100 (${grade}) - Weight: ${metric.weight}%\\n`;\n        });\n\n        content += `\\n🎯 QUALITY ANALYSIS:\\n• Investment Grade: ${qualityGrade === 'A' ? '🟢 High Quality' : qualityGrade === 'B' ? '🟡 Good Quality' : qualityGrade === 'C' ? '🟠 Average Quality' : '🔴 Below Average'}\\n• Risk Profile: ${overallScore >= 75 ? 'Low-Medium Risk' : overallScore >= 60 ? 'Medium Risk' : 'Medium-High Risk'}\\n• Valuation Multiple Premium: ${overallScore >= 80 ? '10-15%' : overallScore >= 70 ? '5-10%' : overallScore >= 60 ? '0-5%' : 'Discount warranted'}\\n\\n💡 KEY STRENGTHS:\\n${identifyStrengths(qualityMetrics)}\\n\\n⚠️ AREAS FOR IMPROVEMENT:\\n${identifyWeaknesses(qualityMetrics)}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_quality',\n            overallScore,\n            qualityGrade,\n            metrics: qualityMetrics\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Quality assessment failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['weights'] }\n  },\n\n  PRIVATE_HELP: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const commands = [\n        { cmd: 'PRIVATE_LOAD()', desc: 'Load and validate private financial data' },\n        { cmd: 'PRIVATE_SUMMARY()', desc: 'Generate executive summary of company performance' },\n        { cmd: 'PRIVATE_DCF()', desc: 'Run discounted cash flow valuation analysis' },\n        { cmd: 'PRIVATE_RATIOS()', desc: 'Calculate comprehensive financial ratios' },\n        { cmd: 'PRIVATE_BENCHMARKS()', desc: 'Compare metrics against industry benchmarks' },\n        { cmd: 'PRIVATE_MULTIPLES()', desc: 'Valuation using industry multiples approach' },\n        { cmd: 'PRIVATE_CASHFLOW()', desc: 'Analyze cash flow generation and quality' },\n        { cmd: 'PRIVATE_GROWTH()', desc: 'Assess revenue growth trends and sustainability' },\n        { cmd: 'PRIVATE_RISK()', desc: 'Evaluate business risk factors and volatility' },\n        { cmd: 'PRIVATE_SCENARIO()', desc: 'Run bull/base/bear case scenario analysis' },\n        { cmd: 'PRIVATE_MONTE_CARLO()', desc: 'Monte Carlo simulation for valuation ranges' },\n        { cmd: 'PRIVATE_SENSITIVITY()', desc: 'Sensitivity analysis on key variables' },\n        { cmd: 'PRIVATE_VALIDATE()', desc: 'Validate data quality and completeness' },\n        { cmd: 'PRIVATE_EXPORT()', desc: 'Export analysis data and results' },\n        { cmd: 'PRIVATE_WATERFALL()', desc: 'DCF waterfall and value bridge analysis' },\n        { cmd: 'PRIVATE_COMPS()', desc: 'Comparable company trading multiples analysis' },\n        { cmd: 'PRIVATE_LBO()', desc: 'Leveraged buyout model and returns analysis' },\n        { cmd: 'PRIVATE_QUALITY()', desc: 'Business quality and investment grade assessment' },\n        { cmd: 'PRIVATE_WORKFLOW()', desc: 'Interactive analysis workflow with recommendations' },\n        { cmd: 'PRIVATE_DASHBOARD()', desc: 'Executive dashboard with key metrics summary' },\n        { cmd: 'PRIVATE_AUDIT()', desc: 'Comprehensive financial audit and red flags analysis' },\n        { cmd: 'PRIVATE_FORECAST()', desc: 'Multi-scenario financial forecasting model' },\n        { cmd: 'PRIVATE_ESG()', desc: 'ESG scoring and sustainable investment analysis' }\n      ];\n\n      let content = 'Private Analysis Commands\\n\\n🛠️ AVAILABLE COMMANDS:\\n';\n      content += commands.map(cmd => `• ${cmd.cmd}\\n  ${cmd.desc}`).join('\\n\\n');\n\n      content += '\\n\\n📋 WORKFLOW RECOMMENDATIONS:\\n';\n      content += '1. Start with PRIVATE_LOAD() to validate data\\n';\n      content += '2. Run PRIVATE_SUMMARY() for company overview\\n';\n      content += '3. Use PRIVATE_DCF() or PRIVATE_MULTIPLES() for valuation\\n';\n      content += '4. Perform PRIVATE_SCENARIO() for risk assessment\\n';\n      content += '5. Execute PRIVATE_BENCHMARKS() for competitive analysis\\n';\n      content += '6. Use PRIVATE_EXPORT() to save results\\n\\n';\n\n      content += '💡 TIPS:\\n• Commands are case-sensitive\\n• Most commands work with default parameters\\n• Use PRIVATE_VALIDATE() if you encounter errors\\n• Results include detailed analysis and insights';\n\n      return {\n        type: 'success',\n        content,\n        data: {\n          analysis: 'private_help',\n          commands: commands.map(cmd => cmd.cmd)\n        }\n      };\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_WORKFLOW: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n\n        // Workflow assessment\n        const workflowSteps = [\n          { step: 'Data Quality', completed: true, score: 85, next: 'PRIVATE_VALIDATE()' },\n          { step: 'Company Overview', completed: false, score: 0, next: 'PRIVATE_SUMMARY()' },\n          { step: 'Financial Analysis', completed: false, score: 0, next: 'PRIVATE_RATIOS()' },\n          { step: 'Valuation Models', completed: false, score: 0, next: 'PRIVATE_DCF() & PRIVATE_MULTIPLES()' },\n          { step: 'Risk Assessment', completed: false, score: 0, next: 'PRIVATE_RISK() & PRIVATE_SCENARIO()' },\n          { step: 'Benchmarking', completed: false, score: 0, next: 'PRIVATE_BENCHMARKS() & PRIVATE_COMPS()' },\n          { step: 'Advanced Models', completed: false, score: 0, next: 'PRIVATE_LBO() & PRIVATE_MONTE_CARLO()' },\n          { step: 'Final Report', completed: false, score: 0, next: 'PRIVATE_EXPORT()' }\n        ];\n\n        const overallProgress = workflowSteps.filter(step => step.completed).length / workflowSteps.length * 100;\n        const nextStep = workflowSteps.find(step => !step.completed);\n\n        let content = `Private Analysis Workflow\\n\\n📋 WORKFLOW PROGRESS: ${overallProgress.toFixed(0)}% Complete\\n\\n🔄 ANALYSIS STEPS:\\n`;\n\n        workflowSteps.forEach((step, i) => {\n          const status = step.completed ? '✅' : i === workflowSteps.findIndex(s => !s.completed) ? '🔄' : '⏳';\n          content += `${i + 1}. ${status} ${step.step} ${step.completed ? `(${step.score}%)` : ''}\\n   Next: ${step.next}\\n\\n`;\n        });\n\n        content += `🎯 RECOMMENDED NEXT STEPS:\\n• ${nextStep ? nextStep.next : 'All steps completed!'}\\n• Focus on ${nextStep ? nextStep.step.toLowerCase() : 'final review'}\\n• Estimated time: ${estimateStepTime(nextStep?.step)}\\n\\n📊 WORKFLOW INSIGHTS:\\n• Data completeness: ${assessDataCompleteness(data)}%\\n• Analysis depth: ${assessAnalysisDepth(workflowSteps)}\\n• Report readiness: ${overallProgress >= 80 ? '🟢 Ready' : overallProgress >= 50 ? '🟡 Partial' : '🔴 Incomplete'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_workflow',\n            workflowSteps,\n            progress: overallProgress,\n            nextStep: nextStep?.step\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Workflow analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_DASHBOARD: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Key metrics calculation\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const grossProfit = statements.grossProfit?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const ebitda = operatingIncome + (statements.depreciation?.[latestIndex] || revenue * 0.02);\n\n        // Growth metrics\n        const revenueGrowth = latestIndex > 0 && statements.totalRevenue?.[latestIndex - 1] > 0 ?\n          ((revenue / statements.totalRevenue[latestIndex - 1]) - 1) * 100 : 0;\n\n        // Margins\n        const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;\n        const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;\n        const ebitdaMargin = revenue > 0 ? (ebitda / revenue) * 100 : 0;\n\n        // Valuation estimates\n        const revenueMultiple = 2.5;\n        const ebitdaMultiple = 10.0;\n        const impliedValuation = (revenue * revenueMultiple + ebitda * ebitdaMultiple) / 2;\n\n        // Performance scoring\n        const performanceScore = calculatePerformanceScore({\n          revenueGrowth, grossMargin, operatingMargin, ebitdaMargin\n        });\n\n        let content = `📊 EXECUTIVE DASHBOARD\\n\\n💰 FINANCIAL SNAPSHOT (${data.periods[latestIndex]}):\\n`;\n        content += '┌─────────────────────────────────────┐\\n';\n        content += `│ Revenue:        ${formatCurrency(revenue).padEnd(20)} │\\n`;\n        content += `│ EBITDA:         ${formatCurrency(ebitda).padEnd(20)} │\\n`;\n        content += `│ Operating Inc:  ${formatCurrency(operatingIncome).padEnd(20)} │\\n`;\n        content += `│ Est. Valuation: ${formatCurrency(impliedValuation).padEnd(20)} │\\n`;\n        content += '└─────────────────────────────────────┘\\n\\n';\n\n        content += '📈 KEY PERFORMANCE INDICATORS:\\n';\n        content += `• Revenue Growth:    ${revenueGrowth >= 0 ? '+' : ''}${revenueGrowth.toFixed(1)}% ${getGrowthIcon(revenueGrowth)}\\n`;\n        content += `• Gross Margin:      ${grossMargin.toFixed(1)}% ${getMarginIcon(grossMargin, 'gross')}\\n`;\n        content += `• Operating Margin:  ${operatingMargin.toFixed(1)}% ${getMarginIcon(operatingMargin, 'operating')}\\n`;\n        content += `• EBITDA Margin:     ${ebitdaMargin.toFixed(1)}% ${getMarginIcon(ebitdaMargin, 'ebitda')}\\n\\n`;\n\n        content += `🎯 PERFORMANCE SCORE: ${performanceScore}/100\\n`;\n        content += `Rating: ${getPerformanceRating(performanceScore)}\\n\\n`;\n\n        content += '🔍 QUICK ACTIONS:\\n• Run PRIVATE_DCF() for detailed valuation\\n• Execute PRIVATE_BENCHMARKS() for peer comparison\\n• Use PRIVATE_SCENARIO() for risk modeling\\n• Try PRIVATE_QUALITY() for investment grade analysis';\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dashboard',\n            metrics: { revenue, ebitda, operatingIncome, impliedValuation },\n            kpis: { revenueGrowth, grossMargin, operatingMargin, ebitdaMargin },\n            performanceScore\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Dashboard generation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['period'] }\n  },\n\n  PRIVATE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const commands = [\n        // Core Analysis Commands\n        { cmd: 'PRIVATE_LOAD()', desc: 'Load and validate private financial data', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_SUMMARY()', desc: 'Generate executive summary of company performance', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_DCF()', desc: 'Run discounted cash flow valuation analysis', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_RATIOS()', desc: 'Calculate comprehensive financial ratios', cat: '📊 CORE ANALYSIS' },\n\n        // Valuation Commands\n        { cmd: 'PRIVATE_WATERFALL()', desc: 'DCF waterfall and value bridge analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_COMPS()', desc: 'Comparable company trading multiples analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_LBO()', desc: 'Leveraged buyout model and returns analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_MULTIPLES()', desc: 'Valuation using industry multiples approach', cat: '💰 VALUATION' },\n\n        // Analytics Commands\n        { cmd: 'PRIVATE_QUALITY()', desc: 'Business quality and investment grade assessment', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_BENCHMARKS()', desc: 'Compare metrics against industry benchmarks', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_CASHFLOW()', desc: 'Analyze cash flow generation and quality', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_GROWTH()', desc: 'Assess revenue growth trends and sustainability', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_RISK()', desc: 'Evaluate business risk factors and volatility', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_MONTE_CARLO()', desc: 'Monte Carlo simulation for valuation ranges', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_SCENARIO()', desc: 'Run bull/base/bear case scenario analysis', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_SENSITIVITY()', desc: 'Sensitivity analysis on key variables', cat: '📈 ANALYTICS' },\n\n        // Automation Commands\n        { cmd: 'PRIVATE_WORKFLOW()', desc: 'Interactive analysis workflow with recommendations', cat: '🤖 AUTOMATION' },\n\n        // Reporting Commands\n        { cmd: 'PRIVATE_DASHBOARD()', desc: 'Executive dashboard with key metrics summary', cat: '📋 REPORTING' },\n\n        // Data Management Commands\n        { cmd: 'PRIVATE_VALIDATE()', desc: 'Validate data quality and completeness', cat: '💾 DATA MANAGEMENT' },\n        { cmd: 'PRIVATE_EXPORT()', desc: 'Export analysis data and results', cat: '💾 DATA MANAGEMENT' },\n\n        // Utility Commands\n        { cmd: 'PRIVATE_HELP()', desc: 'Show all available private analysis commands', cat: '🛠️ UTILITY' }\n      ];\n\n      let content = `🚀 **Private Analysis CLI Commands (${commands.length} Total)**\\n\\n`;\n\n      // Group commands by category\n      const categories = [...new Set(commands.map(cmd => cmd.cat))];\n\n      categories.forEach(category => {\n        const categoryCommands = commands.filter(cmd => cmd.cat === category);\n        content += `### **${category}**\\n`;\n        categoryCommands.forEach(cmd => {\n          content += `- **${cmd.cmd}** - ${cmd.desc}\\n`;\n        });\n        content += '\\n';\n      });\n\n      content += '### **💡 USAGE EXAMPLES:**\\n';\n      content += '```\\n';\n      content += 'PRIVATE_LOAD()           # Start with data validation\\n';\n      content += 'PRIVATE_SUMMARY()        # Get company overview\\n';\n      content += 'PRIVATE_DCF()           # Run DCF valuation\\n';\n      content += 'PRIVATE_COMPS()         # Comparable analysis\\n';\n      content += 'PRIVATE_LBO()           # LBO modeling\\n';\n      content += 'PRIVATE_DASHBOARD()     # Executive summary\\n';\n      content += 'PRIVATE_WORKFLOW()      # Guided analysis\\n';\n      content += '```\\n\\n';\n\n      content += '**All commands work with the default private financial data and provide professional-grade analysis suitable for investment banking, private equity, and corporate finance workflows.**';\n\n      return {\n        type: 'success',\n        content,\n        data: {\n          analysis: 'private_commands_list',\n          commands: commands.map(cmd => cmd.cmd),\n          totalCommands: commands.length\n        }\n      };\n    },\n    parameterSchema: { required: [], optional: [] }\n  }\n};\n","/**\n * System & Performance Commands\n * System monitoring, configuration, and performance tools\n */\n\nimport { formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const systemCommands = {\n  PERFORMANCE_TEST: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const startTime = Date.now();\n\n        // Test various system components\n        const tests = [];\n\n        // Command processing speed test\n        const cmdStart = Date.now();\n        await new Promise(resolve => setTimeout(resolve, 10)); // Simulate processing\n        tests.push({\n          name: 'Command Processing',\n          duration: Date.now() - cmdStart,\n          status: 'Pass',\n          benchmark: 50 // ms\n        });\n\n        // Data fetching test\n        const dataStart = Date.now();\n        try {\n          await dataFetchingService.fetchCompanyProfile('AAPL');\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Pass',\n            benchmark: 1000 // ms\n          });\n        } catch (error) {\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Fail',\n            benchmark: 1000,\n            error: error.message\n          });\n        }\n\n        // Memory usage test\n        const memStart = Date.now();\n        const memoryUsage = process.memoryUsage ? process.memoryUsage() : {\n          heapUsed: Math.random() * 100000000,\n          heapTotal: Math.random() * 200000000,\n          external: Math.random() * 50000000\n        };\n        tests.push({\n          name: 'Memory Check',\n          duration: Date.now() - memStart,\n          status: 'Pass',\n          benchmark: 10,\n          details: {\n            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n            external: Math.round(memoryUsage.external / 1024 / 1024)\n          }\n        });\n\n        // Cache performance test\n        const cacheStart = Date.now();\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        tests.push({\n          name: 'Cache Performance',\n          duration: Date.now() - cacheStart,\n          status: cacheSize > 0 ? 'Pass' : 'Warning',\n          benchmark: 5,\n          details: { entries: cacheSize }\n        });\n\n        // Calculate overall performance\n        const totalDuration = Date.now() - startTime;\n        const passedTests = tests.filter(t => t.status === 'Pass').length;\n        const overallScore = (passedTests / tests.length) * 100;\n\n        const content = `⚡ System Performance Test Results\\n\\n🎯 OVERALL SCORE: ${formatNumber(overallScore, 1)}/100 ${overallScore > 90 ? '🟢 Excellent' : overallScore > 75 ? '🟡 Good' : overallScore > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📊 TEST RESULTS:\\n${tests.map(test => {\n          const statusIcon = test.status === 'Pass' ? '✅' : test.status === 'Warning' ? '⚠️' : '❌';\n          const performance = test.duration <= test.benchmark ? '🟢 Fast' : test.duration <= test.benchmark * 2 ? '🟡 Moderate' : '🔴 Slow';\n          return `${statusIcon} ${test.name}: ${test.duration}ms ${performance}\\n   Benchmark: ${test.benchmark}ms, Status: ${test.status}${test.details ? `\\n   Details: ${JSON.stringify(test.details)}` : ''}${test.error ? `\\n   Error: ${test.error}` : ''}`;\n        }).join('\\n\\n')}\\n\\n⏱️ PERFORMANCE SUMMARY:\\n• Total Test Duration: ${totalDuration}ms\\n• Tests Passed: ${passedTests}/${tests.length}\\n• Average Response Time: ${formatNumber(tests.reduce((sum, t) => sum + t.duration, 0) / tests.length, 1)}ms\\n• System Health: ${overallScore > 80 ? 'Healthy' : overallScore > 60 ? 'Moderate' : 'Needs Attention'}\\n\\n💾 MEMORY USAGE:\\n• Heap Used: ${tests[2].details.heapUsed} MB\\n• Heap Total: ${tests[2].details.heapTotal} MB\\n• External: ${tests[2].details.external} MB\\n• Memory Efficiency: ${tests[2].details.heapUsed / tests[2].details.heapTotal < 0.8 ? 'Good' : 'High Usage'}\\n\\n🔧 RECOMMENDATIONS:\\n${tests.some(t => t.status === 'Fail') ? '• Address failed tests to improve system reliability\\n' : ''}${tests.some(t => t.duration > t.benchmark * 2) ? '• Slow response times detected - check network connection\\n' : ''}${tests[2].details.heapUsed > 100 ? '• High memory usage - consider restarting application\\n' : ''}${cacheSize === 0 ? '• Cache is empty - performance may be slower\\n' : ''}• Run performance tests regularly to monitor system health\\n\\n💡 OPTIMIZATION TIPS:\\n• Clear cache periodically with \"cache clear\" command\\n• Monitor memory usage during heavy analysis\\n• Check network connectivity for data fetching issues`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'performance_test',\n            overallScore,\n            totalDuration,\n            tests,\n            memoryUsage: tests[2].details\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Performance test failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  API_USAGE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        // Mock API usage statistics (in real implementation, would track actual usage)\n        const usage = {\n          daily: {\n            calls: Math.floor(Math.random() * 1000 + 100),\n            limit: 1000,\n            remaining: Math.floor(Math.random() * 500 + 100)\n          },\n          monthly: {\n            calls: Math.floor(Math.random() * 20000 + 5000),\n            limit: 25000,\n            remaining: Math.floor(Math.random() * 10000 + 2000)\n          },\n          endpoints: {\n            'company-profile': Math.floor(Math.random() * 300 + 50),\n            'financial-statements': Math.floor(Math.random() * 200 + 30),\n            'market-data': Math.floor(Math.random() * 400 + 80),\n            'peer-analysis': Math.floor(Math.random() * 150 + 20),\n            'sec-filings': Math.floor(Math.random() * 100 + 10)\n          }\n        };\n\n        const dailyUsagePercent = (usage.daily.calls / usage.daily.limit) * 100;\n        const monthlyUsagePercent = (usage.monthly.calls / usage.monthly.limit) * 100;\n        const totalEndpointCalls = Object.values(usage.endpoints).reduce((sum, calls) => sum + calls, 0);\n\n        // Rate limiting status\n        const rateLimitStatus = dailyUsagePercent > 90 ? 'Critical' : dailyUsagePercent > 75 ? 'Warning' : 'Normal';\n\n        // Cost estimation (mock)\n        const estimatedCost = (usage.monthly.calls * 0.001).toFixed(2); // $0.001 per call\n\n        const content = `📊 API Usage Statistics\\n\\n🔄 CURRENT USAGE:\\n• Daily Calls: ${formatNumber(usage.daily.calls, 0)}/${formatNumber(usage.daily.limit, 0)} (${formatPercentage(dailyUsagePercent / 100)})\\n• Monthly Calls: ${formatNumber(usage.monthly.calls, 0)}/${formatNumber(usage.monthly.limit, 0)} (${formatPercentage(monthlyUsagePercent / 100)})\\n• Daily Remaining: ${formatNumber(usage.daily.remaining, 0)} calls\\n• Monthly Remaining: ${formatNumber(usage.monthly.remaining, 0)} calls\\n\\n⚡ RATE LIMIT STATUS: ${rateLimitStatus} ${rateLimitStatus === 'Critical' ? '🔴' : rateLimitStatus === 'Warning' ? '🟡' : '🟢'}\\n\\n📈 ENDPOINT BREAKDOWN:\\n${Object.entries(usage.endpoints).map(([endpoint, calls]) =>\n          `• ${endpoint.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}: ${formatNumber(calls, 0)} calls (${formatPercentage(calls / totalEndpointCalls)})`\n        ).join('\\n')}\\n\\n💰 COST ANALYSIS:\\n• Estimated Monthly Cost: $${estimatedCost}\\n• Cost Per Call: $0.001\\n• Most Expensive Endpoint: ${Object.entries(usage.endpoints).reduce((max, [endpoint, calls]) => calls > max.calls ? { endpoint, calls } : max, { endpoint: '', calls: 0 }).endpoint}\\n\\n📊 USAGE PATTERNS:\\n• Peak Usage Time: ${Math.random() > 0.5 ? 'Market Hours (9AM-4PM EST)' : 'After Hours'}\\n• Average Calls/Hour: ${formatNumber(usage.daily.calls / 24, 1)}\\n• Efficiency Score: ${dailyUsagePercent < 80 ? 'Efficient' : 'High Usage'}\\n\\n⚠️ ALERTS & RECOMMENDATIONS:\\n${dailyUsagePercent > 90 ? '• 🔴 CRITICAL: Daily limit almost reached - reduce API calls\\n' : ''}${dailyUsagePercent > 75 ? '• 🟡 WARNING: High daily usage - monitor closely\\n' : ''}${monthlyUsagePercent > 80 ? '• 🟠 Monthly usage is high - consider upgrading plan\\n' : ''}${usage.daily.remaining < 50 ? '• Consider caching results to reduce API calls\\n' : ''}• Use batch operations when possible to optimize usage\\n• Monitor usage during market hours for peak efficiency\\n\\n🔧 OPTIMIZATION TIPS:\\n• Enable caching to reduce redundant calls\\n• Use batch analysis for multiple stocks\\n• Schedule heavy analysis during off-peak hours\\n• Consider upgrading plan if consistently hitting limits\\n\\n📅 RESET SCHEDULE:\\n• Daily limits reset: Midnight UTC\\n• Monthly limits reset: 1st of each month\\n• Current time: ${new Date().toISOString()}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode shows simulated usage data.' : '✅ Live API usage tracking'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'api_usage',\n            usage,\n            rateLimitStatus,\n            estimatedCost: parseFloat(estimatedCost),\n            usagePercents: {\n              daily: dailyUsagePercent,\n              monthly: monthlyUsagePercent\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `API usage check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  CONFIG: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const [setting, value] = parsedCommand.parameters;\n\n      if (!setting) {\n        // Show all current settings\n        const settings = processor.getAllSettings();\n        const variables = processor.getAllVariables();\n\n        const content = `⚙️ System Configuration\\n\\n🔧 CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) =>\n          `• ${key}: ${val}`\n        ).join('\\n')}\\n\\n💾 STORED VARIABLES:\\n${Object.entries(variables).map(([key, val]) =>\n          `• ${key}: ${Array.isArray(val) ? `Array(${val.length})` : typeof val === 'object' ? 'Object' : val}`\n        ).join('\\n')}\\n\\n🛠️ AVAILABLE SETTINGS:\\n• currency: USD, EUR, GBP, JPY\\n• precision: 0-6 decimal places\\n• dateFormat: YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY\\n• theme: dark, light, auto\\n• notifications: enabled, disabled\\n\\n💡 USAGE:\\n• CONFIG() - Show all settings\\n• CONFIG(\"setting\") - Show specific setting\\n• CONFIG(\"setting\", \"value\") - Update setting\\n\\nExample: CONFIG(\"currency\", \"EUR\")`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'config_view',\n            settings,\n            variables\n          }\n        };\n      }\n\n      if (value === undefined) {\n        // Show specific setting\n        const currentValue = processor.getSetting(setting);\n        return {\n          type: 'info',\n          content: `⚙️ Setting: ${setting}\\nCurrent Value: ${currentValue || 'Not set'}\\n\\nTo update: CONFIG(\"${setting}\", \"new_value\")`\n        };\n      }\n\n      // Update setting\n      try {\n        // Validate setting values\n        const validSettings = {\n          currency: ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD'],\n          precision: [0, 1, 2, 3, 4, 5, 6],\n          dateFormat: ['YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'],\n          theme: ['dark', 'light', 'auto'],\n          notifications: ['enabled', 'disabled']\n        };\n\n        if (validSettings[setting] && !validSettings[setting].includes(value)) {\n          return {\n            type: 'error',\n            content: `Invalid value \"${value}\" for setting \"${setting}\". Valid values: ${validSettings[setting].join(', ')}`\n          };\n        }\n\n        const oldValue = processor.getSetting(setting);\n        processor.updateSetting(setting, value);\n\n        return {\n          type: 'success',\n          content: `✅ Setting Updated\\n\\n• Setting: ${setting}\\n• Old Value: ${oldValue || 'Not set'}\\n• New Value: ${value}\\n\\nSetting will take effect immediately for new commands.`,\n          data: {\n            analysis: 'config_update',\n            setting,\n            oldValue,\n            newValue: value\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Configuration update failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  }\n};\n","/**\n * Technical Analysis Commands\n * Technical indicators, chart patterns, and market intelligence\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const technicalCommands = {\n  TECHNICALS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'TECHNICALS command requires a ticker symbol. Usage: TECHNICALS(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock technical indicators (in real implementation, would calculate from price data)\n        const price = profile.price;\n        const volatility = (profile.beta || 1.0) * 0.16;\n\n        // Generate mock technical indicators\n        const sma20 = price * (1 + (Math.random() - 0.5) * 0.1);\n        const sma50 = price * (1 + (Math.random() - 0.5) * 0.15);\n        const ema12 = price * (1 + (Math.random() - 0.5) * 0.08);\n        const ema26 = price * (1 + (Math.random() - 0.5) * 0.12);\n\n        const rsi = 30 + Math.random() * 40; // RSI between 30-70\n        const macd = (ema12 - ema26);\n        const macdSignal = macd * (0.9 + Math.random() * 0.2);\n        const macdHistogram = macd - macdSignal;\n\n        const bollingerUpper = sma20 * 1.02;\n        const bollingerLower = sma20 * 0.98;\n        const bollingerPosition = (price - bollingerLower) / (bollingerUpper - bollingerLower);\n\n        // Support and resistance levels\n        const support1 = price * 0.95;\n        const support2 = price * 0.90;\n        const resistance1 = price * 1.05;\n        const resistance2 = price * 1.10;\n\n        // Generate signals\n        const signals = [];\n        if (price > sma20 && sma20 > sma50) signals.push('Bullish trend (Price > SMA20 > SMA50)');\n        if (price < sma20 && sma20 < sma50) signals.push('Bearish trend (Price < SMA20 < SMA50)');\n        if (rsi < 30) signals.push('Oversold condition (RSI < 30)');\n        if (rsi > 70) signals.push('Overbought condition (RSI > 70)');\n        if (macdHistogram > 0 && macd > macdSignal) signals.push('MACD bullish crossover');\n        if (macdHistogram < 0 && macd < macdSignal) signals.push('MACD bearish crossover');\n        if (bollingerPosition > 0.8) signals.push('Near upper Bollinger Band');\n        if (bollingerPosition < 0.2) signals.push('Near lower Bollinger Band');\n\n        const content = `Technical Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 PRICE & MOVING AVERAGES:\\n• Current Price: ${formatCurrency(price)}\\n• SMA(20): ${formatCurrency(sma20)} ${price > sma20 ? '📈' : '📉'}\\n• SMA(50): ${formatCurrency(sma50)} ${price > sma50 ? '📈' : '📉'}\\n• EMA(12): ${formatCurrency(ema12)}\\n• EMA(26): ${formatCurrency(ema26)}\\n\\n📈 MOMENTUM INDICATORS:\\n• RSI(14): ${formatNumber(rsi, 1)} ${rsi > 70 ? '🔴 Overbought' : rsi < 30 ? '🟢 Oversold' : '🟡 Neutral'}\\n• MACD: ${formatNumber(macd, 3)}\\n• MACD Signal: ${formatNumber(macdSignal, 3)}\\n• MACD Histogram: ${formatNumber(macdHistogram, 3)} ${macdHistogram > 0 ? '📈' : '📉'}\\n\\n🎯 BOLLINGER BANDS:\\n• Upper Band: ${formatCurrency(bollingerUpper)}\\n• Middle (SMA20): ${formatCurrency(sma20)}\\n• Lower Band: ${formatCurrency(bollingerLower)}\\n• Position: ${formatPercentage(bollingerPosition)} ${bollingerPosition > 0.8 ? '🔴 Near Upper' : bollingerPosition < 0.2 ? '🟢 Near Lower' : '🟡 Middle'}\\n\\n⚖️ SUPPORT & RESISTANCE:\\n• Resistance 2: ${formatCurrency(resistance2)}\\n• Resistance 1: ${formatCurrency(resistance1)}\\n• Current: ${formatCurrency(price)}\\n• Support 1: ${formatCurrency(support1)}\\n• Support 2: ${formatCurrency(support2)}\\n\\n🚨 ACTIVE SIGNALS:\\n${signals.length > 0 ? signals.map(signal => `• ${signal}`).join('\\n') : '• No active signals'}\\n\\n📊 TREND ANALYSIS:\\n• Short-term (20-day): ${price > sma20 ? 'Bullish' : 'Bearish'}\\n• Medium-term (50-day): ${price > sma50 ? 'Bullish' : 'Bearish'}\\n• Momentum: ${rsi > 50 ? 'Positive' : 'Negative'}\\n• Volatility: ${volatility > 0.25 ? 'High' : volatility > 0.15 ? 'Moderate' : 'Low'}\\n\\n💡 TRADING INSIGHTS:\\n• ${price > sma20 && rsi < 70 ? 'Potential uptrend with room to run' : ''}\\n• ${price < sma20 && rsi > 30 ? 'Potential downtrend with selling pressure' : ''}\\n• ${Math.abs(bollingerPosition - 0.5) < 0.2 ? 'Price consolidating in middle of range' : ''}\\n• Watch for breakout above ${formatCurrency(resistance1)} or breakdown below ${formatCurrency(support1)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated technical data. Configure API keys for live price data.' : '✅ Based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'technical',\n            ticker: ticker.toUpperCase(),\n            indicators: {\n              price,\n              sma20,\n              sma50,\n              rsi,\n              macd,\n              macdSignal,\n              bollingerUpper,\n              bollingerLower,\n              support1,\n              support2,\n              resistance1,\n              resistance2\n            },\n            signals\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Technical analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SUPPORT_RESISTANCE: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SUPPORT_RESISTANCE command requires a ticker symbol. Usage: SUPPORT_RESISTANCE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const price = profile.price;\n\n        // Generate support and resistance levels based on price\n        const levels = [\n          { type: 'Resistance', level: price * 1.15, strength: 'Strong', touches: 3 },\n          { type: 'Resistance', level: price * 1.08, strength: 'Moderate', touches: 2 },\n          { type: 'Resistance', level: price * 1.03, strength: 'Weak', touches: 1 },\n          { type: 'Current', level: price, strength: 'Current Price', touches: 0 },\n          { type: 'Support', level: price * 0.97, strength: 'Weak', touches: 1 },\n          { type: 'Support', level: price * 0.92, strength: 'Moderate', touches: 2 },\n          { type: 'Support', level: price * 0.85, strength: 'Strong', touches: 4 }\n        ];\n\n        // Calculate distances and probabilities\n        const nearestSupport = levels.filter(l => l.type === 'Support' && l.level < price)[0];\n        const nearestResistance = levels.filter(l => l.type === 'Resistance' && l.level > price)[0];\n\n        const supportDistance = ((price - nearestSupport.level) / price) * 100;\n        const resistanceDistance = ((nearestResistance.level - price) / price) * 100;\n\n        const content = `Support & Resistance Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🎯 KEY LEVELS:\\n${levels.map(level => {\n          const distance = ((level.level - price) / price) * 100;\n          const arrow = level.type === 'Current' ? '👉' :\n            level.type === 'Resistance' ? '🔴' : '🟢';\n          return `${arrow} ${level.type}: ${formatCurrency(level.level)} (${level.strength}) ${level.touches > 0 ? `[${level.touches} touches]` : ''} ${level.type !== 'Current' ? `(${formatPercentage(Math.abs(distance) / 100)} away)` : ''}`;\n        }).join('\\n')}\\n\\n📊 LEVEL ANALYSIS:\\n• Nearest Support: ${formatCurrency(nearestSupport.level)} (${formatPercentage(supportDistance / 100)} below)\\n• Nearest Resistance: ${formatCurrency(nearestResistance.level)} (${formatPercentage(resistanceDistance / 100)} above)\\n• Support Strength: ${nearestSupport.strength}\\n• Resistance Strength: ${nearestResistance.strength}\\n\\n📈 TRADING RANGES:\\n• Current Range: ${formatCurrency(nearestSupport.level)} - ${formatCurrency(nearestResistance.level)}\\n• Range Width: ${formatPercentage((nearestResistance.level - nearestSupport.level) / price)}\\n• Position in Range: ${formatPercentage((price - nearestSupport.level) / (nearestResistance.level - nearestSupport.level))}\\n\\n🎯 BREAKOUT TARGETS:\\n• Upside Target: ${formatCurrency(nearestResistance.level * 1.05)}\\n• Downside Target: ${formatCurrency(nearestSupport.level * 0.95)}\\n• Risk/Reward Ratio: ${formatNumber(resistanceDistance / supportDistance, 2)}:1\\n\\n💡 TRADING INSIGHTS:\\n• ${supportDistance < 3 ? '⚠️ Close to support - watch for bounce or breakdown' : ''}\\n• ${resistanceDistance < 3 ? '⚠️ Close to resistance - watch for breakout or rejection' : ''}\\n• ${nearestSupport.strength === 'Strong' ? '🛡️ Strong support should provide good downside protection' : ''}\\n• ${nearestResistance.strength === 'Strong' ? '🚧 Strong resistance may limit upside potential' : ''}\\n• Volume confirmation needed for breakouts\\n\\n🔍 LEVEL QUALITY:\\n• Support levels tested ${nearestSupport.touches} times\\n• Resistance levels tested ${nearestResistance.touches} times\\n• More touches = stronger level\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated levels. Configure API keys for historical price data.' : '✅ Based on historical price action'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'support_resistance',\n            ticker: ticker.toUpperCase(),\n            levels,\n            nearestSupport,\n            nearestResistance,\n            supportDistance,\n            resistanceDistance\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Support & resistance analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Advanced Valuation Model Commands\n * DDM, Residual Income, Asset-Based, and other sophisticated valuation techniques\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const valuationCommands = {\n  DDM: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DDM command requires a ticker symbol. Usage: DDM(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // DDM calculations\n        const currentDividend = profile.dividendYield * profile.price || 0;\n        const dividendGrowthRate = 0.05; // Assumed 5% growth\n        const requiredReturn = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n\n        if (currentDividend === 0) {\n          return {\n            type: 'warning',\n            content: `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n⚠️ NO DIVIDEND ANALYSIS:\\n• Current Dividend: $0.00\\n• Dividend Yield: 0.00%\\n• Company does not pay dividends\\n\\n💡 ALTERNATIVE VALUATION METHODS:\\n• Consider using DCF(${ticker.toUpperCase()}) for non-dividend paying stocks\\n• Growth companies often reinvest earnings rather than pay dividends\\n• Use COMP(${ticker.toUpperCase()}) for relative valuation\\n\\n📊 COMPANY METRICS:\\n• Current Price: ${formatCurrency(profile.price)}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}x\\n• Beta: ${formatNumber(profile.beta, 2)}`\n          };\n        }\n\n        // Gordon Growth Model\n        const gordonValue = currentDividend * (1 + dividendGrowthRate) / (requiredReturn - dividendGrowthRate);\n\n        // Two-stage DDM\n        const highGrowthYears = 5;\n        const highGrowthRate = dividendGrowthRate * 1.5;\n        const terminalGrowthRate = 0.03;\n\n        let presentValueHighGrowth = 0;\n        for (let year = 1; year <= highGrowthYears; year++) {\n          const dividend = currentDividend * Math.pow(1 + highGrowthRate, year);\n          const presentValue = dividend / Math.pow(1 + requiredReturn, year);\n          presentValueHighGrowth += presentValue;\n        }\n\n        const terminalDividend = currentDividend * Math.pow(1 + highGrowthRate, highGrowthYears) * (1 + terminalGrowthRate);\n        const terminalValue = terminalDividend / (requiredReturn - terminalGrowthRate);\n        const presentValueTerminal = terminalValue / Math.pow(1 + requiredReturn, highGrowthYears);\n\n        const twoStageValue = presentValueHighGrowth + presentValueTerminal;\n\n        // Calculate upside/downside\n        const gordonUpside = ((gordonValue - profile.price) / profile.price) * 100;\n        const twoStageUpside = ((twoStageValue - profile.price) / profile.price) * 100;\n\n        const content = `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💰 DIVIDEND INFORMATION:\\n• Current Annual Dividend: ${formatCurrency(currentDividend)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n• Estimated Growth Rate: ${formatPercentage(dividendGrowthRate)}\\n• Required Return (CAPM): ${formatPercentage(requiredReturn)}\\n\\n📊 GORDON GROWTH MODEL:\\n• Fair Value: ${formatCurrency(gordonValue)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(gordonUpside / 100)}\\n\\n📈 TWO-STAGE DDM:\\n• High Growth Period: ${highGrowthYears} years at ${formatPercentage(highGrowthRate)}\\n• Terminal Growth: ${formatPercentage(terminalGrowthRate)}\\n• PV of High Growth Dividends: ${formatCurrency(presentValueHighGrowth)}\\n• PV of Terminal Value: ${formatCurrency(presentValueTerminal)}\\n• Total Fair Value: ${formatCurrency(twoStageValue)}\\n• Upside/(Downside): ${formatPercentage(twoStageUpside / 100)}\\n\\n🎯 VALUATION SUMMARY:\\n• Gordon Model: ${gordonUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(gordonUpside) / 100)}\\n• Two-Stage Model: ${twoStageUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(twoStageUpside) / 100)}\\n• Average Fair Value: ${formatCurrency((gordonValue + twoStageValue) / 2)}\\n\\n⚠️ KEY ASSUMPTIONS:\\n• Dividend growth rates are estimates\\n• Required return based on CAPM\\n• Terminal growth rate of ${formatPercentage(terminalGrowthRate)} assumed\\n• Model assumes dividends grow in perpetuity\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'ddm',\n            ticker: ticker.toUpperCase(),\n            results: {\n              currentDividend,\n              gordonValue,\n              twoStageValue,\n              gordonUpside,\n              twoStageUpside,\n              requiredReturn,\n              dividendGrowthRate\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DDM analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  RESIDUAL_INCOME: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RESIDUAL_INCOME command requires a ticker symbol. Usage: RESIDUAL_INCOME(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // Residual Income calculations\n        const bookValue = profile.bookValue || profile.mktCap / 2; // Fallback estimate\n        const roe = profile.returnOnEquityTTM || 0.15; // Fallback 15%\n        const costOfEquity = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        const netIncome = _financials[0]?.netIncome || profile.mktCap * 0.08; // Fallback estimate\n\n        // Calculate residual income\n        const normalIncome = bookValue * costOfEquity;\n        const residualIncome = netIncome - normalIncome;\n\n        // Project residual income for 5 years\n        const projectionYears = 5;\n        const residualIncomeGrowth = Math.max(-0.05, Math.min(0.10, roe - costOfEquity)); // Fade to zero\n\n        let totalPVResidualIncome = 0;\n        const projections = [];\n\n        for (let year = 1; year <= projectionYears; year++) {\n          const projectedRI = residualIncome * Math.pow(1 + residualIncomeGrowth * (1 - year * 0.15), year);\n          const presentValue = projectedRI / Math.pow(1 + costOfEquity, year);\n          totalPVResidualIncome += presentValue;\n\n          projections.push({\n            year,\n            residualIncome: projectedRI,\n            presentValue\n          });\n        }\n\n        // Terminal value (assume residual income fades to zero)\n        const terminalRI = projections[projectionYears - 1].residualIncome * 0.5;\n        const terminalValue = terminalRI / costOfEquity;\n        const pvTerminalValue = terminalValue / Math.pow(1 + costOfEquity, projectionYears);\n\n        // Calculate intrinsic value\n        const intrinsicValue = bookValue + totalPVResidualIncome + pvTerminalValue;\n        const valuePerShare = intrinsicValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((valuePerShare - profile.price) / profile.price) * 100;\n\n        const content = `Residual Income Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BASE METRICS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• ROE: ${formatPercentage(roe)}\\n• Cost of Equity: ${formatPercentage(costOfEquity)}\\n• Net Income: ${formatCurrency(netIncome, 'USD', true)}\\n\\n💰 RESIDUAL INCOME ANALYSIS:\\n• Normal Income: ${formatCurrency(normalIncome, 'USD', true)}\\n• Current Residual Income: ${formatCurrency(residualIncome, 'USD', true)}\\n• RI Growth Rate: ${formatPercentage(residualIncomeGrowth)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${projections.map(p =>\n          `Year ${p.year}: RI ${formatCurrency(p.residualIncome, 'USD', true)}, PV ${formatCurrency(p.presentValue, 'USD', true)}`\n        ).join('\\n')}\\n\\n🎯 VALUATION RESULTS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• PV of Residual Income: ${formatCurrency(totalPVResidualIncome, 'USD', true)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminalValue, 'USD', true)}\\n• Total Intrinsic Value: ${formatCurrency(intrinsicValue, 'USD', true)}\\n• Value Per Share: ${formatCurrency(valuePerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n📊 KEY INSIGHTS:\\n• ${residualIncome > 0 ? 'Company generates positive economic value' : 'Company destroys economic value'}\\n• ROE vs Cost of Equity: ${roe > costOfEquity ? 'Value Creating' : 'Value Destroying'}\\n• ${upside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(upside) / 100)}\\n\\n⚠️ MODEL ASSUMPTIONS:\\n• Residual income growth fades over time\\n• Terminal value assumes sustainable competitive advantage\\n• Cost of equity based on CAPM\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'residual_income',\n            ticker: ticker.toUpperCase(),\n            results: {\n              bookValue,\n              residualIncome,\n              intrinsicValue,\n              valuePerShare,\n              upside,\n              projections\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Residual income analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  ASSET_BASED: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ASSET_BASED command requires a ticker symbol. Usage: ASSET_BASED(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const balanceSheet = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'balance-sheet-statement');\n\n        // Asset-based valuation\n        const totalAssets = balanceSheet[0]?.totalAssets || profile.mktCap * 1.5; // Fallback\n        const totalLiabilities = balanceSheet[0]?.totalLiabilities || profile.totalDebt || totalAssets * 0.4;\n        const bookValue = totalAssets - totalLiabilities;\n\n        // Adjust assets to market value\n        const cashAndEquivalents = balanceSheet[0]?.cashAndCashEquivalents || profile.totalCash || totalAssets * 0.1;\n        const inventory = balanceSheet[0]?.inventory || totalAssets * 0.15;\n        const ppe = balanceSheet[0]?.propertyPlantEquipmentNet || totalAssets * 0.3;\n        const intangibleAssets = balanceSheet[0]?.intangibleAssets || totalAssets * 0.2;\n        const otherAssets = totalAssets - cashAndEquivalents - inventory - ppe - intangibleAssets;\n\n        // Apply market value adjustments\n        const adjustments = {\n          cash: { book: cashAndEquivalents, market: cashAndEquivalents, adjustment: 1.0 },\n          inventory: { book: inventory, market: inventory * 0.8, adjustment: 0.8 }, // 20% discount\n          ppe: { book: ppe, market: ppe * 1.2, adjustment: 1.2 }, // 20% premium for real estate\n          intangibles: { book: intangibleAssets, market: intangibleAssets * 0.5, adjustment: 0.5 }, // 50% discount\n          other: { book: otherAssets, market: otherAssets * 0.9, adjustment: 0.9 }\n        };\n\n        const totalMarketAssets = Object.values(adjustments).reduce((sum, adj) => sum + adj.market, 0);\n        const netAssetValue = totalMarketAssets - totalLiabilities;\n        const navPerShare = netAssetValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((navPerShare - profile.price) / profile.price) * 100;\n\n        // Liquidation value (more conservative)\n        const liquidationValue = totalMarketAssets * 0.7 - totalLiabilities; // 30% liquidation discount\n        const liquidationPerShare = liquidationValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n\n        const content = `Asset-Based Valuation for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BALANCE SHEET SUMMARY:\\n• Total Assets: ${formatCurrency(totalAssets, 'USD', true)}\\n• Total Liabilities: ${formatCurrency(totalLiabilities, 'USD', true)}\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n\\n💰 ASSET BREAKDOWN & ADJUSTMENTS:\\n• Cash & Equivalents: ${formatCurrency(adjustments.cash.book, 'USD', true)} → ${formatCurrency(adjustments.cash.market, 'USD', true)} (${formatPercentage(adjustments.cash.adjustment - 1)})\\n• Inventory: ${formatCurrency(adjustments.inventory.book, 'USD', true)} → ${formatCurrency(adjustments.inventory.market, 'USD', true)} (${formatPercentage(adjustments.inventory.adjustment - 1)})\\n• PP&E: ${formatCurrency(adjustments.ppe.book, 'USD', true)} → ${formatCurrency(adjustments.ppe.market, 'USD', true)} (${formatPercentage(adjustments.ppe.adjustment - 1)})\\n• Intangibles: ${formatCurrency(adjustments.intangibles.book, 'USD', true)} → ${formatCurrency(adjustments.intangibles.market, 'USD', true)} (${formatPercentage(adjustments.intangibles.adjustment - 1)})\\n• Other Assets: ${formatCurrency(adjustments.other.book, 'USD', true)} → ${formatCurrency(adjustments.other.market, 'USD', true)} (${formatPercentage(adjustments.other.adjustment - 1)})\\n\\n🎯 VALUATION RESULTS:\\n• Adjusted Asset Value: ${formatCurrency(totalMarketAssets, 'USD', true)}\\n• Net Asset Value: ${formatCurrency(netAssetValue, 'USD', true)}\\n• NAV Per Share: ${formatCurrency(navPerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n🔥 LIQUIDATION ANALYSIS:\\n• Liquidation Value: ${formatCurrency(liquidationValue, 'USD', true)}\\n• Liquidation Per Share: ${formatCurrency(liquidationPerShare)}\\n• Liquidation Premium: ${formatPercentage((liquidationPerShare / profile.price - 1))}\\n\\n📈 ASSET EFFICIENCY:\\n• Asset Turnover: ${formatNumber(profile.revenue / totalAssets, 2)}x\\n• Book Value Multiple: ${formatNumber(profile.price / (bookValue / (profile.sharesOutstanding || profile.mktCap / profile.price)), 2)}x\\n• Tangible Book Multiple: ${formatNumber(profile.pb, 2)}x\\n\\n💡 INSIGHTS:\\n• ${upside > 0 ? 'Trading below asset value - potential value opportunity' : 'Trading above asset value - premium for intangibles/growth'}\\n• Asset-based valuation most relevant for asset-heavy businesses\\n• Consider liquidation value as downside protection\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'asset_based',\n            ticker: ticker.toUpperCase(),\n            results: {\n              totalAssets,\n              netAssetValue,\n              navPerShare,\n              liquidationValue,\n              liquidationPerShare,\n              upside,\n              adjustments\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Asset-based valuation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Command Initializer\n * Registers all available commands with the command registry\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { automationCommands } from './commands/automationCommands';\nimport { coreCommands } from './commands/coreCommands';\nimport { dataCommands } from './commands/dataCommands';\nimport { esgCommands } from './commands/esgCommands';\nimport { persistenceCommands } from './commands/persistenceCommands';\nimport { portfolioCommands } from './commands/portfolioCommands';\nimport { privateAnalysisCommands } from './commands/privateAnalysisCommands';\nimport { systemCommands } from './commands/systemCommands';\nimport { technicalCommands } from './commands/technicalCommands';\nimport { valuationCommands } from './commands/valuationCommands';\n\n/**\n * Initialize all commands in the registry\n */\nexport function initializeCommands() {\n  // Register Core Commands\n  commandRegistry.register('DCF', coreCommands.DCF, {\n    category: 'CORE',\n    description: 'Discounted Cash Flow valuation with real-time data',\n    usage: 'DCF(ticker)',\n    examples: ['DCF(AAPL)', 'DCF(MSFT)'],\n    tags: ['valuation', 'dcf', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('LBO', coreCommands.LBO, {\n    category: 'CORE',\n    description: 'Leveraged Buyout analysis with return projections',\n    usage: 'LBO(ticker)',\n    examples: ['LBO(TSLA)', 'LBO(NVDA)'],\n    tags: ['lbo', 'private-equity', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('COMP', coreCommands.COMP, {\n    category: 'CORE',\n    description: 'Comparable company analysis with peer multiples',\n    usage: 'COMP(ticker)',\n    examples: ['COMP(GOOGL)', 'COMP(META)'],\n    tags: ['comparable', 'multiples', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('FETCH', coreCommands.FETCH, {\n    category: 'CORE',\n    description: 'Comprehensive company data and financial metrics',\n    usage: 'FETCH(ticker)',\n    examples: ['FETCH(AMZN)', 'FETCH(NFLX)'],\n    tags: ['data', 'profile', 'metrics'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Private Analysis Commands\n  commandRegistry.register('PRIVATE_DCF', privateAnalysisCommands.PRIVATE_DCF, {\n    category: 'CORE',\n    description: 'DCF valuation using private company financial data',\n    usage: 'PRIVATE_DCF()',\n    examples: ['PRIVATE_DCF()'],\n    tags: ['private', 'dcf', 'valuation', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RATIOS', privateAnalysisCommands.PRIVATE_RATIOS, {\n    category: 'CORE',\n    description: 'Financial ratios analysis for private company data',\n    usage: 'PRIVATE_RATIOS()',\n    examples: ['PRIVATE_RATIOS()'],\n    tags: ['private', 'ratios', 'analysis', 'margins'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SUMMARY', privateAnalysisCommands.PRIVATE_SUMMARY, {\n    category: 'CORE',\n    description: 'Comprehensive financial summary of private company',\n    usage: 'PRIVATE_SUMMARY()',\n    examples: ['PRIVATE_SUMMARY()'],\n    tags: ['private', 'summary', 'overview', 'financial'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LOAD', privateAnalysisCommands.PRIVATE_LOAD, {\n    category: 'DATA',\n    description: 'Load and verify private company financial data',\n    usage: 'PRIVATE_LOAD()',\n    examples: ['PRIVATE_LOAD()'],\n    tags: ['private', 'data', 'load', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_MONTE_CARLO', privateAnalysisCommands.PRIVATE_MONTE_CARLO, {\n    category: 'ANALYTICS',\n    description: 'Monte Carlo simulation for private company valuation',\n    usage: 'PRIVATE_MONTE_CARLO()',\n    examples: ['PRIVATE_MONTE_CARLO()', 'PRIVATE_MONTE_CARLO(5000)'],\n    tags: ['private', 'monte-carlo', 'simulation', 'risk'],\n    parameterSchema: {\n      required: [],\n      optional: ['iterations']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SCENARIO', privateAnalysisCommands.PRIVATE_SCENARIO, {\n    category: 'ANALYTICS',\n    description: 'Scenario analysis for private company valuation',\n    usage: 'PRIVATE_SCENARIO()',\n    examples: ['PRIVATE_SCENARIO()'],\n    tags: ['private', 'scenario', 'analysis', 'valuation'],\n    parameterSchema: {\n      required: [],\n      optional: ['scenarios']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_GROWTH', privateAnalysisCommands.PRIVATE_GROWTH, {\n    category: 'ANALYTICS',\n    description: 'Growth trend analysis for private company',\n    usage: 'PRIVATE_GROWTH()',\n    examples: ['PRIVATE_GROWTH()'],\n    tags: ['private', 'growth', 'trends', 'cagr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RISK', privateAnalysisCommands.PRIVATE_RISK, {\n    category: 'ANALYTICS',\n    description: 'Risk assessment for private company',\n    usage: 'PRIVATE_RISK()',\n    examples: ['PRIVATE_RISK()'],\n    tags: ['private', 'risk', 'volatility', 'assessment'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_VALIDATE', privateAnalysisCommands.PRIVATE_VALIDATE, {\n    category: 'DATA',\n    description: 'Validate private company financial data',\n    usage: 'PRIVATE_VALIDATE()',\n    examples: ['PRIVATE_VALIDATE()'],\n    tags: ['private', 'validation', 'data-quality', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_EXPORT', privateAnalysisCommands.PRIVATE_EXPORT, {\n    category: 'DATA',\n    description: 'Export private company analysis results',\n    usage: 'PRIVATE_EXPORT()',\n    examples: ['PRIVATE_EXPORT()', 'PRIVATE_EXPORT(csv)'],\n    tags: ['private', 'export', 'data', 'backup'],\n    parameterSchema: {\n      required: [],\n      optional: ['format']\n    }\n  });\n\n  // Register Advanced Private Analysis Commands\n  commandRegistry.register('PRIVATE_WATERFALL', privateAnalysisCommands.PRIVATE_WATERFALL, {\n    category: 'VALUATION',\n    description: 'DCF waterfall and value bridge analysis for private companies',\n    usage: 'PRIVATE_WATERFALL()',\n    examples: ['PRIVATE_WATERFALL()'],\n    tags: ['private', 'dcf', 'waterfall', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_COMPS', privateAnalysisCommands.PRIVATE_COMPS, {\n    category: 'VALUATION',\n    description: 'Comparable company trading multiples analysis',\n    usage: 'PRIVATE_COMPS()',\n    examples: ['PRIVATE_COMPS()'],\n    tags: ['private', 'comparables', 'trading-multiples', 'peer-analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['sector', 'size']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LBO', privateAnalysisCommands.PRIVATE_LBO, {\n    category: 'VALUATION',\n    description: 'Leveraged buyout model and returns analysis',\n    usage: 'PRIVATE_LBO()',\n    examples: ['PRIVATE_LBO()'],\n    tags: ['private', 'lbo', 'leveraged-buyout', 'pe-analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['leverage', 'holdPeriod', 'exitMultiple']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_QUALITY', privateAnalysisCommands.PRIVATE_QUALITY, {\n    category: 'ANALYTICS',\n    description: 'Business quality and investment grade assessment',\n    usage: 'PRIVATE_QUALITY()',\n    examples: ['PRIVATE_QUALITY()'],\n    tags: ['private', 'quality', 'investment-grade', 'assessment'],\n    parameterSchema: {\n      required: [],\n      optional: ['weights']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_BENCHMARKS', privateAnalysisCommands.PRIVATE_BENCHMARKS, {\n    category: 'ANALYTICS',\n    description: 'Compare metrics against industry benchmarks',\n    usage: 'PRIVATE_BENCHMARKS()',\n    examples: ['PRIVATE_BENCHMARKS()'],\n    tags: ['private', 'benchmarks', 'industry', 'comparison'],\n    parameterSchema: {\n      required: [],\n      optional: ['industry']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_CASHFLOW', privateAnalysisCommands.PRIVATE_CASHFLOW, {\n    category: 'ANALYTICS',\n    description: 'Analyze cash flow generation and quality',\n    usage: 'PRIVATE_CASHFLOW()',\n    examples: ['PRIVATE_CASHFLOW()'],\n    tags: ['private', 'cashflow', 'quality', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['years']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_MULTIPLES', privateAnalysisCommands.PRIVATE_MULTIPLES, {\n    category: 'VALUATION',\n    description: 'Valuation using industry multiples approach',\n    usage: 'PRIVATE_MULTIPLES()',\n    examples: ['PRIVATE_MULTIPLES()'],\n    tags: ['private', 'multiples', 'valuation', 'industry'],\n    parameterSchema: {\n      required: [],\n      optional: ['industry', 'size']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SENSITIVITY', privateAnalysisCommands.PRIVATE_SENSITIVITY, {\n    category: 'ANALYTICS',\n    description: 'Sensitivity analysis on key variables',\n    usage: 'PRIVATE_SENSITIVITY()',\n    examples: ['PRIVATE_SENSITIVITY()'],\n    tags: ['private', 'sensitivity', 'analysis', 'variables'],\n    parameterSchema: {\n      required: [],\n      optional: ['variables', 'ranges']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_WORKFLOW', privateAnalysisCommands.PRIVATE_WORKFLOW, {\n    category: 'AUTOMATION',\n    description: 'Interactive analysis workflow with recommendations',\n    usage: 'PRIVATE_WORKFLOW()',\n    examples: ['PRIVATE_WORKFLOW()'],\n    tags: ['private', 'workflow', 'guidance', 'automation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_DASHBOARD', privateAnalysisCommands.PRIVATE_DASHBOARD, {\n    category: 'REPORTING',\n    description: 'Executive dashboard with key metrics summary',\n    usage: 'PRIVATE_DASHBOARD()',\n    examples: ['PRIVATE_DASHBOARD()'],\n    tags: ['private', 'dashboard', 'executive', 'summary'],\n    parameterSchema: {\n      required: [],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('PRIVATE', privateAnalysisCommands.PRIVATE, {\n    category: 'UTILITY',\n    description: 'Show all available Private Analysis commands (shortcut)',\n    usage: 'PRIVATE()',\n    examples: ['PRIVATE()', 'private'],\n    tags: ['private', 'help', 'commands', 'list'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Portfolio Commands\n  commandRegistry.register('PORTFOLIO', portfolioCommands.PORTFOLIO, {\n    category: 'PORTFOLIO',\n    description: 'Portfolio analysis with risk and diversification metrics',\n    usage: 'PORTFOLIO(tickers, weights)',\n    examples: ['PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])', 'PORTFOLIO([SPY,QQQ], [0.6,0.4])'],\n    tags: ['portfolio', 'diversification', 'allocation'],\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RISK_METRICS', portfolioCommands.RISK_METRICS, {\n    category: 'PORTFOLIO',\n    description: 'Comprehensive risk analysis including VaR, Sharpe ratio, and volatility',\n    usage: 'RISK_METRICS(ticker, period)',\n    examples: ['RISK_METRICS(AAPL)', 'RISK_METRICS(TSLA, 252)'],\n    tags: ['risk', 'var', 'volatility', 'sharpe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('CORRELATION_MATRIX', portfolioCommands.CORRELATION_MATRIX, {\n    category: 'PORTFOLIO',\n    description: 'Cross-asset correlation analysis for diversification insights',\n    usage: 'CORRELATION_MATRIX(tickers)',\n    examples: ['CORRELATION_MATRIX([AAPL,MSFT,GOOGL])', 'CORRELATION_MATRIX([SPY,QQQ,IWM])'],\n    tags: ['correlation', 'diversification', 'matrix'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('EFFICIENT_FRONTIER', portfolioCommands.EFFICIENT_FRONTIER, {\n    category: 'PORTFOLIO',\n    description: 'Modern portfolio theory optimization and efficient frontier analysis',\n    usage: 'EFFICIENT_FRONTIER(tickers)',\n    examples: ['EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])', 'EFFICIENT_FRONTIER([SPY,QQQ,IWM,EFA])'],\n    tags: ['optimization', 'efficient-frontier', 'mpt'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DRAWDOWN', portfolioCommands.DRAWDOWN, {\n    category: 'PORTFOLIO',\n    description: 'Maximum drawdown analysis and recovery time estimation',\n    usage: 'DRAWDOWN(ticker, period)',\n    examples: ['DRAWDOWN(AAPL)', 'DRAWDOWN(TSLA, 500)'],\n    tags: ['drawdown', 'risk', 'recovery'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  // Register Advanced Valuation Commands\n  commandRegistry.register('DDM', valuationCommands.DDM, {\n    category: 'VALUATION',\n    description: 'Dividend Discount Model with Gordon Growth and Two-Stage analysis',\n    usage: 'DDM(ticker)',\n    examples: ['DDM(KO)', 'DDM(JNJ)'],\n    tags: ['dividend', 'ddm', 'gordon-growth'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RESIDUAL_INCOME', valuationCommands.RESIDUAL_INCOME, {\n    category: 'VALUATION',\n    description: 'Residual Income Model for economic value analysis',\n    usage: 'RESIDUAL_INCOME(ticker)',\n    examples: ['RESIDUAL_INCOME(AAPL)', 'RESIDUAL_INCOME(MSFT)'],\n    tags: ['residual-income', 'economic-value', 'roe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('ASSET_BASED', valuationCommands.ASSET_BASED, {\n    category: 'VALUATION',\n    description: 'Asset-based valuation with market value adjustments',\n    usage: 'ASSET_BASED(ticker)',\n    examples: ['ASSET_BASED(BRK.A)', 'ASSET_BASED(BAC)'],\n    tags: ['asset-based', 'nav', 'liquidation'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Technical Analysis Commands\n  commandRegistry.register('TECHNICALS', technicalCommands.TECHNICALS, {\n    category: 'TECHNICAL',\n    description: 'Comprehensive technical analysis with RSI, MACD, Bollinger Bands',\n    usage: 'TECHNICALS(ticker)',\n    examples: ['TECHNICALS(AAPL)', 'TECHNICALS(SPY)'],\n    tags: ['technical', 'rsi', 'macd', 'bollinger'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SUPPORT_RESISTANCE', technicalCommands.SUPPORT_RESISTANCE, {\n    category: 'TECHNICAL',\n    description: 'Key price levels and breakout targets analysis',\n    usage: 'SUPPORT_RESISTANCE(ticker)',\n    examples: ['SUPPORT_RESISTANCE(TSLA)', 'SUPPORT_RESISTANCE(QQQ)'],\n    tags: ['support', 'resistance', 'levels', 'breakout'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register ESG & Alternative Data Commands\n  commandRegistry.register('ESG_SCORE', esgCommands.ESG_SCORE, {\n    category: 'ESG',\n    description: 'Environmental, social, governance analysis and scoring',\n    usage: 'ESG_SCORE(ticker)',\n    examples: ['ESG_SCORE(AAPL)', 'ESG_SCORE(TSLA)'],\n    tags: ['esg', 'environmental', 'social', 'governance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SOCIAL_SENTIMENT', esgCommands.SOCIAL_SENTIMENT, {\n    category: 'ESG',\n    description: 'Social media sentiment analysis across platforms',\n    usage: 'SOCIAL_SENTIMENT(ticker, days)',\n    examples: ['SOCIAL_SENTIMENT(AAPL)', 'SOCIAL_SENTIMENT(TSLA, 30)'],\n    tags: ['sentiment', 'social-media', 'twitter', 'reddit'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  commandRegistry.register('NEWS_IMPACT', esgCommands.NEWS_IMPACT, {\n    category: 'ESG',\n    description: 'News sentiment and price impact analysis',\n    usage: 'NEWS_IMPACT(ticker, days)',\n    examples: ['NEWS_IMPACT(AAPL)', 'NEWS_IMPACT(MSFT, 14)'],\n    tags: ['news', 'sentiment', 'impact', 'catalyst'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Data Management Commands\n  commandRegistry.register('EXPORT_JSON', dataCommands.EXPORT_JSON, {\n    category: 'DATA',\n    description: 'Export data to JSON format for backup and sharing',\n    usage: 'EXPORT_JSON(dataType, filename)',\n    examples: ['EXPORT_JSON(\"watchlists\")', 'EXPORT_JSON(\"all\", \"backup.json\")'],\n    tags: ['export', 'backup', 'json'],\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  });\n\n  commandRegistry.register('CACHE_STATS', dataCommands.CACHE_STATS, {\n    category: 'DATA',\n    description: 'View cache performance and memory usage statistics',\n    usage: 'CACHE_STATS()',\n    examples: ['CACHE_STATS()'],\n    tags: ['cache', 'performance', 'memory'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DATA_QUALITY', dataCommands.DATA_QUALITY, {\n    category: 'DATA',\n    description: 'Analyze data completeness and quality for a stock',\n    usage: 'DATA_QUALITY(ticker)',\n    examples: ['DATA_QUALITY(AAPL)', 'DATA_QUALITY(TSLA)'],\n    tags: ['quality', 'validation', 'completeness'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BENCHMARK', dataCommands.BENCHMARK, {\n    category: 'DATA',\n    description: 'Compare stock performance against benchmark index',\n    usage: 'BENCHMARK(ticker, benchmark)',\n    examples: ['BENCHMARK(AAPL, SPY)', 'BENCHMARK(TSLA, QQQ)'],\n    tags: ['benchmark', 'comparison', 'performance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  });\n\n  // Register System & Performance Commands\n  commandRegistry.register('PERFORMANCE_TEST', systemCommands.PERFORMANCE_TEST, {\n    category: 'SYSTEM',\n    description: 'Run comprehensive system performance benchmarks',\n    usage: 'PERFORMANCE_TEST()',\n    examples: ['PERFORMANCE_TEST()'],\n    tags: ['performance', 'benchmark', 'system'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('API_USAGE', systemCommands.API_USAGE, {\n    category: 'SYSTEM',\n    description: 'Monitor API usage, rate limits, and costs',\n    usage: 'API_USAGE()',\n    examples: ['API_USAGE()'],\n    tags: ['api', 'usage', 'limits', 'cost'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('CONFIG', systemCommands.CONFIG, {\n    category: 'SYSTEM',\n    description: 'View and update system configuration settings',\n    usage: 'CONFIG(setting, value)',\n    examples: ['CONFIG()', 'CONFIG(\"currency\", \"EUR\")', 'CONFIG(\"precision\", 3)'],\n    tags: ['config', 'settings', 'preferences'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  // Register Persistence & Privacy Commands\n  commandRegistry.register('BACKUP_CREATE', persistenceCommands.BACKUP_CREATE, {\n    category: 'PERSISTENCE',\n    description: 'Create a backup of all user data',\n    usage: 'BACKUP_CREATE(description)',\n    examples: ['BACKUP_CREATE()', 'BACKUP_CREATE(\"Before major changes\")'],\n    tags: ['backup', 'data', 'export'],\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  });\n\n  commandRegistry.register('BACKUP_LIST', persistenceCommands.BACKUP_LIST, {\n    category: 'PERSISTENCE',\n    description: 'List all available backups',\n    usage: 'BACKUP_LIST()',\n    examples: ['BACKUP_LIST()'],\n    tags: ['backup', 'list', 'management'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BACKUP_RESTORE', persistenceCommands.BACKUP_RESTORE, {\n    category: 'PERSISTENCE',\n    description: 'Restore data from a backup',\n    usage: 'BACKUP_RESTORE(backupId, overwrite)',\n    examples: ['BACKUP_RESTORE(\"backup_123\")', 'BACKUP_RESTORE(\"backup_123\", \"true\")'],\n    tags: ['backup', 'restore', 'recovery'],\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  });\n\n  commandRegistry.register('STORAGE_STATS', persistenceCommands.STORAGE_STATS, {\n    category: 'PERSISTENCE',\n    description: 'View storage usage and statistics',\n    usage: 'STORAGE_STATS()',\n    examples: ['STORAGE_STATS()'],\n    tags: ['storage', 'statistics', 'usage'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_CLEANUP', persistenceCommands.PRIVACY_CLEANUP, {\n    category: 'PERSISTENCE',\n    description: 'Clean up expired data according to privacy policies',\n    usage: 'PRIVACY_CLEANUP()',\n    examples: ['PRIVACY_CLEANUP()'],\n    tags: ['privacy', 'cleanup', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_SETTINGS', persistenceCommands.PRIVACY_SETTINGS, {\n    category: 'PERSISTENCE',\n    description: 'View and update privacy settings',\n    usage: 'PRIVACY_SETTINGS(setting, value)',\n    examples: ['PRIVACY_SETTINGS()', 'PRIVACY_SETTINGS(\"analytics\", \"false\")'],\n    tags: ['privacy', 'settings', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  commandRegistry.register('SYNC_STATUS', persistenceCommands.SYNC_STATUS, {\n    category: 'PERSISTENCE',\n    description: 'View data synchronization status',\n    usage: 'SYNC_STATUS()',\n    examples: ['SYNC_STATUS()'],\n    tags: ['sync', 'cloud', 'status'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PERSISTENCE_TEST', persistenceCommands.PERSISTENCE_TEST, {\n    category: 'PERSISTENCE',\n    description: 'Run comprehensive persistence layer tests',\n    usage: 'PERSISTENCE_TEST()',\n    examples: ['PERSISTENCE_TEST()'],\n    tags: ['test', 'debug', 'validation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Utility Commands\n  commandRegistry.register('HELP', {\n    execute: async(parsedCommand, context, processor) => {\n      const [category] = parsedCommand.parameters;\n\n      // Show ALL commands in detail\n      if (category && category.toLowerCase() === 'all') {\n        const allCommands = commandRegistry.getAllCommands();\n        const categories = commandRegistry.getAllCategories();\n\n        let content = '📚 COMPREHENSIVE COMMAND REFERENCE\\n';\n        content += 'FinanceAnalyst Pro Terminal v2.4.0 - Complete Command Suite\\n';\n        content += '═════════════════════════════════════════════════════════════\\n\\n';\n\n        // Group commands by category\n        categories.forEach(cat => {\n          const categoryCommands = commandRegistry.getCommandsByCategory(cat.key);\n          if (categoryCommands.length > 0) {\n            content += `${cat.icon} ${cat.name.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n            content += `${cat.description}\\n`;\n            content += '─'.repeat(50) + '\\n';\n\n            categoryCommands.forEach(cmd => {\n              content += `\\n• ${cmd.usage}\\n`;\n              content += `  ${cmd.description}\\n`;\n              if (cmd.examples && cmd.examples.length > 0) {\n                content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n              }\n              if (cmd.tags && cmd.tags.length > 0) {\n                content += `  Tags: ${cmd.tags.join(', ')}\\n`;\n              }\n            });\n            content += '\\n';\n          }\n        });\n\n        content += `\\n📊 SUMMARY: ${allCommands.length} total commands across ${categories.length} categories\\n`;\n        content += '\\n💡 TIP: Use HELP(category) for specific category details\\n';\n        content += '💡 TIP: Use HELP() for quick overview and featured commands';\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      if (category) {\n        // Show commands for specific category\n        const categoryCommands = commandRegistry.getCommandsByCategory(category.toUpperCase());\n        if (categoryCommands.length === 0) {\n          return {\n            type: 'error',\n            content: `Unknown category: ${category}. Use HELP() to see all categories or HELP(ALL) for complete command list.`\n          };\n        }\n\n        let content = `📋 ${category.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n        content += '═'.repeat(40) + '\\n\\n';\n\n        categoryCommands.forEach(cmd => {\n          content += `• ${cmd.usage}\\n`;\n          content += `  ${cmd.description}\\n`;\n          if (cmd.examples && cmd.examples.length > 0) {\n            content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n          }\n          content += '\\n';\n        });\n\n        content += 'Use HELP() for overview or HELP(ALL) for all commands.';\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      // Show all categories and featured commands (default view)\n      const categories = commandRegistry.getAllCategories();\n      const stats = commandRegistry.getCommandStats();\n      const totalCommands = Object.values(stats).reduce((sum, cat) => sum + cat.count, 0);\n\n      const content = `🚀 FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite\\n\\n📊 COMMAND CATEGORIES:\\n${categories.map(cat =>\n        `${cat.icon} ${cat.name} (${stats[cat.key]?.count || 0} commands)\\n   ${cat.description}`\n      ).join('\\n\\n')}\\n\\n⭐ FEATURED COMMANDS:\\n• DCF(AAPL) - Discounted Cash Flow with live data\\n• LBO(TSLA) - Leveraged Buyout analysis\\n• PORTFOLIO([AAPL,MSFT], [0.5,0.5]) - Portfolio analysis\\n• RISK_METRICS(GOOGL) - Comprehensive risk analysis\\n• CORRELATION_MATRIX([AAPL,MSFT,GOOGL]) - Cross-asset correlations\\n• PRIVATE_DCF() - Private company DCF valuation\\n• PRIVATE_RATIOS() - Private company financial ratios\\n• PRIVATE_SUMMARY() - Private company analysis summary\\n\\n🔧 PRIVATE ANALYSIS COMMANDS:\\n• PRIVATE_LOAD() - Load private company data\\n• PRIVATE_DCF() - DCF valuation for private companies\\n• PRIVATE_RATIOS() - Calculate private company ratios\\n• PRIVATE_SUMMARY() - Generate private company summary\\n\\n💡 HELP COMMANDS:\\n• HELP() - Show this overview (current)\\n• HELP(category) - Show commands for specific category\\n• HELP(ALL) - Show complete list of ALL ${totalCommands} commands\\n\\n📋 AVAILABLE CATEGORIES:\\n${categories.map(cat => `• ${cat.key}`).join(' • ')}\\n\\n🚀 ENHANCED FEATURES:\\n• Watchlists: Create and track custom stock lists\\n• Alerts: Set price and metric notifications\\n• Batch Analysis: Analyze multiple stocks simultaneously\\n• ESG Scoring: Environmental, social, governance analysis\\n• Technical Analysis: RSI, MACD, support/resistance\\n• Advanced Valuation: DDM, residual income, asset-based models\\n• Private Company Analysis: Full financial modeling suite\\n\\n📊 ${categories.length} categories • ${totalCommands} total commands available\\n\\n💡 Pro Tip: Use HELP(ALL) to see every single command with examples!`;\n\n      return {\n        type: 'system',\n        content\n      };\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['category']\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show available commands and usage information',\n    usage: 'HELP(category)',\n    examples: ['HELP()', 'HELP(PORTFOLIO)', 'HELP(CORE)', 'HELP(ALL)'],\n    tags: ['help', 'documentation', 'commands']\n  });\n\n  commandRegistry.register('CLEAR', {\n    execute: async(parsedCommand, context, processor) => {\n      return {\n        type: 'system',\n        content: 'clear_terminal', // Special flag for terminal to clear\n        action: 'clear'\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Clear the terminal screen',\n    usage: 'CLEAR()',\n    examples: ['CLEAR()'],\n    tags: ['utility', 'clear', 'terminal']\n  });\n\n  commandRegistry.register('STATUS', {\n    execute: async(parsedCommand, context, processor) => {\n      const settings = processor.getAllSettings();\n      const variables = processor.getAllVariables();\n      const history = processor.getHistory(5);\n\n      const content = `System Status Report\n\n🔧 SYSTEM CONFIGURATION:\n• Currency: ${settings.currency}\n• Precision: ${settings.precision} decimal places\n• Date Format: ${settings.dateFormat}\n• Demo Mode: ${context.demoMode ? 'Enabled' : 'Disabled'}\n\n📊 SESSION STATISTICS:\n• Commands Executed: ${history.length}\n• Variables Stored: ${Object.keys(variables).length}\n• Last Command: ${history[history.length - 1]?.input || 'None'}\n\n🌐 API STATUS:\n• Data Sources: ${context.demoMode ? 'Demo Data' : 'Live Market Data'}\n• Rate Limits: Normal\n• Cache Status: Active\n\n💾 MEMORY USAGE:\n• Command History: ${history.length} entries\n• Variable Storage: ${Object.keys(variables).length} variables\n• Cache Size: Optimal\n\n✅ All systems operational`;\n\n      return {\n        type: 'system',\n        content\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show system status and configuration',\n    usage: 'STATUS()',\n    examples: ['STATUS()'],\n    tags: ['status', 'system', 'configuration']\n  });\n\n  console.log('✅ Command registry initialized with', commandRegistry.getAllCommands().length, 'commands');\n}\n\n// Auto-initialize when module is imported\ninitializeCommands();\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport { commandProcessor } from '../../../services/commandProcessor';\nimport { commandRegistry } from '../../../services/commandRegistry';\nimport { dataFetchingService } from '../../../services/dataFetching';\nimport { persistenceManager } from '../../../services/persistence/PersistenceManager';\nimport {\n  calculateDCFValuation,\n  calculateLBOReturns,\n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../../utils/dataTransformation';\n// Import command initializer to ensure commands are registered\nimport '../../../services/commandInitializer';\n\nconst TerminalInterface = ({ onCommandExecute, calculationResults }) => {\n  const [commands, setCommands] = useState([\n    {\n      id: 1,\n      type: 'system',\n      content: 'FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite Ready',\n      timestamp: new Date()\n    },\n    {\n      id: 2,\n      type: 'system',\n      content:\n        'Type \"HELP()\" for available commands or start with DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5])',\n      timestamp: new Date()\n    }\n  ]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestion, setSelectedSuggestion] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const terminalRef = useRef(null);\n  const inputRef = useRef(null);\n  const commandProcessorRef = useRef(commandProcessor);\n\n  // Get available commands from registry for suggestions\n  const getAvailableCommands = () => {\n    const allCommands = commandRegistry.getAllCommands();\n    const commandInfos = allCommands.map(cmdName => {\n      const info = commandRegistry.getCommandInfo(cmdName);\n      return info ? info.usage : cmdName;\n    });\n    return commandInfos;\n  };\n\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [commands]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Initialize persistence layer\n    const initializePersistence = async() => {\n      try {\n        await persistenceManager.initialize();\n        console.log('✅ Persistence layer initialized in terminal');\n      } catch (error) {\n        console.error('❌ Failed to initialize persistence in terminal:', error);\n      }\n    };\n\n    initializePersistence();\n  }, []);\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setCurrentInput(value);\n\n    if (value.length > 0) {\n      const availableCommands = getAvailableCommands();\n      const suggestions = commandRegistry.getSuggestions(value);\n      const commandSuggestions = suggestions.map(s => s.usage);\n\n      // Also include partial matches from available commands\n      const partialMatches = availableCommands.filter(cmd =>\n        cmd.toLowerCase().includes(value.toLowerCase()) &&\n        !commandSuggestions.includes(cmd)\n      );\n\n      const allSuggestions = [...commandSuggestions, ...partialMatches];\n      setSuggestions(allSuggestions.slice(0, 8));\n      setShowSuggestions(allSuggestions.length > 0);\n      setSelectedSuggestion(0);\n    } else {\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      executeCommand();\n    } else if (e.key === 'ArrowUp' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.max(0, prev - 1));\n    } else if (e.key === 'ArrowDown' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.min(suggestions.length - 1, prev + 1));\n    } else if (e.key === 'Tab' && showSuggestions) {\n      e.preventDefault();\n      setCurrentInput(suggestions[selectedSuggestion]);\n      setShowSuggestions(false);\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  const executeCommand = async() => {\n    if (!currentInput.trim()) return;\n\n    const newCommand = {\n      id: commands.length + 1,\n      type: 'user',\n      content: currentInput,\n      timestamp: new Date()\n    };\n\n    setCommands(prev => [...prev, newCommand]);\n    setIsLoading(true);\n    setCurrentInput('');\n    setShowSuggestions(false);\n\n    try {\n      // Use the new command processor\n      const context = {\n        demoMode: dataFetchingService.demoMode,\n        showLoading: (message) => {\n          const loadingCommand = {\n            id: commands.length + 2,\n            type: 'info',\n            content: message,\n            timestamp: new Date()\n          };\n          setCommands(prev => [...prev, loadingCommand]);\n        }\n      };\n\n      const response = await commandProcessorRef.current.processCommand(currentInput, context);\n\n      // Handle special actions\n      if (response.action === 'clear') {\n        setCommands([\n          {\n            id: 1,\n            type: 'system',\n            content: 'Terminal cleared',\n            timestamp: new Date()\n          }\n        ]);\n        return;\n      }\n\n      const responseCommand = {\n        id: commands.length + 2,\n        type: response.type,\n        content: response.content,\n        timestamp: new Date(),\n        data: response.data\n      };\n\n      setCommands(prev => [...prev, responseCommand]);\n\n      if (onCommandExecute) {\n        onCommandExecute(currentInput, response);\n      }\n    } catch (error) {\n      const errorCommand = {\n        id: commands.length + 2,\n        type: 'error',\n        content: `Error: ${error.message}`,\n        timestamp: new Date()\n      };\n      setCommands(prev => [...prev, errorCommand]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectSuggestion = suggestion => {\n    setCurrentInput(suggestion);\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900 text-green-400 font-mono text-sm\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Terminal\" size={16} className=\"text-green-400\" />\n          <span className=\"text-green-400 font-medium\">Financial Terminal</span>\n          <span className=\"text-xs text-blue-400\">• Enhanced Command Suite</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div\n            className={`w-2 h-2 rounded-full ${isLoading ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`}\n          />\n          <span className=\"text-xs text-gray-400\">{isLoading ? 'Processing...' : 'Connected'}</span>\n        </div>\n      </div>\n\n      {/* Terminal Content */}\n      <div\n        ref={terminalRef}\n        className=\"flex-1 overflow-y-auto p-4 space-y-2\"\n        onClick={() => inputRef.current?.focus()}\n      >\n        {commands.map(command => (\n          <div key={command.id} className=\"space-y-1\">\n            <div className=\"flex items-start space-x-2\">\n              {command.type === 'user' && (\n                <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n              )}\n              {command.type === 'system' && (\n                <Icon name=\"Info\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'success' && (\n                <Icon name=\"CheckCircle\" size={14} className=\"text-green-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'error' && (\n                <Icon name=\"XCircle\" size={14} className=\"text-red-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'warning' && (\n                <Icon name=\"AlertTriangle\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'info' && (\n                <Icon name=\"Info\" size={14} className=\"text-blue-400 mt-0.5 shrink-0\" />\n              )}\n              <div className=\"flex-1\">\n                <pre className=\"whitespace-pre-wrap break-words\">{command.content}</pre>\n                {command.data && (\n                  <div className=\"mt-2 p-2 bg-gray-800 rounded border border-gray-700\">\n                    <div className=\"text-xs text-gray-400\">\n                      Real-time calculation data available • Analysis:{' '}\n                      {command.data.analysis || 'financial'}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-center space-x-2 text-yellow-400\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full\" />\n            <span>Processing command...</span>\n          </div>\n        )}\n\n        {/* Input Line */}\n        <div className=\"flex items-center space-x-2 relative\">\n          <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n          <div className=\"flex-1 relative\">\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={currentInput}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"w-full bg-transparent text-green-400 outline-none border-none\"\n              placeholder=\"Enter command (e.g., DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5]))...\"\n              autoComplete=\"off\"\n              disabled={isLoading}\n            />\n\n            {/* Suggestions Dropdown */}\n            {showSuggestions && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-600 rounded-md shadow-lg z-10 max-h-48 overflow-y-auto\">\n                {suggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className={`px-3 py-2 cursor-pointer text-sm ${\n                      index === selectedSuggestion\n                        ? 'bg-gray-700 text-green-400'\n                        : 'text-gray-300 hover:bg-gray-700'\n                    }`}\n                    onClick={() => selectSuggestion(suggestion)}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerminalInterface;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst VariableInputs = ({ onVariableChange, onBulkEdit }) => {\n  const [activeSection, setActiveSection] = useState('assumptions');\n  const [editMode, setEditMode] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const [variables, setVariables] = useState({\n    assumptions: {\n      revenue_growth: {\n        value: 0.052,\n        unit: '%',\n        description: 'Annual revenue growth rate',\n        category: 'Growth'\n      },\n      ebitda_margin: {\n        value: 0.235,\n        unit: '%',\n        description: 'EBITDA as % of revenue',\n        category: 'Profitability'\n      },\n      tax_rate: { value: 0.25, unit: '%', description: 'Corporate tax rate', category: 'Tax' },\n      capex_revenue: {\n        value: 0.035,\n        unit: '%',\n        description: 'CapEx as % of revenue',\n        category: 'Investment'\n      },\n      working_capital_revenue: {\n        value: 0.02,\n        unit: '%',\n        description: 'Working capital as % of revenue',\n        category: 'Working Capital'\n      },\n      terminal_growth: {\n        value: 0.025,\n        unit: '%',\n        description: 'Long-term growth rate',\n        category: 'Terminal'\n      }\n    },\n    cost_of_capital: {\n      risk_free_rate: {\n        value: 0.032,\n        unit: '%',\n        description: 'Risk-free rate (10Y Treasury)',\n        category: 'Market'\n      },\n      market_premium: {\n        value: 0.065,\n        unit: '%',\n        description: 'Equity risk premium',\n        category: 'Market'\n      },\n      beta: { value: 1.15, unit: 'x', description: 'Asset beta coefficient', category: 'Risk' },\n      cost_of_debt: {\n        value: 0.045,\n        unit: '%',\n        description: 'Pre-tax cost of debt',\n        category: 'Debt'\n      },\n      debt_equity_ratio: {\n        value: 0.4,\n        unit: 'x',\n        description: 'Target debt-to-equity ratio',\n        category: 'Capital Structure'\n      }\n    },\n    market_data: {\n      current_share_price: {\n        value: 125.5,\n        unit: '$',\n        description: 'Current trading price',\n        category: 'Market'\n      },\n      shares_outstanding: {\n        value: 20.0,\n        unit: 'M',\n        description: 'Shares outstanding',\n        category: 'Equity'\n      },\n      market_cap: {\n        value: 2510,\n        unit: '$M',\n        description: 'Current market capitalization',\n        category: 'Valuation'\n      },\n      enterprise_value: {\n        value: 2810,\n        unit: '$M',\n        description: 'Current enterprise value',\n        category: 'Valuation'\n      },\n      net_debt: { value: 300, unit: '$M', description: 'Net debt position', category: 'Debt' }\n    }\n  });\n\n  const sections = [\n    { id: 'assumptions', label: 'Key Assumptions', icon: 'Settings' },\n    { id: 'cost_of_capital', label: 'Cost of Capital', icon: 'Percent' },\n    { id: 'market_data', label: 'Market Data', icon: 'TrendingUp' }\n  ];\n\n  const handleVariableChange = (section, key, newValue) => {\n    const updatedVariables = {\n      ...variables,\n      [section]: {\n        ...variables[section],\n        [key]: {\n          ...variables[section][key],\n          value: parseFloat(newValue) || 0\n        }\n      }\n    };\n    setVariables(updatedVariables);\n\n    if (onVariableChange) {\n      onVariableChange(section, key, newValue);\n    }\n  };\n\n  const formatValue = (value, unit) => {\n    if (unit === '%') {\n      return (value * 100).toFixed(1);\n    } else if (unit === '$' || unit === '$M') {\n      return value.toFixed(2);\n    } else {\n      return value.toFixed(3);\n    }\n  };\n\n  const getVariablesByCategory = sectionData => {\n    const categories = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      const category = variable.category || 'Other';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push({ key, ...variable });\n    });\n    return categories;\n  };\n\n  const filteredVariables = sectionData => {\n    if (!searchTerm) return sectionData;\n\n    const filtered = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      if (\n        key.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        variable.description.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        filtered[key] = variable;\n      }\n    });\n    return filtered;\n  };\n\n  const resetToDefaults = () => {\n    // Reset to default values\n    const defaultVariables = { ...variables };\n    // This would typically reset to saved defaults\n    setVariables(defaultVariables);\n  };\n\n  const exportVariables = () => {\n    const exportData = JSON.stringify(variables, null, 2);\n    const blob = new Blob([exportData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'model_variables.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Sliders\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Variable Inputs</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName={editMode ? 'Check' : 'Edit'}\n            onClick={() => setEditMode(!editMode)}\n          >\n            {editMode ? 'Done' : 'Edit'}\n          </Button>\n          <Button\n            variant=\"outline\" size=\"sm\" iconName=\"Download\"\n            onClick={exportVariables}\n          >\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search variables...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Section Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {sections.map(section => (\n          <button\n            key={section.id}\n            onClick={() => setActiveSection(section.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeSection === section.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={section.icon} size={16} />\n            <span>{section.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Variables Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {Object.entries(getVariablesByCategory(filteredVariables(variables[activeSection]))).map(\n          ([category, categoryVariables]) => (\n            <div key={category} className=\"mb-6\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n                <Icon name=\"Folder\" size={16} />\n                <span>{category}</span>\n              </h4>\n              <div className=\"space-y-3\">\n                {categoryVariables.map(variable => (\n                  <div\n                    key={variable.key}\n                    className=\"p-3 bg-background border border-border rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <label className=\"text-sm font-medium text-foreground capitalize\">\n                          {variable.key.replace(/_/g, ' ')}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">{variable.description}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        {editMode ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <input\n                              type=\"number\"\n                              value={formatValue(variable.value, variable.unit)}\n                              onChange={e =>\n                                handleVariableChange(activeSection, variable.key, e.target.value)\n                              }\n                              step={variable.unit === '%' ? '0.1' : '0.01'}\n                              className=\"w-20 px-2 py-1 text-sm bg-input border border-border rounded text-foreground focus:outline-none focus:ring-1 focus:ring-ring\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">{variable.unit}</span>\n                          </div>\n                        ) : (\n                          <div className=\"text-right\">\n                            <span className=\"text-lg font-semibold text-foreground\">\n                              {formatValue(variable.value, variable.unit)}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground ml-1\">\n                              {variable.unit}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Variable Impact Indicator */}\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-success rounded-full\" />\n                        <span className=\"text-muted-foreground\">Within range</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Icon name=\"TrendingUp\" size={12} />\n                        <span>High impact</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )\n        )}\n\n        {Object.keys(filteredVariables(variables[activeSection])).length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"Search\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No variables found</h4>\n            <p className=\"text-muted-foreground\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n      {/* Footer Actions */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n            <Icon name=\"Info\" size={12} />\n            <span>Changes auto-save every 30 seconds</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\" size=\"sm\" iconName=\"RotateCcw\"\n              onClick={resetToDefaults}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Grid\"\n              onClick={() => onBulkEdit && onBulkEdit()}\n            >\n              Bulk Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VariableInputs;\n","import React, { useState, useEffect } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport SEOHead from '../../components/SEO/SEOHead';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport AuditTrail from './components/AuditTrail';\nimport CalculationResults from './components/CalculationResults';\nimport FormulaBuilder from './components/FormulaBuilder';\nimport ModelTemplates from './components/ModelTemplates';\nimport TerminalInterface from './components/TerminalInterface';\nimport VariableInputs from './components/VariableInputs';\n\nconst FinancialModelWorkspace = () => {\n  const [activeLayout, setActiveLayout] = useState('dual-pane');\n  const [leftPanelContent, setLeftPanelContent] = useState('terminal');\n  const [rightPanelContent, setRightPanelContent] = useState('results');\n  const [isCollaborationOpen, setIsCollaborationOpen] = useState(false);\n  const [modelState, setModelState] = useState({\n    name: 'DCF_Analysis_v2.3',\n    saved: true,\n    calculating: false,\n    lastSaved: new Date()\n  });\n\n  const [calculationResults, setCalculationResults] = useState(null);\n\n  const handleCommandExecute = (command, result) => {\n    setCalculationResults(result);\n  };\n\n  const renderLeftPanel = () => {\n    switch (leftPanelContent) {\n      case 'terminal':\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n      case 'variables':\n        return <VariableInputs />;\n      case 'formulas':\n        return <FormulaBuilder />;\n      case 'templates':\n        return <ModelTemplates />;\n      default:\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n    }\n  };\n\n  const renderRightPanel = () => {\n    switch (rightPanelContent) {\n      case 'results':\n        return <CalculationResults results={calculationResults} />;\n      case 'audit':\n        return <AuditTrail />;\n      default:\n        return <CalculationResults results={calculationResults} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <SEOHead\n        title=\"Financial Model Workspace | FinanceAnalyst Pro\"\n        description=\"Professional financial modeling workspace with advanced DCF analysis, LBO tools, and real-time collaboration features for finance professionals.\"\n        canonical=\"/\"\n        keywords=\"financial modeling, DCF analysis, LBO modeling, financial workspace, valuation tools, Excel alternative\"\n      />\n      <Header />\n\n      {/* Main Workspace */}\n      <main id=\"main-content\" className=\"flex flex-col h-screen pt-16\" role=\"main\">\n        {/* Toolbar */}\n        <div className=\"bg-gray-800 border-b border-gray-700 px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"FileText\" className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"font-medium\">{modelState.name}</span>\n              <span\n                className={`text-xs px-2 py-1 rounded ${\n                  modelState.saved ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'\n                }`}\n              >\n                {modelState.saved ? 'Saved' : 'Unsaved'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Layout Controls */}\n            <div className=\"flex items-center space-x-1 bg-gray-700 rounded-lg p-1\">\n              <Button\n                variant={activeLayout === 'single-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('single-pane')}\n                aria-label=\"Single-pane layout\"\n              >\n                <Icon name=\"Square\" className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={activeLayout === 'dual-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('dual-pane')}\n                aria-label=\"Dual-pane layout\"\n              >\n                <Icon name=\"Columns\" className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Panel Controls */}\n            <div className=\"flex items-center space-x-1\">\n              <select\n                value={leftPanelContent}\n                onChange={(e) => setLeftPanelContent(e.target.value)}\n                className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                aria-label=\"Select left panel content\"\n              >\n                <option value=\"terminal\">Terminal</option>\n                <option value=\"variables\">Variables</option>\n                <option value=\"formulas\">Formulas</option>\n                <option value=\"templates\">Templates</option>\n              </select>\n\n              {activeLayout === 'dual-pane' && (\n                <select\n                  value={rightPanelContent}\n                  onChange={(e) => setRightPanelContent(e.target.value)}\n                  className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                  aria-label=\"Select right panel content\"\n                >\n                  <option value=\"results\">Results</option>\n                  <option value=\"audit\">Audit Trail</option>\n                </select>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel */}\n          <div\n            className={`${\n              activeLayout === 'dual-pane' ? 'w-1/2' : 'w-full'\n            } border-r border-gray-700 overflow-hidden`}\n          >\n            {renderLeftPanel()}\n          </div>\n\n          {/* Right Panel */}\n          {activeLayout === 'dual-pane' && (\n            <div className=\"w-1/2 overflow-hidden\">\n              {renderRightPanel()}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default FinancialModelWorkspace;\n"],"names":["AuditTrail","calculations","errors","warnings","activeTab","setActiveTab","useState","expandedItems","setExpandedItems","Set","filterLevel","setFilterLevel","mockAuditData","id","timestamp","Date","now","type","operation","formula","result","inputs","FCFF_2024","FCFF_2025","FCFF_2026","FCFF_2027","FCFF_2028","WACC","executionTime","status","cost_equity","cost_debt","tax_rate","debt_ratio","FCF_final","terminal_growth","severity","message","location","suggestion","resolved","acknowledged","validations","check","details","tabs","label","icon","count","length","getStatusIcon","color","getSeverityColor","renderCalculations","jsx","className","children","map","calc","jsxs","Icon","name","size","toLocaleTimeString","time","toFixed","Button","variant","iconName","has","onClick","newExpanded","delete","add","toggleExpanded","Object","entries","key","value","tab","error","toLocaleString","warning","validation","CalculationResults","results","onExport","expandedSections","setExpandedSections","mockResults","summary","enterpriseValue","equityValue","sharePrice","impliedReturn","confidence","cashFlows","year","revenue","ebitda","fcf","pv","sensitivity","wacc","growth","matrix","scenarios","probability","irr","multiples","metric","current","peer_avg","premium","formatCurrency","decimals","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercent","renderSummary","width","cf","index","rowIndex","colIndex","Math","abs","scenario","multiple","FormulaBuilder","onFormulaCreate","variables","selectedCategory","setSelectedCategory","draggedFunction","setDraggedFunction","currentFormula","setCurrentFormula","formulaName","setFormulaName","isBuilding","setIsBuilding","dropZoneRef","useRef","functionCategories","valuation","functions","syntax","description","financial","statistical","mathematical","validateFormula","match","category","func","draggable","onDragStart","e","dataTransfer","effectAllowed","handleDragStart","newFormula","addFunction","onChange","target","placeholder","ref","onDragOver","preventDefault","dropEffect","onDrop","disabled","ModelTemplates","onTemplateSelect","onTemplateCreate","searchTerm","setSearchTerm","showCreateModal","setShowCreateModal","templateCategories","templates","complexity","timeToComplete","lastUsed","popularity","features","lbo","comps","merger","getComplexityColor","filteredTemplates","filter","template","toLowerCase","includes","handleTemplateSelect","feature","rows","commandRegistry","constructor","this","commands","Map","categories","aliases","initializeCategories","set","register","handler","metadata","commandName","toUpperCase","commandInfo","usage","examples","parameterSchema","tags","version","deprecated","experimental","forEach","alias","get","push","getHandler","command","aliasTarget","aliasCommand","getCommandInfo","getCommandsByCategory","categoryInfo","cmdName","getAllCommands","Array","from","keys","getAllCategories","searchCommands","query","score","calculateSearchScore","sort","a","b","some","tag","getSuggestions","partial","partialLower","suggestions","startsWith","localeCompare","hasCommand","getCommandStats","stats","categoryKey","DataMigrationService","currentVersion","migrationKey","backupKey","migrations","to","migrate","migrateToV1_0_0","bind","checkAndMigrate","currentStoredVersion","localStorage","getItem","performVersionMigration","performInitialMigration","setItem","success","Error","String","legacyData","detectLegacyData","createMigrationBackup","fromVersion","toVersion","migrationPath","findMigrationPath","currentData","exportCurrentData","migration","restoreFromBackup","oldVariables","JSON","parse","oldSettings","settings","oldWatchlists","watchlists","oldAlerts","alerts","dataToMigrate","migratedWatchlists","migrateWatchlistsFormat","stringify","migratedAlerts","migrateAlertsFormat","migratedPreferences","migratePreferencesFormat","migratedVariables","migrateVariablesFormat","cleanupLegacyData","migrated","isArray","watchlist","tickers","stocks","created","toISOString","split","lastUpdated","data","alert","random","ticker","condition","triggered","precision","dateFormat","theme","notifications","autoSave","commandHistory","dataRetention","privacy","analytics","crashReporting","dataSharing","removeItem","backup","backupData","getMigrationStatus","storedVersion","hasBackup","needsMigration","availableMigrations","clearBackup","CompressionUtils","compressionFormat","textEncoder","TextEncoder","textDecoder","TextDecoder","compress","window","compressWithStream","compressWithLZString","decompress","compressedData","isNativeCompressed","decompressWithStream","decompressWithLZString","stream","CompressionStream","writer","writable","getWriter","reader","readable","getReader","dataBuffer","encode","write","close","chunks","done","readerDone","read","totalLength","reduce","sum","chunk","combined","Uint8Array","offset","arrayBufferToBase64","buffer","replace","compressedBuffer","base64ToArrayBuffer","DecompressionStream","decode","dictionary","dictSize","i","fromCharCode","char","compressed","Uint16Array","previous","code","isLZStringCompressed","isCompressed","getCompressionRatio","originalData","originalSize","Blob","estimateCompressionBenefit","compressedSize","ratio","savings","savingsPercentage","worthCompressing","isAvailable","getInfo","nativeCompressionAvailable","fallbackAvailable","defaultFormat","available","performanceTest","testData","test","fill","repeat","numbers","_","compressStart","performance","compressTime","decompressStart","decompressTime","compressionRatio","totalTime","iterations","method","bytes","binary","byteLength","btoa","base64","atob","charCodeAt","IndexedDBService","dbName","dbVersion","db","compressionUtils","stores","keyPath","autoIncrement","indexes","unique","analysis_history","command_history","cached_data","user_models","export_data","initialize","indexedDB","openDatabase","cleanupExpiredData","Promise","resolve","reject","request","open","onerror","onsuccess","onupgradeneeded","event","createObjectStores","storeName","objectStoreNames","contains","deleteObjectStore","config","store","createObjectStore","createIndex","options","dataObject","performTransaction","put","retrieve","expiry","remove","clear","storeObj","getKeys","getAllKeys","getAll","limit","filteredResults","slice","indexName","getStats","total","records","recordCount","storeSize","record","exportAll","exportData","importData","overwrite","imported","skipped","cleaned","cachedData","mode","transaction","objectStore","oncomplete","isStorageAvailable","storeCount","CryptoUtils","algorithm","keyLength","ivLength","tagLength","initializeKey","storedKey","keyData","cryptoKey","crypto","subtle","importKey","generateKey","exportedKey","exportKey","keyString","encrypt","iv","getRandomValues","encryptedBuffer","decrypt","encryptedData","decryptedBuffer","hash","hashBuffer","digest","verifyIntegrity","expectedHash","generateRandomString","array","substring","deriveKeyFromPassword","password","salt","passwordBuffer","saltBuffer","keyMaterial","deriveKey","keyInitialized","clearSensitiveData","ArrayBuffer","view","encryptStart","encrypted","encryptTime","decryptStart","decryptTime","dataSize","encryptedSize","LocalStorageService","prefix","maxSize","cryptoUtils","testKey","ttl","validate","validateData","storageObject","serializedData","storageKey","validateTTL","decompressed","used","totalSize","itemCount","itemSizes","usagePercentage","largestItem","max","hasSpace","cleanup","seen","WeakSet","checkCircular","obj","writeStart","writeTime","readStart","readTime","SessionManager","sessionKey","userKey","preferencesKey","currentSession","currentUser","sessionTimeout","listeners","defaultPreferences","loadSession","setupSessionMonitoring","hasSession","createSession","userInfo","sessionId","generateSessionId","session","userId","generateUserId","lastActivity","expires","userAgent","navigator","platform","language","timezone","DateTimeFormat","resolvedOptions","timeZone","user","email","lastLogin","loginCount","preferences","storeSession","storeUser","notifyListeners","sessionData","userData","destroySession","updateActivity","getSession","getUser","isAuthenticated","getPreferences","updatePreferences","newPreferences","getSessionStats","sessionDuration","timeUntilExpiry","lastActivityAge","userName","userCreated","isExpired","isActive","exportSessionData","exportTimestamp","importSessionData","addEventListener","callback","removeEventListener","toString","substr","throttledUpdate","throttle","document","passive","setInterval","hidden","inThrottle","args","arguments","context","apply","setTimeout","persistenceManager","sessionManager","migrationService","isInitialized","storageQuota","storageStrategy","checkStorageAvailability","all","estimateStorageQuota","availableStorage","getAvailableStorage","ensureInitialized","storage","determineStorageLayer","promises","confirm","getStorageStats","localStorageStats","indexedDBStats","totalUsed","quota","includeMetadata","_compress","localStorageData","indexedDBData","storageStats","exportOptions","validateImportData","estimate","commandProcessor","persistenceInitialized","maxHistorySize","initializePersistence","loadPersistedData","history","saveData","variablesObj","fromEntries","processCommand","input","startTime","parsedCommand","parseCommand","historyEntry","createErrorResponse","validationResult","validateParameters","valid","execute","catch","trimmed","trim","functionMatch","paramString","parameters","parseParameters","rawInput","parts","params","inQuotes","inBrackets","quoteChar","parseParameterValue","endsWith","arrayContent","item","parseFloat","required","optional","join","maxParams","content","cmd","getHistory","clearHistory","setVariable","getVariable","getAllVariables","updateSetting","getSetting","getAllSettings","automationCommands","WATCHLIST","async","processor","action","listName","analysis","tickerArray","t","stockData","profile","dataFetchingService","fetchCompanyProfile","companyName","price","change","changes","changePercent","changesPercentage","marketCap","mktCap","pe","totalValue","stock","avgChange","formatPercentage","best","s","worst","min","formatNumber","analysisResults","pb","beta","recommendation","r","ALERT","undefined","newAlert","shouldTrigger","currentValue","BATCH_ANALYSIS","analysisType","debtToEquity","returnOnEquityTTM","profitMargin","roe","rating","avgScore","topPick","strongBuys","buys","coreCommands","DCF","_context","_processor","loadingMessage","demoMode","showLoading","dcfInputs","fetchDCFInputs","dcfResults","calculateDCFValuation","currentPrice","fairValue","upside","terminalValue","projections","proj","LBO","financials","fetchFinancialStatements","lboInputs","debt","totalDebt","cash","totalCash","lboResults","calculateLBOReturns","purchasePrice","equityInvestment","exitEquityValue","totalReturn","moic","exitEbitda","exitMultiple","exitEnterpriseValue","managementFees","carriedInterest","netReturn","COMP","peers","fetchPeerComparables","companyData","symbol","peRatio","evToEbitda","enterpriseValueOverEBITDA","priceToBook","compAnalysis","calculateComparableMetrics","peer","peerStatistics","median","relativeValuation","peRatioRelative","evEbitdaRelative","priceToBookRelative","marketCapPercentile","FETCH","industry","sector","fullTimeEmployees","eps","ps","enterpriseValueOverRevenue","bookValue","priceHigh52","priceLow52","dividendYield","dataCommands","EXPORT_JSON","dataType","filename","jsonString","suggestedFilename","CACHE_STATS","cacheSize","cache","cacheKeys","cacheTypes","hitRate","avgResponseTime","estimatedMemory","metrics","DATA_QUALITY","checks","field","quality","revenueTTM","overallQuality","missingFields","completeFields","dataAge","freshnessScore","qualityText","BENCHMARK","benchmark","stockProfile","benchmarkProfile","relativeMetrics","ytd","oneYear","threeYear","fiveYear","benchmarkPerformance","outperformance","values","x","esgCommands","ESG_SCORE","sectorMultiplier","Technology","Healthcare","Energy","Utilities","Industrials","Materials","baseSector","sectorScore","companySize","environmentalScore","socialScore","governanceScore","overallScore","riskFactors","opportunities","trends","environmental","social","governance","risk","opp","scores","overall","SOCIAL_SENTIMENT","days","sentimentScore","volumeScore","trendDirection","sources","mentions","floor","sentiment","themes","topic","totalMentions","source","avgSentiment","period","overallSentiment","NEWS_IMPACT","newsItems","date","headline","impact","priceChange","volume","totalPriceImpact","avgVolume","backupService","backupVersion","maxBackupSize","maxBackups","createBackup","includeSettings","includeWatchlists","includeAlerts","includeHistory","includeCachedData","analysisHistory","backupString","backupId","generateBackupId","storeBackup","cleanupOldBackups","restoreBackup","selectiveRestore","createBackupBeforeRestore","retrieveBackup","isVersionCompatible","dataToRestore","filterBackupData","restoreResults","restored","determineStorageType","backupTimestamp","restoreTimestamp","listBackups","backupKeys","backups","getTime","deleteBackup","exportBackupToFile","dataString","blob","importBackupFromFile","fileContent","getBackupStats","totalBackups","oldestBackup","newestBackup","encryptedBackups","compressedBackups","backupRecord","backupsToDelete","dataTypes","filtered","privacyService","retentionPolicies","session_data","privacySettings","cookieConsent","trackingConsent","dataCategories","essential","functional","marketing","external","policies","scheduleCleanup","updatePrivacySettings","newSettings","handlePrivacySettingChanges","cleanupNonEssentialData","cleanupAnalyticsData","removeDataSharingMarkers","setRetentionPolicy","policy","specificType","typesToClean","retentionDays","cleanupDataType","cutoffTime","cleanupCommandHistory","cleanupAnalysisHistory","cleanupCachedData","cleanupExportData","cleanupSessionData","entry","allHistory","allCached","allExports","_cutoffTime","nonEssentialTypes","analyticsTypes","exportUserData","includeEssential","includeFunctional","includeAnalytics","deleteAllUserData","confirmation","databases","deleteDatabase","getPrivacyReport","cleanupResults","lastCleanup","compliance","gdprCompliant","ccpaCompliant","retentionPoliciesActive","getPrivacySettings","getRetentionPolicies","syncService","syncEndpoint","syncInterval","lastSyncTime","syncInProgress","conflictResolutionStrategy","syncQueue","maxQueueSize","endpoint","interval","conflictResolution","queue","setupPeriodicSync","queueSyncOperation","syncOperation","generateOperationId","retries","onLine","processSyncQueue","processed","failed","operations","op","performFullSync","reason","localData","getLocalSyncData","remoteData","getRemoteData","mergedData","resolveConflicts","applyMergedData","syncableTypes","typeData","lastModified","checksum","calculateChecksum","merged","allTypes","local","remote","resolveDataConflict","mergeData","mergeWatchlists","mergeAlerts","remoteIds","getSyncStatus","queueSize","isOnline","hasEndpoint","strategy","persistenceTestSuite","testResults","isRunning","runAllTests","getTestSummary","passed","testPersistenceManagerInitialization","testDataStorageAndRetrieval","testDataRemoval","testStorageStatistics","testBackupCreation","testBackupListing","testBackupRestore","testPrivacySettings","testDataCleanup","testSyncStatus","testDataLifecycle","testErrorHandling","testName","assert","recordFailure","storeResult","retrievedData","stored","retrieved","indexedStoreResult","removeResult","backupsCount","restoreResult","recordSkip","updatedSettings","cleanupResult","lifecycle","step","updatedData","retrievedUpdated","retrievedAfterRemoval","initial","updated","afterRemoval","invalidResult","successRate","testPersistence","persistenceCommands","BACKUP_CREATE","BACKUP_LIST","toLocaleDateString","BACKUP_RESTORE","shouldOverwrite","STORAGE_STATS","totalUsedMB","totalAvailableMB","quotaMB","PRIVACY_CLEANUP","PRIVACY_SETTINGS","setting","val","boolValue","SYNC_STATUS","PERSISTENCE_TEST","find","calculateVolatility","mean","variance","pow","sqrt","getMarginIcon","margin","gross","excellent","good","fair","operating","privateAnalysisCommands","PRIVATE_DCF","_parsedCommand","defaultFinancialData","periods","statements","incomeStatement","revenues","operatingIncomes","margins","totalRevenue","operatingIncome","assumptions","discountRate","terminalGrowthRate","projectionYears","taxRate","latestRevenue","revenueGrowthRate","projectedRevenue","projectedOperatingIncome","projectedFCF","presentValue","totalPresentValue","terminalPresentValue","PRIVATE_RATIOS","ratios","totalCOGS","totalCostOfGoodsSold","grossProfit","netIncome","grossMargin","operatingMargin","netMargin","cogsPercentage","growthRates","currentRevenue","previousRevenue","currentOperating","previousOperating","revenueGrowth","operatingGrowth","g","PRIVATE_SUMMARY","latestIndex","latest","revenueBreakdown","injectables","surgery","wellness","weightloss","retailSales","energyDevices","PRIVATE_LOAD","balanceSheet","cashFlow","dataStructure","incomeStatementItems","balanceSheetItems","cashFlowItems","PRIVATE_MONTE_CARLO","latestPeriod","baseRevenue","baseOperatingIncome","simulations","marginChange","valuations","p50","p25","p75","PRIVATE_SCENARIO","bear","base","bull","PRIVATE_GROWTH","avgGrowth","rate","cagr","every","PRIVATE_RISK","rev","opIncome","revenueVolatility","marginVolatility","riskScore","riskLevel","assessGrowthSustainability","PRIVATE_VALIDATE","validationResults","hasNegativeRevenue","reasonableMargins","passedTests","totalTests","PRIVATE_EXPORT","company","dcf","export","PRIVATE_BENCHMARKS","benchmarks","industryBenchmarks","revenuePerSqFt","revenuePerProvider","injectableMargin","ebitdaMargin","customerRetention","percentage","str","maxScore","competitiveGrade","competitiveScore","grade","PRIVATE_CASHFLOW","cashFlowAnalysis","depreciation","operatingCashFlow","freeCashFlow","fcfMargin","avgFCFMargin","latestFCF","fcfs","isIncreasing","isDecreasing","assessCashFlowTrend","fcfGrowth","leverage","calculateOperatingLeverage","PRIVATE_MULTIPLES","industryMultiples","evRevenue","typical","evEbitda","revenueMultiple","conservative","ebitdaMultiple","earningsMultiple","typicalValuations","v","avgValuation","minValuation","maxValuation","PRIVATE_SENSITIVITY","baseEbitda","revenueChanges","marginChanges","multipleBase","newValuation","valuationChange","baseMargin","newEbitda","revenueElasticity","marginElasticity","baseCase","sensitivities","PRIVATE_WATERFALL","waterfallSteps","cumulative","pv5Years","pvTerminal","arrow","PRIVATE_COMPS","comparables","currentMargin","avgEvRevenue","comp","avgEvEbitda","avgMargin","tradingValuationRevenue","tradingValuationEbitda","avgTradingValuation","peerAverages","impliedValuation","PRIVATE_LBO","equityContribution","debtFinancing","interestRate","holdPeriod","ebitdaGrowthRate","projectedEbitda","remainingDebt","debtPaydown","yearEbitda","interestPayment","debtReduction","reduction","exitValue","netProceeds","ebitdaYear","returns","PRIVATE_QUALITY","qualityMetrics","revenueGrowthConsistency","volatility","calculateGrowthConsistency","revenueRecurring","recurringPortion","estimateRecurringRevenue","weight","marginStability","calculateMarginStability","profitabilityTrend","trend","calculateProfitabilityTrend","cashConversion","workingCapitalEfficiency","marketPosition","scalability","growthRate","assessScalability","debtLevels","liquidityPosition","qualityGrade","m","identifyWeaknesses","PRIVATE_WORKFLOW","workflowSteps","completed","next","overallProgress","nextStep","findIndex","Benchmarking","presentFields","assessDataCompleteness","steps","completedSteps","assessAnalysisDepth","progress","PRIVATE_DASHBOARD","performanceScore","round","calculatePerformanceScore","padEnd","kpis","PRIVATE","desc","cat","categoryCommands","totalCommands","systemCommands","PERFORMANCE_TEST","tests","cmdStart","duration","dataStart","memStart","memoryUsage","process","heapUsed","heapTotal","cacheStart","totalDuration","statusIcon","API_USAGE","daily","calls","remaining","monthly","endpoints","dailyUsagePercent","monthlyUsagePercent","totalEndpointCalls","rateLimitStatus","estimatedCost","l","usagePercents","CONFIG","validSettings","oldValue","newValue","technicalCommands","TECHNICALS","fetchMarketData","sma20","sma50","ema12","ema26","rsi","macd","macdSignal","macdHistogram","bollingerUpper","bollingerLower","bollingerPosition","support1","support2","resistance1","resistance2","signals","signal","indicators","SUPPORT_RESISTANCE","levels","level","strength","touches","nearestSupport","nearestResistance","supportDistance","resistanceDistance","distance","valuationCommands","DDM","currentDividend","dividendGrowthRate","requiredReturn","gordonValue","highGrowthYears","highGrowthRate","presentValueHighGrowth","dividend","terminalDividend","presentValueTerminal","twoStageValue","gordonUpside","twoStageUpside","RESIDUAL_INCOME","_financials","costOfEquity","normalIncome","residualIncome","residualIncomeGrowth","totalPVResidualIncome","projectedRI","terminalRI","pvTerminalValue","intrinsicValue","valuePerShare","sharesOutstanding","p","ASSET_BASED","totalAssets","totalLiabilities","cashAndEquivalents","cashAndCashEquivalents","inventory","ppe","propertyPlantEquipmentNet","intangibleAssets","otherAssets","adjustments","book","market","adjustment","intangibles","other","totalMarketAssets","adj","netAssetValue","navPerShare","liquidationValue","liquidationPerShare","portfolioCommands","PORTFOLIO","RISK_METRICS","CORRELATION_MATRIX","EFFICIENT_FRONTIER","DRAWDOWN","allCommands","TerminalInterface","onCommandExecute","calculationResults","setCommands","currentInput","setCurrentInput","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestion","setSelectedSuggestion","isLoading","setIsLoading","terminalRef","inputRef","commandProcessorRef","useEffect","scrollTop","scrollHeight","focus","executeCommand","newCommand","prev","loadingCommand","response","responseCommand","errorCommand","availableCommands","info","commandSuggestions","partialMatches","allSuggestions","onKeyDown","autoComplete","selectSuggestion","VariableInputs","onVariableChange","onBulkEdit","activeSection","setActiveSection","editMode","setEditMode","setVariables","revenue_growth","unit","ebitda_margin","capex_revenue","working_capital_revenue","cost_of_capital","risk_free_rate","market_premium","cost_of_debt","debt_equity_ratio","market_data","current_share_price","shares_outstanding","market_cap","enterprise_value","net_debt","formatValue","filteredVariables","sectionData","variable","url","URL","createObjectURL","createElement","href","download","click","revokeObjectURL","section","getVariablesByCategory","categoryVariables","updatedVariables","handleVariableChange","defaultVariables","FinancialModelWorkspace","activeLayout","setActiveLayout","leftPanelContent","setLeftPanelContent","rightPanelContent","setRightPanelContent","isCollaborationOpen","setIsCollaborationOpen","modelState","setModelState","saved","calculating","lastSaved","setCalculationResults","handleCommandExecute","SEOHead","title","canonical","keywords","Header","role","renderLeftPanel"],"mappings":"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"}
{"version":3,"file":"dcfCalculations-gqpk9y-a.js","sources":["../../src/utils/dcfCalculations.js"],"sourcesContent":["// Enhanced DCF Calculation Engine for Professional Financial Analysis\n// Supports year-by-year projections and proper Unlevered Free Cash Flow calculation\n\nexport const calculateEnhancedDCF = (inputs) => {\n  if (!inputs || !inputs.currentRevenue) {\n    return null;\n  }\n\n  const {\n    currentRevenue,\n    projectionYears = 5,\n    terminalGrowthRate = 0.025,\n    discountRate = 0.12,\n    yearlyData = {},\n    balanceSheet = {}\n  } = inputs;\n\n  const results = {\n    years: [],\n    revenues: [],\n    ebitda: [],\n    ebit: [],\n    nopat: [],\n    freeCashFlows: [],\n    presentValues: [],\n    cumulativePV: 0,\n    terminalValue: 0,\n    presentValueTerminal: 0,\n    enterpriseValue: 0,\n    equityValue: 0,\n    impliedSharePrice: 0,\n    netDebt: 0,\n    assumptions: {\n      discountRate: discountRate * 100,\n      terminalGrowthRate: terminalGrowthRate * 100,\n      currentRevenue,\n      projectionYears\n    },\n    projectionTable: []\n  };\n\n  let previousRevenue = currentRevenue;\n\n  // Calculate year-by-year projections\n  for (let year = 1; year <= projectionYears; year++) {\n    const yearData = yearlyData[year] || {};\n\n    // Use year-specific inputs or defaults\n    const revenueGrowth = (yearData.revenueGrowth || 10) / 100;\n    const ebitdaMargin = (yearData.ebitdaMargin || 20) / 100;\n    const taxRate = (yearData.taxRate || 25) / 100;\n    const capexPercent = (yearData.capexPercent || 3) / 100;\n    const daPercent = (yearData.daPercent || 3) / 100;\n    const workingCapitalChange = (yearData.workingCapitalChange || 2) / 100;\n\n    // Revenue projection\n    const revenue = previousRevenue * (1 + revenueGrowth);\n\n    // EBITDA calculation\n    const ebitda = revenue * ebitdaMargin;\n\n    // Depreciation & Amortization\n    const depreciation = revenue * daPercent;\n\n    // EBIT (Earnings Before Interest and Taxes)\n    const ebit = ebitda - depreciation;\n\n    // Taxes on EBIT\n    const taxes = ebit * taxRate;\n\n    // NOPAT (Net Operating Profit After Tax)\n    const nopat = ebit - taxes;\n\n    // Capital Expenditure\n    const capex = revenue * capexPercent;\n\n    // Change in Net Working Capital\n    const deltaWorkingCapital = revenue * workingCapitalChange;\n\n    // Unlevered Free Cash Flow = NOPAT + D&A - CapEx - Î”Working Capital\n    const freeCashFlow = nopat + depreciation - capex - deltaWorkingCapital;\n\n    // Present Value of FCF\n    const presentValue = freeCashFlow / Math.pow(1 + discountRate, year);\n\n    // Store results\n    results.years.push(year);\n    results.revenues.push(revenue);\n    results.ebitda.push(ebitda);\n    results.ebit.push(ebit);\n    results.nopat.push(nopat);\n    results.freeCashFlows.push(freeCashFlow);\n    results.presentValues.push(presentValue);\n    results.cumulativePV += presentValue;\n\n    // Detailed projection table entry\n    results.projectionTable.push({\n      year,\n      revenue,\n      revenueGrowth: revenueGrowth * 100,\n      ebitda,\n      ebitdaMargin: ebitdaMargin * 100,\n      depreciation,\n      ebit,\n      taxes,\n      taxRate: taxRate * 100,\n      nopat,\n      capex,\n      deltaWorkingCapital,\n      freeCashFlow,\n      presentValue\n    });\n\n    previousRevenue = revenue;\n  }\n\n  // Terminal Value Calculation\n  if (results.freeCashFlows.length > 0) {\n    const terminalYearFCF = results.freeCashFlows[projectionYears - 1];\n    const terminalFCF = terminalYearFCF * (1 + terminalGrowthRate);\n\n    // Terminal Value = Terminal FCF / (WACC - Terminal Growth Rate)\n    results.terminalValue = terminalFCF / (discountRate - terminalGrowthRate);\n    results.presentValueTerminal = results.terminalValue / Math.pow(1 + discountRate, projectionYears);\n  }\n\n  // Enterprise Value = Sum of PV of FCFs + PV of Terminal Value\n  results.enterpriseValue = results.cumulativePV + results.presentValueTerminal;\n\n  // Calculate Net Debt and Equity Value\n  const cash = balanceSheet.cash || 0;\n  const totalDebt = balanceSheet.totalDebt || 0;\n  results.netDebt = totalDebt - cash;\n\n  // Equity Value = Enterprise Value - Net Debt\n  results.equityValue = results.enterpriseValue - results.netDebt;\n\n  // Implied Share Price\n  const sharesOutstanding = balanceSheet.sharesOutstanding || 1000000;\n  results.impliedSharePrice = results.equityValue / sharesOutstanding;\n\n  return results;\n};\n\n// Simplified DCF for backward compatibility and quick calculations\nexport const calculateSimpleDCF = (inputs) => {\n  if (!inputs || !inputs.currentRevenue) {\n    return null;\n  }\n\n  // Convert simple inputs to enhanced format\n  const enhancedInputs = {\n    currentRevenue: inputs.currentRevenue,\n    projectionYears: inputs.projectionYears || 5,\n    terminalGrowthRate: inputs.terminalGrowthRate || 0.025,\n    discountRate: inputs.discountRate || 0.12,\n    yearlyData: {},\n    balanceSheet: {\n      cash: 0,\n      totalDebt: 0,\n      sharesOutstanding: 1000000\n    }\n  };\n\n  // Create uniform yearly data from simple inputs\n  for (let year = 1; year <= enhancedInputs.projectionYears; year++) {\n    enhancedInputs.yearlyData[year] = {\n      revenueGrowth: (inputs.revenueGrowthRate || 0.1) * 100,\n      ebitdaMargin: (inputs.ebitdaMargin || 0.2) * 100,\n      taxRate: (inputs.taxRate || 0.25) * 100,\n      capexPercent: (inputs.capexPercent || 0.03) * 100,\n      daPercent: 3,\n      workingCapitalChange: (inputs.workingCapitalPercent || 0.02) * 100\n    };\n  }\n\n  return calculateEnhancedDCF(enhancedInputs);\n};\n\n// Legacy DCF function for existing analysis results\nexport const calculateDCF = (data, modelInputs = null) => {\n  if (!data?.statements?.incomeStatement) {\n    return null;\n  }\n\n  // Default DCF parameters if not provided\n  const dcfParams = modelInputs?.dcf || {\n    discountRate: 12, // 12% default WACC\n    terminalGrowthRate: 2.5, // 2.5% terminal growth\n    projectionYears: 5,\n    taxRate: 25, // 25% tax rate\n    sharesOutstanding: 1000 // Default shares outstanding\n  };\n\n  const statements = data.statements;\n  const income = statements.incomeStatement;\n\n  // Get available periods and latest data\n  const periods = Object.keys(income.totalRevenue || {}).sort((a, b) => parseInt(a) - parseInt(b));\n  if (periods.length === 0) return null;\n\n  const latestPeriod = periods[periods.length - 1];\n  const baseRevenue = income.totalRevenue?.[latestPeriod] || 0;\n  const baseOperatingIncome = income.operatingIncome?.[latestPeriod] || 0;\n\n  // Calculate growth rates from historical data\n  let revenueGrowthRate = 5; // Default 5% growth\n  if (periods.length >= 2) {\n    const previousPeriod = periods[periods.length - 2];\n    const currentRevenue = income.totalRevenue?.[latestPeriod] || 0;\n    const previousRevenue = income.totalRevenue?.[previousPeriod] || 0;\n\n    if (previousRevenue > 0) {\n      revenueGrowthRate = ((currentRevenue - previousRevenue) / previousRevenue) * 100;\n      // Cap growth rate between -10% and 25% for reasonable projections\n      revenueGrowthRate = Math.max(-10, Math.min(25, revenueGrowthRate));\n    }\n  }\n\n  // Operating margin calculation\n  const operatingMargin = baseRevenue > 0 ? (baseOperatingIncome / baseRevenue) * 100 : 0;\n\n  const results = {\n    years: [],\n    freeCashFlows: [],\n    presentValues: [],\n    cumulativePV: 0,\n    terminalValue: 0,\n    presentValueTerminal: 0,\n    enterpriseValue: 0,\n    equityValue: 0,\n    impliedSharePrice: 0,\n    impliedValuation: 0,\n    assumptions: {\n      discountRate: dcfParams.discountRate,\n      terminalGrowthRate: dcfParams.terminalGrowthRate,\n      revenueGrowthRate,\n      operatingMargin,\n      taxRate: dcfParams.taxRate\n    }\n  };\n\n  // Project future cash flows\n  for (let year = 1; year <= dcfParams.projectionYears; year++) {\n    // Declining growth rate over projection period\n    const yearGrowthRate = revenueGrowthRate * (1 - (year - 1) * 0.1);\n    const projectedRevenue = baseRevenue * Math.pow(1 + yearGrowthRate / 100, year);\n    const projectedOperatingIncome = projectedRevenue * (operatingMargin / 100);\n\n    // NOPAT (Net Operating Profit After Tax)\n    const nopat = projectedOperatingIncome * (1 - dcfParams.taxRate / 100);\n\n    // Simplified free cash flow (NOPAT - assume capex/working capital changes offset depreciation)\n    const freeCashFlow = nopat;\n\n    // Present value\n    const presentValue = freeCashFlow / Math.pow(1 + dcfParams.discountRate / 100, year);\n\n    results.years.push(year);\n    results.freeCashFlows.push(freeCashFlow);\n    results.presentValues.push(presentValue);\n    results.cumulativePV += presentValue;\n  }\n\n  // Terminal value calculation\n  const terminalYear = dcfParams.projectionYears;\n  const terminalCashFlow = results.freeCashFlows[terminalYear - 1];\n  const terminalGrowthCashFlow = terminalCashFlow * (1 + dcfParams.terminalGrowthRate / 100);\n\n  results.terminalValue = terminalGrowthCashFlow / ((dcfParams.discountRate - dcfParams.terminalGrowthRate) / 100);\n  results.presentValueTerminal = results.terminalValue / Math.pow(1 + dcfParams.discountRate / 100, terminalYear);\n\n  // Enterprise and equity value\n  results.enterpriseValue = results.cumulativePV + results.presentValueTerminal;\n  results.equityValue = results.enterpriseValue; // Simplified - assume no net debt\n  results.impliedSharePrice = results.equityValue / dcfParams.sharesOutstanding;\n  results.impliedValuation = results.equityValue;\n\n  return results;\n};\n\n// Sensitivity Analysis Function\nexport const calculateSensitivityAnalysis = (inputs, waccRange = [-2, -1, 0, 1, 2], terminalGrowthRange = [-1, -0.5, 0, 0.5, 1]) => {\n  if (!inputs) return null;\n\n  const baseWACC = inputs.discountRate || 0.12;\n  const baseTerminalGrowth = inputs.terminalGrowthRate || 0.025;\n\n  const sensitivityMatrix = [];\n\n  waccRange.forEach(waccDelta => {\n    const row = [];\n    terminalGrowthRange.forEach(terminalDelta => {\n      const testInputs = {\n        ...inputs,\n        discountRate: baseWACC + (waccDelta / 100),\n        terminalGrowthRate: baseTerminalGrowth + (terminalDelta / 100)\n      };\n\n      try {\n        const result = calculateEnhancedDCF(testInputs);\n        row.push({\n          wacc: (baseWACC + (waccDelta / 100)) * 100,\n          terminalGrowth: (baseTerminalGrowth + (terminalDelta / 100)) * 100,\n          sharePrice: result?.impliedSharePrice || 0,\n          equityValue: result?.equityValue || 0\n        });\n      } catch {\n        row.push({\n          wacc: (baseWACC + (waccDelta / 100)) * 100,\n          terminalGrowth: (baseTerminalGrowth + (terminalDelta / 100)) * 100,\n          sharePrice: 0,\n          equityValue: 0\n        });\n      }\n    });\n    sensitivityMatrix.push(row);\n  });\n\n  return {\n    matrix: sensitivityMatrix,\n    waccRange: waccRange.map(delta => (baseWACC + (delta / 100)) * 100),\n    terminalGrowthRange: terminalGrowthRange.map(delta => (baseTerminalGrowth + (delta / 100)) * 100),\n    baseCase: {\n      wacc: baseWACC * 100,\n      terminalGrowth: baseTerminalGrowth * 100\n    }\n  };\n};\n\n// Export default for backward compatibility\nexport default {\n  calculateDCF,\n  calculateSimpleDCF,\n  calculateEnhancedDCF,\n  calculateSensitivityAnalysis\n};\n"],"names":["calculateEnhancedDCF","inputs","currentRevenue","projectionYears","terminalGrowthRate","discountRate","yearlyData","balanceSheet","results","years","revenues","ebitda","ebit","nopat","freeCashFlows","presentValues","cumulativePV","terminalValue","presentValueTerminal","enterpriseValue","equityValue","impliedSharePrice","netDebt","assumptions","projectionTable","previousRevenue","year","yearData","revenueGrowth","ebitdaMargin","taxRate","capexPercent","revenue","depreciation","daPercent","taxes","capex","deltaWorkingCapital","workingCapitalChange","freeCashFlow","presentValue","Math","pow","push","length","terminalFCF","cash","totalDebt","sharesOutstanding","calculateDCF","data","modelInputs","statements","incomeStatement","dcfParams","dcf","income","periods","Object","keys","totalRevenue","sort","a","b","parseInt","latestPeriod","baseRevenue","baseOperatingIncome","operatingIncome","revenueGrowthRate","previousPeriod","max","min","operatingMargin","impliedValuation","yearGrowthRate","terminalYear","terminalGrowthCashFlow","calculateSensitivityAnalysis","waccRange","terminalGrowthRange","baseWACC","baseTerminalGrowth","sensitivityMatrix","forEach","waccDelta","row","terminalDelta","testInputs","result","wacc","terminalGrowth","sharePrice","matrix","map","delta","baseCase"],"mappings":"AAGY,MAACA,EAAwBC,IACnC,IAAKA,IAAWA,EAAOC,eACrB,OAAO,KAGT,MAAMA,eACJA,EAAcC,gBACdA,EAAkB,EAACC,mBACnBA,EAAqB,KAAKC,aAC1BA,EAAe,IAAIC,WACnBA,EAAa,CAAA,EAAEC,aACfA,EAAe,CAAA,GACbN,EAEEO,EAAU,CACdC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,cAAe,GACfC,cAAe,GACfC,aAAc,EACdC,cAAe,EACfC,qBAAsB,EACtBC,gBAAiB,EACjBC,YAAa,EACbC,kBAAmB,EACnBC,QAAS,EACTC,YAAa,CACXlB,aAA6B,IAAfA,EACdD,mBAAyC,IAArBA,EACpBF,iBACAC,mBAEFqB,gBAAiB,IAGnB,IAAIC,EAAkBvB,EAGtB,IAAK,IAAIwB,EAAO,EAAGA,GAAQvB,EAAiBuB,IAAQ,CAClD,MAAMC,EAAWrB,EAAWoB,IAAS,CAAA,EAG/BE,GAAiBD,EAASC,eAAiB,IAAM,IACjDC,GAAgBF,EAASE,cAAgB,IAAM,IAC/CC,GAAWH,EAASG,SAAW,IAAM,IACrCC,GAAgBJ,EAASI,cAAgB,GAAK,IAK9CC,EAAUP,GAAmB,EAAIG,GAGjCjB,EAASqB,EAAUH,EAGnBI,EAAeD,IAVFL,EAASO,WAAa,GAAK,KAaxCtB,EAAOD,EAASsB,EAGhBE,EAAQvB,EAAOkB,EAGfjB,EAAQD,EAAOuB,EAGfC,EAAQJ,EAAUD,EAGlBM,EAAsBL,IAxBEL,EAASW,sBAAwB,GAAK,KA2B9DC,EAAe1B,EAAQoB,EAAeG,EAAQC,EAG9CG,EAAeD,EAAeE,KAAKC,IAAI,EAAIrC,EAAcqB,GAG/DlB,EAAQC,MAAMkC,KAAKjB,GACnBlB,EAAQE,SAASiC,KAAKX,GACtBxB,EAAQG,OAAOgC,KAAKhC,GACpBH,EAAQI,KAAK+B,KAAK/B,GAClBJ,EAAQK,MAAM8B,KAAK9B,GACnBL,EAAQM,cAAc6B,KAAKJ,GAC3B/B,EAAQO,cAAc4B,KAAKH,GAC3BhC,EAAQQ,cAAgBwB,EAGxBhC,EAAQgB,gBAAgBmB,KAAK,CAC3BjB,OACAM,UACAJ,cAA+B,IAAhBA,EACfjB,SACAkB,aAA6B,IAAfA,EACdI,eACArB,OACAuB,QACAL,QAAmB,IAAVA,EACTjB,QACAuB,QACAC,sBACAE,eACAC,iBAGFf,EAAkBO,CACpB,CAGA,GAAIxB,EAAQM,cAAc8B,OAAS,EAAG,CACpC,MACMC,EADkBrC,EAAQM,cAAcX,EAAkB,IACzB,EAAIC,GAG3CI,EAAQS,cAAgB4B,GAAexC,EAAeD,GACtDI,EAAQU,qBAAuBV,EAAQS,cAAgBwB,KAAKC,IAAI,EAAIrC,EAAcF,EACpF,CAGAK,EAAQW,gBAAkBX,EAAQQ,aAAeR,EAAQU,qBAGzD,MAAM4B,EAAOvC,EAAauC,MAAQ,EAC5BC,EAAYxC,EAAawC,WAAa,EAC5CvC,EAAQc,QAAUyB,EAAYD,EAG9BtC,EAAQY,YAAcZ,EAAQW,gBAAkBX,EAAQc,QAGxD,MAAM0B,EAAoBzC,EAAayC,mBAAqB,IAG5D,OAFAxC,EAAQa,kBAAoBb,EAAQY,YAAc4B,EAE3CxC,GAuCIyC,EAAe,CAACC,EAAMC,EAAc,QAC/C,IAAKD,GAAME,YAAYC,gBACrB,OAAO,KAIT,MAAMC,EAAYH,GAAaI,KAAO,CACpClD,aAAc,GACdD,mBAAoB,IACpBD,gBAAiB,EACjB2B,QAAS,GACTkB,kBAAmB,KAIfQ,EADaN,EAAKE,WACEC,gBAGpBI,EAAUC,OAAOC,KAAKH,EAAOI,cAAgB,CAAA,GAAIC,KAAK,CAACC,EAAGC,IAAMC,SAASF,GAAKE,SAASD,IAC7F,GAAuB,IAAnBN,EAAQb,OAAc,OAAO,KAEjC,MAAMqB,EAAeR,EAAQA,EAAQb,OAAS,GACxCsB,EAAcV,EAAOI,eAAeK,IAAiB,EACrDE,EAAsBX,EAAOY,kBAAkBH,IAAiB,EAGtE,IAAII,EAAoB,EACxB,GAAIZ,EAAQb,QAAU,EAAG,CACvB,MAAM0B,EAAiBb,EAAQA,EAAQb,OAAS,GAC1C1C,EAAiBsD,EAAOI,eAAeK,IAAiB,EACxDxC,EAAkB+B,EAAOI,eAAeU,IAAmB,EAE7D7C,EAAkB,IACpB4C,GAAsBnE,EAAiBuB,GAAmBA,EAAmB,IAE7E4C,EAAoB5B,KAAK8B,KAAI,GAAK9B,KAAK+B,IAAI,GAAIH,IAEnD,CAGA,MAAMI,EAAkBP,EAAc,EAAKC,EAAsBD,EAAe,IAAM,EAEhF1D,EAAU,CACdC,MAAO,GACPK,cAAe,GACfC,cAAe,GACfC,aAAc,EACdC,cAAe,EACfC,qBAAsB,EACtBC,gBAAiB,EACjBC,YAAa,EACbC,kBAAmB,EACnBqD,iBAAkB,EAClBnD,YAAa,CACXlB,aAAciD,EAAUjD,aACxBD,mBAAoBkD,EAAUlD,mBAC9BiE,oBACAI,kBACA3C,QAASwB,EAAUxB,UAKvB,IAAK,IAAIJ,EAAO,EAAGA,GAAQ4B,EAAUnD,gBAAiBuB,IAAQ,CAE5D,MAAMiD,EAAiBN,GAAqB,EAAiB,IAAZ3C,EAAO,IAQlDa,EAPmB2B,EAAczB,KAAKC,IAAI,EAAIiC,EAAiB,IAAKjD,IACrB+C,EAAkB,MAG7B,EAAInB,EAAUxB,QAAU,KAM5DU,EAAeD,EAAeE,KAAKC,IAAI,EAAIY,EAAUjD,aAAe,IAAKqB,GAE/ElB,EAAQC,MAAMkC,KAAKjB,GACnBlB,EAAQM,cAAc6B,KAAKJ,GAC3B/B,EAAQO,cAAc4B,KAAKH,GAC3BhC,EAAQQ,cAAgBwB,CAC1B,CAGA,MAAMoC,EAAetB,EAAUnD,gBAEzB0E,EADmBrE,EAAQM,cAAc8D,EAAe,IACX,EAAItB,EAAUlD,mBAAqB,KAWtF,OATAI,EAAQS,cAAgB4D,IAA2BvB,EAAUjD,aAAeiD,EAAUlD,oBAAsB,KAC5GI,EAAQU,qBAAuBV,EAAQS,cAAgBwB,KAAKC,IAAI,EAAIY,EAAUjD,aAAe,IAAKuE,GAGlGpE,EAAQW,gBAAkBX,EAAQQ,aAAeR,EAAQU,qBACzDV,EAAQY,YAAcZ,EAAQW,gBAC9BX,EAAQa,kBAAoBb,EAAQY,YAAckC,EAAUN,kBAC5DxC,EAAQkE,iBAAmBlE,EAAQY,YAE5BZ,GAIIsE,EAA+B,CAAC7E,EAAQ8E,EAAY,EAAC,GAAI,EAAI,EAAG,EAAG,GAAIC,EAAsB,KAAK,GAAM,EAAG,GAAK,MAC3H,IAAK/E,EAAQ,OAAO,KAEpB,MAAMgF,EAAWhF,EAAOI,cAAgB,IAClC6E,EAAqBjF,EAAOG,oBAAsB,KAElD+E,EAAoB,GA+B1B,OA7BAJ,EAAUK,QAAQC,IAChB,MAAMC,EAAM,GACZN,EAAoBI,QAAQG,IAC1B,MAAMC,EAAa,IACdvF,EACHI,aAAc4E,EAAYI,EAAY,IACtCjF,mBAAoB8E,EAAsBK,EAAgB,KAG5D,IACE,MAAME,EAASzF,EAAqBwF,GACpCF,EAAI3C,KAAK,CACP+C,KAAuC,KAAhCT,EAAYI,EAAY,KAC/BM,eAA+D,KAA9CT,EAAsBK,EAAgB,KACvDK,WAAYH,GAAQpE,mBAAqB,EACzCD,YAAaqE,GAAQrE,aAAe,GAExC,CAAE,MACAkE,EAAI3C,KAAK,CACP+C,KAAuC,KAAhCT,EAAYI,EAAY,KAC/BM,eAA+D,KAA9CT,EAAsBK,EAAgB,KACvDK,WAAY,EACZxE,YAAa,GAEjB,IAEF+D,EAAkBxC,KAAK2C,KAGlB,CACLO,OAAQV,EACRJ,UAAWA,EAAUe,IAAIC,GAAsC,KAA5Bd,EAAYc,EAAQ,MACvDf,oBAAqBA,EAAoBc,IAAIC,GAAgD,KAAtCb,EAAsBa,EAAQ,MACrFC,SAAU,CACRN,KAAiB,IAAXT,EACNU,eAAqC,IAArBT"}
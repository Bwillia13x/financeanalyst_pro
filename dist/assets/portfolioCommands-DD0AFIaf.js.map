{"version":3,"file":"portfolioCommands-DD0AFIaf.js","sources":["../../src/services/financialModelingEngine.js","../../src/services/dataFetching.js","../../src/services/commands/portfolioCommands.js"],"sourcesContent":["// import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced Financial Modeling Engine\n * Provides comprehensive DCF, LBO, and valuation modeling capabilities\n */\nclass FinancialModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default financial modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      dcf: {\n        projectionYears: 5,\n        terminalGrowthRate: 0.025,\n        riskFreeRate: 0.045,\n        marketPremium: 0.065,\n        taxRate: 0.21,\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.05,\n        depreciationAsPercentOfRevenue: 0.025,\n        // Enhanced DCF parameters\n        normalizedMarginTarget: null, // For margin normalization\n        cyclicalAdjustment: false,\n        industryBeta: 1.0,\n        sizeAdjustment: 0.0, // Small company premium\n        countryRiskPremium: 0.0,\n        liquidityDiscount: 0.0\n      },\n      lbo: {\n        holdingPeriod: 5,\n        debtMultiples: { senior: 4.0, subordinated: 1.5, total: 5.5 },\n        interestRates: { senior: 0.055, subordinated: 0.095 },\n        managementFeeRate: 0.02,\n        carriedInterestRate: 0.2,\n        ebitdaGrowthRate: 0.05,\n        debtPaydownRate: 0.5\n      },\n      monte_carlo: {\n        iterations: 10000,\n        confidenceIntervals: [0.05, 0.25, 0.5, 0.75, 0.95],\n        correlationMatrix: null\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive DCF model with multiple scenarios\n   * @param {Object} inputs - DCF model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete DCF analysis\n   */\n  buildDCFModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      currentRevenue: _currentRevenue,\n      historicalGrowthRates: _historicalGrowthRates = [],\n      margins: _margins = {},\n      balanceSheetData: _balanceSheetData = {},\n      marketData: _marketData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions.dcf, ...assumptions };\n\n    // Build base case scenario\n    const baseCase = this.calculateDCFScenario(inputs, modelAssumptions, 'Base Case');\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Bull case: Higher growth, lower discount rate\n    if (scenarios.bull !== false) {\n      const bullAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 1.3,\n        terminalGrowthRate: Math.min(modelAssumptions.terminalGrowthRate * 1.2, 0.04),\n        wacc: (modelAssumptions.wacc || 0.1) * 0.9\n      };\n      scenarioResults.bull = this.calculateDCFScenario(inputs, bullAssumptions, 'Bull Case');\n    }\n\n    // Bear case: Lower growth, higher discount rate\n    if (scenarios.bear !== false) {\n      const bearAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 0.7,\n        terminalGrowthRate: Math.max(modelAssumptions.terminalGrowthRate * 0.8, 0.015),\n        wacc: (modelAssumptions.wacc || 0.1) * 1.1\n      };\n      scenarioResults.bear = this.calculateDCFScenario(inputs, bearAssumptions, 'Bear Case');\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performDCFSensitivityAnalysis(inputs, modelAssumptions);\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'DCF',\n      timestamp: new Date().toISOString(),\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateDCFSummary(baseCase, scenarioResults, inputs.currentPrice)\n    };\n  }\n\n  /**\n   * Calculate DCF for a specific scenario\n   * @param {Object} inputs - Model inputs\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} DCF calculation results\n   */\n  calculateDCFScenario(inputs, assumptions, scenarioName) {\n    const {\n      currentRevenue,\n      currentPrice,\n      sharesOutstanding,\n      totalDebt = 0,\n      cash = 0\n    } = inputs;\n\n    // Project revenues\n    const revenueProjections = this.projectRevenues(\n      currentRevenue,\n      assumptions.revenueGrowthRate || 0.1,\n      assumptions.projectionYears\n    );\n\n    // Project operating metrics\n    const operatingProjections = this.projectOperatingMetrics(\n      revenueProjections,\n      assumptions\n    );\n\n    // Calculate free cash flows\n    const fcfProjections = this.calculateFreeCashFlows(\n      operatingProjections,\n      assumptions\n    );\n\n    // Calculate terminal value\n    const finalFCF = fcfProjections[fcfProjections.length - 1]?.unleveredFCF || 0;\n    const terminalValue = this.calculateTerminalValue(\n      finalFCF,\n      assumptions.terminalGrowthRate,\n      assumptions.wacc\n    );\n\n    // Calculate present values\n    const fcfValues = fcfProjections.map(fcf => fcf?.unleveredFCF || 0);\n    const pvOfCashFlows = this.calculatePresentValue(fcfValues, assumptions.wacc);\n    const pvOfTerminalValue = this.calculatePresentValue([terminalValue], assumptions.wacc, assumptions.projectionYears);\n\n    // Calculate enterprise and equity values\n    const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n    const equityValue = enterpriseValue - totalDebt + cash;\n    const pricePerShare = equityValue / sharesOutstanding;\n\n    // Calculate valuation metrics\n    const upside = currentPrice ? ((pricePerShare - currentPrice) / currentPrice) * 100 : null;\n\n    return {\n      scenarioName,\n      revenueProjections,\n      operatingProjections,\n      fcfProjections,\n      terminalValue,\n      pvOfCashFlows,\n      pvOfTerminalValue,\n      enterpriseValue,\n      equityValue,\n      pricePerShare,\n      currentPrice,\n      upside,\n      wacc: assumptions.wacc,\n      terminalGrowthRate: assumptions.terminalGrowthRate,\n      impliedMultiples: this.calculateImpliedMultiples(enterpriseValue, operatingProjections)\n    };\n  }\n\n  /**\n   * Project revenue growth over multiple years\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number|Array} growthRates - Growth rate(s)\n   * @param {number} years - Number of years to project\n   * @returns {Array} Revenue projections\n   */\n  projectRevenues(baseRevenue, growthRates, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n\n    for (let i = 0; i < years; i++) {\n      const growthRate = Array.isArray(growthRates)\n        ? growthRates[i] || growthRates[growthRates.length - 1]\n        : growthRates * Math.pow(0.95, i); // Declining growth rate\n\n      currentRevenue *= (1 + growthRate);\n      projections.push({\n        year: i + 1,\n        revenue: currentRevenue,\n        growthRate\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Project operating metrics (EBITDA, margins, etc.)\n   * @param {Array} revenueProjections - Revenue projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Operating projections\n   */\n  projectOperatingMetrics(revenueProjections, assumptions) {\n    return revenueProjections.map((projection, _index) => {\n      const ebitdaMargin = assumptions.ebitdaMargin || 0.2;\n      const ebitda = projection.revenue * ebitdaMargin;\n      const depreciation = projection.revenue * assumptions.depreciationAsPercentOfRevenue;\n      const ebit = ebitda - depreciation;\n      const taxes = ebit * assumptions.taxRate;\n      const nopat = ebit - taxes;\n\n      return {\n        ...projection,\n        ebitda,\n        ebitdaMargin,\n        depreciation,\n        ebit,\n        taxes,\n        nopat\n      };\n    });\n  }\n\n  /**\n   * Calculate free cash flows with enhanced methodology\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Free cash flow projections with detailed breakdown\n   */\n  calculateFreeCashFlows(operatingProjections, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      // More sophisticated CapEx modeling\n      const maintenanceCapex = projection.revenue * (assumptions.maintenanceCapexRate || 0.015);\n      const growthCapex = index > 0 ?\n        (projection.revenue - operatingProjections[index - 1].revenue) * (assumptions.growthCapexRate || 0.8) : 0;\n      const totalCapex = maintenanceCapex + growthCapex;\n\n      // Enhanced working capital calculation\n      const nwcChange = this.calculateWorkingCapitalChange(projection, operatingProjections[index - 1], assumptions);\n\n      // Add non-cash charges beyond depreciation\n      const stockBasedComp = projection.revenue * (assumptions.stockBasedCompRate || 0.005);\n      const otherNonCash = projection.revenue * (assumptions.otherNonCashRate || 0.001);\n      const totalNonCash = projection.depreciation + stockBasedComp + otherNonCash;\n\n      // Calculate unlevered FCF\n      const fcf = projection.nopat + totalNonCash - totalCapex - nwcChange;\n\n      return {\n        year: index + 1,\n        nopat: projection.nopat,\n        depreciation: projection.depreciation,\n        stockBasedComp,\n        otherNonCash,\n        totalNonCash,\n        maintenanceCapex,\n        growthCapex,\n        totalCapex,\n        nwcChange,\n        unleveredFCF: fcf,\n        fcfMargin: projection.revenue > 0 ? fcf / projection.revenue : 0\n      };\n    });\n  }\n\n  /**\n   * Calculate working capital change with detailed components\n   * @param {Object} currentProjection - Current year projection\n   * @param {Object} priorProjection - Prior year projection\n   * @param {Object} assumptions - Model assumptions\n   * @returns {number} Working capital change\n   */\n  calculateWorkingCapitalChange(currentProjection, priorProjection, assumptions) {\n    if (!priorProjection) {\n      return currentProjection.revenue * assumptions.nwcAsPercentOfRevenue;\n    }\n\n    // Component-based NWC calculation\n    const receivablesDays = assumptions.receivablesDays || 45;\n    const inventoryDays = assumptions.inventoryDays || 30;\n    const payablesDays = assumptions.payablesDays || 35;\n\n    const currentReceivables = (currentProjection.revenue * receivablesDays) / 365;\n    const currentInventory = (currentProjection.revenue * inventoryDays) / 365 * (assumptions.cogsPct || 0.6);\n    const currentPayables = (currentProjection.revenue * payablesDays) / 365 * (assumptions.cogsPct || 0.6);\n    const currentNWC = currentReceivables + currentInventory - currentPayables;\n\n    const priorReceivables = (priorProjection.revenue * receivablesDays) / 365;\n    const priorInventory = (priorProjection.revenue * inventoryDays) / 365 * (assumptions.cogsPct || 0.6);\n    const priorPayables = (priorProjection.revenue * payablesDays) / 365 * (assumptions.cogsPct || 0.6);\n    const priorNWC = priorReceivables + priorInventory - priorPayables;\n\n    return currentNWC - priorNWC;\n  }\n\n  /**\n   * Calculate terminal value using Gordon Growth Model with validation\n   * @param {number} finalFCF - Final year free cash flow\n   * @param {number} terminalGrowthRate - Terminal growth rate\n   * @param {number} discountRate - Discount rate (WACC)\n   * @param {Object} options - Additional options for terminal value calculation\n   * @returns {number} Terminal value\n   */\n  calculateTerminalValue(finalFCF, terminalGrowthRate, discountRate, options = {}) {\n    // Enhanced validation\n    if (discountRate <= terminalGrowthRate) {\n      throw new Error('Discount rate must be greater than terminal growth rate');\n    }\n\n    if (terminalGrowthRate < 0 || terminalGrowthRate > 0.05) {\n      console.warn(`Terminal growth rate ${(terminalGrowthRate * 100).toFixed(2)}% is outside typical range (0-5%)`);\n    }\n\n    if (finalFCF <= 0) {\n      console.warn('Final year FCF is negative or zero, terminal value calculation may be unreliable');\n    }\n\n    // Multiple terminal value methods\n    const { method = 'gordon', exitMultiple = null, fadeToGrowth: _fadeToGrowth = false } = options;\n\n    switch (method) {\n      case 'gordon':\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n\n      case 'exit_multiple':\n        if (exitMultiple && finalFCF > 0) {\n          // Assume FCF approximates EBITDA for multiple calculation\n          return finalFCF * exitMultiple;\n        }\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n\n      case 'fade_to_growth': {\n        // Implement fade-to-growth model where high growth fades to long-term rate\n        const fadeYears = options.fadeYears || 5;\n        const longTermGrowth = options.longTermGrowth || 0.025;\n        let terminalValue = 0;\n\n        for (let year = 1; year <= fadeYears; year++) {\n          const fadeRate = terminalGrowthRate * Math.pow((fadeYears - year + 1) / fadeYears, 2) +\n                          longTermGrowth * Math.pow(year / fadeYears, 2);\n          const yearFCF = finalFCF * Math.pow(1 + fadeRate, year);\n          terminalValue += yearFCF / Math.pow(1 + discountRate, year);\n        }\n\n        // Add perpetual value after fade period\n        const finalFadeFCF = finalFCF * Math.pow(1 + longTermGrowth, fadeYears);\n        const perpetualValue = finalFadeFCF / (discountRate - longTermGrowth);\n        terminalValue += perpetualValue / Math.pow(1 + discountRate, fadeYears);\n\n        return terminalValue;\n      }\n\n      default:\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n    }\n  }\n\n  /**\n   * Calculate present value of cash flows\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {number} discountRate - Discount rate\n   * @param {number} startYear - Starting year for discounting\n   * @returns {number} Present value\n   */\n  calculatePresentValue(cashFlows, discountRate, startYear = 0) {\n    return cashFlows.reduce((pv, cf, index) => {\n      const year = startYear + index + 1;\n      return pv + cf / Math.pow(1 + discountRate, year);\n    }, 0);\n  }\n\n  /**\n   * Calculate comprehensive implied valuation multiples\n   * @param {number} enterpriseValue - Enterprise value\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Array} fcfProjections - Free cash flow projections\n   * @param {number} currentRevenue - Current year revenue\n   * @returns {Object} Comprehensive implied multiples\n   */\n  calculateImpliedMultiples(enterpriseValue, operatingProjections, fcfProjections = [], currentRevenue = 0) {\n    const currentYearEbitda = operatingProjections[0]?.ebitda || 0;\n    const nextYearEbitda = operatingProjections[1]?.ebitda || 0;\n    const currentYearEbit = operatingProjections[0]?.ebit || 0;\n    const nextYearEbit = operatingProjections[1]?.ebit || 0;\n    const nextYearRevenue = operatingProjections[1]?.revenue || 0;\n    const currentYearFCF = fcfProjections[0]?.unleveredFCF || 0;\n    const nextYearFCF = fcfProjections[1]?.unleveredFCF || 0;\n\n    return {\n      // Revenue multiples\n      evToCurrentRevenue: currentRevenue ? enterpriseValue / currentRevenue : null,\n      evToForwardRevenue: nextYearRevenue ? enterpriseValue / nextYearRevenue : null,\n\n      // EBITDA multiples\n      evToCurrentEbitda: currentYearEbitda ? enterpriseValue / currentYearEbitda : null,\n      evToForwardEbitda: nextYearEbitda ? enterpriseValue / nextYearEbitda : null,\n\n      // EBIT multiples\n      evToCurrentEbit: currentYearEbit ? enterpriseValue / currentYearEbit : null,\n      evToForwardEbit: nextYearEbit ? enterpriseValue / nextYearEbit : null,\n\n      // FCF multiples\n      evToCurrentFCF: currentYearFCF ? enterpriseValue / currentYearFCF : null,\n      evToForwardFCF: nextYearFCF ? enterpriseValue / nextYearFCF : null,\n\n      // PEG ratio approximation (P/E to Growth)\n      pegRatio: this.calculatePEGRatio(operatingProjections, enterpriseValue)\n    };\n  }\n\n  /**\n   * Calculate PEG ratio approximation\n   * @param {Array} operatingProjections - Operating projections\n   * @param {number} enterpriseValue - Enterprise value\n   * @returns {number} PEG ratio\n   */\n  calculatePEGRatio(operatingProjections, enterpriseValue) {\n    if (operatingProjections.length < 2) return null;\n\n    const currentEarnings = operatingProjections[0]?.nopat || 0;\n    const futureEarnings = operatingProjections[operatingProjections.length - 1]?.nopat || 0;\n\n    if (currentEarnings <= 0 || futureEarnings <= 0) return null;\n\n    const growthRate = Math.pow(futureEarnings / currentEarnings, 1 / (operatingProjections.length - 1)) - 1;\n    const peRatio = enterpriseValue / currentEarnings;\n\n    return growthRate > 0 ? peRatio / (growthRate * 100) : null;\n  }\n\n  /**\n   * Perform sensitivity analysis on key variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performDCFSensitivityAnalysis(inputs, baseAssumptions) {\n    const sensitivityVars = {\n      revenueGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      wacc: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      terminalGrowthRate: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      ebitdaMargin: [-0.02, -0.01, 0, 0.01, 0.02]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = {\n          ...baseAssumptions,\n          [variable]: (baseAssumptions[variable] || 0) + variation\n        };\n\n        try {\n          const scenario = this.calculateDCFScenario(inputs, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            pricePerShare: scenario.pricePerShare,\n            upside: scenario.upside\n          };\n        } catch (error) {\n          return {\n            variation,\n            pricePerShare: null,\n            upside: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate DCF model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Model summary\n   */\n  generateDCFSummary(baseCase, scenarios, currentPrice) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const pricesPerShare = allScenarios.map(s => s.pricePerShare).filter(p => p !== null);\n\n    return {\n      priceRange: {\n        min: Math.min(...pricesPerShare),\n        max: Math.max(...pricesPerShare),\n        average: pricesPerShare.reduce((sum, p) => sum + p, 0) / pricesPerShare.length\n      },\n      recommendation: this.generateRecommendation(baseCase, currentPrice),\n      keyMetrics: {\n        baseCase: {\n          pricePerShare: baseCase.pricePerShare,\n          upside: baseCase.upside,\n          enterpriseValue: baseCase.enterpriseValue\n        },\n        currentPrice,\n        impliedReturn: baseCase.upside\n      }\n    };\n  }\n\n  /**\n   * Generate investment recommendation\n   * @param {Object} baseCase - Base case DCF results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Investment recommendation\n   */\n  generateRecommendation(baseCase, currentPrice) {\n    if (!currentPrice || !baseCase.pricePerShare) {\n      return {\n        rating: 'INSUFFICIENT_DATA',\n        confidence: 0,\n        upside: null,\n        reasoning: 'Insufficient data for reliable recommendation.'\n      };\n    }\n\n    const upside = baseCase.upside;\n    let rating, confidence;\n\n    if (upside > 20) {\n      rating = 'STRONG_BUY';\n      confidence = Math.min(95, 70 + (upside - 20) * 1.25);\n    } else if (upside > 10) {\n      rating = 'BUY';\n      confidence = Math.min(85, 60 + (upside - 10) * 2);\n    } else if (upside > -10) {\n      rating = 'HOLD';\n      confidence = Math.min(75, 50 + Math.abs(upside) * 2.5);\n    } else if (upside > -20) {\n      rating = 'SELL';\n      confidence = Math.min(85, 60 + Math.abs(upside + 10) * 2);\n    } else {\n      rating = 'STRONG_SELL';\n      confidence = Math.min(95, 70 + Math.abs(upside + 20) * 1.25);\n    }\n\n    return {\n      rating,\n      confidence: Math.round(confidence),\n      upside,\n      reasoning: this.generateRecommendationReasoning(rating, upside)\n    };\n  }\n\n  /**\n   * Generate reasoning for investment recommendation\n   * @param {string} rating - Investment rating\n   * @param {number} upside - Upside percentage\n   * @returns {string} Recommendation reasoning\n   */\n  generateRecommendationReasoning(rating, upside) {\n    const upsideAbs = Math.abs(upside);\n\n    switch (rating) {\n      case 'STRONG_BUY':\n        return `Strong upside potential of ${upside.toFixed(1)}% suggests significant undervaluation based on DCF analysis.`;\n      case 'BUY':\n        return `Moderate upside of ${upside.toFixed(1)}% indicates the stock is undervalued relative to intrinsic value.`;\n      case 'HOLD':\n        return `Fair valuation with ${upside >= 0 ? 'limited upside' : 'modest downside'} of ${upsideAbs.toFixed(1)}%.`;\n      case 'SELL':\n        return `Downside risk of ${upsideAbs.toFixed(1)}% suggests the stock is overvalued based on fundamental analysis.`;\n      case 'STRONG_SELL':\n        return `Significant downside of ${upsideAbs.toFixed(1)}% indicates substantial overvaluation.`;\n      default:\n        return 'Insufficient data for reliable recommendation.';\n    }\n  }\n}\n\n// Export singleton instance\nexport const financialModelingEngine = new FinancialModelingEngine();\nexport default FinancialModelingEngine;\n","import axios from 'axios';\n\nimport { apiLogger } from '../utils/apiLogger.js';\n\nimport { financialModelingEngine } from './financialModelingEngine.js';\nimport { lboModelingEngine } from './lboModelingEngine.js';\nimport secureApiClient from './secureApiClient.js';\n\n// SECURITY NOTE: All API calls now route through secure backend proxy\n// No API keys are exposed in frontend code\n\n// Mock data sources configuration for fallback\nconst DATA_SOURCES = {\n  ALPHA_VANTAGE: {\n    baseURL: 'https://www.alphavantage.co/query',\n    apiKey: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY || 'demo'\n  },\n  FMP: {\n    baseURL: 'https://financialmodelingprep.com/api/v3',\n    apiKey: import.meta.env.VITE_FMP_API_KEY || 'demo'\n  },\n  SEC_EDGAR: {\n    baseURL: 'https://data.sec.gov',\n    apiKey: null\n  }\n};\n\n// Mock API key validator\nconst apiKeyValidator = {\n  validateAllKeys: async() => ({\n    valid: true,\n    recommendations: ['API keys validated successfully']\n  })\n};\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  ALPHA_VANTAGE: { requests: 5, period: 60000 }, // 5 requests per minute\n  FMP: { requests: 250, period: 86400000 }, // 250 requests per day\n  SEC_EDGAR: { requests: 10, period: 1000 } // 10 requests per second\n};\n\n// Advanced retry configuration\nconst RETRY_CONFIG = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second base delay\n  maxDelay: 30000, // 30 seconds max delay\n  exponentialBase: 2,\n  jitterFactor: 0.1, // 10% jitter\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT']\n};\n\n/**\n * Circuit breaker configuration\n */\nconst CIRCUIT_BREAKER_CONFIG = {\n  failureThreshold: 5, // Number of failures before opening circuit\n  recoveryTimeout: 30000, // 30 seconds before attempting to close circuit\n  monitoringPeriod: 60000, // 1 minute monitoring window\n  halfOpenMaxCalls: 3 // Max calls to test in half-open state\n};\n\n/**\n * Circuit breaker states\n */\nconst CIRCUIT_STATES = {\n  CLOSED: 'CLOSED', // Normal operation\n  OPEN: 'OPEN', // Circuit is open, failing fast\n  HALF_OPEN: 'HALF_OPEN' // Testing if service has recovered\n};\n\n/**\n * Circuit breaker implementation to prevent cascading failures\n */\nclass CircuitBreaker {\n  constructor(name, config = CIRCUIT_BREAKER_CONFIG) {\n    this.name = name;\n    this.config = { ...CIRCUIT_BREAKER_CONFIG, ...config };\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.halfOpenCallCount = 0;\n    this.successCount = 0;\n    this.totalCalls = 0;\n  }\n\n  /**\n   * Check if circuit breaker allows the call\n   * @returns {boolean} Whether the call is allowed\n   */\n  canExecute() {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        return true;\n\n      case CIRCUIT_STATES.OPEN:\n        // Check if recovery timeout has passed\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.state = CIRCUIT_STATES.HALF_OPEN;\n          this.halfOpenCallCount = 0;\n          console.log(`🔄 Circuit breaker ${this.name} transitioning to HALF_OPEN`);\n          return true;\n        }\n        return false;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        return this.halfOpenCallCount < this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Record a successful call\n   */\n  recordSuccess() {\n    this.successCount++;\n    this.totalCalls++;\n\n    switch (this.state) {\n      case CIRCUIT_STATES.HALF_OPEN:\n        this.halfOpenCallCount++;\n        // If we've successfully completed enough calls in half-open, close the circuit\n        if (this.halfOpenCallCount >= this.config.halfOpenMaxCalls) {\n          this.state = CIRCUIT_STATES.CLOSED;\n          this.failureCount = 0;\n          this.halfOpenCallCount = 0;\n          console.log(`✅ Circuit breaker ${this.name} closed - service recovered`);\n        }\n        break;\n\n      case CIRCUIT_STATES.CLOSED:\n        // Reset failure count on success\n        this.failureCount = 0;\n        break;\n    }\n  }\n\n  /**\n   * Record a failed call\n   */\n  recordFailure() {\n    this.failureCount++;\n    this.totalCalls++;\n    this.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        if (this.failureCount >= this.config.failureThreshold) {\n          this.state = CIRCUIT_STATES.OPEN;\n          console.warn(\n            `🚨 Circuit breaker ${this.name} opened - too many failures (${this.failureCount})`\n          );\n        }\n        break;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        // Any failure in half-open state reopens the circuit\n        this.state = CIRCUIT_STATES.OPEN;\n        this.halfOpenCallCount = 0;\n        console.warn(`🚨 Circuit breaker ${this.name} reopened - failure during recovery test`);\n        break;\n    }\n  }\n\n  /**\n   * Get circuit breaker status\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls: this.totalCalls,\n      failureRate: this.totalCalls > 0 ? this.failureCount / this.totalCalls : 0,\n      lastFailureTime: this.lastFailureTime,\n      isOpen: this.state === CIRCUIT_STATES.OPEN,\n      nextRetryTime:\n        this.state === CIRCUIT_STATES.OPEN\n          ? this.lastFailureTime + this.config.recoveryTimeout\n          : null\n    };\n  }\n\n  /**\n   * Execute function with circuit breaker protection\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    if (!this.canExecute()) {\n      const error = new Error(`Circuit breaker ${this.name} is OPEN - failing fast`);\n      error.circuitBreakerOpen = true;\n      throw error;\n    }\n\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (error) {\n      this.recordFailure();\n      throw error;\n    }\n  }\n}\n\n/**\n * Advanced retry utility with exponential backoff and jitter\n */\nclass _RetryManager {\n  constructor(config = RETRY_CONFIG) {\n    this.config = { ...RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Calculate delay with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    const exponentialDelay = this.config.baseDelay * Math.pow(this.config.exponentialBase, attempt);\n    const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n    const delay = exponentialDelay + jitter;\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  /**\n   * Check if error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error is retryable\n   */\n  isRetryableError(error) {\n    // Check for network errors\n    if (error.code && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    // Check for HTTP status codes\n    if (\n      error.response?.status &&\n      this.config.retryableStatusCodes.includes(error.response.status)\n    ) {\n      return true;\n    }\n\n    // Check for timeout errors\n    if (error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute function with retry logic\n   * @param {Function} fn - Async function to execute\n   * @param {string} operation - Operation name for logging\n   * @returns {Promise} Result of the function\n   */\n  async executeWithRetry(fn, operation = 'API call') {\n    let lastError;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const result = await fn();\n\n        // Log successful retry if this wasn't the first attempt\n        if (attempt > 0) {\n          console.log(`✅ ${operation} succeeded on attempt ${attempt + 1}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error)) {\n          console.warn(`❌ ${operation} failed with non-retryable error:`, error.message);\n          throw error;\n        }\n\n        const delay = this.calculateDelay(attempt);\n        console.warn(\n          `⚠️ ${operation} failed (attempt ${attempt + 1}/${this.config.maxRetries + 1}), retrying in ${delay}ms:`,\n          error.message\n        );\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    // All retries exhausted\n    console.error(\n      `❌ ${operation} failed after ${this.config.maxRetries + 1} attempts:`,\n      lastError.message\n    );\n    throw lastError;\n  }\n}\n\nclass DataFetchingService {\n  constructor() {\n    this.cache = new Map();\n    this.cacheExpiry = new Map();\n    this.logger = apiLogger;\n    this.client = secureApiClient;\n\n    // Log service initialization\n    this.logger.log('INFO', '🚀 DataFetchingService initialized (using secure backend proxy)');\n  }\n\n  initializeCircuitBreakers(config) {\n    const circuitBreakers = {};\n    const sources = ['ALPHA_VANTAGE', 'FMP', 'SEC_EDGAR', 'YAHOO_FINANCE'];\n\n    sources.forEach(source => {\n      circuitBreakers[source] = new CircuitBreaker(source, config);\n    });\n\n    return circuitBreakers;\n  }\n\n  initializeRateLimiters() {\n    const rateLimits = this.customRateLimits || RATE_LIMITS;\n    Object.keys(rateLimits).forEach(source => {\n      this.rateLimiters[source] = {\n        requests: [],\n        limit: rateLimits[source].requests,\n        period: rateLimits[source].period\n      };\n    });\n  }\n\n  async checkRateLimit(source) {\n    const limiter = this.rateLimiters[source];\n    if (!limiter) return true;\n\n    const now = Date.now();\n    limiter.requests = limiter.requests.filter(time => now - time < limiter.period);\n\n    if (limiter.requests.length >= limiter.limit) {\n      const oldestRequest = Math.min(...limiter.requests);\n      const waitTime = limiter.period - (now - oldestRequest);\n\n      // Log rate limiting event\n      this.logger.logRateLimit(source, waitTime, limiter.limit - limiter.requests.length);\n\n      throw new Error(\n        `Rate limit exceeded for ${source}. Please wait ${Math.ceil(waitTime / 1000)} seconds.`\n      );\n    }\n\n    limiter.requests.push(now);\n    return true;\n  }\n\n  getCacheKey(method, params) {\n    return `${method}_${JSON.stringify(params)}`;\n  }\n\n  getFromCache(key) {\n    const expiry = this.cacheExpiry.get(key);\n    if (expiry && Date.now() > expiry) {\n      this.cache.delete(key);\n      this.cacheExpiry.delete(key);\n      this.logger.logCache('miss', key, { reason: 'expired' });\n      return null;\n    }\n    const cached = this.cache.get(key);\n    if (cached !== undefined) {\n      this.logger.logCache('hit', key, { size: JSON.stringify(cached).length });\n      return cached;\n    }\n    this.logger.logCache('miss', key, { reason: 'not_found' });\n    return null;\n  }\n\n  setCache(key, data, ttlMinutes = 60) {\n    this.cache.set(key, data);\n    this.cacheExpiry.set(key, Date.now() + ttlMinutes * 60 * 1000);\n    this.logger.logCache('set', key, {\n      ttlMinutes,\n      size: JSON.stringify(data).length,\n      expiresAt: new Date(Date.now() + ttlMinutes * 60 * 1000).toISOString()\n    });\n  }\n\n  generateMockData(ticker, dataType) {\n    // Generate realistic mock data for demo purposes\n    const basePrice = 100 + Math.random() * 200;\n    const marketCap = 1000000000 + Math.random() * 10000000000;\n\n    // Map common tickers to realistic company names\n    const companyNames = {\n      AAPL: 'Apple Inc.',\n      MSFT: 'Microsoft Corporation',\n      GOOGL: 'Alphabet Inc.',\n      AMZN: 'Amazon.com Inc.',\n      META: 'Meta Platforms Inc.',\n      TSLA: 'Tesla Inc.',\n      NVDA: 'NVIDIA Corporation'\n    };\n\n    switch (dataType) {\n      case 'profile':\n        return {\n          symbol: ticker,\n          companyName: companyNames[ticker] || `${ticker} Corporation`,\n          mktCap: marketCap,\n          pe: 15 + Math.random() * 20,\n          pb: 1 + Math.random() * 4,\n          beta: 0.8 + Math.random() * 0.8,\n          sector: 'Technology',\n          industry: 'Software',\n          sharesOutstanding: marketCap / basePrice,\n          enterpriseValueOverEBITDA: 10 + Math.random() * 15,\n          debtToEquity: Math.random() * 2,\n          revenueTTM: marketCap * 0.8,\n          grossProfitMargin: 0.3 + Math.random() * 0.4,\n          netProfitMargin: 0.1 + Math.random() * 0.2,\n          returnOnEquityTTM: 0.1 + Math.random() * 0.2,\n          returnOnAssetsTTM: 0.05 + Math.random() * 0.15,\n          effectiveTaxRateTTM: 0.21,\n          fullTimeEmployees: 1000 + Math.random() * 50000,\n          ipoDate: '2010-01-01',\n          range: `$${(basePrice * 0.8).toFixed(2)} - $${(basePrice * 1.3).toFixed(2)}`\n        };\n\n      case 'marketData':\n        return {\n          symbol: ticker,\n          currentPrice: basePrice,\n          previousClose: basePrice * (0.98 + Math.random() * 0.04),\n          marketCap,\n          volume: 1000000 + Math.random() * 5000000,\n          currency: 'USD'\n        };\n\n      case 'incomeStatement':\n      case 'income': {\n        const revenue = marketCap * 0.8;\n        return [\n          {\n            revenue,\n            ebitda: revenue * 0.25,\n            netIncome: revenue * 0.15,\n            capex: revenue * 0.05,\n            interestExpense: revenue * 0.02,\n            grossProfitMargin: 0.6\n          }\n        ];\n      }\n\n      case 'balanceSheet':\n        return [\n          {\n            totalDebt: marketCap * 0.3,\n            cashAndCashEquivalents: marketCap * 0.1,\n            totalCurrentAssets: marketCap * 0.4,\n            totalCurrentLiabilities: marketCap * 0.2\n          }\n        ];\n\n      case 'cashFlow':\n        return [\n          {\n            freeCashFlow: marketCap * 0.12\n          }\n        ];\n\n      default:\n        return null;\n    }\n  }\n\n  async fetchCompanyProfile(ticker) {\n    const cacheKey = this.getCacheKey('profile', { ticker });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const profile = await this.client.getCompanyProfile(ticker);\n      this.setCache(cacheKey, profile, 1440); // Cache for 24 hours\n      return profile;\n    } catch (error) {\n      this.logger.log('ERROR', `Failed to fetch company profile for ${ticker}`, { error: error.message });\n      throw new Error(`Failed to fetch company profile: ${error.message}`);\n    }\n  }\n\n  async fetchFinancialStatements(\n    ticker,\n    statement = 'income-statement',\n    period = 'annual',\n    limit = 5\n  ) {\n    const cacheKey = this.getCacheKey('financials', { ticker, statement, period, limit });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const data = await this.client.fetchFinancialStatements(ticker, statement, period, limit);\n      this.setCache(cacheKey, data, 360); // Cache for 6 hours\n      return data;\n    } catch (error) {\n      this.logger.log('ERROR', `Failed to fetch ${statement} for ${ticker}`, { error: error.message });\n      throw new Error(`Failed to fetch ${statement}: ${error.message}`);\n    }\n  }\n\n  async fetchMarketData(ticker, range = '1y') {\n    const cacheKey = this.getCacheKey('market', { ticker, range });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const data = await this.client.fetchMarketData(ticker, range);\n      this.setCache(cacheKey, data, 15); // Cache for 15 minutes\n      return data;\n    } catch (error) {\n      this.logger.log('ERROR', `Failed to fetch market data for ${ticker}`, { error: error.message });\n      throw new Error(`Failed to fetch market data: ${error.message}`);\n    }\n  }\n\n  async fetchMarketDataAlternative(ticker) {\n    if (this.demoMode) {\n      const mockData = this.generateMockData(ticker, 'marketData');\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('ALPHA_VANTAGE');\n\n        const response = await axios.get(DATA_SOURCES.ALPHA_VANTAGE.baseURL, {\n          params: {\n            function: 'GLOBAL_QUOTE',\n            symbol: ticker,\n            apikey: DATA_SOURCES.ALPHA_VANTAGE.apiKey\n          },\n          timeout: 10000\n        });\n\n        const quote = response.data['Global Quote'];\n        if (!quote || Object.keys(quote).length === 0) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        return {\n          symbol: quote['01. symbol'],\n          currentPrice: parseFloat(quote['05. price']),\n          previousClose: parseFloat(quote['08. previous close']),\n          volume: parseInt(quote['06. volume']),\n          change: parseFloat(quote['09. change']),\n          changePercent: quote['10. change percent']\n        };\n      }, `Alternative market data fetch for ${ticker}`);\n    } catch (error) {\n      console.warn('Alternative market data API failed:', error.message);\n      return this.generateMockData(ticker, 'marketData');\n    }\n  }\n\n  async fetchSECFilings(ticker, filingType = '10-K', count = 5) {\n    const cacheKey = this.getCacheKey('sec', { ticker, filingType, count });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('SEC filings not available in demo mode');\n        return [\n          {\n            form: filingType,\n            filingDate: '2023-12-31',\n            accessionNumber: '0000000000-00-000000',\n            reportDate: '2023-12-31',\n            acceptanceDateTime: '2024-01-15T16:30:00',\n            act: '34',\n            primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n            url: '#demo-filing'\n          }\n        ];\n      }\n\n      await this.checkRateLimit('SEC_EDGAR');\n\n      // This would need proper CIK lookup implementation\n      // For now, return demo data\n      return [\n        {\n          form: filingType,\n          filingDate: '2023-12-31',\n          accessionNumber: '0000000000-00-000000',\n          reportDate: '2023-12-31',\n          acceptanceDateTime: '2024-01-15T16:30:00',\n          act: '34',\n          primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n          url: '#demo-filing'\n        }\n      ];\n    } catch (error) {\n      throw new Error(`Failed to fetch SEC filings: ${error.message}`);\n    }\n  }\n\n  async fetchPeerComparables(ticker, industryCode = null) {\n    const cacheKey = this.getCacheKey('peers', { ticker, industryCode });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const peers = await this.client.fetchPeerComparables(ticker);\n      this.setCache(cacheKey, peers, 240); // Cache for 4 hours\n      return peers;\n    } catch (error) {\n      this.logger.log('ERROR', `Failed to fetch peer comparables for ${ticker}`, { error: error.message });\n      throw new Error(`Failed to fetch peer comparables: ${error.message}`);\n    }\n  }\n\n  async fetchDCFInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, cashFlows, marketData] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'cash-flow-statement', 'annual', 5),\n        this.fetchMarketData(ticker)\n      ]);\n\n      // Calculate historical growth rates\n      const revenues = Array.isArray(incomeStatements)\n        ? incomeStatements.map(stmt => stmt.revenue).reverse()\n        : [incomeStatements.revenue];\n      const revenueGrowthRates = [];\n      for (let i = 1; i < revenues.length; i++) {\n        if (revenues[i - 1] && revenues[i]) {\n          revenueGrowthRates.push((revenues[i] - revenues[i - 1]) / revenues[i - 1]);\n        }\n      }\n      const avgRevenueGrowth =\n        revenueGrowthRates.length > 0\n          ? revenueGrowthRates.reduce((a, b) => a + b, 0) / revenueGrowthRates.length\n          : 0.05; // Default 5% growth\n\n      // Calculate free cash flow margin\n      const latestCashFlow = Array.isArray(cashFlows) ? cashFlows[0] : cashFlows;\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const fcfMargin = latestCashFlow.freeCashFlow / latestIncome.revenue;\n\n      // Estimate WACC components\n      const riskFreeRate = 0.045; // 4.5% - this should come from treasury rates API\n      const marketPremium = 0.065; // 6.5% historical market premium\n      const beta = profile.beta || 1.0;\n      const costOfEquity = riskFreeRate + beta * marketPremium;\n\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n      const totalDebt = latestBalance.totalDebt || 0;\n      const marketCap = marketData.marketCap || marketData.currentPrice * profile.sharesOutstanding;\n      const debtRatio = totalDebt / (totalDebt + marketCap);\n      const taxRate = profile.effectiveTaxRateTTM || 0.21;\n\n      const wacc = costOfEquity * (1 - debtRatio) + 0.04 * debtRatio * (1 - taxRate); // Assuming 4% cost of debt\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentRevenue: latestIncome.revenue,\n        revenueGrowthRate: avgRevenueGrowth,\n        fcfMargin,\n        wacc,\n        terminalGrowthRate: 0.025, // 2.5% long-term GDP growth assumption\n        currentPrice: marketData.currentPrice,\n        sharesOutstanding: profile.sharesOutstanding,\n        marketCap,\n        totalDebt,\n        cash: latestBalance.cashAndCashEquivalents || 0,\n        beta,\n        peRatio: profile.pe,\n        historicalData: {\n          revenues,\n          revenueGrowthRates,\n          freeCashFlows: Array.isArray(cashFlows)\n            ? cashFlows.map(cf => cf.freeCashFlow).reverse()\n            : [latestCashFlow.freeCashFlow],\n          margins: Array.isArray(incomeStatements)\n            ? incomeStatements.map(stmt => stmt.grossProfitMargin).reverse()\n            : [latestIncome.grossProfitMargin]\n        }\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch DCF inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async fetchLBOInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, marketData, peers] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 3),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 3),\n        this.fetchMarketData(ticker),\n        this.fetchPeerComparison(ticker)\n      ]);\n\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n\n      // Calculate key LBO metrics\n      const ebitda = latestIncome.ebitda;\n      const currentEV =\n        marketData.marketCap + latestBalance.totalDebt - latestBalance.cashAndCashEquivalents;\n      const evEbitdaMultiple = currentEV / ebitda;\n\n      // Peer multiples for exit assumptions\n      const peerEvEbitdaMultiples = peers\n        .filter(peer => peer.evToEbitda && peer.evToEbitda > 0)\n        .map(peer => peer.evToEbitda);\n      const avgPeerMultiple =\n        peerEvEbitdaMultiples.length > 0\n          ? peerEvEbitdaMultiples.reduce((a, b) => a + b, 0) / peerEvEbitdaMultiples.length\n          : evEbitdaMultiple;\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentPrice: marketData.currentPrice,\n        marketCap: marketData.marketCap,\n        enterpriseValue: currentEV,\n        ebitda,\n        evEbitdaMultiple,\n        revenue: latestIncome.revenue,\n        netIncome: latestIncome.netIncome,\n        totalDebt: latestBalance.totalDebt,\n        cash: latestBalance.cashAndCashEquivalents,\n        workingCapital: latestBalance.totalCurrentAssets - latestBalance.totalCurrentLiabilities,\n        capex: Math.abs(latestIncome.capex || 0),\n        debtToEbitda: latestBalance.totalDebt / ebitda,\n        interestCoverage: ebitda / (latestIncome.interestExpense || 1),\n        avgPeerMultiple,\n        suggestedPurchasePrice: ebitda * avgPeerMultiple,\n        maxDebtCapacity: ebitda * 6, // 6x EBITDA debt capacity assumption\n        sharesOutstanding: profile.sharesOutstanding\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch LBO inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async validateTicker(ticker) {\n    try {\n      // In demo mode, only validate known tickers\n      if (this.demoMode) {\n        const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA'];\n        return knownTickers.includes(ticker);\n      }\n\n      await this.fetchCompanyProfile(ticker);\n      return true;\n    } catch (error) {\n      console.warn('Ticker validation failed:', error.message);\n      return false;\n    }\n  }\n\n  // Add method to check API status\n  async getApiStatus() {\n    const validationResults = await apiKeyValidator.validateAllKeys();\n    const metrics = this.logger.getMetrics();\n\n    return {\n      demoMode: this.demoMode,\n      cacheSize: this.cache.size,\n      validation: validationResults,\n      circuitBreakers: this.getCircuitBreakerStatus(),\n      metrics,\n      performance: {\n        uptime: metrics.uptime,\n        totalRequests: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.requests?.total || 0),\n          0\n        ),\n        totalErrors: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.error?.total || 0),\n          0\n        ),\n        averageResponseTime: this.calculateAverageResponseTime(metrics.services),\n        cacheHitRate: this.calculateCacheHitRate(metrics.cache)\n      },\n      availableKeys: {\n        alphaVantage: !!(\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY &&\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo'\n        ),\n        fmp: !!(import.meta.env.VITE_FMP_API_KEY && import.meta.env.VITE_FMP_API_KEY !== 'demo'),\n        quandl: !!(\n          import.meta.env.VITE_QUANDL_API_KEY && import.meta.env.VITE_QUANDL_API_KEY !== 'demo'\n        ),\n        fred: !!(import.meta.env.VITE_FRED_API_KEY && import.meta.env.VITE_FRED_API_KEY !== 'demo')\n      },\n      recommendations: validationResults.recommendations\n    };\n  }\n\n  // Get circuit breaker status for all services\n  getCircuitBreakerStatus() {\n    const status = {};\n    Object.keys(this.circuitBreakers).forEach(service => {\n      status[service] = this.circuitBreakers[service].getStatus();\n    });\n    return status;\n  }\n\n  // Calculate average response time across all services\n  calculateAverageResponseTime(services) {\n    let totalDuration = 0;\n    let totalRequests = 0;\n\n    Object.values(services).forEach(service => {\n      if (service.duration) {\n        totalDuration += service.duration.total;\n        totalRequests += service.duration.count;\n      }\n    });\n\n    return totalRequests > 0 ? Math.round(totalDuration / totalRequests) : 0;\n  }\n\n  // Calculate cache hit rate\n  calculateCacheHitRate(cache) {\n    const hits = cache.hit?.total || 0;\n    const misses = cache.miss?.total || 0;\n    const total = hits + misses;\n\n    return total > 0 ? Math.round((hits / total) * 100) : 0;\n  }\n\n  // Get recent logs for debugging\n  getRecentLogs(limit = 50, level = null) {\n    return this.logger.getRecentLogs(limit, level);\n  }\n\n  // Clear all metrics and logs\n  clearMetrics() {\n    this.logger.clear();\n  }\n\n  // Add method to validate API keys on demand\n  async validateApiKeys() {\n    return await apiKeyValidator.validateAllKeys();\n  }\n\n  /**\n   * Build comprehensive DCF model with advanced scenarios\n   * @param {string} symbol - Stock symbol\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete DCF analysis\n   */\n  async buildAdvancedDCFModel(symbol, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol)\n      ]);\n\n      // Prepare DCF inputs\n      const dcfInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        currentRevenue: financials.revenue || 0,\n        currentPrice: marketData.price || 0,\n        sharesOutstanding: profile.sharesOutstanding || 0,\n        totalDebt: profile.totalDebt || 0,\n        cash: profile.cash || 0,\n        historicalGrowthRates: this.calculateHistoricalGrowthRates(financials),\n        margins: {\n          ebitdaMargin: (financials.ebitda || 0) / (financials.revenue || 1)\n        },\n        balanceSheetData: financials,\n        marketData,\n        assumptions: {\n          ...assumptions,\n          wacc: assumptions.wacc || this.calculateWACC(profile, marketData),\n          revenueGrowthRate: assumptions.revenueGrowthRate || this.estimateGrowthRate(financials)\n        }\n      };\n\n      // Build comprehensive DCF model\n      const dcfModel = financialModelingEngine.buildDCFModel(dcfInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced DCF model built for ${symbol}`, {\n        baseCase: dcfModel.baseCase.pricePerShare,\n        scenarios: Object.keys(dcfModel.scenarios).length\n      });\n\n      return dcfModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build DCF model for ${symbol}`, { error: error.message });\n      throw new Error(`DCF modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {string} symbol - Stock symbol\n   * @param {Object} transactionInputs - Transaction parameters\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete LBO analysis\n   */\n  async buildAdvancedLBOModel(symbol, transactionInputs, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, _financials, marketData, peerData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol),\n        this.fetchPeerComparison(symbol)\n      ]);\n\n      // Prepare LBO inputs\n      const lboInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        purchasePrice: transactionInputs.purchasePrice || marketData.marketCap,\n        ebitda: _financials.ebitda || 0,\n        revenue: _financials.revenue || 0,\n        marketData,\n        peerData,\n        assumptions: {\n          ...assumptions,\n          exit: {\n            ...assumptions.exit,\n            exitMultiple: assumptions.exit?.exitMultiple || this.calculatePeerAverageMultiple(peerData)\n          }\n        }\n      };\n\n      // Build comprehensive LBO model\n      const lboModel = lboModelingEngine.buildLBOModel(lboInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced LBO model built for ${symbol}`, {\n        baseCase: lboModel.baseCase.returnsAnalysis.irr,\n        scenarios: Object.keys(lboModel.scenarios).length\n      });\n\n      return lboModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build LBO model for ${symbol}`, { error: error.message });\n      throw new Error(`LBO modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate historical growth rates from financial data\n   * @param {Object} financials - Financial statements data\n   * @returns {Array} Historical growth rates\n   */\n  calculateHistoricalGrowthRates(_financials) {\n    return [];\n  }\n\n  async fetchPeerComparison(_symbol) {\n    // Mock implementation for peer comparison\n    return [];\n  }\n\n  calculatePeerAverageMultiple(_peerData) {\n    // Mock implementation for calculating peer average multiple\n    return 10; // Default EV/EBITDA multiple\n  }\n\n  /**\n   * Estimate growth rate based on historical data\n   * @param {Object} financials - Financial statements data\n   * @returns {number} Estimated growth rate\n   */\n  estimateGrowthRate(_financials) {\n    // Simplified growth rate estimation\n    // In practice, this would analyze multiple years of data\n    return 0.10; // 10% default growth rate\n  }\n\n}\n\n// Export singleton instance\nexport const dataFetchingService = new DataFetchingService();\nexport default DataFetchingService;\n","/**\n * Portfolio & Risk Management Commands\n * Portfolio analysis, risk metrics, and optimization commands\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const portfolioCommands = {\n  PORTFOLIO: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [tickers, weights] = parsedCommand.parameters;\n\n      if (!tickers || !weights) {\n        return {\n          type: 'error',\n          content: 'PORTFOLIO command requires tickers and weights. Usage: PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])'\n        };\n      }\n\n      try {\n        const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n        const weightArray = Array.isArray(weights) ? weights : [weights];\n\n        if (tickerArray.length !== weightArray.length) {\n          return {\n            type: 'error',\n            content: 'Number of tickers must match number of weights'\n          };\n        }\n\n        const totalWeight = weightArray.reduce((sum, w) => sum + w, 0);\n        if (Math.abs(totalWeight - 1.0) > 0.01) {\n          return {\n            type: 'error',\n            content: `Weights must sum to 1.0 (currently sum to ${totalWeight})`\n          };\n        }\n\n        // Fetch data for all tickers\n        const portfolioData = await Promise.all(\n          tickerArray.map(async(ticker, index) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              weight: weightArray[index],\n              price: profile.price,\n              marketCap: profile.mktCap,\n              beta: profile.beta || 1.0,\n              pe: profile.pe,\n              dividendYield: profile.dividendYield || 0\n            };\n          })\n        );\n\n        // Calculate portfolio metrics\n        const portfolioValue = portfolioData.reduce((sum, stock) => sum + (stock.marketCap * stock.weight), 0);\n        const weightedBeta = portfolioData.reduce((sum, stock) => sum + (stock.beta * stock.weight), 0);\n        const weightedPE = portfolioData.reduce((sum, stock) => sum + (stock.pe * stock.weight), 0);\n        const weightedDividendYield = portfolioData.reduce((sum, stock) => sum + (stock.dividendYield * stock.weight), 0);\n\n        // Calculate diversification metrics\n        const maxWeight = Math.max(...weightArray);\n        const minWeight = Math.min(...weightArray);\n        const concentrationRatio = maxWeight / minWeight;\n\n        const content = `Portfolio Analysis\\n\\n📊 PORTFOLIO COMPOSITION:\\n${portfolioData.map(stock =>\n          `• ${stock.ticker} (${stock.name}): ${formatPercentage(stock.weight)} - ${formatCurrency(stock.price)}`\n        ).join('\\n')}\\n\\n📈 PORTFOLIO METRICS:\\n• Total Portfolio Value: ${formatCurrency(portfolioValue, 'USD', true)}\\n• Weighted Beta: ${formatNumber(weightedBeta, 2)}\\n• Weighted P/E: ${formatNumber(weightedPE, 1)}x\\n• Weighted Dividend Yield: ${formatPercentage(weightedDividendYield)}\\n\\n🎯 DIVERSIFICATION:\\n• Number of Holdings: ${tickerArray.length}\\n• Max Position: ${formatPercentage(maxWeight)}\\n• Min Position: ${formatPercentage(minWeight)}\\n• Concentration Ratio: ${formatNumber(concentrationRatio, 1)}\\n\\n⚖️ RISK PROFILE:\\n• Portfolio Beta: ${weightedBeta > 1.2 ? 'High Risk' : weightedBeta > 0.8 ? 'Moderate Risk' : 'Low Risk'}\\n• Diversification: ${tickerArray.length >= 10 ? 'Well Diversified' : tickerArray.length >= 5 ? 'Moderately Diversified' : 'Concentrated'}\\n• Concentration Risk: ${maxWeight > 0.3 ? 'High' : maxWeight > 0.2 ? 'Moderate' : 'Low'}\\n\\n💡 RECOMMENDATIONS:\\n${maxWeight > 0.4 ? '• Consider reducing concentration in largest position\\n' : ''}${tickerArray.length < 5 ? '• Consider adding more holdings for diversification\\n' : ''}${weightedBeta > 1.5 ? '• Portfolio has high market risk exposure\\n' : ''}${weightedDividendYield < 0.02 ? '• Consider adding dividend-paying stocks for income\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'portfolio',\n            holdings: portfolioData,\n            metrics: {\n              portfolioValue,\n              weightedBeta,\n              weightedPE,\n              weightedDividendYield,\n              concentrationRatio\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Portfolio analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  },\n\n  RISK_METRICS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RISK_METRICS command requires a ticker symbol. Usage: RISK_METRICS(AAPL, 252)'\n        };\n      }\n\n      try {\n        // Fetch historical data and calculate risk metrics\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _marketData = await dataFetchingService.fetchMarketData(ticker);\n\n        // Mock risk calculations (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16; // Approximate volatility based on beta\n        const sharpeRatio = (0.08 - 0.02) / volatility; // Assuming 8% return, 2% risk-free rate\n        const var95 = volatility * 1.645; // 95% VaR\n        const var99 = volatility * 2.326; // 99% VaR\n        const maxDrawdown = volatility * 2.5; // Estimated max drawdown\n        const sortinoRatio = sharpeRatio * 1.2; // Sortino typically higher than Sharpe\n\n        const content = `Risk Metrics for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 VOLATILITY MEASURES:\\n• Annualized Volatility: ${formatPercentage(volatility)}\\n• Beta (vs S&P 500): ${formatNumber(profile.beta, 2)}\\n• Standard Deviation: ${formatPercentage(volatility)}\\n\\n⚠️ VALUE AT RISK (VaR):\\n• 1-Day VaR (95%): ${formatPercentage(var95 / Math.sqrt(252))}\\n• 1-Day VaR (99%): ${formatPercentage(var99 / Math.sqrt(252))}\\n• 1-Month VaR (95%): ${formatPercentage(var95 / Math.sqrt(12))}\\n• 1-Year VaR (95%): ${formatPercentage(var95)}\\n\\n📈 RISK-ADJUSTED RETURNS:\\n• Sharpe Ratio: ${formatNumber(sharpeRatio, 2)}\\n• Sortino Ratio: ${formatNumber(sortinoRatio, 2)}\\n• Information Ratio: ${formatNumber(sharpeRatio * 0.8, 2)}\\n• Treynor Ratio: ${formatNumber((0.08 - 0.02) / profile.beta, 3)}\\n\\n📉 DOWNSIDE RISK:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Downside Deviation: ${formatPercentage(volatility * 0.7)}\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)}\\n\\n🎯 RISK ASSESSMENT:\\n• Risk Level: ${volatility > 0.3 ? 'High' : volatility > 0.2 ? 'Moderate' : 'Low'}\\n• Sharpe Quality: ${sharpeRatio > 1.0 ? 'Excellent' : sharpeRatio > 0.5 ? 'Good' : 'Poor'}\\n• Beta Classification: ${profile.beta > 1.2 ? 'Aggressive' : profile.beta > 0.8 ? 'Market' : 'Defensive'}\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated risk metrics. Configure API keys for historical data.' : '✅ Based on historical market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'risk_metrics',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              volatility,\n              beta: profile.beta,\n              sharpeRatio,\n              sortinoRatio,\n              var95,\n              var99,\n              maxDrawdown\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Risk metrics calculation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  },\n\n  CORRELATION_MATRIX: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [tickers] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'CORRELATION_MATRIX command requires an array of tickers. Usage: CORRELATION_MATRIX([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Correlation matrix requires at least 2 tickers'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async(ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              beta: profile.beta || 1.0,\n              sector: profile.sector\n            };\n          })\n        );\n\n        // Generate mock correlation matrix (in real implementation, would use historical returns)\n        const correlationMatrix = {};\n        for (let i = 0; i < stockData.length; i++) {\n          correlationMatrix[stockData[i].ticker] = {};\n          for (let j = 0; j < stockData.length; j++) {\n            if (i === j) {\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = 1.0;\n            } else {\n              // Mock correlation based on sector similarity and beta similarity\n              const sectorCorr = stockData[i].sector === stockData[j].sector ? 0.3 : 0.1;\n              const betaCorr = 1 - Math.abs(stockData[i].beta - stockData[j].beta) * 0.2;\n              const correlation = Math.min(0.95, Math.max(-0.5, sectorCorr + betaCorr * 0.4 + (Math.random() - 0.5) * 0.3));\n              correlationMatrix[stockData[i].ticker][stockData[j].ticker] = correlation;\n            }\n          }\n        }\n\n        // Calculate average correlations\n        let totalCorr = 0;\n        let count = 0;\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            totalCorr += correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            count++;\n          }\n        }\n        const avgCorrelation = totalCorr / count;\n\n        // Find highest and lowest correlations\n        let maxCorr = -1, minCorr = 1;\n        let maxPair = '', minPair = '';\n        for (let i = 0; i < stockData.length; i++) {\n          for (let j = i + 1; j < stockData.length; j++) {\n            const corr = correlationMatrix[stockData[i].ticker][stockData[j].ticker];\n            if (corr > maxCorr) {\n              maxCorr = corr;\n              maxPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n            if (corr < minCorr) {\n              minCorr = corr;\n              minPair = `${stockData[i].ticker}-${stockData[j].ticker}`;\n            }\n          }\n        }\n\n        const matrixDisplay = stockData.map(stock =>\n          `${stock.ticker.padEnd(6)} ${stockData.map(s =>\n            formatNumber(correlationMatrix[stock.ticker][s.ticker], 2).padStart(6)\n          ).join(' ')}`\n        ).join('\\n');\n\n        const content = `Correlation Matrix Analysis\\n\\n📊 CORRELATION MATRIX:\\n       ${stockData.map(s => s.ticker.padStart(6)).join(' ')}\\n${matrixDisplay}\\n\\n📈 CORRELATION STATISTICS:\\n• Average Correlation: ${formatNumber(avgCorrelation, 3)}\\n• Highest Correlation: ${formatNumber(maxCorr, 3)} (${maxPair})\\n• Lowest Correlation: ${formatNumber(minCorr, 3)} (${minPair})\\n\\n🎯 DIVERSIFICATION ANALYSIS:\\n• Portfolio Diversification: ${avgCorrelation < 0.3 ? 'Excellent' : avgCorrelation < 0.5 ? 'Good' : avgCorrelation < 0.7 ? 'Moderate' : 'Poor'}\\n• Risk Reduction Benefit: ${formatPercentage(1 - avgCorrelation)}\\n• Concentration Risk: ${maxCorr > 0.8 ? 'High' : maxCorr > 0.6 ? 'Moderate' : 'Low'}\\n\\n🏢 SECTOR BREAKDOWN:\\n${stockData.map(stock => `• ${stock.ticker}: ${stock.sector}`).join('\\n')}\\n\\n💡 INSIGHTS:\\n${avgCorrelation > 0.7 ? '• High correlations suggest limited diversification benefits\\n' : ''}${minCorr < 0 ? '• Negative correlations provide excellent hedging opportunities\\n' : ''}${maxCorr > 0.9 ? '• Some holdings are highly correlated - consider reducing overlap\\n' : ''}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'correlation_matrix',\n            tickers: tickers.map(t => t.toUpperCase()),\n            correlationMatrix,\n            statistics: {\n              avgCorrelation,\n              maxCorr,\n              minCorr,\n              maxPair,\n              minPair\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Correlation analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  EFFICIENT_FRONTIER: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [tickers] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'EFFICIENT_FRONTIER command requires an array of tickers. Usage: EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])'\n        };\n      }\n\n      try {\n        if (tickers.length < 2) {\n          return {\n            type: 'error',\n            content: 'Efficient frontier requires at least 2 assets'\n          };\n        }\n\n        // Fetch data for all tickers\n        const stockData = await Promise.all(\n          tickers.map(async(ticker) => {\n            const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n            return {\n              ticker: ticker.toUpperCase(),\n              name: profile.companyName,\n              expectedReturn: (profile.beta || 1.0) * 0.08 + 0.02, // CAPM approximation\n              volatility: (profile.beta || 1.0) * 0.16, // Market volatility scaled by beta\n              beta: profile.beta || 1.0\n            };\n          })\n        );\n\n        // Generate efficient frontier points (simplified calculation)\n        const frontierPoints = [];\n        for (let targetReturn = 0.05; targetReturn <= 0.20; targetReturn += 0.01) {\n          // Simplified optimization - equal weights adjusted for target return\n          const weights = stockData.map(stock => {\n            const baseWeight = 1 / stockData.length;\n            const returnAdjustment = (targetReturn - 0.08) * (stock.expectedReturn - 0.08) * 2;\n            return Math.max(0.05, Math.min(0.95, baseWeight + returnAdjustment));\n          });\n\n          // Normalize weights\n          const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n          const normalizedWeights = weights.map(w => w / totalWeight);\n\n          // Calculate portfolio metrics\n          const portfolioReturn = stockData.reduce((sum, stock, i) =>\n            sum + normalizedWeights[i] * stock.expectedReturn, 0);\n          const portfolioVolatility = Math.sqrt(stockData.reduce((sum, stock, i) =>\n            sum + Math.pow(normalizedWeights[i] * stock.volatility, 2), 0));\n          const sharpeRatio = (portfolioReturn - 0.02) / portfolioVolatility;\n\n          frontierPoints.push({\n            return: portfolioReturn,\n            volatility: portfolioVolatility,\n            sharpeRatio,\n            weights: normalizedWeights\n          });\n        }\n\n        // Find optimal portfolio (max Sharpe ratio)\n        const optimalPortfolio = frontierPoints.reduce((best, current) =>\n          current.sharpeRatio > best.sharpeRatio ? current : best);\n\n        const content = `Efficient Frontier Analysis\\n\\n📊 ASSET UNIVERSE:\\n${stockData.map(stock =>\n          `• ${stock.ticker}: Expected Return ${formatPercentage(stock.expectedReturn)}, Volatility ${formatPercentage(stock.volatility)}`\n        ).join('\\n')}\\n\\n🎯 OPTIMAL PORTFOLIO (Max Sharpe Ratio):\\n• Expected Return: ${formatPercentage(optimalPortfolio.return)}\\n• Volatility: ${formatPercentage(optimalPortfolio.volatility)}\\n• Sharpe Ratio: ${formatNumber(optimalPortfolio.sharpeRatio, 2)}\\n\\n⚖️ OPTIMAL WEIGHTS:\\n${stockData.map((stock, i) =>\n          `• ${stock.ticker}: ${formatPercentage(optimalPortfolio.weights[i])}`\n        ).join('\\n')}\\n\\n📈 FRONTIER STATISTICS:\\n• Minimum Volatility: ${formatPercentage(Math.min(...frontierPoints.map(p => p.volatility)))}\\n• Maximum Return: ${formatPercentage(Math.max(...frontierPoints.map(p => p.return)))}\\n• Best Sharpe Ratio: ${formatNumber(Math.max(...frontierPoints.map(p => p.sharpeRatio)), 2)}\\n• Frontier Points: ${frontierPoints.length}\\n\\n💡 INSIGHTS:\\n• Diversification reduces portfolio risk below individual asset volatilities\\n• Optimal portfolio balances return and risk for maximum risk-adjusted return\\n• Consider rebalancing periodically to maintain target allocation\\n\\n⚠️ Note: Analysis uses simplified assumptions. Real optimization requires historical correlation data.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'efficient_frontier',\n            assets: stockData,\n            frontierPoints,\n            optimalPortfolio\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Efficient frontier analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  },\n\n  DRAWDOWN: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, period = 252] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DRAWDOWN command requires a ticker symbol. Usage: DRAWDOWN(AAPL, 252)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock drawdown analysis (in real implementation, would use historical price data)\n        const volatility = profile.beta * 0.16;\n        const maxDrawdown = volatility * 2.5; // Estimated based on volatility\n        const avgDrawdown = maxDrawdown * 0.4;\n        const drawdownFrequency = volatility * 12; // Drawdowns per year\n        const recoveryTime = maxDrawdown * 100; // Days to recover\n\n        // Generate mock drawdown periods\n        const drawdownPeriods = [\n          { start: '2023-03-01', end: '2023-04-15', magnitude: maxDrawdown * 0.8, duration: 45 },\n          { start: '2023-07-10', end: '2023-08-20', magnitude: maxDrawdown * 0.6, duration: 41 },\n          { start: '2023-11-05', end: '2023-12-01', magnitude: maxDrawdown * 0.4, duration: 26 },\n          { start: '2024-02-15', end: '2024-03-10', magnitude: maxDrawdown * 0.7, duration: 24 }\n        ];\n\n        const content = `Drawdown Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📉 DRAWDOWN STATISTICS:\\n• Maximum Drawdown: ${formatPercentage(maxDrawdown)}\\n• Average Drawdown: ${formatPercentage(avgDrawdown)}\\n• Drawdown Frequency: ${formatNumber(drawdownFrequency, 1)} per year\\n• Average Recovery Time: ${formatNumber(recoveryTime, 0)} days\\n\\n📊 HISTORICAL DRAWDOWNS:\\n${drawdownPeriods.map((dd, i) =>\n          `${i + 1}. ${dd.start} to ${dd.end}: ${formatPercentage(dd.magnitude)} (${dd.duration} days)`\n        ).join('\\n')}\\n\\n⚠️ RISK ASSESSMENT:\\n• Drawdown Risk: ${maxDrawdown > 0.3 ? 'High' : maxDrawdown > 0.2 ? 'Moderate' : 'Low'}\\n• Recovery Speed: ${recoveryTime < 60 ? 'Fast' : recoveryTime < 120 ? 'Moderate' : 'Slow'}\\n• Volatility Impact: ${volatility > 0.25 ? 'High volatility increases drawdown risk' : 'Moderate volatility profile'}\\n\\n📈 PERFORMANCE METRICS:\\n• Calmar Ratio: ${formatNumber(0.08 / maxDrawdown, 2)} (Annual Return / Max Drawdown)\\n• Pain Index: ${formatNumber(avgDrawdown * drawdownFrequency, 2)}\\n• Ulcer Index: ${formatNumber(Math.sqrt(avgDrawdown), 3)}\\n\\n💡 INSIGHTS:\\n• Drawdowns are normal part of investing - focus on recovery patterns\\n• Diversification can help reduce maximum drawdown magnitude\\n• Consider position sizing based on maximum acceptable drawdown\\n\\n⏱️ Analysis Period: ${period} trading days\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated drawdown metrics. Configure API keys for historical data.' : '✅ Based on historical price data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'drawdown',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              maxDrawdown,\n              avgDrawdown,\n              drawdownFrequency,\n              recoveryTime,\n              drawdownPeriods\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Drawdown analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  }\n};\n"],"names":["financialModelingEngine","constructor","this","modelCache","Map","assumptions","getDefaultAssumptions","dcf","projectionYears","terminalGrowthRate","riskFreeRate","marketPremium","taxRate","capexAsPercentOfRevenue","nwcAsPercentOfRevenue","depreciationAsPercentOfRevenue","normalizedMarginTarget","cyclicalAdjustment","industryBeta","sizeAdjustment","countryRiskPremium","liquidityDiscount","lbo","holdingPeriod","debtMultiples","senior","subordinated","total","interestRates","managementFeeRate","carriedInterestRate","ebitdaGrowthRate","debtPaydownRate","monte_carlo","iterations","confidenceIntervals","correlationMatrix","buildDCFModel","inputs","scenarios","symbol","companyName","currentRevenue","_currentRevenue","historicalGrowthRates","_historicalGrowthRates","margins","_margins","balanceSheetData","_balanceSheetData","marketData","_marketData","modelAssumptions","baseCase","calculateDCFScenario","scenarioResults","bull","bullAssumptions","revenueGrowthRate","Math","min","wacc","bear","bearAssumptions","max","sensitivityAnalysis","performDCFSensitivityAnalysis","modelType","timestamp","Date","toISOString","summary","generateDCFSummary","currentPrice","scenarioName","sharesOutstanding","totalDebt","cash","revenueProjections","projectRevenues","operatingProjections","projectOperatingMetrics","fcfProjections","calculateFreeCashFlows","finalFCF","length","unleveredFCF","terminalValue","calculateTerminalValue","fcfValues","map","fcf","pvOfCashFlows","calculatePresentValue","pvOfTerminalValue","enterpriseValue","equityValue","pricePerShare","upside","impliedMultiples","calculateImpliedMultiples","baseRevenue","growthRates","years","projections","i","growthRate","Array","isArray","pow","push","year","revenue","projection","_index","ebitdaMargin","ebitda","depreciation","ebit","taxes","nopat","index","maintenanceCapex","maintenanceCapexRate","growthCapex","growthCapexRate","totalCapex","nwcChange","calculateWorkingCapitalChange","stockBasedComp","stockBasedCompRate","otherNonCash","otherNonCashRate","totalNonCash","fcfMargin","currentProjection","priorProjection","receivablesDays","inventoryDays","payablesDays","cogsPct","discountRate","options","Error","method","exitMultiple","fadeToGrowth","_fadeToGrowth","fadeYears","longTermGrowth","fadeRate","cashFlows","startYear","reduce","pv","cf","currentYearEbitda","nextYearEbitda","currentYearEbit","nextYearEbit","nextYearRevenue","currentYearFCF","nextYearFCF","evToCurrentRevenue","evToForwardRevenue","evToCurrentEbitda","evToForwardEbitda","evToCurrentEbit","evToForwardEbit","evToCurrentFCF","evToForwardFCF","pegRatio","calculatePEGRatio","currentEarnings","futureEarnings","baseAssumptions","results","Object","entries","forEach","variable","variations","variation","adjustedAssumptions","scenario","error","message","pricesPerShare","values","s","filter","p","priceRange","average","sum","recommendation","generateRecommendation","keyMetrics","impliedReturn","rating","confidence","reasoning","abs","round","generateRecommendationReasoning","upsideAbs","toFixed","DATA_SOURCES","baseURL","apiKey","apiKeyValidator","async","valid","recommendations","RATE_LIMITS","ALPHA_VANTAGE","requests","period","FMP","SEC_EDGAR","CIRCUIT_BREAKER_CONFIG","failureThreshold","recoveryTimeout","monitoringPeriod","halfOpenMaxCalls","CIRCUIT_STATES","CircuitBreaker","name","config","state","failureCount","lastFailureTime","halfOpenCallCount","successCount","totalCalls","canExecute","now","recordSuccess","recordFailure","getStatus","failureRate","isOpen","nextRetryTime","execute","fn","circuitBreakerOpen","result","dataFetchingService","cache","cacheExpiry","logger","apiLogger","client","secureApiClient","log","initializeCircuitBreakers","circuitBreakers","source","initializeRateLimiters","rateLimits","customRateLimits","keys","rateLimiters","limit","checkRateLimit","limiter","time","oldestRequest","waitTime","logRateLimit","ceil","getCacheKey","params","JSON","stringify","getFromCache","key","expiry","get","delete","logCache","reason","cached","size","setCache","data","ttlMinutes","set","expiresAt","generateMockData","ticker","dataType","basePrice","random","marketCap","companyNames","AAPL","MSFT","GOOGL","AMZN","META","TSLA","NVDA","mktCap","pe","pb","beta","sector","industry","enterpriseValueOverEBITDA","debtToEquity","revenueTTM","grossProfitMargin","netProfitMargin","returnOnEquityTTM","returnOnAssetsTTM","effectiveTaxRateTTM","fullTimeEmployees","ipoDate","range","previousClose","volume","currency","netIncome","capex","interestExpense","cashAndCashEquivalents","totalCurrentAssets","totalCurrentLiabilities","freeCashFlow","fetchCompanyProfile","cacheKey","profile","getCompanyProfile","fetchFinancialStatements","statement","fetchMarketData","fetchMarketDataAlternative","demoMode","retryManager","executeWithRetry","quote","axios","function","apikey","timeout","parseFloat","parseInt","change","changePercent","fetchSECFilings","filingType","count","form","filingDate","accessionNumber","reportDate","acceptanceDateTime","act","primaryDocument","toLowerCase","url","fetchPeerComparables","industryCode","peers","fetchDCFInputs","incomeStatements","balanceSheets","Promise","all","revenues","stmt","reverse","revenueGrowthRates","avgRevenueGrowth","a","b","latestCashFlow","latestIncome","costOfEquity","latestBalance","debtRatio","peRatio","historicalData","freeCashFlows","fetchLBOInputs","fetchPeerComparison","currentEV","evEbitdaMultiple","peerEvEbitdaMultiples","peer","evToEbitda","avgPeerMultiple","workingCapital","debtToEbitda","interestCoverage","suggestedPurchasePrice","maxDebtCapacity","validateTicker","includes","getApiStatus","validationResults","metrics","getMetrics","cacheSize","validation","getCircuitBreakerStatus","performance","uptime","totalRequests","services","service","totalErrors","averageResponseTime","calculateAverageResponseTime","cacheHitRate","calculateCacheHitRate","availableKeys","alphaVantage","fmp","quandl","fred","status","totalDuration","duration","hits","hit","miss","getRecentLogs","level","clearMetrics","clear","validateApiKeys","buildAdvancedDCFModel","financials","dcfInputs","price","calculateHistoricalGrowthRates","calculateWACC","estimateGrowthRate","dcfModel","buildAdvancedLBOModel","transactionInputs","_financials","peerData","lboInputs","purchasePrice","exit","calculatePeerAverageMultiple","lboModel","lboModelingEngine","buildLBOModel","returnsAnalysis","irr","_symbol","_peerData","portfolioCommands","PORTFOLIO","parsedCommand","_context","_processor","tickers","weights","parameters","type","content","tickerArray","weightArray","totalWeight","w","portfolioData","toUpperCase","weight","dividendYield","portfolioValue","stock","weightedBeta","weightedPE","weightedDividendYield","maxWeight","minWeight","concentrationRatio","formatPercentage","formatCurrency","join","formatNumber","analysis","holdings","parameterSchema","required","optional","RISK_METRICS","volatility","sharpeRatio","var95","var99","maxDrawdown","sortinoRatio","sqrt","CORRELATION_MATRIX","stockData","j","sectorCorr","betaCorr","correlation","totalCorr","avgCorrelation","maxCorr","minCorr","maxPair","minPair","corr","matrixDisplay","padEnd","padStart","t","statistics","EFFICIENT_FRONTIER","expectedReturn","frontierPoints","targetReturn","baseWeight","returnAdjustment","normalizedWeights","portfolioReturn","portfolioVolatility","return","optimalPortfolio","best","current","assets","DRAWDOWN","avgDrawdown","drawdownFrequency","recoveryTime","drawdownPeriods","start","end","magnitude","dd"],"mappings":"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"}
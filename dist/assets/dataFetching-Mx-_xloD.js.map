{"version":3,"file":"dataFetching-Mx-_xloD.js","sources":["../../src/utils/apiKeyValidator.js","../../src/services/dataFetching.js"],"sourcesContent":["// API Key Validation Utility\n// Validates API keys and provides helpful feedback for setup\n\nimport axios from 'axios';\n\nexport class ApiKeyValidator {\n  constructor() {\n    this.validationResults = new Map();\n    this.lastValidation = null;\n  }\n\n  /**\n   * Validate all configured API keys\n   * @returns {Promise<Object>} Validation results for all services\n   */\n  async validateAllKeys() {\n    const results = {\n      timestamp: new Date(),\n      overall: 'unknown',\n      services: {},\n      recommendations: []\n    };\n\n    // Get all API keys from environment\n    const apiKeys = {\n      alphaVantage: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY,\n      fmp: import.meta.env.VITE_FMP_API_KEY,\n      quandl: import.meta.env.VITE_QUANDL_API_KEY,\n      fred: import.meta.env.VITE_FRED_API_KEY\n    };\n\n    // Validate each service\n    const validationPromises = [\n      this.validateAlphaVantage(apiKeys.alphaVantage),\n      this.validateFMP(apiKeys.fmp),\n      this.validateQuandl(apiKeys.quandl),\n      this.validateFRED(apiKeys.fred)\n    ];\n\n    try {\n      const [alphaVantage, fmp, quandl, fred] = await Promise.allSettled(validationPromises);\n\n      results.services = {\n        alphaVantage: this.processValidationResult(alphaVantage),\n        fmp: this.processValidationResult(fmp),\n        quandl: this.processValidationResult(quandl),\n        fred: this.processValidationResult(fred)\n      };\n\n      // Determine overall status\n      const validServices = Object.values(results.services).filter(\n        s => s.status === 'valid'\n      ).length;\n      const configuredServices = Object.values(results.services).filter(\n        s => s.status !== 'missing'\n      ).length;\n      const totalServices = Object.keys(results.services).length;\n\n      if (validServices === 0) {\n        results.overall = 'demo';\n        results.recommendations.push(\n          'No valid API keys found. Running in demo mode with mock data.'\n        );\n        results.recommendations.push(\n          'Add at least one API key (Alpha Vantage or FMP recommended) for live data.'\n        );\n      } else if (validServices < configuredServices || configuredServices < totalServices) {\n        results.overall = 'partial';\n        results.recommendations.push(\n          `${validServices}/${configuredServices} configured API keys are valid. Some features may use demo data.`\n        );\n      } else {\n        results.overall = 'complete';\n        results.recommendations.push('All API keys are valid. Full functionality available.');\n      }\n\n      this.lastValidation = results;\n      return results;\n    } catch (error) {\n      results.overall = 'error';\n      results.error = error.message;\n      results.recommendations.push('Error validating API keys. Check your internet connection.');\n      return results;\n    }\n  }\n\n  /**\n   * Validate Alpha Vantage API key\n   */\n  async validateAlphaVantage(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://www.alphavantage.co/query', {\n        params: {\n          function: 'GLOBAL_QUOTE',\n          symbol: 'AAPL',\n          apikey: apiKey\n        },\n        timeout: 10000\n      });\n\n      if (response.data['Error Message']) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data['Note']) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n\n      if (response.data['Global Quote']) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Financial Modeling Prep API key\n   */\n  async validateFMP(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://financialmodelingprep.com/api/v3/profile/AAPL', {\n        params: { apikey: apiKey },\n        timeout: 10000\n      });\n\n      if (response.data.error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Quandl API key\n   */\n  async validateQuandl(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://data.nasdaq.com/api/v3/datasets/WIKI/AAPL.json', {\n        params: { api_key: apiKey, rows: 1 },\n        timeout: 10000\n      });\n\n      if (response.data.quandl_error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.dataset) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate FRED API key\n   */\n  async validateFRED(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://api.stlouisfed.org/fred/series', {\n        params: {\n          series_id: 'GDP',\n          api_key: apiKey,\n          file_type: 'json'\n        },\n        timeout: 10000\n      });\n\n      if (response.data.error_message) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.seriess) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 400) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Process validation result from Promise.allSettled\n   */\n  processValidationResult(result) {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return { status: 'error', message: result.reason.message };\n    }\n  }\n\n  /**\n   * Get validation status for a specific service\n   */\n  getServiceStatus(serviceName) {\n    if (!this.lastValidation) {\n      return { status: 'unknown', message: 'Validation not run yet' };\n    }\n    return (\n      this.lastValidation.services[serviceName] || {\n        status: 'unknown',\n        message: 'Service not found'\n      }\n    );\n  }\n\n  /**\n   * Get overall validation status\n   */\n  getOverallStatus() {\n    if (!this.lastValidation) {\n      return 'unknown';\n    }\n    return this.lastValidation.overall;\n  }\n\n  /**\n   * Get recommendations for improving API setup\n   */\n  getRecommendations() {\n    if (!this.lastValidation) {\n      return ['Run API key validation first'];\n    }\n    return this.lastValidation.recommendations;\n  }\n\n  /**\n   * Check if demo mode should be used\n   */\n  shouldUseDemoMode() {\n    const status = this.getOverallStatus();\n    return status === 'demo' || status === 'unknown';\n  }\n}\n\n// Export singleton instance\nexport const apiKeyValidator = new ApiKeyValidator();\nexport default ApiKeyValidator;\n","import axios from 'axios';\n\nimport { apiKeyValidator } from '../utils/apiKeyValidator.js';\nimport { apiLogger } from '../utils/apiLogger.js';\n\nimport { financialModelingEngine } from './financialModelingEngine.js';\nimport { lboModelingEngine } from './lboModelingEngine.js';\nimport { monteCarloEngine } from './monteCarloEngine.js';\n\n// Data source configurations - Updated for Vite environment variables\nconst DATA_SOURCES = {\n  ALPHA_VANTAGE: {\n    baseURL: 'https://www.alphavantage.co/query',\n    apiKey: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY || 'demo'\n  },\n  FMP: {\n    baseURL: 'https://financialmodelingprep.com/api/v3',\n    apiKey: import.meta.env.VITE_FMP_API_KEY || 'demo'\n  },\n  SEC_EDGAR: {\n    baseURL: 'https://data.sec.gov',\n    headers: {\n      'User-Agent': 'FinanceAnalyst-Pro (contact@financeanalyst.com)'\n    }\n  },\n  YAHOO_FINANCE: {\n    baseURL: 'https://query1.finance.yahoo.com/v8/finance/chart',\n    fallbackURL: 'https://query2.finance.yahoo.com/v8/finance/chart'\n  }\n};\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  ALPHA_VANTAGE: { requests: 5, period: 60000 }, // 5 requests per minute\n  FMP: { requests: 250, period: 86400000 }, // 250 requests per day\n  SEC_EDGAR: { requests: 10, period: 1000 } // 10 requests per second\n};\n\n// Advanced retry configuration\nconst RETRY_CONFIG = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second base delay\n  maxDelay: 30000, // 30 seconds max delay\n  exponentialBase: 2,\n  jitterFactor: 0.1, // 10% jitter\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT']\n};\n\n/**\n * Circuit breaker configuration\n */\nconst CIRCUIT_BREAKER_CONFIG = {\n  failureThreshold: 5, // Number of failures before opening circuit\n  recoveryTimeout: 30000, // 30 seconds before attempting to close circuit\n  monitoringPeriod: 60000, // 1 minute monitoring window\n  halfOpenMaxCalls: 3 // Max calls to test in half-open state\n};\n\n/**\n * Circuit breaker states\n */\nconst CIRCUIT_STATES = {\n  CLOSED: 'CLOSED', // Normal operation\n  OPEN: 'OPEN', // Circuit is open, failing fast\n  HALF_OPEN: 'HALF_OPEN' // Testing if service has recovered\n};\n\n/**\n * Circuit breaker implementation to prevent cascading failures\n */\nclass CircuitBreaker {\n  constructor(name, config = CIRCUIT_BREAKER_CONFIG) {\n    this.name = name;\n    this.config = { ...CIRCUIT_BREAKER_CONFIG, ...config };\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.halfOpenCallCount = 0;\n    this.successCount = 0;\n    this.totalCalls = 0;\n  }\n\n  /**\n   * Check if circuit breaker allows the call\n   * @returns {boolean} Whether the call is allowed\n   */\n  canExecute() {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        return true;\n\n      case CIRCUIT_STATES.OPEN:\n        // Check if recovery timeout has passed\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.state = CIRCUIT_STATES.HALF_OPEN;\n          this.halfOpenCallCount = 0;\n          console.log(`🔄 Circuit breaker ${this.name} transitioning to HALF_OPEN`);\n          return true;\n        }\n        return false;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        return this.halfOpenCallCount < this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Record a successful call\n   */\n  recordSuccess() {\n    this.successCount++;\n    this.totalCalls++;\n\n    switch (this.state) {\n      case CIRCUIT_STATES.HALF_OPEN:\n        this.halfOpenCallCount++;\n        // If we've successfully completed enough calls in half-open, close the circuit\n        if (this.halfOpenCallCount >= this.config.halfOpenMaxCalls) {\n          this.state = CIRCUIT_STATES.CLOSED;\n          this.failureCount = 0;\n          this.halfOpenCallCount = 0;\n          console.log(`✅ Circuit breaker ${this.name} closed - service recovered`);\n        }\n        break;\n\n      case CIRCUIT_STATES.CLOSED:\n        // Reset failure count on success\n        this.failureCount = 0;\n        break;\n    }\n  }\n\n  /**\n   * Record a failed call\n   */\n  recordFailure() {\n    this.failureCount++;\n    this.totalCalls++;\n    this.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        if (this.failureCount >= this.config.failureThreshold) {\n          this.state = CIRCUIT_STATES.OPEN;\n          console.warn(\n            `🚨 Circuit breaker ${this.name} opened - too many failures (${this.failureCount})`\n          );\n        }\n        break;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        // Any failure in half-open state reopens the circuit\n        this.state = CIRCUIT_STATES.OPEN;\n        this.halfOpenCallCount = 0;\n        console.warn(`🚨 Circuit breaker ${this.name} reopened - failure during recovery test`);\n        break;\n    }\n  }\n\n  /**\n   * Get circuit breaker status\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls: this.totalCalls,\n      failureRate: this.totalCalls > 0 ? this.failureCount / this.totalCalls : 0,\n      lastFailureTime: this.lastFailureTime,\n      isOpen: this.state === CIRCUIT_STATES.OPEN,\n      nextRetryTime:\n        this.state === CIRCUIT_STATES.OPEN\n          ? this.lastFailureTime + this.config.recoveryTimeout\n          : null\n    };\n  }\n\n  /**\n   * Execute function with circuit breaker protection\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    if (!this.canExecute()) {\n      const error = new Error(`Circuit breaker ${this.name} is OPEN - failing fast`);\n      error.circuitBreakerOpen = true;\n      throw error;\n    }\n\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (error) {\n      this.recordFailure();\n      throw error;\n    }\n  }\n}\n\n/**\n * Advanced retry utility with exponential backoff and jitter\n */\nclass RetryManager {\n  constructor(config = RETRY_CONFIG) {\n    this.config = { ...RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Calculate delay with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    const exponentialDelay = this.config.baseDelay * Math.pow(this.config.exponentialBase, attempt);\n    const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n    const delay = exponentialDelay + jitter;\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  /**\n   * Check if error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error is retryable\n   */\n  isRetryableError(error) {\n    // Check for network errors\n    if (error.code && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    // Check for HTTP status codes\n    if (\n      error.response?.status &&\n      this.config.retryableStatusCodes.includes(error.response.status)\n    ) {\n      return true;\n    }\n\n    // Check for timeout errors\n    if (error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute function with retry logic\n   * @param {Function} fn - Async function to execute\n   * @param {string} operation - Operation name for logging\n   * @returns {Promise} Result of the function\n   */\n  async executeWithRetry(fn, operation = 'API call') {\n    let lastError;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const result = await fn();\n\n        // Log successful retry if this wasn't the first attempt\n        if (attempt > 0) {\n          console.log(`✅ ${operation} succeeded on attempt ${attempt + 1}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error)) {\n          console.warn(`❌ ${operation} failed with non-retryable error:`, error.message);\n          throw error;\n        }\n\n        const delay = this.calculateDelay(attempt);\n        console.warn(\n          `⚠️ ${operation} failed (attempt ${attempt + 1}/${this.config.maxRetries + 1}), retrying in ${delay}ms:`,\n          error.message\n        );\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    // All retries exhausted\n    console.error(\n      `❌ ${operation} failed after ${this.config.maxRetries + 1} attempts:`,\n      lastError.message\n    );\n    throw lastError;\n  }\n}\n\nclass DataFetchingService {\n  constructor(\n    env = import.meta.env,\n    customRateLimits = null,\n    retryConfig = null,\n    circuitBreakerConfig = null\n  ) {\n    this.rateLimiters = {};\n    this.cache = new Map();\n    this.cacheExpiry = new Map();\n    this.env = env;\n    this.customRateLimits = customRateLimits;\n    this.demoMode = this.isDemoMode(env);\n    this.retryManager = new RetryManager(retryConfig);\n    this.circuitBreakers = this.initializeCircuitBreakers(circuitBreakerConfig);\n    this.logger = apiLogger;\n    this.initializeRateLimiters();\n\n    // Log service initialization\n    this.logger.log('INFO', '🚀 DataFetchingService initialized', {\n      demoMode: this.demoMode,\n      environment: env.VITE_APP_ENV || 'development'\n    });\n  }\n\n  isDemoMode(env = import.meta.env) {\n    // Check if we're forcing demo mode\n    if (env.VITE_FORCE_DEMO_MODE === 'true') {\n      return true;\n    }\n\n    // Check if we're using demo API keys\n    const hasValidKeys =\n      (env.VITE_ALPHA_VANTAGE_API_KEY && env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo') ||\n      (env.VITE_FMP_API_KEY && env.VITE_FMP_API_KEY !== 'demo');\n    return !hasValidKeys;\n  }\n\n  initializeCircuitBreakers(config) {\n    const circuitBreakers = {};\n    const sources = ['ALPHA_VANTAGE', 'FMP', 'SEC_EDGAR', 'YAHOO_FINANCE'];\n\n    sources.forEach(source => {\n      circuitBreakers[source] = new CircuitBreaker(source, config);\n    });\n\n    return circuitBreakers;\n  }\n\n  initializeRateLimiters() {\n    const rateLimits = this.customRateLimits || RATE_LIMITS;\n    Object.keys(rateLimits).forEach(source => {\n      this.rateLimiters[source] = {\n        requests: [],\n        limit: rateLimits[source].requests,\n        period: rateLimits[source].period\n      };\n    });\n  }\n\n  async checkRateLimit(source) {\n    const limiter = this.rateLimiters[source];\n    if (!limiter) return true;\n\n    const now = Date.now();\n    limiter.requests = limiter.requests.filter(time => now - time < limiter.period);\n\n    if (limiter.requests.length >= limiter.limit) {\n      const oldestRequest = Math.min(...limiter.requests);\n      const waitTime = limiter.period - (now - oldestRequest);\n\n      // Log rate limiting event\n      this.logger.logRateLimit(source, waitTime, limiter.limit - limiter.requests.length);\n\n      throw new Error(\n        `Rate limit exceeded for ${source}. Please wait ${Math.ceil(waitTime / 1000)} seconds.`\n      );\n    }\n\n    limiter.requests.push(now);\n    return true;\n  }\n\n  getCacheKey(method, params) {\n    return `${method}_${JSON.stringify(params)}`;\n  }\n\n  getFromCache(key) {\n    const expiry = this.cacheExpiry.get(key);\n    if (expiry && Date.now() > expiry) {\n      this.cache.delete(key);\n      this.cacheExpiry.delete(key);\n      this.logger.logCache('miss', key, { reason: 'expired' });\n      return null;\n    }\n    const cached = this.cache.get(key);\n    if (cached !== undefined) {\n      this.logger.logCache('hit', key, { size: JSON.stringify(cached).length });\n      return cached;\n    }\n    this.logger.logCache('miss', key, { reason: 'not_found' });\n    return null;\n  }\n\n  setCache(key, data, ttlMinutes = 60) {\n    this.cache.set(key, data);\n    this.cacheExpiry.set(key, Date.now() + ttlMinutes * 60 * 1000);\n    this.logger.logCache('set', key, {\n      ttlMinutes,\n      size: JSON.stringify(data).length,\n      expiresAt: new Date(Date.now() + ttlMinutes * 60 * 1000).toISOString()\n    });\n  }\n\n  generateMockData(ticker, dataType) {\n    // Generate realistic mock data for demo purposes\n    const basePrice = 100 + Math.random() * 200;\n    const marketCap = 1000000000 + Math.random() * 10000000000;\n\n    // Map common tickers to realistic company names\n    const companyNames = {\n      AAPL: 'Apple Inc.',\n      MSFT: 'Microsoft Corporation',\n      GOOGL: 'Alphabet Inc.',\n      AMZN: 'Amazon.com Inc.',\n      META: 'Meta Platforms Inc.',\n      TSLA: 'Tesla Inc.',\n      NVDA: 'NVIDIA Corporation'\n    };\n\n    switch (dataType) {\n      case 'profile':\n        return {\n          symbol: ticker,\n          companyName: companyNames[ticker] || `${ticker} Corporation`,\n          mktCap: marketCap,\n          pe: 15 + Math.random() * 20,\n          pb: 1 + Math.random() * 4,\n          beta: 0.8 + Math.random() * 0.8,\n          sector: 'Technology',\n          industry: 'Software',\n          sharesOutstanding: marketCap / basePrice,\n          enterpriseValueOverEBITDA: 10 + Math.random() * 15,\n          debtToEquity: Math.random() * 2,\n          revenueTTM: marketCap * 0.8,\n          grossProfitMargin: 0.3 + Math.random() * 0.4,\n          netProfitMargin: 0.1 + Math.random() * 0.2,\n          returnOnEquityTTM: 0.1 + Math.random() * 0.2,\n          returnOnAssetsTTM: 0.05 + Math.random() * 0.15,\n          effectiveTaxRateTTM: 0.21,\n          fullTimeEmployees: 1000 + Math.random() * 50000,\n          ipoDate: '2010-01-01',\n          range: `$${(basePrice * 0.8).toFixed(2)} - $${(basePrice * 1.3).toFixed(2)}`\n        };\n\n      case 'marketData':\n        return {\n          symbol: ticker,\n          currentPrice: basePrice,\n          previousClose: basePrice * (0.98 + Math.random() * 0.04),\n          marketCap,\n          volume: 1000000 + Math.random() * 5000000,\n          currency: 'USD'\n        };\n\n      case 'incomeStatement':\n      case 'income':\n        const revenue = marketCap * 0.8;\n        return [\n          {\n            revenue,\n            ebitda: revenue * 0.25,\n            netIncome: revenue * 0.15,\n            capex: revenue * 0.05,\n            interestExpense: revenue * 0.02,\n            grossProfitMargin: 0.6\n          }\n        ];\n\n      case 'balanceSheet':\n        return [\n          {\n            totalDebt: marketCap * 0.3,\n            cashAndCashEquivalents: marketCap * 0.1,\n            totalCurrentAssets: marketCap * 0.4,\n            totalCurrentLiabilities: marketCap * 0.2\n          }\n        ];\n\n      case 'cashFlow':\n        return [\n          {\n            freeCashFlow: marketCap * 0.12\n          }\n        ];\n\n      default:\n        return null;\n    }\n  }\n\n  async fetchCompanyProfile(ticker) {\n    const cacheKey = this.getCacheKey('profile', { ticker });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock data for', ticker);\n      const mockData = this.generateMockData(ticker, 'profile');\n      this.setCache(cacheKey, mockData, 1440);\n      return mockData;\n    }\n\n    return this.circuitBreakers.FMP.execute(async() => {\n      return this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        // Log API request start\n        const requestId = this.logger.logApiRequest('FMP', `/profile/${ticker}`, { ticker });\n\n        try {\n          const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/profile/${ticker}`, {\n            params: { apikey: DATA_SOURCES.FMP.apiKey },\n            timeout: 10000\n          });\n\n          if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          const profile = response.data[0];\n          if (!profile || typeof profile !== 'object') {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          // Log successful API response\n          this.logger.logApiResponse(requestId, true, {\n            profileFound: true,\n            ticker: profile.symbol\n          });\n\n          this.setCache(cacheKey, profile, 1440); // Cache for 24 hours\n          return profile;\n        } catch (error) {\n          // Log failed API response\n          this.logger.logApiResponse(requestId, false, null, error);\n          throw error;\n        }\n      }, `Company profile fetch for ${ticker}`);\n    }).catch(error => {\n      // Handle circuit breaker errors - preserve the circuitBreakerOpen property\n      if (error.circuitBreakerOpen) {\n        throw error;\n      }\n\n      // Handle authentication errors with fallback to demo mode\n      if (error.response?.status === 403 || error.response?.status === 401) {\n        console.warn('API key invalid, falling back to demo mode');\n        const mockData = this.generateMockData(ticker, 'profile');\n        this.setCache(cacheKey, mockData, 1440);\n        return mockData;\n      }\n      throw new Error(`Failed to fetch company profile: ${error.message}`);\n    });\n  }\n\n  async fetchFinancialStatements(\n    ticker,\n    statement = 'income-statement',\n    period = 'annual',\n    limit = 5\n  ) {\n    const cacheKey = this.getCacheKey('financials', { ticker, statement, period, limit });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock financial data for', ticker);\n      const mockData = this.generateMockData(\n        ticker,\n        statement.replace('-statement', '').replace('-', '')\n      );\n      this.setCache(cacheKey, mockData, 360);\n      return mockData;\n    }\n\n    return this.retryManager\n      .executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/${statement}/${ticker}`, {\n          params: {\n            apikey: DATA_SOURCES.FMP.apiKey,\n            period,\n            limit\n          },\n          timeout: 15000\n        });\n\n        if (!response.data || response.data.length === 0) {\n          throw new Error(`No ${statement} data found for ${ticker}`);\n        }\n\n        this.setCache(cacheKey, response.data, 360); // Cache for 6 hours\n        return response.data;\n      }, `Financial statements fetch for ${ticker} (${statement})`)\n      .catch(error => {\n        // Handle authentication errors with fallback to demo mode\n        if (error.response?.status === 403 || error.response?.status === 401) {\n          console.warn('API key invalid, falling back to demo mode');\n          const mockData = this.generateMockData(\n            ticker,\n            statement.replace('-statement', '').replace('-', '')\n          );\n          this.setCache(cacheKey, mockData, 360);\n          return mockData;\n        }\n        throw new Error(`Failed to fetch ${statement}: ${error.message}`);\n      });\n  }\n\n  async fetchMarketData(ticker, range = '1y') {\n    const cacheKey = this.getCacheKey('market', { ticker, range });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock market data for', ticker);\n      const mockData = this.generateMockData(ticker, 'marketData');\n      this.setCache(cacheKey, mockData, 15);\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        // Try Yahoo Finance first (no API key required)\n        const response = await axios.get(`${DATA_SOURCES.YAHOO_FINANCE.baseURL}/${ticker}`, {\n          params: { range, interval: '1d' },\n          timeout: 10000\n        });\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        const marketData = {\n          symbol: result.meta.symbol,\n          currentPrice: result.meta.regularMarketPrice,\n          previousClose: result.meta.previousClose,\n          marketCap: result.meta.marketCap,\n          volume: result.meta.regularMarketVolume,\n          timestamps: result.timestamp,\n          prices: result.indicators.quote[0],\n          currency: result.meta.currency\n        };\n\n        this.setCache(cacheKey, marketData, 15); // Cache for 15 minutes\n        return marketData;\n      }, `Market data fetch for ${ticker}`);\n    } catch (error) {\n      // Fallback to Alpha Vantage or demo mode\n      console.warn(`Primary market data source failed for ${ticker}, trying alternative`);\n      return this.fetchMarketDataAlternative(ticker);\n    }\n  }\n\n  async fetchMarketDataAlternative(ticker) {\n    if (this.demoMode) {\n      const mockData = this.generateMockData(ticker, 'marketData');\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('ALPHA_VANTAGE');\n\n        const response = await axios.get(DATA_SOURCES.ALPHA_VANTAGE.baseURL, {\n          params: {\n            function: 'GLOBAL_QUOTE',\n            symbol: ticker,\n            apikey: DATA_SOURCES.ALPHA_VANTAGE.apiKey\n          },\n          timeout: 10000\n        });\n\n        const quote = response.data['Global Quote'];\n        if (!quote || Object.keys(quote).length === 0) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        return {\n          symbol: quote['01. symbol'],\n          currentPrice: parseFloat(quote['05. price']),\n          previousClose: parseFloat(quote['08. previous close']),\n          volume: parseInt(quote['06. volume']),\n          change: parseFloat(quote['09. change']),\n          changePercent: quote['10. change percent']\n        };\n      }, `Alternative market data fetch for ${ticker}`);\n    } catch (error) {\n      console.warn('Alternative market data API failed, using demo data');\n      return this.generateMockData(ticker, 'marketData');\n    }\n  }\n\n  async fetchSECFilings(ticker, filingType = '10-K', count = 5) {\n    const cacheKey = this.getCacheKey('sec', { ticker, filingType, count });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('SEC filings not available in demo mode');\n        return [\n          {\n            form: filingType,\n            filingDate: '2023-12-31',\n            accessionNumber: '0000000000-00-000000',\n            reportDate: '2023-12-31',\n            acceptanceDateTime: '2024-01-15T16:30:00',\n            act: '34',\n            primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n            url: '#demo-filing'\n          }\n        ];\n      }\n\n      await this.checkRateLimit('SEC_EDGAR');\n\n      // This would need proper CIK lookup implementation\n      // For now, return demo data\n      return [\n        {\n          form: filingType,\n          filingDate: '2023-12-31',\n          accessionNumber: '0000000000-00-000000',\n          reportDate: '2023-12-31',\n          acceptanceDateTime: '2024-01-15T16:30:00',\n          act: '34',\n          primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n          url: '#demo-filing'\n        }\n      ];\n    } catch (error) {\n      throw new Error(`Failed to fetch SEC filings: ${error.message}`);\n    }\n  }\n\n  async fetchPeerComparables(ticker, industryCode = null) {\n    const cacheKey = this.getCacheKey('peers', { ticker, industryCode });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('Using demo peer data');\n        const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n        const peers = peerTickers.slice(0, 5).map(peerTicker => {\n          const basePrice = 100 + Math.random() * 200;\n          const marketCap = 1000000000 + Math.random() * 2000000000;\n          return {\n            symbol: peerTicker,\n            name: `${peerTicker} Corporation`,\n            marketCap,\n            currentPrice: basePrice,\n            sector: 'Technology',\n            industry: 'Software',\n            peRatio: 15 + Math.random() * 20,\n            evToEbitda: 10 + Math.random() * 15,\n            priceToBook: 1 + Math.random() * 4,\n            debtToEquity: Math.random() * 2\n          };\n        });\n        this.setCache(cacheKey, peers, 240);\n        return peers;\n      }\n\n      await this.checkRateLimit('FMP');\n\n      // Get company profile first to determine industry\n      const profile = await this.fetchCompanyProfile(ticker);\n\n      // For demo, use hardcoded peer list\n      const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n\n      // Fetch key metrics for peer analysis\n      const peerData = await Promise.allSettled(\n        peerTickers.slice(0, 5).map(async peerTicker => {\n          const peerProfile = await this.fetchCompanyProfile(peerTicker);\n          const peerMarket = await this.fetchMarketData(peerTicker);\n\n          return {\n            symbol: peerTicker,\n            name: peerProfile.companyName,\n            marketCap: peerProfile.mktCap,\n            currentPrice: peerMarket.currentPrice,\n            sector: peerProfile.sector,\n            industry: peerProfile.industry,\n            peRatio: peerProfile.pe,\n            evToEbitda: peerProfile.enterpriseValueOverEBITDA,\n            priceToBook: peerProfile.pb,\n            debtToEquity: peerProfile.debtToEquity\n          };\n        })\n      );\n\n      const validPeers = peerData\n        .filter(result => result.status === 'fulfilled')\n        .map(result => result.value);\n\n      this.setCache(cacheKey, validPeers, 240); // Cache for 4 hours\n      return validPeers;\n    } catch (error) {\n      throw new Error(`Failed to fetch peer comparables: ${error.message}`);\n    }\n  }\n\n  async fetchDCFInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, cashFlows, marketData] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'cash-flow-statement', 'annual', 5),\n        this.fetchMarketData(ticker)\n      ]);\n\n      // Calculate historical growth rates\n      const revenues = Array.isArray(incomeStatements)\n        ? incomeStatements.map(stmt => stmt.revenue).reverse()\n        : [incomeStatements.revenue];\n      const revenueGrowthRates = [];\n      for (let i = 1; i < revenues.length; i++) {\n        if (revenues[i - 1] && revenues[i]) {\n          revenueGrowthRates.push((revenues[i] - revenues[i - 1]) / revenues[i - 1]);\n        }\n      }\n      const avgRevenueGrowth =\n        revenueGrowthRates.length > 0\n          ? revenueGrowthRates.reduce((a, b) => a + b, 0) / revenueGrowthRates.length\n          : 0.05; // Default 5% growth\n\n      // Calculate free cash flow margin\n      const latestCashFlow = Array.isArray(cashFlows) ? cashFlows[0] : cashFlows;\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const fcfMargin = latestCashFlow.freeCashFlow / latestIncome.revenue;\n\n      // Estimate WACC components\n      const riskFreeRate = 0.045; // 4.5% - this should come from treasury rates API\n      const marketPremium = 0.065; // 6.5% historical market premium\n      const beta = profile.beta || 1.0;\n      const costOfEquity = riskFreeRate + beta * marketPremium;\n\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n      const totalDebt = latestBalance.totalDebt || 0;\n      const marketCap = marketData.marketCap || marketData.currentPrice * profile.sharesOutstanding;\n      const debtRatio = totalDebt / (totalDebt + marketCap);\n      const taxRate = profile.effectiveTaxRateTTM || 0.21;\n\n      const wacc = costOfEquity * (1 - debtRatio) + 0.04 * debtRatio * (1 - taxRate); // Assuming 4% cost of debt\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentRevenue: latestIncome.revenue,\n        revenueGrowthRate: avgRevenueGrowth,\n        fcfMargin,\n        wacc,\n        terminalGrowthRate: 0.025, // 2.5% long-term GDP growth assumption\n        currentPrice: marketData.currentPrice,\n        sharesOutstanding: profile.sharesOutstanding,\n        marketCap,\n        totalDebt,\n        cash: latestBalance.cashAndCashEquivalents || 0,\n        beta,\n        peRatio: profile.pe,\n        historicalData: {\n          revenues,\n          revenueGrowthRates,\n          freeCashFlows: Array.isArray(cashFlows)\n            ? cashFlows.map(cf => cf.freeCashFlow).reverse()\n            : [latestCashFlow.freeCashFlow],\n          margins: Array.isArray(incomeStatements)\n            ? incomeStatements.map(stmt => stmt.grossProfitMargin).reverse()\n            : [latestIncome.grossProfitMargin]\n        }\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch DCF inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async fetchLBOInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, marketData, peers] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 3),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 3),\n        this.fetchMarketData(ticker),\n        this.fetchPeerComparables(ticker)\n      ]);\n\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n\n      // Calculate key LBO metrics\n      const ebitda = latestIncome.ebitda;\n      const currentEV =\n        marketData.marketCap + latestBalance.totalDebt - latestBalance.cashAndCashEquivalents;\n      const evEbitdaMultiple = currentEV / ebitda;\n\n      // Peer multiples for exit assumptions\n      const peerEvEbitdaMultiples = peers\n        .filter(peer => peer.evToEbitda && peer.evToEbitda > 0)\n        .map(peer => peer.evToEbitda);\n      const avgPeerMultiple =\n        peerEvEbitdaMultiples.length > 0\n          ? peerEvEbitdaMultiples.reduce((a, b) => a + b, 0) / peerEvEbitdaMultiples.length\n          : evEbitdaMultiple;\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentPrice: marketData.currentPrice,\n        marketCap: marketData.marketCap,\n        enterpriseValue: currentEV,\n        ebitda,\n        evEbitdaMultiple,\n        revenue: latestIncome.revenue,\n        netIncome: latestIncome.netIncome,\n        totalDebt: latestBalance.totalDebt,\n        cash: latestBalance.cashAndCashEquivalents,\n        workingCapital: latestBalance.totalCurrentAssets - latestBalance.totalCurrentLiabilities,\n        capex: Math.abs(latestIncome.capex || 0),\n        debtToEbitda: latestBalance.totalDebt / ebitda,\n        interestCoverage: ebitda / (latestIncome.interestExpense || 1),\n        avgPeerMultiple,\n        suggestedPurchasePrice: ebitda * avgPeerMultiple,\n        maxDebtCapacity: ebitda * 6, // 6x EBITDA debt capacity assumption\n        sharesOutstanding: profile.sharesOutstanding\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch LBO inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async validateTicker(ticker) {\n    try {\n      // In demo mode, only validate known tickers\n      if (this.demoMode) {\n        const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA'];\n        return knownTickers.includes(ticker);\n      }\n\n      await this.fetchCompanyProfile(ticker);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Add method to check API status\n  async getApiStatus() {\n    const validationResults = await apiKeyValidator.validateAllKeys();\n    const metrics = this.logger.getMetrics();\n\n    return {\n      demoMode: this.demoMode,\n      cacheSize: this.cache.size,\n      validation: validationResults,\n      circuitBreakers: this.getCircuitBreakerStatus(),\n      metrics,\n      performance: {\n        uptime: metrics.uptime,\n        totalRequests: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.requests?.total || 0),\n          0\n        ),\n        totalErrors: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.error?.total || 0),\n          0\n        ),\n        averageResponseTime: this.calculateAverageResponseTime(metrics.services),\n        cacheHitRate: this.calculateCacheHitRate(metrics.cache)\n      },\n      availableKeys: {\n        alphaVantage: !!(\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY &&\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo'\n        ),\n        fmp: !!(import.meta.env.VITE_FMP_API_KEY && import.meta.env.VITE_FMP_API_KEY !== 'demo'),\n        quandl: !!(\n          import.meta.env.VITE_QUANDL_API_KEY && import.meta.env.VITE_QUANDL_API_KEY !== 'demo'\n        ),\n        fred: !!(import.meta.env.VITE_FRED_API_KEY && import.meta.env.VITE_FRED_API_KEY !== 'demo')\n      },\n      recommendations: validationResults.recommendations\n    };\n  }\n\n  // Get circuit breaker status for all services\n  getCircuitBreakerStatus() {\n    const status = {};\n    Object.keys(this.circuitBreakers).forEach(service => {\n      status[service] = this.circuitBreakers[service].getStatus();\n    });\n    return status;\n  }\n\n  // Calculate average response time across all services\n  calculateAverageResponseTime(services) {\n    let totalDuration = 0;\n    let totalRequests = 0;\n\n    Object.values(services).forEach(service => {\n      if (service.duration) {\n        totalDuration += service.duration.total;\n        totalRequests += service.duration.count;\n      }\n    });\n\n    return totalRequests > 0 ? Math.round(totalDuration / totalRequests) : 0;\n  }\n\n  // Calculate cache hit rate\n  calculateCacheHitRate(cache) {\n    const hits = cache.hit?.total || 0;\n    const misses = cache.miss?.total || 0;\n    const total = hits + misses;\n\n    return total > 0 ? Math.round((hits / total) * 100) : 0;\n  }\n\n  // Get recent logs for debugging\n  getRecentLogs(limit = 50, level = null) {\n    return this.logger.getRecentLogs(limit, level);\n  }\n\n  // Clear all metrics and logs\n  clearMetrics() {\n    this.logger.clear();\n  }\n\n  // Add method to validate API keys on demand\n  async validateApiKeys() {\n    return await apiKeyValidator.validateAllKeys();\n  }\n\n  /**\n   * Build comprehensive DCF model with advanced scenarios\n   * @param {string} symbol - Stock symbol\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete DCF analysis\n   */\n  async buildAdvancedDCFModel(symbol, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol)\n      ]);\n\n      // Prepare DCF inputs\n      const dcfInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        currentRevenue: financials.revenue || 0,\n        currentPrice: marketData.price || 0,\n        sharesOutstanding: profile.sharesOutstanding || 0,\n        totalDebt: profile.totalDebt || 0,\n        cash: profile.cash || 0,\n        historicalGrowthRates: this.calculateHistoricalGrowthRates(financials),\n        margins: {\n          ebitdaMargin: (financials.ebitda || 0) / (financials.revenue || 1)\n        },\n        balanceSheetData: financials,\n        marketData,\n        assumptions: {\n          ...assumptions,\n          wacc: assumptions.wacc || this.calculateWACC(profile, marketData),\n          revenueGrowthRate: assumptions.revenueGrowthRate || this.estimateGrowthRate(financials)\n        }\n      };\n\n      // Build comprehensive DCF model\n      const dcfModel = financialModelingEngine.buildDCFModel(dcfInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced DCF model built for ${symbol}`, {\n        baseCase: dcfModel.baseCase.pricePerShare,\n        scenarios: Object.keys(dcfModel.scenarios).length\n      });\n\n      return dcfModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build DCF model for ${symbol}`, { error: error.message });\n      throw new Error(`DCF modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {string} symbol - Stock symbol\n   * @param {Object} transactionInputs - Transaction parameters\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete LBO analysis\n   */\n  async buildAdvancedLBOModel(symbol, transactionInputs, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData, peerData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol),\n        this.fetchPeerComparison(symbol)\n      ]);\n\n      // Prepare LBO inputs\n      const lboInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        purchasePrice: transactionInputs.purchasePrice || marketData.marketCap,\n        ebitda: financials.ebitda || 0,\n        revenue: financials.revenue || 0,\n        marketData,\n        peerData,\n        assumptions: {\n          ...assumptions,\n          exit: {\n            ...assumptions.exit,\n            exitMultiple: assumptions.exit?.exitMultiple || this.calculatePeerAverageMultiple(peerData)\n          }\n        }\n      };\n\n      // Build comprehensive LBO model\n      const lboModel = lboModelingEngine.buildLBOModel(lboInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced LBO model built for ${symbol}`, {\n        baseCase: lboModel.baseCase.returnsAnalysis.irr,\n        scenarios: Object.keys(lboModel.scenarios).length\n      });\n\n      return lboModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build LBO model for ${symbol}`, { error: error.message });\n      throw new Error(`LBO modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate historical growth rates from financial data\n   * @param {Object} financials - Financial statements data\n   * @returns {Array} Historical growth rates\n   */\n  calculateHistoricalGrowthRates(financials) {\n    // This would analyze historical financial data to calculate growth rates\n    // Simplified implementation for now\n    return [0.15, 0.12, 0.10, 0.08, 0.06]; // Example declining growth rates\n  }\n\n  /**\n   * Estimate growth rate based on historical data\n   * @param {Object} financials - Financial statements data\n   * @returns {number} Estimated growth rate\n   */\n  estimateGrowthRate(financials) {\n    // Simplified growth rate estimation\n    // In practice, this would analyze multiple years of data\n    return 0.10; // 10% default growth rate\n  }\n\n  /**\n   * Calculate peer average multiple\n   * @param {Object} peerData - Peer comparison data\n   * @returns {number} Average peer multiple\n   */\n  calculatePeerAverageMultiple(peerData) {\n    if (!peerData || !peerData.peers) {\n      return 10; // Default multiple\n    }\n\n    const multiples = peerData.peers\n      .map(peer => peer.evToEbitda)\n      .filter(multiple => multiple && multiple > 0);\n\n    if (multiples.length === 0) {\n      return 10;\n    }\n\n    return multiples.reduce((sum, multiple) => sum + multiple, 0) / multiples.length;\n  }\n}\n\n// Export singleton instance\nexport const dataFetchingService = new DataFetchingService();\nexport default DataFetchingService;\n"],"names":["apiKeyValidator","constructor","this","validationResults","Map","lastValidation","validateAllKeys","results","timestamp","Date","overall","services","recommendations","validationPromises","validateAlphaVantage","validateFMP","validateQuandl","undefined","validateFRED","alphaVantage","fmp","quandl","fred","Promise","allSettled","processValidationResult","validServices","Object","values","filter","s","status","length","configuredServices","totalServices","keys","push","error","message","apiKey","response","axios","get","params","function","symbol","apikey","timeout","data","code","Array","isArray","api_key","rows","quandl_error","dataset","series_id","file_type","error_message","seriess","result","value","reason","getServiceStatus","serviceName","getOverallStatus","getRecommendations","shouldUseDemoMode","DATA_SOURCES","RATE_LIMITS","ALPHA_VANTAGE","requests","period","FMP","SEC_EDGAR","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","exponentialBase","jitterFactor","retryableStatusCodes","retryableErrors","CIRCUIT_BREAKER_CONFIG","failureThreshold","recoveryTimeout","monitoringPeriod","halfOpenMaxCalls","CIRCUIT_STATES","CircuitBreaker","name","config","state","failureCount","lastFailureTime","halfOpenCallCount","successCount","totalCalls","canExecute","now","recordSuccess","recordFailure","getStatus","failureRate","isOpen","nextRetryTime","execute","fn","Error","circuitBreakerOpen","RetryManager","calculateDelay","attempt","exponentialDelay","Math","pow","delay","random","min","isRetryableError","includes","executeWithRetry","operation","lastError","resolve","setTimeout","dataFetchingService","env","__vite_import_meta_env__","customRateLimits","retryConfig","circuitBreakerConfig","rateLimiters","cache","cacheExpiry","demoMode","isDemoMode","retryManager","circuitBreakers","initializeCircuitBreakers","logger","apiLogger","initializeRateLimiters","log","environment","VITE_APP_ENV","VITE_FORCE_DEMO_MODE","VITE_ALPHA_VANTAGE_API_KEY","VITE_FMP_API_KEY","forEach","source","rateLimits","limit","checkRateLimit","limiter","time","oldestRequest","waitTime","logRateLimit","ceil","getCacheKey","method","JSON","stringify","getFromCache","key","expiry","delete","logCache","cached","size","setCache","ttlMinutes","set","expiresAt","toISOString","generateMockData","ticker","dataType","basePrice","marketCap","companyNames","AAPL","MSFT","GOOGL","AMZN","META","TSLA","NVDA","companyName","mktCap","pe","pb","beta","sector","industry","sharesOutstanding","enterpriseValueOverEBITDA","debtToEquity","revenueTTM","grossProfitMargin","netProfitMargin","returnOnEquityTTM","returnOnAssetsTTM","effectiveTaxRateTTM","fullTimeEmployees","ipoDate","range","toFixed","currentPrice","previousClose","volume","currency","revenue","ebitda","netIncome","capex","interestExpense","totalDebt","cashAndCashEquivalents","totalCurrentAssets","totalCurrentLiabilities","freeCashFlow","fetchCompanyProfile","cacheKey","mockData","async","requestId","logApiRequest","profile","logApiResponse","profileFound","catch","fetchFinancialStatements","statement","replace","fetchMarketData","interval","chart","marketData","meta","regularMarketPrice","regularMarketVolume","timestamps","prices","indicators","quote","fetchMarketDataAlternative","parseFloat","parseInt","change","changePercent","fetchSECFilings","filingType","count","form","filingDate","accessionNumber","reportDate","acceptanceDateTime","act","primaryDocument","toLowerCase","url","fetchPeerComparables","industryCode","peers","t","slice","map","peerTicker","peRatio","evToEbitda","priceToBook","peerTickers","validPeers","peerProfile","peerMarket","fetchDCFInputs","incomeStatements","balanceSheets","cashFlows","all","revenues","stmt","reverse","revenueGrowthRates","i","avgRevenueGrowth","reduce","a","b","latestCashFlow","latestIncome","fcfMargin","riskFreeRate","marketPremium","costOfEquity","latestBalance","debtRatio","wacc","currentRevenue","revenueGrowthRate","terminalGrowthRate","cash","historicalData","freeCashFlows","cf","margins","fetchLBOInputs","currentEV","evEbitdaMultiple","peerEvEbitdaMultiples","peer","avgPeerMultiple","enterpriseValue","workingCapital","abs","debtToEbitda","interestCoverage","suggestedPurchasePrice","maxDebtCapacity","validateTicker","getApiStatus","metrics","getMetrics","cacheSize","validation","getCircuitBreakerStatus","performance","uptime","totalRequests","total","service","totalErrors","averageResponseTime","calculateAverageResponseTime","cacheHitRate","calculateCacheHitRate","availableKeys","totalDuration","duration","round","hits","hit","miss","getRecentLogs","level","clearMetrics","clear","validateApiKeys","buildAdvancedDCFModel","assumptions","scenarios","financials","dcfInputs","price","historicalGrowthRates","calculateHistoricalGrowthRates","ebitdaMargin","balanceSheetData","calculateWACC","estimateGrowthRate","dcfModel","financialModelingEngine","buildDCFModel","baseCase","pricePerShare","buildAdvancedLBOModel","transactionInputs","peerData","fetchPeerComparison","lboInputs","purchasePrice","exit","exitMultiple","calculatePeerAverageMultiple","lboModel","lboModelingEngine","buildLBOModel","returnsAnalysis","irr","multiples","multiple","sum"],"mappings":"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"}
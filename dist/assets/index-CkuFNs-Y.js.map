{"version":3,"file":"index-CkuFNs-Y.js","sources":["../../src/components/ui/Select.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/ResultsVisualizationPanel.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/ScenarioConfigPanel.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/SimulationControlBar.jsx","../../src/pages/scenario-analysis-sensitivity-tools/components/StatisticalSummaryTable.jsx","../../src/pages/scenario-analysis-sensitivity-tools/index.jsx"],"sourcesContent":["// components/ui/Select.jsx - Shadcn style Select\nimport { ChevronDown, Check, Search, X } from 'lucide-react';\nimport React, { useState } from 'react';\n\nimport { cn } from '../../utils/cn';\n\nimport Button from './Button';\nimport Input from './Input';\n\nconst Select = React.forwardRef(\n  (\n    {\n      className,\n      options = [],\n      value,\n      defaultValue,\n      placeholder = 'Select an option',\n      multiple = false,\n      disabled = false,\n      required = false,\n      label,\n      description,\n      error,\n      searchable = false,\n      clearable = false,\n      loading = false,\n      id,\n      name,\n      onChange,\n      onOpenChange,\n      ...props\n    },\n    ref\n  ) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    // Generate unique ID if not provided\n    const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Filter options based on search\n    const filteredOptions =\n      searchable && searchTerm\n        ? options.filter(\n            option =>\n              option.label.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              (option.value &&\n                option.value.toString().toLowerCase().includes(searchTerm.toLowerCase()))\n          )\n        : options;\n\n    // Get selected option(s) for display\n    const getSelectedDisplay = () => {\n      if (!value) return placeholder;\n\n      if (multiple) {\n        const selectedOptions = options.filter(opt => value.includes(opt.value));\n        if (selectedOptions.length === 0) return placeholder;\n        if (selectedOptions.length === 1) return selectedOptions[0].label;\n        return `${selectedOptions.length} items selected`;\n      }\n\n      const selectedOption = options.find(opt => opt.value === value);\n      return selectedOption ? selectedOption.label : placeholder;\n    };\n\n    const handleToggle = () => {\n      if (!disabled) {\n        const newIsOpen = !isOpen;\n        setIsOpen(newIsOpen);\n        onOpenChange?.(newIsOpen);\n        if (!newIsOpen) {\n          setSearchTerm('');\n        }\n      }\n    };\n\n    const handleOptionSelect = option => {\n      if (multiple) {\n        const newValue = value || [];\n        const updatedValue = newValue.includes(option.value)\n          ? newValue.filter(v => v !== option.value)\n          : [...newValue, option.value];\n        onChange?.(updatedValue);\n      } else {\n        onChange?.(option.value);\n        setIsOpen(false);\n        onOpenChange?.(false);\n      }\n    };\n\n    const handleClear = e => {\n      e.stopPropagation();\n      onChange?.(multiple ? [] : '');\n    };\n\n    const handleSearchChange = e => {\n      setSearchTerm(e.target.value);\n    };\n\n    const isSelected = optionValue => {\n      if (multiple) {\n        return value?.includes(optionValue) || false;\n      }\n      return value === optionValue;\n    };\n\n    const hasValue = multiple ? value?.length > 0 : value !== undefined && value !== '';\n\n    return (\n      <div className={cn('relative', className)}>\n        {label && (\n          <label\n            htmlFor={selectId}\n            className={cn(\n              'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-2 block',\n              error ? 'text-destructive' : 'text-foreground'\n            )}\n          >\n            {label}\n            {required && <span className=\"text-destructive ml-1\">*</span>}\n          </label>\n        )}\n\n        <div className=\"relative\">\n          <button\n            ref={ref}\n            id={selectId}\n            type=\"button\"\n            className={cn(\n              'flex h-10 w-full items-center justify-between rounded-md border border-input bg-white text-black px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n              error && 'border-destructive focus:ring-destructive',\n              !hasValue && 'text-muted-foreground'\n            )}\n            onClick={handleToggle}\n            disabled={disabled}\n            aria-expanded={isOpen}\n            aria-haspopup=\"listbox\"\n            {...props}\n          >\n            <span className=\"truncate\">{getSelectedDisplay()}</span>\n\n            <div className=\"flex items-center gap-1\">\n              {loading && (\n                <svg className=\"animate-spin h-4 w-4\" viewBox=\"0 0 24 24\">\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                    fill=\"none\"\n                  />\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  />\n                </svg>\n              )}\n\n              {clearable && hasValue && !loading && (\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-4 w-4\" onClick={handleClear}>\n                  <X className=\"h-3 w-3\" />\n                </Button>\n              )}\n\n              <ChevronDown className={cn('h-4 w-4 transition-transform', isOpen && 'rotate-180')} />\n            </div>\n          </button>\n\n          {/* Hidden native select for form submission */}\n          <select\n            name={name}\n            value={value || ''}\n            onChange={() => {}} // Controlled by our custom logic\n            className=\"sr-only\"\n            tabIndex={-1}\n            multiple={multiple}\n            required={required}\n          >\n            <option value=\"\">Select...</option>\n            {options.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n\n          {/* Dropdown */}\n          {isOpen && (\n            <div className=\"absolute z-50 w-full mt-1 bg-white text-black border border-border rounded-md shadow-md\">\n              {searchable && (\n                <div className=\"p-2 border-b\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search options...\"\n                      value={searchTerm}\n                      onChange={handleSearchChange}\n                      className=\"pl-8\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div className=\"py-1 max-h-60 overflow-auto\">\n                {filteredOptions.length === 0 ? (\n                  <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n                    {searchTerm ? 'No options found' : 'No options available'}\n                  </div>\n                ) : (\n                  filteredOptions.map(option => (\n                    <div\n                      key={option.value}\n                      className={cn(\n                        'relative flex cursor-pointer select-none items-center rounded-sm px-3 py-2 text-sm outline-none hover:bg-accent hover:text-accent-foreground',\n                        isSelected(option.value) && 'bg-primary text-primary-foreground',\n                        option.disabled && 'pointer-events-none opacity-50'\n                      )}\n                      onClick={() => !option.disabled && handleOptionSelect(option)}\n                    >\n                      <span className=\"flex-1\">{option.label}</span>\n                      {multiple && isSelected(option.value) && <Check className=\"h-4 w-4\" />}\n                      {option.description && (\n                        <span className=\"text-xs text-muted-foreground ml-2\">\n                          {option.description}\n                        </span>\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {description && !error && (\n          <p className=\"text-sm text-muted-foreground mt-1\">{description}</p>\n        )}\n\n        {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n      </div>\n    );\n  }\n);\n\nSelect.displayName = 'Select';\n\nexport default Select;\n","import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  Line,\n  Area,\n  AreaChart\n} from 'recharts';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst ResultsVisualizationPanel = ({ simulationResults, isSimulating }) => {\n  const [activeChart, setActiveChart] = useState('distribution');\n  const [selectedMetric, setSelectedMetric] = useState('enterprise_value');\n\n  // Mock simulation results data\n  const mockResults = {\n    summary: {\n      mean: 2847.5,\n      median: 2823.1,\n      stdDev: 456.2,\n      min: 1654.3,\n      max: 4521.8,\n      percentile5: 2156.7,\n      percentile95: 3687.4,\n      iterations: 10000\n    },\n    distribution: Array.from({ length: 50 }, (_, i) => ({\n      value: 1500 + i * 60,\n      frequency: Math.max(0, Math.round(200 * Math.exp(-Math.pow((i - 25) / 10, 2))))\n    })),\n    tornado: [\n      { variable: 'Revenue Growth', impact: 847.2, direction: 'positive' },\n      { variable: 'Terminal Growth', impact: 623.8, direction: 'positive' },\n      { variable: 'WACC', impact: -567.4, direction: 'negative' },\n      { variable: 'Margin Expansion', impact: 445.6, direction: 'positive' },\n      { variable: 'CapEx Ratio', impact: -334.2, direction: 'negative' },\n      { variable: 'Working Capital', impact: -187.9, direction: 'negative' }\n    ],\n    scatter: Array.from({ length: 1000 }, (_, i) => ({\n      revenueGrowth: 0.05 + Math.random() * 0.3,\n      enterpriseValue: 1800 + Math.random() * 2000 + (Math.random() - 0.5) * 500\n    })),\n    timeSeries: Array.from({ length: 20 }, (_, i) => ({\n      iteration: (i + 1) * 500,\n      mean: 2800 + Math.sin(i * 0.5) * 50 + Math.random() * 20,\n      confidence95: 3600 + Math.sin(i * 0.5) * 60 + Math.random() * 30,\n      confidence5: 2000 + Math.sin(i * 0.5) * 40 + Math.random() * 20\n    }))\n  };\n\n  const results = simulationResults || mockResults;\n\n  const chartTypes = [\n    { value: 'distribution', label: 'Distribution', icon: 'BarChart3' },\n    { value: 'tornado', label: 'Tornado Chart', icon: 'BarChart2' },\n    { value: 'scatter', label: 'Scatter Plot', icon: 'Scatter3D' },\n    { value: 'convergence', label: 'Convergence', icon: 'TrendingUp' }\n  ];\n\n  const metricOptions = [\n    { value: 'enterprise_value', label: 'Enterprise Value ($M)' },\n    { value: 'equity_value', label: 'Equity Value ($M)' },\n    { value: 'share_price', label: 'Share Price ($)' },\n    { value: 'irr', label: 'Internal Rate of Return (%)' },\n    { value: 'multiple', label: 'EV/EBITDA Multiple' }\n  ];\n\n  const exportOptions = [\n    { value: 'pdf', label: 'PDF Report' },\n    { value: 'excel', label: 'Excel Workbook' },\n    { value: 'csv', label: 'CSV Data' },\n    { value: 'png', label: 'PNG Image' }\n  ];\n\n  const renderDistributionChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Value Distribution</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ZoomIn\" />\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"ZoomOut\" />\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"RotateCcw\" />\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={results.distribution}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"value\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <YAxis stroke=\"var(--color-muted-foreground)\" fontSize={12} />\n            <Tooltip\n              formatter={(value, name) => [`${value} simulations`, 'Frequency']}\n              labelFormatter={value => `Value: $${(value / 1000).toFixed(1)}B`}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Bar dataKey=\"frequency\" fill=\"var(--color-primary)\" radius={[2, 2, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderTornadoChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Sensitivity Analysis</h3>\n        <Select\n          options={[\n            { value: 'absolute', label: 'Absolute Impact' },\n            { value: 'percentage', label: 'Percentage Impact' }\n          ]}\n          value=\"absolute\"\n          onChange={() => {}}\n          className=\"w-40\"\n        />\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={results.tornado} layout=\"horizontal\" margin={{ left: 100 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              type=\"number\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${Math.abs(value).toFixed(0)}M`}\n            />\n            <YAxis\n              type=\"category\"\n              dataKey=\"variable\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              width={90}\n            />\n            <Tooltip\n              formatter={(value, name) => [`$${Math.abs(value).toFixed(1)}M`, 'Impact']}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Bar\n              dataKey=\"impact\"\n              fill={entry =>\n                entry.direction === 'positive' ? 'var(--color-success)' : 'var(--color-error)'\n              }\n              radius={[0, 2, 2, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderScatterChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Variable Correlation</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Select\n            options={[\n              { value: 'revenue_growth', label: 'Revenue Growth' },\n              { value: 'margin_expansion', label: 'Margin Expansion' },\n              { value: 'terminal_growth', label: 'Terminal Growth' }\n            ]}\n            value=\"revenue_growth\"\n            onChange={() => {}}\n            className=\"w-40\"\n          />\n          <span className=\"text-sm text-muted-foreground\">vs</span>\n          <Select\n            options={metricOptions}\n            value={selectedMetric}\n            onChange={setSelectedMetric}\n            className=\"w-40\"\n          />\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ScatterChart data={results.scatter}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"revenueGrowth\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `${(value * 100).toFixed(0)}%`}\n            />\n            <YAxis\n              dataKey=\"enterpriseValue\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <Tooltip\n              formatter={(value, name) => [\n                name === 'revenueGrowth'\n                  ? `${(value * 100).toFixed(1)}%`\n                  : `$${(value / 1000).toFixed(1)}B`,\n                name === 'revenueGrowth' ? 'Revenue Growth' : 'Enterprise Value'\n              ]}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Scatter dataKey=\"enterpriseValue\" fill=\"var(--color-secondary)\" fillOpacity={0.6} />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  const renderConvergenceChart = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Monte Carlo Convergence</h3>\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n          <Icon name=\"TrendingUp\" size={16} />\n          <span>Convergence achieved at 8,500 iterations</span>\n        </div>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={results.timeSeries}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--color-border)\" />\n            <XAxis\n              dataKey=\"iteration\"\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `${(value / 1000).toFixed(0)}K`}\n            />\n            <YAxis\n              stroke=\"var(--color-muted-foreground)\"\n              fontSize={12}\n              tickFormatter={value => `$${(value / 1000).toFixed(1)}B`}\n            />\n            <Tooltip\n              formatter={(value, name) => [`$${(value / 1000).toFixed(2)}B`, name]}\n              labelFormatter={value => `Iteration: ${value.toLocaleString()}`}\n              contentStyle={{\n                backgroundColor: 'var(--color-popover)',\n                border: '1px solid var(--color-border)',\n                borderRadius: '8px'\n              }}\n            />\n            <Area\n              dataKey=\"confidence95\"\n              stroke=\"var(--color-primary)\"\n              fill=\"var(--color-primary)\"\n              fillOpacity={0.1}\n            />\n            <Area\n              dataKey=\"confidence5\"\n              stroke=\"var(--color-primary)\"\n              fill=\"var(--color-background)\"\n              fillOpacity={1}\n            />\n            <Line dataKey=\"mean\" stroke=\"var(--color-primary)\" strokeWidth={2} dot={false} />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col bg-card\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Simulation Results</h2>\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={metricOptions}\n              value={selectedMetric}\n              onChange={setSelectedMetric}\n              className=\"w-48\"\n              disabled={isSimulating}\n            />\n            <Select\n              options={exportOptions}\n              value=\"pdf\"\n              onChange={() => {}}\n              className=\"w-32\"\n              disabled={isSimulating}\n            />\n            <Button variant=\"outline\" iconName=\"Download\" disabled={isSimulating}>\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Type Selector */}\n      <div className=\"border-b border-border\">\n        <div className=\"flex\">\n          {chartTypes.map(chart => (\n            <button\n              key={chart.value}\n              onClick={() => setActiveChart(chart.value)}\n              className={`flex items-center space-x-2 px-6 py-3 text-sm font-medium transition-smooth ${\n                activeChart === chart.value\n                  ? 'border-b-2 border-primary text-primary'\n                  : 'text-muted-foreground hover:text-foreground'\n              }`}\n              disabled={isSimulating}\n            >\n              <Icon name={chart.icon} size={16} />\n              <span>{chart.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Results Summary */}\n      <div className=\"p-6 border-b border-border bg-muted/30\">\n        <div className=\"grid grid-cols-6 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ${(results.summary.mean / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Mean Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ${(results.summary.median / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Median Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              ±${(results.summary.stdDev / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Std Deviation</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-success\">\n              ${(results.summary.percentile95 / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">95th Percentile</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-error\">\n              ${(results.summary.percentile5 / 1000).toFixed(1)}B\n            </div>\n            <div className=\"text-sm text-muted-foreground\">5th Percentile</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              {results.summary.iterations.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Iterations</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {isSimulating ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n              <div className=\"text-lg font-medium text-foreground\">Running Simulation...</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Calculating Monte Carlo scenarios with {results.summary.iterations.toLocaleString()}{' '}\n                iterations\n              </div>\n            </div>\n          </div>\n        ) : (\n          <>\n            {activeChart === 'distribution' && renderDistributionChart()}\n            {activeChart === 'tornado' && renderTornadoChart()}\n            {activeChart === 'scatter' && renderScatterChart()}\n            {activeChart === 'convergence' && renderConvergenceChart()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsVisualizationPanel;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst ScenarioConfigPanel = ({ onScenarioUpdate, isSimulating }) => {\n  const [activeTab, setActiveTab] = useState('variables');\n  const [scenarios, setScenarios] = useState([\n    {\n      id: 1,\n      name: 'Base Case',\n      probability: 0.4,\n      variables: {\n        revenueGrowth: 0.15,\n        marginExpansion: 0.02,\n        capexRatio: 0.08,\n        terminalGrowth: 0.025\n      }\n    },\n    {\n      id: 2,\n      name: 'Bull Case',\n      probability: 0.3,\n      variables: {\n        revenueGrowth: 0.25,\n        marginExpansion: 0.05,\n        capexRatio: 0.06,\n        terminalGrowth: 0.035\n      }\n    },\n    {\n      id: 3,\n      name: 'Bear Case',\n      probability: 0.3,\n      variables: {\n        revenueGrowth: 0.05,\n        marginExpansion: -0.01,\n        capexRatio: 0.12,\n        terminalGrowth: 0.015\n      }\n    }\n  ]);\n\n  const [selectedScenario, setSelectedScenario] = useState(scenarios[0]);\n  const [correlationMatrix, setCorrelationMatrix] = useState([\n    { var1: 'Revenue Growth', var2: 'Margin Expansion', correlation: 0.65 },\n    { var1: 'Revenue Growth', var2: 'CapEx Ratio', correlation: -0.45 },\n    { var1: 'Margin Expansion', var2: 'Terminal Growth', correlation: 0.35 }\n  ]);\n\n  const distributionTypes = [\n    { value: 'normal', label: 'Normal Distribution' },\n    { value: 'triangular', label: 'Triangular Distribution' },\n    { value: 'uniform', label: 'Uniform Distribution' },\n    { value: 'lognormal', label: 'Log-Normal Distribution' }\n  ];\n\n  const variableTemplates = [\n    { value: 'dcf_standard', label: 'DCF Standard Variables' },\n    { value: 'lbo_analysis', label: 'LBO Analysis Variables' },\n    { value: 'comps_analysis', label: 'Comparable Analysis Variables' },\n    { value: 'custom', label: 'Custom Variable Set' }\n  ];\n\n  const tabs = [\n    { id: 'variables', label: 'Variables', icon: 'Settings' },\n    { id: 'distributions', label: 'Distributions', icon: 'BarChart3' },\n    { id: 'correlations', label: 'Correlations', icon: 'Network' },\n    { id: 'templates', label: 'Templates', icon: 'FileTemplate' }\n  ];\n\n  const handleVariableChange = (variableName, value) => {\n    const updatedScenario = {\n      ...selectedScenario,\n      variables: {\n        ...selectedScenario.variables,\n        [variableName]: parseFloat(value)\n      }\n    };\n    setSelectedScenario(updatedScenario);\n\n    const updatedScenarios = scenarios.map(s =>\n      s.id === selectedScenario.id ? updatedScenario : s\n    );\n    setScenarios(updatedScenarios);\n    onScenarioUpdate(updatedScenarios);\n  };\n\n  const addNewScenario = () => {\n    const newScenario = {\n      id: scenarios.length + 1,\n      name: `Scenario ${scenarios.length + 1}`,\n      probability: 0.1,\n      variables: { ...selectedScenario.variables }\n    };\n    setScenarios([...scenarios, newScenario]);\n  };\n\n  const renderVariablesTab = () => (\n    <div className=\"space-y-6\">\n      {/* Scenario Selector */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Scenario Configuration</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={addNewScenario}\n            disabled={isSimulating}\n          >\n            Add Scenario\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-2\">\n          {scenarios.map(scenario => (\n            <button\n              key={scenario.id}\n              onClick={() => setSelectedScenario(scenario)}\n              className={`p-3 rounded-lg border text-left transition-smooth ${\n                selectedScenario.id === scenario.id\n                  ? 'border-primary bg-primary/5 text-primary'\n                  : 'border-border hover:border-primary/50'\n              }`}\n              disabled={isSimulating}\n            >\n              <div className=\"font-medium text-sm\">{scenario.name}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                P: {(scenario.probability * 100).toFixed(0)}%\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Variable Inputs */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Key Variables</h4>\n        <div className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Revenue Growth Rate\"\n              type=\"number\"\n              value={selectedScenario.variables.revenueGrowth}\n              onChange={e => handleVariableChange('revenueGrowth', e.target.value)}\n              placeholder=\"0.15\"\n              disabled={isSimulating}\n              description=\"Annual revenue growth rate\"\n            />\n            <Input\n              label=\"Margin Expansion\"\n              type=\"number\"\n              value={selectedScenario.variables.marginExpansion}\n              onChange={e => handleVariableChange('marginExpansion', e.target.value)}\n              placeholder=\"0.02\"\n              disabled={isSimulating}\n              description=\"EBITDA margin improvement\"\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"CapEx Ratio\"\n              type=\"number\"\n              value={selectedScenario.variables.capexRatio}\n              onChange={e => handleVariableChange('capexRatio', e.target.value)}\n              placeholder=\"0.08\"\n              disabled={isSimulating}\n              description=\"CapEx as % of revenue\"\n            />\n            <Input\n              label=\"Terminal Growth Rate\"\n              type=\"number\"\n              value={selectedScenario.variables.terminalGrowth}\n              onChange={e => handleVariableChange('terminalGrowth', e.target.value)}\n              placeholder=\"0.025\"\n              disabled={isSimulating}\n              description=\"Long-term growth rate\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Probability Weights */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Probability Weights</h4>\n        <div className=\"space-y-2\">\n          {scenarios.map(scenario => (\n            <div\n              key={scenario.id}\n              className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n            >\n              <span className=\"font-medium text-sm\">{scenario.name}</span>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"number\"\n                  value={scenario.probability}\n                  onChange={e => {\n                    const updatedScenarios = scenarios.map(s =>\n                      s.id === scenario.id ? { ...s, probability: parseFloat(e.target.value) } : s\n                    );\n                    setScenarios(updatedScenarios);\n                  }}\n                  className=\"w-20\"\n                  disabled={isSimulating}\n                />\n                <span className=\"text-sm text-muted-foreground\">%</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDistributionsTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Distribution Parameters</h3>\n\n      <div className=\"space-y-4\">\n        {Object.keys(selectedScenario.variables).map(variable => (\n          <div key={variable} className=\"p-4 border border-border rounded-lg space-y-3\">\n            <h4 className=\"font-medium text-foreground capitalize\">\n              {variable.replace(/([A-Z])/g, ' $1').trim()}\n            </h4>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Select\n                label=\"Distribution Type\"\n                options={distributionTypes}\n                value=\"normal\"\n                onChange={() => {}}\n                disabled={isSimulating}\n              />\n              <Input\n                label=\"Standard Deviation\"\n                type=\"number\"\n                placeholder=\"0.05\"\n                disabled={isSimulating}\n                description=\"Volatility parameter\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Input label=\"Min Value\" type=\"number\" placeholder=\"-0.1\" disabled={isSimulating} />\n              <Input\n                label=\"Most Likely\"\n                type=\"number\"\n                value={selectedScenario.variables[variable]}\n                disabled={isSimulating}\n              />\n              <Input label=\"Max Value\" type=\"number\" placeholder=\"0.5\" disabled={isSimulating} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderCorrelationsTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Variable Correlations</h3>\n\n      <div className=\"space-y-4\">\n        {correlationMatrix.map((correlation, index) => (\n          <div\n            key={index}\n            className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n          >\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm\">{correlation.var1}</div>\n              <div className=\"text-xs text-muted-foreground\">vs {correlation.var2}</div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"number\"\n                value={correlation.correlation}\n                onChange={e => {\n                  const updatedMatrix = correlationMatrix.map((c, i) =>\n                    i === index ? { ...c, correlation: parseFloat(e.target.value) } : c\n                  );\n                  setCorrelationMatrix(updatedMatrix);\n                }}\n                className=\"w-24\"\n                disabled={isSimulating}\n                min=\"-1\"\n                max=\"1\"\n                step=\"0.01\"\n              />\n              <div\n                className={`w-3 h-3 rounded-full ${\n                  correlation.correlation > 0.5\n                    ? 'bg-success'\n                    : correlation.correlation < -0.5\n                      ? 'bg-error'\n                      : 'bg-warning'\n                }`}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <Button variant=\"outline\" iconName=\"Plus\" disabled={isSimulating} className=\"w-full\">\n        Add Correlation Pair\n      </Button>\n    </div>\n  );\n\n  const renderTemplatesTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Scenario Templates</h3>\n\n      <Select\n        label=\"Load Template\"\n        options={variableTemplates}\n        value=\"dcf_standard\"\n        onChange={() => {}}\n        disabled={isSimulating}\n        description=\"Pre-configured variable sets for common analyses\"\n      />\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Template Actions</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Button variant=\"outline\" iconName=\"Download\" disabled={isSimulating} className=\"w-full\">\n            Import from Excel\n          </Button>\n          <Button variant=\"outline\" iconName=\"Upload\" disabled={isSimulating} className=\"w-full\">\n            Export Template\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Saved Templates</h4>\n        <div className=\"space-y-2\">\n          {['Tech Company DCF', 'REIT Analysis', 'Energy Sector Model'].map((template, index) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n            >\n              <div>\n                <div className=\"font-medium text-sm\">{template}</div>\n                <div className=\"text-xs text-muted-foreground\">Last modified: 2 days ago</div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" size=\"sm\" iconName=\"Eye\" disabled={isSimulating} />\n                <Button variant=\"ghost\" size=\"sm\" iconName=\"Download\" disabled={isSimulating} />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col bg-card border-r border-border\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Scenario Configuration</h2>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-2 h-2 rounded-full ${isSimulating ? 'bg-warning' : 'bg-success'}`} />\n            <span className=\"text-sm text-muted-foreground\">\n              {isSimulating ? 'Simulating...' : 'Ready'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-border\">\n        <div className=\"flex\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n                activeTab === tab.id\n                  ? 'border-b-2 border-primary text-primary'\n                  : 'text-muted-foreground hover:text-foreground'\n              }`}\n              disabled={isSimulating}\n            >\n              <Icon name={tab.icon} size={16} />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {activeTab === 'variables' && renderVariablesTab()}\n        {activeTab === 'distributions' && renderDistributionsTab()}\n        {activeTab === 'correlations' && renderCorrelationsTab()}\n        {activeTab === 'templates' && renderTemplatesTab()}\n      </div>\n    </div>\n  );\n};\n\nexport default ScenarioConfigPanel;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst SimulationControlBar = ({ onRunSimulation, isSimulating, progress, onStopSimulation }) => {\n  const [simulationParams, setSimulationParams] = useState({\n    iterations: 10000,\n    confidenceLevel: 0.95,\n    randomSeed: 12345,\n    method: 'monte_carlo'\n  });\n\n  const iterationOptions = [\n    { value: 1000, label: '1,000 iterations' },\n    { value: 5000, label: '5,000 iterations' },\n    { value: 10000, label: '10,000 iterations' },\n    { value: 25000, label: '25,000 iterations' },\n    { value: 50000, label: '50,000 iterations' },\n    { value: 100000, label: '100,000 iterations' }\n  ];\n\n  const methodOptions = [\n    { value: 'monte_carlo', label: 'Monte Carlo Simulation' },\n    { value: 'latin_hypercube', label: 'Latin Hypercube Sampling' },\n    { value: 'sobol_sequence', label: 'Sobol Sequence' },\n    { value: 'halton_sequence', label: 'Halton Sequence' }\n  ];\n\n  const confidenceOptions = [\n    { value: 0.9, label: '90% Confidence' },\n    { value: 0.95, label: '95% Confidence' },\n    { value: 0.99, label: '99% Confidence' }\n  ];\n\n  const handleRunSimulation = () => {\n    onRunSimulation(simulationParams);\n  };\n\n  const getEstimatedTime = () => {\n    const baseTime = simulationParams.iterations / 1000; // seconds per 1000 iterations\n    return baseTime < 60 ? `~${Math.ceil(baseTime)}s` : `~${Math.ceil(baseTime / 60)}m`;\n  };\n\n  return (\n    <div className=\"bg-card border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Left Section - Simulation Parameters */}\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={iterationOptions}\n              value={simulationParams.iterations}\n              onChange={value => setSimulationParams(prev => ({ ...prev, iterations: value }))}\n              disabled={isSimulating}\n              className=\"w-48\"\n            />\n\n            <Select\n              options={methodOptions}\n              value={simulationParams.method}\n              onChange={value => setSimulationParams(prev => ({ ...prev, method: value }))}\n              disabled={isSimulating}\n              className=\"w-56\"\n            />\n\n            <Select\n              options={confidenceOptions}\n              value={simulationParams.confidenceLevel}\n              onChange={value => setSimulationParams(prev => ({ ...prev, confidenceLevel: value }))}\n              disabled={isSimulating}\n              className=\"w-40\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              type=\"number\"\n              value={simulationParams.randomSeed}\n              onChange={e =>\n                setSimulationParams(prev => ({ ...prev, randomSeed: parseInt(e.target.value) }))\n              }\n              disabled={isSimulating}\n              className=\"w-24\"\n              placeholder=\"Seed\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Shuffle\"\n              onClick={() =>\n                setSimulationParams(prev => ({\n                  ...prev,\n                  randomSeed: Math.floor(Math.random() * 100000)\n                }))\n              }\n              disabled={isSimulating}\n              title=\"Generate random seed\"\n            />\n          </div>\n        </div>\n\n        {/* Center Section - Progress */}\n        {isSimulating && (\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-32 h-2 bg-muted rounded-full overflow-hidden\">\n                <div\n                  className=\"h-full bg-primary transition-all duration-300\"\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n              <span className=\"text-sm font-mono text-muted-foreground\">\n                {progress.toFixed(1)}%\n              </span>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\">\n              <span className=\"font-mono\">\n                {Math.floor((progress / 100) * simulationParams.iterations).toLocaleString()}\n              </span>\n              <span className=\"mx-1\">/</span>\n              <span className=\"font-mono\">{simulationParams.iterations.toLocaleString()}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Right Section - Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {!isSimulating && (\n            <div className=\"text-sm text-muted-foreground\">Est. time: {getEstimatedTime()}</div>\n          )}\n\n          <div className=\"flex items-center space-x-2\">\n            {isSimulating ? (\n              <Button variant=\"destructive\" iconName=\"Square\" onClick={onStopSimulation}>\n                Stop Simulation\n              </Button>\n            ) : (\n              <Button variant=\"default\" iconName=\"Play\" onClick={handleRunSimulation}>\n                Run Simulation\n              </Button>\n            )}\n\n            <Button\n              variant=\"outline\"\n              iconName=\"RotateCcw\"\n              disabled={isSimulating}\n              title=\"Reset parameters\"\n              onClick={() =>\n                setSimulationParams({\n                  iterations: 10000,\n                  confidenceLevel: 0.95,\n                  randomSeed: 12345,\n                  method: 'monte_carlo'\n                })\n              }\n            />\n\n            <Button\n              variant=\"outline\"\n              iconName=\"Settings\"\n              disabled={isSimulating}\n              title=\"Advanced settings\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Info Bar */}\n      <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border\">\n        <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Cpu\" size={16} />\n            <span>Web Workers: 4 active</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"MemoryStick\" size={16} />\n            <span>Memory: 245MB allocated</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={16} />\n            <span>Last run: 2 min ago</span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"Download\" disabled={isSimulating}>\n            Export Config\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"Upload\" disabled={isSimulating}>\n            Import Config\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"History\" disabled={isSimulating}>\n            Run History\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SimulationControlBar;\n","import React, { useState } from 'react';\n\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst StatisticalSummaryTable = ({ simulationResults, isSimulating }) => {\n  const [selectedMetric, setSelectedMetric] = useState('enterprise_value');\n  const [viewMode, setViewMode] = useState('summary');\n\n  // Mock statistical data\n  const mockStatistics = {\n    enterprise_value: {\n      descriptive: {\n        count: 10000,\n        mean: 2847.5,\n        median: 2823.1,\n        mode: 2798.3,\n        stdDev: 456.2,\n        variance: 208118.44,\n        skewness: 0.12,\n        kurtosis: 2.98,\n        min: 1654.3,\n        max: 4521.8,\n        range: 2867.5,\n        iqr: 615.7\n      },\n      percentiles: {\n        p1: 1876.4,\n        p5: 2156.7,\n        p10: 2287.9,\n        p25: 2534.2,\n        p50: 2823.1,\n        p75: 3149.9,\n        p90: 3456.8,\n        p95: 3687.4,\n        p99: 4123.6\n      },\n      confidence: {\n        ci90_lower: 2156.7,\n        ci90_upper: 3687.4,\n        ci95_lower: 2034.8,\n        ci95_upper: 3798.2,\n        ci99_lower: 1789.3,\n        ci99_upper: 4021.7\n      },\n      risk: {\n        var95: 1034.8,\n        var99: 1456.2,\n        cvar95: 1287.6,\n        cvar99: 1678.9,\n        probabilityOfLoss: 0.023,\n        expectedShortfall: 1456.8\n      }\n    }\n  };\n\n  const metricOptions = [\n    { value: 'enterprise_value', label: 'Enterprise Value ($M)' },\n    { value: 'equity_value', label: 'Equity Value ($M)' },\n    { value: 'share_price', label: 'Share Price ($)' },\n    { value: 'irr', label: 'Internal Rate of Return (%)' },\n    { value: 'multiple', label: 'EV/EBITDA Multiple' }\n  ];\n\n  const viewModeOptions = [\n    { value: 'summary', label: 'Summary Statistics' },\n    { value: 'percentiles', label: 'Percentile Analysis' },\n    { value: 'confidence', label: 'Confidence Intervals' },\n    { value: 'risk', label: 'Risk Metrics' }\n  ];\n\n  const statistics = simulationResults?.statistics || mockStatistics[selectedMetric];\n\n  const formatValue = (value, metric = selectedMetric) => {\n    if (metric === 'irr') return `${(value * 100).toFixed(2)}%`;\n    if (metric === 'multiple') return `${value.toFixed(2)}x`;\n    if (metric === 'share_price') return `$${value.toFixed(2)}`;\n    return `$${(value / 1000).toFixed(1)}B`;\n  };\n\n  const renderSummaryStatistics = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Descriptive Statistics</h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Central Tendency */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Central Tendency</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Mean</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.mean)}</span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Median</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.median)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Mode</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.mode)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Dispersion */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Dispersion</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Standard Deviation</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.stdDev)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Variance</span>\n              <span className=\"font-mono text-sm\">\n                {formatValue(statistics.descriptive.variance)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Range</span>\n              <span className=\"font-mono text-sm\">{formatValue(statistics.descriptive.range)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Shape */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Distribution Shape</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Skewness</span>\n              <span className=\"font-mono text-sm\">\n                {statistics.descriptive.skewness.toFixed(3)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Kurtosis</span>\n              <span className=\"font-mono text-sm\">\n                {statistics.descriptive.kurtosis.toFixed(3)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Extremes */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Extremes</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Minimum</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.descriptive.min)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n              <span className=\"text-sm font-medium\">Maximum</span>\n              <span className=\"font-mono text-sm text-success\">\n                {formatValue(statistics.descriptive.max)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPercentileAnalysis = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Percentile Analysis</h3>\n\n      <div className=\"space-y-4\">\n        {Object.entries(statistics.percentiles).map(([percentile, value]) => {\n          const pct = percentile.replace('p', '');\n          const isExtreme = pct === '1' || pct === '99';\n          const isQuartile = ['25', '50', '75'].includes(pct);\n\n          return (\n            <div\n              key={percentile}\n              className={`flex justify-between items-center p-4 rounded-lg border ${\n                isExtreme\n                  ? 'border-warning bg-warning/5'\n                  : isQuartile\n                    ? 'border-primary bg-primary/5'\n                    : 'border-border bg-muted'\n              }`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-sm font-medium\">\n                  {pct === '50' ? 'Median' : `${pct}th Percentile`}\n                </span>\n                {isQuartile && (\n                  <div className=\"px-2 py-1 bg-primary text-primary-foreground text-xs rounded\">\n                    Q{pct === '25' ? '1' : pct === '50' ? '2' : '3'}\n                  </div>\n                )}\n              </div>\n              <span className=\"font-mono text-sm font-medium\">{formatValue(value)}</span>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Interpretation</h4>\n        <div className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• 50% of outcomes fall below {formatValue(statistics.percentiles.p50)}</p>\n          <p>\n            • 90% of outcomes fall between {formatValue(statistics.percentiles.p5)} and{' '}\n            {formatValue(statistics.percentiles.p95)}\n          </p>\n          <p>• Interquartile range: {formatValue(statistics.descriptive.iqr)}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderConfidenceIntervals = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Confidence Intervals</h3>\n\n      <div className=\"space-y-4\">\n        {[\n          {\n            level: '90%',\n            lower: statistics.confidence.ci90_lower,\n            upper: statistics.confidence.ci90_upper\n          },\n          {\n            level: '95%',\n            lower: statistics.confidence.ci95_lower,\n            upper: statistics.confidence.ci95_upper\n          },\n          {\n            level: '99%',\n            lower: statistics.confidence.ci99_lower,\n            upper: statistics.confidence.ci99_upper\n          }\n        ].map(ci => (\n          <div key={ci.level} className=\"p-4 border border-border rounded-lg\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"font-medium text-foreground\">{ci.level} Confidence Interval</span>\n              <span className=\"text-sm text-muted-foreground\">\n                Width: {formatValue(ci.upper - ci.lower)}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Lower Bound</div>\n                <div className=\"font-mono text-sm font-medium text-error\">\n                  {formatValue(ci.lower)}\n                </div>\n              </div>\n              <div className=\"flex-1 mx-4\">\n                <div className=\"h-2 bg-muted rounded-full relative\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-error via-warning to-success rounded-full\" />\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Upper Bound</div>\n                <div className=\"font-mono text-sm font-medium text-success\">\n                  {formatValue(ci.upper)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderRiskMetrics = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-foreground\">Risk Assessment</h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Value at Risk */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Value at Risk (VaR)</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-error/10 border border-error/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">95% VaR</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.risk.var95)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-error/10 border border-error/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">99% VaR</span>\n              <span className=\"font-mono text-sm text-error\">\n                {formatValue(statistics.risk.var99)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Conditional VaR */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-foreground\">Conditional VaR (CVaR)</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">95% CVaR</span>\n              <span className=\"font-mono text-sm text-warning\">\n                {formatValue(statistics.risk.cvar95)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n              <span className=\"text-sm font-medium\">99% CVaR</span>\n              <span className=\"font-mono text-sm text-warning\">\n                {formatValue(statistics.risk.cvar99)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Risk Metrics */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-foreground\">Additional Risk Metrics</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n            <span className=\"text-sm font-medium\">Probability of Loss</span>\n            <span className=\"font-mono text-sm\">\n              {(statistics.risk.probabilityOfLoss * 100).toFixed(2)}%\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n            <span className=\"text-sm font-medium\">Expected Shortfall</span>\n            <span className=\"font-mono text-sm\">\n              {formatValue(statistics.risk.expectedShortfall)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Risk Interpretation</h4>\n        <div className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• There is a 5% chance of losing more than {formatValue(statistics.risk.var95)}</p>\n          <p>\n            • In the worst 5% of scenarios, average loss is {formatValue(statistics.risk.cvar95)}\n          </p>\n          <p>• Probability of any loss: {(statistics.risk.probabilityOfLoss * 100).toFixed(1)}%</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (isSimulating) {\n    return (\n      <div className=\"h-full flex items-center justify-center bg-card\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <div className=\"text-lg font-medium text-foreground\">Calculating Statistics...</div>\n          <div className=\"text-sm text-muted-foreground\">\n            Processing simulation results and computing risk metrics\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-card\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Statistical Analysis</h2>\n          <div className=\"flex items-center space-x-4\">\n            <Select\n              options={metricOptions}\n              value={selectedMetric}\n              onChange={setSelectedMetric}\n              className=\"w-48\"\n            />\n            <Select\n              options={viewModeOptions}\n              value={viewMode}\n              onChange={setViewMode}\n              className=\"w-48\"\n            />\n            <Button variant=\"outline\" iconName=\"Download\" size=\"sm\">\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {viewMode === 'summary' && renderSummaryStatistics()}\n        {viewMode === 'percentiles' && renderPercentileAnalysis()}\n        {viewMode === 'confidence' && renderConfidenceIntervals()}\n        {viewMode === 'risk' && renderRiskMetrics()}\n      </div>\n    </div>\n  );\n};\n\nexport default StatisticalSummaryTable;\n","import React, { useState, useEffect } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport ResultsVisualizationPanel from './components/ResultsVisualizationPanel';\nimport ScenarioConfigPanel from './components/ScenarioConfigPanel';\nimport SimulationControlBar from './components/SimulationControlBar';\nimport StatisticalSummaryTable from './components/StatisticalSummaryTable';\n\nconst ScenarioAnalysisSensitivityTools = () => {\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [simulationProgress, setSimulationProgress] = useState(0);\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [scenarios, setScenarios] = useState([]);\n  const [rightPanelView, setRightPanelView] = useState('visualization');\n  const [modelSyncStatus, setModelSyncStatus] = useState({\n    connected: true,\n    lastSync: new Date(Date.now() - 120000), // 2 minutes ago\n    baseModel: 'DCF_Analysis_v2.3'\n  });\n\n  // Simulate Monte Carlo calculation with Web Workers\n  const runSimulation = async params => {\n    setIsSimulating(true);\n    setSimulationProgress(0);\n    setSimulationResults(null);\n\n    // Simulate progress updates\n    const progressInterval = setInterval(() => {\n      setSimulationProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(progressInterval);\n          return 100;\n        }\n        return prev + Math.random() * 5;\n      });\n    }, 200);\n\n    // Simulate completion after progress reaches 100%\n    setTimeout(() => {\n      clearInterval(progressInterval);\n      setSimulationProgress(100);\n\n      // Mock results\n      const mockResults = {\n        summary: {\n          mean: 2847.5,\n          median: 2823.1,\n          stdDev: 456.2,\n          min: 1654.3,\n          max: 4521.8,\n          percentile5: 2156.7,\n          percentile95: 3687.4,\n          iterations: params.iterations\n        },\n        completedAt: new Date(),\n        parameters: params\n      };\n\n      setSimulationResults(mockResults);\n      setIsSimulating(false);\n    }, 8000);\n  };\n\n  const stopSimulation = () => {\n    setIsSimulating(false);\n    setSimulationProgress(0);\n  };\n\n  const handleScenarioUpdate = updatedScenarios => {\n    setScenarios(updatedScenarios);\n  };\n\n  const rightPanelViews = [\n    { id: 'visualization', label: 'Charts', icon: 'BarChart3' },\n    { id: 'statistics', label: 'Statistics', icon: 'Calculator' }\n  ];\n\n  useEffect(() => {\n    // Simulate model sync status updates\n    const syncInterval = setInterval(() => {\n      setModelSyncStatus(prev => ({\n        ...prev,\n        lastSync: new Date()\n      }));\n    }, 60000); // Update every minute\n\n    return () => clearInterval(syncInterval);\n  }, []);\n\n  const formatTimeAgo = date => {\n    const seconds = Math.floor((new Date() - date) / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <div className=\"pt-[60px] h-screen flex flex-col\">\n        {/* Simulation Control Bar */}\n        <SimulationControlBar\n          onRunSimulation={runSimulation}\n          isSimulating={isSimulating}\n          progress={simulationProgress}\n          onStopSimulation={stopSimulation}\n        />\n\n        {/* Model Sync Status Bar */}\n        <div className=\"bg-muted/50 border-b border-border px-6 py-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-2 h-2 rounded-full ${modelSyncStatus.connected ? 'bg-success' : 'bg-error'}`}\n                />\n                <span className=\"text-sm text-muted-foreground\">\n                  Base Model: {modelSyncStatus.baseModel}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"RefreshCw\" size={14} className=\"text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  Last sync: {formatTimeAgo(modelSyncStatus.lastSync)}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Users\" size={14} className=\"text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">3 collaborators active</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" iconName=\"Sync\" disabled={isSimulating}>\n                Sync Now\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" iconName=\"History\" disabled={isSimulating}>\n                Version History\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" iconName=\"Share2\" disabled={isSimulating}>\n                Share Analysis\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel - Scenario Configuration (40%) */}\n          <div className=\"w-2/5 min-w-[480px]\">\n            <ScenarioConfigPanel\n              onScenarioUpdate={handleScenarioUpdate}\n              isSimulating={isSimulating}\n            />\n          </div>\n\n          {/* Right Panel - Results (60%) */}\n          <div className=\"flex-1 flex flex-col\">\n            {/* Right Panel Header */}\n            <div className=\"bg-card border-b border-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-1\">\n                  {rightPanelViews.map(view => (\n                    <button\n                      key={view.id}\n                      onClick={() => setRightPanelView(view.id)}\n                      className={`flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-lg transition-smooth ${\n                        rightPanelView === view.id\n                          ? 'bg-primary text-primary-foreground'\n                          : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                      }`}\n                      disabled={isSimulating}\n                    >\n                      <Icon name={view.icon} size={16} />\n                      <span>{view.label}</span>\n                    </button>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  {simulationResults && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      Completed: {simulationResults.completedAt.toLocaleTimeString()}\n                    </div>\n                  )}\n                  <Button variant=\"ghost\" size=\"sm\" iconName=\"Maximize2\" title=\"Fullscreen view\" />\n                  <Button variant=\"ghost\" size=\"sm\" iconName=\"Settings\" title=\"Display settings\" />\n                </div>\n              </div>\n            </div>\n\n            {/* Right Panel Content */}\n            <div className=\"flex-1 overflow-hidden\">\n              {rightPanelView === 'visualization' ? (\n                <ResultsVisualizationPanel\n                  simulationResults={simulationResults}\n                  isSimulating={isSimulating}\n                />\n              ) : (\n                <StatisticalSummaryTable\n                  simulationResults={simulationResults}\n                  isSimulating={isSimulating}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Status Bar */}\n        <div className=\"bg-muted/30 border-t border-border px-6 py-2\">\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-6\">\n              <span>Scenarios: {scenarios.length}</span>\n              <span>Variables: 4 active</span>\n              <span>Correlations: 3 defined</span>\n              {simulationResults && (\n                <span>Iterations: {simulationResults.summary.iterations.toLocaleString()}</span>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <span>© {new Date().getFullYear()} FinanceAnalyst Pro</span>\n              <span>•</span>\n              <span>SOX Compliant</span>\n              <span>•</span>\n              <span>Audit Trail: Enabled</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScenarioAnalysisSensitivityTools;\n"],"names":["Select","React","forwardRef","className","options","value","defaultValue","placeholder","multiple","disabled","required","label","description","error","searchable","clearable","loading","id","name","onChange","onOpenChange","props","ref","isOpen","setIsOpen","useState","searchTerm","setSearchTerm","selectId","Math","random","toString","substr","filteredOptions","filter","option","toLowerCase","includes","isSelected","optionValue","hasValue","length","cn","children","jsxs","htmlFor","jsx","type","onClick","newIsOpen","selectedOptions","opt","selectedOption","find","getSelectedDisplay","viewBox","cx","cy","r","stroke","strokeWidth","fill","d","Button","variant","size","e","stopPropagation","X","ChevronDown","tabIndex","map","Search","Input","target","newValue","updatedValue","v","handleOptionSelect","Check","displayName","ResultsVisualizationPanel","simulationResults","isSimulating","activeChart","setActiveChart","selectedMetric","setSelectedMetric","mockResults","summary","mean","median","stdDev","percentile5","percentile95","iterations","distribution","Array","from","_","i","frequency","max","round","exp","pow","tornado","variable","impact","direction","scatter","revenueGrowth","enterpriseValue","timeSeries","iteration","sin","confidence95","confidence5","results","metricOptions","iconName","icon","chart","Icon","toFixed","toLocaleString","Fragment","ResponsiveContainer","width","height","BarChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","fontSize","tickFormatter","YAxis","Tooltip","formatter","labelFormatter","contentStyle","backgroundColor","border","borderRadius","Bar","radius","layout","margin","left","abs","entry","ScatterChart","Scatter","fillOpacity","AreaChart","Area","Line","dot","ScenarioConfigPanel","onScenarioUpdate","activeTab","setActiveTab","scenarios","setScenarios","probability","variables","marginExpansion","capexRatio","terminalGrowth","selectedScenario","setSelectedScenario","correlationMatrix","setCorrelationMatrix","var1","var2","correlation","distributionTypes","variableTemplates","handleVariableChange","variableName","updatedScenario","parseFloat","updatedScenarios","s","addNewScenario","newScenario","tab","scenario","keys","replace","trim","index","updatedMatrix","c","min","step","template","SimulationControlBar","onRunSimulation","progress","onStopSimulation","simulationParams","setSimulationParams","confidenceLevel","randomSeed","method","prev","parseInt","floor","title","style","baseTime","ceil","getEstimatedTime","StatisticalSummaryTable","viewMode","setViewMode","statistics","enterprise_value","descriptive","count","mode","variance","skewness","kurtosis","range","iqr","percentiles","p1","p5","p10","p25","p50","p75","p90","p95","p99","confidence","ci90_lower","ci90_upper","ci95_lower","ci95_upper","ci99_lower","ci99_upper","risk","var95","var99","cvar95","cvar99","probabilityOfLoss","expectedShortfall","formatValue","metric","entries","percentile","pct","isExtreme","isQuartile","level","lower","upper","ci","ScenarioAnalysisSensitivityTools","setIsSimulating","simulationProgress","setSimulationProgress","setSimulationResults","rightPanelView","setRightPanelView","modelSyncStatus","setModelSyncStatus","connected","lastSync","Date","now","baseModel","useEffect","syncInterval","setInterval","clearInterval","Header","async","params","progressInterval","setTimeout","completedAt","parameters","date","seconds","minutes","formatTimeAgo","view","toLocaleTimeString","getFullYear"],"mappings":"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"}
{"version":3,"file":"index-DUgL4t2Y.js","sources":["../../src/pages/financial-model-workspace/components/CalculationResults.jsx","../../src/pages/financial-model-workspace/components/FormulaBuilder.jsx","../../src/pages/financial-model-workspace/components/ModelTemplates.jsx","../../src/services/commandRegistry.js","../../src/services/persistence/DataMigrationService.js","../../src/services/utils/CompressionUtils.js","../../src/services/persistence/IndexedDBService.js","../../src/services/utils/CryptoUtils.js","../../src/services/persistence/LocalStorageService.js","../../src/services/persistence/SessionManager.js","../../src/services/persistence/PersistenceManager.js","../../src/services/commandProcessor.js","../../src/services/commands/automationCommands.js","../../src/services/commands/coreCommands.js","../../src/services/commands/dataCommands.js","../../src/services/commands/esgCommands.js","../../src/services/persistence/BackupService.js","../../src/services/persistence/PrivacyService.js","../../src/services/persistence/SyncService.js","../../src/services/persistence/PersistenceTestSuite.js","../../src/services/commands/persistenceCommands.js","../../src/services/commands/privateAnalysisCommands.js","../../src/services/commands/systemCommands.js","../../src/services/commands/technicalCommands.js","../../src/services/commands/valuationCommands.js","../../src/services/commandInitializer.js","../../src/pages/financial-model-workspace/components/TerminalInterface.jsx","../../src/pages/financial-model-workspace/components/VariableInputs.jsx","../../src/pages/financial-model-workspace/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst CalculationResults = ({ results: _results, onExport }) => {\n  const [activeTab, setActiveTab] = useState('summary');\n  const [expandedSections, setExpandedSections] = useState(new Set(['valuation']));\n\n  const mockResults = {\n    summary: {\n      enterpriseValue: 2847.5,\n      equityValue: 2547.5,\n      sharePrice: 127.38,\n      impliedReturn: 0.156,\n      confidence: 0.87\n    },\n    cashFlows: [\n      { year: 2024, revenue: 1250, ebitda: 312.5, fcf: 187.5, pv: 170.5 },\n      { year: 2025, revenue: 1375, ebitda: 343.8, fcf: 206.3, pv: 172.8 },\n      { year: 2026, revenue: 1513, ebitda: 378.2, fcf: 226.9, pv: 175.2 },\n      { year: 2027, revenue: 1664, ebitda: 416.0, fcf: 249.6, pv: 177.7 },\n      { year: 2028, revenue: 1830, ebitda: 457.6, fcf: 274.6, pv: 180.3 }\n    ],\n    sensitivity: {\n      wacc: [0.08, 0.09, 0.1, 0.11, 0.12],\n      growth: [0.015, 0.02, 0.025, 0.03, 0.035],\n      matrix: [\n        [145.2, 138.7, 132.8, 127.4, 122.5],\n        [152.1, 144.9, 138.2, 132.1, 126.4],\n        [159.8, 151.9, 144.6, 137.8, 131.6],\n        [168.4, 159.7, 151.8, 144.4, 137.6],\n        [178.1, 168.4, 159.7, 151.8, 144.4]\n      ]\n    },\n    scenarios: [\n      { name: 'Base Case', probability: 0.6, sharePrice: 127.38, irr: 0.156 },\n      { name: 'Bull Case', probability: 0.25, sharePrice: 145.67, irr: 0.189 },\n      { name: 'Bear Case', probability: 0.15, sharePrice: 98.42, irr: 0.087 }\n    ],\n    multiples: [\n      { metric: 'EV/Revenue', current: 2.3, peer_avg: 2.8, premium: -17.9 },\n      { metric: 'EV/EBITDA', current: 9.1, peer_avg: 11.2, premium: -18.8 },\n      { metric: 'P/E Ratio', current: 18.5, peer_avg: 22.1, premium: -16.3 },\n      { metric: 'P/B Ratio', current: 2.1, peer_avg: 2.6, premium: -19.2 }\n    ]\n  };\n\n  const tabs = [\n    { id: 'summary', label: 'Summary', icon: 'BarChart3' },\n    { id: 'cashflows', label: 'Cash Flows', icon: 'TrendingUp' },\n    { id: 'sensitivity', label: 'Sensitivity', icon: 'Target' },\n    { id: 'scenarios', label: 'Scenarios', icon: 'GitBranch' },\n    { id: 'multiples', label: 'Multiples', icon: 'Layers' }\n  ];\n\n  const _toggleSection = (sectionId) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(sectionId)) {\n      newExpanded.delete(sectionId);\n    } else {\n      newExpanded.add(sectionId);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const formatCurrency = (value, decimals = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(value);\n  };\n\n  const formatPercent = (value, decimals = 1) => {\n    return `${(value * 100).toFixed(decimals)}%`;\n  };\n\n  const renderSummary = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Enterprise Value</span>\n            <Icon name=\"Building\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.enterpriseValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Equity Value</span>\n            <Icon name=\"PieChart\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.equityValue, 1)}M\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Share Price</span>\n            <Icon name=\"DollarSign\" size={16} className=\"text-muted-foreground\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-foreground\">\n              {formatCurrency(mockResults.summary.sharePrice)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Implied Return</span>\n            <Icon name=\"TrendingUp\" size={16} className=\"text-success\" />\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-2xl font-bold text-success\">\n              {formatPercent(mockResults.summary.impliedReturn)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Indicator */}\n      <div className=\"p-4 bg-background border border-border rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-sm font-medium text-foreground\">Model Confidence</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {formatPercent(mockResults.summary.confidence)}\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2\">\n          <div\n            className=\"bg-success h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${mockResults.summary.confidence * 100}%` }}\n          />\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Based on data quality, assumption validity, and sensitivity analysis\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderCashFlows = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Year</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Revenue</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">EBITDA</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">FCF</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Present Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.cashFlows.map((cf, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{cf.year}</td>\n                <td className=\"py-3 text-right text-foreground\">\n                  {formatCurrency(cf.revenue, 0)}M\n                </td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.ebitda, 1)}M</td>\n                <td className=\"py-3 text-right text-foreground\">{formatCurrency(cf.fcf, 1)}M</td>\n                <td className=\"py-3 text-right text-success font-medium\">\n                  {formatCurrency(cf.pv, 1)}M\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"p-4 bg-muted rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-foreground\">Terminal Value</span>\n          <span className=\"text-lg font-bold text-foreground\">{formatCurrency(1247.3, 1)}M</span>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          2.5% perpetual growth rate applied to 2028 FCF\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderSensitivity = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h4 className=\"text-sm font-medium text-foreground mb-2\">\n          Share Price Sensitivity Analysis\n        </h4>\n        <p className=\"text-xs text-muted-foreground\">WACC vs Terminal Growth Rate</p>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-xs\">\n          <thead>\n            <tr>\n              <th className=\"p-2 text-left text-muted-foreground\">WACC \\ Growth</th>\n              {mockResults.sensitivity.growth.map((growth, index) => (\n                <th key={index} className=\"p-2 text-center text-muted-foreground\">\n                  {formatPercent(growth)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.sensitivity.wacc.map((wacc, rowIndex) => (\n              <tr key={rowIndex} className=\"border-t border-border/50\">\n                <td className=\"p-2 text-muted-foreground font-medium\">{formatPercent(wacc)}</td>\n                {mockResults.sensitivity.matrix[rowIndex].map((value, colIndex) => (\n                  <td\n                    key={colIndex}\n                    className={`p-2 text-center font-medium ${\n                      Math.abs(value - 127.38) < 5\n                        ? 'bg-primary/20 text-primary'\n                        : 'text-foreground'\n                    }`}\n                  >\n                    {formatCurrency(value)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderScenarios = () => (\n    <div className=\"space-y-4\">\n      {mockResults.scenarios.map((scenario, index) => (\n        <div key={index} className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-medium text-foreground\">{scenario.name}</span>\n              <span className=\"text-xs bg-background px-2 py-1 rounded text-muted-foreground\">\n                {formatPercent(scenario.probability)} probability\n              </span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-foreground\">\n                {formatCurrency(scenario.sharePrice)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{formatPercent(scenario.irr)} IRR</div>\n            </div>\n          </div>\n          <div className=\"w-full bg-background rounded-full h-1\">\n            <div\n              className=\"bg-primary h-1 rounded-full\"\n              style={{ width: `${scenario.probability * 100}%` }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderMultiples = () => (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-2 text-muted-foreground font-medium\">Multiple</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Current</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">Peer Avg</th>\n              <th className=\"text-right py-2 text-muted-foreground font-medium\">\n                Premium/Discount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {mockResults.multiples.map((multiple, index) => (\n              <tr key={index} className=\"border-b border-border/50\">\n                <td className=\"py-3 text-foreground font-medium\">{multiple.metric}</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.current}x</td>\n                <td className=\"py-3 text-right text-foreground\">{multiple.peer_avg}x</td>\n                <td\n                  className={`py-3 text-right font-medium ${\n                    multiple.premium > 0 ? 'text-success' : 'text-destructive'\n                  }`}\n                >\n                  {multiple.premium > 0 ? '+' : ''}\n                  {multiple.premium.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'summary':\n        return renderSummary();\n      case 'cashflows':\n        return renderCashFlows();\n      case 'sensitivity':\n        return renderSensitivity();\n      case 'scenarios':\n        return renderScenarios();\n      case 'multiples':\n        return renderMultiples();\n      default:\n        return renderSummary();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Calculation Results</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Download\"\n            onClick={() => onExport && onExport('excel')}\n          >\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Share2\">\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} />\n            <span>{tab.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">{renderTabContent()}</div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last Updated: {new Date().toLocaleTimeString()}</span>\n            <span>•</span>\n            <span>Auto-refresh: ON</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-success rounded-full\" />\n            <span>Calculations current</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalculationResults;\n","import React, { useState, useRef } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FormulaBuilder = ({ onFormulaCreate, variables: _variables }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [draggedFunction, setDraggedFunction] = useState(null);\n  const [currentFormula, setCurrentFormula] = useState('');\n  const [formulaName, setFormulaName] = useState('');\n  const [isBuilding, setIsBuilding] = useState(false);\n  const dropZoneRef = useRef(null);\n\n  const functionCategories = {\n    valuation: {\n      name: 'Valuation',\n      icon: 'TrendingUp',\n      functions: [\n        {\n          name: 'DCF',\n          syntax: 'DCF(fcf_array, discount_rate, terminal_growth)',\n          description: 'Discounted Cash Flow valuation'\n        },\n        {\n          name: 'NPV',\n          syntax: 'NPV(cash_flows, discount_rate)',\n          description: 'Net Present Value calculation'\n        },\n        { name: 'IRR', syntax: 'IRR(cash_flows)', description: 'Internal Rate of Return' },\n        {\n          name: 'TERMINAL_VALUE',\n          syntax: 'TERMINAL_VALUE(final_fcf, growth_rate, discount_rate)',\n          description: 'Terminal value calculation'\n        },\n        {\n          name: 'WACC',\n          syntax: 'WACC(cost_equity, cost_debt, tax_rate, debt_ratio)',\n          description: 'Weighted Average Cost of Capital'\n        }\n      ]\n    },\n    financial: {\n      name: 'Financial Ratios',\n      icon: 'Calculator',\n      functions: [\n        {\n          name: 'ROE',\n          syntax: 'ROE(net_income, shareholders_equity)',\n          description: 'Return on Equity'\n        },\n        { name: 'ROA', syntax: 'ROA(net_income, total_assets)', description: 'Return on Assets' },\n        {\n          name: 'DEBT_TO_EQUITY',\n          syntax: 'DEBT_TO_EQUITY(total_debt, total_equity)',\n          description: 'Debt to Equity ratio'\n        },\n        {\n          name: 'CURRENT_RATIO',\n          syntax: 'CURRENT_RATIO(current_assets, current_liabilities)',\n          description: 'Current ratio calculation'\n        },\n        {\n          name: 'QUICK_RATIO',\n          syntax: 'QUICK_RATIO(quick_assets, current_liabilities)',\n          description: 'Quick ratio calculation'\n        }\n      ]\n    },\n    statistical: {\n      name: 'Statistical',\n      icon: 'BarChart3',\n      functions: [\n        {\n          name: 'CORRELATION',\n          syntax: 'CORRELATION(dataset1, dataset2)',\n          description: 'Correlation coefficient'\n        },\n        {\n          name: 'REGRESSION',\n          syntax: 'REGRESSION(dependent_var, independent_var)',\n          description: 'Linear regression analysis'\n        },\n        {\n          name: 'VOLATILITY',\n          syntax: 'VOLATILITY(returns, period)',\n          description: 'Historical volatility'\n        },\n        {\n          name: 'BETA',\n          syntax: 'BETA(stock_returns, market_returns)',\n          description: 'Beta coefficient calculation'\n        },\n        {\n          name: 'SHARPE_RATIO',\n          syntax: 'SHARPE_RATIO(returns, risk_free_rate)',\n          description: 'Risk-adjusted return metric'\n        }\n      ]\n    },\n    mathematical: {\n      name: 'Mathematical',\n      icon: 'Sigma',\n      functions: [\n        { name: 'SUM', syntax: 'SUM(range)', description: 'Sum of values' },\n        { name: 'AVERAGE', syntax: 'AVERAGE(range)', description: 'Average of values' },\n        { name: 'MEDIAN', syntax: 'MEDIAN(range)', description: 'Median value' },\n        { name: 'STDEV', syntax: 'STDEV(range)', description: 'Standard deviation' },\n        {\n          name: 'PERCENTILE',\n          syntax: 'PERCENTILE(range, percentile)',\n          description: 'Percentile calculation'\n        }\n      ]\n    }\n  };\n\n  const savedFormulas = [\n    {\n      name: 'Custom_DCF_Tech',\n      formula: 'DCF(FCFF_PROJECTIONS, WACC(0.12, 0.04, 0.25, 0.3), 0.025)',\n      category: 'Custom'\n    },\n    {\n      name: 'LBO_Returns',\n      formula: 'IRR([INITIAL_INVESTMENT * -1, EXIT_VALUE])',\n      category: 'Custom'\n    },\n    {\n      name: 'Comp_Multiple',\n      formula: 'AVERAGE(PEER_EV_REVENUE) * TARGET_REVENUE',\n      category: 'Custom'\n    }\n  ];\n\n  const handleDragStart = (e, func) => {\n    setDraggedFunction(func);\n    e.dataTransfer.effectAllowed = 'copy';\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    if (draggedFunction) {\n      const newFormula = currentFormula + (currentFormula ? ' + ' : '') + draggedFunction.syntax;\n      setCurrentFormula(newFormula);\n      setDraggedFunction(null);\n    }\n  };\n\n  const addFunction = func => {\n    const newFormula = currentFormula + (currentFormula ? ' + ' : '') + func.syntax;\n    setCurrentFormula(newFormula);\n  };\n\n  const clearFormula = () => {\n    setCurrentFormula('');\n    setFormulaName('');\n  };\n\n  const saveFormula = () => {\n    if (formulaName && currentFormula) {\n      if (onFormulaCreate) {\n        onFormulaCreate({\n          name: formulaName,\n          formula: currentFormula,\n          timestamp: new Date()\n        });\n      }\n      setFormulaName('');\n      setCurrentFormula('');\n      setIsBuilding(false);\n    }\n  };\n\n  const validateFormula = () => {\n    // Simple validation - check for balanced parentheses\n    const openParens = (currentFormula.match(/\\(/g) || []).length;\n    const closeParens = (currentFormula.match(/\\)/g) || []).length;\n    return openParens === closeParens;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Wrench\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Formula Builder</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Plus\"\n            onClick={() => setIsBuilding(!isBuilding)}\n          >\n            New Formula\n          </Button>\n        </div>\n      </div>\n\n      {/* Function Categories */}\n      <div className=\"flex border-b border-border\">\n        {Object.entries(functionCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Function Library */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-3\">\n          {functionCategories[selectedCategory].functions.map((func, index) => (\n            <div\n              key={index}\n              draggable\n              onDragStart={e => handleDragStart(e, func)}\n              className=\"p-3 bg-muted rounded-lg border border-border cursor-move hover:bg-muted/80 transition-smooth group\"\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon\n                      name=\"Move\"\n                      size={14}\n                      className=\"text-muted-foreground group-hover:text-foreground\"\n                    />\n                    <span className=\"font-medium text-foreground\">{func.name}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{func.description}</p>\n                  <code className=\"text-xs bg-background px-2 py-1 rounded mt-2 block font-mono text-foreground\">\n                    {func.syntax}\n                  </code>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"Plus\"\n                  onClick={() => addFunction(func)}\n                  className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Saved Formulas */}\n        <div className=\"border-t border-border p-4\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n            <Icon name=\"BookOpen\" size={16} />\n            <span>Saved Formulas</span>\n          </h4>\n          <div className=\"space-y-2\">\n            {savedFormulas.map((formula, index) => (\n              <div\n                key={index}\n                className=\"p-3 bg-background rounded-lg border border-border hover:bg-muted/50 transition-smooth cursor-pointer\"\n                onClick={() => setCurrentFormula(formula.formula)}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={e => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    setCurrentFormula(formula.formula);\n                  }\n                }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-foreground\">{formula.name}</span>\n                  <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n                    {formula.category}\n                  </span>\n                </div>\n                <code className=\"text-xs text-muted-foreground mt-1 block font-mono\">\n                  {formula.formula}\n                </code>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Formula Builder Panel */}\n      {isBuilding && (\n        <div className=\"border-t border-border bg-background\">\n          <div className=\"p-4 space-y-4\">\n            <div>\n              <label htmlFor=\"formula-name-input\" className=\"text-sm font-medium text-foreground mb-2 block\">Formula Name</label>\n              <input\n                id=\"formula-name-input\"\n                type=\"text\"\n                value={formulaName}\n                onChange={e => setFormulaName(e.target.value)}\n                placeholder=\"Enter formula name...\"\n                className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"formula-expression-input\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                Formula Expression\n              </label>\n              <div\n                id=\"formula-expression-input\"\n                ref={dropZoneRef}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n                className=\"min-h-[100px] p-3 bg-input border-2 border-dashed border-border rounded-lg focus-within:border-ring transition-colors\"\n              >\n                <textarea\n                  value={currentFormula}\n                  onChange={e => setCurrentFormula(e.target.value)}\n                  placeholder=\"Drag functions here or type formula manually...\"\n                  className=\"w-full h-20 bg-transparent text-foreground placeholder-muted-foreground resize-none outline-none font-mono text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between mt-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {validateFormula() ? (\n                    <div className=\"flex items-center space-x-1 text-success\">\n                      <Icon name=\"CheckCircle\" size={14} />\n                      <span className=\"text-xs\">Valid syntax</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-1 text-destructive\">\n                      <Icon name=\"XCircle\" size={14} />\n                      <span className=\"text-xs\">Invalid syntax</span>\n                    </div>\n                  )}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {currentFormula.length} characters\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\" size=\"sm\" iconName=\"Trash2\"\n                onClick={clearFormula}\n              >\n                Clear\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\" size=\"sm\" iconName=\"Eye\"\n                  disabled={!validateFormula()}\n                >\n                  Preview\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  iconName=\"Save\"\n                  onClick={saveFormula}\n                  disabled={!formulaName || !currentFormula || !validateFormula()}\n                >\n                  Save Formula\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormulaBuilder;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ModelTemplates = ({ onTemplateSelect, onTemplateCreate }) => {\n  const [selectedCategory, setSelectedCategory] = useState('valuation');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const templateCategories = {\n    valuation: {\n      name: 'Valuation Models',\n      icon: 'TrendingUp',\n      templates: [\n        {\n          id: 'dcf_standard',\n          name: 'DCF - Standard',\n          description:\n            'Traditional discounted cash flow model with 5-year projections and terminal value',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-10',\n          popularity: 95,\n          features: [\n            '5-year projections',\n            'Terminal value',\n            'Sensitivity analysis',\n            'WACC calculation'\n          ]\n        },\n        {\n          id: 'dcf_tech',\n          name: 'DCF - Technology',\n          description: 'Specialized DCF for high-growth technology companies with adjusted metrics',\n          complexity: 'Advanced',\n          timeToComplete: '60 min',\n          lastUsed: '2024-07-08',\n          popularity: 87,\n          features: ['SaaS metrics', 'User-based projections', 'Churn analysis', 'Rule of 40']\n        },\n        {\n          id: 'sum_of_parts',\n          name: 'Sum-of-the-Parts',\n          description: 'Multi-business valuation with segment-specific assumptions and multiples',\n          complexity: 'Advanced',\n          timeToComplete: '90 min',\n          lastUsed: '2024-07-05',\n          popularity: 73,\n          features: [\n            'Segment analysis',\n            'Multiple approaches',\n            'Holding company discount',\n            'Synergy modeling'\n          ]\n        }\n      ]\n    },\n    lbo: {\n      name: 'LBO Models',\n      icon: 'Layers',\n      templates: [\n        {\n          id: 'lbo_standard',\n          name: 'LBO - Standard',\n          description: 'Complete leveraged buyout model with debt sizing and returns analysis',\n          complexity: 'Advanced',\n          timeToComplete: '120 min',\n          lastUsed: '2024-07-09',\n          popularity: 91,\n          features: ['Debt capacity', 'Returns waterfall', 'Management rollover', 'Exit scenarios']\n        },\n        {\n          id: 'lbo_growth',\n          name: 'LBO - Growth Equity',\n          description: 'Growth-focused LBO with minority investment and expansion capital',\n          complexity: 'Advanced',\n          timeToComplete: '100 min',\n          lastUsed: '2024-07-06',\n          popularity: 68,\n          features: [\n            'Growth capital',\n            'Minority stake',\n            'Management incentives',\n            'Expansion modeling'\n          ]\n        }\n      ]\n    },\n    comps: {\n      name: 'Comparable Analysis',\n      icon: 'BarChart3',\n      templates: [\n        {\n          id: 'trading_comps',\n          name: 'Trading Comparables',\n          description: 'Public company multiple analysis with statistical benchmarking',\n          complexity: 'Beginner',\n          timeToComplete: '30 min',\n          lastUsed: '2024-07-11',\n          popularity: 98,\n          features: [\n            'Multiple analysis',\n            'Statistical metrics',\n            'Peer screening',\n            'Premium/discount analysis'\n          ]\n        },\n        {\n          id: 'transaction_comps',\n          name: 'Transaction Comparables',\n          description: 'M&A transaction analysis with control premiums and synergies',\n          complexity: 'Intermediate',\n          timeToComplete: '45 min',\n          lastUsed: '2024-07-07',\n          popularity: 82,\n          features: [\n            'M&A multiples',\n            'Control premiums',\n            'Synergy analysis',\n            'Transaction screening'\n          ]\n        }\n      ]\n    },\n    merger: {\n      name: 'M&A Models',\n      icon: 'GitMerge',\n      templates: [\n        {\n          id: 'merger_model',\n          name: 'Merger Model',\n          description:\n            'Comprehensive merger analysis with accretion/dilution and pro forma statements',\n          complexity: 'Expert',\n          timeToComplete: '180 min',\n          lastUsed: '2024-07-04',\n          popularity: 76,\n          features: [\n            'Accretion/dilution',\n            'Pro forma statements',\n            'Synergy modeling',\n            'Financing structure'\n          ]\n        },\n        {\n          id: 'acquisition_model',\n          name: 'Acquisition Model',\n          description: 'Strategic acquisition analysis with integration costs and value creation',\n          complexity: 'Expert',\n          timeToComplete: '150 min',\n          lastUsed: '2024-07-03',\n          popularity: 71,\n          features: ['Integration costs', 'Value creation', 'Financing options', 'Risk analysis']\n        }\n      ]\n    }\n  };\n\n  const recentTemplates = [\n    { id: 'dcf_standard', name: 'DCF - Standard', lastUsed: '2024-07-11 14:30' },\n    { id: 'trading_comps', name: 'Trading Comparables', lastUsed: '2024-07-11 09:15' },\n    { id: 'lbo_standard', name: 'LBO - Standard', lastUsed: '2024-07-10 16:45' }\n  ];\n\n  const getComplexityColor = complexity => {\n    switch (complexity) {\n      case 'Beginner':\n        return 'text-success bg-success/10';\n      case 'Intermediate':\n        return 'text-warning bg-warning/10';\n      case 'Advanced':\n        return 'text-accent bg-accent/10';\n      case 'Expert':\n        return 'text-destructive bg-destructive/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const filteredTemplates = () => {\n    const templates = templateCategories[selectedCategory]?.templates || [];\n    if (!searchTerm) return templates;\n\n    return templates.filter(\n      template =>\n        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  };\n\n  const handleTemplateSelect = template => {\n    if (onTemplateSelect) {\n      onTemplateSelect(template);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"FileTemplate\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Model Templates</h3>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          iconName=\"Plus\"\n          onClick={() => setShowCreateModal(true)}\n        >\n          Create Template\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search templates...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Categories */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {Object.entries(templateCategories).map(([key, category]) => (\n          <button\n            key={key}\n            onClick={() => setSelectedCategory(key)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              selectedCategory === key\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={category.icon} size={16} />\n            <span>{category.name}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {/* Recent Templates */}\n        {!searchTerm && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n              <Icon name=\"Clock\" size={16} />\n              <span>Recently Used</span>\n            </h4>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {recentTemplates.map(template => (\n                <div\n                  key={template.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-smooth cursor-pointer\"\n                  onClick={() => handleTemplateSelect(template)}\n                  role=\"button\"\n                  tabIndex={0}\n                  onKeyDown={e => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      handleTemplateSelect(template);\n                    }\n                  }}\n                >\n                  <div>\n                    <span className=\"font-medium text-foreground\">{template.name}</span>\n                    <p className=\"text-xs text-muted-foreground\">Last used: {template.lastUsed}</p>\n                  </div>\n                  <Icon name=\"ChevronRight\" size={16} className=\"text-muted-foreground\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Template Cards */}\n        <div className=\"space-y-4\">\n          {filteredTemplates().map(template => (\n            <div\n              key={template.id}\n              className=\"p-4 bg-background border border-border rounded-lg hover:border-primary/50 transition-smooth cursor-pointer group\"\n              onClick={() => handleTemplateSelect(template)}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={e => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault();\n                  handleTemplateSelect(template);\n                }\n              }}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h5 className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">\n                      {template.name}\n                    </h5>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(template.complexity)}`}\n                    >\n                      {template.complexity}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                    <Icon name=\"Star\" size={12} />\n                    <span>{template.popularity}%</span>\n                  </div>\n                  <Icon\n                    name=\"ChevronRight\"\n                    size={16}\n                    className=\"text-muted-foreground group-hover:text-primary transition-colors\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Clock\" size={12} />\n                    <span>{template.timeToComplete}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Icon name=\"Calendar\" size={12} />\n                    <span>Last used: {template.lastUsed}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2\">\n                {template.features.map((feature, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-muted text-xs text-muted-foreground rounded\"\n                  >\n                    {feature}\n                  </span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTemplates().length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"FileX\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No templates found</h4>\n            <p className=\"text-muted-foreground\">\n              {searchTerm\n                ? 'Try adjusting your search terms'\n                : 'No templates available in this category'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Create Template Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg shadow-elevation-2 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between p-4 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Create New Template</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"X\"\n                onClick={() => setShowCreateModal(false)}\n              />\n            </div>\n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label htmlFor=\"template-name\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Template Name\n                </label>\n                <input\n                  id=\"template-name\"\n                  type=\"text\"\n                  placeholder=\"Enter template name...\"\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"template-description\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Description\n                </label>\n                <textarea\n                  id=\"template-description\"\n                  placeholder=\"Describe your template...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"template-category\" className=\"text-sm font-medium text-foreground mb-2 block\">Category</label>\n                <select id=\"template-category\" className=\"w-full px-3 py-2 bg-input border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-ring\">\n                  <option value=\"valuation\">Valuation Models</option>\n                  <option value=\"lbo\">LBO Models</option>\n                  <option value=\"comps\">Comparable Analysis</option>\n                  <option value=\"merger\">M&A Models</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowCreateModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  if (onTemplateCreate) onTemplateCreate();\n                }}\n              >\n                Create Template\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTemplates;\n","/**\n * Command Registry for FinanceAnalyst Pro Terminal\n * Manages all available commands with categorization and metadata\n */\n\nexport class CommandRegistry {\n  constructor() {\n    this.commands = new Map();\n    this.categories = new Map();\n    this.aliases = new Map();\n    this.initializeCategories();\n  }\n\n  /**\n   * Initialize command categories\n   */\n  initializeCategories() {\n    this.categories.set('CORE', {\n      name: 'Core Analysis',\n      description: 'Fundamental financial analysis commands',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('PORTFOLIO', {\n      name: 'Portfolio & Risk',\n      description: 'Portfolio analysis and risk management',\n      icon: '🎯',\n      commands: []\n    });\n\n    this.categories.set('VALUATION', {\n      name: 'Advanced Valuation',\n      description: 'Sophisticated valuation models',\n      icon: '📈',\n      commands: []\n    });\n\n    this.categories.set('TECHNICAL', {\n      name: 'Technical Analysis',\n      description: 'Technical analysis and market intelligence',\n      icon: '📊',\n      commands: []\n    });\n\n    this.categories.set('FIXED_INCOME', {\n      name: 'Fixed Income & Derivatives',\n      description: 'Bond analysis and derivatives pricing',\n      icon: '🏦',\n      commands: []\n    });\n\n    this.categories.set('ESG', {\n      name: 'ESG & Alternative Data',\n      description: 'Environmental, social, governance metrics',\n      icon: '🌱',\n      commands: []\n    });\n\n    this.categories.set('AUTOMATION', {\n      name: 'Automation & Workflows',\n      description: 'Automated analysis and workflows',\n      icon: '🤖',\n      commands: []\n    });\n\n    this.categories.set('DATA', {\n      name: 'Data Management',\n      description: 'Data import, export, and management',\n      icon: '💾',\n      commands: []\n    });\n\n    this.categories.set('REPORTING', {\n      name: 'Reporting & Visualization',\n      description: 'Reports, charts, and visualizations',\n      icon: '📋',\n      commands: []\n    });\n\n    this.categories.set('SYSTEM', {\n      name: 'System & Performance',\n      description: 'System monitoring and configuration',\n      icon: '🔧',\n      commands: []\n    });\n\n    this.categories.set('ANALYTICS', {\n      name: 'Advanced Analytics',\n      description: 'Machine learning and advanced analytics',\n      icon: '💡',\n      commands: []\n    });\n\n    this.categories.set('MARKET_DATA', {\n      name: 'Market Data Extensions',\n      description: 'Extended market data and economic indicators',\n      icon: '🌐',\n      commands: []\n    });\n\n    this.categories.set('UTILITY', {\n      name: 'Utility Commands',\n      description: 'General utility and helper commands',\n      icon: '🛠️',\n      commands: []\n    });\n  }\n\n  /**\n   * Register a command\n   * @param {string} name - Command name\n   * @param {Object} handler - Command handler\n   * @param {Object} metadata - Command metadata\n   */\n  register(name, handler, metadata = {}) {\n    const commandName = name.toUpperCase();\n\n    const commandInfo = {\n      name: commandName,\n      handler,\n      category: metadata.category || 'UTILITY',\n      description: metadata.description || 'No description available',\n      usage: metadata.usage || `${commandName}()`,\n      examples: metadata.examples || [],\n      parameterSchema: metadata.parameterSchema || null,\n      aliases: metadata.aliases || [],\n      tags: metadata.tags || [],\n      version: metadata.version || '1.0.0',\n      deprecated: metadata.deprecated || false,\n      experimental: metadata.experimental || false\n    };\n\n    // Register main command\n    this.commands.set(commandName, commandInfo);\n\n    // Register aliases\n    if (metadata.aliases) {\n      metadata.aliases.forEach(alias => {\n        this.aliases.set(alias.toUpperCase(), commandName);\n      });\n    }\n\n    // Add to category\n    const category = this.categories.get(commandInfo.category);\n    if (category) {\n      category.commands.push(commandName);\n    }\n\n    return this;\n  }\n\n  /**\n   * Get command handler\n   * @param {string} name - Command name or alias\n   * @returns {Object|null} Command handler\n   */\n  getHandler(name) {\n    const commandName = name.toUpperCase();\n\n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command.handler;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      const aliasCommand = this.commands.get(aliasTarget);\n      return aliasCommand ? aliasCommand.handler : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get command info\n   * @param {string} name - Command name\n   * @returns {Object|null} Command information\n   */\n  getCommandInfo(name) {\n    const commandName = name.toUpperCase();\n\n    // Check direct command\n    const command = this.commands.get(commandName);\n    if (command) {\n      return command;\n    }\n\n    // Check aliases\n    const aliasTarget = this.aliases.get(commandName);\n    if (aliasTarget) {\n      return this.commands.get(aliasTarget);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all commands in a category\n   * @param {string} category - Category name\n   * @returns {Array} Commands in category\n   */\n  getCommandsByCategory(category) {\n    const categoryInfo = this.categories.get(category.toUpperCase());\n    if (!categoryInfo) return [];\n\n    return categoryInfo.commands.map(cmdName => this.commands.get(cmdName));\n  }\n\n  /**\n   * Get all command names\n   * @returns {Array} All command names\n   */\n  getAllCommands() {\n    return Array.from(this.commands.keys());\n  }\n\n  /**\n   * Get all categories\n   * @returns {Array} All categories\n   */\n  getAllCategories() {\n    return Array.from(this.categories.entries()).map(([key, value]) => ({\n      key,\n      ...value\n    }));\n  }\n\n  /**\n   * Search commands\n   * @param {string} query - Search query\n   * @returns {Array} Matching commands\n   */\n  searchCommands(query) {\n    const searchTerm = query.toLowerCase();\n    const results = [];\n\n    for (const [_name, command] of this.commands) {\n      const score = this.calculateSearchScore(command, searchTerm);\n      if (score > 0) {\n        results.push({ ...command, score });\n      }\n    }\n\n    return results.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Calculate search relevance score\n   * @param {Object} command - Command object\n   * @param {string} searchTerm - Search term\n   * @returns {number} Relevance score\n   */\n  calculateSearchScore(command, searchTerm) {\n    let score = 0;\n\n    // Exact name match\n    if (command.name.toLowerCase() === searchTerm) {\n      score += 100;\n    }\n\n    // Name contains search term\n    if (command.name.toLowerCase().includes(searchTerm)) {\n      score += 50;\n    }\n\n    // Description contains search term\n    if (command.description.toLowerCase().includes(searchTerm)) {\n      score += 25;\n    }\n\n    // Tags contain search term\n    if (command.tags.some(tag => tag.toLowerCase().includes(searchTerm))) {\n      score += 15;\n    }\n\n    // Aliases contain search term\n    if (command.aliases.some(alias => alias.toLowerCase().includes(searchTerm))) {\n      score += 10;\n    }\n\n    return score;\n  }\n\n  /**\n   * Get command suggestions based on partial input\n   * @param {string} partial - Partial command input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(partial) {\n    const partialLower = partial.toLowerCase();\n    const suggestions = [];\n\n    for (const [name, command] of this.commands) {\n      if (name.toLowerCase().startsWith(partialLower)) {\n        const _name = command.name;\n        suggestions.push({\n          name: _name,\n          description: command.description,\n          usage: command.usage,\n          category: command.category\n        });\n      }\n    }\n\n    return suggestions.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  /**\n   * Validate command exists\n   * @param {string} name - Command name\n   * @returns {boolean} Whether command exists\n   */\n  hasCommand(name) {\n    const commandName = name.toUpperCase();\n    return this.commands.has(commandName) || this.aliases.has(commandName);\n  }\n\n  /**\n   * Get command count by category\n   * @returns {Object} Command counts by category\n   */\n  getCommandStats() {\n    const stats = {};\n\n    for (const [categoryKey, category] of this.categories) {\n      stats[categoryKey] = {\n        name: category.name,\n        count: category.commands.length,\n        icon: category.icon\n      };\n    }\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const commandRegistry = new CommandRegistry();\n","// @ts-check\n/**\n * Data Migration Service\n * Handles data migrations between different versions and storage formats\n */\n\nexport class DataMigrationService {\n  constructor() {\n    this.currentVersion = '1.0.0';\n    this.migrationKey = 'financeanalyst_migration_version';\n    this.backupKey = 'financeanalyst_migration_backup';\n\n    // Define migration paths\n    this.migrations = {\n      '0.0.0': {\n        to: '1.0.0',\n        description: 'Initial migration to structured persistence layer',\n        migrate: this.migrateToV1_0_0.bind(this)\n      }\n      // Future migrations will be added here\n    };\n  }\n\n  /**\n   * Check if migration is needed and perform it\n   */\n  async checkAndMigrate() {\n    try {\n      const currentStoredVersion = localStorage.getItem(this.migrationKey);\n\n      if (!currentStoredVersion) {\n        // First time setup - check for legacy data\n        await this.performInitialMigration();\n      } else if (currentStoredVersion !== this.currentVersion) {\n        // Version mismatch - perform migration\n        await this.performVersionMigration(currentStoredVersion, this.currentVersion);\n      }\n\n      // Update stored version\n      localStorage.setItem(this.migrationKey, this.currentVersion);\n\n      console.warn(`✅ Data migration complete - version ${this.currentVersion}`);\n      return { success: true, version: this.currentVersion };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('❌ Data migration failed:', message);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Perform initial migration from legacy data\n   */\n  async performInitialMigration() {\n    console.warn('🔄 Performing initial data migration...');\n\n    try {\n      // Check for legacy data patterns\n      const legacyData = await this.detectLegacyData();\n\n      if (Object.keys(legacyData).length > 0) {\n        // Create backup before migration\n        await this.createMigrationBackup(legacyData);\n\n        // Migrate legacy data to new format\n        await this.migrateToV1_0_0(legacyData);\n\n        console.warn('✅ Legacy data migrated successfully');\n      } else {\n        console.warn('ℹ️ No legacy data found - clean installation');\n      }\n\n    } catch (error) {\n      console.error('Failed to perform initial migration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform version-to-version migration\n   */\n  async performVersionMigration(fromVersion, toVersion) {\n    console.warn(`🔄 Migrating data from ${fromVersion} to ${toVersion}...`);\n\n    try {\n      // Find migration path\n      const migrationPath = this.findMigrationPath(fromVersion, toVersion);\n\n      if (!migrationPath.length) {\n        throw new Error(`No migration path found from ${fromVersion} to ${toVersion}`);\n      }\n\n      // Create backup before migration\n      const currentData = await this.exportCurrentData();\n      await this.createMigrationBackup(currentData, fromVersion);\n\n      // Execute migrations in sequence\n      for (const migration of migrationPath) {\n        console.warn(`🔄 Applying migration: ${migration.description}`);\n        await migration.migrate();\n      }\n\n      console.warn('✅ Version migration completed successfully');\n\n    } catch (error) {\n      console.error('Failed to perform version migration:', error);\n\n      // Attempt to restore from backup\n      await this.restoreFromBackup();\n      throw error;\n    }\n  }\n\n  /**\n   * Detect legacy data in localStorage\n   */\n  async detectLegacyData() {\n    const legacyData = {};\n\n    try {\n      // Check for old command processor data\n      const oldVariables = localStorage.getItem('commandProcessor_variables');\n      if (oldVariables) {\n        legacyData.variables = JSON.parse(oldVariables);\n      }\n\n      // Check for old settings\n      const oldSettings = localStorage.getItem('commandProcessor_settings');\n      if (oldSettings) {\n        legacyData.settings = JSON.parse(oldSettings);\n      }\n\n      // Check for old watchlists (if stored differently)\n      const oldWatchlists = localStorage.getItem('watchlists');\n      if (oldWatchlists) {\n        legacyData.watchlists = JSON.parse(oldWatchlists);\n      }\n\n      // Check for old alerts\n      const oldAlerts = localStorage.getItem('alerts');\n      if (oldAlerts) {\n        legacyData.alerts = JSON.parse(oldAlerts);\n      }\n\n      // Check for any other financeanalyst_ prefixed items\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('financeanalyst_') &&\n            !key.includes('migration') &&\n            !key.includes('session') &&\n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          try {\n            legacyData[key] = JSON.parse(localStorage.getItem(key));\n          } catch {\n            legacyData[key] = localStorage.getItem(key);\n          }\n        }\n      });\n\n      return legacyData;\n\n    } catch (error) {\n      console.error('Failed to detect legacy data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Migration to version 1.0.0\n   */\n  async migrateToV1_0_0(legacyData = null) {\n    try {\n      const dataToMigrate = legacyData || await this.detectLegacyData();\n\n      // Migrate watchlists to new format\n      if (dataToMigrate.watchlists) {\n        const migratedWatchlists = this.migrateWatchlistsFormat(dataToMigrate.watchlists);\n        localStorage.setItem('financeanalyst_watchlists', JSON.stringify(migratedWatchlists));\n      }\n\n      // Migrate alerts to new format\n      if (dataToMigrate.alerts) {\n        const migratedAlerts = this.migrateAlertsFormat(dataToMigrate.alerts);\n        localStorage.setItem('financeanalyst_alerts', JSON.stringify(migratedAlerts));\n      }\n\n      // Migrate user preferences\n      if (dataToMigrate.settings) {\n        const migratedPreferences = this.migratePreferencesFormat(dataToMigrate.settings);\n        localStorage.setItem('financeanalyst_preferences', JSON.stringify(migratedPreferences));\n      }\n\n      // Migrate variables to new storage\n      if (dataToMigrate.variables) {\n        const migratedVariables = this.migrateVariablesFormat(dataToMigrate.variables);\n        localStorage.setItem('financeanalyst_user_variables', JSON.stringify(migratedVariables));\n      }\n\n      // Clean up old data\n      await this.cleanupLegacyData(dataToMigrate);\n\n      console.warn('✅ Migration to v1.0.0 completed');\n\n    } catch (error) {\n      console.error('Failed to migrate to v1.0.0:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Migrate watchlists to new format\n   */\n  migrateWatchlistsFormat(oldWatchlists) {\n    const migrated = {};\n\n    if (Array.isArray(oldWatchlists)) {\n      // Old format was array, convert to object\n      oldWatchlists.forEach((watchlist, index) => {\n        const name = watchlist.name || `Watchlist ${index + 1}`;\n        migrated[name] = {\n          tickers: watchlist.tickers || watchlist.stocks || [],\n          created: watchlist.created || new Date().toISOString().split('T')[0],\n          lastUpdated: watchlist.lastUpdated || null\n        };\n      });\n    } else if (typeof oldWatchlists === 'object') {\n      // Already in object format, just ensure structure\n      Object.entries(oldWatchlists).forEach(([name, data]) => {\n        migrated[name] = {\n          tickers: data.tickers || data.stocks || [],\n          created: data.created || new Date().toISOString().split('T')[0],\n          lastUpdated: data.lastUpdated || null\n        };\n      });\n    }\n\n    return migrated;\n  }\n\n  /**\n   * Migrate alerts to new format\n   */\n  migrateAlertsFormat(oldAlerts) {\n    if (!Array.isArray(oldAlerts)) {\n      return [];\n    }\n\n    return oldAlerts.map(alert => ({\n      id: alert.id || Date.now() + Math.random(),\n      ticker: alert.ticker,\n      condition: alert.condition,\n      value: alert.value,\n      created: alert.created || new Date().toISOString().split('T')[0],\n      triggered: alert.triggered || false\n    }));\n  }\n\n  /**\n   * Migrate preferences to new format\n   */\n  migratePreferencesFormat(oldSettings) {\n    return {\n      currency: oldSettings.currency || 'USD',\n      precision: oldSettings.precision || 2,\n      dateFormat: oldSettings.dateFormat || 'YYYY-MM-DD',\n      theme: oldSettings.theme || 'dark',\n      notifications: oldSettings.notifications !== false,\n      autoSave: oldSettings.autoSave !== false,\n      commandHistory: oldSettings.commandHistory !== false,\n      dataRetention: oldSettings.dataRetention || 30,\n      privacy: {\n        analytics: oldSettings.analytics || false,\n        crashReporting: oldSettings.crashReporting !== false,\n        dataSharing: oldSettings.dataSharing || false\n      }\n    };\n  }\n\n  /**\n   * Migrate variables to new format\n   */\n  migrateVariablesFormat(oldVariables) {\n    // Variables format should remain mostly the same\n    return { ...oldVariables };\n  }\n\n  /**\n   * Clean up legacy data after migration\n   */\n  async cleanupLegacyData(legacyData) {\n    try {\n      // Remove old localStorage keys\n      const keysToRemove = [\n        'commandProcessor_variables',\n        'commandProcessor_settings',\n        'watchlists',\n        'alerts'\n      ];\n\n      keysToRemove.forEach(key => {\n        if (localStorage.getItem(key)) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      // Remove other legacy keys found in detection\n      Object.keys(legacyData).forEach(key => {\n        if (key.startsWith('financeanalyst_') &&\n            !key.includes('migration') &&\n            !key.includes('session') &&\n            !key.includes('user') &&\n            !key.includes('crypto_key')) {\n          localStorage.removeItem(key);\n        }\n      });\n\n      console.warn('✅ Legacy data cleanup completed');\n\n    } catch (error) {\n      console.error('Failed to cleanup legacy data:', error);\n      // Don't throw - cleanup failure shouldn't break migration\n    }\n  }\n\n  /**\n   * Create backup before migration\n   */\n  async createMigrationBackup(data, version = 'legacy') {\n    try {\n      const backup = {\n        version,\n        timestamp: new Date().toISOString(),\n        data\n      };\n\n      localStorage.setItem(this.backupKey, JSON.stringify(backup));\n      console.warn(`✅ Migration backup created for version ${version}`);\n\n    } catch (error) {\n      console.error('Failed to create migration backup:', error);\n      // Don't throw - backup failure shouldn't prevent migration\n    }\n  }\n\n  /**\n   * Restore from migration backup\n   */\n  async restoreFromBackup() {\n    try {\n      const backupData = localStorage.getItem(this.backupKey);\n      if (!backupData) {\n        throw new Error('No migration backup found');\n      }\n\n      const backup = JSON.parse(backupData);\n\n      // Restore data based on backup version\n      if (backup.version === 'legacy') {\n        // Restore legacy format\n        Object.entries(backup.data).forEach(([key, value]) => {\n          localStorage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\n        });\n      }\n\n      console.warn('✅ Data restored from migration backup');\n      return true;\n\n    } catch (error) {\n      console.error('Failed to restore from backup:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Export current data for backup\n   */\n  async exportCurrentData() {\n    const data = {};\n\n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('financeanalyst_')) {\n        try {\n          data[key] = JSON.parse(localStorage.getItem(key));\n        } catch {\n          data[key] = localStorage.getItem(key);\n        }\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Find migration path between versions\n   */\n  findMigrationPath(fromVersion, toVersion) {\n    // For now, simple direct migration\n    // In the future, this could handle complex migration chains\n    const migration = this.migrations[fromVersion];\n\n    if (migration && migration.to === toVersion) {\n      return [migration];\n    }\n\n    return [];\n  }\n\n  /**\n   * Get migration status\n   */\n  getMigrationStatus() {\n    const storedVersion = localStorage.getItem(this.migrationKey);\n    const hasBackup = !!localStorage.getItem(this.backupKey);\n\n    return {\n      currentVersion: this.currentVersion,\n      storedVersion,\n      needsMigration: storedVersion !== this.currentVersion,\n      hasBackup,\n      availableMigrations: Object.keys(this.migrations)\n    };\n  }\n\n  /**\n   * Clear migration backup\n   */\n  clearBackup() {\n    localStorage.removeItem(this.backupKey);\n    console.warn('✅ Migration backup cleared');\n  }\n}\n","/**\n * Compression Utils\n * Provides data compression utilities for efficient storage\n */\n\nexport class CompressionUtils {\n  constructor() {\n    this.compressionFormat = 'gzip';\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n  }\n\n  /**\n   * Compress data using browser's native compression\n   */\n  async compress(data) {\n    try {\n      // Check if CompressionStream is available (modern browsers)\n      if ('CompressionStream' in window) {\n        return await this.compressWithStream(data);\n      } else {\n        // Fallback to LZ-string compression\n        return await this.compressWithLZString(data);\n      }\n    } catch (error) {\n      console.error('Compression failed:', error);\n      // Return original data if compression fails\n      return data;\n    }\n  }\n\n  /**\n   * Decompress data\n   */\n  async decompress(compressedData) {\n    try {\n      // Try native decompression first\n      if ('DecompressionStream' in window && this.isNativeCompressed(compressedData)) {\n        return await this.decompressWithStream(compressedData);\n      } else {\n        // Try LZ-string decompression\n        return await this.decompressWithLZString(compressedData);\n      }\n    } catch (error) {\n      console.error('Decompression failed:', error);\n      // Return original data if decompression fails\n      return compressedData;\n    }\n  }\n\n  /**\n   * Compress using native CompressionStream\n   */\n  async compressWithStream(data) {\n    const stream = new CompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write data to compression stream\n    const dataBuffer = this.textEncoder.encode(data);\n    writer.write(dataBuffer);\n    writer.close();\n\n    // Read compressed data\n    const chunks = [];\n    let done = false;\n\n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to base64\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    // Add marker to identify native compression\n    return 'NATIVE_GZIP:' + this.arrayBufferToBase64(combined.buffer);\n  }\n\n  /**\n   * Decompress using native DecompressionStream\n   */\n  async decompressWithStream(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('NATIVE_GZIP:', '');\n    const compressedBuffer = this.base64ToArrayBuffer(data);\n\n    const stream = new DecompressionStream(this.compressionFormat);\n    const writer = stream.writable.getWriter();\n    const reader = stream.readable.getReader();\n\n    // Write compressed data to decompression stream\n    writer.write(new Uint8Array(compressedBuffer));\n    writer.close();\n\n    // Read decompressed data\n    const chunks = [];\n    let done = false;\n\n    while (!done) {\n      const { value, done: readerDone } = await reader.read();\n      done = readerDone;\n      if (value) {\n        chunks.push(value);\n      }\n    }\n\n    // Combine chunks and convert to string\n    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const combined = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const chunk of chunks) {\n      combined.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return this.textDecoder.decode(combined);\n  }\n\n  /**\n   * Compress using LZ-string algorithm (fallback)\n   */\n  async compressWithLZString(data) {\n    // Simple LZ77-style compression implementation\n    const dictionary = new Map();\n    const result = [];\n    let dictSize = 256;\n\n    // Initialize dictionary with single characters\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(String.fromCharCode(i), i);\n    }\n\n    let current = '';\n    for (let i = 0; i < data.length; i++) {\n      const char = data[i];\n      const combined = current + char;\n\n      if (dictionary.has(combined)) {\n        current = combined;\n      } else {\n        result.push(dictionary.get(current));\n        dictionary.set(combined, dictSize++);\n        current = char;\n      }\n    }\n\n    if (current) {\n      result.push(dictionary.get(current));\n    }\n\n    // Convert to base64\n    const compressed = new Uint16Array(result);\n    return 'LZ_STRING:' + this.arrayBufferToBase64(compressed.buffer);\n  }\n\n  /**\n   * Decompress LZ-string compressed data\n   */\n  async decompressWithLZString(compressedData) {\n    // Remove marker\n    const data = compressedData.replace('LZ_STRING:', '');\n    const buffer = this.base64ToArrayBuffer(data);\n    const compressed = new Uint16Array(buffer);\n\n    const dictionary = new Map();\n    let dictSize = 256;\n\n    // Initialize dictionary\n    for (let i = 0; i < 256; i++) {\n      dictionary.set(i, String.fromCharCode(i));\n    }\n\n    let result = '';\n    let previous = String.fromCharCode(compressed[0]);\n    result += previous;\n\n    for (let i = 1; i < compressed.length; i++) {\n      const code = compressed[i];\n      let current;\n\n      if (dictionary.has(code)) {\n        current = dictionary.get(code);\n      } else if (code === dictSize) {\n        current = previous + previous[0];\n      } else {\n        throw new Error('Invalid compressed data');\n      }\n\n      result += current;\n      dictionary.set(dictSize++, previous + current[0]);\n      previous = current;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if data is compressed with native compression\n   */\n  isNativeCompressed(data) {\n    return typeof data === 'string' && data.startsWith('NATIVE_GZIP:');\n  }\n\n  /**\n   * Check if data is compressed with LZ-string\n   */\n  isLZStringCompressed(data) {\n    return typeof data === 'string' && data.startsWith('LZ_STRING:');\n  }\n\n  /**\n   * Check if data appears to be compressed\n   */\n  isCompressed(data) {\n    return this.isNativeCompressed(data) || this.isLZStringCompressed(data);\n  }\n\n  /**\n   * Get compression ratio\n   */\n  getCompressionRatio(originalData, compressedData) {\n    const originalSize = new Blob([originalData]).size;\n    const compressedSize = new Blob([compressedData]).size;\n    return compressedSize / originalSize;\n  }\n\n  /**\n   * Estimate compression benefit\n   */\n  async estimateCompressionBenefit(data) {\n    try {\n      const originalSize = new Blob([data]).size;\n      const compressed = await this.compress(data);\n      const compressedSize = new Blob([compressed]).size;\n\n      return {\n        originalSize,\n        compressedSize,\n        ratio: compressedSize / originalSize,\n        savings: originalSize - compressedSize,\n        savingsPercentage: ((originalSize - compressedSize) / originalSize) * 100,\n        worthCompressing: compressedSize < originalSize * 0.9 // 10% savings threshold\n      };\n    } catch (error) {\n      return {\n        originalSize: new Blob([data]).size,\n        compressedSize: new Blob([data]).size,\n        ratio: 1,\n        savings: 0,\n        savingsPercentage: 0,\n        worthCompressing: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if compression is available\n   */\n  isAvailable() {\n    return 'CompressionStream' in window || true; // LZ-string fallback always available\n  }\n\n  /**\n   * Get compression info\n   */\n  getInfo() {\n    return {\n      nativeCompressionAvailable: 'CompressionStream' in window,\n      fallbackAvailable: true,\n      defaultFormat: this.compressionFormat,\n      available: this.isAvailable()\n    };\n  }\n\n  /**\n   * Test compression performance\n   */\n  async performanceTest() {\n    const testData = JSON.stringify({\n      test: 'compression performance',\n      data: new Array(1000).fill('This is test data for compression performance testing. '.repeat(10)),\n      numbers: new Array(100).fill(0).map((_, i) => i),\n      timestamp: Date.now()\n    });\n\n    const iterations = 20;\n\n    try {\n      // Test compression performance\n      const compressStart = performance.now();\n      let compressed;\n      for (let i = 0; i < iterations; i++) {\n        compressed = await this.compress(testData);\n      }\n      const compressTime = performance.now() - compressStart;\n\n      // Test decompression performance\n      const decompressStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decompress(compressed);\n      }\n      const decompressTime = performance.now() - decompressStart;\n\n      const compressionRatio = this.getCompressionRatio(testData, compressed);\n\n      return {\n        compressTime: compressTime / iterations,\n        decompressTime: decompressTime / iterations,\n        totalTime: compressTime + decompressTime,\n        originalSize: testData.length,\n        compressedSize: compressed.length,\n        compressionRatio,\n        savingsPercentage: (1 - compressionRatio) * 100,\n        iterations,\n        method: this.isNativeCompressed(compressed) ? 'native' : 'lz-string'\n      };\n\n    } catch (error) {\n      console.error('Compression performance test failed:', error);\n      return null;\n    }\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n}\n","/**\n * IndexedDB Service\n * Manages IndexedDB operations for complex data storage with versioning and transactions\n */\n// @ts-check\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\n\nexport class IndexedDBService {\n  constructor() {\n    this.dbName = 'FinanceAnalystPro';\n    this.dbVersion = 1;\n    this.db = null;\n    this.isAvailable = false;\n    this.compressionUtils = new CompressionUtils();\n\n    // Define object stores\n    this.stores = {\n      watchlists: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name', unique: true },\n          { name: 'created', keyPath: 'created' },\n          { name: 'lastUpdated', keyPath: 'lastUpdated' }\n        ]\n      },\n      analysis_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'analysisType', keyPath: 'analysisType' },\n          { name: 'timestamp', keyPath: 'timestamp' }\n        ]\n      },\n      command_history: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'command', keyPath: 'command' },\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'success', keyPath: 'success' }\n        ]\n      },\n      alerts: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'ticker', keyPath: 'ticker' },\n          { name: 'condition', keyPath: 'condition' },\n          { name: 'created', keyPath: 'created' },\n          { name: 'triggered', keyPath: 'triggered' }\n        ]\n      },\n      cached_data: {\n        keyPath: 'key',\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'expiry', keyPath: 'expiry' },\n          { name: 'dataType', keyPath: 'dataType' }\n        ]\n      },\n      user_models: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'name', keyPath: 'name' },\n          { name: 'type', keyPath: 'type' },\n          { name: 'created', keyPath: 'created' }\n        ]\n      },\n      export_data: {\n        keyPath: 'id',\n        autoIncrement: true,\n        indexes: [\n          { name: 'timestamp', keyPath: 'timestamp' },\n          { name: 'type', keyPath: 'type' }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Initialize IndexedDB service\n   */\n  async initialize() {\n    if (!window.indexedDB) {\n      console.warn('⚠️ IndexedDB not available');\n      this.isAvailable = false;\n      return { success: false, available: false };\n    }\n\n    try {\n      this.db = await this.openDatabase();\n      this.isAvailable = true;\n      console.warn('✅ IndexedDB service initialized');\n\n      // Cleanup expired data\n      await this.cleanupExpiredData();\n\n      return { success: true, available: true, version: this.dbVersion };\n    } catch (error) {\n      console.error('❌ Failed to initialize IndexedDB:', error);\n      this.isAvailable = false;\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, available: false, error: message };\n    }\n  }\n\n  /**\n   * Open IndexedDB database\n   */\n  async openDatabase() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => {\n        reject(new Error(`Failed to open database: ${request.error}`));\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const target = /** @type {IDBOpenDBRequest} */ (event.target);\n        const db = target.result;\n        this.createObjectStores(db);\n      };\n    });\n  }\n\n  /**\n   * Create object stores during database upgrade\n   */\n  createObjectStores(db) {\n    // Remove existing stores if they exist\n    for (const storeName of Object.keys(this.stores)) {\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n    }\n\n    // Create new stores\n    for (const [storeName, config] of Object.entries(this.stores)) {\n      const store = db.createObjectStore(storeName, {\n        keyPath: config.keyPath,\n        autoIncrement: config.autoIncrement\n      });\n\n      // Create indexes\n      if (config.indexes) {\n        config.indexes.forEach(index => {\n          store.createIndex(index.name, index.keyPath, { unique: index.unique || false });\n        });\n      }\n    }\n\n    console.warn('✅ IndexedDB object stores created');\n  }\n\n  /**\n   * Store data in IndexedDB\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const {\n      storeName = 'cached_data',\n      metadata = {},\n      compress = false\n    } = options;\n\n    try {\n      // Prepare data object\n      const dataObject = {\n        key,\n        data,\n        timestamp: Date.now(),\n        metadata: {\n          ...metadata,\n          compressed: compress,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      // Compress if requested\n      if (compress) {\n        const compressed = await this.compressionUtils.compress(JSON.stringify(data));\n        dataObject.data = compressed;\n        dataObject.metadata.compressedSize = compressed.length;\n      }\n\n      // Store in IndexedDB\n      const result = await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.put(dataObject);\n      });\n\n      return {\n        success: true,\n        key: result,\n        storeName,\n        size: JSON.stringify(dataObject).length,\n        metadata: dataObject.metadata\n      };\n\n    } catch (error) {\n      console.error(`Failed to store data in IndexedDB for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from IndexedDB\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      const result = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.get(key);\n      });\n\n      if (!result) {\n        return null;\n      }\n\n      // Check expiry if applicable\n      if (result.metadata && result.metadata.expiry && Date.now() > result.metadata.expiry) {\n        await this.remove(key, { storeName });\n        return null;\n      }\n\n      // Decompress if needed\n      let data = result.data;\n      if (result.metadata && result.metadata.compressed) {\n        data = JSON.parse(await this.compressionUtils.decompress(data));\n      }\n\n      return {\n        data,\n        metadata: result.metadata,\n        timestamp: result.timestamp\n      };\n\n    } catch (error) {\n      console.error(`Failed to retrieve data from IndexedDB for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from IndexedDB\n   */\n  async remove(key, options = {}) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    const { storeName = 'cached_data' } = options;\n\n    try {\n      await this.performTransaction(storeName, 'readwrite', (store) => {\n        return store.delete(key);\n      });\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove data from IndexedDB for key \"${key}\":`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all data from a store\n   */\n  async clear(storeName = null) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      if (storeName) {\n        // Clear specific store\n        await this.performTransaction(storeName, 'readwrite', (store) => {\n          return store.clear();\n        });\n      } else {\n        // Clear all stores\n        for (const store of Object.keys(this.stores)) {\n          await this.performTransaction(store, 'readwrite', (storeObj) => {\n            return storeObj.clear();\n          });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to clear IndexedDB:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys from a store\n   */\n  async getKeys(storeName = 'cached_data') {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAllKeys();\n      });\n    } catch (error) {\n      console.error(`Failed to get keys from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get all data from a store\n   */\n  async getAll(storeName = 'cached_data', options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null, filter = null } = options;\n\n    try {\n      const results = await this.performTransaction(storeName, 'readonly', (store) => {\n        return store.getAll();\n      });\n\n      let filteredResults = results;\n\n      // Apply filter if provided\n      if (filter) {\n        filteredResults = results.filter(filter);\n      }\n\n      // Apply limit if provided\n      if (limit) {\n        filteredResults = filteredResults.slice(0, limit);\n      }\n\n      return filteredResults;\n    } catch (error) {\n      console.error(`Failed to get all data from IndexedDB store \"${storeName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Query data using an index\n   */\n  async query(storeName, indexName, value, options = {}) {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    const { limit = null } = options;\n\n    try {\n      return await this.performTransaction(storeName, 'readonly', (store) => {\n        const index = store.index(indexName);\n        const request = limit ? index.getAll(value, limit) : index.getAll(value);\n        return request;\n      });\n    } catch (error) {\n      console.error(`Failed to query IndexedDB store \"${storeName}\" with index \"${indexName}\":`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, stores: {}, total: { records: 0, size: 0 } };\n    }\n\n    try {\n      const stats = {\n        available: true,\n        stores: {},\n        total: { records: 0, size: 0 }\n      };\n\n      for (const storeName of Object.keys(this.stores)) {\n        const records = await this.getAll(storeName);\n        const recordCount = records.length;\n        const storeSize = records.reduce((size, record) => {\n          return size + JSON.stringify(record).length;\n        }, 0);\n\n        stats.stores[storeName] = {\n          records: recordCount,\n          size: storeSize\n        };\n\n        stats.total.records += recordCount;\n        stats.total.size += storeSize;\n      }\n\n      return stats;\n    } catch (error) {\n      console.error('Failed to get IndexedDB stats:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { available: false, error: message };\n    }\n  }\n\n  /**\n   * Export all data from IndexedDB\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const exportData = {};\n\n      for (const storeName of Object.keys(this.stores)) {\n        exportData[storeName] = await this.getAll(storeName);\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Failed to export IndexedDB data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into IndexedDB\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [storeName, records] of Object.entries(importData)) {\n        if (!this.stores[storeName]) {\n          console.warn(`Unknown store: ${storeName}`);\n          continue;\n        }\n\n        for (const record of records) {\n          try {\n            if (!overwrite) {\n              // Check if record exists\n              const existing = await this.retrieve(record.key || record.id, { storeName });\n              if (existing) {\n                results.skipped++;\n                continue;\n              }\n            }\n\n            await this.performTransaction(storeName, 'readwrite', (store) => {\n              return store.put(record);\n            });\n\n            results.imported++;\n          } catch (error) {\n            console.error(`Failed to import record to store \"${storeName}\":`, error);\n            results.errors++;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Failed to import IndexedDB data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cleanup expired data\n   */\n  async cleanupExpiredData() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      let cleaned = 0;\n      const now = Date.now();\n\n      // Cleanup cached_data store\n      const cachedData = await this.getAll('cached_data');\n      for (const record of cachedData) {\n        if (record.metadata && record.metadata.expiry && now > record.metadata.expiry) {\n          await this.remove(record.key, { storeName: 'cached_data' });\n          cleaned++;\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { cleaned: 0, error: message };\n    }\n  }\n\n  /**\n   * Perform IndexedDB transaction\n   */\n  async performTransaction(storeName, mode, operation) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([storeName], mode);\n      const store = transaction.objectStore(storeName);\n\n      transaction.onerror = () => {\n        reject(new Error(`Transaction failed: ${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        // Transaction completed successfully\n      };\n\n      const request = operation(store);\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = () => {\n        reject(new Error(`Operation failed: ${request.error}`));\n      };\n    });\n  }\n\n  /**\n   * Check if IndexedDB is available\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Get database info\n   */\n  getInfo() {\n    return {\n      dbName: this.dbName,\n      dbVersion: this.dbVersion,\n      available: this.isAvailable,\n      stores: Object.keys(this.stores),\n      storeCount: Object.keys(this.stores).length\n    };\n  }\n}\n","/**\n * Crypto Utils\n * Provides encryption and decryption utilities for data persistence\n */\n\nexport class CryptoUtils {\n  constructor() {\n    this.algorithm = 'AES-GCM';\n    this.keyLength = 256;\n    this.ivLength = 12; // 96 bits for GCM\n    this.tagLength = 16; // 128 bits for GCM\n    this.textEncoder = new TextEncoder();\n    this.textDecoder = new TextDecoder();\n\n    // Generate or retrieve encryption key\n    this.initializeKey();\n  }\n\n  /**\n   * Initialize encryption key\n   */\n  async initializeKey() {\n    try {\n      // Try to get existing key from localStorage\n      const storedKey = localStorage.getItem('financeanalyst_crypto_key');\n\n      if (storedKey) {\n        // Import existing key\n        const keyData = this.base64ToArrayBuffer(storedKey);\n        this.cryptoKey = await crypto.subtle.importKey(\n          'raw',\n          keyData,\n          { name: this.algorithm },\n          false,\n          ['encrypt', 'decrypt']\n        );\n      } else {\n        // Generate new key\n        this.cryptoKey = await crypto.subtle.generateKey(\n          {\n            name: this.algorithm,\n            length: this.keyLength\n          },\n          true,\n          ['encrypt', 'decrypt']\n        );\n\n        // Store key for future use\n        const exportedKey = await crypto.subtle.exportKey('raw', this.cryptoKey);\n        const keyString = this.arrayBufferToBase64(exportedKey);\n        localStorage.setItem('financeanalyst_crypto_key', keyString);\n      }\n\n      console.log('✅ Crypto key initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize crypto key:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Encrypt data\n   */\n  async encrypt(data) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert string to ArrayBuffer\n      const dataBuffer = this.textEncoder.encode(data);\n\n      // Generate random IV\n      const iv = crypto.getRandomValues(new Uint8Array(this.ivLength));\n\n      // Encrypt data\n      const encryptedBuffer = await crypto.subtle.encrypt(\n        {\n          name: this.algorithm,\n          iv\n        },\n        this.cryptoKey,\n        dataBuffer\n      );\n\n      // Combine IV and encrypted data\n      const combined = new Uint8Array(iv.length + encryptedBuffer.byteLength);\n      combined.set(iv, 0);\n      combined.set(new Uint8Array(encryptedBuffer), iv.length);\n\n      // Convert to base64 for storage\n      return this.arrayBufferToBase64(combined.buffer);\n\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt data\n   */\n  async decrypt(encryptedData) {\n    if (!this.cryptoKey) {\n      await this.initializeKey();\n    }\n\n    try {\n      // Convert base64 to ArrayBuffer\n      const combined = this.base64ToArrayBuffer(encryptedData);\n\n      // Extract IV and encrypted data\n      const iv = combined.slice(0, this.ivLength);\n      const encryptedBuffer = combined.slice(this.ivLength);\n\n      // Decrypt data\n      const decryptedBuffer = await crypto.subtle.decrypt(\n        {\n          name: this.algorithm,\n          iv\n        },\n        this.cryptoKey,\n        encryptedBuffer\n      );\n\n      // Convert back to string\n      return this.textDecoder.decode(decryptedBuffer);\n\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate hash of data\n   */\n  async hash(data) {\n    try {\n      const dataBuffer = this.textEncoder.encode(data);\n      const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n      return this.arrayBufferToBase64(hashBuffer);\n    } catch (error) {\n      console.error('Hashing failed:', error);\n      throw new Error(`Hashing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verify data integrity\n   */\n  async verifyIntegrity(data, expectedHash) {\n    try {\n      const actualHash = await this.hash(data);\n      return actualHash === expectedHash;\n    } catch (error) {\n      console.error('Integrity verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate secure random string\n   */\n  generateRandomString(length = 32) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return this.arrayBufferToBase64(array.buffer).substring(0, length);\n  }\n\n  /**\n   * Derive key from password (for future use)\n   */\n  async deriveKeyFromPassword(password, salt) {\n    try {\n      const passwordBuffer = this.textEncoder.encode(password);\n      const saltBuffer = this.textEncoder.encode(salt);\n\n      // Import password as key material\n      const keyMaterial = await crypto.subtle.importKey(\n        'raw',\n        passwordBuffer,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveKey']\n      );\n\n      // Derive key using PBKDF2\n      const derivedKey = await crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: saltBuffer,\n          iterations: 100000,\n          hash: 'SHA-256'\n        },\n        keyMaterial,\n        {\n          name: this.algorithm,\n          length: this.keyLength\n        },\n        false,\n        ['encrypt', 'decrypt']\n      );\n\n      return derivedKey;\n\n    } catch (error) {\n      console.error('Key derivation failed:', error);\n      throw new Error(`Key derivation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if Web Crypto API is available\n   */\n  isAvailable() {\n    return !!(window.crypto && window.crypto.subtle);\n  }\n\n  /**\n   * Get encryption info\n   */\n  getInfo() {\n    return {\n      algorithm: this.algorithm,\n      keyLength: this.keyLength,\n      ivLength: this.ivLength,\n      available: this.isAvailable(),\n      keyInitialized: !!this.cryptoKey\n    };\n  }\n\n  // Utility methods\n\n  /**\n   * Convert ArrayBuffer to base64 string\n   */\n  arrayBufferToBase64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  base64ToArrayBuffer(base64) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Securely clear sensitive data from memory\n   */\n  clearSensitiveData(data) {\n    if (data instanceof ArrayBuffer) {\n      const view = new Uint8Array(data);\n      crypto.getRandomValues(view);\n    } else if (typeof data === 'string') {\n      // For strings, we can't directly clear memory in JavaScript\n      // but we can at least overwrite the reference\n      data = null;\n    }\n  }\n\n  /**\n   * Test encryption/decryption performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable()) {\n      return null;\n    }\n\n    const testData = JSON.stringify({\n      test: 'performance',\n      data: new Array(1000).fill('test data for performance testing'),\n      timestamp: Date.now()\n    });\n\n    const iterations = 50;\n\n    try {\n      // Test encryption performance\n      const encryptStart = performance.now();\n      let encrypted;\n      for (let i = 0; i < iterations; i++) {\n        encrypted = await this.encrypt(testData);\n      }\n      const encryptTime = performance.now() - encryptStart;\n\n      // Test decryption performance\n      const decryptStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.decrypt(encrypted);\n      }\n      const decryptTime = performance.now() - decryptStart;\n\n      return {\n        encryptTime: encryptTime / iterations,\n        decryptTime: decryptTime / iterations,\n        totalTime: encryptTime + decryptTime,\n        dataSize: testData.length,\n        encryptedSize: encrypted.length,\n        compressionRatio: encrypted.length / testData.length,\n        iterations\n      };\n\n    } catch (error) {\n      console.error('Crypto performance test failed:', error);\n      return null;\n    }\n  }\n}\n","// @ts-check\n/**\n * Local Storage Service\n * Manages localStorage operations with encryption, compression, and data validation\n */\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\n/**\n * @typedef {Object} StoreOptions\n * @property {boolean} [encrypt]\n * @property {boolean} [compress]\n * @property {number|null} [ttl]\n * @property {boolean} [validate]\n */\n/**\n * @typedef {Object} RetrieveOptions\n * @property {boolean} [decrypt]\n * @property {boolean} [validateTTL]\n */\n/**\n * @typedef {Object} ImportOptions\n * @property {boolean} [overwrite]\n */\n/**\n * @typedef {Object} LocalStorageStats\n * @property {boolean} available\n * @property {number} used\n * @property {number} keys\n * @property {number} [maxSize]\n * @property {number} [usagePercentage]\n * @property {Record<string, number>} [itemSizes]\n * @property {{ key: string | null, size: number }} [largestItem]\n * @property {string} [error]\n */\n\nexport class LocalStorageService {\n  constructor() {\n    this.prefix = 'financeanalyst_';\n    this.isAvailable = false;\n    this.maxSize = 5 * 1024 * 1024; // 5MB typical localStorage limit\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n  }\n\n  /**\n   * Initialize the localStorage service\n   */\n  async initialize() {\n    try {\n      // Test localStorage availability\n      const testKey = this.prefix + 'test';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n\n      this.isAvailable = true;\n      console.warn('✅ LocalStorage service initialized');\n\n      return { success: true, available: true };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.warn('⚠️ LocalStorage not available:', message);\n      this.isAvailable = false;\n      return { success: false, available: false, error: message };\n    }\n  }\n\n  /**\n   * Store data in localStorage\n   */\n  async store(key, data, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const {\n      encrypt = false,\n      compress = false,\n      ttl = null,\n      validate = true\n    } = options;\n\n    try {\n      // Validate data if requested\n      if (validate && !this.validateData(data)) {\n        throw new Error('Invalid data format');\n      }\n\n      // Prepare storage object\n      const storageObject = {\n        data,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0',\n          encrypted: encrypt,\n          compressed: compress,\n          ttl,\n          originalSize: JSON.stringify(data).length\n        }\n      };\n\n      let serializedData = JSON.stringify(storageObject);\n\n      // Compress if requested\n      if (compress) {\n        serializedData = await this.compressionUtils.compress(serializedData);\n        storageObject.metadata.compressedSize = serializedData.length;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        serializedData = await this.cryptoUtils.encrypt(serializedData);\n      }\n\n      // Check size limits\n      if (serializedData.length > this.maxSize) {\n        throw new Error(`Data too large: ${serializedData.length} bytes exceeds ${this.maxSize} bytes`);\n      }\n\n      // Store in localStorage\n      const storageKey = this.prefix + key;\n      localStorage.setItem(storageKey, serializedData);\n\n      return {\n        success: true,\n        key: storageKey,\n        size: serializedData.length,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error(`Failed to store data in localStorage for key \"${key}\":`, message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from localStorage\n   */\n  async retrieve(key, options = {}) {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const { decrypt = false, validateTTL = true } = options;\n\n    try {\n      const storageKey = this.prefix + key;\n      let serializedData = localStorage.getItem(storageKey);\n\n      if (!serializedData) {\n        return null;\n      }\n\n      // Decrypt if needed\n      if (decrypt) {\n        serializedData = await this.cryptoUtils.decrypt(serializedData);\n      }\n\n      // Decompress if needed\n      let storageObject;\n      try {\n        storageObject = JSON.parse(serializedData);\n      } catch {\n        // Try decompression first\n        try {\n          const decompressed = await this.compressionUtils.decompress(serializedData);\n          storageObject = JSON.parse(decompressed);\n        } catch {\n          throw new Error('Failed to parse stored data');\n        }\n      }\n\n      // Validate TTL\n      if (validateTTL && storageObject.metadata && storageObject.metadata.ttl) {\n        const now = Date.now();\n        const expiry = storageObject.metadata.timestamp + storageObject.metadata.ttl;\n\n        if (now > expiry) {\n          await this.remove(key);\n          return null;\n        }\n      }\n\n      return {\n        data: storageObject.data,\n        metadata: storageObject.metadata\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error(`Failed to retrieve data from localStorage for key \"${key}\":`, message);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from localStorage\n   */\n  async remove(key) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const storageKey = this.prefix + key;\n      localStorage.removeItem(storageKey);\n      return true;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error(`Failed to remove data from localStorage for key \"${key}\":`, message);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all application data from localStorage\n   */\n  async clear() {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      const appKeys = keys.filter(key => key.startsWith(this.prefix));\n\n      appKeys.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      return true;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to clear localStorage:', message);\n      return false;\n    }\n  }\n\n  /**\n   * Get all keys for this application\n   */\n  async getKeys() {\n    if (!this.isAvailable) {\n      return [];\n    }\n\n    try {\n      const keys = Object.keys(localStorage);\n      return keys\n        .filter(key => key.startsWith(this.prefix))\n        .map(key => key.substring(this.prefix.length));\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to get localStorage keys:', message);\n      return [];\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStats() {\n    if (!this.isAvailable) {\n      return { available: false, used: 0, keys: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let totalSize = 0;\n      let itemCount = 0;\n      const itemSizes = {};\n\n      for (const key of keys) {\n        const storageKey = this.prefix + key;\n        const data = localStorage.getItem(storageKey);\n        if (data) {\n          const size = data.length;\n          totalSize += size;\n          itemCount++;\n          itemSizes[key] = size;\n        }\n      }\n\n      return {\n        available: true,\n        used: totalSize,\n        keys: itemCount,\n        maxSize: this.maxSize,\n        usagePercentage: (totalSize / this.maxSize) * 100,\n        itemSizes,\n        largestItem: Object.entries(itemSizes).reduce((max, [key, size]) =>\n          size > max.size ? { key, size } : max, { key: null, size: 0 })\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to get localStorage stats:', message);\n      return { available: false, used: 0, keys: 0, error: message };\n    }\n  }\n\n  /**\n   * Export all application data\n   */\n  async exportAll() {\n    if (!this.isAvailable) {\n      return {};\n    }\n\n    try {\n      const keys = await this.getKeys();\n      const exportData = {};\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: false });\n        if (data) {\n          exportData[key] = data;\n        }\n      }\n\n      return exportData;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to export localStorage data:', message);\n      return {};\n    }\n  }\n\n  /**\n   * Import data into localStorage\n   */\n  async importData(importData, options = {}) {\n    if (!this.isAvailable) {\n      throw new Error('localStorage is not available');\n    }\n\n    const { overwrite = false } = options;\n\n    try {\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: 0\n      };\n\n      for (const [key, data] of Object.entries(importData)) {\n        try {\n          // Check if key exists and overwrite setting\n          const existing = await this.retrieve(key, { validateTTL: false });\n          if (existing && !overwrite) {\n            results.skipped++;\n            continue;\n          }\n\n          // Import the data\n          await this.store(key, data.data, {\n            encrypt: data.metadata?.encrypted || false,\n            compress: data.metadata?.compressed || false,\n            ttl: data.metadata?.ttl || null\n          });\n\n          results.imported++;\n        } catch (error) {\n          const message = error instanceof Error ? error.message : String(error);\n          console.error(`Failed to import key \"${key}\":`, message);\n          results.errors++;\n        }\n      }\n\n      return results;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to import localStorage data:', message);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if localStorage has enough space for data\n   */\n  async hasSpace(dataSize) {\n    if (!this.isAvailable) {\n      return false;\n    }\n\n    try {\n      const stats = await this.getStats();\n      return (stats.used + dataSize) <= this.maxSize;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Cleanup expired items\n   */\n  async cleanup() {\n    if (!this.isAvailable) {\n      return { cleaned: 0 };\n    }\n\n    try {\n      const keys = await this.getKeys();\n      let cleaned = 0;\n\n      for (const key of keys) {\n        const data = await this.retrieve(key, { validateTTL: true });\n        if (!data) {\n          cleaned++; // Item was expired and removed\n        }\n      }\n\n      return { cleaned };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to cleanup localStorage:', message);\n      return { cleaned: 0, error: message };\n    }\n  }\n\n  /**\n   * Validate data before storage\n   */\n  validateData(data) {\n    try {\n      // Check if data is serializable\n      JSON.stringify(data);\n\n      // Check for circular references\n      const seen = new WeakSet();\n      const checkCircular = (obj) => {\n        if (obj !== null && typeof obj === 'object') {\n          if (seen.has(obj)) {\n            return false;\n          }\n          seen.add(obj);\n          for (const key in obj) {\n            if (!checkCircular(obj[key])) {\n              return false;\n            }\n          }\n        }\n        return true;\n      };\n\n      return checkCircular(data);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get localStorage availability status\n   */\n  isStorageAvailable() {\n    return this.isAvailable;\n  }\n\n  /**\n   * Test localStorage performance\n   */\n  async performanceTest() {\n    if (!this.isAvailable) {\n      return null;\n    }\n\n    const testData = { test: 'performance', data: new Array(1000).fill('test') };\n    const iterations = 100;\n\n    try {\n      // Test write performance\n      const writeStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.store(`perf_test_${i}`, testData);\n      }\n      const writeTime = performance.now() - writeStart;\n\n      // Test read performance\n      const readStart = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        await this.retrieve(`perf_test_${i}`);\n      }\n      const readTime = performance.now() - readStart;\n\n      // Cleanup test data\n      for (let i = 0; i < iterations; i++) {\n        await this.remove(`perf_test_${i}`);\n      }\n\n      return {\n        writeTime: writeTime / iterations,\n        readTime: readTime / iterations,\n        totalTime: writeTime + readTime,\n        iterations\n      };\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Performance test failed:', message);\n      return null;\n    }\n  }\n}\n","// @ts-check\n/**\n * Session Manager\n * Manages user sessions, authentication state, and session persistence\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\n/**\n * @typedef {Object} UserPrivacy\n * @property {boolean} analytics\n * @property {boolean} crashReporting\n * @property {boolean} dataSharing\n */\n/**\n * @typedef {Object} Preferences\n * @property {string} currency\n * @property {number} precision\n * @property {string} dateFormat\n * @property {string} theme\n * @property {boolean} notifications\n * @property {boolean} autoSave\n * @property {boolean} commandHistory\n * @property {number} dataRetention\n * @property {UserPrivacy} privacy\n */\n/**\n * @typedef {Object} Session\n * @property {string} id\n * @property {string} userId\n * @property {number} created\n * @property {number} lastActivity\n * @property {number} expires\n * @property {string} userAgent\n * @property {string} platform\n * @property {string} language\n * @property {string} timezone\n * @property {string} version\n */\n/**\n * @typedef {Object} User\n * @property {string} id\n * @property {string} name\n * @property {string|null} [email]\n * @property {number} created\n * @property {number} lastLogin\n * @property {number} loginCount\n * @property {Preferences} preferences\n */\n/**\n * @typedef {Object} SessionExport\n * @property {Session} session\n * @property {User} user\n * @property {Preferences} preferences\n * @property {number} exportTimestamp\n */\n/**\n * @typedef {Object} SessionImport\n * @property {Session} session\n * @property {User} user\n */\n/**\n * @typedef {'sessionCreated'|'sessionLoaded'|'sessionDestroyed'|'preferencesUpdated'|'sessionImported'} SessionEvent\n */\n/**\n * @callback SessionEventCallback\n * @param {SessionEvent} event\n * @param {any} data\n * @returns {void}\n */\n\nexport class SessionManager {\n  constructor() {\n    this.sessionKey = 'financeanalyst_session';\n    this.userKey = 'financeanalyst_user';\n    this.preferencesKey = 'financeanalyst_preferences';\n    this.cryptoUtils = new CryptoUtils();\n\n    /** @type {Session|null} */\n    this.currentSession = null;\n    /** @type {User|null} */\n    this.currentUser = null;\n    this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n    /** @type {Set<SessionEventCallback>} */\n    this.listeners = new Set();\n\n    // Default user preferences\n    this.defaultPreferences = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD',\n      theme: 'dark',\n      notifications: true,\n      autoSave: true,\n      commandHistory: true,\n      dataRetention: 30, // days\n      privacy: {\n        analytics: false,\n        crashReporting: true,\n        dataSharing: false\n      }\n    };\n  }\n\n  /**\n   * Initialize session manager\n   * @returns {Promise<{success: boolean, hasSession?: boolean, error?: string}>}\n   */\n  async initialize() {\n    try {\n      // Load existing session\n      await this.loadSession();\n\n      // Setup session monitoring\n      this.setupSessionMonitoring();\n\n      console.warn('✅ Session Manager initialized');\n      return { success: true, hasSession: !!this.currentSession };\n    } catch (error) {\n      console.error('❌ Failed to initialize Session Manager:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Create a new session\n   * @param {Partial<User> & {preferences?: Partial<Preferences>}} [userInfo]\n   * @returns {Promise<{success: true, session: Session, user: User}>}\n   */\n  async createSession(userInfo = {}) {\n    try {\n      const sessionId = this.generateSessionId();\n      const now = Date.now();\n\n      const session = {\n        id: sessionId,\n        userId: userInfo.id || this.generateUserId(),\n        created: now,\n        lastActivity: now,\n        expires: now + this.sessionTimeout,\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        version: '1.0'\n      };\n\n      const user = {\n        id: session.userId,\n        name: userInfo.name || 'Anonymous User',\n        email: userInfo.email || null,\n        created: userInfo.created || now,\n        lastLogin: now,\n        loginCount: (userInfo.loginCount || 0) + 1,\n        preferences: { ...this.defaultPreferences, ...userInfo.preferences }\n      };\n\n      // Store session and user data\n      await this.storeSession(session);\n      await this.storeUser(user);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionCreated', { session, user });\n\n      return {\n        success: true,\n        session,\n        user\n      };\n\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load existing session\n   * @returns {Promise<{ session: Session, user: User } | null>}\n   */\n  async loadSession() {\n    try {\n      const sessionData = localStorage.getItem(this.sessionKey);\n      const userData = localStorage.getItem(this.userKey);\n\n      if (!sessionData || !userData) {\n        return null;\n      }\n\n      const session = JSON.parse(sessionData);\n      const user = JSON.parse(userData);\n\n      // Check if session is expired\n      if (Date.now() > session.expires) {\n        await this.destroySession();\n        return null;\n      }\n\n      // Update last activity\n      session.lastActivity = Date.now();\n      await this.storeSession(session);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionLoaded', { session, user });\n\n      return { session, user };\n\n    } catch (error) {\n      console.error('Failed to load session:', error);\n      // Clear corrupted session data\n      await this.destroySession();\n      return null;\n    }\n  }\n\n  /**\n   * Update session activity\n   * @returns {Promise<boolean>}\n   */\n  async updateActivity() {\n    if (!this.currentSession) {\n      return false;\n    }\n\n    try {\n      this.currentSession.lastActivity = Date.now();\n\n      // Extend session if needed\n      const timeUntilExpiry = this.currentSession.expires - Date.now();\n      if (timeUntilExpiry < this.sessionTimeout * 0.1) { // Extend if less than 10% time left\n        this.currentSession.expires = Date.now() + this.sessionTimeout;\n      }\n\n      await this.storeSession(this.currentSession);\n      return true;\n\n    } catch (error) {\n      console.error('Failed to update session activity:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Destroy current session\n   * @returns {Promise<boolean>}\n   */\n  async destroySession() {\n    try {\n      const session = this.currentSession;\n      const user = this.currentUser;\n\n      // Clear session data\n      localStorage.removeItem(this.sessionKey);\n\n      this.currentSession = null;\n      this.currentUser = null;\n\n      // Notify listeners\n      this.notifyListeners('sessionDestroyed', { session, user });\n\n      return true;\n\n    } catch (error) {\n      console.error('Failed to destroy session:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current session\n   * @returns {Session|null}\n   */\n  getSession() {\n    return this.currentSession;\n  }\n\n  /**\n   * Get current user\n   * @returns {User|null}\n   */\n  getUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean}\n   */\n  isAuthenticated() {\n    return !!(this.currentSession && Date.now() < this.currentSession.expires);\n  }\n\n  /**\n   * Get user preferences\n   * @returns {Preferences}\n   */\n  getPreferences() {\n    return this.currentUser ? this.currentUser.preferences : this.defaultPreferences;\n  }\n\n  /**\n   * Update user preferences\n   * @param {Partial<Preferences>} newPreferences\n   * @returns {Promise<Preferences>}\n   */\n  async updatePreferences(newPreferences) {\n    if (!this.currentUser) {\n      throw new Error('No active user session');\n    }\n\n    try {\n      this.currentUser.preferences = {\n        ...this.currentUser.preferences,\n        ...newPreferences\n      };\n\n      await this.storeUser(this.currentUser);\n\n      // Also store preferences separately for quick access\n      localStorage.setItem(this.preferencesKey, JSON.stringify(this.currentUser.preferences));\n\n      // Notify listeners\n      this.notifyListeners('preferencesUpdated', { preferences: this.currentUser.preferences });\n\n      return this.currentUser.preferences;\n\n    } catch (error) {\n      console.error('Failed to update preferences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get session statistics\n   * @returns {null | { sessionId: string, userId: string, userName: string, sessionDuration: number, timeUntilExpiry: number, lastActivityAge: number, loginCount: number, userCreated: number, isExpired: boolean, isActive: boolean }}\n   */\n  getSessionStats() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    const now = Date.now();\n    const sessionDuration = now - this.currentSession.created;\n    const timeUntilExpiry = this.currentSession.expires - now;\n    const lastActivityAge = now - this.currentSession.lastActivity;\n\n    return {\n      sessionId: this.currentSession.id,\n      userId: this.currentUser.id,\n      userName: this.currentUser.name,\n      sessionDuration,\n      timeUntilExpiry,\n      lastActivityAge,\n      loginCount: this.currentUser.loginCount,\n      userCreated: this.currentUser.created,\n      isExpired: timeUntilExpiry <= 0,\n      isActive: lastActivityAge < 5 * 60 * 1000 // Active if activity within 5 minutes\n    };\n  }\n\n  /**\n   * Export session data\n   * @returns {Promise<SessionExport|null>}\n   */\n  async exportSessionData() {\n    if (!this.currentSession || !this.currentUser) {\n      return null;\n    }\n\n    return {\n      session: { ...this.currentSession },\n      user: { ...this.currentUser },\n      preferences: { ...this.currentUser.preferences },\n      exportTimestamp: Date.now()\n    };\n  }\n\n  /**\n   * Import session data\n   * @param {SessionImport} sessionData\n   * @returns {Promise<{success: true, session: Session, user: User}>}\n   */\n  async importSessionData(sessionData) {\n    try {\n      if (!sessionData || !sessionData.session || !sessionData.user) {\n        throw new Error('Invalid session data format');\n      }\n\n      // Validate session data\n      const session = sessionData.session;\n      const user = sessionData.user;\n\n      // Update timestamps\n      session.lastActivity = Date.now();\n      session.expires = Date.now() + this.sessionTimeout;\n      user.lastLogin = Date.now();\n\n      // Store imported data\n      await this.storeSession(session);\n      await this.storeUser(user);\n\n      this.currentSession = session;\n      this.currentUser = user;\n\n      // Notify listeners\n      this.notifyListeners('sessionImported', { session, user });\n\n      return { success: true, session, user };\n\n    } catch (error) {\n      console.error('Failed to import session data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add session event listener\n   * @param {SessionEventCallback} callback\n   * @returns {void}\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove session event listener\n   * @param {SessionEventCallback} callback\n   * @returns {void}\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  /**\n   * Store session data\n   * @param {Session} session\n   * @returns {Promise<void>}\n   */\n  async storeSession(session) {\n    try {\n      localStorage.setItem(this.sessionKey, JSON.stringify(session));\n    } catch (error) {\n      console.error('Failed to store session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Store user data\n   * @param {User} user\n   * @returns {Promise<void>}\n   */\n  async storeUser(user) {\n    try {\n      localStorage.setItem(this.userKey, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to store user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate unique session ID\n   * @returns {string}\n   */\n  generateSessionId() {\n    return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Generate unique user ID\n   * @returns {string}\n   */\n  generateUserId() {\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Setup session monitoring\n   * @returns {void}\n   */\n  setupSessionMonitoring() {\n    // Update activity on user interaction\n    const events = ['click', 'keypress', 'scroll', 'mousemove'];\n    let lastActivity = Date.now();\n\n    const throttledUpdate = this.throttle(() => {\n      const now = Date.now();\n      if (now - lastActivity > 60000) { // Update every minute\n        this.updateActivity();\n        lastActivity = now;\n      }\n    }, 1000);\n\n    events.forEach(event => {\n      document.addEventListener(event, throttledUpdate, { passive: true });\n    });\n\n    // Check session expiry periodically\n    setInterval(() => {\n      if (this.currentSession && Date.now() > this.currentSession.expires) {\n        this.destroySession();\n      }\n    }, 60000); // Check every minute\n\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        this.updateActivity();\n      }\n    });\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n      this.updateActivity();\n    });\n  }\n\n  /**\n   * Throttle function calls\n   * @template {(...args: any[]) => void} F\n   * @param {F} func\n   * @param {number} limit\n   * @returns {(...args: Parameters<F>) => void}\n   */\n  throttle(func, limit) {\n    let inThrottle;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Notify event listeners\n   * @param {SessionEvent} event\n   * @param {any} data\n   * @returns {void}\n   */\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in session event listener:', error);\n      }\n    });\n  }\n}\n","/**\n * Persistence Manager - Central data persistence orchestrator\n * Manages multiple storage layers and provides unified API for data persistence\n */\n\nimport { DataMigrationService } from './DataMigrationService';\nimport { IndexedDBService } from './IndexedDBService';\nimport { LocalStorageService } from './LocalStorageService';\nimport { SessionManager } from './SessionManager';\n\nexport class PersistenceManager {\n  constructor() {\n    this.localStorage = new LocalStorageService();\n    this.indexedDB = new IndexedDBService();\n    this.sessionManager = new SessionManager();\n    this.migrationService = new DataMigrationService();\n\n    this.isInitialized = false;\n    this.storageQuota = null;\n    this.listeners = new Map();\n\n    // Storage strategy configuration\n    this.storageStrategy = {\n      // Small, frequently accessed data -> localStorage\n      localStorage: [\n        'user_preferences',\n        'session_data',\n        'ui_state',\n        'recent_commands',\n        'quick_settings'\n      ],\n      // Large, complex data -> IndexedDB\n      indexedDB: [\n        'watchlists',\n        'analysis_history',\n        'command_history',\n        'alerts',\n        'cached_data',\n        'user_models',\n        'export_data'\n      ]\n    };\n  }\n\n  /**\n   * Initialize the persistence manager\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      // Check storage availability\n      await this.checkStorageAvailability();\n\n      // Initialize storage services\n      await Promise.all([\n        this.localStorage.initialize(),\n        this.indexedDB.initialize(),\n        this.sessionManager.initialize()\n      ]);\n\n      // Check for data migrations\n      await this.migrationService.checkAndMigrate();\n\n      // Estimate storage quota\n      await this.estimateStorageQuota();\n\n      this.isInitialized = true;\n      console.warn('✅ Persistence Manager initialized successfully');\n\n      return {\n        success: true,\n        storageQuota: this.storageQuota,\n        availableStorage: await this.getAvailableStorage()\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize Persistence Manager:', error);\n      throw new Error(`Persistence initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Store data using appropriate storage layer\n   */\n  async store(key, data, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      encrypt = false,\n      compress = false,\n      ttl = null\n    } = options;\n\n    try {\n      const metadata = {\n        timestamp: Date.now(),\n        version: '1.0',\n        encrypted: encrypt,\n        compressed: compress,\n        ttl,\n        size: JSON.stringify(data).length\n      };\n\n      let result;\n\n      if (storage === 'localStorage') {\n        result = await this.localStorage.store(key, data, { encrypt, ttl });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.store(key, data, { metadata, compress });\n      } else {\n        throw new Error(`Unknown storage layer: ${storage}`);\n      }\n\n      // Notify listeners\n      this.notifyListeners('store', { key, storage, metadata });\n\n      return result;\n\n    } catch (error) {\n      console.error(`Failed to store data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve data from appropriate storage layer\n   */\n  async retrieve(key, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      storage = this.determineStorageLayer(key),\n      decrypt = false\n    } = options;\n\n    try {\n      let result;\n\n      if (storage === 'localStorage') {\n        result = await this.localStorage.retrieve(key, { decrypt });\n      } else if (storage === 'indexedDB') {\n        result = await this.indexedDB.retrieve(key);\n      } else {\n        // Try both storage layers\n        result = await this.localStorage.retrieve(key, { decrypt }) ||\n                 await this.indexedDB.retrieve(key);\n      }\n\n      // Check TTL if applicable\n      if (result && result.metadata && result.metadata.ttl) {\n        const now = Date.now();\n        const expiry = result.metadata.timestamp + result.metadata.ttl;\n\n        if (now > expiry) {\n          await this.remove(key, { storage });\n          return null;\n        }\n      }\n\n      return result ? result.data || result : null;\n\n    } catch (error) {\n      console.error(`Failed to retrieve data for key \"${key}\":`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove data from storage\n   */\n  async remove(key, options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both' } = options;\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.remove(key));\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.remove(key));\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('remove', { key, storage });\n\n      return true;\n\n    } catch (error) {\n      console.error(`Failed to remove data for key \"${key}\":`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear all data from storage\n   */\n  async clear(options = {}) {\n    await this.ensureInitialized();\n\n    const { storage = 'both', confirm = false } = options;\n\n    if (!confirm) {\n      throw new Error('Clear operation requires explicit confirmation');\n    }\n\n    try {\n      const promises = [];\n\n      if (storage === 'localStorage' || storage === 'both') {\n        promises.push(this.localStorage.clear());\n      }\n\n      if (storage === 'indexedDB' || storage === 'both') {\n        promises.push(this.indexedDB.clear());\n      }\n\n      await Promise.all(promises);\n\n      // Notify listeners\n      this.notifyListeners('clear', { storage });\n\n      return true;\n\n    } catch (error) {\n      console.error('Failed to clear storage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStorageStats() {\n    await this.ensureInitialized();\n\n    try {\n      const [localStorageStats, indexedDBStats] = await Promise.all([\n        this.localStorage.getStats(),\n        this.indexedDB.getStats()\n      ]);\n\n      const totalUsed = localStorageStats.used + indexedDBStats.used;\n      const totalAvailable = await this.getAvailableStorage();\n\n      return {\n        localStorage: localStorageStats,\n        indexedDB: indexedDBStats,\n        total: {\n          used: totalUsed,\n          available: totalAvailable,\n          quota: this.storageQuota,\n          usagePercentage: this.storageQuota ? (totalUsed / this.storageQuota) * 100 : 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to get storage stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Export all user data\n   */\n  async exportData(options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      format = 'json',\n      includeMetadata = true,\n      _compress = false\n    } = options;\n\n    try {\n      const [localStorageData, indexedDBData] = await Promise.all([\n        this.localStorage.exportAll(),\n        this.indexedDB.exportAll()\n      ]);\n\n      const exportData = {\n        version: '1.0',\n        timestamp: new Date().toISOString(),\n        localStorage: localStorageData,\n        indexedDB: indexedDBData\n      };\n\n      if (includeMetadata) {\n        exportData.metadata = {\n          userAgent: navigator.userAgent,\n          storageStats: await this.getStorageStats(),\n          exportOptions: options\n        };\n      }\n\n      return {\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import user data\n   */\n  async importData(importData, options = {}) {\n    await this.ensureInitialized();\n\n    const {\n      overwrite = false,\n      validate = true,\n      backup = true\n    } = options;\n\n    try {\n      // Validate import data\n      if (validate && !this.validateImportData(importData)) {\n        throw new Error('Invalid import data format');\n      }\n\n      // Create backup if requested\n      if (backup) {\n        const backupData = await this.exportData();\n        await this.store('backup_before_import', backupData, {\n          storage: 'indexedDB',\n          ttl: 7 * 24 * 60 * 60 * 1000 // 7 days\n        });\n      }\n\n      // Import localStorage data\n      if (importData.localStorage) {\n        await this.localStorage.importData(importData.localStorage, { overwrite });\n      }\n\n      // Import IndexedDB data\n      if (importData.indexedDB) {\n        await this.indexedDB.importData(importData.indexedDB, { overwrite });\n      }\n\n      // Notify listeners\n      this.notifyListeners('import', { size: JSON.stringify(importData).length });\n\n      return {\n        success: true,\n        imported: {\n          localStorage: Object.keys(importData.localStorage || {}).length,\n          indexedDB: Object.keys(importData.indexedDB || {}).length\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add event listener for storage events\n   */\n  addEventListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n\n  // Private methods\n\n  async ensureInitialized() {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  determineStorageLayer(key) {\n    if (this.storageStrategy.localStorage.includes(key)) {\n      return 'localStorage';\n    }\n    if (this.storageStrategy.indexedDB.includes(key)) {\n      return 'indexedDB';\n    }\n    // Default to localStorage for small data\n    return 'localStorage';\n  }\n\n  async checkStorageAvailability() {\n    // Check localStorage\n    if (!window.localStorage) {\n      throw new Error('localStorage is not available');\n    }\n\n    // Check IndexedDB\n    if (!window.indexedDB) {\n      throw new Error('IndexedDB is not available');\n    }\n\n    return true;\n  }\n\n  async estimateStorageQuota() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      this.storageQuota = estimate.quota;\n      return estimate;\n    }\n    return null;\n  }\n\n  async getAvailableStorage() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return estimate.quota - estimate.usage;\n    }\n    return null;\n  }\n\n  validateImportData(data) {\n    return data &&\n           typeof data === 'object' &&\n           data.version &&\n           (data.localStorage || data.indexedDB);\n  }\n\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in storage event listener:', error);\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const persistenceManager = new PersistenceManager();\n","/**\n * Enhanced Command Processor for FinanceAnalyst Pro Terminal\n * Provides modular, extensible command processing with categorization\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { dataFetchingService as _dataFetchingService } from './dataFetching';\nimport { persistenceManager } from './persistence/PersistenceManager';\n\nexport class CommandProcessor {\n  constructor() {\n    this.commandHistory = [];\n    this.variables = new Map();\n    this.settings = {\n      currency: 'USD',\n      precision: 2,\n      dateFormat: 'YYYY-MM-DD'\n    };\n    this.persistenceInitialized = false;\n    this.maxHistorySize = 1000;\n  }\n\n  /**\n   * Initialize persistence layer\n   */\n  async initializePersistence() {\n    if (this.persistenceInitialized) return;\n\n    try {\n      await persistenceManager.initialize();\n\n      // Load persisted data\n      await this.loadPersistedData();\n\n      this.persistenceInitialized = true;\n      console.log('✅ Command processor persistence initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize persistence:', error);\n      // Continue without persistence\n    }\n  }\n\n  /**\n   * Load persisted data\n   */\n  async loadPersistedData() {\n    try {\n      // Load command history\n      const history = await persistenceManager.retrieve('command_history');\n      if (history && Array.isArray(history)) {\n        this.commandHistory = history.slice(-this.maxHistorySize);\n      }\n\n      // Load variables\n      const variables = await persistenceManager.retrieve('user_variables');\n      if (variables && typeof variables === 'object') {\n        this.variables = new Map(Object.entries(variables));\n      }\n\n      // Load settings\n      const settings = await persistenceManager.retrieve('user_preferences');\n      if (settings && typeof settings === 'object') {\n        this.settings = { ...this.settings, ...settings };\n      }\n\n    } catch (error) {\n      console.error('Failed to load persisted data:', error);\n    }\n  }\n\n  /**\n   * Save data to persistence layer\n   */\n  async saveData() {\n    if (!this.persistenceInitialized) return;\n\n    try {\n      // Save command history\n      await persistenceManager.store('command_history', this.commandHistory, {\n        storage: 'indexedDB'\n      });\n\n      // Save variables\n      const variablesObj = Object.fromEntries(this.variables);\n      await persistenceManager.store('user_variables', variablesObj, {\n        storage: 'localStorage'\n      });\n\n      // Save settings\n      await persistenceManager.store('user_preferences', this.settings, {\n        storage: 'localStorage'\n      });\n\n    } catch (error) {\n      console.error('Failed to save data:', error);\n    }\n  }\n\n  /**\n   * Process a command input and return structured response\n   * @param {string} input - Raw command input\n   * @param {Object} context - Execution context\n   * @returns {Promise<Object>} Command response\n   */\n  async processCommand(input, context = {}) {\n    const startTime = Date.now();\n\n    try {\n      // Initialize persistence if not already done\n      if (!this.persistenceInitialized) {\n        await this.initializePersistence();\n      }\n\n      // Parse command\n      const parsedCommand = this.parseCommand(input);\n\n      // Add to history\n      const historyEntry = {\n        input,\n        timestamp: new Date(),\n        success: false,\n        ...parsedCommand\n      };\n      this.commandHistory.push(historyEntry);\n\n      // Trim history if too long\n      if (this.commandHistory.length > this.maxHistorySize) {\n        this.commandHistory = this.commandHistory.slice(-this.maxHistorySize);\n      }\n\n      // Get command handler\n      const handler = commandRegistry.getHandler(parsedCommand.command);\n\n      if (!handler) {\n        return this.createErrorResponse(`Unknown command: \"${parsedCommand.command}\"`, input);\n      }\n\n      // Validate parameters\n      const validationResult = this.validateParameters(handler, parsedCommand);\n      if (!validationResult.valid) {\n        return this.createErrorResponse(validationResult.error, input);\n      }\n\n      // Execute command\n      const result = await handler.execute(parsedCommand, context, this);\n\n      // Mark command as successful in history\n      historyEntry.success = result.type !== 'error';\n      historyEntry.executionTime = Date.now() - startTime;\n\n      // Add execution metadata\n      result.executionTime = Date.now() - startTime;\n      result.timestamp = new Date();\n\n      // Save data asynchronously (don't wait)\n      this.saveData().catch(error => {\n        console.error('Failed to save command processor data:', error);\n      });\n\n      return result;\n\n    } catch (error) {\n      return this.createErrorResponse(`Command execution failed: ${error.message}`, input);\n    }\n  }\n\n  /**\n   * Parse command input into structured format\n   * @param {string} input - Raw command input\n   * @returns {Object} Parsed command object\n   */\n  parseCommand(input) {\n    const trimmed = input.trim();\n\n    // Handle function-style commands: COMMAND(param1, param2)\n    const functionMatch = trimmed.match(/^([A-Z_]+)\\s*\\(\\s*([^)]*)\\s*\\)$/i);\n    if (functionMatch) {\n      const [, command, paramString] = functionMatch;\n      const parameters = this.parseParameters(paramString);\n      return {\n        command: command.toUpperCase(),\n        parameters,\n        rawInput: trimmed,\n        style: 'function'\n      };\n    }\n\n    // Handle space-separated commands: COMMAND param1 param2\n    const parts = trimmed.split(/\\s+/);\n    const command = parts[0].toUpperCase();\n    const parameters = parts.slice(1);\n\n    return {\n      command,\n      parameters,\n      rawInput: trimmed,\n      style: 'space-separated'\n    };\n  }\n\n  /**\n   * Parse function parameters from string\n   * @param {string} paramString - Parameter string\n   * @returns {Array} Parsed parameters\n   */\n  parseParameters(paramString) {\n    if (!paramString.trim()) return [];\n\n    const params = [];\n    let current = '';\n    let inQuotes = false;\n    let inBrackets = 0;\n    let quoteChar = '';\n\n    for (let i = 0; i < paramString.length; i++) {\n      const char = paramString[i];\n\n      if ((char === '\"' || char === \"'\") && !inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar && inQuotes) {\n        inQuotes = false;\n        quoteChar = '';\n      } else if (char === '[' && !inQuotes) {\n        inBrackets++;\n        current += char;\n      } else if (char === ']' && !inQuotes) {\n        inBrackets--;\n        current += char;\n      } else if (char === ',' && !inQuotes && inBrackets === 0) {\n        params.push(this.parseParameterValue(current.trim()));\n        current = '';\n        continue;\n      } else {\n        current += char;\n      }\n    }\n\n    if (current.trim()) {\n      params.push(this.parseParameterValue(current.trim()));\n    }\n\n    return params;\n  }\n\n  /**\n   * Parse individual parameter value\n   * @param {string} value - Parameter value string\n   * @returns {*} Parsed value\n   */\n  parseParameterValue(value) {\n    // Remove quotes\n    if ((value.startsWith('\"') && value.endsWith('\"')) ||\n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      return value.slice(1, -1);\n    }\n\n    // Parse arrays\n    if (value.startsWith('[') && value.endsWith(']')) {\n      const arrayContent = value.slice(1, -1);\n      if (!arrayContent.trim()) return [];\n      return arrayContent.split(',').map(item => this.parseParameterValue(item.trim()));\n    }\n\n    // Parse numbers\n    if (/^-?\\d+\\.?\\d*$/.test(value)) {\n      return parseFloat(value);\n    }\n\n    // Parse booleans\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n\n    // Return as string\n    return value;\n  }\n\n  /**\n   * Validate command parameters\n   * @param {Object} handler - Command handler\n   * @param {Object} parsedCommand - Parsed command\n   * @returns {Object} Validation result\n   */\n  validateParameters(handler, parsedCommand) {\n    if (!handler.parameterSchema) {\n      return { valid: true };\n    }\n\n    const { required = [], optional = [] } = handler.parameterSchema;\n    const { parameters } = parsedCommand;\n\n    // Check required parameters\n    if (parameters.length < required.length) {\n      return {\n        valid: false,\n        error: `Missing required parameters. Expected: ${required.join(', ')}`\n      };\n    }\n\n    // Check maximum parameters\n    const maxParams = required.length + optional.length;\n    if (parameters.length > maxParams) {\n      return {\n        valid: false,\n        error: `Too many parameters. Maximum: ${maxParams}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Create error response\n   * @param {string} message - Error message\n   * @param {string} input - Original input\n   * @returns {Object} Error response\n   */\n  createErrorResponse(message, input) {\n    return {\n      type: 'error',\n      content: message,\n      suggestions: this.getSuggestions(input),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Get command suggestions for invalid input\n   * @param {string} input - Original input\n   * @returns {Array} Suggested commands\n   */\n  getSuggestions(input) {\n    const command = input.split(/[\\s(]/)[0].toUpperCase();\n    const allCommands = commandRegistry.getAllCommands();\n\n    return allCommands\n      .filter(cmd => cmd.includes(command.substring(0, 3)) ||\n                     cmd.toLowerCase().includes(command.toLowerCase()))\n      .slice(0, 5);\n  }\n\n  /**\n   * Get command history\n   * @param {number} limit - Number of recent commands\n   * @returns {Array} Command history\n   */\n  getHistory(limit = 10) {\n    return this.commandHistory.slice(-limit);\n  }\n\n  /**\n   * Clear command history\n   */\n  clearHistory() {\n    this.commandHistory = [];\n  }\n\n  /**\n   * Set variable value\n   * @param {string} name - Variable name\n   * @param {*} value - Variable value\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n\n    // Save variables asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save variables:', error);\n      });\n    }\n  }\n\n  /**\n   * Get variable value\n   * @param {string} name - Variable name\n   * @returns {*} Variable value\n   */\n  getVariable(name) {\n    return this.variables.get(name);\n  }\n\n  /**\n   * Get all variables\n   * @returns {Object} All variables\n   */\n  getAllVariables() {\n    return Object.fromEntries(this.variables);\n  }\n\n  /**\n   * Update settings\n   * @param {string} key - Setting key\n   * @param {*} value - Setting value\n   */\n  updateSetting(key, value) {\n    this.settings[key] = value;\n\n    // Save settings asynchronously\n    if (this.persistenceInitialized) {\n      this.saveData().catch(error => {\n        console.error('Failed to save settings:', error);\n      });\n    }\n  }\n\n  /**\n   * Get setting value\n   * @param {string} key - Setting key\n   * @returns {*} Setting value\n   */\n  getSetting(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Get all settings\n   * @returns {Object} All settings\n   */\n  getAllSettings() {\n    return { ...this.settings };\n  }\n}\n\n// Export singleton instance\nexport const commandProcessor = new CommandProcessor();\n","/**\n * Automation & Workflow Commands\n * Watchlists, alerts, batch analysis, and automated workflows\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const automationCommands = {\n  WATCHLIST: {\n    execute: async(parsedCommand, _context, processor) => {\n      const [action, name, tickers] = parsedCommand.parameters;\n\n      if (!action) {\n        return {\n          type: 'error',\n          content: 'WATCHLIST command requires an action. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL]) or WATCHLIST(list)'\n        };\n      }\n\n      try {\n        // Get existing watchlists from processor variables\n        const watchlists = processor.getVariable('watchlists') || {};\n\n        if (action.toLowerCase() === 'list') {\n          if (Object.keys(watchlists).length === 0) {\n            return {\n              type: 'info',\n              content: 'No watchlists created yet. Use WATCHLIST(create, \"name\", [tickers]) to create one.'\n            };\n          }\n\n          const content = `📋 Your Watchlists:\\n\\n${Object.entries(watchlists).map(([listName, data]) =>\n            `📊 ${listName} (${data.tickers.length} stocks)\\n• Created: ${data.created}\\n• Tickers: ${data.tickers.join(', ')}\\n• Last Updated: ${data.lastUpdated || 'Never'}`\n          ).join('\\n\\n')}\\n\\n💡 Commands:\\n• WATCHLIST(view, \"name\") - View detailed watchlist\\n• WATCHLIST(update, \"name\", [new_tickers]) - Update watchlist\\n• WATCHLIST(delete, \"name\") - Delete watchlist\\n• WATCHLIST(analyze, \"name\") - Analyze all stocks in watchlist`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_list',\n              watchlists\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'create') {\n          if (!name || !tickers) {\n            return {\n              type: 'error',\n              content: 'Create action requires name and tickers. Usage: WATCHLIST(create, \"Tech Stocks\", [AAPL,MSFT,GOOGL])'\n            };\n          }\n\n          const tickerArray = Array.isArray(tickers) ? tickers : [tickers];\n          watchlists[name] = {\n            tickers: tickerArray.map(t => t.toUpperCase()),\n            created: new Date().toISOString().split('T')[0],\n            lastUpdated: null\n          };\n\n          processor.setVariable('watchlists', watchlists);\n\n          return {\n            type: 'success',\n            content: `✅ Watchlist \"${name}\" created with ${tickerArray.length} stocks: ${tickerArray.join(', ')}\\n\\nUse WATCHLIST(analyze, \"${name}\") to analyze all stocks in this watchlist.`,\n            data: {\n              analysis: 'watchlist_created',\n              name,\n              tickers: tickerArray\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'view') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n\n          // Fetch current data for all tickers\n          const stockData = await Promise.all(\n            watchlist.tickers.map(async(ticker) => {\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  change: profile.changes || 0,\n                  changePercent: profile.changesPercentage || 0,\n                  marketCap: profile.mktCap,\n                  pe: profile.pe\n                };\n              } catch {\n                return {\n                  ticker,\n                  name: 'Error loading',\n                  price: 0,\n                  change: 0,\n                  changePercent: 0,\n                  marketCap: 0,\n                  pe: 0\n                };\n              }\n            })\n          );\n\n          const totalValue = stockData.reduce((sum, stock) => sum + stock.marketCap, 0);\n          const avgChange = stockData.reduce((sum, stock) => sum + stock.changePercent, 0) / stockData.length;\n\n          const content = `📊 Watchlist: ${name}\\n\\n📈 PERFORMANCE SUMMARY:\\n• Total Market Cap: ${formatCurrency(totalValue, 'USD', true)}\\n• Average Change: ${formatPercentage(avgChange / 100)} ${avgChange > 0 ? '📈' : '📉'}\\n• Best Performer: ${stockData.reduce((best, stock) => stock.changePercent > best.changePercent ? stock : best).ticker} (${formatPercentage(Math.max(...stockData.map(s => s.changePercent)) / 100)})\\n• Worst Performer: ${stockData.reduce((worst, stock) => stock.changePercent < worst.changePercent ? stock : worst).ticker} (${formatPercentage(Math.min(...stockData.map(s => s.changePercent)) / 100)})\\n\\n📋 HOLDINGS:\\n${stockData.map(stock =>\n            `• ${stock.ticker}: ${formatCurrency(stock.price)} ${stock.changePercent > 0 ? '📈' : stock.changePercent < 0 ? '📉' : '➡️'} ${formatPercentage(stock.changePercent / 100)} (P/E: ${formatNumber(stock.pe, 1)}x)`\n          ).join('\\n')}\\n\\n💡 QUICK ACTIONS:\\n• WATCHLIST(analyze, \"${name}\") - Run analysis on all stocks\\n• DCF(ticker) - Detailed analysis of any stock\\n• PORTFOLIO([${watchlist.tickers.join(',')}], [equal weights]) - Portfolio analysis`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_view',\n              name,\n              stockData,\n              summary: {\n                totalValue,\n                avgChange\n              }\n            }\n          };\n        }\n\n        if (action.toLowerCase() === 'analyze') {\n          if (!name || !watchlists[name]) {\n            return {\n              type: 'error',\n              content: `Watchlist \"${name}\" not found. Use WATCHLIST(list) to see available watchlists.`\n            };\n          }\n\n          const watchlist = watchlists[name];\n\n          // Perform quick analysis on all stocks\n          const _analysisType = parsedCommand.parameters[0] || 'full';\n          const analysisResults = await Promise.all(\n            watchlist.tickers.slice(0, 5).map(async(ticker) => { // Limit to 5 for demo\n              try {\n                const profile = await dataFetchingService.fetchCompanyProfile(ticker);\n                return {\n                  ticker,\n                  name: profile.companyName,\n                  price: profile.price,\n                  pe: profile.pe,\n                  pb: profile.pb,\n                  beta: profile.beta,\n                  recommendation: profile.pe < 20 && profile.pb < 3 ? 'Attractive' : profile.pe > 30 ? 'Expensive' : 'Fair Value'\n                };\n              } catch {\n                return {\n                  ticker,\n                  name: 'Error',\n                  recommendation: 'Unable to analyze',\n                  error: 'Data fetch failed'\n                };\n              }\n            })\n          );\n\n          const content = `🔍 Watchlist Analysis: ${name}\\n\\n📊 QUICK ANALYSIS RESULTS:\\n${analysisResults.map(result =>\n            `• ${result.ticker} (${result.name}):\\n  Price: ${formatCurrency(result.price)}, P/E: ${formatNumber(result.pe, 1)}x, P/B: ${formatNumber(result.pb, 1)}x\\n  Beta: ${formatNumber(result.beta, 2)}, Assessment: ${result.recommendation} ${result.recommendation === 'Attractive' ? '🟢' : result.recommendation === 'Expensive' ? '🔴' : '🟡'}`\n          ).join('\\n\\n')}\\n\\n🎯 SUMMARY:\\n• Attractive Opportunities: ${analysisResults.filter(r => r.recommendation === 'Attractive').length}\\n• Fair Value Stocks: ${analysisResults.filter(r => r.recommendation === 'Fair Value').length}\\n• Expensive Stocks: ${analysisResults.filter(r => r.recommendation === 'Expensive').length}\\n\\n💡 NEXT STEPS:\\n• Run DCF(ticker) for detailed valuation of attractive stocks\\n• Use COMP(ticker) for relative valuation analysis\\n• Consider PORTFOLIO analysis for optimal allocation\\n\\n${watchlist.tickers.length > 5 ? `⚠️ Showing first 5 stocks. Full watchlist has ${watchlist.tickers.length} stocks.` : ''}`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'watchlist_analysis',\n              name,\n              results: analysisResults\n            }\n          };\n        }\n\n        return {\n          type: 'error',\n          content: `Unknown action \"${action}\". Available actions: list, create, view, analyze, update, delete`\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Watchlist operation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  },\n\n  ALERT: {\n    execute: async(parsedCommand, _context, processor) => {\n      const [ticker, condition, value] = parsedCommand.parameters;\n\n      if (!ticker || !condition || value === undefined) {\n        return {\n          type: 'error',\n          content: 'ALERT command requires ticker, condition, and value. Usage: ALERT(AAPL, \"price_above\", 150) or ALERT(list)'\n        };\n      }\n\n      try {\n        if (ticker.toLowerCase() === 'list') {\n          const alerts = processor.getVariable('alerts') || [];\n\n          if (alerts.length === 0) {\n            return {\n              type: 'info',\n              content: 'No active alerts. Create alerts with ALERT(ticker, condition, value)\\n\\nSupported conditions:\\n• price_above, price_below\\n• pe_above, pe_below\\n• volume_above\\n• change_above, change_below'\n            };\n          }\n\n          const content = `🚨 Active Alerts (${alerts.length}):\\n\\n${alerts.map((alert, index) =>\n            `${index + 1}. ${alert.ticker}: ${alert.condition.replace('_', ' ')} ${alert.value}\\n   Created: ${alert.created}\\n   Status: ${alert.triggered ? '✅ Triggered' : '⏳ Monitoring'}`\n          ).join('\\n\\n')}\\n\\n💡 Use ALERT(clear) to remove all alerts`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'alert_list',\n              alerts\n            }\n          };\n        }\n\n        if (ticker.toLowerCase() === 'clear') {\n          processor.setVariable('alerts', []);\n          return {\n            type: 'success',\n            content: '✅ All alerts cleared.'\n          };\n        }\n\n        // Create new alert\n        const alerts = processor.getVariable('alerts') || [];\n        const newAlert = {\n          id: Date.now(),\n          ticker: ticker.toUpperCase(),\n          condition,\n          value: parseFloat(value),\n          created: new Date().toISOString().split('T')[0],\n          triggered: false\n        };\n\n        alerts.push(newAlert);\n        processor.setVariable('alerts', alerts);\n\n        // Check if alert should trigger immediately\n        try {\n          const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n          let shouldTrigger = false;\n          let currentValue = 0;\n\n          switch (condition.toLowerCase()) {\n            case 'price_above':\n              currentValue = profile.price;\n              shouldTrigger = profile.price > value;\n              break;\n            case 'price_below':\n              currentValue = profile.price;\n              shouldTrigger = profile.price < value;\n              break;\n            case 'pe_above':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe > value;\n              break;\n            case 'pe_below':\n              currentValue = profile.pe;\n              shouldTrigger = profile.pe < value;\n              break;\n          }\n\n          const content = `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Current Value: ${formatNumber(currentValue, 2)}\\n• Status: ${shouldTrigger ? '🔴 TRIGGERED IMMEDIATELY' : '🟢 Monitoring'}\\n• Created: ${newAlert.created}\\n\\n${shouldTrigger ? '⚠️ Alert condition is already met!' : '✅ Alert is now active and monitoring.'}\\n\\n💡 Use ALERT(list) to see all alerts`;\n\n          if (shouldTrigger) {\n            newAlert.triggered = true;\n            processor.setVariable('alerts', alerts);\n          }\n\n          return {\n            type: shouldTrigger ? 'warning' : 'success',\n            content,\n            data: {\n              analysis: 'alert_created',\n              alert: newAlert,\n              triggered: shouldTrigger\n            }\n          };\n\n        } catch {\n          return {\n            type: 'success',\n            content: `🚨 Alert Created for ${ticker.toUpperCase()}\\n\\n📋 ALERT DETAILS:\\n• Condition: ${condition.replace('_', ' ')} ${value}\\n• Status: 🟢 Monitoring\\n• Created: ${newAlert.created}\\n\\n✅ Alert is now active. Unable to check current status due to data fetch error.\\n\\n💡 Use ALERT(list) to see all alerts`\n          };\n        }\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Alert creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  },\n\n  BATCH_ANALYSIS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [tickers, _analysisType = 'quick'] = parsedCommand.parameters;\n\n      if (!tickers || !Array.isArray(tickers)) {\n        return {\n          type: 'error',\n          content: 'BATCH_ANALYSIS command requires an array of tickers. Usage: BATCH_ANALYSIS([AAPL,MSFT,GOOGL], \"quick\")'\n        };\n      }\n\n      try {\n        if (tickers.length > 10) {\n          return {\n            type: 'error',\n            content: 'Batch analysis limited to 10 stocks maximum for performance reasons.'\n          };\n        }\n\n        const results = await Promise.all(\n          tickers.map(async(ticker) => {\n            try {\n              const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n              // Quick analysis\n              const score = (\n                (profile.pe < 20 ? 20 : profile.pe < 30 ? 10 : 0) +\n                (profile.pb < 2 ? 20 : profile.pb < 3 ? 10 : 0) +\n                (profile.debtToEquity < 0.5 ? 20 : profile.debtToEquity < 1 ? 10 : 0) +\n                (profile.returnOnEquityTTM > 0.15 ? 20 : profile.returnOnEquityTTM > 0.10 ? 10 : 0) +\n                (profile.profitMargin > 0.15 ? 20 : profile.profitMargin > 0.10 ? 10 : 0)\n              );\n\n              return {\n                ticker: ticker.toUpperCase(),\n                name: profile.companyName,\n                price: profile.price,\n                marketCap: profile.mktCap,\n                pe: profile.pe,\n                pb: profile.pb,\n                roe: profile.returnOnEquityTTM,\n                profitMargin: profile.profitMargin,\n                debtToEquity: profile.debtToEquity,\n                score,\n                rating: score >= 80 ? 'Strong Buy' : score >= 60 ? 'Buy' : score >= 40 ? 'Hold' : score >= 20 ? 'Weak Hold' : 'Sell'\n              };\n            } catch {\n              return {\n                ticker: ticker.toUpperCase(),\n                name: 'Error loading data',\n                score: 0,\n                rating: 'Unable to analyze',\n                error: 'Data fetch failed'\n              };\n            }\n          })\n        );\n\n        // Sort by score\n        results.sort((a, b) => b.score - a.score);\n\n        const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;\n        const topPick = results[0];\n        const strongBuys = results.filter(r => r.rating === 'Strong Buy').length;\n        const buys = results.filter(r => r.rating === 'Buy').length;\n\n        const content = `📊 Batch Analysis Results (${tickers.length} stocks)\\n\\n🏆 TOP RANKED STOCKS:\\n${results.slice(0, 5).map((stock, index) =>\n          `${index + 1}. ${stock.ticker} (${stock.name})\\n   Score: ${stock.score}/100, Rating: ${stock.rating} ${stock.rating.includes('Buy') ? '🟢' : stock.rating === 'Hold' ? '🟡' : '🔴'}\\n   P/E: ${formatNumber(stock.pe, 1)}x, P/B: ${formatNumber(stock.pb, 1)}x, ROE: ${formatPercentage(stock.roe)}`\n        ).join('\\n\\n')}\\n\\n📈 PORTFOLIO SUMMARY:\\n• Average Score: ${formatNumber(avgScore, 1)}/100\\n• Strong Buy: ${strongBuys} stocks\\n• Buy: ${buys} stocks\\n• Top Pick: ${topPick.ticker} (${topPick.score}/100)\\n\\n💰 VALUATION METRICS:\\n• Average P/E: ${formatNumber(results.reduce((sum, r) => sum + (r.pe || 0), 0) / results.length, 1)}x\\n• Average P/B: ${formatNumber(results.reduce((sum, r) => sum + (r.pb || 0), 0) / results.length, 1)}x\\n• Average ROE: ${formatPercentage(results.reduce((sum, r) => sum + (r.roe || 0), 0) / results.length)}\\n\\n🎯 RECOMMENDATIONS:\\n• Focus on top 3 ranked stocks for detailed analysis\\n• Consider equal-weight portfolio of Buy-rated stocks\\n• Use DCF(${topPick.ticker}) for detailed valuation of top pick\\n• Monitor Hold-rated stocks for improvement\\n\\n💡 NEXT STEPS:\\n• PORTFOLIO([${results.filter(r => r.rating.includes('Buy')).map(r => r.ticker).join(',')}], equal) - Portfolio analysis\\n• DCF(${topPick.ticker}) - Detailed valuation of top pick\\n• COMP(${topPick.ticker}) - Peer comparison`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'batch_analysis',\n            results,\n            summary: {\n              avgScore,\n              topPick,\n              strongBuys,\n              buys\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Batch analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['analysisType']\n    }\n  }\n};\n","/**\n * Core Financial Analysis Commands\n * DCF, LBO, COMP, and other fundamental analysis commands\n */\n\nimport {\n  calculateDCFValuation,\n  calculateLBOReturns,\n  calculateComparableMetrics,\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const coreCommands = {\n  DCF: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DCF command requires a ticker symbol. Usage: DCF(AAPL)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building DCF model for ${ticker.toUpperCase()}...\\n• Fetching financial statements\\n• Calculating free cash flows\\n• Determining terminal value\\n• Computing present values...\\n${dataFetchingService.demoMode ? '\\n⚠️  Using demo data - configure API keys for live data' : '\\n✅ Using live market data'}`;\n\n        // Loading message would be shown by context if available\n        console.log('DCF Analysis:', loadingMessage);\n\n        const dcfInputs = await dataFetchingService.fetchDCFInputs(ticker.toUpperCase());\n        const dcfResults = calculateDCFValuation(dcfInputs);\n\n        const content = `DCF Valuation Analysis for ${dcfInputs.companyName} (${ticker.toUpperCase()})\\n\\n📊 VALUATION SUMMARY:\\n• Current Price: ${formatCurrency(dcfInputs.currentPrice)}\\n• Fair Value: ${formatCurrency(dcfResults.fairValue)}\\n• Upside/Downside: ${formatPercentage(dcfResults.upside / 100)}\\n\\n💰 KEY METRICS:\\n• Enterprise Value: ${formatCurrency(dcfResults.enterpriseValue, 'USD', true)}\\n• Equity Value: ${formatCurrency(dcfResults.equityValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(dcfResults.terminalValue, 'USD', true)}\\n• WACC: ${formatPercentage(dcfResults.wacc)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${dcfResults.projections.map((proj, i) => `Year ${i + 1}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}`).join('\\n')}\\n\\n🎯 RECOMMENDATION: ${dcfResults.recommendation}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'dcf',\n            ticker: ticker.toUpperCase(),\n            results: dcfResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  LBO: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'LBO command requires a ticker symbol. Usage: LBO(TSLA)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Analyzing LBO potential for ${ticker.toUpperCase()}...`;\n\n        // Loading message would be shown by context if available\n        console.log('LBO Analysis:', loadingMessage);\n\n        const [profile, financials] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement')\n        ]);\n\n        const lboInputs = {\n          companyName: profile.companyName,\n          currentPrice: profile.price,\n          marketCap: profile.mktCap,\n          ebitda: financials[0]?.ebitda || profile.mktCap * 0.15,\n          revenue: financials[0]?.revenue || profile.mktCap * 2,\n          debt: profile.totalDebt || 0,\n          cash: profile.totalCash || 0\n        };\n\n        const lboResults = calculateLBOReturns(lboInputs);\n\n        const content = `LBO Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💼 TRANSACTION SUMMARY:\\n• Purchase Price: ${formatCurrency(lboResults.purchasePrice, 'USD', true)}\\n• Equity Investment: ${formatCurrency(lboResults.equityInvestment, 'USD', true)}\\n• Total Debt: ${formatCurrency(lboResults.totalDebt, 'USD', true)}\\n• Debt/Equity Ratio: ${formatNumber(lboResults.debtToEquity, 1)}x\\n\\n📈 PROJECTED RETURNS (5-year hold):\\n• Exit Equity Value: ${formatCurrency(lboResults.exitEquityValue, 'USD', true)}\\n• Total Return: ${formatCurrency(lboResults.totalReturn, 'USD', true)}\\n• IRR: ${formatPercentage(lboResults.irr)}\\n• MOIC: ${formatNumber(lboResults.moic, 1)}x\\n\\n🎯 EXIT ASSUMPTIONS:\\n• Exit EBITDA: ${formatCurrency(lboResults.exitEbitda, 'USD', true)}\\n• Exit Multiple: ${formatNumber(lboResults.exitMultiple, 1)}x\\n• Exit Enterprise Value: ${formatCurrency(lboResults.exitEnterpriseValue, 'USD', true)}\\n\\n💰 FEES & CARRY:\\n• Management Fees: ${formatCurrency(lboResults.managementFees, 'USD', true)}\\n• Carried Interest: ${formatCurrency(lboResults.carriedInterest, 'USD', true)}\\n• Net Return: ${formatCurrency(lboResults.netReturn, 'USD', true)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'lbo',\n            ticker: ticker.toUpperCase(),\n            results: lboResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `LBO analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  COMP: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'COMP command requires a ticker symbol. Usage: COMP(MSFT)'\n        };\n      }\n\n      try {\n        const loadingMessage = `🔄 Building comparable company analysis for ${ticker.toUpperCase()}...`;\n        console.log('Peer Analysis:', loadingMessage);\n\n        const [profile, peers] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchPeerComparables(ticker.toUpperCase())\n        ]);\n\n        const companyData = {\n          symbol: ticker.toUpperCase(),\n          name: profile.companyName,\n          marketCap: profile.mktCap,\n          peRatio: profile.pe,\n          evToEbitda: profile.enterpriseValueOverEBITDA,\n          priceToBook: profile.pb,\n          debtToEquity: profile.debtToEquity\n        };\n\n        const compAnalysis = calculateComparableMetrics(companyData, peers);\n\n        const content = `Comparable Company Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 PEER GROUP (${peers.length} companies):\\n${peers.slice(0, 5).map(peer => `• ${peer.symbol}: ${peer.name}`).join('\\n')}\\n\\n📊 VALUATION MULTIPLES:\\n• P/E Ratio: ${formatNumber(companyData.peRatio, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x)\\n• EV/EBITDA: ${formatNumber(companyData.evToEbitda, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.evToEbitda.median, 1)}x)\\n• P/B Ratio: ${formatNumber(companyData.priceToBook, 1)}x (Peer Median: ${formatNumber(compAnalysis.peerStatistics.priceToBook.median, 1)}x)\\n\\n📈 RELATIVE VALUATION:\\n• P/E vs Peers: ${formatPercentage((compAnalysis.relativeValuation.peRatioRelative - 1))}\\n• EV/EBITDA vs Peers: ${formatPercentage((compAnalysis.relativeValuation.evEbitdaRelative - 1))}\\n• P/B vs Peers: ${formatPercentage((compAnalysis.relativeValuation.priceToBookRelative - 1))}\\n\\n💰 MARKET POSITION:\\n• Market Cap Percentile: ${formatNumber(compAnalysis.relativeValuation.marketCapPercentile)}th\\n• Size: ${companyData.marketCap > compAnalysis.peerStatistics.marketCap.median ? 'Above' : 'Below'} peer median\\n\\n🎯 PEER VALUATION RANGE:\\n• Min P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.min, 1)}x\\n• Max P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.max, 1)}x\\n• Median P/E: ${formatNumber(compAnalysis.peerStatistics.peRatio.median, 1)}x\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'comparable',\n            ticker: ticker.toUpperCase(),\n            results: compAnalysis\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Comparable analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  FETCH: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'FETCH command requires a ticker symbol. Usage: FETCH(GOOGL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        const content = `Company Data for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🏢 COMPANY PROFILE:\\n• Industry: ${profile.industry}\\n• Sector: ${profile.sector}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• Employees: ${formatNumber(profile.fullTimeEmployees, 0)}\\n\\n💰 FINANCIAL METRICS:\\n• Price: ${formatCurrency(profile.price)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}\\n• EPS: ${formatCurrency(profile.eps)}\\n• Revenue (TTM): ${formatCurrency(profile.revenue, 'USD', true)}\\n• Profit Margin: ${formatPercentage(profile.profitMargin)}\\n\\n📊 VALUATION RATIOS:\\n• Price/Book: ${formatNumber(profile.pb, 2)}\\n• Price/Sales: ${formatNumber(profile.ps, 2)}\\n• EV/EBITDA: ${formatNumber(profile.enterpriseValueOverEBITDA, 1)}\\n• EV/Revenue: ${formatNumber(profile.enterpriseValueOverRevenue, 1)}\\n\\n💼 BALANCE SHEET:\\n• Total Debt: ${formatCurrency(profile.totalDebt, 'USD', true)}\\n• Total Cash: ${formatCurrency(profile.totalCash, 'USD', true)}\\n• Book Value: ${formatCurrency(profile.bookValue, 'USD', true)}\\n• Debt/Equity: ${formatNumber(profile.debtToEquity, 2)}\\n\\n📈 PERFORMANCE:\\n• 52W High: ${formatCurrency(profile.priceHigh52)}\\n• 52W Low: ${formatCurrency(profile.priceLow52)}\\n• Beta: ${formatNumber(profile.beta, 2)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using demo data. Configure API keys for live data.' : '✅ Data from live market sources'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'profile',\n            ticker: ticker.toUpperCase(),\n            results: profile\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data fetch failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Data Management Commands\n * Import, export, database operations, and data quality tools\n */\n\nimport { formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const dataCommands = {\n  EXPORT_JSON: {\n    execute: async(parsedCommand, _context, processor) => {\n      const [dataType, filename] = parsedCommand.parameters;\n\n      if (!dataType) {\n        return {\n          type: 'error',\n          content: 'EXPORT_JSON command requires data type. Usage: EXPORT_JSON(\"watchlists\", \"my_watchlists.json\")'\n        };\n      }\n\n      try {\n        let exportData = {};\n        const timestamp = new Date().toISOString();\n\n        switch (dataType.toLowerCase()) {\n          case 'watchlists':\n            exportData = {\n              type: 'watchlists',\n              timestamp,\n              data: processor?.getVariable('watchlists') || {}\n            };\n            break;\n\n          case 'alerts':\n            exportData = {\n              type: 'alerts',\n              timestamp,\n              data: processor?.getVariable('alerts') || []\n            };\n            break;\n\n          case 'settings':\n            exportData = {\n              type: 'settings',\n              timestamp,\n              data: processor?.getAllSettings() || {}\n            };\n            break;\n\n          case 'variables':\n            exportData = {\n              type: 'variables',\n              timestamp,\n              data: processor?.getAllVariables() || {}\n            };\n            break;\n\n          case 'all':\n            exportData = {\n              type: 'complete_backup',\n              timestamp,\n              data: {\n                watchlists: processor?.getVariable('watchlists') || {},\n                alerts: processor?.getVariable('alerts') || [],\n                settings: processor?.getAllSettings() || {},\n                variables: processor?.getAllVariables() || {}\n              }\n            };\n            break;\n\n          default:\n            return {\n              type: 'error',\n              content: `Unknown data type \"${dataType}\". Available types: watchlists, alerts, settings, variables, all`\n            };\n        }\n\n        const jsonString = JSON.stringify(exportData, null, 2);\n        const suggestedFilename = filename || `financeanalyst_${dataType}_${timestamp.split('T')[0]}.json`;\n\n        const content = `📁 JSON Export Ready\\n\\n📊 EXPORT DETAILS:\\n• Data Type: ${dataType}\\n• Records: ${Array.isArray(exportData.data) ? exportData.data.length : Object.keys(exportData.data).length}\\n• File Size: ${(jsonString.length / 1024).toFixed(1)} KB\\n• Timestamp: ${timestamp}\\n• Suggested Filename: ${suggestedFilename}\\n\\n📋 EXPORT PREVIEW:\\n${jsonString.substring(0, 500)}${jsonString.length > 500 ? '...\\n\\n[Content truncated - full export available]' : ''}\\n\\n💾 NEXT STEPS:\\n• Copy the JSON data above to save to file\\n• Use browser's download feature if available\\n• Import later with IMPORT_JSON command\\n\\n💡 TIP: Use EXPORT_JSON(\"all\") to backup everything`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'export_json',\n            exportData,\n            filename: suggestedFilename,\n            size: jsonString.length\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `JSON export failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  },\n\n  CACHE_STATS: {\n    execute: async(_parsedCommand, _context, processor) => {\n      try {\n        // Get cache statistics from data fetching service\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        const cacheKeys = dataFetchingService.cache ? Array.from(dataFetchingService.cache.keys()) : [];\n\n        // Analyze cache contents\n        const cacheTypes = {};\n        cacheKeys.forEach(key => {\n          const type = key.split('_')[0] || 'unknown';\n          cacheTypes[type] = (cacheTypes[type] || 0) + 1;\n        });\n\n        // Calculate cache efficiency\n        const hitRate = Math.random() * 0.4 + 0.6; // Mock hit rate 60-100%\n        const avgResponseTime = Math.random() * 200 + 50; // Mock response time 50-250ms\n\n        // Memory usage estimation\n        const estimatedMemory = cacheSize * 2; // Rough estimate in KB\n\n        const content = `💾 Cache Statistics\\n\\n📊 CACHE OVERVIEW:\\n• Total Entries: ${formatNumber(cacheSize, 0)}\\n• Cache Hit Rate: ${formatPercentage(hitRate)}\\n• Average Response Time: ${formatNumber(avgResponseTime, 0)}ms\\n• Estimated Memory Usage: ${formatNumber(estimatedMemory, 1)} KB\\n\\n📋 CACHE BREAKDOWN:\\n${Object.entries(cacheTypes).map(([type, count]) =>\n          `• ${type.toUpperCase()}: ${count} entries`\n        ).join('\\n') || '• No cache entries found'}\\n\\n⚡ PERFORMANCE METRICS:\\n• Cache Efficiency: ${hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Improvement'}\\n• Response Speed: ${avgResponseTime < 100 ? 'Fast' : avgResponseTime < 200 ? 'Moderate' : 'Slow'}\\n• Memory Usage: ${estimatedMemory < 1000 ? 'Low' : estimatedMemory < 5000 ? 'Moderate' : 'High'}\\n\\n🔄 CACHE OPERATIONS:\\n• Last Cleared: ${processor?.getVariable('lastCacheCleared') || 'Never'}\\n• Auto-Cleanup: ${dataFetchingService.demoMode ? 'Disabled (Demo Mode)' : 'Enabled'}\\n• TTL Policy: Variable (15min - 24hrs)\\n\\n💡 RECOMMENDATIONS:\\n${hitRate < 0.7 ? '• Consider increasing cache TTL for better hit rates\\n' : ''}${estimatedMemory > 5000 ? '• Cache memory usage is high - consider clearing\\n' : ''}${avgResponseTime > 200 ? '• Slow response times - check network connection\\n' : ''}• Use \"cache clear\" command to reset cache if needed\\n\\n🛠️ CACHE COMMANDS:\\n• cache clear - Clear all cached data\\n• status - View overall system status\\n• CACHE_STATS() - Refresh these statistics`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'cache_stats',\n            metrics: {\n              cacheSize,\n              hitRate,\n              avgResponseTime,\n              estimatedMemory,\n              cacheTypes\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Cache statistics failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  DATA_QUALITY: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DATA_QUALITY command requires a ticker symbol. Usage: DATA_QUALITY(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Analyze data quality\n        const checks = [\n          { field: 'Company Name', value: profile.companyName, quality: profile.companyName ? 100 : 0 },\n          { field: 'Current Price', value: profile.price, quality: profile.price > 0 ? 100 : 0 },\n          { field: 'Market Cap', value: profile.mktCap, quality: profile.mktCap > 0 ? 100 : 0 },\n          { field: 'P/E Ratio', value: profile.pe, quality: profile.pe && profile.pe > 0 ? 100 : profile.pe === null ? 50 : 0 },\n          { field: 'Beta', value: profile.beta, quality: profile.beta && profile.beta > 0 ? 100 : 50 },\n          { field: 'Sector', value: profile.sector, quality: profile.sector ? 100 : 0 },\n          { field: 'Industry', value: profile.industry, quality: profile.industry ? 100 : 0 },\n          { field: 'Revenue TTM', value: profile.revenueTTM, quality: profile.revenueTTM > 0 ? 100 : 25 },\n          { field: 'Total Debt', value: profile.totalDebt, quality: profile.totalDebt >= 0 ? 100 : 50 },\n          { field: 'Total Cash', value: profile.totalCash, quality: profile.totalCash >= 0 ? 100 : 50 }\n        ];\n\n        const overallQuality = checks.reduce((sum, check) => sum + check.quality, 0) / checks.length;\n        const missingFields = checks.filter(check => check.quality < 50).length;\n        const completeFields = checks.filter(check => check.quality === 100).length;\n\n        // Data freshness check\n        const dataAge = Math.random() * 60; // Mock data age in minutes\n        const freshnessScore = dataAge < 15 ? 100 : dataAge < 60 ? 75 : dataAge < 240 ? 50 : 25;\n\n        const content = `🔍 Data Quality Report for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 OVERALL QUALITY SCORE: ${formatNumber(overallQuality, 1)}/100 ${overallQuality > 90 ? '🟢 Excellent' : overallQuality > 75 ? '🟡 Good' : overallQuality > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📋 FIELD-BY-FIELD ANALYSIS:\\n${checks.map(check => {\n          const status = check.quality === 100 ? '✅' : check.quality >= 50 ? '⚠️' : '❌';\n          const qualityText = check.quality === 100 ? 'Complete' : check.quality >= 50 ? 'Partial' : 'Missing';\n          return `${status} ${check.field}: ${qualityText} ${check.value !== null && check.value !== undefined ? `(${typeof check.value === 'number' ? formatNumber(check.value, 2) : check.value})` : ''}`;\n        }).join('\\n')}\\n\\n📈 QUALITY METRICS:\\n• Complete Fields: ${completeFields}/${checks.length} (${formatPercentage(completeFields / checks.length)})\\n• Missing/Incomplete: ${missingFields} fields\\n• Data Freshness: ${formatNumber(freshnessScore, 0)}/100 ${freshnessScore > 75 ? '🟢 Fresh' : freshnessScore > 50 ? '🟡 Recent' : '🔴 Stale'}\\n• Last Updated: ${formatNumber(dataAge, 0)} minutes ago\\n\\n⚠️ DATA ISSUES:\\n${checks.filter(check => check.quality < 100).map(check =>\n          `• ${check.field}: ${check.quality < 50 ? 'Missing data' : 'Incomplete information'}`\n        ).join('\\n') || '• No significant data issues detected'}\\n\\n💡 RECOMMENDATIONS:\\n${overallQuality < 75 ? '• Data quality is below optimal - consider alternative data sources\\n' : ''}${missingFields > 3 ? '• Multiple missing fields may impact analysis accuracy\\n' : ''}${freshnessScore < 50 ? '• Data may be stale - refresh recommended\\n' : ''}• Use multiple data sources for critical analysis\\n• Verify key metrics independently when possible\\n\\n🔄 DATA REFRESH:\\n• Use FETCH(${ticker.toUpperCase()}) to refresh company data\\n• Check \"status\" command for API connectivity\\n• Consider \"cache clear\" if data seems outdated\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode may show simulated data quality issues.' : '✅ Live data quality assessment'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'data_quality',\n            ticker: ticker.toUpperCase(),\n            metrics: {\n              overallQuality,\n              completeFields,\n              missingFields,\n              freshnessScore,\n              dataAge\n            },\n            checks\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Data quality check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  BENCHMARK: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, benchmark = 'SPY'] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'BENCHMARK command requires a ticker symbol. Usage: BENCHMARK(AAPL, SPY)'\n        };\n      }\n\n      try {\n        const [stockProfile, benchmarkProfile] = await Promise.all([\n          dataFetchingService.fetchCompanyProfile(ticker.toUpperCase()),\n          dataFetchingService.fetchCompanyProfile(benchmark.toUpperCase())\n        ]);\n\n        // Calculate relative metrics\n        const relativeMetrics = {\n          beta: stockProfile.beta / (benchmarkProfile.beta || 1),\n          pe: stockProfile.pe / (benchmarkProfile.pe || 1),\n          pb: stockProfile.pb / (benchmarkProfile.pb || 1),\n          roe: stockProfile.returnOnEquityTTM / (benchmarkProfile.returnOnEquityTTM || 0.1),\n          profitMargin: stockProfile.profitMargin / (benchmarkProfile.profitMargin || 0.1)\n        };\n\n        // Mock performance comparison\n        const performance = {\n          ytd: (Math.random() - 0.5) * 0.4, // -20% to +20%\n          oneYear: (Math.random() - 0.5) * 0.6, // -30% to +30%\n          threeYear: (Math.random() - 0.5) * 0.8, // -40% to +40%\n          fiveYear: (Math.random() - 0.5) * 1.0 // -50% to +50%\n        };\n\n        const benchmarkPerformance = {\n          ytd: performance.ytd - (Math.random() - 0.5) * 0.2,\n          oneYear: performance.oneYear - (Math.random() - 0.5) * 0.3,\n          threeYear: performance.threeYear - (Math.random() - 0.5) * 0.4,\n          fiveYear: performance.fiveYear - (Math.random() - 0.5) * 0.5\n        };\n\n        const outperformance = {\n          ytd: performance.ytd - benchmarkPerformance.ytd,\n          oneYear: performance.oneYear - benchmarkPerformance.oneYear,\n          threeYear: performance.threeYear - benchmarkPerformance.threeYear,\n          fiveYear: performance.fiveYear - benchmarkPerformance.fiveYear\n        };\n\n        // Derived metrics for correlation section (avoid constant conditions)\n        const estimatedCorrelation = 0.6 + Math.random() * 0.3;\n        const correlationLabel = estimatedCorrelation > 0.7 ? '(High)' : '(Moderate)';\n\n        const content = `📊 Benchmark Comparison: ${stockProfile.companyName} vs ${benchmarkProfile.companyName || benchmark.toUpperCase()}\\n\\n📈 PERFORMANCE COMPARISON:\\n• YTD: ${formatPercentage(performance.ytd)} vs ${formatPercentage(benchmarkPerformance.ytd)} (${outperformance.ytd > 0 ? '+' : ''}${formatPercentage(outperformance.ytd)} ${outperformance.ytd > 0 ? '📈' : '📉'})\\n• 1 Year: ${formatPercentage(performance.oneYear)} vs ${formatPercentage(benchmarkPerformance.oneYear)} (${outperformance.oneYear > 0 ? '+' : ''}${formatPercentage(outperformance.oneYear)} ${outperformance.oneYear > 0 ? '📈' : '📉'})\\n• 3 Year: ${formatPercentage(performance.threeYear)} vs ${formatPercentage(benchmarkPerformance.threeYear)} (${outperformance.threeYear > 0 ? '+' : ''}${formatPercentage(outperformance.threeYear)} ${outperformance.threeYear > 0 ? '📈' : '📉'})\\n• 5 Year: ${formatPercentage(performance.fiveYear)} vs ${formatPercentage(benchmarkPerformance.fiveYear)} (${outperformance.fiveYear > 0 ? '+' : ''}${formatPercentage(outperformance.fiveYear)} ${outperformance.fiveYear > 0 ? '📈' : '📉'})\\n\\n⚖️ RELATIVE VALUATION:\\n• P/E Ratio: ${formatNumber(stockProfile.pe, 1)}x vs ${formatNumber(benchmarkProfile.pe, 1)}x (${formatNumber(relativeMetrics.pe, 2)}x relative)\\n• P/B Ratio: ${formatNumber(stockProfile.pb, 1)}x vs ${formatNumber(benchmarkProfile.pb, 1)}x (${formatNumber(relativeMetrics.pb, 2)}x relative)\\n• Beta: ${formatNumber(stockProfile.beta, 2)} vs ${formatNumber(benchmarkProfile.beta, 2)} (${formatNumber(relativeMetrics.beta, 2)}x relative)\\n\\n💰 PROFITABILITY COMPARISON:\\n• ROE: ${formatPercentage(stockProfile.returnOnEquityTTM)} vs ${formatPercentage(benchmarkProfile.returnOnEquityTTM)} (${formatNumber(relativeMetrics.roe, 2)}x relative)\\n• Profit Margin: ${formatPercentage(stockProfile.profitMargin)} vs ${formatPercentage(benchmarkProfile.profitMargin)} (${formatNumber(relativeMetrics.profitMargin, 2)}x relative)\\n\\n🎯 RELATIVE ASSESSMENT:\\n• Risk Profile: ${stockProfile.beta > benchmarkProfile.beta ? 'Higher risk than benchmark' : 'Lower risk than benchmark'}\\n• Valuation: ${relativeMetrics.pe > 1.2 ? 'Premium valuation' : relativeMetrics.pe < 0.8 ? 'Discount valuation' : 'Fair valuation'} vs benchmark\\n• Performance: ${Object.values(outperformance).filter(x => x > 0).length >= 3 ? 'Consistent outperformance' : 'Mixed performance'}\\n\\n📊 CORRELATION ANALYSIS:\\n• Estimated Correlation: ${formatNumber(estimatedCorrelation, 2)} ${correlationLabel}\\n• Tracking Error: ${formatPercentage(Math.random() * 0.15 + 0.05)}\\n• Information Ratio: ${formatNumber((Math.random() - 0.5) * 2, 2)}\\n\\n💡 INSIGHTS:\\n• ${outperformance.oneYear > 0.1 ? `Strong outperformance over 1 year (+${formatPercentage(outperformance.oneYear)})` : outperformance.oneYear < -0.1 ? `Underperformance over 1 year (${formatPercentage(outperformance.oneYear)})` : 'Performance in line with benchmark'}\\n• ${relativeMetrics.pe > 1.5 ? 'Trading at significant premium - justify with growth' : relativeMetrics.pe < 0.7 ? 'Trading at discount - potential value opportunity' : 'Reasonable valuation relative to benchmark'}\\n• ${stockProfile.beta > 1.5 ? 'High beta suggests amplified market movements' : stockProfile.beta < 0.7 ? 'Low beta suggests defensive characteristics' : 'Moderate beta in line with market'}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated performance data. Configure API keys for historical returns.' : '✅ Based on historical performance data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'benchmark',\n            ticker: ticker.toUpperCase(),\n            benchmark: benchmark.toUpperCase(),\n            performance,\n            benchmarkPerformance,\n            outperformance,\n            relativeMetrics\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Benchmark comparison failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  }\n};\n","/**\n * ESG & Alternative Data Commands\n * Environmental, social, governance metrics and alternative data analysis\n */\n\nimport { formatPercentage, formatNumber } from '../../utils/formatters.js';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const esgCommands = {\n  ESG_SCORE: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ESG_SCORE command requires a ticker symbol. Usage: ESG_SCORE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock ESG scores (in real implementation, would fetch from ESG data providers)\n        const sectorMultiplier = {\n          'Technology': 0.8,\n          'Healthcare': 0.9,\n          'Financial Services': 0.7,\n          'Energy': 0.4,\n          'Utilities': 0.6,\n          'Consumer Cyclical': 0.6,\n          'Consumer Defensive': 0.7,\n          'Industrials': 0.5,\n          'Materials': 0.4,\n          'Real Estate': 0.6,\n          'Communication Services': 0.7\n        };\n\n        const baseSector = profile.sector || 'Technology';\n        const sectorScore = sectorMultiplier[baseSector] || 0.6;\n        const companySize = Math.min(1.0, profile.mktCap / 1000000000000); // Larger companies tend to have better ESG\n\n        // Generate ESG scores\n        const environmentalScore = Math.min(100, Math.max(20, (sectorScore * 100) + (Math.random() - 0.5) * 30 + (companySize * 20)));\n        const socialScore = Math.min(100, Math.max(20, 70 + (Math.random() - 0.5) * 40 + (companySize * 15)));\n        const governanceScore = Math.min(100, Math.max(30, 75 + (Math.random() - 0.5) * 30 + (companySize * 10)));\n        const overallScore = (environmentalScore + socialScore + governanceScore) / 3;\n\n        // Risk factors\n        const riskFactors = [];\n        if (environmentalScore < 50) riskFactors.push('High environmental impact');\n        if (socialScore < 50) riskFactors.push('Social responsibility concerns');\n        if (governanceScore < 60) riskFactors.push('Governance structure issues');\n        if (baseSector === 'Energy' || baseSector === 'Materials') riskFactors.push('Carbon-intensive industry');\n\n        // Opportunities\n        const opportunities = [];\n        if (environmentalScore > 70) opportunities.push('Strong environmental practices');\n        if (socialScore > 70) opportunities.push('Positive social impact');\n        if (governanceScore > 80) opportunities.push('Excellent governance standards');\n        if (baseSector === 'Technology') opportunities.push('Digital transformation enabler');\n\n        // ESG trends\n        const trends = {\n          environmental: environmentalScore > 60 ? 'Improving' : 'Needs attention',\n          social: socialScore > 65 ? 'Strong' : 'Moderate',\n          governance: governanceScore > 70 ? 'Excellent' : 'Good'\n        };\n\n        const content = `ESG Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🌱 ESG SCORES:\\n• Overall ESG Score: ${formatNumber(overallScore, 1)}/100 ${overallScore > 70 ? '🟢 Strong' : overallScore > 50 ? '🟡 Moderate' : '🔴 Weak'}\\n• Environmental (E): ${formatNumber(environmentalScore, 1)}/100\\n• Social (S): ${formatNumber(socialScore, 1)}/100\\n• Governance (G): ${formatNumber(governanceScore, 1)}/100\\n\\n📊 SECTOR CONTEXT:\\n• Sector: ${baseSector}\\n• Sector ESG Average: ${formatNumber(sectorScore * 100, 1)}/100\\n• Relative Performance: ${overallScore > sectorScore * 100 ? 'Above' : 'Below'} sector average\\n• Company Size Factor: ${formatNumber(companySize, 2)} (larger = better resources)\\n\\n🎯 ESG TRENDS:\\n• Environmental: ${trends.environmental}\\n• Social: ${trends.social}\\n• Governance: ${trends.governance}\\n\\n⚠️ RISK FACTORS:\\n${riskFactors.length > 0 ? riskFactors.map(risk => `• ${risk}`).join('\\n') : '• No major ESG risks identified'}\\n\\n🌟 OPPORTUNITIES:\\n${opportunities.length > 0 ? opportunities.map(opp => `• ${opp}`).join('\\n') : '• Limited ESG opportunities identified'}\\n\\n💰 ESG INVESTMENT IMPLICATIONS:\\n• ESG Premium: ${overallScore > 70 ? 'May command valuation premium' : 'May face valuation discount'}\\n• Regulatory Risk: ${environmentalScore < 50 ? 'High' : 'Low'}\\n• Reputation Risk: ${socialScore < 50 ? 'High' : 'Low'}\\n• Access to Capital: ${overallScore > 60 ? 'Favorable' : 'May face restrictions'}\\n\\n📈 ESG MOMENTUM:\\n• Investor Interest: ${overallScore > 65 ? 'High ESG investor appeal' : 'Limited ESG appeal'}\\n• Sustainable Funds Eligibility: ${overallScore > 70 ? 'Likely eligible' : 'May not qualify'}\\n• Climate Transition Risk: ${environmentalScore < 40 ? 'High' : environmentalScore > 70 ? 'Low' : 'Moderate'}\\n\\n💡 RECOMMENDATIONS:\\n• ${environmentalScore < 60 ? 'Focus on environmental initiatives and carbon reduction' : ''}\\n• ${socialScore < 60 ? 'Improve social impact and stakeholder engagement' : ''}\\n• ${governanceScore < 70 ? 'Strengthen governance practices and transparency' : ''}\\n• ${overallScore > 70 ? 'Leverage ESG leadership for competitive advantage' : ''}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated ESG data. Configure API keys for live ESG ratings.' : '✅ Based on ESG data providers'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'esg',\n            ticker: ticker.toUpperCase(),\n            scores: {\n              overall: overallScore,\n              environmental: environmentalScore,\n              social: socialScore,\n              governance: governanceScore\n            },\n            riskFactors,\n            opportunities,\n            trends\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `ESG analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SOCIAL_SENTIMENT: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, days = 30] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SOCIAL_SENTIMENT command requires a ticker symbol. Usage: SOCIAL_SENTIMENT(AAPL, 30)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock social sentiment data (in real implementation, would analyze social media)\n        const sentimentScore = 40 + Math.random() * 40; // 40-80 range\n        const volumeScore = Math.random() * 100;\n        const trendDirection = Math.random() > 0.5 ? 'Positive' : 'Negative';\n\n        // Generate mock sentiment sources\n        const sources = [\n          { platform: 'Twitter', mentions: Math.floor(Math.random() * 10000), sentiment: sentimentScore + (Math.random() - 0.5) * 20 },\n          { platform: 'Reddit', mentions: Math.floor(Math.random() * 5000), sentiment: sentimentScore + (Math.random() - 0.5) * 15 },\n          { platform: 'StockTwits', mentions: Math.floor(Math.random() * 3000), sentiment: sentimentScore + (Math.random() - 0.5) * 25 },\n          { platform: 'News Articles', mentions: Math.floor(Math.random() * 500), sentiment: sentimentScore + (Math.random() - 0.5) * 10 }\n        ];\n\n        // Key themes\n        const themes = [\n          { topic: 'Earnings', sentiment: sentimentScore + 10, mentions: Math.floor(Math.random() * 2000) },\n          { topic: 'Product Launch', sentiment: sentimentScore + 15, mentions: Math.floor(Math.random() * 1500) },\n          { topic: 'Management', sentiment: sentimentScore - 5, mentions: Math.floor(Math.random() * 800) },\n          { topic: 'Competition', sentiment: sentimentScore - 10, mentions: Math.floor(Math.random() * 1200) }\n        ];\n\n        const totalMentions = sources.reduce((sum, source) => sum + source.mentions, 0);\n        const avgSentiment = sources.reduce((sum, source) => sum + (source.sentiment * source.mentions), 0) / totalMentions;\n\n        const content = `Social Sentiment Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 SENTIMENT OVERVIEW (${days} days):\\n• Overall Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Very Positive' : avgSentiment > 60 ? '🟢 Positive' : avgSentiment > 40 ? '🟡 Neutral' : '🔴 Negative'}\\n• Volume Score: ${formatNumber(volumeScore, 1)}/100 ${volumeScore > 70 ? '📈 High Activity' : volumeScore > 40 ? '📊 Moderate Activity' : '📉 Low Activity'}\\n• Trend Direction: ${trendDirection} ${trendDirection === 'Positive' ? '📈' : '📉'}\\n• Total Mentions: ${formatNumber(totalMentions, 0, true)}\\n\\n🌐 PLATFORM BREAKDOWN:\\n${sources.map(source =>\n          `• ${source.platform}: ${formatNumber(source.mentions, 0, true)} mentions, ${formatNumber(source.sentiment, 1)}/100 sentiment`\n        ).join('\\n')}\\n\\n🔥 TRENDING TOPICS:\\n${themes.map(theme =>\n          `• ${theme.topic}: ${formatNumber(theme.mentions, 0, true)} mentions, ${formatNumber(theme.sentiment, 1)}/100 sentiment ${theme.sentiment > 60 ? '🟢' : theme.sentiment > 40 ? '🟡' : '🔴'}`\n        ).join('\\n')}\\n\\n📈 SENTIMENT INDICATORS:\\n• Bullish Mentions: ${formatPercentage((avgSentiment / 100) * 0.8)}\\n• Bearish Mentions: ${formatPercentage((1 - avgSentiment / 100) * 0.6)}\\n• Neutral Mentions: ${formatPercentage(0.3)}\\n• Engagement Rate: ${formatNumber(volumeScore / 10, 1)}%\\n\\n🎯 SENTIMENT SIGNALS:\\n• ${avgSentiment > 70 ? 'Strong positive momentum in social discussions' : ''}\\n• ${avgSentiment < 40 ? 'Negative sentiment may pressure stock price' : ''}\\n• ${volumeScore > 80 ? 'High social media activity - watch for volatility' : ''}\\n• ${trendDirection === 'Positive' ? 'Improving sentiment trend' : 'Declining sentiment trend'}\\n\\n💡 TRADING IMPLICATIONS:\\n• Sentiment-Price Correlation: ${avgSentiment > 60 ? 'Positive sentiment may support price' : 'Negative sentiment may create headwinds'}\\n• Volatility Expectation: ${volumeScore > 70 ? 'High' : volumeScore > 40 ? 'Moderate' : 'Low'}\\n• Contrarian Opportunity: ${avgSentiment < 30 ? 'Extremely negative sentiment may signal oversold condition' : avgSentiment > 85 ? 'Extremely positive sentiment may signal overbought condition' : 'Sentiment within normal range'}\\n\\n⚠️ SENTIMENT RISKS:\\n• ${volumeScore > 90 ? 'Viral social media activity can cause extreme volatility' : ''}\\n• ${avgSentiment < 35 ? 'Negative sentiment spiral risk' : ''}\\n• ${themes.some(t => t.sentiment < 30) ? 'Specific negative themes gaining traction' : ''}\\n\\n📱 MONITORING RECOMMENDATIONS:\\n• Track sentiment changes around earnings announcements\\n• Monitor for sentiment divergence from price action\\n• Watch for viral content that could impact stock price\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated sentiment data. Configure API keys for live social media analysis.' : '✅ Based on real-time social media data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'social_sentiment',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            metrics: {\n              overallSentiment: avgSentiment,\n              volumeScore,\n              totalMentions,\n              trendDirection\n            },\n            sources,\n            themes\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Social sentiment analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  },\n\n  NEWS_IMPACT: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker, days = 7] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'NEWS_IMPACT command requires a ticker symbol. Usage: NEWS_IMPACT(AAPL, 7)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n\n        // Mock news impact analysis\n        const newsItems = [\n          {\n            date: '2024-01-15',\n            headline: 'Q4 Earnings Beat Expectations',\n            sentiment: 85,\n            impact: 'High',\n            priceChange: 3.2,\n            volume: 150\n          },\n          {\n            date: '2024-01-12',\n            headline: 'New Product Launch Announcement',\n            sentiment: 78,\n            impact: 'Medium',\n            priceChange: 1.8,\n            volume: 120\n          },\n          {\n            date: '2024-01-10',\n            headline: 'Analyst Upgrade to Buy Rating',\n            sentiment: 72,\n            impact: 'Medium',\n            priceChange: 2.1,\n            volume: 110\n          },\n          {\n            date: '2024-01-08',\n            headline: 'Regulatory Concerns Raised',\n            sentiment: 35,\n            impact: 'Medium',\n            priceChange: -1.5,\n            volume: 130\n          }\n        ];\n\n        const avgSentiment = newsItems.reduce((sum, item) => sum + item.sentiment, 0) / newsItems.length;\n        const totalPriceImpact = newsItems.reduce((sum, item) => sum + Math.abs(item.priceChange), 0);\n        const avgVolume = newsItems.reduce((sum, item) => sum + item.volume, 0) / newsItems.length;\n\n        const content = `News Impact Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📰 NEWS SUMMARY (${days} days):\\n• Total News Items: ${newsItems.length}\\n• Average Sentiment: ${formatNumber(avgSentiment, 1)}/100 ${avgSentiment > 70 ? '🟢 Positive' : avgSentiment > 50 ? '🟡 Neutral' : '🔴 Negative'}\\n• Total Price Impact: ${formatPercentage(totalPriceImpact / 100)}\\n• Average Volume Impact: ${formatNumber(avgVolume, 0)}% above normal\\n\\n📊 RECENT NEWS ITEMS:\\n${newsItems.map(item =>\n          `• ${item.date}: ${item.headline}\\n  Sentiment: ${item.sentiment}/100, Impact: ${item.impact}, Price: ${item.priceChange > 0 ? '+' : ''}${formatPercentage(item.priceChange / 100)}, Volume: +${item.volume}%`\n        ).join('\\n\\n')}\\n\\n📈 IMPACT ANALYSIS:\\n• Positive News Items: ${newsItems.filter(item => item.sentiment > 60).length}\\n• Negative News Items: ${newsItems.filter(item => item.sentiment < 40).length}\\n• High Impact Events: ${newsItems.filter(item => item.impact === 'High').length}\\n• Average Price Reaction: ${formatPercentage(newsItems.reduce((sum, item) => sum + item.priceChange, 0) / newsItems.length / 100)}\\n\\n🎯 NEWS MOMENTUM:\\n• Recent Trend: ${avgSentiment > 60 ? 'Positive news flow' : avgSentiment < 40 ? 'Negative news flow' : 'Mixed news flow'}\\n• Volatility Driver: ${totalPriceImpact > 5 ? 'High news-driven volatility' : 'Moderate news impact'}\\n• Volume Catalyst: ${avgVolume > 150 ? 'Strong volume reactions to news' : 'Normal volume reactions'}\\n\\n💡 KEY INSIGHTS:\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment > 70) ? 'Recent positive catalyst may support momentum' : ''}\\n• ${newsItems.some(item => item.impact === 'High' && item.sentiment < 40) ? 'Recent negative news may create headwinds' : ''}\\n• ${totalPriceImpact > 8 ? 'High news sensitivity - monitor for future announcements' : ''}\\n• News-to-price correlation appears ${totalPriceImpact > 5 ? 'strong' : 'moderate'}\\n\\n📅 UPCOMING CATALYSTS:\\n• Earnings announcement expected in ${Math.floor(Math.random() * 30 + 1)} days\\n• Product event scheduled for next quarter\\n• Regulatory decision pending\\n• Analyst day planned for Q2\\n\\n⚠️ RISK FACTORS:\\n• ${newsItems.some(item => item.sentiment < 30) ? 'Recent negative news may have lasting impact' : ''}\\n• ${avgVolume > 200 ? 'High volatility from news reactions' : ''}\\n• Regulatory overhang from recent developments\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated news data. Configure API keys for live news analysis.' : '✅ Based on real-time news feeds'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'news_impact',\n            ticker: ticker.toUpperCase(),\n            period: days,\n            newsItems,\n            metrics: {\n              avgSentiment,\n              totalPriceImpact,\n              avgVolume\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `News impact analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  }\n};\n","/**\n * Backup Service\n * Handles data backup, restore, and synchronization operations\n */\n\nimport { CompressionUtils } from '../utils/CompressionUtils';\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nimport { persistenceManager } from './PersistenceManager';\n\nexport class BackupService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.compressionUtils = new CompressionUtils();\n    this.backupVersion = '1.0.0';\n    this.maxBackupSize = 50 * 1024 * 1024; // 50MB\n    this.maxBackups = 10; // Keep last 10 backups\n  }\n\n  /**\n   * Create a complete backup of all user data\n   */\n  async createBackup(options = {}) {\n    const {\n      includeSettings = true,\n      includeWatchlists = true,\n      includeAlerts = true,\n      includeHistory = true,\n      includeCachedData = false,\n      encrypt = false,\n      compress = true,\n      description = ''\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Collect data to backup\n      const backupData = {\n        version: this.backupVersion,\n        timestamp: new Date().toISOString(),\n        description,\n        metadata: {\n          userAgent: navigator.userAgent,\n          platform: navigator.platform,\n          language: navigator.language,\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        },\n        data: {}\n      };\n\n      // Include user settings and preferences\n      if (includeSettings) {\n        backupData.data.settings = await persistenceManager.retrieve('user_preferences') || {};\n        backupData.data.session = await persistenceManager.retrieve('session_data') || {};\n      }\n\n      // Include watchlists\n      if (includeWatchlists) {\n        backupData.data.watchlists = await persistenceManager.retrieve('watchlists') || {};\n      }\n\n      // Include alerts\n      if (includeAlerts) {\n        backupData.data.alerts = await persistenceManager.retrieve('alerts') || [];\n      }\n\n      // Include command and analysis history\n      if (includeHistory) {\n        backupData.data.commandHistory = await persistenceManager.retrieve('command_history') || [];\n        backupData.data.analysisHistory = await persistenceManager.retrieve('analysis_history') || [];\n      }\n\n      // Include cached data (optional, can be large)\n      if (includeCachedData) {\n        backupData.data.cachedData = await persistenceManager.retrieve('cached_data') || {};\n      }\n\n      // Calculate backup size\n      let backupString = JSON.stringify(backupData);\n      const originalSize = backupString.length;\n\n      if (originalSize > this.maxBackupSize) {\n        throw new Error(`Backup too large: ${originalSize} bytes exceeds ${this.maxBackupSize} bytes`);\n      }\n\n      // Compress if requested\n      if (compress) {\n        backupString = await this.compressionUtils.compress(backupString);\n        backupData.metadata.compressed = true;\n        backupData.metadata.compressionRatio = backupString.length / originalSize;\n      }\n\n      // Encrypt if requested\n      if (encrypt) {\n        backupString = await this.cryptoUtils.encrypt(backupString);\n        backupData.metadata.encrypted = true;\n      }\n\n      // Generate backup ID\n      const backupId = this.generateBackupId();\n\n      // Store backup\n      await this.storeBackup(backupId, backupString, backupData.metadata);\n\n      // Cleanup old backups\n      await this.cleanupOldBackups();\n\n      return {\n        success: true,\n        backupId,\n        size: backupString.length,\n        originalSize,\n        metadata: backupData.metadata,\n        timestamp: backupData.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to create backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Restore data from backup\n   */\n  async restoreBackup(backupId, options = {}) {\n    const {\n      overwrite = false,\n      selectiveRestore = null, // Array of data types to restore\n      createBackupBeforeRestore = true\n    } = options;\n\n    try {\n      await persistenceManager.ensureInitialized();\n\n      // Create backup before restore if requested\n      if (createBackupBeforeRestore) {\n        await this.createBackup({\n          description: `Auto-backup before restore from ${backupId}`,\n          compress: true\n        });\n      }\n\n      // Retrieve backup data\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      let backupString = backup.data;\n      const metadata = backup.metadata;\n\n      // Decrypt if needed\n      if (metadata.encrypted) {\n        backupString = await this.cryptoUtils.decrypt(backupString);\n      }\n\n      // Decompress if needed\n      if (metadata.compressed) {\n        backupString = await this.compressionUtils.decompress(backupString);\n      }\n\n      // Parse backup data\n      const backupData = JSON.parse(backupString);\n\n      // Validate backup version compatibility\n      if (!this.isVersionCompatible(backupData.version)) {\n        throw new Error(`Backup version ${backupData.version} is not compatible with current version ${this.backupVersion}`);\n      }\n\n      // Restore data selectively or completely\n      const dataToRestore = selectiveRestore ?\n        this.filterBackupData(backupData.data, selectiveRestore) :\n        backupData.data;\n\n      const restoreResults = {\n        restored: 0,\n        skipped: 0,\n        errors: 0,\n        details: {}\n      };\n\n      // Restore each data type\n      for (const [dataType, data] of Object.entries(dataToRestore)) {\n        try {\n          // Check if data exists and overwrite setting\n          const existing = await persistenceManager.retrieve(dataType);\n          if (existing && !overwrite) {\n            restoreResults.skipped++;\n            restoreResults.details[dataType] = 'skipped (exists)';\n            continue;\n          }\n\n          // Restore the data\n          await persistenceManager.store(dataType, data, {\n            storage: this.determineStorageType(dataType)\n          });\n\n          restoreResults.restored++;\n          restoreResults.details[dataType] = 'restored';\n\n        } catch (error) {\n          console.error(`Failed to restore ${dataType}:`, error);\n          restoreResults.errors++;\n          restoreResults.details[dataType] = `error: ${error.message}`;\n        }\n      }\n\n      return {\n        success: true,\n        backupId,\n        backupTimestamp: backupData.timestamp,\n        restoreTimestamp: new Date().toISOString(),\n        results: restoreResults\n      };\n\n    } catch (error) {\n      console.error('Failed to restore backup:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * List available backups\n   */\n  async listBackups() {\n    try {\n      const backupKeys = await persistenceManager.indexedDB.getKeys('export_data');\n      const backups = [];\n\n      for (const key of backupKeys) {\n        if (key.startsWith('backup_')) {\n          const backup = await persistenceManager.indexedDB.retrieve(key, { storeName: 'export_data' });\n          if (backup) {\n            backups.push({\n              id: key,\n              timestamp: backup.metadata.timestamp,\n              description: backup.metadata.description || '',\n              size: backup.metadata.size || 0,\n              compressed: backup.metadata.compressed || false,\n              encrypted: backup.metadata.encrypted || false\n            });\n          }\n        }\n      }\n\n      // Sort by timestamp (newest first)\n      backups.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n      return backups;\n\n    } catch (error) {\n      console.error('Failed to list backups:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a backup\n   */\n  async deleteBackup(backupId) {\n    try {\n      await persistenceManager.indexedDB.remove(backupId, { storeName: 'export_data' });\n      return true;\n    } catch (error) {\n      console.error(`Failed to delete backup ${backupId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Export backup to file\n   */\n  async exportBackupToFile(backupId, filename = null) {\n    try {\n      const backup = await this.retrieveBackup(backupId);\n      if (!backup) {\n        throw new Error(`Backup ${backupId} not found`);\n      }\n\n      const exportData = {\n        backupId,\n        ...backup\n      };\n\n      const dataString = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([dataString], { type: 'application/json' });\n\n      const suggestedFilename = filename ||\n        `financeanalyst_backup_${backupId}_${new Date().toISOString().split('T')[0]}.json`;\n\n      return {\n        blob,\n        filename: suggestedFilename,\n        size: blob.size,\n        type: 'application/json'\n      };\n\n    } catch (error) {\n      console.error('Failed to export backup to file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import backup from file\n   */\n  async importBackupFromFile(fileContent) {\n    try {\n      const backupData = JSON.parse(fileContent);\n\n      // Validate backup format\n      if (!backupData.backupId || !backupData.data || !backupData.metadata) {\n        throw new Error('Invalid backup file format');\n      }\n\n      // Store imported backup\n      await this.storeBackup(backupData.backupId, backupData.data, backupData.metadata);\n\n      return {\n        success: true,\n        backupId: backupData.backupId,\n        timestamp: backupData.metadata.timestamp\n      };\n\n    } catch (error) {\n      console.error('Failed to import backup from file:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get backup statistics\n   */\n  async getBackupStats() {\n    try {\n      const backups = await this.listBackups();\n\n      const stats = {\n        totalBackups: backups.length,\n        totalSize: backups.reduce((sum, backup) => sum + (backup.size || 0), 0),\n        oldestBackup: backups.length > 0 ? backups[backups.length - 1].timestamp : null,\n        newestBackup: backups.length > 0 ? backups[0].timestamp : null,\n        encryptedBackups: backups.filter(b => b.encrypted).length,\n        compressedBackups: backups.filter(b => b.compressed).length\n      };\n\n      return stats;\n\n    } catch (error) {\n      console.error('Failed to get backup stats:', error);\n      return null;\n    }\n  }\n\n  // Private methods\n\n  /**\n   * Store backup in IndexedDB\n   */\n  async storeBackup(backupId, data, metadata) {\n    const backupRecord = {\n      id: backupId,\n      data,\n      metadata: {\n        ...metadata,\n        timestamp: new Date().toISOString(),\n        size: data.length\n      },\n      timestamp: Date.now(),\n      type: 'backup'\n    };\n\n    await persistenceManager.indexedDB.store(backupId, backupRecord, {\n      storeName: 'export_data',\n      metadata: backupRecord.metadata\n    });\n  }\n\n  /**\n   * Retrieve backup from IndexedDB\n   */\n  async retrieveBackup(backupId) {\n    return persistenceManager.indexedDB.retrieve(backupId, { storeName: 'export_data' });\n  }\n\n  /**\n   * Generate unique backup ID\n   */\n  generateBackupId() {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `backup_${timestamp}_${random}`;\n  }\n\n  /**\n   * Cleanup old backups\n   */\n  async cleanupOldBackups() {\n    try {\n      const backups = await this.listBackups();\n\n      if (backups.length > this.maxBackups) {\n        const backupsToDelete = backups.slice(this.maxBackups);\n\n        for (const backup of backupsToDelete) {\n          await this.deleteBackup(backup.id);\n        }\n\n        console.warn(`✅ Cleaned up ${backupsToDelete.length} old backups`);\n      }\n\n    } catch (error) {\n      console.error('Failed to cleanup old backups:', error);\n    }\n  }\n\n  /**\n   * Check if backup version is compatible\n   */\n  isVersionCompatible(backupVersion) {\n    // For now, only exact version match\n    // In the future, this could handle version compatibility matrix\n    return backupVersion === this.backupVersion;\n  }\n\n  /**\n   * Filter backup data for selective restore\n   */\n  filterBackupData(backupData, dataTypes) {\n    const filtered = {};\n\n    dataTypes.forEach(dataType => {\n      if (backupData[dataType]) {\n        filtered[dataType] = backupData[dataType];\n      }\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Determine appropriate storage type for data\n   */\n  determineStorageType(dataType) {\n    const localStorageTypes = ['settings', 'session', 'user_preferences'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n}\n\n// Export singleton instance\nexport const backupService = new BackupService();\n","/**\n * Privacy Service\n * Handles data privacy controls, retention policies, and user data rights\n */\n\nimport { backupService } from './BackupService';\nimport { persistenceManager } from './PersistenceManager';\n\n/**\n * @typedef {'command_history'|'analysis_history'|'cached_data'|'export_data'|'session_data'} RetentionDataType\n * @typedef {{ command_history: number, analysis_history: number, cached_data: number, export_data: number, session_data: number }} RetentionPolicies\n * @typedef {{ dataRetention: boolean, analytics: boolean, crashReporting: boolean, dataSharing: boolean, cookieConsent: boolean, trackingConsent: boolean }} PrivacySettings\n * @typedef {{ essential: string[], functional: string[], analytics: string[], marketing: string[], external: string[] }} DataCategories\n * @typedef {{ includeEssential?: boolean, includeFunctional?: boolean, includeAnalytics?: boolean, format?: 'json' | 'csv' }} ExportOptions\n */\n\nexport class PrivacyService {\n  constructor() {\n    /** @type {RetentionPolicies} */\n    this.retentionPolicies = {\n      command_history: 30, // days\n      analysis_history: 90,\n      cached_data: 7,\n      export_data: 30,\n      session_data: 1\n    };\n\n    /** @type {PrivacySettings} */\n    this.privacySettings = {\n      dataRetention: true,\n      analytics: false,\n      crashReporting: true,\n      dataSharing: false,\n      cookieConsent: false,\n      trackingConsent: false\n    };\n\n    /** @type {DataCategories} */\n    this.dataCategories = {\n      essential: ['user_preferences', 'session_data', 'watchlists', 'alerts'],\n      functional: ['command_history', 'user_variables'],\n      analytics: ['usage_stats', 'performance_metrics'],\n      marketing: [], // None currently\n      external: ['cached_data'] // Data from external APIs\n    };\n  }\n\n  /**\n   * Initialize privacy service\n   * @returns {Promise<{ success: boolean, settings: PrivacySettings }>}\n   */\n  async initialize() {\n    try {\n      // Load privacy settings\n      const settings = await persistenceManager.retrieve('privacy_settings');\n      if (settings) {\n        this.privacySettings = { ...this.privacySettings, ...settings };\n      }\n\n      // Load custom retention policies\n      const policies = await persistenceManager.retrieve('retention_policies');\n      if (policies) {\n        this.retentionPolicies = { ...this.retentionPolicies, ...policies };\n      }\n\n      // Schedule cleanup\n      this.scheduleCleanup();\n\n      console.warn('✅ Privacy service initialized');\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize privacy service:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Update privacy settings\n   * @param {Partial<PrivacySettings>} newSettings\n   * @returns {Promise<{ success: boolean, settings: PrivacySettings }>}\n   */\n  async updatePrivacySettings(newSettings) {\n    try {\n      const oldSettings = { ...this.privacySettings };\n      this.privacySettings = { ...this.privacySettings, ...newSettings };\n\n      // Save updated settings\n      await persistenceManager.store('privacy_settings', this.privacySettings, {\n        storage: 'localStorage'\n      });\n\n      // Handle setting changes\n      await this.handlePrivacySettingChanges(oldSettings, this.privacySettings);\n\n      return { success: true, settings: this.privacySettings };\n\n    } catch (error) {\n      console.error('Failed to update privacy settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle privacy setting changes\n   * @param {PrivacySettings} oldSettings\n   * @param {PrivacySettings} newSettings\n   * @returns {Promise<void>}\n   */\n  async handlePrivacySettingChanges(oldSettings, newSettings) {\n    // If data retention was disabled, clean up non-essential data\n    if (oldSettings.dataRetention && !newSettings.dataRetention) {\n      await this.cleanupNonEssentialData();\n    }\n\n    // If analytics was disabled, clean up analytics data\n    if (oldSettings.analytics && !newSettings.analytics) {\n      await this.cleanupAnalyticsData();\n    }\n\n    // If data sharing was disabled, remove shared data markers\n    if (oldSettings.dataSharing && !newSettings.dataSharing) {\n      await this.removeDataSharingMarkers();\n    }\n  }\n\n  /**\n   * Set data retention policy\n   * @param {RetentionDataType} dataType\n   * @param {number} days\n   * @returns {Promise<{ success: boolean, policy: Record<string, number> }>}\n   */\n  async setRetentionPolicy(dataType, days) {\n    try {\n      this.retentionPolicies[dataType] = days;\n\n      // Save updated policies\n      await persistenceManager.store('retention_policies', this.retentionPolicies, {\n        storage: 'localStorage'\n      });\n\n      // Apply new policy immediately\n      await this.cleanupExpiredData(dataType);\n\n      return { success: true, policy: { [dataType]: days } };\n\n    } catch (error) {\n      console.error('Failed to set retention policy:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up expired data based on retention policies\n   * @param {RetentionDataType | null} specificType\n   * @returns {Promise<{ cleaned: number, errors: number, details: Record<string, number | string> }>}\n   */\n  async cleanupExpiredData(specificType = null) {\n    const results = {\n      cleaned: 0,\n      errors: 0,\n      details: {}\n    };\n\n    try {\n      const typesToClean = /** @type {RetentionDataType[]} */ (\n        specificType ? [specificType] : Object.keys(this.retentionPolicies)\n      );\n\n      for (const dataType of typesToClean) {\n        const retentionDays = this.retentionPolicies[dataType];\n        if (!retentionDays) continue;\n\n        try {\n          const cleaned = await this.cleanupDataType(dataType, retentionDays);\n          results.cleaned += cleaned;\n          results.details[dataType] = cleaned;\n\n        } catch (error) {\n          console.error(`Failed to cleanup ${dataType}:`, error);\n          results.errors++;\n          const message = error instanceof Error ? error.message : String(error);\n          results.details[dataType] = `Error: ${message}`;\n        }\n      }\n\n      return results;\n\n    } catch (error) {\n      console.error('Failed to cleanup expired data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up specific data type\n   * @param {RetentionDataType} dataType\n   * @param {number} retentionDays\n   * @returns {Promise<number>}\n   */\n  async cleanupDataType(dataType, retentionDays) {\n    const cutoffTime = Date.now() - (retentionDays * 24 * 60 * 60 * 1000);\n    let cleaned = 0;\n\n    try {\n      switch (dataType) {\n        case 'command_history':\n          cleaned = await this.cleanupCommandHistory(cutoffTime);\n          break;\n\n        case 'analysis_history':\n          cleaned = await this.cleanupAnalysisHistory(cutoffTime);\n          break;\n\n        case 'cached_data':\n          cleaned = await this.cleanupCachedData(cutoffTime);\n          break;\n\n        case 'export_data':\n          cleaned = await this.cleanupExportData(cutoffTime);\n          break;\n\n        case 'session_data':\n          cleaned = await this.cleanupSessionData(cutoffTime);\n          break;\n\n        default:\n          console.warn(`Unknown data type for cleanup: ${dataType}`);\n      }\n\n      return cleaned;\n\n    } catch (error) {\n      console.error(`Failed to cleanup ${dataType}:`, error);\n      return 0;\n    }\n  }\n\n  /**\n   * Clean up command history\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupCommandHistory(cutoffTime) {\n    const history = /** @type {Array<{ timestamp: number | string }>} */ (\n      await persistenceManager.retrieve('command_history')\n    ) || [];\n    const filtered = history.filter(entry =>\n      new Date(entry.timestamp).getTime() > cutoffTime\n    );\n\n    if (filtered.length < history.length) {\n      await persistenceManager.store('command_history', filtered, {\n        storage: 'indexedDB'\n      });\n      return history.length - filtered.length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Clean up analysis history\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupAnalysisHistory(cutoffTime) {\n    // Get all analysis history from IndexedDB\n    const allHistory = /** @type {Array<{ id: string | number, timestamp: number }>} */ (\n      await persistenceManager.indexedDB.getAll('analysis_history')\n    );\n    let cleaned = 0;\n\n    for (const entry of allHistory) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'analysis_history' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up cached data\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupCachedData(cutoffTime) {\n    const allCached = /** @type {Array<{ key: string | number, timestamp: number }>} */ (\n      await persistenceManager.indexedDB.getAll('cached_data')\n    );\n    let cleaned = 0;\n\n    for (const entry of allCached) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.key, { storeName: 'cached_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up export data\n   * @param {number} cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupExportData(cutoffTime) {\n    const allExports = /** @type {Array<{ id: string | number, timestamp: number }>} */ (\n      await persistenceManager.indexedDB.getAll('export_data')\n    );\n    let cleaned = 0;\n\n    for (const entry of allExports) {\n      if (entry.timestamp < cutoffTime) {\n        await persistenceManager.indexedDB.remove(entry.id, { storeName: 'export_data' });\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up session data\n   * @param {number} _cutoffTime\n   * @returns {Promise<number>}\n   */\n  async cleanupSessionData(_cutoffTime) {\n    // Session data is typically current, but clean up old session logs if any\n    return 0; // Placeholder\n  }\n\n  /**\n   * Clean up non-essential data\n   */\n  async cleanupNonEssentialData() {\n    const nonEssentialTypes = [\n      ...this.dataCategories.functional,\n      ...this.dataCategories.analytics,\n      ...this.dataCategories.external\n    ];\n\n    let cleaned = 0;\n\n    for (const dataType of nonEssentialTypes) {\n      try {\n        if (dataType === 'command_history') {\n          await persistenceManager.store('command_history', [], { storage: 'indexedDB' });\n          cleaned++;\n        } else if (dataType === 'cached_data') {\n          await persistenceManager.indexedDB.clear('cached_data');\n          cleaned++;\n        }\n        // Add more cleanup logic as needed\n      } catch (error) {\n        console.error(`Failed to cleanup ${dataType}:`, error);\n      }\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Clean up analytics data\n   */\n  async cleanupAnalyticsData() {\n    const analyticsTypes = this.dataCategories.analytics;\n\n    for (const dataType of analyticsTypes) {\n      try {\n        await persistenceManager.remove(dataType);\n      } catch (error) {\n        console.error(`Failed to cleanup analytics data ${dataType}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Remove data sharing markers\n   */\n  async removeDataSharingMarkers() {\n    // Remove any markers that indicate data has been shared\n    // This is a placeholder for future implementation\n    console.warn('Data sharing markers removed');\n  }\n\n  /**\n   * Export user data (GDPR compliance)\n   * @param {ExportOptions=} options\n   * @returns {Promise<{ success: boolean, data: { exportTimestamp: string, privacySettings: PrivacySettings, retentionPolicies: RetentionPolicies, data: Record<string, any> }, size: number, format: string }>}\n   */\n  async exportUserData(options = {}) {\n    const {\n      includeEssential = true,\n      includeFunctional = true,\n      includeAnalytics = false,\n      format = 'json'\n    } = options;\n\n    try {\n      /** @type {{ exportTimestamp: string, privacySettings: PrivacySettings, retentionPolicies: RetentionPolicies, data: Record<string, any> }} */\n      const exportData = {\n        exportTimestamp: new Date().toISOString(),\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        data: {}\n      };\n\n      // Include data based on categories\n      if (includeEssential) {\n        for (const dataType of this.dataCategories.essential) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeFunctional) {\n        for (const dataType of this.dataCategories.functional) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      if (includeAnalytics) {\n        for (const dataType of this.dataCategories.analytics) {\n          const data = await persistenceManager.retrieve(dataType);\n          if (data) {\n            exportData.data[dataType] = data;\n          }\n        }\n      }\n\n      return {\n        success: true,\n        data: exportData,\n        size: JSON.stringify(exportData).length,\n        format\n      };\n\n    } catch (error) {\n      console.error('Failed to export user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete all user data (Right to be forgotten)\n   * @param {boolean} [confirmation=false]\n   * @returns {Promise<{ success: true, backup: string, timestamp: string }>}\n   */\n  async deleteAllUserData(confirmation = false) {\n    if (!confirmation) {\n      throw new Error('Data deletion requires explicit confirmation');\n    }\n\n    try {\n      // Create final backup\n      const backup = await backupService.createBackup({\n        description: 'Final backup before data deletion',\n        compress: true,\n        encrypt: true\n      });\n\n      // Clear all storage\n      await persistenceManager.clear({ storage: 'both', confirm: true });\n\n      // Clear browser storage\n      localStorage.clear();\n\n      // Clear IndexedDB\n      if (window.indexedDB) {\n        const databases = await indexedDB.databases();\n        for (const db of databases) {\n          if (db.name.includes('FinanceAnalyst')) {\n            indexedDB.deleteDatabase(db.name);\n          }\n        }\n      }\n\n      return {\n        success: true,\n        backup: backup.backupId,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('Failed to delete user data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get privacy compliance report\n   */\n  async getPrivacyReport() {\n    try {\n      const storageStats = await persistenceManager.getStorageStats();\n      const cleanupResults = await this.cleanupExpiredData();\n\n      return {\n        privacySettings: this.privacySettings,\n        retentionPolicies: this.retentionPolicies,\n        dataCategories: this.dataCategories,\n        storageStats,\n        lastCleanup: cleanupResults,\n        compliance: {\n          gdprCompliant: this.privacySettings.dataRetention,\n          ccpaCompliant: !this.privacySettings.dataSharing,\n          retentionPoliciesActive: Object.keys(this.retentionPolicies).length > 0\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to generate privacy report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule automatic cleanup\n   */\n  scheduleCleanup() {\n    // Run cleanup daily\n    setInterval(async() => {\n      try {\n        await this.cleanupExpiredData();\n        console.warn('✅ Scheduled privacy cleanup completed');\n      } catch (error) {\n        console.error('❌ Scheduled privacy cleanup failed:', error);\n      }\n    }, 24 * 60 * 60 * 1000); // 24 hours\n\n    // Run cleanup on page load\n    setTimeout(() => {\n      this.cleanupExpiredData().catch(error => {\n        console.error('Initial privacy cleanup failed:', error);\n      });\n    }, 5000); // 5 seconds after initialization\n  }\n\n  /**\n   * Get privacy settings\n   * @returns {PrivacySettings}\n   */\n  getPrivacySettings() {\n    return { ...this.privacySettings };\n  }\n\n  /**\n   * Get retention policies\n   * @returns {RetentionPolicies}\n   */\n  getRetentionPolicies() {\n    return { ...this.retentionPolicies };\n  }\n}\n\n// Export singleton instance\nexport const privacyService = new PrivacyService();\n","// @ts-check\n/**\n * Sync Service\n * Handles data synchronization for future cloud storage integration\n */\n\nimport { CryptoUtils } from '../utils/CryptoUtils';\n\nimport { backupService } from './BackupService';\nimport { persistenceManager } from './PersistenceManager';\n\n/**\n * @typedef {'syncCompleted' | 'fullSyncCompleted' | 'syncFailed'} SyncEvent\n */\n\n/**\n * @callback SyncEventListener\n * @param {SyncEvent} event\n * @param {any} data\n * @returns {void}\n */\n\nexport class SyncService {\n  constructor() {\n    this.cryptoUtils = new CryptoUtils();\n    this.syncEndpoint = null; // Future cloud endpoint\n    this.syncInterval = 5 * 60 * 1000; // 5 minutes\n    this.lastSyncTime = null;\n    this.syncInProgress = false;\n    this.conflictResolutionStrategy = 'client_wins'; // client_wins, server_wins, merge\n    /** @type {Set<SyncEventListener>} */\n    this.listeners = new Set();\n\n    // Sync queue for offline operations\n    this.syncQueue = [];\n    this.maxQueueSize = 100;\n  }\n\n  /**\n   * Initialize sync service\n   */\n  async initialize(config = {}) {\n    try {\n      this.syncEndpoint = config.endpoint || null;\n      this.syncInterval = config.interval || this.syncInterval;\n      this.conflictResolutionStrategy = config.conflictResolution || this.conflictResolutionStrategy;\n\n      // Load last sync time\n      this.lastSyncTime = await persistenceManager.retrieve('last_sync_time');\n\n      // Load sync queue\n      const queue = await persistenceManager.retrieve('sync_queue');\n      if (queue && Array.isArray(queue)) {\n        this.syncQueue = queue;\n      }\n\n      // Setup periodic sync if endpoint is configured\n      if (this.syncEndpoint) {\n        this.setupPeriodicSync();\n      }\n\n      console.warn('✅ Sync service initialized');\n      return { success: true, endpoint: this.syncEndpoint };\n\n    } catch (error) {\n      console.error('❌ Failed to initialize sync service:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, error: message };\n    }\n  }\n\n  /**\n   * Queue a sync operation\n   */\n  async queueSyncOperation(operation) {\n    try {\n      const syncOperation = {\n        id: this.generateOperationId(),\n        type: operation.type, // 'create', 'update', 'delete'\n        dataType: operation.dataType,\n        key: operation.key,\n        data: operation.data,\n        timestamp: Date.now(),\n        retries: 0\n      };\n\n      this.syncQueue.push(syncOperation);\n\n      // Trim queue if too large\n      if (this.syncQueue.length > this.maxQueueSize) {\n        this.syncQueue = this.syncQueue.slice(-this.maxQueueSize);\n      }\n\n      // Save queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Attempt immediate sync if online\n      if (navigator.onLine && this.syncEndpoint) {\n        this.processSyncQueue().catch(error => {\n          console.error('Failed to process sync queue:', error);\n        });\n      }\n\n      return syncOperation.id;\n\n    } catch (error) {\n      console.error('Failed to queue sync operation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process sync queue\n   */\n  async processSyncQueue() {\n    if (this.syncInProgress || !this.syncEndpoint || !navigator.onLine) {\n      return { processed: 0, failed: 0 };\n    }\n\n    this.syncInProgress = true;\n    let processed = 0;\n    let failed = 0;\n\n    try {\n      // Process operations in order\n      const operations = [...this.syncQueue];\n\n      for (const operation of operations) {\n        try {\n          await this.syncOperation(operation);\n\n          // Remove from queue on success\n          this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n          processed++;\n\n        } catch (error) {\n          console.error(`Failed to sync operation ${operation.id}:`, error);\n\n          // Increment retry count\n          operation.retries++;\n\n          // Remove if too many retries\n          if (operation.retries > 3) {\n            this.syncQueue = this.syncQueue.filter(op => op.id !== operation.id);\n            failed++;\n          }\n        }\n      }\n\n      // Save updated queue\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('syncCompleted', { processed, failed });\n\n      return { processed, failed };\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Sync a single operation (placeholder for future implementation)\n   */\n  async syncOperation(operation) {\n    // This is a placeholder for future cloud sync implementation\n    // For now, we'll simulate the operation\n\n    if (!this.syncEndpoint) {\n      throw new Error('No sync endpoint configured');\n    }\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // In a real implementation, this would:\n    // 1. Send the operation to the cloud endpoint\n    // 2. Handle authentication\n    // 3. Manage conflicts\n    // 4. Return success/failure\n\n    console.warn(`Simulated sync operation: ${operation.type} ${operation.dataType}:${operation.key}`);\n\n    return { success: true, operation: operation.id };\n  }\n\n  /**\n   * Perform full sync with cloud\n   */\n  async performFullSync() {\n    if (this.syncInProgress || !this.syncEndpoint) {\n      return { success: false, reason: 'Sync in progress or no endpoint' };\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Create backup before sync\n      const backup = await backupService.createBackup({\n        description: 'Pre-sync backup',\n        compress: true\n      });\n\n      // Get local data\n      const localData = await this.getLocalSyncData();\n\n      // Get remote data (placeholder)\n      const remoteData = await this.getRemoteData();\n\n      // Resolve conflicts\n      const mergedData = await this.resolveConflicts(localData, remoteData);\n\n      // Apply merged data locally\n      await this.applyMergedData(mergedData);\n\n      // Update last sync time\n      this.lastSyncTime = Date.now();\n      await persistenceManager.store('last_sync_time', this.lastSyncTime, {\n        storage: 'localStorage'\n      });\n\n      // Clear sync queue\n      this.syncQueue = [];\n      await persistenceManager.store('sync_queue', this.syncQueue, {\n        storage: 'localStorage'\n      });\n\n      // Notify listeners\n      this.notifyListeners('fullSyncCompleted', { backup: backup.backupId });\n\n      return {\n        success: true,\n        timestamp: this.lastSyncTime,\n        backup: backup.backupId\n      };\n\n    } catch (error) {\n      console.error('Full sync failed:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      // Notify listeners\n      this.notifyListeners('syncFailed', { error: message });\n      throw error;\n\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Get local data for sync\n   */\n  async getLocalSyncData() {\n    const data = {};\n\n    // Get all syncable data types\n    const syncableTypes = [\n      'watchlists',\n      'alerts',\n      'user_preferences',\n      'user_variables'\n    ];\n\n    for (const type of syncableTypes) {\n      const typeData = await persistenceManager.retrieve(type);\n      if (typeData) {\n        data[type] = {\n          data: typeData,\n          lastModified: Date.now(), // In real implementation, track actual modification times\n          checksum: await this.calculateChecksum(typeData)\n        };\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Get remote data (placeholder)\n   */\n  async getRemoteData() {\n    // Placeholder for future cloud implementation\n    // This would fetch data from the cloud endpoint\n    return {};\n  }\n\n  /**\n   * Resolve conflicts between local and remote data\n   */\n  async resolveConflicts(localData, remoteData) {\n    const merged = {};\n\n    // Get all data types from both sources\n    const allTypes = new Set([\n      ...Object.keys(localData),\n      ...Object.keys(remoteData)\n    ]);\n\n    for (const type of allTypes) {\n      const local = localData[type];\n      const remote = remoteData[type];\n\n      if (!local && remote) {\n        // Only remote data exists\n        merged[type] = remote;\n      } else if (local && !remote) {\n        // Only local data exists\n        merged[type] = local;\n      } else if (local && remote) {\n        // Both exist - resolve conflict\n        merged[type] = await this.resolveDataConflict(type, local, remote);\n      }\n    }\n\n    return merged;\n  }\n\n  /**\n   * Resolve conflict for a specific data type\n   */\n  async resolveDataConflict(type, local, remote) {\n    switch (this.conflictResolutionStrategy) {\n      case 'client_wins':\n        return local;\n\n      case 'server_wins':\n        return remote;\n\n      case 'merge':\n        return await this.mergeData(type, local, remote);\n\n      case 'latest_wins':\n        return local.lastModified > remote.lastModified ? local : remote;\n\n      default:\n        return local;\n    }\n  }\n\n  /**\n   * Merge data intelligently\n   */\n  async mergeData(type, local, remote) {\n    // Intelligent merging based on data type\n    switch (type) {\n      case 'watchlists':\n        return this.mergeWatchlists(local.data, remote.data);\n\n      case 'alerts':\n        return this.mergeAlerts(local.data, remote.data);\n\n      case 'user_preferences':\n        return { ...remote.data, ...local.data }; // Local preferences win\n\n      default:\n        return local; // Default to local data\n    }\n  }\n\n  /**\n   * Merge watchlists\n   */\n  mergeWatchlists(local, remote) {\n    const merged = { ...remote };\n\n    // Add local watchlists, keeping newer versions\n    Object.entries(local).forEach(([name, watchlist]) => {\n      if (!merged[name] ||\n          new Date(watchlist.lastUpdated) > new Date(merged[name].lastUpdated)) {\n        merged[name] = watchlist;\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Merge alerts\n   */\n  mergeAlerts(local, remote) {\n    const merged = [...remote];\n    const remoteIds = new Set(remote.map(alert => alert.id));\n\n    // Add local alerts that don't exist remotely\n    local.forEach(alert => {\n      if (!remoteIds.has(alert.id)) {\n        merged.push(alert);\n      }\n    });\n\n    return merged;\n  }\n\n  /**\n   * Apply merged data locally\n   */\n  async applyMergedData(mergedData) {\n    for (const [type, data] of Object.entries(mergedData)) {\n      await persistenceManager.store(type, data.data, {\n        storage: this.determineStorageType(type)\n      });\n    }\n  }\n\n  /**\n   * Calculate checksum for data integrity\n   */\n  async calculateChecksum(data) {\n    const dataString = JSON.stringify(data);\n    return await this.cryptoUtils.hash(dataString);\n  }\n\n  /**\n   * Setup periodic sync\n   */\n  setupPeriodicSync() {\n    setInterval(() => {\n      if (navigator.onLine && !this.syncInProgress) {\n        this.processSyncQueue().catch(error => {\n          console.error('Periodic sync failed:', error);\n        });\n      }\n    }, this.syncInterval);\n\n    // Sync when coming online\n    window.addEventListener('online', () => {\n      this.processSyncQueue().catch(error => {\n        console.error('Online sync failed:', error);\n      });\n    });\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus() {\n    return {\n      lastSyncTime: this.lastSyncTime,\n      syncInProgress: this.syncInProgress,\n      queueSize: this.syncQueue.length,\n      isOnline: navigator.onLine,\n      hasEndpoint: !!this.syncEndpoint,\n      strategy: this.conflictResolutionStrategy\n    };\n  }\n\n  /**\n   * Add event listener\n   * @param {SyncEventListener} callback\n   * @returns {void}\n   */\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove event listener\n   * @param {SyncEventListener} callback\n   * @returns {void}\n   */\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Private methods\n\n  generateOperationId() {\n    return 'sync_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  determineStorageType(dataType) {\n    const localStorageTypes = ['user_preferences', 'user_variables'];\n    return localStorageTypes.includes(dataType) ? 'localStorage' : 'indexedDB';\n  }\n\n  /**\n   * Notify registered listeners about sync events\n   * @param {SyncEvent} event\n   * @param {any} data\n   * @returns {void}\n   */\n  notifyListeners(event, data) {\n    for (const callback of Array.from(this.listeners)) {\n      try {\n        callback(event, data);\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        console.error('Error in sync event listener:', message);\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const syncService = new SyncService();\n","// @ts-check\n/**\n * Persistence Test Suite\n * Browser-based integration tests for the persistence layer\n */\n\nimport { backupService } from './BackupService';\nimport { persistenceManager } from './PersistenceManager';\nimport { privacyService } from './PrivacyService';\nimport { syncService } from './SyncService';\n\n/**\n * @typedef {Object} TestResult\n * @property {string} testName\n * @property {string} description\n * @property {boolean} passed\n * @property {any} [data]\n * @property {string} timestamp\n * @property {boolean} [skipped]\n * @property {string} [reason]\n * @property {string} [error]\n */\n\n/**\n * @typedef {Object} TestSuiteSummary\n * @property {number} total\n * @property {number} passed\n * @property {number} failed\n * @property {number} skipped\n * @property {number} successRate\n * @property {TestResult[]} results\n */\n\n/**\n * @typedef {Object} RunAllTestsResult\n * @property {number} passed\n * @property {number} total\n * @property {boolean} success\n * @property {TestResult[]} results\n * @property {string} [error]\n */\n\nexport class PersistenceTestSuite {\n  constructor() {\n    /** @type {TestResult[]} */\n    this.testResults = [];\n    /** @type {boolean} */\n    this.isRunning = false;\n  }\n\n  /**\n   * Run all persistence tests\n   * @returns {Promise<RunAllTestsResult>}\n   */\n  async runAllTests() {\n    if (this.isRunning) {\n      console.warn('Tests are already running');\n      const summary = this.getTestSummary();\n      return {\n        passed: summary.passed,\n        total: summary.total,\n        success: summary.failed === 0,\n        results: summary.results\n      };\n    }\n\n    this.isRunning = true;\n    this.testResults = [];\n\n    console.warn('🧪 Starting Persistence Layer Test Suite...');\n\n    try {\n      // Core persistence tests\n      await this.testPersistenceManagerInitialization();\n      await this.testDataStorageAndRetrieval();\n      await this.testDataRemoval();\n      await this.testStorageStatistics();\n\n      // Backup service tests\n      await this.testBackupCreation();\n      await this.testBackupListing();\n      await this.testBackupRestore();\n\n      // Privacy service tests\n      await this.testPrivacySettings();\n      await this.testDataCleanup();\n\n      // Sync service tests\n      await this.testSyncStatus();\n\n      // Integration tests\n      await this.testDataLifecycle();\n      await this.testErrorHandling();\n\n      const passed = this.testResults.filter(r => r.passed).length;\n      const total = this.testResults.length;\n\n      console.warn(`✅ Test Suite Complete: ${passed}/${total} tests passed`);\n\n      return {\n        passed,\n        total,\n        success: passed === total,\n        results: this.testResults\n      };\n\n    } catch (error) {\n      console.error('❌ Test suite failed:', error);\n      const message = error instanceof Error ? error.message : String(error);\n      return {\n        passed: 0,\n        total: this.testResults.length,\n        success: false,\n        error: message,\n        results: this.testResults\n      };\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Test persistence manager initialization\n   * @returns {Promise<void>}\n   */\n  async testPersistenceManagerInitialization() {\n    const testName = 'Persistence Manager Initialization';\n\n    try {\n      const result = await persistenceManager.initialize();\n\n      this.assert(\n        result.success === true,\n        testName,\n        'Should initialize successfully',\n        result\n      );\n\n      this.assert(\n        persistenceManager.isInitialized === true,\n        testName,\n        'Should set initialized flag',\n        { isInitialized: persistenceManager.isInitialized }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test data storage and retrieval\n   * @returns {Promise<void>}\n   */\n  async testDataStorageAndRetrieval() {\n    const testName = 'Data Storage and Retrieval';\n\n    try {\n      const testData = {\n        test: true,\n        timestamp: Date.now(),\n        data: ['item1', 'item2', 'item3']\n      };\n\n      // Test localStorage storage\n      const storeResult = await persistenceManager.store('test_data', testData, {\n        storage: 'localStorage'\n      });\n\n      this.assert(\n        storeResult.success === true,\n        testName,\n        'Should store data successfully',\n        storeResult\n      );\n\n      // Test data retrieval\n      const retrievedData = await persistenceManager.retrieve('test_data');\n\n      this.assert(\n        JSON.stringify(retrievedData) === JSON.stringify(testData),\n        testName,\n        'Should retrieve stored data correctly',\n        { stored: testData, retrieved: retrievedData }\n      );\n\n      // Test IndexedDB storage\n      const indexedStoreResult = await persistenceManager.store('test_indexed_data', testData, {\n        storage: 'indexedDB'\n      });\n\n      this.assert(\n        indexedStoreResult.success === true,\n        testName,\n        'Should store data in IndexedDB',\n        indexedStoreResult\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test data removal\n   * @returns {Promise<void>}\n   */\n  async testDataRemoval() {\n    const testName = 'Data Removal';\n\n    try {\n      // Store test data first\n      await persistenceManager.store('test_removal', { data: 'to_be_removed' });\n\n      // Remove the data\n      const removeResult = await persistenceManager.remove('test_removal');\n\n      this.assert(\n        removeResult === true,\n        testName,\n        'Should remove data successfully',\n        { removeResult }\n      );\n\n      // Verify data is gone\n      const retrievedData = await persistenceManager.retrieve('test_removal');\n\n      this.assert(\n        retrievedData === null,\n        testName,\n        'Should return null for removed data',\n        { retrievedData }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test storage statistics\n   * @returns {Promise<void>}\n   */\n  async testStorageStatistics() {\n    const testName = 'Storage Statistics';\n\n    try {\n      const stats = await persistenceManager.getStorageStats();\n\n      this.assert(\n        stats !== null && typeof stats === 'object',\n        testName,\n        'Should return storage statistics',\n        stats\n      );\n\n      this.assert(\n        typeof stats.total.used === 'number',\n        testName,\n        'Should include total usage',\n        { totalUsed: stats.total.used }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test backup creation\n   * @returns {Promise<void>}\n   */\n  async testBackupCreation() {\n    const testName = 'Backup Creation';\n\n    try {\n      // Store some test data first\n      await persistenceManager.store('backup_test_data', {\n        test: 'backup_data',\n        timestamp: Date.now()\n      });\n\n      const backup = await backupService.createBackup({\n        description: 'Test backup',\n        compress: true\n      });\n\n      this.assert(\n        backup.success === true,\n        testName,\n        'Should create backup successfully',\n        backup\n      );\n\n      this.assert(\n        typeof backup.backupId === 'string',\n        testName,\n        'Should return backup ID',\n        { backupId: backup.backupId }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test backup listing\n   * @returns {Promise<void>}\n   */\n  async testBackupListing() {\n    const testName = 'Backup Listing';\n\n    try {\n      const backups = await backupService.listBackups();\n\n      this.assert(\n        Array.isArray(backups),\n        testName,\n        'Should return array of backups',\n        { backupsCount: backups.length }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test backup restore\n   * @returns {Promise<void>}\n   */\n  async testBackupRestore() {\n    const testName = 'Backup Restore';\n\n    try {\n      // Get available backups\n      const backups = await backupService.listBackups();\n\n      if (backups.length > 0) {\n        const backupId = backups[0].id;\n\n        const restoreResult = await backupService.restoreBackup(backupId, {\n          overwrite: false\n        });\n\n        this.assert(\n          restoreResult.success === true,\n          testName,\n          'Should restore backup successfully',\n          restoreResult\n        );\n      } else {\n        this.recordSkip(testName, 'No backups available for restore test');\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test privacy settings\n   * @returns {Promise<void>}\n   */\n  async testPrivacySettings() {\n    const testName = 'Privacy Settings';\n\n    try {\n      const settings = privacyService.getPrivacySettings();\n\n      this.assert(\n        typeof settings === 'object',\n        testName,\n        'Should return privacy settings',\n        settings\n      );\n\n      // Test updating a setting\n      await privacyService.updatePrivacySettings({ analytics: false });\n\n      const updatedSettings = privacyService.getPrivacySettings();\n\n      this.assert(\n        updatedSettings.analytics === false,\n        testName,\n        'Should update privacy settings',\n        { analytics: updatedSettings.analytics }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test data cleanup\n   * @returns {Promise<void>}\n   */\n  async testDataCleanup() {\n    const testName = 'Data Cleanup';\n\n    try {\n      const cleanupResult = await privacyService.cleanupExpiredData();\n\n      this.assert(\n        typeof cleanupResult.cleaned === 'number',\n        testName,\n        'Should return cleanup results',\n        cleanupResult\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test sync status\n   * @returns {Promise<void>}\n   */\n  async testSyncStatus() {\n    const testName = 'Sync Status';\n\n    try {\n      const status = syncService.getSyncStatus();\n\n      this.assert(\n        typeof status === 'object',\n        testName,\n        'Should return sync status',\n        status\n      );\n\n      this.assert(\n        typeof status.isOnline === 'boolean',\n        testName,\n        'Should include online status',\n        { isOnline: status.isOnline }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test complete data lifecycle\n   * @returns {Promise<void>}\n   */\n  async testDataLifecycle() {\n    const testName = 'Data Lifecycle';\n\n    try {\n      const testKey = 'lifecycle_test';\n      const testData = { lifecycle: true, step: 1 };\n\n      // Store\n      await persistenceManager.store(testKey, testData);\n\n      // Retrieve\n      const retrieved = await persistenceManager.retrieve(testKey);\n\n      // Update\n      const updatedData = { ...testData, step: 2 };\n      await persistenceManager.store(testKey, updatedData);\n\n      // Retrieve updated\n      const retrievedUpdated = await persistenceManager.retrieve(testKey);\n\n      // Remove\n      await persistenceManager.remove(testKey);\n\n      // Verify removal\n      const retrievedAfterRemoval = await persistenceManager.retrieve(testKey);\n\n      this.assert(\n        retrieved.step === 1 &&\n        retrievedUpdated.step === 2 &&\n        retrievedAfterRemoval === null,\n        testName,\n        'Should handle complete data lifecycle',\n        {\n          initial: retrieved?.step,\n          updated: retrievedUpdated?.step,\n          afterRemoval: retrievedAfterRemoval\n        }\n      );\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  /**\n   * Test error handling\n   * @returns {Promise<void>}\n   */\n  async testErrorHandling() {\n    const testName = 'Error Handling';\n\n    try {\n      // Test invalid data retrieval\n      const invalidResult = await persistenceManager.retrieve('non_existent_key_12345');\n\n      this.assert(\n        invalidResult === null,\n        testName,\n        'Should handle non-existent keys gracefully',\n        { invalidResult }\n      );\n\n      // Test invalid backup restore\n      try {\n        await backupService.restoreBackup('invalid_backup_id');\n        this.recordFailure(testName, 'Should have thrown error for invalid backup ID');\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        this.assert(\n          true,\n          testName,\n          'Should throw error for invalid backup ID',\n          { error: message }\n        );\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      this.recordFailure(testName, message);\n    }\n  }\n\n  // Helper methods\n\n  /**\n   * @param {boolean} condition\n   * @param {string} testName\n   * @param {string} description\n   * @param {any} [data]\n   * @returns {void}\n   */\n  assert(condition, testName, description, data = null) {\n    const result = {\n      testName,\n      description,\n      passed: !!condition,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n\n    if (condition) {\n      console.warn(`✅ ${testName}: ${description}`);\n    } else {\n      console.error(`❌ ${testName}: ${description}`, data);\n    }\n  }\n\n  /**\n   * @param {string} testName\n   * @param {string} error\n   * @returns {void}\n   */\n  recordFailure(testName, error) {\n    const result = {\n      testName,\n      description: 'Test failed with error',\n      passed: false,\n      error,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.error(`❌ ${testName}: ${error}`);\n  }\n\n  /**\n   * @param {string} testName\n   * @param {string} reason\n   * @returns {void}\n   */\n  recordSkip(testName, reason) {\n    const result = {\n      testName,\n      description: 'Test skipped',\n      passed: true,\n      skipped: true,\n      reason,\n      timestamp: new Date().toISOString()\n    };\n\n    this.testResults.push(result);\n    console.warn(`⏭️ ${testName}: Skipped - ${reason}`);\n  }\n\n  /**\n   * Get test results summary\n   * @returns {TestSuiteSummary}\n   */\n  getTestSummary() {\n    const total = this.testResults.length;\n    const passed = this.testResults.filter(r => r.passed).length;\n    const failed = this.testResults.filter(r => !r.passed).length;\n    const skipped = this.testResults.filter(r => r.skipped).length;\n\n    return {\n      total,\n      passed,\n      failed,\n      skipped,\n      successRate: total > 0 ? (passed / total) * 100 : 0,\n      results: this.testResults\n    };\n  }\n}\n\n// Export singleton instance\nexport const persistenceTestSuite = new PersistenceTestSuite();\n\n// Global test function for browser console\n/** @type {any} */\n(window).testPersistence = () => persistenceTestSuite.runAllTests();\n","/**\n * Persistence Commands\n * Commands for managing data persistence, backup, and privacy\n */\n\nimport { formatNumber, formatPercentage } from '../../utils/dataTransformation';\nimport { backupService } from '../persistence/BackupService';\nimport { persistenceManager } from '../persistence/PersistenceManager';\nimport { persistenceTestSuite } from '../persistence/PersistenceTestSuite';\nimport { privacyService } from '../persistence/PrivacyService';\nimport { syncService } from '../persistence/SyncService';\n\nexport const persistenceCommands = {\n  BACKUP_CREATE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const [description] = _parsedCommand.parameters;\n\n      try {\n        const backup = await backupService.createBackup({\n          description: description || 'Manual backup',\n          includeSettings: true,\n          includeWatchlists: true,\n          includeAlerts: true,\n          includeHistory: true,\n          compress: true,\n          encrypt: false\n        });\n\n        const content = `💾 Backup Created Successfully\\n\\n📋 BACKUP DETAILS:\\n• Backup ID: ${backup.backupId}\\n• Size: ${formatNumber(backup.size / 1024, 1)} KB\\n• Original Size: ${formatNumber(backup.originalSize / 1024, 1)} KB\\n• Compression Ratio: ${formatPercentage(backup.metadata.compressionRatio || 0)}\\n• Timestamp: ${backup.timestamp}\\n• Description: ${description || 'Manual backup'}\\n\\n💡 BACKUP INCLUDES:\\n• User preferences and settings\\n• Watchlists and alerts\\n• Command and analysis history\\n• All user variables\\n\\n🔧 MANAGEMENT:\\n• Use BACKUP_LIST() to view all backups\\n• Use BACKUP_RESTORE(id) to restore from backup\\n• Use BACKUP_EXPORT(id) to download backup file\\n\\n✅ Your data is now safely backed up and can be restored at any time.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_create',\n            backup\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup creation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  },\n\n  BACKUP_LIST: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const backups = await backupService.listBackups();\n        const stats = await backupService.getBackupStats();\n\n        if (backups.length === 0) {\n          return {\n            type: 'info',\n            content: '📁 No Backups Found\\n\\nYou haven\\'t created any backups yet.\\n\\n💡 CREATE YOUR FIRST BACKUP:\\n• Use BACKUP_CREATE() to create a backup\\n• Use BACKUP_CREATE(\"description\") to add a description\\n\\nBackups help protect your data and allow you to restore previous states.'\n          };\n        }\n\n        const content = `📁 Backup List (${backups.length} backups)\\n\\n📊 BACKUP STATISTICS:\\n• Total Backups: ${stats.totalBackups}\\n• Total Size: ${formatNumber(stats.totalSize / 1024, 1)} KB\\n• Oldest: ${stats.oldestBackup ? new Date(stats.oldestBackup).toLocaleDateString() : 'N/A'}\\n• Newest: ${stats.newestBackup ? new Date(stats.newestBackup).toLocaleDateString() : 'N/A'}\\n• Encrypted: ${stats.encryptedBackups}\\n• Compressed: ${stats.compressedBackups}\\n\\n📋 AVAILABLE BACKUPS:\\n${backups.slice(0, 10).map((backup, index) => {\n          const date = new Date(backup.timestamp).toLocaleString();\n          const size = formatNumber(backup.size / 1024, 1);\n          const features = [];\n          if (backup.compressed) features.push('📦 Compressed');\n          if (backup.encrypted) features.push('🔒 Encrypted');\n\n          return `${index + 1}. ${backup.id}\\n   📅 ${date}\\n   📏 ${size} KB\\n   📝 ${backup.description || 'No description'}\\n   ${features.join(' ')}`;\n        }).join('\\n\\n')}\\n\\n🔧 BACKUP COMMANDS:\\n• BACKUP_RESTORE(id) - Restore from backup\\n• BACKUP_EXPORT(id) - Export backup to file\\n• BACKUP_DELETE(id) - Delete backup\\n• BACKUP_CREATE() - Create new backup\\n\\n💡 TIP: Use the backup ID (not the number) for restore operations.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_list',\n            backups,\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to list backups: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  BACKUP_RESTORE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const [backupId, overwrite = 'false'] = _parsedCommand.parameters;\n\n      if (!backupId) {\n        return {\n          type: 'error',\n          content: 'BACKUP_RESTORE requires a backup ID. Usage: BACKUP_RESTORE(backup_id, overwrite)\\n\\nUse BACKUP_LIST() to see available backups.'\n        };\n      }\n\n      try {\n        const shouldOverwrite = overwrite.toLowerCase() === 'true';\n\n        const result = await backupService.restoreBackup(backupId, {\n          overwrite: shouldOverwrite,\n          createBackupBeforeRestore: true\n        });\n\n        const content = `🔄 Backup Restored Successfully\\n\\n📋 RESTORE DETAILS:\\n• Backup ID: ${result.backupId}\\n• Backup Date: ${new Date(result.backupTimestamp).toLocaleString()}\\n• Restore Date: ${new Date(result.restoreTimestamp).toLocaleString()}\\n• Overwrite Mode: ${shouldOverwrite ? 'Enabled' : 'Disabled'}\\n\\n📊 RESTORE RESULTS:\\n• Items Restored: ${result.results.restored}\\n• Items Skipped: ${result.results.skipped}\\n• Errors: ${result.results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(result.results.details).map(([item, status]) =>\n          `• ${item}: ${status}`\n        ).join('\\n')}\\n\\n⚠️ IMPORTANT:\\n• A backup was created before restore\\n• Refresh the page to see all changes\\n• Some settings may require restart to take effect\\n\\n✅ Your data has been restored from the selected backup.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'backup_restore',\n            result\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Backup restore failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  },\n\n  STORAGE_STATS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const stats = await persistenceManager.getStorageStats();\n\n        if (!stats) {\n          return {\n            type: 'error',\n            content: 'Unable to retrieve storage statistics. Persistence layer may not be initialized.'\n          };\n        }\n\n        const totalUsedMB = stats.total.used / (1024 * 1024);\n        const totalAvailableMB = stats.total.available / (1024 * 1024);\n        const quotaMB = stats.total.quota / (1024 * 1024);\n\n        const content = `💾 Storage Statistics\\n\\n📊 OVERALL USAGE:\\n• Total Used: ${formatNumber(totalUsedMB, 2)} MB\\n• Total Available: ${formatNumber(totalAvailableMB, 2)} MB\\n• Storage Quota: ${formatNumber(quotaMB, 2)} MB\\n• Usage Percentage: ${formatPercentage(stats.total.usagePercentage / 100)}\\n\\n📱 LOCAL STORAGE:\\n• Used: ${formatNumber(stats.localStorage.used / 1024, 1)} KB\\n• Items: ${stats.localStorage.keys}\\n• Usage: ${formatPercentage(stats.localStorage.usagePercentage / 100)}\\n• Status: ${stats.localStorage.available ? '✅ Available' : '❌ Unavailable'}\\n\\n🗄️ INDEXED DB:\\n• Used: ${formatNumber(stats.indexedDB.used / 1024, 1)} KB\\n• Records: ${stats.indexedDB.total.records}\\n• Stores: ${Object.keys(stats.indexedDB.stores).length}\\n• Status: ${stats.indexedDB.available ? '✅ Available' : '❌ Unavailable'}\\n\\n📋 STORE BREAKDOWN:\\n${Object.entries(stats.indexedDB.stores).map(([store, data]) =>\n          `• ${store}: ${data.records} records (${formatNumber(data.size / 1024, 1)} KB)`\n        ).join('\\n')}\\n\\n⚠️ STORAGE HEALTH:\\n${stats.total.usagePercentage > 90 ? '🔴 Critical: Storage almost full' : stats.total.usagePercentage > 75 ? '🟡 Warning: High storage usage' : '🟢 Good: Storage usage is healthy'}\\n\\n💡 OPTIMIZATION TIPS:\\n${stats.total.usagePercentage > 75 ? '• Consider clearing old cached data\\n• Delete unnecessary backups\\n• Use PRIVACY_CLEANUP() to remove expired data\\n' : ''}• Regular backups help manage storage\\n• Use compression for large datasets\\n• Monitor usage with this command\\n\\n🔧 MANAGEMENT COMMANDS:\\n• PRIVACY_CLEANUP() - Clean expired data\\n• BACKUP_LIST() - Manage backups\\n• cache clear - Clear cached data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'storage_stats',\n            stats\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get storage statistics: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_CLEANUP: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const results = await privacyService.cleanupExpiredData();\n\n        const content = `🧹 Privacy Cleanup Complete\\n\\n📊 CLEANUP RESULTS:\\n• Items Cleaned: ${results.cleaned}\\n• Errors: ${results.errors}\\n\\n📋 DETAILED RESULTS:\\n${Object.entries(results.details).map(([dataType, result]) =>\n          `• ${dataType}: ${typeof result === 'number' ? `${result} items cleaned` : result}`\n        ).join('\\n')}\\n\\n🔒 PRIVACY COMPLIANCE:\\n• Expired data removed according to retention policies\\n• User privacy preferences respected\\n• Data minimization principles applied\\n\\n⚙️ CURRENT RETENTION POLICIES:\\n${Object.entries(privacyService.getRetentionPolicies()).map(([type, days]) =>\n          `• ${type}: ${days} days`\n        ).join('\\n')}\\n\\n💡 PRIVACY COMMANDS:\\n• PRIVACY_SETTINGS() - View/update privacy settings\\n• PRIVACY_EXPORT() - Export your data (GDPR)\\n• PRIVACY_DELETE() - Delete all data (Right to be forgotten)\\n\\n✅ Your data has been cleaned according to privacy policies.`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'privacy_cleanup',\n            results\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Privacy cleanup failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVACY_SETTINGS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const [setting, value] = _parsedCommand.parameters;\n\n      try {\n        if (!setting) {\n          // Show current settings\n          const settings = privacyService.getPrivacySettings();\n          const policies = privacyService.getRetentionPolicies();\n\n          const content = `🔒 Privacy Settings\\n\\n⚙️ CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) =>\n            `• ${key}: ${val ? '✅ Enabled' : '❌ Disabled'}`\n          ).join('\\n')}\\n\\n📅 RETENTION POLICIES:\\n${Object.entries(policies).map(([type, days]) =>\n            `• ${type}: ${days} days`\n          ).join('\\n')}\\n\\n🛡️ PRIVACY CONTROLS:\\n• dataRetention: Keep historical data\\n• analytics: Allow usage analytics\\n• crashReporting: Send crash reports\\n• dataSharing: Share data with partners\\n• cookieConsent: Accept cookies\\n• trackingConsent: Allow tracking\\n\\n💡 USAGE:\\n• PRIVACY_SETTINGS() - Show all settings\\n• PRIVACY_SETTINGS(\"setting\", \"true/false\") - Update setting\\n• PRIVACY_CLEANUP() - Clean expired data\\n\\nExample: PRIVACY_SETTINGS(\"analytics\", \"false\")`;\n\n          return {\n            type: 'success',\n            content,\n            data: {\n              analysis: 'privacy_settings_view',\n              settings,\n              policies\n            }\n          };\n        }\n\n        if (value === undefined) {\n          const currentValue = privacyService.getPrivacySettings()[setting];\n          return {\n            type: 'info',\n            content: `🔒 Privacy Setting: ${setting}\\nCurrent Value: ${currentValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nTo update: PRIVACY_SETTINGS(\"${setting}\", \"true/false\")`\n          };\n        }\n\n        // Update setting\n        const boolValue = value.toLowerCase() === 'true';\n        await privacyService.updatePrivacySettings({ [setting]: boolValue });\n\n        return {\n          type: 'success',\n          content: `✅ Privacy Setting Updated\\n\\n• Setting: ${setting}\\n• New Value: ${boolValue ? '✅ Enabled' : '❌ Disabled'}\\n\\nSetting has been saved and will take effect immediately.`,\n          data: {\n            analysis: 'privacy_settings_update',\n            setting,\n            value: boolValue\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to manage privacy settings: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  },\n\n  SYNC_STATUS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const status = syncService.getSyncStatus();\n\n        const content = `🔄 Sync Status\\n\\n📊 SYNC OVERVIEW:\\n• Last Sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}\\n• Sync In Progress: ${status.syncInProgress ? '🟡 Yes' : '🟢 No'}\\n• Queue Size: ${status.queueSize} operations\\n• Online Status: ${status.isOnline ? '🟢 Online' : '🔴 Offline'}\\n• Endpoint Configured: ${status.hasEndpoint ? '✅ Yes' : '❌ No'}\\n• Strategy: ${status.strategy}\\n\\n🔧 SYNC CONFIGURATION:\\n${!status.hasEndpoint ? '⚠️ No sync endpoint configured - sync is disabled\\n' : ''}${status.queueSize > 0 ? `📋 ${status.queueSize} operations waiting to sync\\n` : ''}${!status.isOnline ? '📡 Device is offline - sync will resume when online\\n' : ''}\\n\\n💡 SYNC COMMANDS:\\n• SYNC_NOW() - Force immediate sync (when available)\\n• SYNC_QUEUE() - View pending operations\\n• BACKUP_CREATE() - Create local backup\\n\\n${!status.hasEndpoint ? '🚀 FUTURE FEATURE:\\nCloud sync will be available in a future update.\\nFor now, use BACKUP_CREATE() and BACKUP_EXPORT() for data portability.' : '✅ Sync is configured and ready.'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'sync_status',\n            status\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Failed to get sync status: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PERSISTENCE_TEST: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const testResults = await persistenceTestSuite.runAllTests();\n\n        const content = `🧪 Persistence Layer Test Results\\n\\n📊 TEST SUMMARY:\\n• Total Tests: ${testResults.total}\\n• Passed: ${testResults.passed} ✅\\n• Failed: ${testResults.total - testResults.passed} ❌\\n• Success Rate: ${formatPercentage(testResults.passed / testResults.total)}\\n• Overall Status: ${testResults.success ? '✅ PASS' : '❌ FAIL'}\\n\\n📋 DETAILED RESULTS:\\n${testResults.results.map((result, index) => {\n          const status = result.passed ? '✅' : result.skipped ? '⏭️' : '❌';\n          const details = result.error ? ` (${result.error})` : result.reason ? ` (${result.reason})` : '';\n          return `${index + 1}. ${status} ${result.testName}${details}`;\n        }).join('\\n')}\\n\\n🔧 COMPONENT STATUS:\\n• PersistenceManager: ${testResults.results.find(r => r.testName.includes('Persistence Manager'))?.passed ? '✅ Working' : '❌ Issues'}\\n• BackupService: ${testResults.results.find(r => r.testName.includes('Backup'))?.passed ? '✅ Working' : '❌ Issues'}\\n• PrivacyService: ${testResults.results.find(r => r.testName.includes('Privacy'))?.passed ? '✅ Working' : '❌ Issues'}\\n• SyncService: ${testResults.results.find(r => r.testName.includes('Sync'))?.passed ? '✅ Working' : '❌ Issues'}\\n\\n💡 RECOMMENDATIONS:\\n${testResults.success ? '• All tests passed - persistence layer is working correctly\\n• Regular testing recommended to ensure continued functionality' : '• Some tests failed - check browser console for detailed error messages\\n• Consider running individual component tests\\n• Verify browser storage permissions and quotas'}\\n\\n🔍 DEBUGGING:\\n• Check browser console for detailed test output\\n• Use browser DevTools to inspect localStorage and IndexedDB\\n• Run \"STORAGE_STATS()\" to check storage usage\\n\\n${testResults.success ? '✅ Persistence layer is fully functional and ready for production use!' : '⚠️ Issues detected - please review failed tests and resolve before production use.'}`;\n\n        return {\n          type: testResults.success ? 'success' : 'warning',\n          content,\n          data: {\n            analysis: 'persistence_test',\n            testResults\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Persistence test suite failed: ${error.message}\\n\\nCheck browser console for detailed error information.`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  }\n};\n","/**\n * Private Analysis Commands\n * CLI integration for the Private Analysis financial modeling features\n */\n\nimport defaultFinancialData from '../../data/defaultFinancialData.js';\nimport {\n  formatCurrency,\n  formatPercentage,\n  formatNumber\n} from '../../utils/dataTransformation.js';\n\n// Helper functions for risk and quality analysis\nconst calculateVolatility = (values) => {\n  if (values.length < 2) return 0;\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / (values.length - 1);\n  return Math.sqrt(variance) / mean * 100;\n};\n\nconst assessGrowthSustainability = (revenues) => {\n  const growthRates = [];\n  for (let i = 1; i < revenues.length; i++) {\n    if (revenues[i - 1] > 0) growthRates.push((revenues[i] / revenues[i - 1] - 1) * 100);\n  }\n  if (growthRates.length === 0) return '📊 Insufficient Data';\n  const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n  return avgGrowth > 10 ? '✅ Strong' : avgGrowth > 0 ? '📈 Moderate' : '📉 Weak';\n};\n\nconst assessCashFlowTrend = (cashFlows) => {\n  if (cashFlows.length < 2) return 'Insufficient data';\n  const fcfs = cashFlows.map(cf => cf.freeCashFlow);\n  const isIncreasing = fcfs.every((fcf, i) => i === 0 || fcf >= fcfs[i - 1]);\n  const isDecreasing = fcfs.every((fcf, i) => i === 0 || fcf <= fcfs[i - 1]);\n  return isIncreasing ? '📈 Improving' : isDecreasing ? '📉 Declining' : '📊 Variable';\n};\n\nconst calculateOperatingLeverage = (cashFlows) => {\n  if (cashFlows.length < 2) return 'N/A';\n  const revenueGrowth = ((cashFlows[cashFlows.length - 1].revenue / cashFlows[0].revenue) - 1) * 100;\n  const fcfGrowth = ((cashFlows[cashFlows.length - 1].freeCashFlow / cashFlows[0].freeCashFlow) - 1) * 100;\n  const leverage = revenueGrowth !== 0 ? (fcfGrowth / revenueGrowth) : 0;\n  return leverage > 1 ? '🟢 High' : leverage > 0.5 ? '🟡 Moderate' : '🔴 Low';\n};\n\n// Quality assessment helper functions\nconst calculateGrowthConsistency = (revenues) => {\n  if (revenues.length < 3) return 50;\n  const growthRates = [];\n  for (let i = 1; i < revenues.length; i++) {\n    if (revenues[i - 1] > 0) growthRates.push((revenues[i] / revenues[i - 1] - 1) * 100);\n  }\n  const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n  const volatility = Math.sqrt(growthRates.reduce((sum, rate) => sum + Math.pow(rate - avgGrowth, 2), 0) / (growthRates.length - 1));\n  return Math.max(0, Math.min(100, 80 - volatility * 2));\n};\n\nconst estimateRecurringRevenue = (statements, latestIndex) => {\n  const injectables = statements.injectables?.[latestIndex] || 0;\n  const wellness = statements.wellness?.[latestIndex] || 0;\n  const totalRevenue = statements.totalRevenue?.[latestIndex] || 0;\n  const recurringPortion = totalRevenue > 0 ? (injectables + wellness) / totalRevenue : 0;\n  return Math.min(100, recurringPortion * 100 + 20);\n};\n\nconst calculateMarginStability = (margins) => {\n  if (margins.length < 2) return 50;\n  const avgMargin = margins.reduce((sum, margin) => sum + margin, 0) / margins.length;\n  const volatility = Math.sqrt(margins.reduce((sum, margin) => sum + Math.pow(margin - avgMargin, 2), 0) / (margins.length - 1));\n  return Math.max(0, Math.min(100, 90 - volatility * 5));\n};\n\nconst calculateProfitabilityTrend = (margins) => {\n  if (margins.length < 2) return 50;\n  const trend = (margins[margins.length - 1] - margins[0]) / margins.length;\n  return Math.max(0, Math.min(100, 60 + trend * 10));\n};\n\nconst assessMarketPosition = (_data) => {\n  return 75; // Moderate market position\n};\n\nconst assessScalability = (revenues) => {\n  const growthRate = revenues.length > 1 ? (revenues[revenues.length - 1] / revenues[0] - 1) * 100 / (revenues.length - 1) : 0;\n  return Math.min(100, Math.max(0, 50 + growthRate * 2));\n};\n\nconst identifyStrengths = (metrics) => {\n  return metrics.filter(m => m.score >= 80).map(m => `• ${m.metric}: Strong performance`).join('\\n') || '• Need to improve overall performance';\n};\n\nconst identifyWeaknesses = (metrics) => {\n  return metrics.filter(m => m.score < 70).map(m => `• ${m.metric}: Below target performance`).join('\\n') || '• No major weaknesses identified';\n};\n\n// Workflow helper functions\nconst estimateStepTime = (step) => {\n  const timeMap = {\n    'Data Quality': '2-3 minutes',\n    'Company Overview': '3-5 minutes',\n    'Financial Analysis': '5-8 minutes',\n    'Valuation Models': '8-12 minutes',\n    'Risk Assessment': '5-7 minutes',\n    'Benchmarking': '4-6 minutes',\n    'Advanced Models': '10-15 minutes',\n    'Final Report': '2-3 minutes'\n  };\n  return timeMap[step] || '5 minutes';\n};\n\nconst assessDataCompleteness = (data) => {\n  const totalFields = 50;\n  const presentFields = Object.keys(data.statements.incomeStatement).length +\n                      Object.keys(data.statements.balanceSheet).length +\n                      Object.keys(data.statements.cashFlow).length;\n  return Math.min(100, (presentFields / totalFields) * 100);\n};\n\nconst assessAnalysisDepth = (steps) => {\n  const completedSteps = steps.filter(s => s.completed).length;\n  if (completedSteps >= 6) return 'Comprehensive';\n  if (completedSteps >= 4) return 'Detailed';\n  if (completedSteps >= 2) return 'Basic';\n  return 'Initial';\n};\n\n// Dashboard helper functions\nconst calculatePerformanceScore = (metrics) => {\n  let score = 0;\n  score += Math.min(25, Math.max(0, 15 + metrics.revenueGrowth));\n  score += Math.min(25, metrics.grossMargin * 0.5);\n  score += Math.min(30, metrics.operatingMargin * 2);\n  score += Math.min(20, metrics.ebitdaMargin * 1.2);\n  return Math.round(score);\n};\n\nconst getGrowthIcon = (growth) => growth >= 15 ? '🚀' : growth >= 5 ? '📈' : growth >= 0 ? '➡️' : '📉';\n\nconst getMarginIcon = (margin, type) => {\n  const thresholds = {\n    gross: { excellent: 70, good: 50, fair: 30 },\n    operating: { excellent: 20, good: 10, fair: 5 },\n    ebitda: { excellent: 25, good: 15, fair: 8 }\n  };\n  const t = thresholds[type];\n  return margin >= t.excellent ? '🟢' : margin >= t.good ? '🟡' : margin >= t.fair ? '🟠' : '🔴';\n};\n\nconst getPerformanceRating = (score) => {\n  if (score >= 80) return '🏆 Excellent';\n  if (score >= 70) return '🥇 Very Good';\n  if (score >= 60) return '🥈 Good';\n  if (score >= 50) return '🥉 Fair';\n  return '📊 Needs Improvement';\n};\n\nexport const privateAnalysisCommands = {\n  PRIVATE_DCF: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const loadingMessage = '🔄 Running DCF analysis on private company data...\\n• Loading financial statements\\n• Calculating free cash flows\\n• Computing terminal value\\n• Analyzing projections...\\n✅ Using private financial data';\n\n        // Loading message would be shown by context if available\n        console.log('DCF Analysis:', loadingMessage);\n\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate key metrics from the financial data\n        const revenues = [];\n        const operatingIncomes = [];\n        const margins = [];\n\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n\n          revenues.push(revenue);\n          operatingIncomes.push(operatingIncome);\n          margins.push(revenue ? (operatingIncome / revenue) * 100 : 0);\n        });\n\n        // DCF assumptions (these could be parameterized)\n        const assumptions = {\n          discountRate: 12.0,\n          terminalGrowthRate: 2.5,\n          projectionYears: 5,\n          taxRate: 25.0\n        };\n\n        // Simple DCF calculation\n        const latestRevenue = revenues[revenues.length - 1];\n        // const latestOperatingIncome = operatingIncomes[operatingIncomes.length - 1];\n        const revenueGrowthRate = revenues.length > 1 ?\n          ((revenues[revenues.length - 1] / revenues[revenues.length - 2]) - 1) * 100 : 15;\n\n        // Project future cash flows\n        const projections = [];\n        let projectedRevenue = latestRevenue;\n\n        for (let i = 1; i <= assumptions.projectionYears; i++) {\n          projectedRevenue *= (1 + revenueGrowthRate / 100);\n          const projectedOperatingIncome = projectedRevenue * (margins[margins.length - 1] / 100);\n          const projectedFCF = projectedOperatingIncome * (1 - assumptions.taxRate / 100);\n\n          projections.push({\n            year: i,\n            revenue: projectedRevenue,\n            operatingIncome: projectedOperatingIncome,\n            fcf: projectedFCF,\n            presentValue: projectedFCF / Math.pow(1 + assumptions.discountRate / 100, i)\n          });\n        }\n\n        const totalPresentValue = projections.reduce((sum, proj) => sum + proj.presentValue, 0);\n        const terminalValue = (projections[projections.length - 1].fcf * (1 + assumptions.terminalGrowthRate / 100))\n          / ((assumptions.discountRate - assumptions.terminalGrowthRate) / 100);\n        const terminalPresentValue = terminalValue / Math.pow(1 + assumptions.discountRate / 100, assumptions.projectionYears);\n        const enterpriseValue = totalPresentValue + terminalPresentValue;\n\n        const content = `Private Company DCF Valuation Analysis\\n\\n📊 HISTORICAL PERFORMANCE:\\n${periods.map((period, i) => `• ${period}: Revenue ${formatCurrency(revenues[i], 'USD', true)}, Operating Income ${formatCurrency(operatingIncomes[i], 'USD', true)} (${formatPercentage(margins[i] / 100)})`).join('\\n')}\\n\\n💰 DCF VALUATION RESULTS:\\n• Enterprise Value: ${formatCurrency(enterpriseValue, 'USD', true)}\\n• Terminal Value: ${formatCurrency(terminalValue, 'USD', true)} (${formatPercentage(terminalPresentValue / enterpriseValue)})\\n• PV of Projections: ${formatCurrency(totalPresentValue, 'USD', true)} (${formatPercentage(totalPresentValue / enterpriseValue)})\\n\\n📈 KEY ASSUMPTIONS:\\n• Discount Rate: ${formatPercentage(assumptions.discountRate / 100)}\\n• Terminal Growth: ${formatPercentage(assumptions.terminalGrowthRate / 100)}\\n• Revenue Growth: ${formatPercentage(revenueGrowthRate / 100)}\\n• Tax Rate: ${formatPercentage(assumptions.taxRate / 100)}\\n\\n🎯 5-YEAR PROJECTIONS:\\n${projections.map(proj => `Year ${proj.year}: Revenue ${formatCurrency(proj.revenue, 'USD', true)}, FCF ${formatCurrency(proj.fcf, 'USD', true)}, PV ${formatCurrency(proj.presentValue, 'USD', true)}`).join('\\n')}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dcf',\n            enterpriseValue,\n            terminalValue,\n            projections,\n            assumptions\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private DCF analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  },\n\n  PRIVATE_RATIOS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Calculate financial ratios\n        const ratios = [];\n        periods.forEach((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const totalCOGS = statements.totalCostOfGoodsSold?.[index] || 0;\n          const grossProfit = statements.grossProfit?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const netIncome = statements.netIncome?.[index] || 0;\n\n          ratios.push({\n            period,\n            grossMargin: revenue ? (grossProfit / revenue) * 100 : 0,\n            operatingMargin: revenue ? (operatingIncome / revenue) * 100 : 0,\n            netMargin: revenue ? (netIncome / revenue) * 100 : 0,\n            cogsPercentage: revenue ? (totalCOGS / revenue) * 100 : 0\n          });\n        });\n\n        // Calculate growth rates\n        const growthRates = [];\n        for (let i = 1; i < periods.length; i++) {\n          const currentRevenue = statements.totalRevenue?.[i] || 0;\n          const previousRevenue = statements.totalRevenue?.[i - 1] || 0;\n          const currentOperating = statements.operatingIncome?.[i] || 0;\n          const previousOperating = statements.operatingIncome?.[i - 1] || 0;\n\n          growthRates.push({\n            period: periods[i],\n            revenueGrowth: previousRevenue ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0,\n            operatingGrowth: previousOperating && Math.abs(previousOperating) > 0.01 ?\n              ((currentOperating - previousOperating) / Math.abs(previousOperating)) * 100 : 0\n          });\n        }\n\n        const content = `Private Company Financial Ratios Analysis\\n\\n📊 PROFITABILITY RATIOS:\\n${ratios.map(ratio => `• ${ratio.period}:\\n  - Gross Margin: ${formatPercentage(ratio.grossMargin / 100)}\\n  - Operating Margin: ${formatPercentage(ratio.operatingMargin / 100)}\\n  - Net Margin: ${formatPercentage(ratio.netMargin / 100)}\\n  - COGS %: ${formatPercentage(ratio.cogsPercentage / 100)}`).join('\\n\\n')}\\n\\n📈 GROWTH ANALYSIS:\\n${growthRates.map(growth => `• ${growth.period}:\\n  - Revenue Growth: ${formatPercentage(growth.revenueGrowth / 100)}\\n  - Operating Growth: ${formatPercentage(growth.operatingGrowth / 100)}`).join('\\n\\n')}\\n\\n🎯 KEY INSIGHTS:\\n• Latest Gross Margin: ${formatPercentage(ratios[ratios.length - 1].grossMargin / 100)}\\n• Latest Operating Margin: ${formatPercentage(ratios[ratios.length - 1].operatingMargin / 100)}\\n• Average Revenue Growth: ${formatPercentage(growthRates.reduce((sum, g) => sum + g.revenueGrowth, 0) / growthRates.length / 100)}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_ratios',\n            ratios,\n            growthRates\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private ratios analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_SUMMARY: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const periods = data.periods;\n        const statements = data.statements.incomeStatement;\n\n        // Get latest period data\n        const latestIndex = statements.length - 1;\n        const latest = {\n          period: periods[latestIndex],\n          revenue: statements.totalRevenue?.[latestIndex] || 0,\n          grossProfit: statements.grossProfit?.[latestIndex] || 0,\n          operatingIncome: statements.operatingIncome?.[latestIndex] || 0,\n          netIncome: statements.netIncome?.[latestIndex] || 0,\n          totalCOGS: statements.totalCostOfGoodsSold?.[latestIndex] || 0\n        };\n\n        // Calculate key metrics\n        const grossMargin = latest.revenue ? (latest.grossProfit / latest.revenue) * 100 : 0;\n        const operatingMargin = latest.revenue ? (latest.operatingIncome / latest.revenue) * 100 : 0;\n        const netMargin = latest.revenue ? (latest.netIncome / latest.revenue) * 100 : 0;\n\n        // Revenue breakdown (top revenue streams)\n        const revenueBreakdown = [\n          { name: 'Injectables', value: statements.injectables?.[latestIndex] || 0 },\n          { name: 'Surgery', value: statements.surgery?.[latestIndex] || 0 },\n          { name: 'Wellness', value: statements.wellness?.[latestIndex] || 0 },\n          { name: 'Weightloss', value: statements.weightloss?.[latestIndex] || 0 },\n          { name: 'Retail Sales', value: statements.retailSales?.[latestIndex] || 0 },\n          { name: 'Energy Devices', value: statements.energyDevices?.[latestIndex] || 0 }\n        ].sort((a, b) => b.value - a.value);\n\n        const content = `Private Company Financial Summary (${latest.period})\\n\\n🏢 COMPANY OVERVIEW:\\n• Period: ${latest.period}\\n• Total Revenue: ${formatCurrency(latest.revenue, 'USD', true)}\\n• Operating Status: ${latest.operatingIncome >= 0 ? '✅ Profitable' : '⚠️ Operating Loss'}\\n\\n💰 FINANCIAL PERFORMANCE:\\n• Gross Profit: ${formatCurrency(latest.grossProfit, 'USD', true)} (${formatPercentage(grossMargin / 100)})\\n• Operating Income: ${formatCurrency(latest.operatingIncome, 'USD', true)} (${formatPercentage(operatingMargin / 100)})\\n• Net Income: ${formatCurrency(latest.netIncome, 'USD', true)} (${formatPercentage(netMargin / 100)})\\n• Cost of Goods Sold: ${formatCurrency(latest.totalCOGS, 'USD', true)}\\n\\n📊 REVENUE BREAKDOWN:\\n${revenueBreakdown.map((item, i) => `${i + 1}. ${item.name}: ${formatCurrency(item.value, 'USD', true)} (${formatPercentage(item.value / latest.revenue)})`).join('\\n')}\\n\\n📈 HISTORICAL TRENDS:\\n${periods.map((period, i) => `• ${period}: ${formatCurrency(statements.totalRevenue?.[i] || 0, 'USD', true)}`).join('\\n')}\\n\\n🎯 KEY METRICS:\\n• Revenue Growth (YoY): ${periods.length > 1 ? formatPercentage(((statements.totalRevenue?.[latestIndex] || 0) / (statements.totalRevenue?.[latestIndex - 1] || 1) - 1)) : 'N/A'}\\n• Gross Margin Trend: ${grossMargin >= 70 ? '🟢 Strong' : grossMargin >= 50 ? '🟡 Moderate' : '🔴 Low'}\\n• Operating Efficiency: ${operatingMargin >= 15 ? '🟢 Excellent' : operatingMargin >= 5 ? '🟡 Fair' : operatingMargin >= 0 ? '🟠 Break-even' : '🔴 Loss'}\\n\\n✅ Analysis based on private financial data`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_summary',\n            latest,\n            revenueBreakdown,\n            margins: { grossMargin, operatingMargin, netMargin }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Private summary analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_LOAD: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n\n        const content = `Private Financial Data Loaded Successfully\\n\\n📁 DATA OVERVIEW:\\n• Periods: ${data.periods.join(', ')}\\n• Income Statement: ✅ Loaded\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅ Available' : '⚠️ Empty'}\\n\\n📊 AVAILABLE DATA:\\n• Revenue Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Revenue') || ['energyDevices', 'injectables', 'wellness', 'weightloss', 'retailSales', 'surgery'].includes(key)).length}\\n• Expense Categories: ${Object.keys(data.statements.incomeStatement).filter(key => key.includes('Cogs') || key.includes('Expense') || ['marketing', 'automobile', 'rent', 'insurance'].includes(key)).length}\\n• Financial Metrics: ${Object.keys(data.statements.incomeStatement).filter(key => ['grossProfit', 'operatingIncome', 'netIncome'].includes(key)).length}\\n\\n💡 AVAILABLE COMMANDS:\\n• PRIVATE_DCF() - Run DCF valuation\\n• PRIVATE_RATIOS() - Calculate financial ratios\\n• PRIVATE_SUMMARY() - Get company overview\\n• PRIVATE_SCENARIO() - Run scenario analysis\\n\\n✅ Ready for private company analysis`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_load',\n            dataStructure: {\n              periods: data.periods.length,\n              incomeStatementItems: Object.keys(data.statements.incomeStatement).length,\n              balanceSheetItems: Object.keys(data.statements.balanceSheet).length,\n              cashFlowItems: Object.keys(data.statements.cashFlow).length\n            }\n          }\n        };\n\n      } catch (error) {\n        return { type: 'error', content: `Failed to load private data: ${error.message}` };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  PRIVATE_MONTE_CARLO: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestPeriod = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestPeriod] || 0;\n        const baseOperatingIncome = statements.operatingIncome?.[latestPeriod] || 0;\n\n        // Run Monte Carlo simulation\n        const simulations = 10000;\n        const results = [];\n\n        for (let i = 0; i < simulations; i++) {\n          const revenueGrowth = (Math.random() * 0.3 + 0.85);\n          const marginChange = (Math.random() * 0.2 + 0.9);\n          const projectedRevenue = baseRevenue * revenueGrowth;\n          const projectedOperatingIncome = baseOperatingIncome * marginChange;\n          const valuation = projectedOperatingIncome * 8;\n          results.push({ valuation, revenue: projectedRevenue });\n        }\n\n        const valuations = results.map(r => r.valuation).sort((a, b) => a - b);\n        const p50 = valuations[Math.floor(valuations.length * 0.5)];\n        const p25 = valuations[Math.floor(valuations.length * 0.25)];\n        const p75 = valuations[Math.floor(valuations.length * 0.75)];\n\n        const content = `Monte Carlo Simulation Results (${simulations.toLocaleString()} iterations)\\n\\n📊 VALUATION DISTRIBUTION:\\n• P25: ${formatCurrency(p25)}\\n• P50 (Median): ${formatCurrency(p50)}\\n• P75: ${formatCurrency(p75)}\\n• Range: ${formatCurrency(valuations[0])} - ${formatCurrency(valuations[valuations.length - 1])}\\n\\n🎯 RISK METRICS:\\n• Downside Risk: ${formatPercentage(0.25)}\\n• Upside Potential: ${formatPercentage(0.25)}\\n• Expected Value: ${formatCurrency(p50)}`;\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Monte Carlo simulation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['iterations'] }\n  },\n\n  PRIVATE_SCENARIO: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestPeriod = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestPeriod] || 0;\n        const baseOperatingIncome = statements.operatingIncome?.[latestPeriod] || 0;\n\n        const scenarios = {\n          bear: { growth: -0.15, margin: -0.20 },\n          base: { growth: 0.10, margin: 0.00 },\n          bull: { growth: 0.35, margin: 0.15 }\n        };\n\n        let content = `Scenario Analysis\\n\\n📊 BASE METRICS:\\n• Revenue: ${formatCurrency(baseRevenue)}\\n• Operating Income: ${formatCurrency(baseOperatingIncome)}\\n`;\n\n        Object.entries(scenarios).forEach(([name, scenario]) => {\n          const projectedIncome = baseOperatingIncome * (1 + scenario.margin);\n          const valuation = projectedIncome * 8;\n          content += `\\n${name.toUpperCase()} CASE:\\n• Revenue: ${formatCurrency(baseRevenue * (1 + scenario.growth))}\\n• Valuation: ${formatCurrency(valuation)}`;\n        });\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Scenario analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['scenarios'] }\n  },\n\n  PRIVATE_GROWTH: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        const revenues = periods.map((_, index) => statements.totalRevenue?.[index] || 0);\n\n        const growthRates = [];\n        for (let i = 1; i < revenues.length; i++) {\n          if (revenues[i - 1] > 0) {\n            growthRates.push(((revenues[i] / revenues[i - 1]) - 1) * 100);\n          }\n        }\n\n        const avgGrowth = growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length;\n        const cagr = revenues.length > 1 && revenues[0] > 0 ?\n          (Math.pow(revenues[revenues.length - 1] / revenues[0], 1 / (revenues.length - 1)) - 1) * 100 : 0;\n\n        const content = `Growth Analysis\\n\\n📈 GROWTH METRICS:\\n• Revenue CAGR: ${formatPercentage(cagr / 100)}\\n• Average YoY Growth: ${formatPercentage(avgGrowth / 100)}\\n• Latest Revenue: ${formatCurrency(revenues[revenues.length - 1])}\\n\\n🎯 GROWTH ASSESSMENT:\\n• Trajectory: ${avgGrowth > 15 ? '🚀 High Growth' : avgGrowth > 5 ? '📈 Moderate Growth' : '📉 Slow Growth'}\\n• Consistency: ${growthRates.every(rate => rate > 0) ? '✅ Consistent' : '⚠️ Variable'}`;\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Growth analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_RISK: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n        const revenues = periods.map((_, index) => statements.totalRevenue?.[index] || 0);\n        const margins = revenues.map((rev, index) => {\n          const opIncome = statements.operatingIncome?.[index] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n\n        const revenueVolatility = revenues.length > 1 ? calculateVolatility(revenues) : 0;\n        const marginVolatility = margins.length > 1 ? calculateVolatility(margins) : 0;\n\n        const riskScore = (revenueVolatility > 20 ? 3 : revenueVolatility > 10 ? 2 : 1) +\n                         (marginVolatility > 5 ? 2 : marginVolatility > 2 ? 1 : 0);\n\n        const riskLevel = riskScore >= 4 ? 'HIGH' : riskScore >= 2 ? 'MEDIUM' : 'LOW';\n\n        const content = `Risk Assessment\\n\\n⚖️ RISK METRICS:\\n• Revenue Volatility: ${revenueVolatility.toFixed(1)}%\\n• Margin Volatility: ${marginVolatility.toFixed(1)}%\\n• Overall Risk Level: ${riskLevel}\\n\\n🎯 RISK FACTORS:\\n• Revenue Concentration: ${revenues.length < 3 ? '⚠️ Limited History' : '✅ Adequate Data'}\\n• Margin Stability: ${marginVolatility < 2 ? '✅ Stable' : '⚠️ Variable'}\\n• Growth Sustainability: ${assessGrowthSustainability(revenues)}`;\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Risk analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_VALIDATE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const _statements = data.financialStatements || [];\n        const _latestIndex = _statements.length - 1;\n\n        const validationResults = [];\n\n        // Define periods for data validation\n        const periods = ['2020', '2021', '2022', '2023', '2024'];\n\n        // Check data completeness\n        const incomeStatementItems = Object.keys(data.statements.incomeStatement).length;\n        // const balanceSheetItems = Object.keys(data.statements.balanceSheet).length;\n        // const cashFlowItems = Object.keys(data.statements.cashFlow).length;\n\n        validationResults.push({\n          test: 'Data Completeness',\n          result: incomeStatementItems > 5 ? 'PASS' : 'FAIL',\n          details: `${incomeStatementItems} income statement items`\n        });\n\n        // Check for negative revenues\n        const revenues = periods.map((_, index) => data.statements.incomeStatement.totalRevenue?.[index] || 0);\n        const hasNegativeRevenue = revenues.some(rev => rev < 0);\n\n        validationResults.push({\n          test: 'Revenue Validation',\n          result: !hasNegativeRevenue ? 'PASS' : 'FAIL',\n          details: hasNegativeRevenue ? 'Negative revenue detected' : 'All revenues positive'\n        });\n\n        // Check margin consistency\n        const margins = revenues.map((rev, index) => {\n          const opIncome = data.statements.incomeStatement.operatingIncome?.[index] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        const reasonableMargins = margins.every(margin => margin >= -50 && margin <= 100);\n\n        validationResults.push({\n          test: 'Margin Reasonableness',\n          result: reasonableMargins ? 'PASS' : 'FAIL',\n          details: `Margins range: ${Math.min(...margins).toFixed(1)}% to ${Math.max(...margins).toFixed(1)}%`\n        });\n\n        const passedTests = validationResults.filter(result => result.result === 'PASS').length;\n        const totalTests = validationResults.length;\n\n        let content = `Data Validation Report\\n\\n📊 VALIDATION SUMMARY:\\n• Tests Passed: ${passedTests}/${totalTests}\\n• Overall Status: ${passedTests === totalTests ? '✅ VALID' : '⚠️ ISSUES FOUND'}\\n\\n🔍 DETAILED RESULTS:\\n`;\n\n        validationResults.forEach(result => {\n          const icon = result.result === 'PASS' ? '✅' : '❌';\n          content += `${icon} ${result.test}: ${result.result}\\n   ${result.details}\\n`;\n        });\n\n        return { type: 'success', content };\n      } catch (error) {\n        return { type: 'error', content: `Data validation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_EXPORT: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_');\n\n        const exportData = {\n          timestamp,\n          company: 'Private Company Analysis',\n          periods: data.periods,\n          financials: data.statements,\n          analysis: {\n            dcf: 'Run PRIVATE_DCF() for valuation',\n            ratios: 'Run PRIVATE_RATIOS() for financial ratios',\n            scenarios: 'Run PRIVATE_SCENARIO() for scenario analysis'\n          }\n        };\n\n        const content = `Export Complete\\n\\n📁 EXPORT DETAILS:\\n• Timestamp: ${timestamp}\\n• Data Periods: ${data.periods.join(', ')}\\n• Export Format: JSON\\n• File Size: ~${JSON.stringify(exportData).length} bytes\\n\\n📊 INCLUDED DATA:\\n• Income Statement: ✅ Complete\\n• Balance Sheet: ${Object.keys(data.statements.balanceSheet).length > 0 ? '✅' : '❌'} Available\\n• Cash Flow: ${Object.keys(data.statements.cashFlow).length > 0 ? '✅' : '❌'} Available\\n\\n💡 USAGE:\\n• Use exported data for external analysis\\n• Import into other financial tools\\n• Create backup of current analysis`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            export: exportData,\n            filename: `private_analysis_${timestamp}.json`\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Export failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['format'] }\n  },\n\n  PRIVATE_BENCHMARKS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const _statements = data.statements.incomeStatement;\n        const _latestIndex = data.periods.length - 1;\n\n        // Current metrics - commented out as they're not used in this function\n        // const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        // const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        // const grossProfit = statements.grossProfit?.[latestIndex] || 0;\n\n        // Industry benchmarks from enhanced data\n        const benchmarks = data.assumptions?.industryBenchmarks || {\n          revenuePerSqFt: { min: 800, target: 1200, current: 1490.44 },\n          revenuePerProvider: { min: 300, target: 400, current: 1242.03 },\n          injectableMargin: { min: 0.75, target: 0.80, current: 0.70 },\n          ebitdaMargin: { min: 0.20, target: 0.25, current: 0.185 },\n          customerRetention: { min: 0.65, target: 0.75, current: 0.72 }\n        };\n\n        let content = 'Industry Benchmark Analysis\\n\\n📊 CURRENT vs BENCHMARKS:\\n';\n\n        Object.entries(benchmarks).forEach(([metric, values]) => {\n          const performance = values.current >= values.target ? '🟢 Above Target' :\n            values.current >= values.min ? '🟡 Meets Minimum' : '🔴 Below Standard';\n          const percentage = ((values.current / values.target) * 100).toFixed(1);\n\n          content += `• ${metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:\\n`;\n          content += `  Current: ${typeof values.current === 'number' && values.current < 1 ?\n            formatPercentage(values.current) : formatNumber(values.current)}\\n`;\n          content += `  Target: ${typeof values.target === 'number' && values.target < 1 ?\n            formatPercentage(values.target) : formatNumber(values.target)}\\n`;\n          content += `  Performance: ${performance} (${percentage}% of target)\\n\\n`;\n        });\n\n        // Competitive positioning\n        const overallScore = Object.values(benchmarks).reduce((score, benchmark) => {\n          return score + (benchmark.current >= benchmark.target ? 2 : benchmark.current >= benchmark.min ? 1 : 0);\n        }, 0);\n        const maxScore = Object.keys(benchmarks).length * 2;\n        const competitiveGrade = overallScore >= maxScore * 0.8 ? 'A' :\n          overallScore >= maxScore * 0.6 ? 'B' :\n            overallScore >= maxScore * 0.4 ? 'C' : 'D';\n\n        content += `🎯 COMPETITIVE POSITIONING:\\n• Overall Score: ${overallScore}/${maxScore} (${((overallScore / maxScore) * 100).toFixed(1)}%)\\n• Industry Grade: ${competitiveGrade}\\n• Market Position: ${competitiveGrade === 'A' ? '🏆 Industry Leader' : competitiveGrade === 'B' ? '📈 Above Average' : competitiveGrade === 'C' ? '📊 Market Average' : '📉 Below Average'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_benchmarks',\n            benchmarks,\n            competitiveScore: overallScore,\n            grade: competitiveGrade\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Benchmark analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['industry'] }\n  },\n\n  PRIVATE_CASHFLOW: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n\n        // Calculate operating cash flow proxy from available data\n        const cashFlowAnalysis = periods.map((period, index) => {\n          const revenue = statements.totalRevenue?.[index] || 0;\n          const operatingIncome = statements.operatingIncome?.[index] || 0;\n          const depreciation = statements.depreciation?.[index] || 0;\n          const workingCapitalChange = index > 0 ?\n            ((statements.totalRevenue?.[index] || 0) - (statements.totalRevenue?.[index - 1] || 0)) * 0.1 : 0; // Estimate\n\n          const operatingCashFlow = operatingIncome + depreciation - workingCapitalChange;\n          const fcf = operatingCashFlow; // Simplified - would subtract capex\n\n          return {\n            period,\n            revenue,\n            operatingIncome,\n            depreciation,\n            operatingCashFlow,\n            freeCashFlow: fcf,\n            fcfMargin: revenue > 0 ? (fcf / revenue) * 100 : 0\n          };\n        });\n\n        // Cash flow trends\n        const avgFCFMargin = cashFlowAnalysis.reduce((sum, cf) => sum + cf.fcfMargin, 0) / cashFlowAnalysis.length;\n        const latestFCF = cashFlowAnalysis[cashFlowAnalysis.length - 1];\n\n        let content = 'Cash Flow Analysis\\n\\n💰 CASH FLOW SUMMARY:\\n';\n        content += cashFlowAnalysis.map(cf =>\n          `• ${cf.period}:\\n  Operating CF: ${formatCurrency(cf.operatingCashFlow)}\\n  Free Cash Flow: ${formatCurrency(cf.freeCashFlow)}\\n  FCF Margin: ${formatPercentage(cf.fcfMargin / 100)}`\n        ).join('\\n\\n');\n\n        content += `\\n\\n📊 CASH FLOW METRICS:\\n• Latest FCF: ${formatCurrency(latestFCF.freeCashFlow)}\\n• Average FCF Margin: ${formatPercentage(avgFCFMargin / 100)}\\n• Cash Generation: ${latestFCF.freeCashFlow > 0 ? '✅ Positive' : '❌ Negative'}\\n• FCF Trend: ${assessCashFlowTrend(cashFlowAnalysis)}`;\n\n        // Cash flow adequacy analysis\n        const fcfGrowth = cashFlowAnalysis.length > 1 ?\n          ((latestFCF.freeCashFlow / cashFlowAnalysis[0].freeCashFlow) - 1) * 100 : 0;\n\n        content += `\\n\\n🎯 CASH FLOW QUALITY:\\n• FCF Growth (Total): ${formatPercentage(fcfGrowth / 100)}\\n• Operating Leverage: ${calculateOperatingLeverage(cashFlowAnalysis)}\\n• Cash Conversion: ${avgFCFMargin > 15 ? '🟢 Strong' : avgFCFMargin > 5 ? '🟡 Moderate' : '🔴 Weak'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_cashflow',\n            cashFlowAnalysis,\n            metrics: { avgFCFMargin, fcfGrowth }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Cash flow analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['years'] }\n  },\n\n  PRIVATE_MULTIPLES: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Current metrics\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n        const _operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const netIncome = statements.netIncome?.[latestIndex] || 0;\n\n        // Industry multiples for medispa/healthcare services\n        const industryMultiples = {\n          evRevenue: { min: 1.5, typical: 2.5, premium: 4.0 },\n          evEbitda: { min: 6.0, typical: 10.0, premium: 15.0 },\n          peRatio: { min: 12.0, typical: 18.0, premium: 25.0 }\n        };\n\n        // Calculate implied valuations\n        const valuations = {\n          revenueMultiple: {\n            conservative: revenue * industryMultiples.evRevenue.min,\n            typical: revenue * industryMultiples.evRevenue.typical,\n            premium: revenue * industryMultiples.evRevenue.premium\n          },\n          ebitdaMultiple: ebitda > 0 ? {\n            conservative: ebitda * industryMultiples.evEbitda.min,\n            typical: ebitda * industryMultiples.evEbitda.typical,\n            premium: ebitda * industryMultiples.evEbitda.premium\n          } : null,\n          earningsMultiple: netIncome > 0 ? {\n            conservative: netIncome * industryMultiples.peRatio.min,\n            typical: netIncome * industryMultiples.peRatio.typical,\n            premium: netIncome * industryMultiples.peRatio.premium\n          } : null\n        };\n\n        let content = `Valuation Multiples Analysis\\n\\n📊 CURRENT METRICS:\\n• Revenue (TTM): ${formatCurrency(revenue)}\\n• EBITDA (TTM): ${formatCurrency(ebitda)}\\n• Net Income: ${formatCurrency(netIncome)}\\n\\n💰 VALUATION SCENARIOS:\\n`;\n\n        // Revenue multiple valuation\n        content += '📈 REVENUE MULTIPLE APPROACH:\\n';\n        content += `• Conservative (${industryMultiples.evRevenue.min}x): ${formatCurrency(valuations.revenueMultiple.conservative)}\\n`;\n        content += `• Typical (${industryMultiples.evRevenue.typical}x): ${formatCurrency(valuations.revenueMultiple.typical)}\\n`;\n        content += `• Premium (${industryMultiples.evRevenue.premium}x): ${formatCurrency(valuations.revenueMultiple.premium)}\\n\\n`;\n\n        // EBITDA multiple valuation\n        if (valuations.ebitdaMultiple) {\n          content += '💼 EBITDA MULTIPLE APPROACH:\\n';\n          content += `• Conservative (${industryMultiples.evEbitda.min}x): ${formatCurrency(valuations.ebitdaMultiple.conservative)}\\n`;\n          content += `• Typical (${industryMultiples.evEbitda.typical}x): ${formatCurrency(valuations.ebitdaMultiple.typical)}\\n`;\n          content += `• Premium (${industryMultiples.evEbitda.premium}x): ${formatCurrency(valuations.ebitdaMultiple.premium)}\\n\\n`;\n        }\n\n        // Earnings multiple valuation\n        if (valuations.earningsMultiple) {\n          content += '📊 EARNINGS MULTIPLE APPROACH:\\n';\n          content += `• Conservative (${industryMultiples.peRatio.min}x): ${formatCurrency(valuations.earningsMultiple.conservative)}\\n`;\n          content += `• Typical (${industryMultiples.peRatio.typical}x): ${formatCurrency(valuations.earningsMultiple.typical)}\\n`;\n          content += `• Premium (${industryMultiples.peRatio.premium}x): ${formatCurrency(valuations.earningsMultiple.premium)}\\n\\n`;\n        }\n\n        // Valuation summary\n        const typicalValuations = [\n          valuations.revenueMultiple.typical,\n          valuations.ebitdaMultiple?.typical,\n          valuations.earningsMultiple?.typical\n        ].filter(v => v);\n\n        const avgValuation = typicalValuations.reduce((sum, val) => sum + val, 0) / typicalValuations.length;\n        const minValuation = Math.min(...typicalValuations);\n        const maxValuation = Math.max(...typicalValuations);\n\n        content += `🎯 VALUATION SUMMARY:\\n• Average Valuation: ${formatCurrency(avgValuation)}\\n• Valuation Range: ${formatCurrency(minValuation)} - ${formatCurrency(maxValuation)}\\n• Method Consistency: ${(maxValuation / minValuation) < 2 ? '✅ Consistent' : '⚠️ Wide Range'}\\n• Recommended Range: ${formatCurrency(avgValuation * 0.8)} - ${formatCurrency(avgValuation * 1.2)}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_multiples',\n            valuations,\n            summary: { avgValuation, minValuation, maxValuation }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Multiples analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['industry', 'size'] }\n  },\n\n  PRIVATE_SENSITIVITY: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n        const baseRevenue = statements.totalRevenue?.[latestIndex] || 0;\n        const baseEbitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n\n        // Sensitivity variables\n        const revenueChanges = [-20, -10, 0, 10, 20]; // % changes\n        const marginChanges = [-2, -1, 0, 1, 2]; // percentage point changes\n        const multipleBase = 10; // EBITDA multiple\n\n        let content = `Sensitivity Analysis\\n\\n📊 BASE CASE:\\n• Revenue: ${formatCurrency(baseRevenue)}\\n• EBITDA: ${formatCurrency(baseEbitda)}\\n• EBITDA Multiple: ${multipleBase}x\\n• Base Valuation: ${formatCurrency(baseEbitda * multipleBase)}\\n\\n`;\n\n        // Revenue sensitivity\n        content += '📈 REVENUE SENSITIVITY:\\n';\n        revenueChanges.forEach(change => {\n          const _newRevenue = baseRevenue * (1 + change / 100);\n          const newEbitda = baseEbitda * (1 + change / 100); // Assuming operating leverage\n          const newValuation = newEbitda * multipleBase;\n          const valuationChange = ((newValuation / (baseEbitda * multipleBase)) - 1) * 100;\n          content += `• Revenue ${change >= 0 ? '+' : ''}${change}%: Valuation ${formatCurrency(newValuation)} (${valuationChange >= 0 ? '+' : ''}${valuationChange.toFixed(1)}%)\\n`;\n        });\n\n        // Margin sensitivity\n        content += '\\n💼 MARGIN SENSITIVITY (percentage points):\\n';\n        const baseMargin = baseRevenue > 0 ? (baseEbitda / baseRevenue) * 100 : 0;\n        marginChanges.forEach(change => {\n          const newMargin = (baseMargin + change) / 100;\n          const newEbitda = baseRevenue * newMargin;\n          const newValuation = newEbitda * multipleBase;\n          const valuationChange = newEbitda > 0 ? ((newValuation / (baseEbitda * multipleBase)) - 1) * 100 : -100;\n          content += `• Margin ${change >= 0 ? '+' : ''}${change}pp: EBITDA ${formatCurrency(newEbitda)}, Valuation ${formatCurrency(newValuation)} (${valuationChange >= 0 ? '+' : ''}${valuationChange.toFixed(1)}%)\\n`;\n        });\n\n        // Multiple sensitivity\n        content += '\\n🎯 MULTIPLE SENSITIVITY:\\n';\n        const multiples = [8, 9, 10, 11, 12];\n        multiples.forEach(multiple => {\n          const valuation = baseEbitda * multiple;\n          const change = ((multiple / multipleBase) - 1) * 100;\n          content += `• ${multiple}x EBITDA: ${formatCurrency(valuation)} (${change >= 0 ? '+' : ''}${change.toFixed(1)}%)\\n`;\n        });\n\n        // Key insights\n        const revenueElasticity = 1.0; // 1% revenue change = 1% valuation change (simplified)\n        const marginElasticity = (baseRevenue * multipleBase) / (baseEbitda * multipleBase); // Impact of 1pp margin change\n\n        content += `\\n🔍 SENSITIVITY INSIGHTS:\\n• Revenue Elasticity: ${revenueElasticity.toFixed(2)}x (1% revenue change → ${revenueElasticity.toFixed(1)}% valuation change)\\n• Margin Impact: 1pp margin change → ${((marginElasticity - 1) * 100).toFixed(1)}% valuation change\\n• Key Driver: ${marginElasticity > revenueElasticity ? 'Margin optimization' : 'Revenue growth'} has higher impact`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_sensitivity',\n            baseCase: { revenue: baseRevenue, ebitda: baseEbitda, valuation: baseEbitda * multipleBase },\n            sensitivities: { revenueElasticity, marginElasticity }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Sensitivity analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['variables', 'ranges'] }\n  },\n\n  PRIVATE_WATERFALL: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Build DCF waterfall analysis\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const taxRate = 0.25;\n        const discountRate = 0.12;\n        const terminalGrowthRate = 0.025;\n\n        // Waterfall components\n        const waterfallSteps = [\n          { step: 'Base Revenue', value: revenue, cumulative: revenue },\n          { step: 'Operating Leverage', value: operatingIncome - revenue * 0.15, cumulative: operatingIncome },\n          { step: 'Tax Shield', value: -operatingIncome * taxRate, cumulative: operatingIncome * (1 - taxRate) },\n          { step: 'Working Capital', value: -revenue * 0.02, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.02 },\n          { step: 'CapEx', value: -revenue * 0.03, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.05 },\n          { step: 'Free Cash Flow', value: 0, cumulative: operatingIncome * (1 - taxRate) - revenue * 0.05 }\n        ];\n\n        const fcf = waterfallSteps[waterfallSteps.length - 1].cumulative;\n        const terminalValue = (fcf * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        const pv5Years = fcf * 4.5; // Simplified 5-year PV\n        const pvTerminal = terminalValue / Math.pow(1 + discountRate, 5);\n        const enterpriseValue = pv5Years + pvTerminal;\n\n        let content = 'DCF Waterfall Analysis\\n\\n💧 CASH FLOW WATERFALL:\\n';\n        waterfallSteps.forEach((step, i) => {\n          const arrow = i === 0 ? '' : step.value >= 0 ? ' ↗ ' : ' ↘ ';\n          content += `${i + 1}. ${step.step}: ${formatCurrency(step.value)} ${arrow}${formatCurrency(step.cumulative)}\\n`;\n        });\n\n        content += `\\n🏗️ VALUATION BUILD-UP:\\n• PV of 5-Year FCF: ${formatCurrency(pv5Years)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminal)}\\n• Enterprise Value: ${formatCurrency(enterpriseValue)}\\n• Terminal Multiple: ${(terminalValue / fcf).toFixed(1)}x FCF\\n• Implied FCF Yield: ${formatPercentage(fcf / enterpriseValue)}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_waterfall',\n            waterfallSteps,\n            valuation: { pv5Years, pvTerminal, enterpriseValue }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Waterfall analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['discountRate', 'terminalGrowthRate'] }\n  },\n\n  PRIVATE_COMPS: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n\n        // Comparable companies (medispa/aesthetic medicine sector)\n        const comparables = [\n          { name: 'Lifestyle Communities', evRevenue: 2.1, evEbitda: 12.5, margin: 18.2 },\n          { name: 'European Wax Center', evRevenue: 3.2, evEbitda: 15.8, margin: 22.1 },\n          { name: 'Planet Fitness', evRevenue: 4.5, evEbitda: 18.2, margin: 28.5 },\n          { name: 'Xponential Fitness', evRevenue: 2.8, evEbitda: 14.1, margin: 19.8 },\n          { name: 'Hand & Stone', evRevenue: 2.5, evEbitda: 11.2, margin: 21.4 }\n        ];\n\n        // Calculate company metrics\n        const currentMargin = revenue > 0 ? (ebitda / revenue) * 100 : 0;\n\n        // Peer statistics\n        const avgEvRevenue = comparables.reduce((sum, comp) => sum + comp.evRevenue, 0) / comparables.length;\n        const avgEvEbitda = comparables.reduce((sum, comp) => sum + comp.evEbitda, 0) / comparables.length;\n        const avgMargin = comparables.reduce((sum, comp) => sum + comp.margin, 0) / comparables.length;\n\n        // Trading multiples valuation\n        const tradingValuationRevenue = revenue * avgEvRevenue;\n        const tradingValuationEbitda = ebitda * avgEvEbitda;\n        const avgTradingValuation = (tradingValuationRevenue + tradingValuationEbitda) / 2;\n\n        let content = 'Comparable Company Analysis\\n\\n🏢 PEER GROUP ANALYSIS:\\n';\n        content += `Trading Multiple Averages:\\n• EV/Revenue: ${avgEvRevenue.toFixed(1)}x\\n• EV/EBITDA: ${avgEvEbitda.toFixed(1)}x\\n• EBITDA Margin: ${avgMargin.toFixed(1)}%\\n\\n`;\n\n        content += '📊 DETAILED COMPARABLES:\\n';\n        comparables.forEach((comp, i) => {\n          content += `${i + 1}. ${comp.name}:\\n   EV/Rev: ${comp.evRevenue}x, EV/EBITDA: ${comp.evEbitda}x, Margin: ${comp.margin}%\\n`;\n        });\n\n        content += `\\n💰 IMPLIED VALUATION:\\n• Revenue Multiple: ${formatCurrency(tradingValuationRevenue)} (${avgEvRevenue.toFixed(1)}x)\\n• EBITDA Multiple: ${formatCurrency(tradingValuationEbitda)} (${avgEvEbitda.toFixed(1)}x)\\n• Average Trading Value: ${formatCurrency(avgTradingValuation)}\\n• Current EBITDA Margin: ${formatPercentage(currentMargin / 100)}\\n• Peer Margin Delta: ${(currentMargin - avgMargin).toFixed(1)}pp`;\n\n        content += `\\n🎯 RELATIVE POSITIONING:\\n• Multiple Premium/Discount: ${((avgTradingValuation / ((revenue * 2.5) + (ebitda * 12))) - 1) * 100 > 0 ? '+' : ''}${(((avgTradingValuation / ((revenue * 2.5) + (ebitda * 12))) - 1) * 100).toFixed(1)}%\\n• Margin Competitiveness: ${currentMargin >= avgMargin ? '🟢 Above Peers' : '🟡 Below Peers'}\\n• Size Adjustment: ${revenue < 50000000 ? 'Small-cap discount may apply' : 'Mid-cap positioning'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_comps',\n            comparables,\n            peerAverages: { avgEvRevenue, avgEvEbitda, avgMargin },\n            impliedValuation: { tradingValuationRevenue, tradingValuationEbitda, avgTradingValuation }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Comparable analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['sector', 'size'] }\n  },\n\n  PRIVATE_LBO: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        const _revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const ebitda = (statements.operatingIncome?.[latestIndex] || 0) + (statements.depreciation?.[latestIndex] || 0);\n\n        // LBO assumptions\n        const purchasePrice = ebitda * 10; // 10x EBITDA entry multiple\n        const equityContribution = purchasePrice * 0.3; // 30% equity\n        const debtFinancing = purchasePrice * 0.7; // 70% debt\n        const interestRate = 0.08; // 8% weighted average cost of debt\n        const exitMultiple = 12; // 12x EBITDA exit multiple\n        const holdPeriod = 5; // 5-year hold\n\n        // Project future EBITDA growth\n        const ebitdaGrowthRate = 0.08; // 8% annual growth\n        const projectedEbitda = [];\n        for (let year = 1; year <= holdPeriod; year++) {\n          projectedEbitda.push(ebitda * Math.pow(1 + ebitdaGrowthRate, year));\n        }\n\n        // Debt paydown (assuming 50% FCF used for debt reduction)\n        let remainingDebt = debtFinancing;\n        const debtPaydown = [];\n        projectedEbitda.forEach((yearEbitda, i) => {\n          const fcf = yearEbitda * 0.6; // Assume 60% FCF conversion\n          const interestPayment = remainingDebt * interestRate;\n          const debtReduction = Math.min((fcf - interestPayment) * 0.5, remainingDebt * 0.2);\n          remainingDebt = Math.max(0, remainingDebt - debtReduction);\n          debtPaydown.push({ year: i + 1, ebitda: yearEbitda, debt: remainingDebt, reduction: debtReduction });\n        });\n\n        // Exit valuation\n        const exitEbitda = projectedEbitda[holdPeriod - 1];\n        const exitValue = exitEbitda * exitMultiple;\n        const netProceeds = exitValue - remainingDebt;\n        const totalReturn = netProceeds / equityContribution;\n        const irr = Math.pow(totalReturn, 1 / holdPeriod) - 1;\n        const moic = totalReturn; // Money-on-Money multiple\n\n        let content = `Leveraged Buyout Analysis\\n\\n💼 TRANSACTION STRUCTURE:\\n• Purchase Price: ${formatCurrency(purchasePrice)} (${(purchasePrice / ebitda).toFixed(1)}x EBITDA)\\n• Equity Investment: ${formatCurrency(equityContribution)} (${formatPercentage(equityContribution / purchasePrice)})\\n• Debt Financing: ${formatCurrency(debtFinancing)} (${formatPercentage(debtFinancing / purchasePrice)})\\n• Interest Rate: ${formatPercentage(interestRate)}\\n\\n`;\n\n        content += '📈 EBITDA PROJECTIONS:\\n';\n        projectedEbitda.forEach((ebitdaYear, i) => {\n          content += `Year ${i + 1}: ${formatCurrency(ebitdaYear)} (${formatPercentage(ebitdaGrowthRate)} growth)\\n`;\n        });\n\n        content += '\\n🏦 DEBT PAYDOWN SCHEDULE:\\n';\n        debtPaydown.forEach(year => {\n          content += `Year ${year.year}: Debt ${formatCurrency(year.debt)}, Paydown ${formatCurrency(year.reduction)}\\n`;\n        });\n\n        content += `\\n🎯 EXIT ANALYSIS (Year ${holdPeriod}):\\n• Exit EBITDA: ${formatCurrency(exitEbitda)}\\n• Exit Multiple: ${exitMultiple}x\\n• Exit Value: ${formatCurrency(exitValue)}\\n• Remaining Debt: ${formatCurrency(remainingDebt)}\\n• Net Proceeds: ${formatCurrency(netProceeds)}\\n\\n💰 INVESTOR RETURNS:\\n• Total Return: ${formatCurrency(netProceeds)} (${totalReturn.toFixed(1)}x)\\n• Money-on-Money: ${moic.toFixed(1)}x\\n• IRR: ${formatPercentage(irr)}\\n• Return Quality: ${irr > 0.2 ? '🟢 Excellent' : irr > 0.15 ? '🟡 Good' : '🔴 Poor'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_lbo',\n            transaction: { purchasePrice, equityContribution, debtFinancing },\n            projections: projectedEbitda,\n            returns: { totalReturn, moic, irr }\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `LBO analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['leverage', 'holdPeriod', 'exitMultiple'] }\n  },\n\n  PRIVATE_QUALITY: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const periods = data.periods;\n\n        // Business Quality Score calculation\n        const qualityMetrics = [];\n\n        // Revenue Quality\n        const revenues = periods.map((_, i) => statements.totalRevenue?.[i] || 0);\n        const revenueGrowthConsistency = calculateGrowthConsistency(revenues);\n        const revenueRecurring = estimateRecurringRevenue(statements, periods.length - 1);\n        qualityMetrics.push({ metric: 'Revenue Quality', score: revenueGrowthConsistency * 0.6 + revenueRecurring * 0.4, weight: 25 });\n\n        // Profitability Quality\n        const margins = revenues.map((rev, i) => {\n          const opIncome = statements.operatingIncome?.[i] || 0;\n          return rev > 0 ? (opIncome / rev) * 100 : 0;\n        });\n        const marginStability = calculateMarginStability(margins);\n        const profitabilityTrend = calculateProfitabilityTrend(margins);\n        qualityMetrics.push({ metric: 'Profitability Quality', score: marginStability * 0.7 + profitabilityTrend * 0.3, weight: 30 });\n\n        // Cash Generation Quality\n        const cashConversion = 85; // Estimated from medispa characteristics\n        const workingCapitalEfficiency = 90; // Asset-light model\n        qualityMetrics.push({ metric: 'Cash Generation', score: (cashConversion + workingCapitalEfficiency) / 2, weight: 20 });\n\n        // Competitive Position\n        const marketPosition = assessMarketPosition(data);\n        const scalability = assessScalability(revenues);\n        qualityMetrics.push({ metric: 'Competitive Position', score: marketPosition * 0.6 + scalability * 0.4, weight: 15 });\n\n        // Financial Strength\n        const debtLevels = 75; // Assumed moderate debt levels\n        const liquidityPosition = 80; // Cash generation business\n        qualityMetrics.push({ metric: 'Financial Strength', score: (debtLevels + liquidityPosition) / 2, weight: 10 });\n\n        // Calculate overall quality score\n        const overallScore = qualityMetrics.reduce((sum, metric) => sum + (metric.score * metric.weight / 100), 0);\n        const qualityGrade = overallScore >= 80 ? 'A' : overallScore >= 70 ? 'B' : overallScore >= 60 ? 'C' : overallScore >= 50 ? 'D' : 'F';\n\n        let content = `Business Quality Assessment\\n\\n🏆 OVERALL QUALITY SCORE: ${overallScore.toFixed(1)}/100 (Grade: ${qualityGrade})\\n\\n📊 QUALITY BREAKDOWN:\\n`;\n\n        qualityMetrics.forEach(metric => {\n          const grade = metric.score >= 80 ? 'A' : metric.score >= 70 ? 'B' : metric.score >= 60 ? 'C' : 'D';\n          content += `• ${metric.metric}: ${metric.score.toFixed(1)}/100 (${grade}) - Weight: ${metric.weight}%\\n`;\n        });\n\n        content += `\\n🎯 QUALITY ANALYSIS:\\n• Investment Grade: ${qualityGrade === 'A' ? '🟢 High Quality' : qualityGrade === 'B' ? '🟡 Good Quality' : qualityGrade === 'C' ? '🟠 Average Quality' : '🔴 Below Average'}\\n• Risk Profile: ${overallScore >= 75 ? 'Low-Medium Risk' : overallScore >= 60 ? 'Medium Risk' : 'Medium-High Risk'}\\n• Valuation Multiple Premium: ${overallScore >= 80 ? '10-15%' : overallScore >= 70 ? '5-10%' : overallScore >= 60 ? '0-5%' : 'Discount warranted'}\\n\\n💡 KEY STRENGTHS:\\n${identifyStrengths(qualityMetrics)}\\n\\n⚠️ AREAS FOR IMPROVEMENT:\\n${identifyWeaknesses(qualityMetrics)}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_quality',\n            overallScore,\n            qualityGrade,\n            metrics: qualityMetrics\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Quality assessment failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['weights'] }\n  },\n\n  PRIVATE_HELP: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const commands = [\n        { cmd: 'PRIVATE_LOAD()', desc: 'Load and validate private financial data' },\n        { cmd: 'PRIVATE_SUMMARY()', desc: 'Generate executive summary of company performance' },\n        { cmd: 'PRIVATE_DCF()', desc: 'Run discounted cash flow valuation analysis' },\n        { cmd: 'PRIVATE_RATIOS()', desc: 'Calculate comprehensive financial ratios' },\n        { cmd: 'PRIVATE_BENCHMARKS()', desc: 'Compare metrics against industry benchmarks' },\n        { cmd: 'PRIVATE_MULTIPLES()', desc: 'Valuation using industry multiples approach' },\n        { cmd: 'PRIVATE_CASHFLOW()', desc: 'Analyze cash flow generation and quality' },\n        { cmd: 'PRIVATE_GROWTH()', desc: 'Assess revenue growth trends and sustainability' },\n        { cmd: 'PRIVATE_RISK()', desc: 'Evaluate business risk factors and volatility' },\n        { cmd: 'PRIVATE_SCENARIO()', desc: 'Run bull/base/bear case scenario analysis' },\n        { cmd: 'PRIVATE_MONTE_CARLO()', desc: 'Monte Carlo simulation for valuation ranges' },\n        { cmd: 'PRIVATE_SENSITIVITY()', desc: 'Sensitivity analysis on key variables' },\n        { cmd: 'PRIVATE_VALIDATE()', desc: 'Validate data quality and completeness' },\n        { cmd: 'PRIVATE_EXPORT()', desc: 'Export analysis data and results' },\n        { cmd: 'PRIVATE_WATERFALL()', desc: 'DCF waterfall and value bridge analysis' },\n        { cmd: 'PRIVATE_COMPS()', desc: 'Comparable company trading multiples analysis' },\n        { cmd: 'PRIVATE_LBO()', desc: 'Leveraged buyout model and returns analysis' },\n        { cmd: 'PRIVATE_QUALITY()', desc: 'Business quality and investment grade assessment' },\n        { cmd: 'PRIVATE_WORKFLOW()', desc: 'Interactive analysis workflow with recommendations' },\n        { cmd: 'PRIVATE_DASHBOARD()', desc: 'Executive dashboard with key metrics summary' },\n        { cmd: 'PRIVATE_AUDIT()', desc: 'Comprehensive financial audit and red flags analysis' },\n        { cmd: 'PRIVATE_FORECAST()', desc: 'Multi-scenario financial forecasting model' },\n        { cmd: 'PRIVATE_ESG()', desc: 'ESG scoring and sustainable investment analysis' }\n      ];\n\n      let content = 'Private Analysis Commands\\n\\n🛠️ AVAILABLE COMMANDS:\\n';\n      content += commands.map(cmd => `• ${cmd.cmd}\\n  ${cmd.desc}`).join('\\n\\n');\n\n      content += '\\n\\n📋 WORKFLOW RECOMMENDATIONS:\\n';\n      content += '1. Start with PRIVATE_LOAD() to validate data\\n';\n      content += '2. Run PRIVATE_SUMMARY() for company overview\\n';\n      content += '3. Use PRIVATE_DCF() or PRIVATE_MULTIPLES() for valuation\\n';\n      content += '4. Perform PRIVATE_SCENARIO() for risk assessment\\n';\n      content += '5. Execute PRIVATE_BENCHMARKS() for competitive analysis\\n';\n      content += '6. Use PRIVATE_EXPORT() to save results\\n\\n';\n\n      content += '💡 TIPS:\\n• Commands are case-sensitive\\n• Most commands work with default parameters\\n• Use PRIVATE_VALIDATE() if you encounter errors\\n• Results include detailed analysis and insights';\n\n      return {\n        type: 'success',\n        content,\n        data: {\n          analysis: 'private_help',\n          commands: commands.map(cmd => cmd.cmd)\n        }\n      };\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_WORKFLOW: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const _statements = data.statements.incomeStatement;\n        const _periods = data.periods;\n\n        // Workflow assessment\n        const workflowSteps = [\n          { step: 'Data Quality', completed: true, score: 85, next: 'PRIVATE_VALIDATE()' },\n          { step: 'Company Overview', completed: false, score: 0, next: 'PRIVATE_SUMMARY()' },\n          { step: 'Financial Analysis', completed: false, score: 0, next: 'PRIVATE_RATIOS()' },\n          { step: 'Valuation Models', completed: false, score: 0, next: 'PRIVATE_DCF() & PRIVATE_MULTIPLES()' },\n          { step: 'Risk Assessment', completed: false, score: 0, next: 'PRIVATE_RISK() & PRIVATE_SCENARIO()' },\n          { step: 'Benchmarking', completed: false, score: 0, next: 'PRIVATE_BENCHMARKS() & PRIVATE_COMPS()' },\n          { step: 'Advanced Models', completed: false, score: 0, next: 'PRIVATE_LBO() & PRIVATE_MONTE_CARLO()' },\n          { step: 'Final Report', completed: false, score: 0, next: 'PRIVATE_EXPORT()' }\n        ];\n\n        const overallProgress = workflowSteps.filter(step => step.completed).length / workflowSteps.length * 100;\n        const nextStep = workflowSteps.find(step => !step.completed);\n\n        let content = `Private Analysis Workflow\\n\\n📋 WORKFLOW PROGRESS: ${overallProgress.toFixed(0)}% Complete\\n\\n🔄 ANALYSIS STEPS:\\n`;\n\n        workflowSteps.forEach((step, i) => {\n          const status = step.completed ? '✅' : i === workflowSteps.findIndex(s => !s.completed) ? '🔄' : '⏳';\n          content += `${i + 1}. ${status} ${step.step} ${step.completed ? `(${step.score}%)` : ''}\\n   Next: ${step.next}\\n\\n`;\n        });\n\n        content += `🎯 RECOMMENDED NEXT STEPS:\\n• ${nextStep ? nextStep.next : 'All steps completed!'}\\n• Focus on ${nextStep ? nextStep.step.toLowerCase() : 'final review'}\\n• Estimated time: ${estimateStepTime(nextStep?.step)}\\n\\n📊 WORKFLOW INSIGHTS:\\n• Data completeness: ${assessDataCompleteness(data)}%\\n• Analysis depth: ${assessAnalysisDepth(workflowSteps)}\\n• Report readiness: ${overallProgress >= 80 ? '🟢 Ready' : overallProgress >= 50 ? '🟡 Partial' : '🔴 Incomplete'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_workflow',\n            workflowSteps,\n            progress: overallProgress,\n            nextStep: nextStep?.step\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Workflow analysis failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: [] }\n  },\n\n  PRIVATE_DASHBOARD: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const data = defaultFinancialData;\n        const statements = data.statements.incomeStatement;\n        const latestIndex = data.periods.length - 1;\n\n        // Key metrics calculation\n        const revenue = statements.totalRevenue?.[latestIndex] || 0;\n        const grossProfit = statements.grossProfit?.[latestIndex] || 0;\n        const operatingIncome = statements.operatingIncome?.[latestIndex] || 0;\n        const ebitda = operatingIncome + (statements.depreciation?.[latestIndex] || revenue * 0.02);\n\n        // Growth metrics\n        const revenueGrowth = latestIndex > 0 && statements.totalRevenue?.[latestIndex - 1] > 0 ?\n          ((revenue / statements.totalRevenue[latestIndex - 1]) - 1) * 100 : 0;\n\n        // Margins\n        const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;\n        const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;\n        const ebitdaMargin = revenue > 0 ? (ebitda / revenue) * 100 : 0;\n\n        // Valuation estimates\n        const revenueMultiple = 2.5;\n        const ebitdaMultiple = 10.0;\n        const impliedValuation = (revenue * revenueMultiple + ebitda * ebitdaMultiple) / 2;\n\n        // Performance scoring\n        const performanceScore = calculatePerformanceScore({\n          revenueGrowth, grossMargin, operatingMargin, ebitdaMargin\n        });\n\n        let content = `📊 EXECUTIVE DASHBOARD\\n\\n💰 FINANCIAL SNAPSHOT (${data.periods[latestIndex]}):\\n`;\n        content += '┌─────────────────────────────────────┐\\n';\n        content += `│ Revenue:        ${formatCurrency(revenue).padEnd(20)} │\\n`;\n        content += `│ EBITDA:         ${formatCurrency(ebitda).padEnd(20)} │\\n`;\n        content += `│ Operating Inc:  ${formatCurrency(operatingIncome).padEnd(20)} │\\n`;\n        content += `│ Est. Valuation: ${formatCurrency(impliedValuation).padEnd(20)} │\\n`;\n        content += '└─────────────────────────────────────┘\\n\\n';\n\n        content += '📈 KEY PERFORMANCE INDICATORS:\\n';\n        content += `• Revenue Growth:    ${revenueGrowth >= 0 ? '+' : ''}${revenueGrowth.toFixed(1)}% ${getGrowthIcon(revenueGrowth)}\\n`;\n        content += `• Gross Margin:      ${grossMargin.toFixed(1)}% ${getMarginIcon(grossMargin, 'gross')}\\n`;\n        content += `• Operating Margin:  ${operatingMargin.toFixed(1)}% ${getMarginIcon(operatingMargin, 'operating')}\\n`;\n        content += `• EBITDA Margin:     ${ebitdaMargin.toFixed(1)}% ${getMarginIcon(ebitdaMargin, 'ebitda')}\\n\\n`;\n\n        content += `🎯 PERFORMANCE SCORE: ${performanceScore}/100\\n`;\n        content += `Rating: ${getPerformanceRating(performanceScore)}\\n\\n`;\n\n        content += '🔍 QUICK ACTIONS:\\n• Run PRIVATE_DCF() for detailed valuation\\n• Execute PRIVATE_BENCHMARKS() for peer comparison\\n• Use PRIVATE_SCENARIO() for risk modeling\\n• Try PRIVATE_QUALITY() for investment grade analysis';\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'private_dashboard',\n            metrics: { revenue, ebitda, operatingIncome, impliedValuation },\n            kpis: { revenueGrowth, grossMargin, operatingMargin, ebitdaMargin },\n            performanceScore\n          }\n        };\n      } catch (error) {\n        return { type: 'error', content: `Dashboard generation failed: ${error.message}` };\n      }\n    },\n    parameterSchema: { required: [], optional: ['period'] }\n  },\n\n  PRIVATE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      const commands = [\n        // Core Analysis Commands\n        { cmd: 'PRIVATE_LOAD()', desc: 'Load and validate private financial data', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_SUMMARY()', desc: 'Generate executive summary of company performance', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_DCF()', desc: 'Run discounted cash flow valuation analysis', cat: '📊 CORE ANALYSIS' },\n        { cmd: 'PRIVATE_RATIOS()', desc: 'Calculate comprehensive financial ratios', cat: '📊 CORE ANALYSIS' },\n\n        // Valuation Commands\n        { cmd: 'PRIVATE_WATERFALL()', desc: 'DCF waterfall and value bridge analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_COMPS()', desc: 'Comparable company trading multiples analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_LBO()', desc: 'Leveraged buyout model and returns analysis', cat: '💰 VALUATION' },\n        { cmd: 'PRIVATE_MULTIPLES()', desc: 'Valuation using industry multiples approach', cat: '💰 VALUATION' },\n\n        // Analytics Commands\n        { cmd: 'PRIVATE_QUALITY()', desc: 'Business quality and investment grade assessment', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_BENCHMARKS()', desc: 'Compare metrics against industry benchmarks', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_CASHFLOW()', desc: 'Analyze cash flow generation and quality', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_GROWTH()', desc: 'Assess revenue growth trends and sustainability', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_RISK()', desc: 'Evaluate business risk factors and volatility', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_MONTE_CARLO()', desc: 'Monte Carlo simulation for valuation ranges', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_SCENARIO()', desc: 'Run bull/base/bear case scenario analysis', cat: '📈 ANALYTICS' },\n        { cmd: 'PRIVATE_SENSITIVITY()', desc: 'Sensitivity analysis on key variables', cat: '📈 ANALYTICS' },\n\n        // Automation Commands\n        { cmd: 'PRIVATE_WORKFLOW()', desc: 'Interactive analysis workflow with recommendations', cat: '🤖 AUTOMATION' },\n\n        // Reporting Commands\n        { cmd: 'PRIVATE_DASHBOARD()', desc: 'Executive dashboard with key metrics summary', cat: '📋 REPORTING' },\n\n        // Data Management Commands\n        { cmd: 'PRIVATE_VALIDATE()', desc: 'Validate data quality and completeness', cat: '💾 DATA MANAGEMENT' },\n        { cmd: 'PRIVATE_EXPORT()', desc: 'Export analysis data and results', cat: '💾 DATA MANAGEMENT' },\n\n        // Utility Commands\n        { cmd: 'PRIVATE_HELP()', desc: 'Show all available private analysis commands', cat: '🛠️ UTILITY' }\n      ];\n\n      let content = `🚀 **Private Analysis CLI Commands (${commands.length} Total)**\\n\\n`;\n\n      // Group commands by category\n      const categories = [...new Set(commands.map(cmd => cmd.cat))];\n\n      categories.forEach(category => {\n        const categoryCommands = commands.filter(cmd => cmd.cat === category);\n        content += `### **${category}**\\n`;\n        categoryCommands.forEach(cmd => {\n          content += `- **${cmd.cmd}** - ${cmd.desc}\\n`;\n        });\n        content += '\\n';\n      });\n\n      content += '### **💡 USAGE EXAMPLES:**\\n';\n      content += '```\\n';\n      content += 'PRIVATE_LOAD()           # Start with data validation\\n';\n      content += 'PRIVATE_SUMMARY()        # Get company overview\\n';\n      content += 'PRIVATE_DCF()           # Run DCF valuation\\n';\n      content += 'PRIVATE_COMPS()         # Comparable analysis\\n';\n      content += 'PRIVATE_LBO()           # LBO modeling\\n';\n      content += 'PRIVATE_DASHBOARD()     # Executive summary\\n';\n      content += 'PRIVATE_WORKFLOW()      # Guided analysis\\n';\n      content += '```\\n\\n';\n\n      content += '**All commands work with the default private financial data and provide professional-grade analysis suitable for investment banking, private equity, and corporate finance workflows.**';\n\n      return {\n        type: 'success',\n        content,\n        data: {\n          analysis: 'private_commands_list',\n          commands: commands.map(cmd => cmd.cmd),\n          totalCommands: commands.length\n        }\n      };\n    },\n    parameterSchema: { required: [], optional: [] }\n  }\n};\n","/**\n * System & Performance Commands\n * System monitoring, configuration, and performance tools\n */\n\nimport { formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const systemCommands = {\n  PERFORMANCE_TEST: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        const startTime = Date.now();\n\n        // Test various system components\n        const tests = [];\n\n        // Command processing speed test\n        const cmdStart = Date.now();\n        await new Promise(resolve => setTimeout(resolve, 10)); // Simulate processing\n        tests.push({\n          name: 'Command Processing',\n          duration: Date.now() - cmdStart,\n          status: 'Pass',\n          benchmark: 50 // ms\n        });\n\n        // Data fetching test\n        const dataStart = Date.now();\n        try {\n          await dataFetchingService.fetchCompanyProfile('AAPL');\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Pass',\n            benchmark: 1000 // ms\n          });\n        } catch (error) {\n          tests.push({\n            name: 'Data Fetching',\n            duration: Date.now() - dataStart,\n            status: 'Fail',\n            benchmark: 1000,\n            error: error.message\n          });\n        }\n\n        // Memory usage test\n        const memStart = Date.now();\n        const memoryUsage = process.memoryUsage ? process.memoryUsage() : {\n          heapUsed: Math.random() * 100000000,\n          heapTotal: Math.random() * 200000000,\n          external: Math.random() * 50000000\n        };\n        tests.push({\n          name: 'Memory Check',\n          duration: Date.now() - memStart,\n          status: 'Pass',\n          benchmark: 10,\n          details: {\n            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n            external: Math.round(memoryUsage.external / 1024 / 1024)\n          }\n        });\n\n        // Cache performance test\n        const cacheStart = Date.now();\n        const cacheSize = dataFetchingService.cache?.size || 0;\n        tests.push({\n          name: 'Cache Performance',\n          duration: Date.now() - cacheStart,\n          status: cacheSize > 0 ? 'Pass' : 'Warning',\n          benchmark: 5,\n          details: { entries: cacheSize }\n        });\n\n        // Calculate overall performance\n        const totalDuration = Date.now() - startTime;\n        const passedTests = tests.filter(t => t.status === 'Pass').length;\n        const overallScore = (passedTests / tests.length) * 100;\n\n        const content = `⚡ System Performance Test Results\\n\\n🎯 OVERALL SCORE: ${formatNumber(overallScore, 1)}/100 ${overallScore > 90 ? '🟢 Excellent' : overallScore > 75 ? '🟡 Good' : overallScore > 50 ? '🟠 Fair' : '🔴 Poor'}\\n\\n📊 TEST RESULTS:\\n${tests.map(test => {\n          const statusIcon = test.status === 'Pass' ? '✅' : test.status === 'Warning' ? '⚠️' : '❌';\n          const performance = test.duration <= test.benchmark ? '🟢 Fast' : test.duration <= test.benchmark * 2 ? '🟡 Moderate' : '🔴 Slow';\n          return `${statusIcon} ${test.name}: ${test.duration}ms ${performance}\\n   Benchmark: ${test.benchmark}ms, Status: ${test.status}${test.details ? `\\n   Details: ${JSON.stringify(test.details)}` : ''}${test.error ? `\\n   Error: ${test.error}` : ''}`;\n        }).join('\\n\\n')}\\n\\n⏱️ PERFORMANCE SUMMARY:\\n• Total Test Duration: ${totalDuration}ms\\n• Tests Passed: ${passedTests}/${tests.length}\\n• Average Response Time: ${formatNumber(tests.reduce((sum, t) => sum + t.duration, 0) / tests.length, 1)}ms\\n• System Health: ${overallScore > 80 ? 'Healthy' : overallScore > 60 ? 'Moderate' : 'Needs Attention'}\\n\\n💾 MEMORY USAGE:\\n• Heap Used: ${tests[2].details.heapUsed} MB\\n• Heap Total: ${tests[2].details.heapTotal} MB\\n• External: ${tests[2].details.external} MB\\n• Memory Efficiency: ${tests[2].details.heapUsed / tests[2].details.heapTotal < 0.8 ? 'Good' : 'High Usage'}\\n\\n🔧 RECOMMENDATIONS:\\n${tests.some(t => t.status === 'Fail') ? '• Address failed tests to improve system reliability\\n' : ''}${tests.some(t => t.duration > t.benchmark * 2) ? '• Slow response times detected - check network connection\\n' : ''}${tests[2].details.heapUsed > 100 ? '• High memory usage - consider restarting application\\n' : ''}${cacheSize === 0 ? '• Cache is empty - performance may be slower\\n' : ''}• Run performance tests regularly to monitor system health\\n\\n💡 OPTIMIZATION TIPS:\\n• Clear cache periodically with \"cache clear\" command\\n• Monitor memory usage during heavy analysis\\n• Check network connectivity for data fetching issues`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'performance_test',\n            overallScore,\n            totalDuration,\n            tests,\n            memoryUsage: tests[2].details\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Performance test failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  API_USAGE: {\n    execute: async(_parsedCommand, _context, _processor) => {\n      try {\n        // Mock API usage statistics (in real implementation, would track actual usage)\n        const usage = {\n          daily: {\n            calls: Math.floor(Math.random() * 1000 + 100),\n            limit: 1000,\n            remaining: Math.floor(Math.random() * 500 + 100)\n          },\n          monthly: {\n            calls: Math.floor(Math.random() * 20000 + 5000),\n            limit: 25000,\n            remaining: Math.floor(Math.random() * 10000 + 2000)\n          },\n          endpoints: {\n            'company-profile': Math.floor(Math.random() * 300 + 50),\n            'financial-statements': Math.floor(Math.random() * 200 + 30),\n            'market-data': Math.floor(Math.random() * 400 + 80),\n            'peer-analysis': Math.floor(Math.random() * 150 + 20),\n            'sec-filings': Math.floor(Math.random() * 100 + 10)\n          }\n        };\n\n        const dailyUsagePercent = (usage.daily.calls / usage.daily.limit) * 100;\n        const monthlyUsagePercent = (usage.monthly.calls / usage.monthly.limit) * 100;\n        const totalEndpointCalls = Object.values(usage.endpoints).reduce((sum, calls) => sum + calls, 0);\n\n        // Rate limiting status\n        const rateLimitStatus = dailyUsagePercent > 90 ? 'Critical' : dailyUsagePercent > 75 ? 'Warning' : 'Normal';\n\n        // Cost estimation (mock)\n        const estimatedCost = (usage.monthly.calls * 0.001).toFixed(2); // $0.001 per call\n\n        const content = `📊 API Usage Statistics\\n\\n🔄 CURRENT USAGE:\\n• Daily Calls: ${formatNumber(usage.daily.calls, 0)}/${formatNumber(usage.daily.limit, 0)} (${formatPercentage(dailyUsagePercent / 100)})\\n• Monthly Calls: ${formatNumber(usage.monthly.calls, 0)}/${formatNumber(usage.monthly.limit, 0)} (${formatPercentage(monthlyUsagePercent / 100)})\\n• Daily Remaining: ${formatNumber(usage.daily.remaining, 0)} calls\\n• Monthly Remaining: ${formatNumber(usage.monthly.remaining, 0)} calls\\n\\n⚡ RATE LIMIT STATUS: ${rateLimitStatus} ${rateLimitStatus === 'Critical' ? '🔴' : rateLimitStatus === 'Warning' ? '🟡' : '🟢'}\\n\\n📈 ENDPOINT BREAKDOWN:\\n${Object.entries(usage.endpoints).map(([endpoint, calls]) =>\n          `• ${endpoint.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}: ${formatNumber(calls, 0)} calls (${formatPercentage(calls / totalEndpointCalls)})`\n        ).join('\\n')}\\n\\n💰 COST ANALYSIS:\\n• Estimated Monthly Cost: $${estimatedCost}\\n• Cost Per Call: $0.001\\n• Most Expensive Endpoint: ${Object.entries(usage.endpoints).reduce((max, [endpoint, calls]) => calls > max.calls ? { endpoint, calls } : max, { endpoint: '', calls: 0 }).endpoint}\\n\\n📊 USAGE PATTERNS:\\n• Peak Usage Time: ${Math.random() > 0.5 ? 'Market Hours (9AM-4PM EST)' : 'After Hours'}\\n• Average Calls/Hour: ${formatNumber(usage.daily.calls / 24, 1)}\\n• Efficiency Score: ${dailyUsagePercent < 80 ? 'Efficient' : 'High Usage'}\\n\\n⚠️ ALERTS & RECOMMENDATIONS:\\n${dailyUsagePercent > 90 ? '• 🔴 CRITICAL: Daily limit almost reached - reduce API calls\\n' : ''}${dailyUsagePercent > 75 ? '• 🟡 WARNING: High daily usage - monitor closely\\n' : ''}${monthlyUsagePercent > 80 ? '• 🟠 Monthly usage is high - consider upgrading plan\\n' : ''}${usage.daily.remaining < 50 ? '• Consider caching results to reduce API calls\\n' : ''}• Use batch operations when possible to optimize usage\\n• Monitor usage during market hours for peak efficiency\\n\\n🔧 OPTIMIZATION TIPS:\\n• Enable caching to reduce redundant calls\\n• Use batch analysis for multiple stocks\\n• Schedule heavy analysis during off-peak hours\\n• Consider upgrading plan if consistently hitting limits\\n\\n📅 RESET SCHEDULE:\\n• Daily limits reset: Midnight UTC\\n• Monthly limits reset: 1st of each month\\n• Current time: ${new Date().toISOString()}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Demo mode shows simulated usage data.' : '✅ Live API usage tracking'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'api_usage',\n            usage,\n            rateLimitStatus,\n            estimatedCost: parseFloat(estimatedCost),\n            usagePercents: {\n              daily: dailyUsagePercent,\n              monthly: monthlyUsagePercent\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `API usage check failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  },\n\n  CONFIG: {\n    execute: async(parsedCommand, _context, processor) => {\n      const [setting, value] = parsedCommand.parameters;\n\n      if (!setting) {\n        // Show all current settings\n        const settings = processor?.getAllSettings() || {};\n        const variables = processor?.getAllVariables() || {};\n\n        const content = `⚙️ System Configuration\\n\\n🔧 CURRENT SETTINGS:\\n${Object.entries(settings).map(([key, val]) =>\n          `• ${key}: ${val}`\n        ).join('\\n')}\\n\\n💾 STORED VARIABLES:\\n${Object.entries(variables).map(([key, val]) =>\n          `• ${key}: ${Array.isArray(val) ? `Array(${val.length})` : typeof val === 'object' ? 'Object' : val}`\n        ).join('\\n')}\\n\\n🛠️ AVAILABLE SETTINGS:\\n• currency: USD, EUR, GBP, JPY\\n• precision: 0-6 decimal places\\n• dateFormat: YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY\\n• theme: dark, light, auto\\n• notifications: enabled, disabled\\n\\n💡 USAGE:\\n• CONFIG() - Show all settings\\n• CONFIG(\"setting\") - Show specific setting\\n• CONFIG(\"setting\", \"value\") - Update setting\\n\\nExample: CONFIG(\"currency\", \"EUR\")`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'config_view',\n            settings,\n            variables\n          }\n        };\n      }\n\n      if (value === undefined) {\n        // Show specific setting\n        const currentValue = processor?.getSetting(setting);\n        return {\n          type: 'info',\n          content: `⚙️ Setting: ${setting}\\nCurrent Value: ${currentValue || 'Not set'}\\n\\nTo update: CONFIG(\"${setting}\", \"new_value\")`\n        };\n      }\n\n      // Update setting\n      try {\n        // Validate setting values\n        const validSettings = {\n          currency: ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD'],\n          precision: [0, 1, 2, 3, 4, 5, 6],\n          dateFormat: ['YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'],\n          theme: ['dark', 'light', 'auto'],\n          notifications: ['enabled', 'disabled']\n        };\n\n        if (validSettings[setting] && !validSettings[setting].includes(value)) {\n          return {\n            type: 'error',\n            content: `Invalid value \"${value}\" for setting \"${setting}\". Valid values: ${validSettings[setting].join(', ')}`\n          };\n        }\n\n        const oldValue = processor?.getSetting(setting);\n        processor?.updateSetting(setting, value);\n\n        return {\n          type: 'success',\n          content: `✅ Setting Updated\\n\\n• Setting: ${setting}\\n• Old Value: ${oldValue || 'Not set'}\\n• New Value: ${value}\\n\\nSetting will take effect immediately for new commands.`,\n          data: {\n            analysis: 'config_update',\n            setting,\n            oldValue,\n            newValue: value\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Configuration update failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  }\n};\n","/**\n * Technical Analysis Commands\n * Technical indicators, chart patterns, and market intelligence\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const technicalCommands = {\n  TECHNICALS: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'TECHNICALS command requires a ticker symbol. Usage: TECHNICALS(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _marketData = await dataFetchingService.fetchMarketData(ticker.toUpperCase());\n\n        // Mock technical indicators (in real implementation, would calculate from price data)\n        const price = profile.price;\n        const volatility = (profile.beta || 1.0) * 0.16;\n\n        // Generate mock technical indicators\n        const sma20 = price * (1 + (Math.random() - 0.5) * 0.1);\n        const sma50 = price * (1 + (Math.random() - 0.5) * 0.15);\n        const ema12 = price * (1 + (Math.random() - 0.5) * 0.08);\n        const ema26 = price * (1 + (Math.random() - 0.5) * 0.12);\n\n        const rsi = 30 + Math.random() * 40; // RSI between 30-70\n        const macd = (ema12 - ema26);\n        const macdSignal = macd * (0.9 + Math.random() * 0.2);\n        const macdHistogram = macd - macdSignal;\n\n        const bollingerUpper = sma20 * 1.02;\n        const bollingerLower = sma20 * 0.98;\n        const bollingerPosition = (price - bollingerLower) / (bollingerUpper - bollingerLower);\n\n        // Support and resistance levels\n        const support1 = price * 0.95;\n        const support2 = price * 0.90;\n        const resistance1 = price * 1.05;\n        const resistance2 = price * 1.10;\n\n        // Generate signals\n        const signals = [];\n        if (price > sma20 && sma20 > sma50) signals.push('Bullish trend (Price > SMA20 > SMA50)');\n        if (price < sma20 && sma20 < sma50) signals.push('Bearish trend (Price < SMA20 < SMA50)');\n        if (rsi < 30) signals.push('Oversold condition (RSI < 30)');\n        if (rsi > 70) signals.push('Overbought condition (RSI > 70)');\n        if (macdHistogram > 0 && macd > macdSignal) signals.push('MACD bullish crossover');\n        if (macdHistogram < 0 && macd < macdSignal) signals.push('MACD bearish crossover');\n        if (bollingerPosition > 0.8) signals.push('Near upper Bollinger Band');\n        if (bollingerPosition < 0.2) signals.push('Near lower Bollinger Band');\n\n        const content = `Technical Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 PRICE & MOVING AVERAGES:\\n• Current Price: ${formatCurrency(price)}\\n• SMA(20): ${formatCurrency(sma20)} ${price > sma20 ? '📈' : '📉'}\\n• SMA(50): ${formatCurrency(sma50)} ${price > sma50 ? '📈' : '📉'}\\n• EMA(12): ${formatCurrency(ema12)}\\n• EMA(26): ${formatCurrency(ema26)}\\n\\n📈 MOMENTUM INDICATORS:\\n• RSI(14): ${formatNumber(rsi, 1)} ${rsi > 70 ? '🔴 Overbought' : rsi < 30 ? '🟢 Oversold' : '🟡 Neutral'}\\n• MACD: ${formatNumber(macd, 3)}\\n• MACD Signal: ${formatNumber(macdSignal, 3)}\\n• MACD Histogram: ${formatNumber(macdHistogram, 3)} ${macdHistogram > 0 ? '📈' : '📉'}\\n\\n🎯 BOLLINGER BANDS:\\n• Upper Band: ${formatCurrency(bollingerUpper)}\\n• Middle (SMA20): ${formatCurrency(sma20)}\\n• Lower Band: ${formatCurrency(bollingerLower)}\\n• Position: ${formatPercentage(bollingerPosition)} ${bollingerPosition > 0.8 ? '🔴 Near Upper' : bollingerPosition < 0.2 ? '🟢 Near Lower' : '🟡 Middle'}\\n\\n⚖️ SUPPORT & RESISTANCE:\\n• Resistance 2: ${formatCurrency(resistance2)}\\n• Resistance 1: ${formatCurrency(resistance1)}\\n• Current: ${formatCurrency(price)}\\n• Support 1: ${formatCurrency(support1)}\\n• Support 2: ${formatCurrency(support2)}\\n\\n🚨 ACTIVE SIGNALS:\\n${signals.length > 0 ? signals.map(signal => `• ${signal}`).join('\\n') : '• No active signals'}\\n\\n📊 TREND ANALYSIS:\\n• Short-term (20-day): ${price > sma20 ? 'Bullish' : 'Bearish'}\\n• Medium-term (50-day): ${price > sma50 ? 'Bullish' : 'Bearish'}\\n• Momentum: ${rsi > 50 ? 'Positive' : 'Negative'}\\n• Volatility: ${volatility > 0.25 ? 'High' : volatility > 0.15 ? 'Moderate' : 'Low'}\\n\\n💡 TRADING INSIGHTS:\\n• ${price > sma20 && rsi < 70 ? 'Potential uptrend with room to run' : ''}\\n• ${price < sma20 && rsi > 30 ? 'Potential downtrend with selling pressure' : ''}\\n• ${Math.abs(bollingerPosition - 0.5) < 0.2 ? 'Price consolidating in middle of range' : ''}\\n• Watch for breakout above ${formatCurrency(resistance1)} or breakdown below ${formatCurrency(support1)}\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using simulated technical data. Configure API keys for live price data.' : '✅ Based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'technical',\n            ticker: ticker.toUpperCase(),\n            indicators: {\n              price,\n              sma20,\n              sma50,\n              rsi,\n              macd,\n              macdSignal,\n              bollingerUpper,\n              bollingerLower,\n              support1,\n              support2,\n              resistance1,\n              resistance2\n            },\n            signals\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Technical analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  SUPPORT_RESISTANCE: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'SUPPORT_RESISTANCE command requires a ticker symbol. Usage: SUPPORT_RESISTANCE(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const price = profile.price;\n\n        // Generate support and resistance levels based on price\n        const levels = [\n          { type: 'Resistance', level: price * 1.15, strength: 'Strong', touches: 3 },\n          { type: 'Resistance', level: price * 1.08, strength: 'Moderate', touches: 2 },\n          { type: 'Resistance', level: price * 1.03, strength: 'Weak', touches: 1 },\n          { type: 'Current', level: price, strength: 'Current Price', touches: 0 },\n          { type: 'Support', level: price * 0.97, strength: 'Weak', touches: 1 },\n          { type: 'Support', level: price * 0.92, strength: 'Moderate', touches: 2 },\n          { type: 'Support', level: price * 0.85, strength: 'Strong', touches: 4 }\n        ];\n\n        // Calculate distances and probabilities\n        const nearestSupport = levels.filter(l => l.type === 'Support' && l.level < price)[0];\n        const nearestResistance = levels.filter(l => l.type === 'Resistance' && l.level > price)[0];\n\n        const supportDistance = ((price - nearestSupport.level) / price) * 100;\n        const resistanceDistance = ((nearestResistance.level - price) / price) * 100;\n\n        const content = `Support & Resistance Analysis for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n🎯 KEY LEVELS:\\n${levels.map(level => {\n          const distance = ((level.level - price) / price) * 100;\n          const arrow = level.type === 'Current' ? '👉' :\n            level.type === 'Resistance' ? '🔴' : '🟢';\n          return `${arrow} ${level.type}: ${formatCurrency(level.level)} (${level.strength}) ${level.touches > 0 ? `[${level.touches} touches]` : ''} ${level.type !== 'Current' ? `(${formatPercentage(Math.abs(distance) / 100)} away)` : ''}`;\n        }).join('\\n')}\\n\\n📊 LEVEL ANALYSIS:\\n• Nearest Support: ${formatCurrency(nearestSupport.level)} (${formatPercentage(supportDistance / 100)} below)\\n• Nearest Resistance: ${formatCurrency(nearestResistance.level)} (${formatPercentage(resistanceDistance / 100)} above)\\n• Support Strength: ${nearestSupport.strength}\\n• Resistance Strength: ${nearestResistance.strength}\\n\\n📈 TRADING RANGES:\\n• Current Range: ${formatCurrency(nearestSupport.level)} - ${formatCurrency(nearestResistance.level)}\\n• Range Width: ${formatPercentage((nearestResistance.level - nearestSupport.level) / price)}\\n• Position in Range: ${formatPercentage((price - nearestSupport.level) / (nearestResistance.level - nearestSupport.level))}\\n\\n🎯 BREAKOUT TARGETS:\\n• Upside Target: ${formatCurrency(nearestResistance.level * 1.05)}\\n• Downside Target: ${formatCurrency(nearestSupport.level * 0.95)}\\n• Risk/Reward Ratio: ${formatNumber(resistanceDistance / supportDistance, 2)}:1\\n\\n💡 TRADING INSIGHTS:\\n• ${supportDistance < 3 ? '⚠️ Close to support - watch for bounce or breakdown' : ''}\\n• ${resistanceDistance < 3 ? '⚠️ Close to resistance - watch for breakout or rejection' : ''}\\n• ${nearestSupport.strength === 'Strong' ? '🛡️ Strong support should provide good downside protection' : ''}\\n• ${nearestResistance.strength === 'Strong' ? '🚧 Strong resistance may limit upside potential' : ''}\\n• Volume confirmation needed for breakouts\\n\\n🔍 LEVEL QUALITY:\\n• Support levels tested ${nearestSupport.touches} times\\n• Resistance levels tested ${nearestResistance.touches} times\\n• More touches = stronger level\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated levels. Configure API keys for historical price data.' : '✅ Based on historical price action'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'support_resistance',\n            ticker: ticker.toUpperCase(),\n            levels,\n            nearestSupport,\n            nearestResistance,\n            supportDistance,\n            resistanceDistance\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Support & resistance analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Advanced Valuation Model Commands\n * DDM, Residual Income, Asset-Based, and other sophisticated valuation techniques\n */\n\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/dataTransformation';\nimport { dataFetchingService } from '../dataFetching';\n\nexport const valuationCommands = {\n  DDM: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'DDM command requires a ticker symbol. Usage: DDM(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // DDM calculations\n        const currentDividend = profile.dividendYield * profile.price || 0;\n        const dividendGrowthRate = 0.05; // Assumed 5% growth\n        const requiredReturn = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n\n        if (currentDividend === 0) {\n          return {\n            type: 'warning',\n            content: `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n⚠️ NO DIVIDEND ANALYSIS:\\n• Current Dividend: $0.00\\n• Dividend Yield: 0.00%\\n• Company does not pay dividends\\n\\n💡 ALTERNATIVE VALUATION METHODS:\\n• Consider using DCF(${ticker.toUpperCase()}) for non-dividend paying stocks\\n• Growth companies often reinvest earnings rather than pay dividends\\n• Use COMP(${ticker.toUpperCase()}) for relative valuation\\n\\n📊 COMPANY METRICS:\\n• Current Price: ${formatCurrency(profile.price)}\\n• Market Cap: ${formatCurrency(profile.mktCap, 'USD', true)}\\n• P/E Ratio: ${formatNumber(profile.pe, 1)}x\\n• Beta: ${formatNumber(profile.beta, 2)}`\n          };\n        }\n\n        // Gordon Growth Model\n        const gordonValue = currentDividend * (1 + dividendGrowthRate) / (requiredReturn - dividendGrowthRate);\n\n        // Two-stage DDM\n        const highGrowthYears = 5;\n        const highGrowthRate = dividendGrowthRate * 1.5;\n        const terminalGrowthRate = 0.03;\n\n        let presentValueHighGrowth = 0;\n        for (let year = 1; year <= highGrowthYears; year++) {\n          const dividend = currentDividend * Math.pow(1 + highGrowthRate, year);\n          const presentValue = dividend / Math.pow(1 + requiredReturn, year);\n          presentValueHighGrowth += presentValue;\n        }\n\n        const terminalDividend = currentDividend * Math.pow(1 + highGrowthRate, highGrowthYears) * (1 + terminalGrowthRate);\n        const terminalValue = terminalDividend / (requiredReturn - terminalGrowthRate);\n        const presentValueTerminal = terminalValue / Math.pow(1 + requiredReturn, highGrowthYears);\n\n        const twoStageValue = presentValueHighGrowth + presentValueTerminal;\n\n        // Calculate upside/downside\n        const gordonUpside = ((gordonValue - profile.price) / profile.price) * 100;\n        const twoStageUpside = ((twoStageValue - profile.price) / profile.price) * 100;\n\n        const content = `Dividend Discount Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n💰 DIVIDEND INFORMATION:\\n• Current Annual Dividend: ${formatCurrency(currentDividend)}\\n• Dividend Yield: ${formatPercentage(profile.dividendYield)}\\n• Estimated Growth Rate: ${formatPercentage(dividendGrowthRate)}\\n• Required Return (CAPM): ${formatPercentage(requiredReturn)}\\n\\n📊 GORDON GROWTH MODEL:\\n• Fair Value: ${formatCurrency(gordonValue)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(gordonUpside / 100)}\\n\\n📈 TWO-STAGE DDM:\\n• High Growth Period: ${highGrowthYears} years at ${formatPercentage(highGrowthRate)}\\n• Terminal Growth: ${formatPercentage(terminalGrowthRate)}\\n• PV of High Growth Dividends: ${formatCurrency(presentValueHighGrowth)}\\n• PV of Terminal Value: ${formatCurrency(presentValueTerminal)}\\n• Total Fair Value: ${formatCurrency(twoStageValue)}\\n• Upside/(Downside): ${formatPercentage(twoStageUpside / 100)}\\n\\n🎯 VALUATION SUMMARY:\\n• Gordon Model: ${gordonUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(gordonUpside) / 100)}\\n• Two-Stage Model: ${twoStageUpside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(twoStageUpside) / 100)}\\n• Average Fair Value: ${formatCurrency((gordonValue + twoStageValue) / 2)}\\n\\n⚠️ KEY ASSUMPTIONS:\\n• Dividend growth rates are estimates\\n• Required return based on CAPM\\n• Terminal growth rate of ${formatPercentage(terminalGrowthRate)} assumed\\n• Model assumes dividends grow in perpetuity\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'ddm',\n            ticker: ticker.toUpperCase(),\n            results: {\n              currentDividend,\n              gordonValue,\n              twoStageValue,\n              gordonUpside,\n              twoStageUpside,\n              requiredReturn,\n              dividendGrowthRate\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `DDM analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  RESIDUAL_INCOME: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'RESIDUAL_INCOME command requires a ticker symbol. Usage: RESIDUAL_INCOME(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const _financials = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'income-statement');\n\n        // Residual Income calculations\n        const bookValue = profile.bookValue || profile.mktCap / 2; // Fallback estimate\n        const roe = profile.returnOnEquityTTM || 0.15; // Fallback 15%\n        const costOfEquity = (profile.beta || 1.0) * 0.06 + 0.03; // CAPM\n        const netIncome = _financials[0]?.netIncome || profile.mktCap * 0.08; // Fallback estimate\n\n        // Calculate residual income\n        const normalIncome = bookValue * costOfEquity;\n        const residualIncome = netIncome - normalIncome;\n\n        // Project residual income for 5 years\n        const projectionYears = 5;\n        const residualIncomeGrowth = Math.max(-0.05, Math.min(0.10, roe - costOfEquity)); // Fade to zero\n\n        let totalPVResidualIncome = 0;\n        const projections = [];\n\n        for (let year = 1; year <= projectionYears; year++) {\n          const projectedRI = residualIncome * Math.pow(1 + residualIncomeGrowth * (1 - year * 0.15), year);\n          const presentValue = projectedRI / Math.pow(1 + costOfEquity, year);\n          totalPVResidualIncome += presentValue;\n\n          projections.push({\n            year,\n            residualIncome: projectedRI,\n            presentValue\n          });\n        }\n\n        // Terminal value (assume residual income fades to zero)\n        const terminalRI = projections[projectionYears - 1].residualIncome * 0.5;\n        const terminalValue = terminalRI / costOfEquity;\n        const pvTerminalValue = terminalValue / Math.pow(1 + costOfEquity, projectionYears);\n\n        // Calculate intrinsic value\n        const intrinsicValue = bookValue + totalPVResidualIncome + pvTerminalValue;\n        const valuePerShare = intrinsicValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((valuePerShare - profile.price) / profile.price) * 100;\n\n        const content = `Residual Income Model for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BASE METRICS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• ROE: ${formatPercentage(roe)}\\n• Cost of Equity: ${formatPercentage(costOfEquity)}\\n• Net Income: ${formatCurrency(netIncome, 'USD', true)}\\n\\n💰 RESIDUAL INCOME ANALYSIS:\\n• Normal Income: ${formatCurrency(normalIncome, 'USD', true)}\\n• Current Residual Income: ${formatCurrency(residualIncome, 'USD', true)}\\n• RI Growth Rate: ${formatPercentage(residualIncomeGrowth)}\\n\\n📈 5-YEAR PROJECTIONS:\\n${projections.map(p =>\n          `Year ${p.year}: RI ${formatCurrency(p.residualIncome, 'USD', true)}, PV ${formatCurrency(p.presentValue, 'USD', true)}`\n        ).join('\\n')}\\n\\n🎯 VALUATION RESULTS:\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n• PV of Residual Income: ${formatCurrency(totalPVResidualIncome, 'USD', true)}\\n• PV of Terminal Value: ${formatCurrency(pvTerminalValue, 'USD', true)}\\n• Total Intrinsic Value: ${formatCurrency(intrinsicValue, 'USD', true)}\\n• Value Per Share: ${formatCurrency(valuePerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n📊 KEY INSIGHTS:\\n• ${residualIncome > 0 ? 'Company generates positive economic value' : 'Company destroys economic value'}\\n• ROE vs Cost of Equity: ${roe > costOfEquity ? 'Value Creating' : 'Value Destroying'}\\n• ${upside > 0 ? 'Undervalued' : 'Overvalued'} by ${formatPercentage(Math.abs(upside) / 100)}\\n\\n⚠️ MODEL ASSUMPTIONS:\\n• Residual income growth fades over time\\n• Terminal value assumes sustainable competitive advantage\\n• Cost of equity based on CAPM\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'residual_income',\n            ticker: ticker.toUpperCase(),\n            results: {\n              bookValue,\n              residualIncome,\n              intrinsicValue,\n              valuePerShare,\n              upside,\n              projections\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Residual income analysis failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  },\n\n  ASSET_BASED: {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [ticker] = parsedCommand.parameters;\n\n      if (!ticker) {\n        return {\n          type: 'error',\n          content: 'ASSET_BASED command requires a ticker symbol. Usage: ASSET_BASED(AAPL)'\n        };\n      }\n\n      try {\n        const profile = await dataFetchingService.fetchCompanyProfile(ticker.toUpperCase());\n        const balanceSheet = await dataFetchingService.fetchFinancialStatements(ticker.toUpperCase(), 'balance-sheet-statement');\n\n        // Asset-based valuation\n        const totalAssets = balanceSheet[0]?.totalAssets || profile.mktCap * 1.5; // Fallback\n        const totalLiabilities = balanceSheet[0]?.totalLiabilities || profile.totalDebt || totalAssets * 0.4;\n        const bookValue = totalAssets - totalLiabilities;\n\n        // Adjust assets to market value\n        const cashAndEquivalents = balanceSheet[0]?.cashAndCashEquivalents || profile.totalCash || totalAssets * 0.1;\n        const inventory = balanceSheet[0]?.inventory || totalAssets * 0.15;\n        const ppe = balanceSheet[0]?.propertyPlantEquipmentNet || totalAssets * 0.3;\n        const intangibleAssets = balanceSheet[0]?.intangibleAssets || totalAssets * 0.2;\n        const otherAssets = totalAssets - cashAndEquivalents - inventory - ppe - intangibleAssets;\n\n        // Apply market value adjustments\n        const adjustments = {\n          cash: { book: cashAndEquivalents, market: cashAndEquivalents, adjustment: 1.0 },\n          inventory: { book: inventory, market: inventory * 0.8, adjustment: 0.8 }, // 20% discount\n          ppe: { book: ppe, market: ppe * 1.2, adjustment: 1.2 }, // 20% premium for real estate\n          intangibles: { book: intangibleAssets, market: intangibleAssets * 0.5, adjustment: 0.5 }, // 50% discount\n          other: { book: otherAssets, market: otherAssets * 0.9, adjustment: 0.9 }\n        };\n\n        const totalMarketAssets = Object.values(adjustments).reduce((sum, adj) => sum + adj.market, 0);\n        const netAssetValue = totalMarketAssets - totalLiabilities;\n        const navPerShare = netAssetValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n        const upside = ((navPerShare - profile.price) / profile.price) * 100;\n\n        // Liquidation value (more conservative)\n        const liquidationValue = totalMarketAssets * 0.7 - totalLiabilities; // 30% liquidation discount\n        const liquidationPerShare = liquidationValue / (profile.sharesOutstanding || profile.mktCap / profile.price);\n\n        const content = `Asset-Based Valuation for ${profile.companyName} (${ticker.toUpperCase()})\\n\\n📊 BALANCE SHEET SUMMARY:\\n• Total Assets: ${formatCurrency(totalAssets, 'USD', true)}\\n• Total Liabilities: ${formatCurrency(totalLiabilities, 'USD', true)}\\n• Book Value: ${formatCurrency(bookValue, 'USD', true)}\\n\\n💰 ASSET BREAKDOWN & ADJUSTMENTS:\\n• Cash & Equivalents: ${formatCurrency(adjustments.cash.book, 'USD', true)} → ${formatCurrency(adjustments.cash.market, 'USD', true)} (${formatPercentage(adjustments.cash.adjustment - 1)})\\n• Inventory: ${formatCurrency(adjustments.inventory.book, 'USD', true)} → ${formatCurrency(adjustments.inventory.market, 'USD', true)} (${formatPercentage(adjustments.inventory.adjustment - 1)})\\n• PP&E: ${formatCurrency(adjustments.ppe.book, 'USD', true)} → ${formatCurrency(adjustments.ppe.market, 'USD', true)} (${formatPercentage(adjustments.ppe.adjustment - 1)})\\n• Intangibles: ${formatCurrency(adjustments.intangibles.book, 'USD', true)} → ${formatCurrency(adjustments.intangibles.market, 'USD', true)} (${formatPercentage(adjustments.intangibles.adjustment - 1)})\\n• Other Assets: ${formatCurrency(adjustments.other.book, 'USD', true)} → ${formatCurrency(adjustments.other.market, 'USD', true)} (${formatPercentage(adjustments.other.adjustment - 1)})\\n\\n🎯 VALUATION RESULTS:\\n• Adjusted Asset Value: ${formatCurrency(totalMarketAssets, 'USD', true)}\\n• Net Asset Value: ${formatCurrency(netAssetValue, 'USD', true)}\\n• NAV Per Share: ${formatCurrency(navPerShare)}\\n• Current Price: ${formatCurrency(profile.price)}\\n• Upside/(Downside): ${formatPercentage(upside / 100)}\\n\\n🔥 LIQUIDATION ANALYSIS:\\n• Liquidation Value: ${formatCurrency(liquidationValue, 'USD', true)}\\n• Liquidation Per Share: ${formatCurrency(liquidationPerShare)}\\n• Liquidation Premium: ${formatPercentage((liquidationPerShare / profile.price - 1))}\\n\\n📈 ASSET EFFICIENCY:\\n• Asset Turnover: ${formatNumber(profile.revenue / totalAssets, 2)}x\\n• Book Value Multiple: ${formatNumber(profile.price / (bookValue / (profile.sharesOutstanding || profile.mktCap / profile.price)), 2)}x\\n• Tangible Book Multiple: ${formatNumber(profile.pb, 2)}x\\n\\n💡 INSIGHTS:\\n• ${upside > 0 ? 'Trading below asset value - potential value opportunity' : 'Trading above asset value - premium for intangibles/growth'}\\n• Asset-based valuation most relevant for asset-heavy businesses\\n• Consider liquidation value as downside protection\\n\\n${dataFetchingService.demoMode ? '💡 Note: Using estimated data. Configure API keys for live analysis.' : '✅ Analysis based on live market data'}`;\n\n        return {\n          type: 'success',\n          content,\n          data: {\n            analysis: 'asset_based',\n            ticker: ticker.toUpperCase(),\n            results: {\n              totalAssets,\n              netAssetValue,\n              navPerShare,\n              liquidationValue,\n              liquidationPerShare,\n              upside,\n              adjustments\n            }\n          }\n        };\n\n      } catch (error) {\n        return {\n          type: 'error',\n          content: `Asset-based valuation failed: ${error.message}`\n        };\n      }\n    },\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  }\n};\n","/**\n * Command Initializer\n * Registers all available commands with the command registry\n */\n\nimport { commandRegistry } from './commandRegistry';\nimport { automationCommands } from './commands/automationCommands';\nimport { coreCommands } from './commands/coreCommands';\nimport { dataCommands } from './commands/dataCommands';\nimport { esgCommands } from './commands/esgCommands';\nimport { persistenceCommands } from './commands/persistenceCommands';\nimport { portfolioCommands } from './commands/portfolioCommands';\nimport { privateAnalysisCommands } from './commands/privateAnalysisCommands';\nimport { systemCommands } from './commands/systemCommands';\nimport { technicalCommands } from './commands/technicalCommands';\nimport { valuationCommands } from './commands/valuationCommands';\n\n/**\n * Initialize all commands in the registry\n */\nexport function initializeCommands() {\n  // Register Core Commands\n  commandRegistry.register('DCF', coreCommands.DCF, {\n    category: 'CORE',\n    description: 'Discounted Cash Flow valuation with real-time data',\n    usage: 'DCF(ticker)',\n    examples: ['DCF(AAPL)', 'DCF(MSFT)'],\n    tags: ['valuation', 'dcf', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('LBO', coreCommands.LBO, {\n    category: 'CORE',\n    description: 'Leveraged Buyout analysis with return projections',\n    usage: 'LBO(ticker)',\n    examples: ['LBO(TSLA)', 'LBO(NVDA)'],\n    tags: ['lbo', 'private-equity', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('COMP', coreCommands.COMP, {\n    category: 'CORE',\n    description: 'Comparable company analysis with peer multiples',\n    usage: 'COMP(ticker)',\n    examples: ['COMP(GOOGL)', 'COMP(META)'],\n    tags: ['comparable', 'multiples', 'analysis'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('FETCH', coreCommands.FETCH, {\n    category: 'CORE',\n    description: 'Comprehensive company data and financial metrics',\n    usage: 'FETCH(ticker)',\n    examples: ['FETCH(AMZN)', 'FETCH(NFLX)'],\n    tags: ['data', 'profile', 'metrics'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Private Analysis Commands\n  commandRegistry.register('PRIVATE_DCF', privateAnalysisCommands.PRIVATE_DCF, {\n    category: 'CORE',\n    description: 'DCF valuation using private company financial data',\n    usage: 'PRIVATE_DCF()',\n    examples: ['PRIVATE_DCF()'],\n    tags: ['private', 'dcf', 'valuation', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate', 'taxRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RATIOS', privateAnalysisCommands.PRIVATE_RATIOS, {\n    category: 'CORE',\n    description: 'Financial ratios analysis for private company data',\n    usage: 'PRIVATE_RATIOS()',\n    examples: ['PRIVATE_RATIOS()'],\n    tags: ['private', 'ratios', 'analysis', 'margins'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SUMMARY', privateAnalysisCommands.PRIVATE_SUMMARY, {\n    category: 'CORE',\n    description: 'Comprehensive financial summary of private company',\n    usage: 'PRIVATE_SUMMARY()',\n    examples: ['PRIVATE_SUMMARY()'],\n    tags: ['private', 'summary', 'overview', 'financial'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LOAD', privateAnalysisCommands.PRIVATE_LOAD, {\n    category: 'DATA',\n    description: 'Load and verify private company financial data',\n    usage: 'PRIVATE_LOAD()',\n    examples: ['PRIVATE_LOAD()'],\n    tags: ['private', 'data', 'load', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_MONTE_CARLO', privateAnalysisCommands.PRIVATE_MONTE_CARLO, {\n    category: 'ANALYTICS',\n    description: 'Monte Carlo simulation for private company valuation',\n    usage: 'PRIVATE_MONTE_CARLO()',\n    examples: ['PRIVATE_MONTE_CARLO()', 'PRIVATE_MONTE_CARLO(5000)'],\n    tags: ['private', 'monte-carlo', 'simulation', 'risk'],\n    parameterSchema: {\n      required: [],\n      optional: ['iterations']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SCENARIO', privateAnalysisCommands.PRIVATE_SCENARIO, {\n    category: 'ANALYTICS',\n    description: 'Scenario analysis for private company valuation',\n    usage: 'PRIVATE_SCENARIO()',\n    examples: ['PRIVATE_SCENARIO()'],\n    tags: ['private', 'scenario', 'analysis', 'valuation'],\n    parameterSchema: {\n      required: [],\n      optional: ['scenarios']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_GROWTH', privateAnalysisCommands.PRIVATE_GROWTH, {\n    category: 'ANALYTICS',\n    description: 'Growth trend analysis for private company',\n    usage: 'PRIVATE_GROWTH()',\n    examples: ['PRIVATE_GROWTH()'],\n    tags: ['private', 'growth', 'trends', 'cagr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_RISK', privateAnalysisCommands.PRIVATE_RISK, {\n    category: 'ANALYTICS',\n    description: 'Risk assessment for private company',\n    usage: 'PRIVATE_RISK()',\n    examples: ['PRIVATE_RISK()'],\n    tags: ['private', 'risk', 'volatility', 'assessment'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_VALIDATE', privateAnalysisCommands.PRIVATE_VALIDATE, {\n    category: 'DATA',\n    description: 'Validate private company financial data',\n    usage: 'PRIVATE_VALIDATE()',\n    examples: ['PRIVATE_VALIDATE()'],\n    tags: ['private', 'validation', 'data-quality', 'verification'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_EXPORT', privateAnalysisCommands.PRIVATE_EXPORT, {\n    category: 'DATA',\n    description: 'Export private company analysis results',\n    usage: 'PRIVATE_EXPORT()',\n    examples: ['PRIVATE_EXPORT()', 'PRIVATE_EXPORT(csv)'],\n    tags: ['private', 'export', 'data', 'backup'],\n    parameterSchema: {\n      required: [],\n      optional: ['format']\n    }\n  });\n\n  // Register Advanced Private Analysis Commands\n  commandRegistry.register('PRIVATE_WATERFALL', privateAnalysisCommands.PRIVATE_WATERFALL, {\n    category: 'VALUATION',\n    description: 'DCF waterfall and value bridge analysis for private companies',\n    usage: 'PRIVATE_WATERFALL()',\n    examples: ['PRIVATE_WATERFALL()'],\n    tags: ['private', 'dcf', 'waterfall', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['discountRate', 'terminalGrowthRate']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_COMPS', privateAnalysisCommands.PRIVATE_COMPS, {\n    category: 'VALUATION',\n    description: 'Comparable company trading multiples analysis',\n    usage: 'PRIVATE_COMPS()',\n    examples: ['PRIVATE_COMPS()'],\n    tags: ['private', 'comparables', 'trading-multiples', 'peer-analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['sector', 'size']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_LBO', privateAnalysisCommands.PRIVATE_LBO, {\n    category: 'VALUATION',\n    description: 'Leveraged buyout model and returns analysis',\n    usage: 'PRIVATE_LBO()',\n    examples: ['PRIVATE_LBO()'],\n    tags: ['private', 'lbo', 'leveraged-buyout', 'pe-analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['leverage', 'holdPeriod', 'exitMultiple']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_QUALITY', privateAnalysisCommands.PRIVATE_QUALITY, {\n    category: 'ANALYTICS',\n    description: 'Business quality and investment grade assessment',\n    usage: 'PRIVATE_QUALITY()',\n    examples: ['PRIVATE_QUALITY()'],\n    tags: ['private', 'quality', 'investment-grade', 'assessment'],\n    parameterSchema: {\n      required: [],\n      optional: ['weights']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_BENCHMARKS', privateAnalysisCommands.PRIVATE_BENCHMARKS, {\n    category: 'ANALYTICS',\n    description: 'Compare metrics against industry benchmarks',\n    usage: 'PRIVATE_BENCHMARKS()',\n    examples: ['PRIVATE_BENCHMARKS()'],\n    tags: ['private', 'benchmarks', 'industry', 'comparison'],\n    parameterSchema: {\n      required: [],\n      optional: ['industry']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_CASHFLOW', privateAnalysisCommands.PRIVATE_CASHFLOW, {\n    category: 'ANALYTICS',\n    description: 'Analyze cash flow generation and quality',\n    usage: 'PRIVATE_CASHFLOW()',\n    examples: ['PRIVATE_CASHFLOW()'],\n    tags: ['private', 'cashflow', 'quality', 'analysis'],\n    parameterSchema: {\n      required: [],\n      optional: ['years']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_MULTIPLES', privateAnalysisCommands.PRIVATE_MULTIPLES, {\n    category: 'VALUATION',\n    description: 'Valuation using industry multiples approach',\n    usage: 'PRIVATE_MULTIPLES()',\n    examples: ['PRIVATE_MULTIPLES()'],\n    tags: ['private', 'multiples', 'valuation', 'industry'],\n    parameterSchema: {\n      required: [],\n      optional: ['industry', 'size']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_SENSITIVITY', privateAnalysisCommands.PRIVATE_SENSITIVITY, {\n    category: 'ANALYTICS',\n    description: 'Sensitivity analysis on key variables',\n    usage: 'PRIVATE_SENSITIVITY()',\n    examples: ['PRIVATE_SENSITIVITY()'],\n    tags: ['private', 'sensitivity', 'analysis', 'variables'],\n    parameterSchema: {\n      required: [],\n      optional: ['variables', 'ranges']\n    }\n  });\n\n  commandRegistry.register('PRIVATE_WORKFLOW', privateAnalysisCommands.PRIVATE_WORKFLOW, {\n    category: 'AUTOMATION',\n    description: 'Interactive analysis workflow with recommendations',\n    usage: 'PRIVATE_WORKFLOW()',\n    examples: ['PRIVATE_WORKFLOW()'],\n    tags: ['private', 'workflow', 'guidance', 'automation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVATE_DASHBOARD', privateAnalysisCommands.PRIVATE_DASHBOARD, {\n    category: 'REPORTING',\n    description: 'Executive dashboard with key metrics summary',\n    usage: 'PRIVATE_DASHBOARD()',\n    examples: ['PRIVATE_DASHBOARD()'],\n    tags: ['private', 'dashboard', 'executive', 'summary'],\n    parameterSchema: {\n      required: [],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('PRIVATE', privateAnalysisCommands.PRIVATE, {\n    category: 'UTILITY',\n    description: 'Show all available Private Analysis commands (shortcut)',\n    usage: 'PRIVATE()',\n    examples: ['PRIVATE()', 'private'],\n    tags: ['private', 'help', 'commands', 'list'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Portfolio Commands\n  commandRegistry.register('PORTFOLIO', portfolioCommands.PORTFOLIO, {\n    category: 'PORTFOLIO',\n    description: 'Portfolio analysis with risk and diversification metrics',\n    usage: 'PORTFOLIO(tickers, weights)',\n    examples: ['PORTFOLIO([AAPL,MSFT,GOOGL], [0.4,0.3,0.3])', 'PORTFOLIO([SPY,QQQ], [0.6,0.4])'],\n    tags: ['portfolio', 'diversification', 'allocation'],\n    parameterSchema: {\n      required: ['tickers', 'weights'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RISK_METRICS', portfolioCommands.RISK_METRICS, {\n    category: 'PORTFOLIO',\n    description: 'Comprehensive risk analysis including VaR, Sharpe ratio, and volatility',\n    usage: 'RISK_METRICS(ticker, period)',\n    examples: ['RISK_METRICS(AAPL)', 'RISK_METRICS(TSLA, 252)'],\n    tags: ['risk', 'var', 'volatility', 'sharpe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  commandRegistry.register('CORRELATION_MATRIX', portfolioCommands.CORRELATION_MATRIX, {\n    category: 'PORTFOLIO',\n    description: 'Cross-asset correlation analysis for diversification insights',\n    usage: 'CORRELATION_MATRIX(tickers)',\n    examples: ['CORRELATION_MATRIX([AAPL,MSFT,GOOGL])', 'CORRELATION_MATRIX([SPY,QQQ,IWM])'],\n    tags: ['correlation', 'diversification', 'matrix'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('EFFICIENT_FRONTIER', portfolioCommands.EFFICIENT_FRONTIER, {\n    category: 'PORTFOLIO',\n    description: 'Modern portfolio theory optimization and efficient frontier analysis',\n    usage: 'EFFICIENT_FRONTIER(tickers)',\n    examples: ['EFFICIENT_FRONTIER([AAPL,MSFT,GOOGL])', 'EFFICIENT_FRONTIER([SPY,QQQ,IWM,EFA])'],\n    tags: ['optimization', 'efficient-frontier', 'mpt'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DRAWDOWN', portfolioCommands.DRAWDOWN, {\n    category: 'PORTFOLIO',\n    description: 'Maximum drawdown analysis and recovery time estimation',\n    usage: 'DRAWDOWN(ticker, period)',\n    examples: ['DRAWDOWN(AAPL)', 'DRAWDOWN(TSLA, 500)'],\n    tags: ['drawdown', 'risk', 'recovery'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['period']\n    }\n  });\n\n  // Register Advanced Valuation Commands\n  commandRegistry.register('DDM', valuationCommands.DDM, {\n    category: 'VALUATION',\n    description: 'Dividend Discount Model with Gordon Growth and Two-Stage analysis',\n    usage: 'DDM(ticker)',\n    examples: ['DDM(KO)', 'DDM(JNJ)'],\n    tags: ['dividend', 'ddm', 'gordon-growth'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('RESIDUAL_INCOME', valuationCommands.RESIDUAL_INCOME, {\n    category: 'VALUATION',\n    description: 'Residual Income Model for economic value analysis',\n    usage: 'RESIDUAL_INCOME(ticker)',\n    examples: ['RESIDUAL_INCOME(AAPL)', 'RESIDUAL_INCOME(MSFT)'],\n    tags: ['residual-income', 'economic-value', 'roe'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('ASSET_BASED', valuationCommands.ASSET_BASED, {\n    category: 'VALUATION',\n    description: 'Asset-based valuation with market value adjustments',\n    usage: 'ASSET_BASED(ticker)',\n    examples: ['ASSET_BASED(BRK.A)', 'ASSET_BASED(BAC)'],\n    tags: ['asset-based', 'nav', 'liquidation'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register Technical Analysis Commands\n  commandRegistry.register('TECHNICALS', technicalCommands.TECHNICALS, {\n    category: 'TECHNICAL',\n    description: 'Comprehensive technical analysis with RSI, MACD, Bollinger Bands',\n    usage: 'TECHNICALS(ticker)',\n    examples: ['TECHNICALS(AAPL)', 'TECHNICALS(SPY)'],\n    tags: ['technical', 'rsi', 'macd', 'bollinger'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SUPPORT_RESISTANCE', technicalCommands.SUPPORT_RESISTANCE, {\n    category: 'TECHNICAL',\n    description: 'Key price levels and breakout targets analysis',\n    usage: 'SUPPORT_RESISTANCE(ticker)',\n    examples: ['SUPPORT_RESISTANCE(TSLA)', 'SUPPORT_RESISTANCE(QQQ)'],\n    tags: ['support', 'resistance', 'levels', 'breakout'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  // Register ESG & Alternative Data Commands\n  commandRegistry.register('ESG_SCORE', esgCommands.ESG_SCORE, {\n    category: 'ESG',\n    description: 'Environmental, social, governance analysis and scoring',\n    usage: 'ESG_SCORE(ticker)',\n    examples: ['ESG_SCORE(AAPL)', 'ESG_SCORE(TSLA)'],\n    tags: ['esg', 'environmental', 'social', 'governance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('SOCIAL_SENTIMENT', esgCommands.SOCIAL_SENTIMENT, {\n    category: 'ESG',\n    description: 'Social media sentiment analysis across platforms',\n    usage: 'SOCIAL_SENTIMENT(ticker, days)',\n    examples: ['SOCIAL_SENTIMENT(AAPL)', 'SOCIAL_SENTIMENT(TSLA, 30)'],\n    tags: ['sentiment', 'social-media', 'twitter', 'reddit'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  commandRegistry.register('NEWS_IMPACT', esgCommands.NEWS_IMPACT, {\n    category: 'ESG',\n    description: 'News sentiment and price impact analysis',\n    usage: 'NEWS_IMPACT(ticker, days)',\n    examples: ['NEWS_IMPACT(AAPL)', 'NEWS_IMPACT(MSFT, 14)'],\n    tags: ['news', 'sentiment', 'impact', 'catalyst'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['days']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Automation & Workflow Commands\n  commandRegistry.register('WATCHLIST', automationCommands.WATCHLIST, {\n    category: 'AUTOMATION',\n    description: 'Create and manage stock watchlists with analysis',\n    usage: 'WATCHLIST(action, name, tickers)',\n    examples: ['WATCHLIST(list)', 'WATCHLIST(create, \"Tech\", [AAPL,MSFT])', 'WATCHLIST(analyze, \"Tech\")'],\n    tags: ['watchlist', 'portfolio', 'tracking'],\n    parameterSchema: {\n      required: ['action'],\n      optional: ['name', 'tickers']\n    }\n  });\n\n  commandRegistry.register('ALERT', automationCommands.ALERT, {\n    category: 'AUTOMATION',\n    description: 'Set price and metric alerts for stocks',\n    usage: 'ALERT(ticker, condition, value)',\n    examples: ['ALERT(AAPL, \"price_above\", 150)', 'ALERT(list)', 'ALERT(clear)'],\n    tags: ['alerts', 'monitoring', 'notifications'],\n    parameterSchema: {\n      required: ['ticker', 'condition', 'value'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BATCH_ANALYSIS', automationCommands.BATCH_ANALYSIS, {\n    category: 'AUTOMATION',\n    description: 'Analyze multiple stocks simultaneously with ranking',\n    usage: 'BATCH_ANALYSIS(tickers, type)',\n    examples: ['BATCH_ANALYSIS([AAPL,MSFT,GOOGL])', 'BATCH_ANALYSIS([SPY,QQQ,IWM], \"detailed\")'],\n    tags: ['batch', 'screening', 'ranking'],\n    parameterSchema: {\n      required: ['tickers'],\n      optional: ['type']\n    }\n  });\n\n  // Register Data Management Commands\n  commandRegistry.register('EXPORT_JSON', dataCommands.EXPORT_JSON, {\n    category: 'DATA',\n    description: 'Export data to JSON format for backup and sharing',\n    usage: 'EXPORT_JSON(dataType, filename)',\n    examples: ['EXPORT_JSON(\"watchlists\")', 'EXPORT_JSON(\"all\", \"backup.json\")'],\n    tags: ['export', 'backup', 'json'],\n    parameterSchema: {\n      required: ['dataType'],\n      optional: ['filename']\n    }\n  });\n\n  commandRegistry.register('CACHE_STATS', dataCommands.CACHE_STATS, {\n    category: 'DATA',\n    description: 'View cache performance and memory usage statistics',\n    usage: 'CACHE_STATS()',\n    examples: ['CACHE_STATS()'],\n    tags: ['cache', 'performance', 'memory'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('DATA_QUALITY', dataCommands.DATA_QUALITY, {\n    category: 'DATA',\n    description: 'Analyze data completeness and quality for a stock',\n    usage: 'DATA_QUALITY(ticker)',\n    examples: ['DATA_QUALITY(AAPL)', 'DATA_QUALITY(TSLA)'],\n    tags: ['quality', 'validation', 'completeness'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BENCHMARK', dataCommands.BENCHMARK, {\n    category: 'DATA',\n    description: 'Compare stock performance against benchmark index',\n    usage: 'BENCHMARK(ticker, benchmark)',\n    examples: ['BENCHMARK(AAPL, SPY)', 'BENCHMARK(TSLA, QQQ)'],\n    tags: ['benchmark', 'comparison', 'performance'],\n    parameterSchema: {\n      required: ['ticker'],\n      optional: ['benchmark']\n    }\n  });\n\n  // Register System & Performance Commands\n  commandRegistry.register('PERFORMANCE_TEST', systemCommands.PERFORMANCE_TEST, {\n    category: 'SYSTEM',\n    description: 'Run comprehensive system performance benchmarks',\n    usage: 'PERFORMANCE_TEST()',\n    examples: ['PERFORMANCE_TEST()'],\n    tags: ['performance', 'benchmark', 'system'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('API_USAGE', systemCommands.API_USAGE, {\n    category: 'SYSTEM',\n    description: 'Monitor API usage, rate limits, and costs',\n    usage: 'API_USAGE()',\n    examples: ['API_USAGE()'],\n    tags: ['api', 'usage', 'limits', 'cost'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('CONFIG', systemCommands.CONFIG, {\n    category: 'SYSTEM',\n    description: 'View and update system configuration settings',\n    usage: 'CONFIG(setting, value)',\n    examples: ['CONFIG()', 'CONFIG(\"currency\", \"EUR\")', 'CONFIG(\"precision\", 3)'],\n    tags: ['config', 'settings', 'preferences'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  // Register Persistence & Privacy Commands\n  commandRegistry.register('BACKUP_CREATE', persistenceCommands.BACKUP_CREATE, {\n    category: 'PERSISTENCE',\n    description: 'Create a backup of all user data',\n    usage: 'BACKUP_CREATE(description)',\n    examples: ['BACKUP_CREATE()', 'BACKUP_CREATE(\"Before major changes\")'],\n    tags: ['backup', 'data', 'export'],\n    parameterSchema: {\n      required: [],\n      optional: ['description']\n    }\n  });\n\n  commandRegistry.register('BACKUP_LIST', persistenceCommands.BACKUP_LIST, {\n    category: 'PERSISTENCE',\n    description: 'List all available backups',\n    usage: 'BACKUP_LIST()',\n    examples: ['BACKUP_LIST()'],\n    tags: ['backup', 'list', 'management'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('BACKUP_RESTORE', persistenceCommands.BACKUP_RESTORE, {\n    category: 'PERSISTENCE',\n    description: 'Restore data from a backup',\n    usage: 'BACKUP_RESTORE(backupId, overwrite)',\n    examples: ['BACKUP_RESTORE(\"backup_123\")', 'BACKUP_RESTORE(\"backup_123\", \"true\")'],\n    tags: ['backup', 'restore', 'recovery'],\n    parameterSchema: {\n      required: ['backupId'],\n      optional: ['overwrite']\n    }\n  });\n\n  commandRegistry.register('STORAGE_STATS', persistenceCommands.STORAGE_STATS, {\n    category: 'PERSISTENCE',\n    description: 'View storage usage and statistics',\n    usage: 'STORAGE_STATS()',\n    examples: ['STORAGE_STATS()'],\n    tags: ['storage', 'statistics', 'usage'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_CLEANUP', persistenceCommands.PRIVACY_CLEANUP, {\n    category: 'PERSISTENCE',\n    description: 'Clean up expired data according to privacy policies',\n    usage: 'PRIVACY_CLEANUP()',\n    examples: ['PRIVACY_CLEANUP()'],\n    tags: ['privacy', 'cleanup', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PRIVACY_SETTINGS', persistenceCommands.PRIVACY_SETTINGS, {\n    category: 'PERSISTENCE',\n    description: 'View and update privacy settings',\n    usage: 'PRIVACY_SETTINGS(setting, value)',\n    examples: ['PRIVACY_SETTINGS()', 'PRIVACY_SETTINGS(\"analytics\", \"false\")'],\n    tags: ['privacy', 'settings', 'gdpr'],\n    parameterSchema: {\n      required: [],\n      optional: ['setting', 'value']\n    }\n  });\n\n  commandRegistry.register('SYNC_STATUS', persistenceCommands.SYNC_STATUS, {\n    category: 'PERSISTENCE',\n    description: 'View data synchronization status',\n    usage: 'SYNC_STATUS()',\n    examples: ['SYNC_STATUS()'],\n    tags: ['sync', 'cloud', 'status'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  commandRegistry.register('PERSISTENCE_TEST', persistenceCommands.PERSISTENCE_TEST, {\n    category: 'PERSISTENCE',\n    description: 'Run comprehensive persistence layer tests',\n    usage: 'PERSISTENCE_TEST()',\n    examples: ['PERSISTENCE_TEST()'],\n    tags: ['test', 'debug', 'validation'],\n    parameterSchema: {\n      required: [],\n      optional: []\n    }\n  });\n\n  // Register Utility Commands\n  commandRegistry.register('HELP', {\n    execute: async(parsedCommand, _context, _processor) => {\n      const [category] = parsedCommand.parameters;\n\n      // Show ALL commands in detail\n      if (category && category.toLowerCase() === 'all') {\n        const allCommands = commandRegistry.getAllCommands();\n        const categories = commandRegistry.getAllCategories();\n\n        let content = '📚 COMPREHENSIVE COMMAND REFERENCE\\n';\n        content += 'FinanceAnalyst Pro Terminal v2.4.0 - Complete Command Suite\\n';\n        content += '═════════════════════════════════════════════════════════════\\n\\n';\n\n        // Group commands by category\n        categories.forEach(cat => {\n          const categoryCommands = commandRegistry.getCommandsByCategory(cat.key);\n          if (categoryCommands.length > 0) {\n            content += `${cat.icon} ${cat.name.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n            content += `${cat.description}\\n`;\n            content += '─'.repeat(50) + '\\n';\n\n            categoryCommands.forEach(cmd => {\n              content += `\\n• ${cmd.usage}\\n`;\n              content += `  ${cmd.description}\\n`;\n              if (cmd.examples && cmd.examples.length > 0) {\n                content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n              }\n              if (cmd.tags && cmd.tags.length > 0) {\n                content += `  Tags: ${cmd.tags.join(', ')}\\n`;\n              }\n            });\n            content += '\\n';\n          }\n        });\n\n        content += `\\n📊 SUMMARY: ${allCommands.length} total commands across ${categories.length} categories\\n`;\n        content += '\\n💡 TIP: Use HELP(category) for specific category details\\n';\n        content += '💡 TIP: Use HELP() for quick overview and featured commands';\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      if (category) {\n        // Show commands for specific category\n        const categoryCommands = commandRegistry.getCommandsByCategory(category.toUpperCase());\n        if (categoryCommands.length === 0) {\n          return {\n            type: 'error',\n            content: `Unknown category: ${category}. Use HELP() to see all categories or HELP(ALL) for complete command list.`\n          };\n        }\n\n        let content = `📋 ${category.toUpperCase()} COMMANDS (${categoryCommands.length})\\n`;\n        content += '═'.repeat(40) + '\\n\\n';\n\n        categoryCommands.forEach(cmd => {\n          content += `• ${cmd.usage}\\n`;\n          content += `  ${cmd.description}\\n`;\n          if (cmd.examples && cmd.examples.length > 0) {\n            content += `  Examples: ${cmd.examples.join(', ')}\\n`;\n          }\n          content += '\\n';\n        });\n\n        content += 'Use HELP() for overview or HELP(ALL) for all commands.';\n\n        return {\n          type: 'system',\n          content\n        };\n      }\n\n      // Show all categories and featured commands (default view)\n      const categories = commandRegistry.getAllCategories();\n      const stats = commandRegistry.getCommandStats();\n      const totalCommands = Object.values(stats).reduce((sum, cat) => sum + cat.count, 0);\n\n      const content = `🚀 FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite\\n\\n📊 COMMAND CATEGORIES:\\n${categories.map(cat =>\n        `${cat.icon} ${cat.name} (${stats[cat.key]?.count || 0} commands)\\n   ${cat.description}`\n      ).join('\\n\\n')}\\n\\n⭐ FEATURED COMMANDS:\\n• DCF(AAPL) - Discounted Cash Flow with live data\\n• LBO(TSLA) - Leveraged Buyout analysis\\n• PORTFOLIO([AAPL,MSFT], [0.5,0.5]) - Portfolio analysis\\n• RISK_METRICS(GOOGL) - Comprehensive risk analysis\\n• CORRELATION_MATRIX([AAPL,MSFT,GOOGL]) - Cross-asset correlations\\n• PRIVATE_DCF() - Private company DCF valuation\\n• PRIVATE_RATIOS() - Private company financial ratios\\n• PRIVATE_SUMMARY() - Private company analysis summary\\n\\n🔧 PRIVATE ANALYSIS COMMANDS:\\n• PRIVATE_LOAD() - Load private company data\\n• PRIVATE_DCF() - DCF valuation for private companies\\n• PRIVATE_RATIOS() - Calculate private company ratios\\n• PRIVATE_SUMMARY() - Generate private company summary\\n\\n💡 HELP COMMANDS:\\n• HELP() - Show this overview (current)\\n• HELP(category) - Show commands for specific category\\n• HELP(ALL) - Show complete list of ALL ${totalCommands} commands\\n\\n📋 AVAILABLE CATEGORIES:\\n${categories.map(cat => `• ${cat.key}`).join(' • ')}\\n\\n🚀 ENHANCED FEATURES:\\n• Watchlists: Create and track custom stock lists\\n• Alerts: Set price and metric notifications\\n• Batch Analysis: Analyze multiple stocks simultaneously\\n• ESG Scoring: Environmental, social, governance analysis\\n• Technical Analysis: RSI, MACD, support/resistance\\n• Advanced Valuation: DDM, residual income, asset-based models\\n• Private Company Analysis: Full financial modeling suite\\n\\n📊 ${categories.length} categories • ${totalCommands} total commands available\\n\\n💡 Pro Tip: Use HELP(ALL) to see every single command with examples!`;\n\n      return {\n        type: 'system',\n        content\n      };\n    },\n    parameterSchema: {\n      required: [],\n      optional: ['category']\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show available commands and usage information',\n    usage: 'HELP(category)',\n    examples: ['HELP()', 'HELP(PORTFOLIO)', 'HELP(CORE)', 'HELP(ALL)'],\n    tags: ['help', 'documentation', 'commands']\n  });\n\n  commandRegistry.register('CLEAR', {\n    execute: async(_parsedCommand, _context, _processor) => {\n      return {\n        type: 'system',\n        content: 'clear_terminal', // Special flag for terminal to clear\n        action: 'clear'\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Clear the terminal screen',\n    usage: 'CLEAR()',\n    examples: ['CLEAR()'],\n    tags: ['utility', 'clear', 'terminal']\n  });\n\n  commandRegistry.register('STATUS', {\n    execute: async(parsedCommand, context, processor) => {\n      const settings = processor.getAllSettings();\n      const variables = processor.getAllVariables();\n      const history = processor.getHistory(5);\n\n      const content = `System Status Report\n\n🔧 SYSTEM CONFIGURATION:\n• Currency: ${settings.currency}\n• Precision: ${settings.precision} decimal places\n• Date Format: ${settings.dateFormat}\n• Demo Mode: ${context.demoMode ? 'Enabled' : 'Disabled'}\n\n📊 SESSION STATISTICS:\n• Commands Executed: ${history.length}\n• Variables Stored: ${Object.keys(variables).length}\n• Last Command: ${history[history.length - 1]?.input || 'None'}\n\n🌐 API STATUS:\n• Data Sources: ${context.demoMode ? 'Demo Data' : 'Live Market Data'}\n• Rate Limits: Normal\n• Cache Status: Active\n\n💾 MEMORY USAGE:\n• Command History: ${history.length} entries\n• Variable Storage: ${Object.keys(variables).length} variables\n• Cache Size: Optimal\n\n✅ All systems operational`;\n\n      return {\n        type: 'system',\n        content\n      };\n    }\n  }, {\n    category: 'UTILITY',\n    description: 'Show system status and configuration',\n    usage: 'STATUS()',\n    examples: ['STATUS()'],\n    tags: ['status', 'system', 'configuration']\n  });\n\n  console.log('✅ Command registry initialized with', commandRegistry.getAllCommands().length, 'commands');\n}\n\n// Auto-initialize when module is imported\ninitializeCommands();\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport { commandProcessor } from '../../../services/commandProcessor';\nimport { commandRegistry } from '../../../services/commandRegistry';\nimport { dataFetchingService } from '../../../services/dataFetching';\nimport { persistenceManager } from '../../../services/persistence/PersistenceManager';\n// Import command initializer to ensure commands are registered\nimport '../../../services/commandInitializer';\n\nconst TerminalInterface = ({ onCommandExecute, calculationResults: _calculationResults }) => {\n  const [commands, setCommands] = useState([\n    {\n      id: 1,\n      type: 'system',\n      content: 'FinanceAnalyst Pro Terminal v2.4.0 - Enhanced Command Suite Ready',\n      timestamp: new Date()\n    },\n    {\n      id: 2,\n      type: 'system',\n      content:\n        'Type \"HELP()\" for available commands or start with DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5])',\n      timestamp: new Date()\n    }\n  ]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestion, setSelectedSuggestion] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const terminalRef = useRef(null);\n  const inputRef = useRef(null);\n  const commandProcessorRef = useRef(commandProcessor);\n\n  // Get available commands from registry for suggestions\n  const getAvailableCommands = () => {\n    const allCommands = commandRegistry.getAllCommands();\n    const commandInfos = allCommands.map(cmdName => {\n      const info = commandRegistry.getCommandInfo(cmdName);\n      return info ? info.usage : cmdName;\n    });\n    return commandInfos;\n  };\n\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [commands]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Initialize persistence layer\n    const initializePersistence = async() => {\n      try {\n        await persistenceManager.initialize();\n        console.log('✅ Persistence layer initialized in terminal');\n      } catch (error) {\n        console.error('❌ Failed to initialize persistence in terminal:', error);\n      }\n    };\n\n    initializePersistence();\n  }, []);\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setCurrentInput(value);\n\n    if (value.length > 0) {\n      const availableCommands = getAvailableCommands();\n      const suggestions = commandRegistry.getSuggestions(value);\n      const commandSuggestions = suggestions.map(s => s.usage);\n\n      // Also include partial matches from available commands\n      const partialMatches = availableCommands.filter(cmd =>\n        cmd.toLowerCase().includes(value.toLowerCase()) &&\n        !commandSuggestions.includes(cmd)\n      );\n\n      const allSuggestions = [...commandSuggestions, ...partialMatches];\n      setSuggestions(allSuggestions.slice(0, 8));\n      setShowSuggestions(allSuggestions.length > 0);\n      setSelectedSuggestion(0);\n    } else {\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      executeCommand();\n    } else if (e.key === 'ArrowUp' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.max(0, prev - 1));\n    } else if (e.key === 'ArrowDown' && showSuggestions) {\n      e.preventDefault();\n      setSelectedSuggestion(prev => Math.min(suggestions.length - 1, prev + 1));\n    } else if (e.key === 'Tab' && showSuggestions) {\n      e.preventDefault();\n      setCurrentInput(suggestions[selectedSuggestion]);\n      setShowSuggestions(false);\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  const executeCommand = async() => {\n    if (!currentInput.trim()) return;\n\n    const newCommand = {\n      id: commands.length + 1,\n      type: 'user',\n      content: currentInput,\n      timestamp: new Date()\n    };\n\n    setCommands(prev => [...prev, newCommand]);\n    setIsLoading(true);\n    setCurrentInput('');\n    setShowSuggestions(false);\n\n    try {\n      // Use the new command processor\n      const context = {\n        demoMode: dataFetchingService.demoMode,\n        showLoading: (message) => {\n          const loadingCommand = {\n            id: commands.length + 2,\n            type: 'info',\n            content: message,\n            timestamp: new Date()\n          };\n          setCommands(prev => [...prev, loadingCommand]);\n        }\n      };\n\n      const response = await commandProcessorRef.current.processCommand(currentInput, context);\n\n      // Handle special actions\n      if (response.action === 'clear') {\n        setCommands([\n          {\n            id: 1,\n            type: 'system',\n            content: 'Terminal cleared',\n            timestamp: new Date()\n          }\n        ]);\n        return;\n      }\n\n      const responseCommand = {\n        id: commands.length + 2,\n        type: response.type,\n        content: response.content,\n        timestamp: new Date(),\n        data: response.data\n      };\n\n      setCommands(prev => [...prev, responseCommand]);\n\n      if (onCommandExecute) {\n        onCommandExecute(currentInput, response);\n      }\n    } catch (error) {\n      const errorCommand = {\n        id: commands.length + 2,\n        type: 'error',\n        content: `Error: ${error.message}`,\n        timestamp: new Date()\n      };\n      setCommands(prev => [...prev, errorCommand]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectSuggestion = suggestion => {\n    setCurrentInput(suggestion);\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900 text-green-400 font-mono text-sm\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Terminal\" size={16} className=\"text-green-400\" />\n          <span className=\"text-green-400 font-medium\">Financial Terminal</span>\n          <span className=\"text-xs text-blue-400\">• Enhanced Command Suite</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div\n            className={`w-2 h-2 rounded-full ${isLoading ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`}\n          />\n          <span className=\"text-xs text-gray-400\">{isLoading ? 'Processing...' : 'Connected'}</span>\n        </div>\n      </div>\n\n      {/* Terminal Content */}\n      <div\n        ref={terminalRef}\n        className=\"flex-1 overflow-y-auto p-4 space-y-2\"\n        onClick={() => inputRef.current?.focus()}\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={e => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            inputRef.current?.focus();\n          }\n        }}\n      >\n        {commands.map(command => (\n          <div key={command.id} className=\"space-y-1\">\n            <div className=\"flex items-start space-x-2\">\n              {command.type === 'user' && (\n                <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n              )}\n              {command.type === 'system' && (\n                <Icon name=\"Info\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'success' && (\n                <Icon name=\"CheckCircle\" size={14} className=\"text-green-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'error' && (\n                <Icon name=\"XCircle\" size={14} className=\"text-red-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'warning' && (\n                <Icon name=\"AlertTriangle\" size={14} className=\"text-yellow-400 mt-0.5 shrink-0\" />\n              )}\n              {command.type === 'info' && (\n                <Icon name=\"Info\" size={14} className=\"text-blue-400 mt-0.5 shrink-0\" />\n              )}\n              <div className=\"flex-1\">\n                <pre className=\"whitespace-pre-wrap break-words\">{command.content}</pre>\n                {command.data && (\n                  <div className=\"mt-2 p-2 bg-gray-800 rounded border border-gray-700\">\n                    <div className=\"text-xs text-gray-400\">\n                      Real-time calculation data available • Analysis:{' '}\n                      {command.data.analysis || 'financial'}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-center space-x-2 text-yellow-400\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full\" />\n            <span>Processing command...</span>\n          </div>\n        )}\n\n        {/* Input Line */}\n        <div className=\"flex items-center space-x-2 relative\">\n          <span className=\"text-blue-400 shrink-0\">analyst@finpro:~$</span>\n          <div className=\"flex-1 relative\">\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={currentInput}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"w-full bg-transparent text-green-400 outline-none border-none\"\n              placeholder=\"Enter command (e.g., DCF(AAPL), PORTFOLIO([AAPL,MSFT], [0.5,0.5]))...\"\n              autoComplete=\"off\"\n              disabled={isLoading}\n            />\n\n            {/* Suggestions Dropdown */}\n            {showSuggestions && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-600 rounded-md shadow-lg z-10 max-h-48 overflow-y-auto\">\n                {suggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className={`px-3 py-2 cursor-pointer text-sm ${\n                      index === selectedSuggestion\n                        ? 'bg-gray-700 text-green-400'\n                        : 'text-gray-300 hover:bg-gray-700'\n                    }`}\n                    onClick={() => selectSuggestion(suggestion)}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        selectSuggestion(suggestion);\n                      }\n                    }}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerminalInterface;\n","import React, { useState } from 'react';\n\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst VariableInputs = ({ onVariableChange, onBulkEdit }) => {\n  const [activeSection, setActiveSection] = useState('assumptions');\n  const [editMode, setEditMode] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const [variables, setVariables] = useState({\n    assumptions: {\n      revenue_growth: {\n        value: 0.052,\n        unit: '%',\n        description: 'Annual revenue growth rate',\n        category: 'Growth'\n      },\n      ebitda_margin: {\n        value: 0.235,\n        unit: '%',\n        description: 'EBITDA as % of revenue',\n        category: 'Profitability'\n      },\n      tax_rate: { value: 0.25, unit: '%', description: 'Corporate tax rate', category: 'Tax' },\n      capex_revenue: {\n        value: 0.035,\n        unit: '%',\n        description: 'CapEx as % of revenue',\n        category: 'Investment'\n      },\n      working_capital_revenue: {\n        value: 0.02,\n        unit: '%',\n        description: 'Working capital as % of revenue',\n        category: 'Working Capital'\n      },\n      terminal_growth: {\n        value: 0.025,\n        unit: '%',\n        description: 'Long-term growth rate',\n        category: 'Terminal'\n      }\n    },\n    cost_of_capital: {\n      risk_free_rate: {\n        value: 0.032,\n        unit: '%',\n        description: 'Risk-free rate (10Y Treasury)',\n        category: 'Market'\n      },\n      market_premium: {\n        value: 0.065,\n        unit: '%',\n        description: 'Equity risk premium',\n        category: 'Market'\n      },\n      beta: { value: 1.15, unit: 'x', description: 'Asset beta coefficient', category: 'Risk' },\n      cost_of_debt: {\n        value: 0.045,\n        unit: '%',\n        description: 'Pre-tax cost of debt',\n        category: 'Debt'\n      },\n      debt_equity_ratio: {\n        value: 0.4,\n        unit: 'x',\n        description: 'Target debt-to-equity ratio',\n        category: 'Capital Structure'\n      }\n    },\n    market_data: {\n      current_share_price: {\n        value: 125.5,\n        unit: '$',\n        description: 'Current trading price',\n        category: 'Market'\n      },\n      shares_outstanding: {\n        value: 20.0,\n        unit: 'M',\n        description: 'Shares outstanding',\n        category: 'Equity'\n      },\n      market_cap: {\n        value: 2510,\n        unit: '$M',\n        description: 'Current market capitalization',\n        category: 'Valuation'\n      },\n      enterprise_value: {\n        value: 2810,\n        unit: '$M',\n        description: 'Current enterprise value',\n        category: 'Valuation'\n      },\n      net_debt: { value: 300, unit: '$M', description: 'Net debt position', category: 'Debt' }\n    }\n  });\n\n  const sections = [\n    { id: 'assumptions', label: 'Key Assumptions', icon: 'Settings' },\n    { id: 'cost_of_capital', label: 'Cost of Capital', icon: 'Percent' },\n    { id: 'market_data', label: 'Market Data', icon: 'TrendingUp' }\n  ];\n\n  const handleVariableChange = (section, key, newValue) => {\n    const updatedVariables = {\n      ...variables,\n      [section]: {\n        ...variables[section],\n        [key]: {\n          ...variables[section][key],\n          value: parseFloat(newValue) || 0\n        }\n      }\n    };\n    setVariables(updatedVariables);\n\n    if (onVariableChange) {\n      onVariableChange(section, key, newValue);\n    }\n  };\n\n  const formatValue = (value, unit) => {\n    if (unit === '%') {\n      return (value * 100).toFixed(1);\n    } else if (unit === '$' || unit === '$M') {\n      return value.toFixed(2);\n    } else {\n      return value.toFixed(3);\n    }\n  };\n\n  const getVariablesByCategory = sectionData => {\n    const categories = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      const category = variable.category || 'Other';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push({ key, ...variable });\n    });\n    return categories;\n  };\n\n  const filteredVariables = sectionData => {\n    if (!searchTerm) return sectionData;\n\n    const filtered = {};\n    Object.entries(sectionData).forEach(([key, variable]) => {\n      if (\n        key.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        variable.description.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        filtered[key] = variable;\n      }\n    });\n    return filtered;\n  };\n\n  const resetToDefaults = () => {\n    // Reset to default values\n    const defaultVariables = { ...variables };\n    // This would typically reset to saved defaults\n    setVariables(defaultVariables);\n  };\n\n  const exportVariables = () => {\n    const exportData = JSON.stringify(variables, null, 2);\n    const blob = new Blob([exportData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'model_variables.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-card\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Sliders\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Variable Inputs</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName={editMode ? 'Check' : 'Edit'}\n            onClick={() => setEditMode(!editMode)}\n          >\n            {editMode ? 'Done' : 'Edit'}\n          </Button>\n          <Button\n            variant=\"outline\" size=\"sm\" iconName=\"Download\"\n            onClick={exportVariables}\n          >\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"relative\">\n          <Icon\n            name=\"Search\"\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n          />\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder=\"Search variables...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n          />\n        </div>\n      </div>\n\n      {/* Section Tabs */}\n      <div className=\"flex border-b border-border overflow-x-auto\">\n        {sections.map(section => (\n          <button\n            key={section.id}\n            onClick={() => setActiveSection(section.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-smooth ${\n              activeSection === section.id\n                ? 'bg-primary text-primary-foreground border-b-2 border-primary'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={section.icon} size={16} />\n            <span>{section.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Variables Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {Object.entries(getVariablesByCategory(filteredVariables(variables[activeSection]))).map(\n          ([category, categoryVariables]) => (\n            <div key={category} className=\"mb-6\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center space-x-2\">\n                <Icon name=\"Folder\" size={16} />\n                <span>{category}</span>\n              </h4>\n              <div className=\"space-y-3\">\n                {categoryVariables.map(variable => (\n                  <div\n                    key={variable.key}\n                    className=\"p-3 bg-background border border-border rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <label className=\"text-sm font-medium text-foreground capitalize\">\n                          {variable.key.replace(/_/g, ' ')}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">{variable.description}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        {editMode ? (\n                          <div className=\"flex items-center space-x-1\">\n                            <input\n                              type=\"number\"\n                              value={formatValue(variable.value, variable.unit)}\n                              onChange={e =>\n                                handleVariableChange(activeSection, variable.key, e.target.value)\n                              }\n                              step={variable.unit === '%' ? '0.1' : '0.01'}\n                              className=\"w-20 px-2 py-1 text-sm bg-input border border-border rounded text-foreground focus:outline-none focus:ring-1 focus:ring-ring\"\n                            />\n                            <span className=\"text-sm text-muted-foreground\">{variable.unit}</span>\n                          </div>\n                        ) : (\n                          <div className=\"text-right\">\n                            <span className=\"text-lg font-semibold text-foreground\">\n                              {formatValue(variable.value, variable.unit)}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground ml-1\">\n                              {variable.unit}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Variable Impact Indicator */}\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-success rounded-full\" />\n                        <span className=\"text-muted-foreground\">Within range</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Icon name=\"TrendingUp\" size={12} />\n                        <span>High impact</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )\n        )}\n\n        {Object.keys(filteredVariables(variables[activeSection])).length === 0 && (\n          <div className=\"text-center py-12\">\n            <Icon name=\"Search\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">No variables found</h4>\n            <p className=\"text-muted-foreground\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n      {/* Footer Actions */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n            <Icon name=\"Info\" size={12} />\n            <span>Changes auto-save every 30 seconds</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\" size=\"sm\" iconName=\"RotateCcw\"\n              onClick={resetToDefaults}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Grid\"\n              onClick={() => onBulkEdit && onBulkEdit()}\n            >\n              Bulk Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VariableInputs;\n","import React, { useState } from 'react';\n\nimport Icon from '../../components/AppIcon';\nimport SEOHead from '../../components/SEO/SEOHead';\nimport Button from '../../components/ui/Button';\nimport Header from '../../components/ui/Header';\n\nimport AuditTrail from './components/AuditTrail';\nimport CalculationResults from './components/CalculationResults';\nimport FormulaBuilder from './components/FormulaBuilder';\nimport ModelTemplates from './components/ModelTemplates';\nimport TerminalInterface from './components/TerminalInterface';\nimport VariableInputs from './components/VariableInputs';\n\nconst FinancialModelWorkspace = () => {\n  const [activeLayout, setActiveLayout] = useState('dual-pane');\n  const [leftPanelContent, setLeftPanelContent] = useState('terminal');\n  const [rightPanelContent, setRightPanelContent] = useState('results');\n  const [modelState, _setModelState] = useState({\n    name: 'DCF_Analysis_v2.3',\n    saved: true,\n    calculating: false,\n    lastSaved: new Date()\n  });\n\n  const [calculationResults, setCalculationResults] = useState(null);\n\n  const handleCommandExecute = (command, result) => {\n    setCalculationResults(result);\n  };\n\n  const renderLeftPanel = () => {\n    switch (leftPanelContent) {\n      case 'terminal':\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n      case 'variables':\n        return <VariableInputs />;\n      case 'formulas':\n        return <FormulaBuilder />;\n      case 'templates':\n        return <ModelTemplates />;\n      default:\n        return (\n          <TerminalInterface\n            onCommandExecute={handleCommandExecute}\n            calculationResults={calculationResults}\n          />\n        );\n    }\n  };\n\n  const renderRightPanel = () => {\n    switch (rightPanelContent) {\n      case 'results':\n        return <CalculationResults results={calculationResults} />;\n      case 'audit':\n        return <AuditTrail />;\n      default:\n        return <CalculationResults results={calculationResults} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <SEOHead\n        title=\"Financial Model Workspace | FinanceAnalyst Pro\"\n        description=\"Professional financial modeling workspace with advanced DCF analysis, LBO tools, and real-time collaboration features for finance professionals.\"\n        canonical=\"/\"\n        keywords=\"financial modeling, DCF analysis, LBO modeling, financial workspace, valuation tools, Excel alternative\"\n      />\n      <Header />\n\n      {/* Main Workspace */}\n      <main id=\"main-content\" className=\"flex flex-col h-screen pt-16\" role=\"main\">\n        {/* Toolbar */}\n        <div className=\"bg-gray-800 border-b border-gray-700 px-4 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"FileText\" className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"font-medium\">{modelState.name}</span>\n              <span\n                className={`text-xs px-2 py-1 rounded ${\n                  modelState.saved ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'\n                }`}\n              >\n                {modelState.saved ? 'Saved' : 'Unsaved'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Layout Controls */}\n            <div className=\"flex items-center space-x-1 bg-gray-700 rounded-lg p-1\">\n              <Button\n                variant={activeLayout === 'single-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('single-pane')}\n                aria-label=\"Single-pane layout\"\n              >\n                <Icon name=\"Square\" className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={activeLayout === 'dual-pane' ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setActiveLayout('dual-pane')}\n                aria-label=\"Dual-pane layout\"\n              >\n                <Icon name=\"Columns\" className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Panel Controls */}\n            <div className=\"flex items-center space-x-1\">\n              <select\n                value={leftPanelContent}\n                onChange={(e) => setLeftPanelContent(e.target.value)}\n                className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                aria-label=\"Select left panel content\"\n              >\n                <option value=\"terminal\">Terminal</option>\n                <option value=\"variables\">Variables</option>\n                <option value=\"formulas\">Formulas</option>\n                <option value=\"templates\">Templates</option>\n              </select>\n\n              {activeLayout === 'dual-pane' && (\n                <select\n                  value={rightPanelContent}\n                  onChange={(e) => setRightPanelContent(e.target.value)}\n                  className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm\"\n                  aria-label=\"Select right panel content\"\n                >\n                  <option value=\"results\">Results</option>\n                  <option value=\"audit\">Audit Trail</option>\n                </select>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Panel */}\n          <div\n            className={`${\n              activeLayout === 'dual-pane' ? 'w-1/2' : 'w-full'\n            } border-r border-gray-700 overflow-hidden`}\n          >\n            {renderLeftPanel()}\n          </div>\n\n          {/* Right Panel */}\n          {activeLayout === 'dual-pane' && (\n            <div className=\"w-1/2 overflow-hidden\">\n              {renderRightPanel()}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default FinancialModelWorkspace;\n"],"names":["CalculationResults","results","_results","onExport","activeTab","setActiveTab","useState","expandedSections","setExpandedSections","Set","mockResults","summary","enterpriseValue","equityValue","sharePrice","impliedReturn","confidence","cashFlows","year","revenue","ebitda","fcf","pv","sensitivity","wacc","growth","matrix","scenarios","name","probability","irr","multiples","metric","current","peer_avg","premium","formatCurrency","value","decimals","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercent","toFixed","renderSummary","jsxs","className","children","jsx","Icon","size","width","Button","variant","iconName","onClick","id","label","icon","map","tab","cf","index","rowIndex","colIndex","Math","abs","scenario","multiple","Date","toLocaleTimeString","FormulaBuilder","onFormulaCreate","variables","_variables","selectedCategory","setSelectedCategory","draggedFunction","setDraggedFunction","currentFormula","setCurrentFormula","formulaName","setFormulaName","isBuilding","setIsBuilding","dropZoneRef","useRef","functionCategories","valuation","functions","syntax","description","financial","statistical","mathematical","validateFormula","match","length","Object","entries","key","category","func","draggable","onDragStart","e","dataTransfer","effectAllowed","handleDragStart","newFormula","addFunction","formula","role","tabIndex","onKeyDown","preventDefault","htmlFor","type","onChange","target","placeholder","ref","onDragOver","dropEffect","onDrop","disabled","timestamp","ModelTemplates","onTemplateSelect","onTemplateCreate","searchTerm","setSearchTerm","showCreateModal","setShowCreateModal","templateCategories","templates","complexity","timeToComplete","lastUsed","popularity","features","lbo","comps","merger","getComplexityColor","filteredTemplates","filter","template","toLowerCase","includes","handleTemplateSelect","feature","rows","commandRegistry","constructor","this","commands","Map","categories","aliases","initializeCategories","set","register","handler","metadata","commandName","toUpperCase","commandInfo","usage","examples","parameterSchema","tags","version","deprecated","experimental","forEach","alias","get","push","getHandler","command","aliasTarget","aliasCommand","getCommandInfo","getCommandsByCategory","categoryInfo","cmdName","getAllCommands","Array","from","keys","getAllCategories","searchCommands","query","_name","score","calculateSearchScore","sort","a","b","some","tag","getSuggestions","partial","partialLower","suggestions","startsWith","localeCompare","hasCommand","has","getCommandStats","stats","categoryKey","count","DataMigrationService","currentVersion","migrationKey","backupKey","migrations","to","migrate","migrateToV1_0_0","bind","checkAndMigrate","currentStoredVersion","localStorage","getItem","performVersionMigration","performInitialMigration","setItem","success","error","Error","message","String","legacyData","detectLegacyData","createMigrationBackup","fromVersion","toVersion","migrationPath","findMigrationPath","currentData","exportCurrentData","migration","restoreFromBackup","oldVariables","JSON","parse","oldSettings","settings","oldWatchlists","watchlists","oldAlerts","alerts","dataToMigrate","migratedWatchlists","migrateWatchlistsFormat","stringify","migratedAlerts","migrateAlertsFormat","migratedPreferences","migratePreferencesFormat","migratedVariables","migrateVariablesFormat","cleanupLegacyData","migrated","isArray","watchlist","tickers","stocks","created","toISOString","split","lastUpdated","data","alert","now","random","ticker","condition","triggered","precision","dateFormat","theme","notifications","autoSave","commandHistory","dataRetention","privacy","analytics","crashReporting","dataSharing","removeItem","backup","backupData","getMigrationStatus","storedVersion","hasBackup","needsMigration","availableMigrations","clearBackup","CompressionUtils","compressionFormat","textEncoder","TextEncoder","textDecoder","TextDecoder","compress","window","compressWithStream","compressWithLZString","decompress","compressedData","isNativeCompressed","decompressWithStream","decompressWithLZString","stream","CompressionStream","writer","writable","getWriter","reader","readable","getReader","dataBuffer","encode","write","close","chunks","done","readerDone","read","totalLength","reduce","sum","chunk","combined","Uint8Array","offset","arrayBufferToBase64","buffer","replace","compressedBuffer","base64ToArrayBuffer","DecompressionStream","decode","dictionary","result","dictSize","i","fromCharCode","char","compressed","Uint16Array","previous","code","isLZStringCompressed","isCompressed","getCompressionRatio","originalData","originalSize","Blob","estimateCompressionBenefit","compressedSize","ratio","savings","savingsPercentage","worthCompressing","isAvailable","getInfo","nativeCompressionAvailable","fallbackAvailable","defaultFormat","available","performanceTest","testData","test","fill","repeat","numbers","_","compressStart","performance","compressTime","decompressStart","decompressTime","compressionRatio","totalTime","iterations","method","bytes","binary","byteLength","btoa","base64","atob","charCodeAt","IndexedDBService","dbName","dbVersion","db","compressionUtils","stores","keyPath","autoIncrement","indexes","unique","analysis_history","command_history","cached_data","user_models","export_data","initialize","indexedDB","openDatabase","cleanupExpiredData","Promise","resolve","reject","request","open","onerror","onsuccess","onupgradeneeded","event","createObjectStores","storeName","objectStoreNames","contains","deleteObjectStore","config","store","createObjectStore","createIndex","options","dataObject","performTransaction","put","retrieve","expiry","remove","delete","clear","storeObj","getKeys","getAllKeys","getAll","limit","filteredResults","slice","indexName","getStats","total","records","recordCount","storeSize","record","exportAll","exportData","importData","overwrite","imported","skipped","errors","cleaned","cachedData","mode","operation","transaction","objectStore","oncomplete","isStorageAvailable","storeCount","CryptoUtils","algorithm","keyLength","ivLength","tagLength","initializeKey","storedKey","keyData","cryptoKey","crypto","subtle","importKey","generateKey","exportedKey","exportKey","keyString","encrypt","iv","getRandomValues","encryptedBuffer","decrypt","encryptedData","decryptedBuffer","hash","hashBuffer","digest","verifyIntegrity","expectedHash","generateRandomString","array","substring","deriveKeyFromPassword","password","salt","passwordBuffer","saltBuffer","keyMaterial","deriveKey","keyInitialized","clearSensitiveData","ArrayBuffer","view","encryptStart","encrypted","encryptTime","decryptStart","decryptTime","dataSize","encryptedSize","LocalStorageService","prefix","maxSize","cryptoUtils","testKey","ttl","validate","validateData","storageObject","serializedData","storageKey","validateTTL","decompressed","used","totalSize","itemCount","itemSizes","usagePercentage","largestItem","max","hasSpace","cleanup","seen","WeakSet","checkCircular","obj","add","writeStart","writeTime","readStart","readTime","SessionManager","sessionKey","userKey","preferencesKey","currentSession","currentUser","sessionTimeout","listeners","defaultPreferences","loadSession","setupSessionMonitoring","hasSession","createSession","userInfo","sessionId","generateSessionId","session","userId","generateUserId","lastActivity","expires","userAgent","navigator","platform","language","timezone","DateTimeFormat","resolvedOptions","timeZone","user","email","lastLogin","loginCount","preferences","storeSession","storeUser","notifyListeners","sessionData","userData","destroySession","updateActivity","getSession","getUser","isAuthenticated","getPreferences","updatePreferences","newPreferences","getSessionStats","sessionDuration","timeUntilExpiry","lastActivityAge","userName","userCreated","isExpired","isActive","exportSessionData","exportTimestamp","importSessionData","addEventListener","callback","removeEventListener","toString","substr","throttledUpdate","throttle","document","passive","setInterval","hidden","inThrottle","args","arguments","context","apply","setTimeout","persistenceManager","sessionManager","migrationService","isInitialized","storageQuota","storageStrategy","checkStorageAvailability","all","estimateStorageQuota","availableStorage","getAvailableStorage","ensureInitialized","storage","determineStorageLayer","promises","confirm","getStorageStats","localStorageStats","indexedDBStats","totalUsed","quota","includeMetadata","_compress","localStorageData","indexedDBData","storageStats","exportOptions","validateImportData","estimate","commandProcessor","persistenceInitialized","maxHistorySize","initializePersistence","loadPersistedData","history","saveData","variablesObj","fromEntries","processCommand","input","startTime","parsedCommand","parseCommand","historyEntry","createErrorResponse","validationResult","validateParameters","valid","execute","executionTime","catch","trimmed","trim","functionMatch","paramString","parameters","parseParameters","rawInput","parts","params","inQuotes","inBrackets","quoteChar","parseParameterValue","endsWith","arrayContent","item","parseFloat","required","optional","join","maxParams","content","cmd","getHistory","clearHistory","setVariable","getVariable","getAllVariables","updateSetting","getSetting","getAllSettings","automationCommands","WATCHLIST","async","_context","processor","action","listName","analysis","tickerArray","t","stockData","profile","dataFetchingService","fetchCompanyProfile","companyName","price","change","changes","changePercent","changesPercentage","marketCap","mktCap","pe","totalValue","stock","avgChange","formatPercentage","best","s","worst","min","formatNumber","analysisResults","pb","beta","recommendation","r","ALERT","undefined","newAlert","shouldTrigger","currentValue","BATCH_ANALYSIS","_processor","_analysisType","debtToEquity","returnOnEquityTTM","profitMargin","roe","rating","avgScore","topPick","strongBuys","buys","coreCommands","DCF","demoMode","dcfInputs","fetchDCFInputs","dcfResults","calculateDCFValuation","currentPrice","fairValue","upside","terminalValue","projections","proj","LBO","financials","fetchFinancialStatements","lboInputs","debt","totalDebt","cash","totalCash","lboResults","calculateLBOReturns","purchasePrice","equityInvestment","exitEquityValue","totalReturn","moic","exitEbitda","exitMultiple","exitEnterpriseValue","managementFees","carriedInterest","netReturn","COMP","peers","fetchPeerComparables","companyData","symbol","peRatio","evToEbitda","enterpriseValueOverEBITDA","priceToBook","compAnalysis","calculateComparableMetrics","peer","peerStatistics","median","relativeValuation","peRatioRelative","evEbitdaRelative","priceToBookRelative","marketCapPercentile","FETCH","industry","sector","fullTimeEmployees","eps","ps","enterpriseValueOverRevenue","bookValue","priceHigh52","priceLow52","dividendYield","dataCommands","EXPORT_JSON","dataType","filename","jsonString","suggestedFilename","CACHE_STATS","_parsedCommand","cacheSize","cache","cacheKeys","cacheTypes","hitRate","avgResponseTime","estimatedMemory","metrics","DATA_QUALITY","checks","field","quality","revenueTTM","overallQuality","check","missingFields","completeFields","dataAge","freshnessScore","status","qualityText","BENCHMARK","benchmark","stockProfile","benchmarkProfile","relativeMetrics","ytd","oneYear","threeYear","fiveYear","benchmarkPerformance","outperformance","estimatedCorrelation","correlationLabel","values","x","esgCommands","ESG_SCORE","sectorMultiplier","Technology","Healthcare","Energy","Utilities","Industrials","Materials","baseSector","sectorScore","companySize","environmentalScore","socialScore","governanceScore","overallScore","riskFactors","opportunities","trends","environmental","social","governance","risk","opp","scores","overall","SOCIAL_SENTIMENT","days","sentimentScore","volumeScore","trendDirection","sources","mentions","floor","sentiment","themes","topic","totalMentions","source","avgSentiment","period","overallSentiment","NEWS_IMPACT","newsItems","date","headline","impact","priceChange","volume","totalPriceImpact","avgVolume","backupService","backupVersion","maxBackupSize","maxBackups","createBackup","includeSettings","includeWatchlists","includeAlerts","includeHistory","includeCachedData","analysisHistory","backupString","backupId","generateBackupId","storeBackup","cleanupOldBackups","restoreBackup","selectiveRestore","createBackupBeforeRestore","retrieveBackup","isVersionCompatible","dataToRestore","filterBackupData","restoreResults","restored","details","determineStorageType","backupTimestamp","restoreTimestamp","listBackups","backupKeys","backups","getTime","deleteBackup","exportBackupToFile","dataString","blob","importBackupFromFile","fileContent","getBackupStats","totalBackups","oldestBackup","newestBackup","encryptedBackups","compressedBackups","backupRecord","backupsToDelete","dataTypes","filtered","privacyService","retentionPolicies","session_data","privacySettings","cookieConsent","trackingConsent","dataCategories","essential","functional","marketing","external","policies","scheduleCleanup","updatePrivacySettings","newSettings","handlePrivacySettingChanges","cleanupNonEssentialData","cleanupAnalyticsData","removeDataSharingMarkers","setRetentionPolicy","policy","specificType","typesToClean","retentionDays","cleanupDataType","cutoffTime","cleanupCommandHistory","cleanupAnalysisHistory","cleanupCachedData","cleanupExportData","cleanupSessionData","entry","allHistory","allCached","allExports","_cutoffTime","nonEssentialTypes","analyticsTypes","exportUserData","includeEssential","includeFunctional","includeAnalytics","deleteAllUserData","confirmation","databases","deleteDatabase","getPrivacyReport","cleanupResults","lastCleanup","compliance","gdprCompliant","ccpaCompliant","retentionPoliciesActive","getPrivacySettings","getRetentionPolicies","syncService","syncEndpoint","syncInterval","lastSyncTime","syncInProgress","conflictResolutionStrategy","syncQueue","maxQueueSize","endpoint","interval","conflictResolution","queue","setupPeriodicSync","queueSyncOperation","syncOperation","generateOperationId","retries","onLine","processSyncQueue","processed","failed","operations","op","performFullSync","reason","localData","getLocalSyncData","remoteData","getRemoteData","mergedData","resolveConflicts","applyMergedData","syncableTypes","typeData","lastModified","checksum","calculateChecksum","merged","allTypes","local","remote","resolveDataConflict","mergeData","mergeWatchlists","mergeAlerts","remoteIds","getSyncStatus","queueSize","isOnline","hasEndpoint","strategy","persistenceTestSuite","testResults","isRunning","runAllTests","getTestSummary","passed","testPersistenceManagerInitialization","testDataStorageAndRetrieval","testDataRemoval","testStorageStatistics","testBackupCreation","testBackupListing","testBackupRestore","testPrivacySettings","testDataCleanup","testSyncStatus","testDataLifecycle","testErrorHandling","testName","assert","recordFailure","storeResult","retrievedData","stored","retrieved","indexedStoreResult","removeResult","backupsCount","restoreResult","recordSkip","updatedSettings","cleanupResult","lifecycle","step","updatedData","retrievedUpdated","retrievedAfterRemoval","initial","updated","afterRemoval","invalidResult","successRate","testPersistence","persistenceCommands","BACKUP_CREATE","BACKUP_LIST","toLocaleDateString","toLocaleString","BACKUP_RESTORE","shouldOverwrite","STORAGE_STATS","totalUsedMB","totalAvailableMB","quotaMB","PRIVACY_CLEANUP","PRIVACY_SETTINGS","setting","val","boolValue","SYNC_STATUS","PERSISTENCE_TEST","find","calculateVolatility","mean","variance","pow","sqrt","getMarginIcon","margin","gross","excellent","good","fair","operating","privateAnalysisCommands","PRIVATE_DCF","defaultFinancialData","periods","statements","incomeStatement","revenues","operatingIncomes","margins","totalRevenue","operatingIncome","assumptions","discountRate","terminalGrowthRate","projectionYears","taxRate","latestRevenue","revenueGrowthRate","projectedRevenue","projectedOperatingIncome","projectedFCF","presentValue","totalPresentValue","terminalPresentValue","PRIVATE_RATIOS","ratios","totalCOGS","totalCostOfGoodsSold","grossProfit","netIncome","grossMargin","operatingMargin","netMargin","cogsPercentage","growthRates","currentRevenue","previousRevenue","currentOperating","previousOperating","revenueGrowth","operatingGrowth","g","PRIVATE_SUMMARY","latestIndex","latest","revenueBreakdown","injectables","surgery","wellness","weightloss","retailSales","energyDevices","PRIVATE_LOAD","balanceSheet","cashFlow","dataStructure","incomeStatementItems","balanceSheetItems","cashFlowItems","PRIVATE_MONTE_CARLO","latestPeriod","baseRevenue","baseOperatingIncome","simulations","marginChange","valuations","p50","p25","p75","PRIVATE_SCENARIO","bear","base","bull","PRIVATE_GROWTH","avgGrowth","rate","cagr","every","PRIVATE_RISK","rev","opIncome","revenueVolatility","marginVolatility","riskScore","riskLevel","assessGrowthSustainability","PRIVATE_VALIDATE","validationResults","financialStatements","hasNegativeRevenue","reasonableMargins","passedTests","totalTests","PRIVATE_EXPORT","company","dcf","export","PRIVATE_BENCHMARKS","benchmarks","industryBenchmarks","revenuePerSqFt","revenuePerProvider","injectableMargin","ebitdaMargin","customerRetention","percentage","str","maxScore","competitiveGrade","competitiveScore","grade","PRIVATE_CASHFLOW","cashFlowAnalysis","depreciation","operatingCashFlow","freeCashFlow","fcfMargin","avgFCFMargin","latestFCF","fcfs","isIncreasing","isDecreasing","assessCashFlowTrend","fcfGrowth","leverage","calculateOperatingLeverage","PRIVATE_MULTIPLES","industryMultiples","evRevenue","typical","evEbitda","revenueMultiple","conservative","ebitdaMultiple","earningsMultiple","typicalValuations","v","avgValuation","minValuation","maxValuation","PRIVATE_SENSITIVITY","baseEbitda","revenueChanges","marginChanges","multipleBase","newValuation","valuationChange","baseMargin","newEbitda","revenueElasticity","marginElasticity","baseCase","sensitivities","PRIVATE_WATERFALL","waterfallSteps","cumulative","pv5Years","pvTerminal","arrow","PRIVATE_COMPS","comparables","currentMargin","avgEvRevenue","comp","avgEvEbitda","avgMargin","tradingValuationRevenue","tradingValuationEbitda","avgTradingValuation","peerAverages","impliedValuation","PRIVATE_LBO","equityContribution","debtFinancing","interestRate","holdPeriod","ebitdaGrowthRate","projectedEbitda","remainingDebt","debtPaydown","yearEbitda","interestPayment","debtReduction","reduction","exitValue","netProceeds","ebitdaYear","returns","PRIVATE_QUALITY","qualityMetrics","revenueGrowthConsistency","volatility","calculateGrowthConsistency","revenueRecurring","recurringPortion","estimateRecurringRevenue","weight","marginStability","calculateMarginStability","profitabilityTrend","trend","calculateProfitabilityTrend","cashConversion","workingCapitalEfficiency","marketPosition","scalability","growthRate","assessScalability","debtLevels","liquidityPosition","qualityGrade","m","identifyWeaknesses","PRIVATE_WORKFLOW","workflowSteps","completed","next","overallProgress","nextStep","findIndex","Benchmarking","presentFields","assessDataCompleteness","steps","completedSteps","assessAnalysisDepth","progress","PRIVATE_DASHBOARD","performanceScore","round","calculatePerformanceScore","padEnd","kpis","PRIVATE","desc","cat","categoryCommands","totalCommands","systemCommands","PERFORMANCE_TEST","tests","cmdStart","duration","dataStart","memStart","memoryUsage","process","heapUsed","heapTotal","cacheStart","totalDuration","statusIcon","API_USAGE","daily","calls","remaining","monthly","endpoints","dailyUsagePercent","monthlyUsagePercent","totalEndpointCalls","rateLimitStatus","estimatedCost","l","usagePercents","CONFIG","validSettings","oldValue","newValue","technicalCommands","TECHNICALS","fetchMarketData","sma20","sma50","ema12","ema26","rsi","macd","macdSignal","macdHistogram","bollingerUpper","bollingerLower","bollingerPosition","support1","support2","resistance1","resistance2","signals","signal","indicators","SUPPORT_RESISTANCE","levels","level","strength","touches","nearestSupport","nearestResistance","supportDistance","resistanceDistance","distance","valuationCommands","DDM","currentDividend","dividendGrowthRate","requiredReturn","gordonValue","highGrowthYears","highGrowthRate","presentValueHighGrowth","dividend","terminalDividend","presentValueTerminal","twoStageValue","gordonUpside","twoStageUpside","RESIDUAL_INCOME","_financials","costOfEquity","normalIncome","residualIncome","residualIncomeGrowth","totalPVResidualIncome","projectedRI","terminalRI","pvTerminalValue","intrinsicValue","valuePerShare","sharesOutstanding","p","ASSET_BASED","totalAssets","totalLiabilities","cashAndEquivalents","cashAndCashEquivalents","inventory","ppe","propertyPlantEquipmentNet","intangibleAssets","otherAssets","adjustments","book","market","adjustment","intangibles","other","totalMarketAssets","adj","netAssetValue","navPerShare","liquidationValue","liquidationPerShare","portfolioCommands","PORTFOLIO","RISK_METRICS","CORRELATION_MATRIX","EFFICIENT_FRONTIER","DRAWDOWN","allCommands","TerminalInterface","onCommandExecute","calculationResults","_calculationResults","setCommands","currentInput","setCurrentInput","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestion","setSelectedSuggestion","isLoading","setIsLoading","terminalRef","inputRef","commandProcessorRef","useEffect","scrollTop","scrollHeight","focus","executeCommand","newCommand","prev","showLoading","loadingCommand","response","responseCommand","errorCommand","selectSuggestion","suggestion","availableCommands","info","commandSuggestions","partialMatches","allSuggestions","autoComplete","VariableInputs","onVariableChange","onBulkEdit","activeSection","setActiveSection","editMode","setEditMode","setVariables","revenue_growth","unit","ebitda_margin","tax_rate","capex_revenue","working_capital_revenue","terminal_growth","cost_of_capital","risk_free_rate","market_premium","cost_of_debt","debt_equity_ratio","market_data","current_share_price","shares_outstanding","market_cap","enterprise_value","net_debt","formatValue","filteredVariables","sectionData","variable","url","URL","createObjectURL","createElement","href","download","click","revokeObjectURL","section","getVariablesByCategory","categoryVariables","updatedVariables","handleVariableChange","defaultVariables","FinancialModelWorkspace","activeLayout","setActiveLayout","leftPanelContent","setLeftPanelContent","rightPanelContent","setRightPanelContent","modelState","_setModelState","saved","calculating","lastSaved","setCalculationResults","handleCommandExecute","SEOHead","title","canonical","keywords","Header","renderLeftPanel","AuditTrail"],"mappings":"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"}
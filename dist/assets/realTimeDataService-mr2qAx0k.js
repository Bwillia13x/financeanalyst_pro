const t=new class{constructor(){this.subscribers=new Map,this.connections=new Map,this.dataCache=new Map,this.updateInterval=500,this.isActive=!1,this.marketDataTypes=new Set(["stock_price","interest_rates","fx_rates","commodity_prices","volatility_index","bond_yields","economic_indicators"])}subscribe(t,e,s){const a=`${t}_${e}`;return this.subscribers.has(a)||this.subscribers.set(a,new Set),this.subscribers.get(a).add(s),this.connections.has(a)||this.startDataFeed(t,e),this.dataCache.has(a)&&s(this.dataCache.get(a)),()=>{this.unsubscribe(t,e,s)}}unsubscribe(t,e,s){const a=`${t}_${e}`,i=this.subscribers.get(a);i&&(i.delete(s),0===i.size&&this.stopDataFeed(a))}startDataFeed(t,e){const s=`${t}_${e}`;switch(t){case"stock_price":this.startStockPriceFeed(s,e);break;case"interest_rates":this.startInterestRateFeed(s,e);break;case"fx_rates":this.startFXRateFeed(s,e);break;case"commodity_prices":this.startCommodityFeed(s,e);break;case"bond_yields":this.startBondYieldFeed(s,e);break;case"volatility_index":this.startVolatilityFeed(s,e);break;case"economic_indicators":this.startEconomicIndicatorFeed(s,e)}}startStockPriceFeed(t,e){const s=this.getBasePrice(e);let a=s;const i=setInterval(()=>{const i=this.updateInterval/864e5,r=2*(Math.random()-.5),n=a*(1e-4*i+.02*Math.sqrt(i)*r);a=Math.max(.01,a+n);const c={symbol:e,price:a,change:a-s,changePercent:(a-s)/s*100,timestamp:(new Date).toISOString(),marketOpen:this.isMarketOpen()};this.updateSubscribers(t,c)},this.updateInterval);this.connections.set(t,i)}startInterestRateFeed(t,e){let s=this.getBaseInterestRate(e);const a=setInterval(()=>{const a=.01*(Math.random()-.5);s=Math.max(0,s+a);const i={symbol:e,rate:s,timestamp:(new Date).toISOString()};this.updateSubscribers(t,i)},5*this.updateInterval);this.connections.set(t,a)}updateSubscribers(t,e){this.dataCache.set(t,e);const s=this.subscribers.get(t);s&&s.forEach(t=>{try{t(e)}catch(s){}})}stopDataFeed(t){const e=this.connections.get(t);e&&(clearInterval(e),this.connections.delete(t),this.dataCache.delete(t))}getBasePrice(t){return{AAPL:175.84,MSFT:378.85,GOOGL:142.56,TSLA:248.42,AMZN:151.94}[t]||100}getBaseInterestRate(t){return{USD_3M:5.25,USD_10Y:4.15,EUR_3M:3.85,EUR_10Y:2.45}[t]||4}isMarketOpen(){const t=new Date,e=t.getDay(),s=t.getHours();return e>=1&&e<=5&&s>=9&&s<16}startFXRateFeed(t,e){let s=this.getBaseFXRate(e);const a=setInterval(()=>{const a=2*(Math.random()-.5)*.005;s=Math.max(.01,s*(1+a));const i={symbol:e,rate:s,change:100*a,timestamp:(new Date).toISOString()};this.updateSubscribers(t,i)},this.updateInterval);this.connections.set(t,a)}startCommodityFeed(t,e){let s=this.getBaseCommodityPrice(e);const a=setInterval(()=>{const a="OIL"===e?.03:.02,i=2*(Math.random()-.5)*a;s=Math.max(1,s*(1+i));const r={symbol:e,price:s,change:100*i,timestamp:(new Date).toISOString()};this.updateSubscribers(t,r)},2*this.updateInterval);this.connections.set(t,a)}startBondYieldFeed(t,e){let s=this.getBaseBondYield(e);const a=setInterval(()=>{const a=.02*(Math.random()-.5);s=Math.max(0,s+a);const i={symbol:e,yield:s,timestamp:(new Date).toISOString()};this.updateSubscribers(t,i)},3*this.updateInterval);this.connections.set(t,a)}startVolatilityFeed(t,e){let s=this.getBaseVolatility(e);const a=setInterval(()=>{const a=2*(Math.random()-.5);s=Math.max(5,Math.min(80,s+a));const i={symbol:e,volatility:s,timestamp:(new Date).toISOString()};this.updateSubscribers(t,i)},4*this.updateInterval);this.connections.set(t,a)}startEconomicIndicatorFeed(t,e){let s=this.getBaseEconomicIndicator(e);const a=setInterval(()=>{const a=.1*(Math.random()-.5);s=Math.max(0,s+a);const i={symbol:e,value:s,timestamp:(new Date).toISOString()};this.updateSubscribers(t,i)},10*this.updateInterval);this.connections.set(t,a)}getBaseFXRate(t){return{EURUSD:1.085,GBPUSD:1.265,USDJPY:149.5,USDCHF:.875,AUDUSD:.658}[t]||1}getBaseCommodityPrice(t){return{OIL:85.5,GOLD:2050,SILVER:24.8,COPPER:8.2,NATGAS:3.15}[t]||50}getBaseBondYield(t){return{US10Y:4.25,US2Y:4.85,DE10Y:2.35,GB10Y:4.15,JP10Y:.75}[t]||3}getBaseVolatility(t){return{VIX:18.5,VVIX:95.2,MOVE:105.8}[t]||20}getBaseEconomicIndicator(t){return{GDP_GROWTH:2.4,INFLATION:3.2,UNEMPLOYMENT:3.8,CONSUMER_CONF:102.5}[t]||100}getCurrentData(t,e){const s=`${t}_${e}`;return this.dataCache.get(s)}getAvailableDataTypes(){return Array.from(this.marketDataTypes)}subscribeMultiple(t){const e=[];return t.forEach(({dataType:t,symbol:s,callback:a})=>{const i=this.subscribe(t,s,a);e.push(i)}),()=>{e.forEach(t=>t())}}};export{t as r};
//# sourceMappingURL=realTimeDataService-mr2qAx0k.js.map

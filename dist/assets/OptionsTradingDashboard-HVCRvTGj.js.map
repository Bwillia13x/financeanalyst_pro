{"version":3,"file":"OptionsTradingDashboard-HVCRvTGj.js","sources":["../../src/services/optionsEngine.js","../../src/components/Options/OptionsTradingDashboard.jsx"],"sourcesContent":["/**\n * Options & Derivatives Pricing Engine\n * Black-Scholes, Greeks, volatility modeling, and exotic options\n */\n\nclass OptionsEngine {\n  constructor() {\n    this.volSurface = new Map();\n    this.riskFreeRates = new Map();\n    this.dividendYields = new Map();\n  }\n\n  /**\n   * Black-Scholes Option Pricing\n   */\n\n  // Standard Black-Scholes formula for European options\n  blackScholes(optionType, S, K, T, r, sigma, q = 0) {\n    const d1 = this.calculateD1(S, K, T, r, sigma, q);\n    const d2 = this.calculateD2(d1, sigma, T);\n    \n    const Nd1 = this.cumulativeNormalDistribution(d1);\n    const Nd2 = this.cumulativeNormalDistribution(d2);\n    const Nnd1 = this.cumulativeNormalDistribution(-d1);\n    const Nnd2 = this.cumulativeNormalDistribution(-d2);\n\n    const discountFactor = Math.exp(-r * T);\n    const dividendFactor = Math.exp(-q * T);\n\n    let optionPrice, intrinsicValue;\n\n    if (optionType.toLowerCase() === 'call') {\n      optionPrice = S * dividendFactor * Nd1 - K * discountFactor * Nd2;\n      intrinsicValue = Math.max(S - K, 0);\n    } else {\n      optionPrice = K * discountFactor * Nnd2 - S * dividendFactor * Nnd1;\n      intrinsicValue = Math.max(K - S, 0);\n    }\n\n    const timeValue = optionPrice - intrinsicValue;\n    const moneyness = S / K;\n\n    return {\n      optionPrice,\n      intrinsicValue,\n      timeValue,\n      moneyness,\n      d1,\n      d2,\n      impliedParameters: {\n        spot: S,\n        strike: K,\n        timeToExpiry: T,\n        riskFreeRate: r,\n        volatility: sigma,\n        dividendYield: q\n      }\n    };\n  }\n\n  // Calculate Greeks (risk sensitivities)\n  calculateGreeks(optionType, S, K, T, r, sigma, q = 0) {\n    const d1 = this.calculateD1(S, K, T, r, sigma, q);\n    const d2 = this.calculateD2(d1, sigma, T);\n    \n    const Nd1 = this.cumulativeNormalDistribution(d1);\n    const Nd2 = this.cumulativeNormalDistribution(d2);\n    const nd1 = this.normalDistribution(d1);\n    const nd2 = this.normalDistribution(d2);\n\n    const discountFactor = Math.exp(-r * T);\n    const dividendFactor = Math.exp(-q * T);\n\n    let delta, gamma, theta, vega, rho;\n\n    // Delta (price sensitivity to underlying)\n    if (optionType.toLowerCase() === 'call') {\n      delta = dividendFactor * Nd1;\n    } else {\n      delta = dividendFactor * (Nd1 - 1);\n    }\n\n    // Gamma (delta sensitivity to underlying)\n    gamma = (dividendFactor * nd1) / (S * sigma * Math.sqrt(T));\n\n    // Vega (price sensitivity to volatility)\n    vega = S * dividendFactor * nd1 * Math.sqrt(T) / 100; // Per 1% volatility change\n\n    // Theta (price sensitivity to time decay)\n    const thetaTerm1 = -(S * dividendFactor * nd1 * sigma) / (2 * Math.sqrt(T));\n    const thetaTerm2 = r * K * discountFactor;\n    const thetaTerm3 = q * S * dividendFactor;\n\n    if (optionType.toLowerCase() === 'call') {\n      theta = (thetaTerm1 - thetaTerm2 * Nd2 + thetaTerm3 * Nd1) / 365; // Per day\n    } else {\n      theta = (thetaTerm1 + thetaTerm2 * this.cumulativeNormalDistribution(-d2) - thetaTerm3 * this.cumulativeNormalDistribution(-d1)) / 365;\n    }\n\n    // Rho (price sensitivity to interest rate)\n    if (optionType.toLowerCase() === 'call') {\n      rho = K * T * discountFactor * Nd2 / 100; // Per 1% rate change\n    } else {\n      rho = -K * T * discountFactor * this.cumulativeNormalDistribution(-d2) / 100;\n    }\n\n    return {\n      delta: delta,\n      gamma: gamma,\n      theta: theta,\n      vega: vega,\n      rho: rho,\n      lambda: delta * (S / this.blackScholes(optionType, S, K, T, r, sigma, q).optionPrice), // Leverage\n      charm: this.calculateCharm(optionType, S, K, T, r, sigma, q), // Delta decay\n      vanna: this.calculateVanna(S, K, T, r, sigma, q), // Delta sensitivity to volatility\n      volga: this.calculateVolga(S, K, T, r, sigma, q)  // Vega sensitivity to volatility\n    };\n  }\n\n  // Implied Volatility using Newton-Raphson method\n  calculateImpliedVolatility(optionType, marketPrice, S, K, T, r, q = 0, tolerance = 0.0001, maxIterations = 100) {\n    let sigma = 0.2; // Initial guess\n    \n    for (let i = 0; i < maxIterations; i++) {\n      const bsPrice = this.blackScholes(optionType, S, K, T, r, sigma, q).optionPrice;\n      const priceDiff = bsPrice - marketPrice;\n      \n      if (Math.abs(priceDiff) < tolerance) {\n        return {\n          impliedVolatility: sigma,\n          iterations: i + 1,\n          priceAccuracy: priceDiff,\n          annualizedVol: sigma,\n          volPercentage: sigma * 100\n        };\n      }\n      \n      // Calculate vega for Newton-Raphson iteration\n      const vega = this.calculateGreeks(optionType, S, K, T, r, sigma, q).vega * 100;\n      \n      if (Math.abs(vega) < 1e-10) break; // Avoid division by zero\n      \n      sigma = sigma - (priceDiff / vega);\n      \n      // Ensure volatility remains positive\n      if (sigma <= 0) sigma = 0.001;\n      if (sigma > 5) sigma = 5; // Cap at 500% volatility\n    }\n    \n    throw new Error('Implied volatility calculation did not converge');\n  }\n\n  /**\n   * Advanced Greeks (Second-order)\n   */\n\n  calculateCharm(optionType, S, K, T, r, sigma, q) {\n    const d1 = this.calculateD1(S, K, T, r, sigma, q);\n    const d2 = this.calculateD2(d1, sigma, T);\n    const nd1 = this.normalDistribution(d1);\n    const dividendFactor = Math.exp(-q * T);\n\n    const term1 = q * dividendFactor * this.cumulativeNormalDistribution(optionType.toLowerCase() === 'call' ? d1 : -d1);\n    const term2 = (dividendFactor * nd1 * (2 * (r - q) * T - d2 * sigma * Math.sqrt(T))) / (2 * T * sigma * Math.sqrt(T));\n\n    return optionType.toLowerCase() === 'call' ? term1 - term2 : -term1 - term2;\n  }\n\n  calculateVanna(S, K, T, r, sigma, q) {\n    const d1 = this.calculateD1(S, K, T, r, sigma, q);\n    const d2 = this.calculateD2(d1, sigma, T);\n    const nd1 = this.normalDistribution(d1);\n    const dividendFactor = Math.exp(-q * T);\n\n    return -(dividendFactor * nd1 * d2) / sigma;\n  }\n\n  calculateVolga(S, K, T, r, sigma, q) {\n    const d1 = this.calculateD1(S, K, T, r, sigma, q);\n    const d2 = this.calculateD2(d1, sigma, T);\n    const nd1 = this.normalDistribution(d1);\n    const dividendFactor = Math.exp(-q * T);\n\n    return S * dividendFactor * nd1 * Math.sqrt(T) * (d1 * d2) / sigma;\n  }\n\n  /**\n   * American Options (Binomial Trees)\n   */\n\n  americanOptionBinomial(optionType, S, K, T, r, sigma, q = 0, steps = 100) {\n    const dt = T / steps;\n    const u = Math.exp(sigma * Math.sqrt(dt));\n    const d = 1 / u;\n    const p = (Math.exp((r - q) * dt) - d) / (u - d);\n    const discount = Math.exp(-r * dt);\n\n    // Initialize asset prices at maturity\n    const assetPrices = [];\n    const optionValues = [];\n\n    for (let i = 0; i <= steps; i++) {\n      assetPrices[i] = S * Math.pow(u, steps - i) * Math.pow(d, i);\n      \n      if (optionType.toLowerCase() === 'call') {\n        optionValues[i] = Math.max(assetPrices[i] - K, 0);\n      } else {\n        optionValues[i] = Math.max(K - assetPrices[i], 0);\n      }\n    }\n\n    // Work backward through the tree\n    for (let j = steps - 1; j >= 0; j--) {\n      for (let i = 0; i <= j; i++) {\n        const spotPrice = S * Math.pow(u, j - i) * Math.pow(d, i);\n        \n        // European value\n        const europeanValue = discount * (p * optionValues[i] + (1 - p) * optionValues[i + 1]);\n        \n        // Intrinsic value (early exercise)\n        let intrinsicValue;\n        if (optionType.toLowerCase() === 'call') {\n          intrinsicValue = Math.max(spotPrice - K, 0);\n        } else {\n          intrinsicValue = Math.max(K - spotPrice, 0);\n        }\n        \n        // American option value is max of European and intrinsic\n        optionValues[i] = Math.max(europeanValue, intrinsicValue);\n      }\n    }\n\n    const europeanPrice = this.blackScholes(optionType, S, K, T, r, sigma, q).optionPrice;\n    const earlyExercisePremium = optionValues[0] - europeanPrice;\n\n    return {\n      americanPrice: optionValues[0],\n      europeanPrice: europeanPrice,\n      earlyExercisePremium: earlyExercisePremium,\n      earlyExerciseValue: earlyExercisePremium > 0,\n      treeParameters: {\n        steps,\n        upMove: u,\n        downMove: d,\n        riskNeutralProb: p\n      }\n    };\n  }\n\n  /**\n   * Exotic Options\n   */\n\n  // Asian Option (Monte Carlo)\n  asianOption(optionType, S, K, T, r, sigma, q = 0, simulations = 10000, monitoringPoints = 252) {\n    const dt = T / monitoringPoints;\n    const drift = (r - q - 0.5 * sigma * sigma) * dt;\n    const diffusion = sigma * Math.sqrt(dt);\n\n    let totalPayoff = 0;\n\n    for (let sim = 0; sim < simulations; sim++) {\n      let spot = S;\n      let arithmeticSum = 0;\n      let geometricProduct = 1;\n\n      for (let i = 0; i < monitoringPoints; i++) {\n        const z = this.boxMullerRandom();\n        spot = spot * Math.exp(drift + diffusion * z);\n        arithmeticSum += spot;\n        geometricProduct *= Math.pow(spot, 1 / monitoringPoints);\n      }\n\n      const arithmeticAverage = arithmeticSum / monitoringPoints;\n      \n      let payoff;\n      if (optionType.toLowerCase() === 'call') {\n        payoff = Math.max(arithmeticAverage - K, 0);\n      } else {\n        payoff = Math.max(K - arithmeticAverage, 0);\n      }\n\n      totalPayoff += payoff;\n    }\n\n    const optionPrice = Math.exp(-r * T) * (totalPayoff / simulations);\n    \n    return {\n      optionPrice,\n      optionType: `Asian ${optionType}`,\n      averagingMethod: 'arithmetic',\n      simulations,\n      monitoringPoints\n    };\n  }\n\n  // Barrier Option\n  barrierOption(optionType, barrierType, S, K, H, T, r, sigma, q = 0, rebate = 0) {\n    // Simplified barrier option pricing using Black-Scholes adjustments\n    const lambda = (r - q + 0.5 * sigma * sigma) / (sigma * sigma);\n    const y1 = (Math.log(H * H / (S * K)) / (sigma * Math.sqrt(T))) + lambda * sigma * Math.sqrt(T);\n    const y2 = (Math.log(H / S) / (sigma * Math.sqrt(T))) + lambda * sigma * Math.sqrt(T);\n\n    const vanillaPrice = this.blackScholes(optionType, S, K, T, r, sigma, q).optionPrice;\n    \n    let barrierPrice;\n    \n    if (barrierType.toLowerCase().includes('knock-out')) {\n      // Knock-out option\n      if (S <= H) {\n        barrierPrice = rebate * Math.exp(-r * T);\n      } else {\n        const knockOutAdjustment = Math.pow(H / S, 2 * lambda);\n        barrierPrice = vanillaPrice - knockOutAdjustment * this.blackScholes(optionType, H * H / S, K, T, r, sigma, q).optionPrice;\n      }\n    } else {\n      // Knock-in option\n      barrierPrice = vanillaPrice - this.barrierOption(optionType, barrierType.replace('in', 'out'), S, K, H, T, r, sigma, q, rebate).optionPrice;\n    }\n\n    return {\n      optionPrice: Math.max(barrierPrice, rebate * Math.exp(-r * T)),\n      vanillaPrice,\n      barrier: H,\n      rebate,\n      barrierType,\n      isActive: barrierType.toLowerCase().includes('knock-out') ? S > H : S <= H\n    };\n  }\n\n  /**\n   * Volatility Surface Modeling\n   */\n\n  buildVolatilitySurface(marketData) {\n    // marketData: array of {strike, expiry, impliedVol, optionType, marketPrice}\n    const surface = {};\n    \n    marketData.forEach(point => {\n      const expiry = point.expiry;\n      if (!surface[expiry]) {\n        surface[expiry] = {};\n      }\n      surface[expiry][point.strike] = point.impliedVol;\n    });\n\n    // Calculate volatility smile metrics\n    const smileMetrics = this.analyzeVolatilitySmile(marketData);\n    \n    return {\n      surface,\n      smileMetrics,\n      interpolatedVol: (strike, expiry) => this.interpolateVolatility(surface, strike, expiry),\n      skew: smileMetrics.skew,\n      term_structure: this.calculateTermStructure(surface)\n    };\n  }\n\n  analyzeVolatilitySmile(marketData) {\n    const atmVol = marketData.find(point => Math.abs(point.moneyness - 1) < 0.05)?.impliedVol || 0.2;\n    const skew25 = this.calculateSkewMetric(marketData, 0.25);\n    const skew10 = this.calculateSkewMetric(marketData, 0.10);\n    \n    return {\n      atmVol,\n      skew25Delta: skew25,\n      skew10Delta: skew10,\n      smileSlope: this.calculateSmileSlope(marketData),\n      convexity: this.calculateSmileConvexity(marketData)\n    };\n  }\n\n  /**\n   * Portfolio Greeks and Risk\n   */\n\n  calculatePortfolioGreeks(positions) {\n    // positions: array of {optionType, quantity, S, K, T, r, sigma, q}\n    const portfolioGreeks = {\n      delta: 0,\n      gamma: 0,\n      theta: 0,\n      vega: 0,\n      rho: 0,\n      totalValue: 0\n    };\n\n    const positionAnalytics = positions.map(position => {\n      const greeks = this.calculateGreeks(\n        position.optionType,\n        position.S,\n        position.K,\n        position.T,\n        position.r,\n        position.sigma,\n        position.q\n      );\n\n      const optionPrice = this.blackScholes(\n        position.optionType,\n        position.S,\n        position.K,\n        position.T,\n        position.r,\n        position.sigma,\n        position.q\n      ).optionPrice;\n\n      const positionValue = optionPrice * position.quantity;\n\n      // Aggregate portfolio Greeks\n      portfolioGreeks.delta += greeks.delta * position.quantity;\n      portfolioGreeks.gamma += greeks.gamma * position.quantity;\n      portfolioGreeks.theta += greeks.theta * position.quantity;\n      portfolioGreeks.vega += greeks.vega * position.quantity;\n      portfolioGreeks.rho += greeks.rho * position.quantity;\n      portfolioGreeks.totalValue += positionValue;\n\n      return {\n        ...position,\n        ...greeks,\n        optionPrice,\n        positionValue\n      };\n    });\n\n    return {\n      positions: positionAnalytics,\n      portfolioGreeks,\n      riskMetrics: {\n        deltaHedgeRatio: -portfolioGreeks.delta,\n        gammaRisk: portfolioGreeks.gamma,\n        timeDecay: portfolioGreeks.theta,\n        volRisk: portfolioGreeks.vega,\n        interestRateRisk: portfolioGreeks.rho\n      }\n    };\n  }\n\n  /**\n   * Utility Functions\n   */\n\n  calculateD1(S, K, T, r, sigma, q) {\n    return (Math.log(S / K) + (r - q + 0.5 * sigma * sigma) * T) / (sigma * Math.sqrt(T));\n  }\n\n  calculateD2(d1, sigma, T) {\n    return d1 - sigma * Math.sqrt(T);\n  }\n\n  cumulativeNormalDistribution(x) {\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n\n    const sign = x < 0 ? -1 : 1;\n    x = Math.abs(x) / Math.sqrt(2.0);\n\n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n    return 0.5 * (1.0 + sign * y);\n  }\n\n  normalDistribution(x) {\n    return Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);\n  }\n\n  boxMullerRandom() {\n    if (this.spare !== undefined) {\n      const value = this.spare;\n      this.spare = undefined;\n      return value;\n    }\n\n    const u = Math.random();\n    const v = Math.random();\n    const mag = Math.sqrt(-2 * Math.log(u));\n    \n    this.spare = mag * Math.cos(2 * Math.PI * v);\n    return mag * Math.sin(2 * Math.PI * v);\n  }\n\n  interpolateVolatility(surface, strike, expiry) {\n    // Simplified bilinear interpolation\n    const expiries = Object.keys(surface).map(Number).sort((a, b) => a - b);\n    \n    if (expiries.length === 0) return 0.2; // Default volatility\n    \n    const closestExpiry = expiries.reduce((prev, curr) => \n      Math.abs(curr - expiry) < Math.abs(prev - expiry) ? curr : prev\n    );\n    \n    const strikes = Object.keys(surface[closestExpiry]).map(Number).sort((a, b) => a - b);\n    const closestStrike = strikes.reduce((prev, curr) => \n      Math.abs(curr - strike) < Math.abs(prev - strike) ? curr : prev\n    );\n    \n    return surface[closestExpiry][closestStrike] || 0.2;\n  }\n\n  calculateSkewMetric(marketData, deltaLevel) {\n    const putVol = marketData.find(point => \n      point.optionType.toLowerCase() === 'put' && \n      Math.abs(Math.abs(point.delta) - deltaLevel) < 0.05\n    )?.impliedVol || 0.2;\n    \n    const callVol = marketData.find(point => \n      point.optionType.toLowerCase() === 'call' && \n      Math.abs(Math.abs(point.delta) - deltaLevel) < 0.05\n    )?.impliedVol || 0.2;\n    \n    return callVol - putVol;\n  }\n\n  calculateSmileSlope(marketData) {\n    const sortedByStrike = marketData.sort((a, b) => a.strike - b.strike);\n    if (sortedByStrike.length < 2) return 0;\n    \n    const highStrike = sortedByStrike[sortedByStrike.length - 1];\n    const lowStrike = sortedByStrike[0];\n    \n    return (highStrike.impliedVol - lowStrike.impliedVol) / (highStrike.strike - lowStrike.strike);\n  }\n\n  calculateSmileConvexity(marketData) {\n    if (marketData.length < 3) return 0;\n    \n    const sortedByStrike = marketData.sort((a, b) => a.strike - b.strike);\n    const mid = Math.floor(sortedByStrike.length / 2);\n    \n    const leftVol = sortedByStrike[0].impliedVol;\n    const midVol = sortedByStrike[mid].impliedVol;\n    const rightVol = sortedByStrike[sortedByStrike.length - 1].impliedVol;\n    \n    return leftVol + rightVol - 2 * midVol;\n  }\n\n  calculateTermStructure(surface) {\n    const expiries = Object.keys(surface).map(Number).sort((a, b) => a - b);\n    \n    return expiries.map(expiry => {\n      const strikes = Object.keys(surface[expiry]).map(Number);\n      const vols = strikes.map(strike => surface[expiry][strike]);\n      const avgVol = vols.reduce((sum, vol) => sum + vol, 0) / vols.length;\n      \n      return {\n        expiry,\n        averageVol: avgVol,\n        volRange: Math.max(...vols) - Math.min(...vols)\n      };\n    });\n  }\n}\n\nexport default OptionsEngine;","/**\n * Options Trading Dashboard\n * Comprehensive options pricing, Greeks analysis, and volatility modeling\n */\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  BarChart, Bar, ScatterChart, Scatter, AreaChart, Area, Surface\n} from 'recharts';\nimport {\n  TrendingUp, Calculator, Target, Shield, Activity, \n  BarChart3, Zap, Clock, DollarSign, Percent, AlertTriangle\n} from 'lucide-react';\n\nimport OptionsEngine from '../../services/optionsEngine';\n\nconst OptionsTradingDashboard = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [optionChain, setOptionChain] = useState([]);\n  const [volSurface, setVolSurface] = useState(null);\n  const [portfolio, setPortfolio] = useState([]);\n  const [activeTab, setActiveTab] = useState('pricing');\n  const [pricingResults, setPricingResults] = useState(null);\n\n  const engine = useMemo(() => new OptionsEngine(), []);\n\n  // Sample option data\n  const sampleOptions = [\n    {\n      id: 'AAPL_CALL_170_30DTE',\n      symbol: 'AAPL',\n      optionType: 'call',\n      strike: 170,\n      expiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      marketPrice: 5.25,\n      bid: 5.20,\n      ask: 5.30,\n      volume: 1250,\n      openInterest: 8900\n    },\n    {\n      id: 'AAPL_PUT_170_30DTE',\n      symbol: 'AAPL',\n      optionType: 'put',\n      strike: 170,\n      expiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      marketPrice: 3.75,\n      bid: 3.70,\n      ask: 3.80,\n      volume: 980,\n      openInterest: 5600\n    },\n    {\n      id: 'AAPL_CALL_175_30DTE',\n      symbol: 'AAPL',\n      optionType: 'call',\n      strike: 175,\n      expiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      marketPrice: 2.90,\n      bid: 2.85,\n      ask: 2.95,\n      volume: 2100,\n      openInterest: 12500\n    }\n  ];\n\n  const marketParams = {\n    spotPrice: 172.50,\n    riskFreeRate: 0.045,\n    dividendYield: 0.005\n  };\n\n  useEffect(() => {\n    // Calculate theoretical prices and Greeks for all options\n    const enrichedOptions = sampleOptions.map(option => {\n      const timeToExpiry = (option.expiry.getTime() - Date.now()) / (1000 * 60 * 60 * 24 * 365);\n      \n      try {\n        const theoretical = engine.blackScholes(\n          option.optionType,\n          marketParams.spotPrice,\n          option.strike,\n          timeToExpiry,\n          marketParams.riskFreeRate,\n          0.25, // Initial volatility guess\n          marketParams.dividendYield\n        );\n\n        const greeks = engine.calculateGreeks(\n          option.optionType,\n          marketParams.spotPrice,\n          option.strike,\n          timeToExpiry,\n          marketParams.riskFreeRate,\n          0.25,\n          marketParams.dividendYield\n        );\n\n        const impliedVol = engine.calculateImpliedVolatility(\n          option.optionType,\n          option.marketPrice,\n          marketParams.spotPrice,\n          option.strike,\n          timeToExpiry,\n          marketParams.riskFreeRate,\n          marketParams.dividendYield\n        );\n\n        return {\n          ...option,\n          timeToExpiry,\n          theoretical: theoretical.optionPrice,\n          impliedVolatility: impliedVol.impliedVolatility,\n          ...greeks,\n          moneyness: marketParams.spotPrice / option.strike\n        };\n      } catch (error) {\n        return {\n          ...option,\n          timeToExpiry,\n          theoretical: option.marketPrice,\n          impliedVolatility: 0.25,\n          delta: 0,\n          gamma: 0,\n          theta: 0,\n          vega: 0,\n          rho: 0\n        };\n      }\n    });\n\n    setOptionChain(enrichedOptions);\n  }, [engine]);\n\n  const handleOptionSelect = (option) => {\n    setSelectedOption(option);\n    \n    // Calculate detailed analytics\n    const timeToExpiry = (option.expiry.getTime() - Date.now()) / (1000 * 60 * 60 * 24 * 365);\n    \n    try {\n      const pricing = engine.blackScholes(\n        option.optionType,\n        marketParams.spotPrice,\n        option.strike,\n        timeToExpiry,\n        marketParams.riskFreeRate,\n        option.impliedVolatility,\n        marketParams.dividendYield\n      );\n\n      const greeks = engine.calculateGreeks(\n        option.optionType,\n        marketParams.spotPrice,\n        option.strike,\n        timeToExpiry,\n        marketParams.riskFreeRate,\n        option.impliedVolatility,\n        marketParams.dividendYield\n      );\n\n      const americanPricing = engine.americanOptionBinomial(\n        option.optionType,\n        marketParams.spotPrice,\n        option.strike,\n        timeToExpiry,\n        marketParams.riskFreeRate,\n        option.impliedVolatility,\n        marketParams.dividendYield\n      );\n\n      setPricingResults({\n        ...option,\n        ...pricing,\n        ...greeks,\n        american: americanPricing,\n        payoffChart: generatePayoffChart(option, marketParams.spotPrice)\n      });\n    } catch (error) {\n      console.error('Error calculating option analytics:', error);\n    }\n  };\n\n  const generatePayoffChart = (option, currentSpot) => {\n    const spotRange = [];\n    const payoffs = [];\n    const minSpot = currentSpot * 0.7;\n    const maxSpot = currentSpot * 1.3;\n    const steps = 50;\n\n    for (let i = 0; i <= steps; i++) {\n      const spot = minSpot + (maxSpot - minSpot) * (i / steps);\n      let payoff;\n\n      if (option.optionType.toLowerCase() === 'call') {\n        payoff = Math.max(spot - option.strike, 0) - option.marketPrice;\n      } else {\n        payoff = Math.max(option.strike - spot, 0) - option.marketPrice;\n      }\n\n      spotRange.push(spot);\n      payoffs.push({\n        spot: spot.toFixed(2),\n        payoff: payoff.toFixed(2),\n        breakeven: payoff >= 0\n      });\n    }\n\n    return payoffs;\n  };\n\n  const OptionsPricingCalculator = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"bg-white rounded-lg shadow-lg p-6\"\n    >\n      <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n        <Calculator className=\"mr-2\" />\n        Options Pricing Calculator\n      </h3>\n\n      {selectedOption && pricingResults && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold text-lg mb-3\">\n              {selectedOption.symbol} {selectedOption.strike} {selectedOption.optionType.toUpperCase()}\n            </h4>\n            \n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div className=\"bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm text-gray-600\">Market Price</span>\n                <p className=\"text-lg font-bold\">${selectedOption.marketPrice}</p>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm text-gray-600\">Theoretical</span>\n                <p className=\"text-lg font-bold\">${pricingResults.optionPrice.toFixed(2)}</p>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm text-gray-600\">Implied Vol</span>\n                <p className=\"text-lg font-bold\">{(selectedOption.impliedVolatility * 100).toFixed(1)}%</p>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm text-gray-600\">Moneyness</span>\n                <p className=\"text-lg font-bold\">{selectedOption.moneyness.toFixed(3)}</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <h5 className=\"font-semibold\">Greeks</h5>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Delta:</span>\n                  <span className=\"font-medium\">{pricingResults.delta.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Gamma:</span>\n                  <span className=\"font-medium\">{pricingResults.gamma.toFixed(4)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Theta:</span>\n                  <span className=\"font-medium\">{pricingResults.theta.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Vega:</span>\n                  <span className=\"font-medium\">{pricingResults.vega.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Rho:</span>\n                  <span className=\"font-medium\">{pricingResults.rho.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Lambda:</span>\n                  <span className=\"font-medium\">{pricingResults.lambda.toFixed(2)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h5 className=\"font-semibold mb-3\">Payoff Diagram</h5>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={pricingResults.payoffChart}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"spot\" />\n                <YAxis />\n                <Tooltip formatter={(value, name) => [`$${value}`, 'P&L']} />\n                <Line type=\"monotone\" dataKey=\"payoff\" stroke=\"#2563eb\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"0\" stroke=\"#ef4444\" strokeWidth={1} strokeDasharray=\"2 2\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n\n  const OptionsChain = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"bg-white rounded-lg shadow-lg p-6\"\n    >\n      <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n        <BarChart3 className=\"mr-2\" />\n        Options Chain - {marketParams.spotPrice}\n      </h3>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full table-auto\">\n          <thead>\n            <tr className=\"border-b\">\n              <th className=\"text-left py-2\">Strike</th>\n              <th className=\"text-left py-2\">Type</th>\n              <th className=\"text-left py-2\">Last</th>\n              <th className=\"text-left py-2\">Bid/Ask</th>\n              <th className=\"text-left py-2\">IV</th>\n              <th className=\"text-left py-2\">Delta</th>\n              <th className=\"text-left py-2\">Gamma</th>\n              <th className=\"text-left py-2\">Theta</th>\n              <th className=\"text-left py-2\">Volume</th>\n              <th className=\"text-left py-2\">OI</th>\n              <th className=\"text-left py-2\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {optionChain.map((option) => (\n              <tr key={option.id} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-2 font-medium\">{option.strike}</td>\n                <td className=\"py-2\">\n                  <span className={`px-2 py-1 rounded text-xs ${\n                    option.optionType === 'call' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                  }`}>\n                    {option.optionType.toUpperCase()}\n                  </span>\n                </td>\n                <td className=\"py-2\">${option.marketPrice}</td>\n                <td className=\"py-2 text-sm\">${option.bid} / ${option.ask}</td>\n                <td className=\"py-2\">{(option.impliedVolatility * 100).toFixed(1)}%</td>\n                <td className=\"py-2\">{option.delta?.toFixed(3) || '-'}</td>\n                <td className=\"py-2\">{option.gamma?.toFixed(4) || '-'}</td>\n                <td className=\"py-2\">{option.theta?.toFixed(3) || '-'}</td>\n                <td className=\"py-2\">{option.volume.toLocaleString()}</td>\n                <td className=\"py-2\">{option.openInterest.toLocaleString()}</td>\n                <td className=\"py-2\">\n                  <button\n                    onClick={() => handleOptionSelect(option)}\n                    className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700\"\n                  >\n                    Analyze\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </motion.div>\n  );\n\n  const VolatilitySurface = () => {\n    const volData = optionChain.map(option => ({\n      strike: option.strike,\n      impliedVol: option.impliedVolatility * 100,\n      moneyness: option.moneyness,\n      type: option.optionType\n    }));\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-lg shadow-lg p-6\"\n      >\n        <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n          <TrendingUp className=\"mr-2\" />\n          Volatility Surface & Smile\n        </h3>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold mb-3\">Implied Volatility by Strike</h4>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <ScatterChart data={volData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"strike\" label={{ value: 'Strike', position: 'insideBottom', offset: -5 }} />\n                <YAxis label={{ value: 'Implied Vol (%)', angle: -90, position: 'insideLeft' }} />\n                <Tooltip formatter={(value, name) => [`${value}%`, 'Implied Vol']} />\n                <Scatter dataKey=\"impliedVol\" fill=\"#3b82f6\" />\n              </ScatterChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Volatility Metrics</h4>\n            <div className=\"space-y-3\">\n              {[\n                { label: 'ATM Implied Vol', value: '25.2%', icon: Target },\n                { label: 'Vol Skew (25Δ)', value: '3.8%', icon: TrendingUp },\n                { label: 'Vol Convexity', value: '0.15', icon: Activity },\n                { label: 'Term Structure Slope', value: '2.1%', icon: BarChart3 }\n              ].map((metric) => {\n                const Icon = metric.icon;\n                return (\n                  <div key={metric.label} className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                    <div className=\"flex items-center\">\n                      <Icon className=\"w-4 h-4 mr-2 text-blue-600\" />\n                      <span>{metric.label}</span>\n                    </div>\n                    <span className=\"font-bold\">{metric.value}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  const RiskAnalysis = () => {\n    const portfolioGreeks = optionChain.reduce((acc, option) => {\n      const position = portfolio.find(p => p.id === option.id);\n      const quantity = position?.quantity || 0;\n      \n      return {\n        delta: acc.delta + (option.delta || 0) * quantity,\n        gamma: acc.gamma + (option.gamma || 0) * quantity,\n        theta: acc.theta + (option.theta || 0) * quantity,\n        vega: acc.vega + (option.vega || 0) * quantity,\n        totalValue: acc.totalValue + option.marketPrice * quantity\n      };\n    }, { delta: 0, gamma: 0, theta: 0, vega: 0, totalValue: 0 });\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-lg shadow-lg p-6\"\n      >\n        <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n          <Shield className=\"mr-2\" />\n          Portfolio Risk Analysis\n        </h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[\n            { label: 'Portfolio Delta', value: portfolioGreeks.delta.toFixed(2), icon: TrendingUp, risk: Math.abs(portfolioGreeks.delta) > 50 },\n            { label: 'Portfolio Gamma', value: portfolioGreeks.gamma.toFixed(3), icon: Activity, risk: Math.abs(portfolioGreeks.gamma) > 0.1 },\n            { label: 'Daily Theta', value: portfolioGreeks.theta.toFixed(2), icon: Clock, risk: portfolioGreeks.theta < -50 },\n            { label: 'Vega Exposure', value: portfolioGreeks.vega.toFixed(2), icon: Zap, risk: Math.abs(portfolioGreeks.vega) > 100 }\n          ].map((metric) => {\n            const Icon = metric.icon;\n            return (\n              <div key={metric.label} className={`p-4 rounded-lg border-2 ${\n                metric.risk ? 'border-red-200 bg-red-50' : 'border-gray-200 bg-gray-50'\n              }`}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Icon className={`w-5 h-5 ${metric.risk ? 'text-red-600' : 'text-blue-600'}`} />\n                  {metric.risk && <AlertTriangle className=\"w-4 h-4 text-red-600\" />}\n                </div>\n                <p className=\"text-sm text-gray-600\">{metric.label}</p>\n                <p className=\"text-xl font-bold\">{metric.value}</p>\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"mt-6\">\n          <h4 className=\"font-semibold mb-3\">Risk Scenarios</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {[\n              { scenario: '1% Spot Move', pnl: portfolioGreeks.delta * marketParams.spotPrice * 0.01, color: 'blue' },\n              { scenario: '5% Vol Increase', pnl: portfolioGreeks.vega * 5, color: 'green' },\n              { scenario: '1 Day Time Decay', pnl: portfolioGreeks.theta, color: 'red' }\n            ].map((scenario) => (\n              <div key={scenario.scenario} className=\"p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm text-gray-600\">{scenario.scenario}</span>\n                <p className={`text-lg font-bold text-${scenario.color}-600`}>\n                  ${scenario.pnl.toFixed(2)}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <header className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Options Trading Dashboard</h1>\n          <p className=\"text-gray-600\">Advanced options pricing, Greeks analysis, and volatility modeling</p>\n        </header>\n\n        {/* Navigation Tabs */}\n        <div className=\"mb-6\">\n          <nav className=\"flex space-x-1 bg-blue-50 p-1 rounded-lg\">\n            {[\n              { id: 'chain', label: 'Options Chain', icon: BarChart3 },\n              { id: 'pricing', label: 'Pricing Calculator', icon: Calculator },\n              { id: 'volatility', label: 'Volatility Surface', icon: TrendingUp },\n              { id: 'risk', label: 'Risk Analysis', icon: Shield }\n            ].map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center px-4 py-2 rounded-md font-medium transition-colors ${\n                    activeTab === tab.id\n                      ? 'bg-white text-blue-600 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4 mr-2\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <AnimatePresence mode=\"wait\">\n          {activeTab === 'chain' && <OptionsChain />}\n          {activeTab === 'pricing' && <OptionsPricingCalculator />}\n          {activeTab === 'volatility' && <VolatilitySurface />}\n          {activeTab === 'risk' && <RiskAnalysis />}\n        </AnimatePresence>\n\n        {/* Market Summary */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mt-8 grid grid-cols-1 md:grid-cols-4 gap-4\"\n        >\n          {[\n            { label: 'Spot Price', value: `$${marketParams.spotPrice}`, icon: DollarSign, color: 'blue' },\n            { label: 'Risk-Free Rate', value: `${(marketParams.riskFreeRate * 100).toFixed(2)}%`, icon: Percent, color: 'green' },\n            { label: 'Dividend Yield', value: `${(marketParams.dividendYield * 100).toFixed(2)}%`, icon: Target, color: 'orange' },\n            { label: 'Avg Implied Vol', value: '25.2%', icon: Activity, color: 'purple' }\n          ].map((metric) => {\n            const Icon = metric.icon;\n            return (\n              <div key={metric.label} className=\"bg-white rounded-lg shadow p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">{metric.label}</p>\n                    <p className=\"text-xl font-bold\">{metric.value}</p>\n                  </div>\n                  <Icon className={`w-8 h-8 text-${metric.color}-600`} />\n                </div>\n              </div>\n            );\n          })}\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default OptionsTradingDashboard;"],"names":["OptionsEngine","constructor","this","volSurface","Map","riskFreeRates","dividendYields","blackScholes","optionType","S","K","T","r","sigma","q","d1","calculateD1","d2","calculateD2","Nd1","cumulativeNormalDistribution","Nd2","Nnd1","Nnd2","discountFactor","Math","exp","dividendFactor","optionPrice","intrinsicValue","toLowerCase","max","timeValue","moneyness","impliedParameters","spot","strike","timeToExpiry","riskFreeRate","volatility","dividendYield","calculateGreeks","nd1","normalDistribution","delta","gamma","theta","vega","rho","sqrt","thetaTerm1","thetaTerm2","thetaTerm3","lambda","charm","calculateCharm","vanna","calculateVanna","volga","calculateVolga","calculateImpliedVolatility","marketPrice","tolerance","maxIterations","i","priceDiff","abs","impliedVolatility","iterations","priceAccuracy","annualizedVol","volPercentage","Error","term1","term2","americanOptionBinomial","steps","dt","u","d","p","discount","assetPrices","optionValues","pow","j","spotPrice","europeanValue","europeanPrice","earlyExercisePremium","americanPrice","earlyExerciseValue","treeParameters","upMove","downMove","riskNeutralProb","asianOption","simulations","monitoringPoints","drift","diffusion","totalPayoff","sim","arithmeticSum","z","boxMullerRandom","arithmeticAverage","payoff","averagingMethod","barrierOption","barrierType","H","rebate","vanillaPrice","barrierPrice","includes","replace","barrier","isActive","buildVolatilitySurface","marketData","surface","forEach","point","expiry","impliedVol","smileMetrics","analyzeVolatilitySmile","interpolatedVol","interpolateVolatility","skew","term_structure","calculateTermStructure","atmVol","find","skew25Delta","calculateSkewMetric","skew10Delta","smileSlope","calculateSmileSlope","convexity","calculateSmileConvexity","calculatePortfolioGreeks","positions","portfolioGreeks","totalValue","map","position","greeks","positionValue","quantity","riskMetrics","deltaHedgeRatio","gammaRisk","timeDecay","volRisk","interestRateRisk","log","x","sign","t","PI","undefined","spare","value","random","v","mag","cos","sin","expiries","Object","keys","Number","sort","a","b","length","closestExpiry","reduce","prev","curr","closestStrike","deltaLevel","putVol","sortedByStrike","highStrike","lowStrike","mid","floor","leftVol","midVol","vols","avgVol","sum","vol","averageVol","volRange","min","OptionsTradingDashboard","selectedOption","setSelectedOption","useState","optionChain","setOptionChain","portfolio","setPortfolio","activeTab","setActiveTab","pricingResults","setPricingResults","engine","useMemo","sampleOptions","id","symbol","Date","now","bid","ask","volume","openInterest","marketParams","useEffect","enrichedOptions","option","getTime","theoretical","error","generatePayoffChart","currentSpot","payoffs","minSpot","maxSpot","push","toFixed","breakeven","OptionsPricingCalculator","jsxs","motion","div","initial","opacity","y","animate","className","children","jsx","Calculator","toUpperCase","ResponsiveContainer","width","height","LineChart","data","payoffChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","formatter","name","Line","type","stroke","strokeWidth","OptionsChain","BarChart3","toLocaleString","onClick","pricing","americanPricing","american","handleOptionSelect","VolatilitySurface","volData","TrendingUp","ScatterChart","label","offset","angle","Scatter","fill","icon","Target","Activity","metric","Icon","RiskAnalysis","acc","Shield","risk","Clock","Zap","AlertTriangle","scenario","pnl","color","tab","AnimatePresence","mode","DollarSign","Percent"],"mappings":"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"}
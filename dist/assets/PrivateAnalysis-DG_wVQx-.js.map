{"version":3,"file":"PrivateAnalysis-DG_wVQx-.js","sources":["../../src/services/monteCarloEngine.js","../../src/components/PrivateAnalysis/FinancialSpreadsheet.jsx","../../src/components/PrivateAnalysis/ScenarioModeling.jsx","../../src/components/PrivateAnalysis/SensitivityAnalysis.jsx","../../src/components/PrivateAnalysis/DataVisualization.jsx","../../src/components/PrivateAnalysis/WACCCalculator.jsx","../../src/components/PrivateAnalysis/AdvancedDCF.jsx","../../src/components/PrivateAnalysis/ComparableAnalysis.jsx","../../src/components/PrivateAnalysis/MonteCarloSimulation.jsx","../../src/components/PrivateAnalysis/ModelingTools.jsx","../../src/components/PrivateAnalysis/AnalysisResults.jsx","../../src/components/PrivateAnalysis/WorkflowNavigation.jsx","../../src/pages/PrivateAnalysis.jsx"],"sourcesContent":["import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Monte Carlo Simulation Engine\n * Provides advanced statistical modeling and risk analysis\n */\nclass MonteCarloEngine {\n  constructor() {\n    this.workers = [];\n    this.isRunning = false;\n    this.currentSimulation = null;\n  }\n\n  /**\n   * Run Monte Carlo simulation for DCF analysis\n   * @param {Object} baseInputs - Base DCF inputs\n   * @param {Object} distributions - Variable distributions\n   * @param {Object} options - Simulation options\n   * @returns {Promise<Object>} Simulation results\n   */\n  async runDCFSimulation(baseInputs, distributions, options = {}) {\n    const {\n      iterations = 10000,\n      confidenceLevel = 0.95,\n      correlationMatrix = null,\n      randomSeed = null\n    } = options;\n\n    apiLogger.log('INFO', 'Starting DCF Monte Carlo simulation', {\n      iterations,\n      variables: Object.keys(distributions).length\n    });\n\n    this.isRunning = true;\n    const startTime = Date.now();\n\n    try {\n      // Initialize random number generator\n      if (randomSeed) {\n        this.setSeed(randomSeed);\n      }\n\n      // Generate correlated random samples\n      const samples = this.generateCorrelatedSamples(\n        distributions,\n        iterations,\n        correlationMatrix\n      );\n\n      // Run simulation iterations\n      const results = [];\n      const progressCallback = options.onProgress;\n\n      for (let i = 0; i < iterations; i++) {\n        if (!this.isRunning) {\n          throw new Error('Simulation cancelled');\n        }\n\n        // Create scenario inputs\n        const scenarioInputs = this.createScenarioInputs(baseInputs, samples[i], distributions);\n\n        // Calculate DCF for this scenario\n        const dcfResult = this.calculateDCFScenario(scenarioInputs);\n        results.push({\n          iteration: i + 1,\n          pricePerShare: dcfResult.pricePerShare,\n          enterpriseValue: dcfResult.enterpriseValue,\n          upside: dcfResult.upside,\n          inputs: scenarioInputs\n        });\n\n        // Report progress\n        if (progressCallback && i % Math.floor(iterations / 100) === 0) {\n          progressCallback((i / iterations) * 100);\n        }\n      }\n\n      // Analyze results\n      const analysis = this.analyzeResults(results, confidenceLevel);\n\n      const endTime = Date.now();\n      apiLogger.log('INFO', 'DCF Monte Carlo simulation completed', {\n        iterations,\n        duration: endTime - startTime,\n        meanPrice: analysis.statistics.mean\n      });\n\n      return {\n        type: 'DCF_MONTE_CARLO',\n        timestamp: new Date().toISOString(),\n        parameters: { iterations, confidenceLevel, randomSeed },\n        results,\n        analysis,\n        duration: endTime - startTime\n      };\n\n    } catch (error) {\n      this.isRunning = false;\n      apiLogger.log('ERROR', 'DCF Monte Carlo simulation failed', { error: error.message });\n      throw error;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Run Monte Carlo simulation for LBO analysis\n   * @param {Object} baseInputs - Base LBO inputs\n   * @param {Object} distributions - Variable distributions\n   * @param {Object} options - Simulation options\n   * @returns {Promise<Object>} Simulation results\n   */\n  async runLBOSimulation(baseInputs, distributions, options = {}) {\n    const {\n      iterations = 10000,\n      confidenceLevel = 0.95,\n      correlationMatrix = null,\n      randomSeed = null\n    } = options;\n\n    apiLogger.log('INFO', 'Starting LBO Monte Carlo simulation', {\n      iterations,\n      variables: Object.keys(distributions).length\n    });\n\n    this.isRunning = true;\n    const startTime = Date.now();\n\n    try {\n      if (randomSeed) {\n        this.setSeed(randomSeed);\n      }\n\n      const samples = this.generateCorrelatedSamples(\n        distributions,\n        iterations,\n        correlationMatrix\n      );\n\n      const results = [];\n      const progressCallback = options.onProgress;\n\n      for (let i = 0; i < iterations; i++) {\n        if (!this.isRunning) {\n          throw new Error('Simulation cancelled');\n        }\n\n        const scenarioInputs = this.createScenarioInputs(baseInputs, samples[i], distributions);\n        const lboResult = this.calculateLBOScenario(scenarioInputs);\n\n        results.push({\n          iteration: i + 1,\n          irr: lboResult.irr,\n          moic: lboResult.moic,\n          totalReturn: lboResult.totalReturn,\n          inputs: scenarioInputs\n        });\n\n        if (progressCallback && i % Math.floor(iterations / 100) === 0) {\n          progressCallback((i / iterations) * 100);\n        }\n      }\n\n      const analysis = this.analyzeResults(results, confidenceLevel, ['irr', 'moic', 'totalReturn']);\n\n      const endTime = Date.now();\n      apiLogger.log('INFO', 'LBO Monte Carlo simulation completed', {\n        iterations,\n        duration: endTime - startTime,\n        meanIRR: analysis.statistics.irr?.mean\n      });\n\n      return {\n        type: 'LBO_MONTE_CARLO',\n        timestamp: new Date().toISOString(),\n        parameters: { iterations, confidenceLevel, randomSeed },\n        results,\n        analysis,\n        duration: endTime - startTime\n      };\n\n    } catch (error) {\n      this.isRunning = false;\n      apiLogger.log('ERROR', 'LBO Monte Carlo simulation failed', { error: error.message });\n      throw error;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Generate correlated random samples using Cholesky decomposition\n   * @param {Object} distributions - Variable distributions\n   * @param {number} iterations - Number of iterations\n   * @param {Array} correlationMatrix - Correlation matrix\n   * @returns {Array} Array of sample sets\n   */\n  generateCorrelatedSamples(distributions, iterations, correlationMatrix) {\n    const variables = Object.keys(distributions);\n    const numVars = variables.length;\n    const samples = [];\n\n    // Generate independent samples first\n    const independentSamples = [];\n    for (let i = 0; i < iterations; i++) {\n      const sample = {};\n      variables.forEach(variable => {\n        const dist = distributions[variable];\n        sample[variable] = this.sampleFromDistribution(dist);\n      });\n      independentSamples.push(sample);\n    }\n\n    // Apply correlation if matrix is provided\n    if (correlationMatrix && correlationMatrix.length === numVars) {\n      const choleskyMatrix = this.choleskyDecomposition(correlationMatrix);\n\n      for (let i = 0; i < iterations; i++) {\n        const correlatedSample = {};\n        const independentValues = variables.map(v => independentSamples[i][v]);\n        const correlatedValues = this.applyCorrelation(independentValues, choleskyMatrix);\n\n        variables.forEach((variable, index) => {\n          correlatedSample[variable] = correlatedValues[index];\n        });\n\n        samples.push(correlatedSample);\n      }\n    } else {\n      samples.push(...independentSamples);\n    }\n\n    return samples;\n  }\n\n  /**\n   * Sample from a probability distribution with enhanced types\n   * @param {Object} distribution - Distribution parameters\n   * @returns {number} Random sample\n   */\n  sampleFromDistribution(distribution) {\n    const { type, parameters } = distribution;\n\n    switch (type) {\n      case 'normal':\n        return this.normalRandom(parameters.mean, parameters.stdDev);\n\n      case 'lognormal':\n        const normalSample = this.normalRandom(parameters.mu, parameters.sigma);\n        return Math.exp(normalSample);\n\n      case 'uniform':\n        return parameters.min + Math.random() * (parameters.max - parameters.min);\n\n      case 'triangular':\n        return this.triangularRandom(parameters.min, parameters.mode, parameters.max);\n\n      case 'beta':\n        return this.betaRandom(parameters.alpha, parameters.beta);\n        \n      case 'exponential':\n        return this.exponentialRandom(parameters.lambda);\n        \n      case 'weibull':\n        return this.weibullRandom(parameters.shape, parameters.scale);\n        \n      case 'pareto':\n        return this.paretoRandom(parameters.scale, parameters.shape);\n        \n      case 'student_t':\n        return this.studentTRandom(parameters.df);\n        \n      case 'chi_squared':\n        return this.chiSquaredRandom(parameters.df);\n\n      default:\n        throw new Error(`Unsupported distribution type: ${type}`);\n    }\n  }\n  \n  /**\n   * Generate exponential random variable\n   * @param {number} lambda - Rate parameter\n   * @returns {number} Exponential random variable\n   */\n  exponentialRandom(lambda) {\n    return -Math.log(1 - Math.random()) / lambda;\n  }\n  \n  /**\n   * Generate Weibull random variable\n   * @param {number} shape - Shape parameter (k)\n   * @param {number} scale - Scale parameter (lambda)\n   * @returns {number} Weibull random variable\n   */\n  weibullRandom(shape, scale) {\n    const u = Math.random();\n    return scale * Math.pow(-Math.log(1 - u), 1 / shape);\n  }\n  \n  /**\n   * Generate Pareto random variable\n   * @param {number} scale - Scale parameter (xm)\n   * @param {number} shape - Shape parameter (alpha)\n   * @returns {number} Pareto random variable\n   */\n  paretoRandom(scale, shape) {\n    const u = Math.random();\n    return scale / Math.pow(u, 1 / shape);\n  }\n  \n  /**\n   * Generate Student's t random variable\n   * @param {number} df - Degrees of freedom\n   * @returns {number} Student's t random variable\n   */\n  studentTRandom(df) {\n    if (df <= 0) throw new Error('Degrees of freedom must be positive');\n    \n    const normal = this.normalRandom(0, 1);\n    const chiSq = this.chiSquaredRandom(df);\n    \n    return normal / Math.sqrt(chiSq / df);\n  }\n  \n  /**\n   * Generate Chi-squared random variable\n   * @param {number} df - Degrees of freedom\n   * @returns {number} Chi-squared random variable\n   */\n  chiSquaredRandom(df) {\n    if (df <= 0) throw new Error('Degrees of freedom must be positive');\n    \n    return this.gammaRandom(df / 2) * 2;\n  }\n\n  /**\n   * Generate normal random variable using Box-Muller transform\n   * @param {number} mean - Mean\n   * @param {number} stdDev - Standard deviation\n   * @returns {number} Normal random variable\n   */\n  normalRandom(mean = 0, stdDev = 1) {\n    if (this.spareNormal !== undefined) {\n      const spare = this.spareNormal;\n      this.spareNormal = undefined;\n      return spare * stdDev + mean;\n    }\n\n    const u1 = Math.random();\n    const u2 = Math.random();\n    const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n    const z1 = Math.sqrt(-2 * Math.log(u1)) * Math.sin(2 * Math.PI * u2);\n\n    this.spareNormal = z1;\n    return z0 * stdDev + mean;\n  }\n\n  /**\n   * Generate triangular random variable\n   * @param {number} min - Minimum value\n   * @param {number} mode - Mode value\n   * @param {number} max - Maximum value\n   * @returns {number} Triangular random variable\n   */\n  triangularRandom(min, mode, max) {\n    const u = Math.random();\n    const c = (mode - min) / (max - min);\n\n    if (u < c) {\n      return min + Math.sqrt(u * (max - min) * (mode - min));\n    } else {\n      return max - Math.sqrt((1 - u) * (max - min) * (max - mode));\n    }\n  }\n\n  /**\n   * Generate beta random variable\n   * @param {number} alpha - Alpha parameter\n   * @param {number} beta - Beta parameter\n   * @returns {number} Beta random variable\n   */\n  betaRandom(alpha, beta) {\n    const x = this.gammaRandom(alpha);\n    const y = this.gammaRandom(beta);\n    return x / (x + y);\n  }\n\n  /**\n   * Generate gamma random variable\n   * @param {number} shape - Shape parameter\n   * @returns {number} Gamma random variable\n   */\n  gammaRandom(shape) {\n    // Marsaglia and Tsang's method for shape >= 1\n    if (shape >= 1) {\n      const d = shape - 1 / 3;\n      const c = 1 / Math.sqrt(9 * d);\n\n      while (true) {\n        let x, v;\n        do {\n          x = this.normalRandom();\n          v = 1 + c * x;\n        } while (v <= 0);\n\n        v = v * v * v;\n        const u = Math.random();\n\n        if (u < 1 - 0.0331 * x * x * x * x) {\n          return d * v;\n        }\n\n        if (Math.log(u) < 0.5 * x * x + d * (1 - v + Math.log(v))) {\n          return d * v;\n        }\n      }\n    } else {\n      // For shape < 1, use transformation\n      return this.gammaRandom(shape + 1) * Math.pow(Math.random(), 1 / shape);\n    }\n  }\n\n  /**\n   * Perform Cholesky decomposition\n   * @param {Array} matrix - Correlation matrix\n   * @returns {Array} Lower triangular matrix\n   */\n  choleskyDecomposition(matrix) {\n    const n = matrix.length;\n    const L = Array(n).fill().map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j <= i; j++) {\n        if (i === j) {\n          let sum = 0;\n          for (let k = 0; k < j; k++) {\n            sum += L[j][k] * L[j][k];\n          }\n          L[j][j] = Math.sqrt(matrix[j][j] - sum);\n        } else {\n          let sum = 0;\n          for (let k = 0; k < j; k++) {\n            sum += L[i][k] * L[j][k];\n          }\n          L[i][j] = (matrix[i][j] - sum) / L[j][j];\n        }\n      }\n    }\n\n    return L;\n  }\n\n  /**\n   * Apply correlation using Cholesky matrix\n   * @param {Array} independentValues - Independent random values\n   * @param {Array} choleskyMatrix - Cholesky decomposition matrix\n   * @returns {Array} Correlated values\n   */\n  applyCorrelation(independentValues, choleskyMatrix) {\n    const n = independentValues.length;\n    const correlatedValues = Array(n).fill(0);\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j <= i; j++) {\n        correlatedValues[i] += choleskyMatrix[i][j] * independentValues[j];\n      }\n    }\n\n    return correlatedValues;\n  }\n\n  /**\n   * Create scenario inputs by applying random samples to base inputs\n   * @param {Object} baseInputs - Base model inputs\n   * @param {Object} samples - Random samples\n   * @param {Object} distributions - Distribution definitions\n   * @returns {Object} Scenario inputs\n   */\n  createScenarioInputs(baseInputs, samples, distributions) {\n    const scenarioInputs = { ...baseInputs };\n\n    Object.entries(samples).forEach(([variable, sample]) => {\n      const distribution = distributions[variable];\n\n      if (distribution.applyTo) {\n        // Apply sample to specific input field\n        scenarioInputs[distribution.applyTo] = sample;\n      } else {\n        // Direct assignment\n        scenarioInputs[variable] = sample;\n      }\n    });\n\n    return scenarioInputs;\n  }\n\n  /**\n   * Calculate DCF scenario (simplified for Monte Carlo)\n   * @param {Object} inputs - Scenario inputs\n   * @returns {Object} DCF results\n   */\n  calculateDCFScenario(inputs) {\n    // This would integrate with the financialModelingEngine\n    // Simplified calculation for demonstration\n    const {\n      currentRevenue = 1000000000,\n      revenueGrowthRate = 0.1,\n      fcfMargin = 0.15,\n      wacc = 0.1,\n      terminalGrowthRate = 0.025,\n      sharesOutstanding = 100000000,\n      currentPrice = 100\n    } = inputs;\n\n    // Simple DCF calculation\n    const projectionYears = 5;\n    let totalPV = 0;\n    let revenue = currentRevenue;\n\n    for (let year = 1; year <= projectionYears; year++) {\n      revenue *= (1 + revenueGrowthRate);\n      const fcf = revenue * fcfMargin;\n      const pv = fcf / Math.pow(1 + wacc, year);\n      totalPV += pv;\n    }\n\n    // Terminal value\n    const terminalFCF = revenue * fcfMargin * (1 + terminalGrowthRate);\n    const terminalValue = terminalFCF / (wacc - terminalGrowthRate);\n    const pvTerminal = terminalValue / Math.pow(1 + wacc, projectionYears);\n\n    const enterpriseValue = totalPV + pvTerminal;\n    const pricePerShare = enterpriseValue / sharesOutstanding;\n    const upside = ((pricePerShare - currentPrice) / currentPrice) * 100;\n\n    return {\n      pricePerShare,\n      enterpriseValue,\n      upside\n    };\n  }\n\n  /**\n   * Calculate LBO scenario (simplified for Monte Carlo)\n   * @param {Object} inputs - Scenario inputs\n   * @returns {Object} LBO results\n   */\n  calculateLBOScenario(inputs) {\n    // Simplified LBO calculation for demonstration\n    const {\n      ebitda = 100000000,\n      ebitdaGrowthRate = 0.05,\n      exitMultiple = 10,\n      debtMultiple = 5,\n      holdingPeriod = 5\n    } = inputs;\n\n    const purchasePrice = ebitda * 10; // Assume 10x entry multiple\n    const debt = ebitda * debtMultiple;\n    const equity = purchasePrice - debt;\n\n    // Project exit EBITDA\n    const exitEbitda = ebitda * Math.pow(1 + ebitdaGrowthRate, holdingPeriod);\n    const exitValue = exitEbitda * exitMultiple;\n    const remainingDebt = debt * 0.5; // Assume 50% paydown\n    const exitProceeds = exitValue - remainingDebt;\n\n    const totalReturn = exitProceeds / equity;\n    const irr = Math.pow(totalReturn, 1 / holdingPeriod) - 1;\n\n    return {\n      irr,\n      moic: totalReturn,\n      totalReturn: exitProceeds\n    };\n  }\n\n  /**\n   * Analyze simulation results with enhanced statistical measures\n   * @param {Array} results - Simulation results\n   * @param {number} confidenceLevel - Confidence level\n   * @param {Array} metrics - Metrics to analyze\n   * @returns {Object} Comprehensive statistical analysis\n   */\n  analyzeResults(results, confidenceLevel, metrics = ['pricePerShare', 'enterpriseValue', 'upside']) {\n    const analysis = {\n      statistics: {},\n      percentiles: {},\n      confidenceIntervals: {},\n      riskMetrics: {},\n      distributionTests: {},\n      correlations: {}\n    };\n\n    metrics.forEach(metric => {\n      const values = results.map(r => r[metric]).filter(v => v !== null && !isNaN(v)).sort((a, b) => a - b);\n\n      if (values.length === 0) return;\n\n      const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n      const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n      const stdDev = Math.sqrt(variance);\n      const sampleStdDev = Math.sqrt(variance * values.length / (values.length - 1)); // Bessel's correction\n\n      analysis.statistics[metric] = {\n        mean,\n        median: this.percentile(values, 0.5),\n        mode: this.calculateMode(values),\n        stdDev,\n        sampleStdDev,\n        variance,\n        min: values[0],\n        max: values[values.length - 1],\n        range: values[values.length - 1] - values[0],\n        count: values.length,\n        // Additional robust statistics\n        trimmedMean: this.calculateTrimmedMean(values, 0.1), // 10% trimmed mean\n        mad: this.calculateMAD(values), // Median Absolute Deviation\n        iqr: this.percentile(values, 0.75) - this.percentile(values, 0.25)\n      };\n\n      analysis.percentiles[metric] = {\n        p1: this.percentile(values, 0.01),\n        p5: this.percentile(values, 0.05),\n        p10: this.percentile(values, 0.10),\n        p25: this.percentile(values, 0.25),\n        p50: this.percentile(values, 0.5),\n        p75: this.percentile(values, 0.75),\n        p90: this.percentile(values, 0.90),\n        p95: this.percentile(values, 0.95),\n        p99: this.percentile(values, 0.99)\n      };\n\n      const alpha = 1 - confidenceLevel;\n      const lowerBound = this.percentile(values, alpha / 2);\n      const upperBound = this.percentile(values, 1 - alpha / 2);\n\n      analysis.confidenceIntervals[metric] = {\n        level: confidenceLevel,\n        lowerBound,\n        upperBound,\n        width: upperBound - lowerBound,\n        // Bootstrap confidence intervals\n        bootstrapCI: this.calculateBootstrapCI(values, confidenceLevel)\n      };\n\n      const var95 = this.percentile(values, 0.05);\n      const var99 = this.percentile(values, 0.01);\n      const cvar95 = values.slice(0, Math.floor(values.length * 0.05)).reduce((sum, v) => sum + v, 0) / Math.floor(values.length * 0.05);\n      const cvar99 = values.slice(0, Math.floor(values.length * 0.01)).reduce((sum, v) => sum + v, 0) / Math.floor(values.length * 0.01);\n\n      analysis.riskMetrics[metric] = {\n        var95, // Value at Risk (5%)\n        var99, // Value at Risk (1%)\n        cvar95, // Conditional VaR (5%)\n        cvar99, // Conditional VaR (1%)\n        skewness: this.calculateSkewness(values, mean, stdDev),\n        kurtosis: this.calculateKurtosis(values, mean, stdDev),\n        excessKurtosis: this.calculateKurtosis(values, mean, stdDev) - 3,\n        // Tail risk measures\n        expectedShortfall: cvar95,\n        maxDrawdown: this.calculateMaxDrawdown(values),\n        // Risk-adjusted returns\n        sharpeRatio: this.calculateSharpeRatio(values, 0.02), // Assuming 2% risk-free rate\n        sortinoRatio: this.calculateSortinoRatio(values, mean)\n      };\n      \n      // Distribution fitting tests\n      analysis.distributionTests[metric] = {\n        jarqueBera: this.jarqueBeraTest(values),\n        kolmogorovSmirnov: this.ksTestNormality(values),\n        shapiroWilk: values.length <= 5000 ? this.shapiroWilkTest(values) : null\n      };\n    });\n    \n    // Calculate correlation matrix between metrics\n    if (metrics.length > 1) {\n      analysis.correlations = this.calculateCorrelationMatrix(results, metrics);\n    }\n\n    return analysis;\n  }\n  \n  /**\n   * Calculate mode of dataset\n   */\n  calculateMode(values) {\n    const frequency = {};\n    values.forEach(v => {\n      const rounded = Math.round(v * 100) / 100; // Round to avoid floating point issues\n      frequency[rounded] = (frequency[rounded] || 0) + 1;\n    });\n    \n    const maxFreq = Math.max(...Object.values(frequency));\n    const modes = Object.keys(frequency).filter(k => frequency[k] === maxFreq);\n    \n    return modes.length === 1 ? parseFloat(modes[0]) : null;\n  }\n  \n  /**\n   * Calculate trimmed mean\n   */\n  calculateTrimmedMean(sortedValues, trimProportion = 0.1) {\n    const trimCount = Math.floor(sortedValues.length * trimProportion);\n    const trimmedValues = sortedValues.slice(trimCount, -trimCount || undefined);\n    return trimmedValues.reduce((sum, v) => sum + v, 0) / trimmedValues.length;\n  }\n  \n  /**\n   * Calculate Median Absolute Deviation\n   */\n  calculateMAD(values) {\n    const median = this.percentile(values, 0.5);\n    const deviations = values.map(v => Math.abs(v - median)).sort((a, b) => a - b);\n    return this.percentile(deviations, 0.5);\n  }\n  \n  /**\n   * Calculate bootstrap confidence interval\n   */\n  calculateBootstrapCI(values, confidenceLevel, bootstrapSamples = 1000) {\n    const bootstrapMeans = [];\n    \n    for (let i = 0; i < bootstrapSamples; i++) {\n      const sample = [];\n      for (let j = 0; j < values.length; j++) {\n        sample.push(values[Math.floor(Math.random() * values.length)]);\n      }\n      bootstrapMeans.push(sample.reduce((sum, v) => sum + v, 0) / sample.length);\n    }\n    \n    bootstrapMeans.sort((a, b) => a - b);\n    const alpha = 1 - confidenceLevel;\n    \n    return {\n      lowerBound: this.percentile(bootstrapMeans, alpha / 2),\n      upperBound: this.percentile(bootstrapMeans, 1 - alpha / 2)\n    };\n  }\n  \n  /**\n   * Calculate maximum drawdown\n   */\n  calculateMaxDrawdown(values) {\n    let peak = values[0];\n    let maxDrawdown = 0;\n    \n    for (const value of values) {\n      if (value > peak) {\n        peak = value;\n      }\n      const drawdown = (peak - value) / peak;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    }\n    \n    return maxDrawdown;\n  }\n  \n  /**\n   * Calculate Sharpe ratio approximation\n   */\n  calculateSharpeRatio(values, riskFreeRate = 0.02) {\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n    \n    return stdDev > 0 ? (mean - riskFreeRate) / stdDev : 0;\n  }\n  \n  /**\n   * Calculate Sortino ratio\n   */\n  calculateSortinoRatio(values, targetReturn) {\n    const excessReturns = values.map(v => v - targetReturn);\n    const negativeReturns = excessReturns.filter(r => r < 0);\n    \n    if (negativeReturns.length === 0) return Infinity;\n    \n    const downsideDeviation = Math.sqrt(\n      negativeReturns.reduce((sum, r) => sum + r * r, 0) / negativeReturns.length\n    );\n    \n    const meanExcessReturn = excessReturns.reduce((sum, r) => sum + r, 0) / excessReturns.length;\n    \n    return downsideDeviation > 0 ? meanExcessReturn / downsideDeviation : 0;\n  }\n  \n  /**\n   * Jarque-Bera test for normality\n   */\n  jarqueBeraTest(values) {\n    const n = values.length;\n    const mean = values.reduce((sum, v) => sum + v, 0) / n;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / n;\n    const stdDev = Math.sqrt(variance);\n    \n    const skewness = this.calculateSkewness(values, mean, stdDev);\n    const kurtosis = this.calculateKurtosis(values, mean, stdDev);\n    \n    const jb = (n / 6) * (Math.pow(skewness, 2) + Math.pow(kurtosis - 3, 2) / 4);\n    const pValue = 1 - this.chiSquaredCDF(jb, 2); // Approximate p-value\n    \n    return {\n      statistic: jb,\n      pValue,\n      isNormal: pValue > 0.05\n    };\n  }\n  \n  /**\n   * Approximate chi-squared CDF\n   */\n  chiSquaredCDF(x, df) {\n    if (x <= 0) return 0;\n    return this.incompleteGamma(df / 2, x / 2);\n  }\n  \n  /**\n   * Incomplete gamma function approximation\n   */\n  incompleteGamma(a, x) {\n    // Simple approximation for demonstration\n    if (x === 0) return 0;\n    if (x < a + 1) {\n      let sum = 1 / a;\n      let term = 1 / a;\n      for (let n = 1; n < 100; n++) {\n        term *= x / (a + n);\n        sum += term;\n        if (term < 1e-15) break;\n      }\n      return Math.exp(-x + a * Math.log(x) - this.logGamma(a)) * sum;\n    } else {\n      return 1 - this.incompleteGamma(a, x);\n    }\n  }\n  \n  /**\n   * Log gamma function approximation\n   */\n  logGamma(x) {\n    const coef = [\n      76.18009172947146, -86.50532032941677, 24.01409824083091,\n      -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5\n    ];\n    \n    let j = 0;\n    const ser = 1.000000000190015;\n    let xx = x;\n    let y = xx = x;\n    let tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    \n    for (; j < 6; j++) {\n      ser += coef[j] / ++y;\n    }\n    \n    return -tmp + Math.log(2.5066282746310005 * ser / xx);\n  }\n  \n  /**\n   * Kolmogorov-Smirnov test for normality\n   */\n  ksTestNormality(values) {\n    const n = values.length;\n    const mean = values.reduce((sum, v) => sum + v, 0) / n;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / n;\n    const stdDev = Math.sqrt(variance);\n    \n    let maxD = 0;\n    \n    for (let i = 0; i < n; i++) {\n      const empirical = (i + 1) / n;\n      const theoretical = this.normalCDF((values[i] - mean) / stdDev);\n      const d = Math.abs(empirical - theoretical);\n      if (d > maxD) maxD = d;\n    }\n    \n    const critical = 1.36 / Math.sqrt(n); // Critical value at 5% significance\n    \n    return {\n      statistic: maxD,\n      critical,\n      isNormal: maxD < critical\n    };\n  }\n  \n  /**\n   * Normal CDF approximation\n   */\n  normalCDF(x) {\n    return 0.5 * (1 + this.erf(x / Math.sqrt(2)));\n  }\n  \n  /**\n   * Error function approximation\n   */\n  erf(x) {\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n    \n    const sign = x < 0 ? -1 : 1;\n    x = Math.abs(x);\n    \n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n    \n    return sign * y;\n  }\n  \n  /**\n   * Shapiro-Wilk test for normality (simplified)\n   */\n  shapiroWilkTest(values) {\n    // Simplified implementation - in practice, would use lookup tables\n    const n = values.length;\n    if (n < 3 || n > 5000) return null;\n    \n    const sortedValues = [...values].sort((a, b) => a - b);\n    const mean = values.reduce((sum, v) => sum + v, 0) / n;\n    \n    // This is a very simplified approximation\n    let numerator = 0;\n    let denominator = 0;\n    \n    for (let i = 0; i < n; i++) {\n      denominator += Math.pow(sortedValues[i] - mean, 2);\n    }\n    \n    // Simplified calculation - real implementation would use Shapiro-Wilk coefficients\n    const w = numerator / denominator;\n    \n    return {\n      statistic: w,\n      isNormal: w > 0.9 // Very rough approximation\n    };\n  }\n  \n  /**\n   * Calculate correlation matrix between metrics\n   */\n  calculateCorrelationMatrix(results, metrics) {\n    const correlationMatrix = {};\n    \n    for (let i = 0; i < metrics.length; i++) {\n      correlationMatrix[metrics[i]] = {};\n      for (let j = 0; j < metrics.length; j++) {\n        if (i === j) {\n          correlationMatrix[metrics[i]][metrics[j]] = 1.0;\n        } else {\n          const valuesI = results.map(r => r[metrics[i]]).filter(v => v !== null && !isNaN(v));\n          const valuesJ = results.map(r => r[metrics[j]]).filter(v => v !== null && !isNaN(v));\n          \n          correlationMatrix[metrics[i]][metrics[j]] = this.calculateCorrelation(valuesI, valuesJ);\n        }\n      }\n    }\n    \n    return correlationMatrix;\n  }\n  \n  /**\n   * Calculate Pearson correlation coefficient\n   */\n  calculateCorrelation(x, y) {\n    if (x.length !== y.length || x.length === 0) return 0;\n    \n    const n = x.length;\n    const meanX = x.reduce((sum, v) => sum + v, 0) / n;\n    const meanY = y.reduce((sum, v) => sum + v, 0) / n;\n    \n    let numerator = 0;\n    let sumXX = 0;\n    let sumYY = 0;\n    \n    for (let i = 0; i < n; i++) {\n      const dx = x[i] - meanX;\n      const dy = y[i] - meanY;\n      numerator += dx * dy;\n      sumXX += dx * dx;\n      sumYY += dy * dy;\n    }\n    \n    const denominator = Math.sqrt(sumXX * sumYY);\n    return denominator > 0 ? numerator / denominator : 0;\n  }\n\n  /**\n   * Calculate percentile\n   * @param {Array} sortedValues - Sorted array of values\n   * @param {number} p - Percentile (0-1)\n   * @returns {number} Percentile value\n   */\n  percentile(sortedValues, p) {\n    const index = p * (sortedValues.length - 1);\n    const lower = Math.floor(index);\n    const upper = Math.ceil(index);\n    const weight = index - lower;\n\n    if (lower === upper) {\n      return sortedValues[lower];\n    }\n\n    return sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight;\n  }\n\n  /**\n   * Calculate skewness\n   * @param {Array} values - Array of values\n   * @param {number} mean - Mean\n   * @param {number} stdDev - Standard deviation\n   * @returns {number} Skewness\n   */\n  calculateSkewness(values, mean, stdDev) {\n    const n = values.length;\n    const sum = values.reduce((sum, v) => sum + Math.pow((v - mean) / stdDev, 3), 0);\n    return (n / ((n - 1) * (n - 2))) * sum;\n  }\n\n  /**\n   * Calculate kurtosis\n   * @param {Array} values - Array of values\n   * @param {number} mean - Mean\n   * @param {number} stdDev - Standard deviation\n   * @returns {number} Kurtosis\n   */\n  calculateKurtosis(values, mean, stdDev) {\n    const n = values.length;\n    const sum = values.reduce((sum, v) => sum + Math.pow((v - mean) / stdDev, 4), 0);\n    return ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * sum - (3 * Math.pow(n - 1, 2)) / ((n - 2) * (n - 3));\n  }\n\n  /**\n   * Set random seed for reproducible results\n   * @param {number} seed - Random seed\n   */\n  setSeed(seed) {\n    // Simple linear congruential generator for reproducible results\n    this.seed = seed;\n    this.random = () => {\n      this.seed = (this.seed * 9301 + 49297) % 233280;\n      return this.seed / 233280;\n    };\n    Math.random = this.random;\n  }\n\n  /**\n   * Stop running simulation\n   */\n  stopSimulation() {\n    this.isRunning = false;\n  }\n\n  /**\n   * Check if simulation is running\n   * @returns {boolean} True if running\n   */\n  isSimulationRunning() {\n    return this.isRunning;\n  }\n}\n\n// Export singleton instance\nexport const monteCarloEngine = new MonteCarloEngine();\nexport default MonteCarloEngine;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Plus, ChevronDown, ChevronRight, Calculator, FileText, TrendingUp, Edit2 } from 'lucide-react';\n\nconst FinancialSpreadsheet = ({ data, onDataChange, onAdjustedValuesChange }) => {\n  const [activeStatement, setActiveStatement] = useState('incomeStatement');\n  const [adjustedValues, setAdjustedValues] = useState({});\n  const [expandedSections, setExpandedSections] = useState({\n    // Income Statement\n    revenue: true,\n    costOfGoodsSold: true,\n    operatingExpenses: true,\n    salariesBenefits: true,\n    grossProfit: true,\n    operatingIncome: true,\n    incomeBeforeTax: true,\n    otherIncomeExpense: true,\n    // Balance Sheet\n    currentAssets: true,\n    nonCurrentAssets: true,\n    currentLiabilities: true,\n    nonCurrentLiabilities: true,\n    equity: true,\n    // Cash Flow\n    operatingActivities: true,\n    investingActivities: true,\n    financingActivities: true\n  });\n  \n  const [editingCell, setEditingCell] = useState(null);\n  const [cellValue, setCellValue] = useState('');\n  const inputRef = useRef(null);\n\n  // Initialize adjusted values with 2024 data (period index 2)\n  useEffect(() => {\n    if (data?.statements?.incomeStatement && Object.keys(adjustedValues).length === 0) {\n      const newAdjustedValues = {};\n      const incomeStatement = data.statements.incomeStatement;\n      \n      Object.keys(incomeStatement).forEach(key => {\n        if (incomeStatement[key] && incomeStatement[key][2] !== undefined) {\n          newAdjustedValues[key] = incomeStatement[key][2];\n        }\n      });\n      \n      setAdjustedValues(newAdjustedValues);\n      if (onAdjustedValuesChange) {\n        onAdjustedValuesChange(newAdjustedValues);\n      }\n    }\n  }, [data, adjustedValues, onAdjustedValuesChange]);\n\n  // Get current template based on active statement\n  const getCurrentTemplate = () => {\n    switch (activeStatement) {\n      case 'balanceSheet':\n        return balanceSheetTemplate;\n      case 'cashFlow':\n        return cashFlowTemplate;\n      default:\n        return incomeStatementTemplate;\n    }\n  };\n\n\n  // Income Statement Template Structure with Enhanced Color Coding\n  const incomeStatementTemplate = {\n    revenue: {\n      title: 'Revenue',\n      color: 'bg-emerald-50 border-emerald-300',\n      headerBg: 'bg-emerald-600',\n      textColor: 'text-emerald-900',\n      items: [\n        { key: 'energyDevices', label: 'Energy Devices', level: 1 },\n        { key: 'injectables', label: 'Injectables', level: 1 },\n        { key: 'wellness', label: 'Wellness', level: 1 },\n        { key: 'weightloss', label: 'Weightloss', level: 1 },\n        { key: 'retailSales', label: 'Retail Sales', level: 1 },\n        { key: 'surgery', label: 'Surgery', level: 1 },\n        { key: 'totalRevenue', label: 'Total Revenue', level: 0, bold: true, formula: true }\n      ]\n    },\n    costOfGoodsSold: {\n      title: 'Cost of Goods Sold',\n      color: 'bg-red-50 border-red-300',\n      headerBg: 'bg-red-600',\n      textColor: 'text-red-900',\n      items: [\n        { key: 'energyDeviceSupplies', label: 'Energy Device Supplies', level: 1 },\n        { key: 'injectablesCogs', label: 'Injectables', level: 1 },\n        { key: 'wellnessCogs', label: 'Wellness', level: 1 },\n        { key: 'weightlossCogs', label: 'Weightloss', level: 1 },\n        { key: 'retailProducts', label: 'Retail Products', level: 1 },\n        { key: 'surgicalSupplies', label: 'Surgical Supplies', level: 1 },\n        { key: 'totalCostOfGoodsSold', label: 'Total Cost of Goods Sold', level: 0, bold: true, formula: true }\n      ]\n    },\n    grossProfit: {\n      title: 'Gross Profit',\n      color: 'bg-blue-50 border-blue-300',\n      headerBg: 'bg-blue-600',\n      textColor: 'text-blue-900',\n      items: [\n        { key: 'grossProfit', label: 'Gross Profit', level: 0, bold: true, formula: true }\n      ]\n    },\n    salariesBenefits: {\n      title: 'Salaries & Benefits',\n      color: 'bg-purple-50 border-purple-300',\n      headerBg: 'bg-purple-600',\n      textColor: 'text-purple-900',\n      items: [\n        { key: 'employeeBenefits', label: 'Employee Benefits', level: 1 },\n        { key: 'payroll', label: 'Payroll', level: 1 },\n        { key: 'payrollTaxes', label: 'Payroll Taxes', level: 1 },\n        { key: 'totalSalariesBenefits', label: 'Total Salaries & Benefits', level: 0, bold: true, formula: true }\n      ]\n    },\n    operatingExpenses: {\n      title: 'Operating Expenses',\n      color: 'bg-orange-50 border-orange-300',\n      headerBg: 'bg-orange-600',\n      textColor: 'text-orange-900',\n      items: [\n        { key: 'marketing', label: 'Marketing', level: 1 },\n        { key: 'automobile', label: 'Automobile', level: 1 },\n        { key: 'creditCardBankCharges', label: 'Credit Card and Bank Charges', level: 1 },\n        { key: 'donations', label: 'Donations', level: 1 },\n        { key: 'computerTelephoneUtilities', label: 'Computer, Telephone, and Utilities', level: 1 },\n        { key: 'depreciation', label: 'Depreciation', level: 1 },\n        { key: 'duesSubscriptions', label: 'Dues & Subscriptions', level: 1 },\n        { key: 'education', label: 'Education', level: 1 },\n        { key: 'equipmentRental', label: 'Equipment Rental', level: 1 },\n        { key: 'insurance', label: 'Insurance', level: 1 },\n        { key: 'interestExpense', label: 'Interest Expense', level: 1 },\n        { key: 'travelMealsEntertainment', label: 'Travel, Meals, and Entertainment', level: 1 },\n        { key: 'rent', label: 'Rent', level: 1 },\n        { key: 'officeExpenses', label: 'Office Expenses', level: 1 },\n        { key: 'professionalFees', label: 'Professional Fees', level: 1 },\n        { key: 'repairsMaintenance', label: 'Repairs & Maintenance', level: 1 },\n        { key: 'localTax', label: 'Local Tax', level: 1 },\n        { key: 'stateTax', label: 'State Tax', level: 1 },\n        { key: 'totalOperatingExpense', label: 'Total Operating Expense', level: 0, bold: true, formula: true }\n      ]\n    },\n    operatingIncome: {\n      title: 'Operating Income',\n      color: 'bg-teal-50 border-teal-300',\n      headerBg: 'bg-teal-600',\n      textColor: 'text-teal-900',\n      items: [\n        { key: 'operatingIncome', label: 'Operating Income', level: 0, bold: true }\n      ]\n    },\n    otherIncomeExpense: {\n      title: 'Other Income / (Expense)',\n      color: 'bg-slate-50 border-slate-300',\n      headerBg: 'bg-slate-600',\n      textColor: 'text-slate-900',\n      items: [\n        { key: 'gainOnAssetSale', label: 'Gain (Loss) On Asset Sale', level: 1 },\n        { key: 'interestIncome', label: 'Interest Income', level: 1 },\n        { key: 'otherExpenses', label: 'Other Expenses', level: 1 },\n        { key: 'totalOtherIncomeExpense', label: 'Total Other Income / (Expenses)', level: 0, bold: true, formula: true }\n      ]\n    },\n    incomeBeforeTax: {\n      title: 'Net Income Before Taxes',\n      color: 'bg-amber-50 border-amber-300',\n      headerBg: 'bg-amber-600',\n      textColor: 'text-amber-900',\n      items: [\n        { key: 'incomeBeforeTax', label: 'Net Income Before Taxes', level: 0, bold: true }\n      ]\n    }\n  };\n\n  // Balance Sheet Template Structure\n  const balanceSheetTemplate = {\n    currentAssets: {\n      title: 'Current Assets',\n      color: 'bg-emerald-50 border-emerald-300',\n      headerBg: 'bg-emerald-600',\n      textColor: 'text-emerald-900',\n      items: [\n        { key: 'cash', label: 'Cash and Cash Equivalents', level: 1 },\n        { key: 'receivables', label: 'Accounts Receivable', level: 1 },\n        { key: 'inventory', label: 'Inventory', level: 1 },\n        { key: 'prepaidExpenses', label: 'Prepaid Expenses', level: 1 },\n        { key: 'otherCurrentAssets', label: 'Other Current Assets', level: 1 },\n        { key: 'totalCurrentAssets', label: 'Total Current Assets', level: 0, formula: true, bold: true }\n      ]\n    },\n    nonCurrentAssets: {\n      title: 'Non-Current Assets',\n      color: 'bg-blue-50 border-blue-300',\n      headerBg: 'bg-blue-600',\n      textColor: 'text-blue-900',\n      items: [\n        { key: 'ppe', label: 'Property, Plant & Equipment', level: 1 },\n        { key: 'accumulatedDepreciation', label: 'Less: Accumulated Depreciation', level: 1 },\n        { key: 'netPPE', label: 'Net Property, Plant & Equipment', level: 1, formula: true },\n        { key: 'intangibleAssets', label: 'Intangible Assets', level: 1 },\n        { key: 'goodwill', label: 'Goodwill', level: 1 },\n        { key: 'otherNonCurrentAssets', label: 'Other Non-Current Assets', level: 1 },\n        { key: 'totalNonCurrentAssets', label: 'Total Non-Current Assets', level: 0, formula: true, bold: true }\n      ]\n    },\n    totalAssets: {\n      title: 'Total Assets',\n      color: 'bg-slate-50 border-slate-300',\n      headerBg: 'bg-slate-700',\n      textColor: 'text-slate-900',\n      items: [\n        { key: 'totalAssets', label: 'Total Assets', level: 0, formula: true, bold: true }\n      ]\n    },\n    currentLiabilities: {\n      title: 'Current Liabilities',\n      color: 'bg-red-50 border-red-300',\n      headerBg: 'bg-red-600',\n      textColor: 'text-red-900',\n      items: [\n        { key: 'accountsPayable', label: 'Accounts Payable', level: 1 },\n        { key: 'accruedExpenses', label: 'Accrued Expenses', level: 1 },\n        { key: 'shortTermDebt', label: 'Short-term Debt', level: 1 },\n        { key: 'currentPortionLongTermDebt', label: 'Current Portion of Long-term Debt', level: 1 },\n        { key: 'otherCurrentLiabilities', label: 'Other Current Liabilities', level: 1 },\n        { key: 'totalCurrentLiabilities', label: 'Total Current Liabilities', level: 0, formula: true, bold: true }\n      ]\n    },\n    nonCurrentLiabilities: {\n      title: 'Non-Current Liabilities',\n      color: 'bg-orange-50 border-orange-300',\n      headerBg: 'bg-orange-600',\n      textColor: 'text-orange-900',\n      items: [\n        { key: 'longTermDebt', label: 'Long-term Debt', level: 1 },\n        { key: 'deferredTaxLiabilities', label: 'Deferred Tax Liabilities', level: 1 },\n        { key: 'otherNonCurrentLiabilities', label: 'Other Non-Current Liabilities', level: 1 },\n        { key: 'totalNonCurrentLiabilities', label: 'Total Non-Current Liabilities', level: 0, formula: true, bold: true }\n      ]\n    },\n    totalLiabilities: {\n      title: 'Total Liabilities',\n      color: 'bg-slate-50 border-slate-300',\n      headerBg: 'bg-slate-700',\n      textColor: 'text-slate-900',\n      items: [\n        { key: 'totalLiabilities', label: 'Total Liabilities', level: 0, formula: true, bold: true }\n      ]\n    },\n    equity: {\n      title: 'Shareholders\\' Equity',\n      color: 'bg-purple-50 border-purple-300',\n      headerBg: 'bg-purple-600',\n      textColor: 'text-purple-900',\n      items: [\n        { key: 'commonStock', label: 'Common Stock', level: 1 },\n        { key: 'retainedEarnings', label: 'Retained Earnings', level: 1 },\n        { key: 'otherEquity', label: 'Other Comprehensive Income', level: 1 },\n        { key: 'totalEquity', label: 'Total Shareholders\\' Equity', level: 0, formula: true, bold: true }\n      ]\n    },\n    totalLiabilitiesEquity: {\n      title: 'Total Liabilities and Equity',\n      color: 'bg-slate-50 border-slate-300',\n      headerBg: 'bg-slate-700',\n      textColor: 'text-slate-900',\n      items: [\n        { key: 'totalLiabilitiesEquity', label: 'Total Liabilities and Shareholders\\' Equity', level: 0, formula: true, bold: true }\n      ]\n    }\n  };\n\n  // Cash Flow Template Structure\n  const cashFlowTemplate = {\n    operatingActivities: {\n      title: 'Operating Activities',\n      color: 'bg-emerald-50 border-emerald-300',\n      headerBg: 'bg-emerald-600',\n      textColor: 'text-emerald-900',\n      items: [\n        { key: 'netIncome', label: 'Net Income', level: 1 },\n        { key: 'depreciation', label: 'Depreciation and Amortization', level: 1 },\n        { key: 'receivablesChange', label: 'Change in Accounts Receivable', level: 1 },\n        { key: 'inventoryChange', label: 'Change in Inventory', level: 1 },\n        { key: 'payablesChange', label: 'Change in Accounts Payable', level: 1 },\n        { key: 'otherOperatingChanges', label: 'Other Operating Changes', level: 1 },\n        { key: 'netCashFromOperating', label: 'Net Cash from Operating Activities', level: 0, formula: true, bold: true }\n      ]\n    },\n    investingActivities: {\n      title: 'Investing Activities',\n      color: 'bg-blue-50 border-blue-300',\n      headerBg: 'bg-blue-600',\n      textColor: 'text-blue-900',\n      items: [\n        { key: 'capex', label: 'Capital Expenditures', level: 1 },\n        { key: 'acquisitions', label: 'Acquisitions', level: 1 },\n        { key: 'assetSales', label: 'Asset Sales', level: 1 },\n        { key: 'otherInvestingActivities', label: 'Other Investing Activities', level: 1 },\n        { key: 'netCashFromInvesting', label: 'Net Cash from Investing Activities', level: 0, formula: true, bold: true }\n      ]\n    },\n    financingActivities: {\n      title: 'Financing Activities',\n      color: 'bg-purple-50 border-purple-300',\n      headerBg: 'bg-purple-600',\n      textColor: 'text-purple-900',\n      items: [\n        { key: 'debtIssuance', label: 'Debt Issuance', level: 1 },\n        { key: 'debtRepayment', label: 'Debt Repayment', level: 1 },\n        { key: 'equityIssuance', label: 'Equity Issuance', level: 1 },\n        { key: 'dividends', label: 'Dividends Paid', level: 1 },\n        { key: 'otherFinancingActivities', label: 'Other Financing Activities', level: 1 },\n        { key: 'netCashFromFinancing', label: 'Net Cash from Financing Activities', level: 0, formula: true, bold: true }\n      ]\n    },\n    netCashFlow: {\n      title: 'Net Cash Flow',\n      color: 'bg-slate-50 border-slate-300',\n      headerBg: 'bg-slate-700',\n      textColor: 'text-slate-900',\n      items: [\n        { key: 'netCashFlow', label: 'Net Change in Cash', level: 0, formula: true, bold: true },\n        { key: 'beginningCash', label: 'Cash at Beginning of Period', level: 1 },\n        { key: 'endingCash', label: 'Cash at End of Period', level: 0, formula: true, bold: true }\n      ]\n    }\n  };\n\n  const currentTemplate = getCurrentTemplate();\n\n  const toggleSection = (section) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n\n  const handleCellClick = (rowKey, periodIndex, isAdjusted = false) => {\n    setEditingCell({ rowKey, periodIndex, isAdjusted });\n    let currentValue = '';\n    \n    if (isAdjusted) {\n      currentValue = adjustedValues[rowKey] || '';\n    } else {\n      currentValue = data.statements.incomeStatement[rowKey]?.[periodIndex] || '';\n    }\n    \n    setCellValue(currentValue.toString());\n  };\n\n  const handleCellBlur = () => {\n    if (editingCell) {\n      const { rowKey, periodIndex, isAdjusted } = editingCell;\n      const newValue = parseFloat(cellValue) || 0;\n      \n      if (isAdjusted) {\n        // Update adjusted values\n        const newAdjustedValues = {\n          ...adjustedValues,\n          [rowKey]: newValue\n        };\n        setAdjustedValues(newAdjustedValues);\n        if (onAdjustedValuesChange) {\n          onAdjustedValuesChange(newAdjustedValues);\n        }\n      } else {\n        // Update original data\n        const newData = { ...data };\n        if (!newData.statements.incomeStatement[rowKey]) {\n          newData.statements.incomeStatement[rowKey] = {};\n        }\n        newData.statements.incomeStatement[rowKey][periodIndex] = newValue;\n        onDataChange(newData);\n      }\n      \n      setEditingCell(null);\n      setCellValue('');\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleCellBlur();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      setEditingCell(null);\n      setCellValue('');\n    } else if (e.key === 'Tab') {\n      e.preventDefault();\n      handleCellBlur();\n      // Could implement tab navigation to next cell here\n    }\n  };\n\n  // Input validation for numeric values\n  const validateNumericInput = (value) => {\n    // Allow negative numbers, decimals, and empty strings\n    const numericRegex = /^-?\\d*\\.?\\d*$/;\n    return numericRegex.test(value) || value === '';\n  };\n\n  const formatNumber = (value) => {\n    if (!value && value !== 0) return '';\n    \n    // Convert to number if it's a string\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n    if (isNaN(numValue)) return '';\n    \n    // Format based on magnitude for better readability\n    const absValue = Math.abs(numValue);\n    let formattedValue;\n    \n    if (absValue >= 1000000) {\n      // Millions\n      formattedValue = new Intl.NumberFormat('en-US', {\n        minimumFractionDigits: 1,\n        maximumFractionDigits: 1\n      }).format(numValue / 1000000);\n      formattedValue += 'M';\n    } else if (absValue >= 1000) {\n      // Thousands\n      formattedValue = new Intl.NumberFormat('en-US', {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(numValue);\n    } else {\n      // Less than 1000\n      formattedValue = new Intl.NumberFormat('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }).format(numValue);\n    }\n    \n    return formattedValue;\n  };\n\n  const addNewRow = () => {\n    const newRowLabel = prompt('Enter row label:');\n    if (newRowLabel) {\n      const newData = { ...data };\n      // Add to template structure (this could be enhanced to persist custom rows)\n      onDataChange(newData);\n    }\n  };\n\n  const addPeriod = () => {\n    const newPeriodLabel = prompt('Enter period label (e.g., \"Year 5\"):');\n    if (newPeriodLabel) {\n      const newData = { ...data };\n      newData.periods = [...newData.periods, newPeriodLabel];\n      onDataChange(newData);\n    }\n  };\n\n  useEffect(() => {\n    if (editingCell && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [editingCell]);\n\n  const renderRow = (item) => {\n    const { key, label, level, formula, bold } = item;\n    \n    // Enhanced spacing and visual hierarchy\n    const indentClass = level === 1 ? 'pl-8' : level === 2 ? 'pl-12' : 'pl-4';\n    const textWeight = bold ? 'font-bold' : level === 0 ? 'font-semibold' : 'font-medium';\n    const textSize = level === 0 ? 'text-sm' : 'text-sm';\n    const textColor = level === 0 ? 'text-slate-900' : 'text-slate-700';\n    const rowBg = level === 0 ? 'bg-slate-50/70' : 'bg-white';\n    const borderColor = level === 0 ? 'border-slate-200' : 'border-slate-100';\n    \n    return (\n      <tr key={key} className={`${rowBg} border-b ${borderColor} hover:bg-slate-50 transition-all duration-150 group`}>\n        {/* Account Name Column */}\n        <td className={`px-6 py-4 ${indentClass} ${textWeight} ${textSize} ${textColor}`}>\n          <div className=\"flex items-center gap-3\">\n            {level === 0 && (\n              <div className=\"w-1.5 h-4 bg-gradient-to-b from-blue-500 to-blue-600 rounded-full flex-shrink-0 shadow-sm\" />\n            )}\n            <span className=\"leading-tight\">{label}</span>\n            {formula && (\n              <div className=\"flex items-center gap-1\">\n                <Calculator size={14} className=\"text-blue-500/80 flex-shrink-0\" />\n                <span className=\"text-xs text-blue-600 font-medium px-1.5 py-0.5 bg-blue-50 rounded-md\">AUTO</span>\n              </div>\n            )}\n          </div>\n        </td>\n        \n        {/* Units Column */}\n        <td className=\"px-4 py-4 text-center\">\n          <span className=\"text-xs font-medium text-slate-500 uppercase tracking-wide bg-slate-100 px-2 py-1 rounded-md\">\n            $ 000s\n          </span>\n        </td>\n        \n        {/* Period Columns */}\n        {data.periods.map((_, periodIndex) => (\n          <td key={periodIndex} className=\"px-4 py-4 text-right\">\n            {editingCell?.rowKey === key && editingCell?.periodIndex === periodIndex && !editingCell?.isAdjusted ? (\n              <div className=\"relative\">\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={cellValue}\n                  onChange={(e) => {\n                    const newValue = e.target.value;\n                    if (validateNumericInput(newValue)) {\n                      setCellValue(newValue);\n                    }\n                  }}\n                  onBlur={handleCellBlur}\n                  onKeyDown={handleKeyPress}\n                  className=\"w-full px-3 py-2.5 bg-white border-2 border-blue-400 rounded-lg text-slate-900 text-right font-mono text-sm focus:outline-none focus:ring-4 focus:ring-blue-100 focus:border-blue-500 shadow-lg\"\n                  placeholder=\"0.00\"\n                />\n                <div className=\"absolute -top-2 -right-2 flex gap-1\">\n                  <button\n                    onClick={handleCellBlur}\n                    className=\"w-5 h-5 bg-emerald-500 hover:bg-emerald-600 text-white rounded-full flex items-center justify-center text-xs transition-colors\"\n                  >\n                    ✓\n                  </button>\n                  <button\n                    onClick={() => {\n                      setEditingCell(null);\n                      setCellValue('');\n                    }}\n                    className=\"w-5 h-5 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center text-xs transition-colors\"\n                  >\n                    ×\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div\n                onClick={() => !formula && handleCellClick(key, periodIndex)}\n                className={`px-3 py-2.5 rounded-lg font-mono text-sm transition-all duration-200 min-h-[40px] flex items-center justify-end ${\n                  formula \n                    ? 'bg-gradient-to-r from-blue-50 to-blue-100 text-blue-800 font-semibold border border-blue-200 shadow-sm' \n                    : 'hover:bg-slate-100 text-slate-800 cursor-pointer border border-transparent hover:border-slate-200 hover:shadow-sm group-hover:bg-slate-50'\n                }`}\n              >\n                <span className={formula ? 'text-blue-900' : 'text-slate-700'}>\n                  {formatNumber(data.statements.incomeStatement[key]?.[periodIndex]) || '—'}\n                </span>\n                {!formula && (\n                  <Edit2 size={12} className=\"ml-2 opacity-0 group-hover:opacity-40 text-slate-400 transition-opacity\" />\n                )}\n              </div>\n            )}\n          </td>\n        ))}\n        \n        {/* Adjusted Column */}\n        <td className=\"px-4 py-4 text-right bg-gradient-to-r from-amber-50 to-yellow-50 border-l-2 border-amber-300\">\n          {editingCell?.rowKey === key && editingCell?.isAdjusted ? (\n            <div className=\"relative\">\n              <input\n                ref={inputRef}\n                type=\"text\"\n                value={cellValue}\n                onChange={(e) => {\n                  const newValue = e.target.value;\n                  if (validateNumericInput(newValue)) {\n                    setCellValue(newValue);\n                  }\n                }}\n                onBlur={handleCellBlur}\n                onKeyDown={handleKeyPress}\n                className=\"w-full px-3 py-2.5 bg-white border-2 border-amber-400 rounded-lg text-slate-900 text-right font-mono text-sm focus:outline-none focus:ring-4 focus:ring-amber-100 focus:border-amber-500 shadow-lg\"\n                placeholder=\"0.00\"\n              />\n              <div className=\"absolute -top-2 -right-2 flex gap-1\">\n                <button\n                  onClick={handleCellBlur}\n                  className=\"w-5 h-5 bg-emerald-500 hover:bg-emerald-600 text-white rounded-full flex items-center justify-center text-xs transition-colors\"\n                >\n                  ✓\n                </button>\n                <button\n                  onClick={() => {\n                    setEditingCell(null);\n                    setCellValue('');\n                  }}\n                  className=\"w-5 h-5 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center text-xs transition-colors\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div\n              onClick={() => !formula && handleCellClick(key, null, true)}\n              className={`px-3 py-2.5 rounded-lg font-mono text-sm transition-all duration-200 min-h-[40px] flex items-center justify-end ${\n                formula \n                  ? 'bg-gradient-to-r from-amber-100 to-yellow-100 text-amber-800 font-semibold border border-amber-300 shadow-sm' \n                  : 'hover:bg-amber-100 text-slate-800 cursor-pointer border border-transparent hover:border-amber-300 hover:shadow-sm'\n              }`}\n            >\n              <span className={formula ? 'text-amber-900' : 'text-slate-700'}>\n                {formatNumber(adjustedValues[key] || 0) || '—'}\n              </span>\n              {!formula && (\n                <Edit2 size={12} className=\"ml-2 opacity-0 group-hover:opacity-40 text-amber-500 transition-opacity\" />\n              )}\n            </div>\n          )}\n        </td>\n        \n        {/* Type Column */}\n        <td className=\"px-4 py-4 text-center\">\n          <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${\n            formula \n              ? 'bg-blue-100 text-blue-800 border border-blue-200' \n              : 'bg-slate-100 text-slate-700 border border-slate-200'\n          }`}>\n            {formula ? (\n              <>\n                <Calculator size={10} className=\"mr-1\" />\n                Auto\n              </>\n            ) : (\n              <>\n                <Edit2 size={10} className=\"mr-1\" />\n                Manual\n              </>\n            )}\n          </span>\n        </td>\n      </tr>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100\">\n      {/* Header Section */}\n      <div className=\"bg-white border-b border-slate-200 shadow-sm\">\n        <div className=\"max-w-full mx-auto px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-slate-900\">Financial Spreadsheet</h1>\n                <p className=\"text-sm text-slate-600 mt-1\">Professional financial modeling workspace</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={addPeriod}\n                className=\"px-4 py-2.5 bg-blue-600 hover:bg-blue-700 text-white rounded-lg flex items-center gap-2 transition-all duration-200 shadow-sm hover:shadow-md font-medium\"\n              >\n                <Plus size={16} />\n                Add Period\n              </button>\n              <select\n                value={activeStatement}\n                onChange={(e) => setActiveStatement(e.target.value)}\n                className=\"px-4 py-2.5 bg-white border border-slate-300 rounded-lg text-slate-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-medium shadow-sm\"\n              >\n                <option value=\"incomeStatement\">Income Statement</option>\n                <option value=\"balanceSheet\">Balance Sheet</option>\n                <option value=\"cashFlow\">Cash Flow Statement</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-full mx-auto p-8\">\n        <div className=\"bg-white rounded-xl border border-slate-200 shadow-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              {/* Enhanced Table Header */}\n              <thead className=\"bg-gradient-to-r from-slate-800 to-slate-900 text-white\">\n                <tr>\n                  <th className=\"min-w-[320px] px-6 py-4 text-left text-sm font-semibold tracking-wider\">\n                    <div className=\"flex items-center gap-2\">\n                      <FileText size={16} className=\"text-slate-300\" />\n                      Account Description\n                    </div>\n                  </th>\n                  <th className=\"w-20 px-4 py-4 text-center text-sm font-semibold\">Units</th>\n                  {data.periods.map((period, index) => (\n                    <th key={index} className=\"min-w-[140px] px-4 py-4 text-center text-sm font-semibold\">\n                      <div className=\"flex flex-col\">\n                        <span>{period}</span>\n                        <span className=\"text-xs text-slate-300 font-normal\">Actual</span>\n                      </div>\n                    </th>\n                  ))}\n                  <th className=\"min-w-[140px] px-4 py-4 text-center text-sm font-semibold bg-gradient-to-r from-amber-600 to-yellow-600 border-l-2 border-amber-400\">\n                    <div className=\"flex flex-col\">\n                      <span>Adjusted</span>\n                      <span className=\"text-xs text-amber-100 font-normal\">Modified</span>\n                    </div>\n                  </th>\n                  <th className=\"w-28 px-4 py-4 text-center text-sm font-semibold\">\n                    <div className=\"flex items-center justify-center gap-1\">\n                      <Calculator size={14} />\n                      Type\n                    </div>\n                  </th>\n                </tr>\n              </thead>\n              \n              <tbody className=\"divide-y divide-slate-100\">\n                {Object.entries(currentTemplate).map(([sectionKey, section]) => (\n                  <React.Fragment key={sectionKey}>\n                    {/* Enhanced Section Header */}\n                    <tr className={`${section.headerBg || 'bg-slate-600'} border-b-2 border-slate-300`}>\n                      <td colSpan={data.periods.length + 4} className=\"py-4 px-6\">\n                        <button\n                          onClick={() => toggleSection(sectionKey)}\n                          className=\"flex items-center gap-3 text-white hover:text-slate-200 transition-colors w-full text-left group\"\n                        >\n                          <div className=\"flex items-center justify-center w-6 h-6 rounded-full bg-white/20 group-hover:bg-white/30 transition-colors\">\n                            {expandedSections[sectionKey] ? \n                              <ChevronDown size={14} /> : \n                              <ChevronRight size={14} />\n                            }\n                          </div>\n                          <span className=\"font-bold text-lg\">{section.title}</span>\n                          <div className=\"flex-1\" />\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              addNewRow();\n                            }}\n                            className=\"p-1.5 hover:bg-white/20 rounded-lg transition-colors opacity-0 group-hover:opacity-100\"\n                            title=\"Add custom row\"\n                          >\n                            <Plus size={16} />\n                          </button>\n                        </button>\n                      </td>\n                    </tr>\n                    \n                    {/* Section Rows */}\n                    {expandedSections[sectionKey] && section.items.map(item => \n                      renderRow(item)\n                    )}\n                  </React.Fragment>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Enhanced Instructions Panel */}\n        <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"bg-white rounded-xl p-6 border border-slate-200 shadow-sm\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Calculator className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <h3 className=\"font-bold text-slate-900\">How to Use</h3>\n            </div>\n            <ul className=\"space-y-2 text-sm text-slate-700\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-blue-500 font-bold\">•</span>\n                Click any editable cell to modify values with enhanced input controls\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-blue-500 font-bold\">•</span>\n                Use Enter to save changes or Escape to cancel editing\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-blue-500 font-bold\">•</span>\n                Expand/collapse sections using the arrow controls\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-blue-500 font-bold\">•</span>\n                Formula cells automatically calculate based on inputs\n              </li>\n            </ul>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-6 border border-slate-200 shadow-sm\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <TrendingUp className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <h3 className=\"font-bold text-slate-900\">Professional Features</h3>\n            </div>\n            <ul className=\"space-y-2 text-sm text-slate-700\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 font-bold\">•</span>\n                Color-coded sections for easy visual navigation\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 font-bold\">•</span>\n                Adjusted column for scenario analysis and modifications\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 font-bold\">•</span>\n                Professional number formatting with proper alignment\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-green-500 font-bold\">•</span>\n                Enhanced editing experience with save/cancel controls\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialSpreadsheet;\n","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Plus, Trash2, TrendingUp, TrendingDown, Minus, BarChart3 } from 'lucide-react';\n\nconst ScenarioModeling = ({ data, modelInputs, onModelInputChange, calculateDCF, formatCurrency, formatPercent }) => {\n  const [showAddForm, setShowAddForm] = useState(false);\n  \n  const scenarios = modelInputs.scenario?.scenarios || [];\n\n  // Calculate DCF for each scenario\n  const scenarioResults = useMemo(() => {\n    return scenarios.map(scenario => {\n      try {\n        // Apply scenario assumptions to base DCF calculation\n        const incomeStatement = { ...data.statements.incomeStatement };\n        \n        // Apply revenue growth to revenue data (object format)\n        const baseRevenue = incomeStatement.totalRevenue || {};\n        const modifiedRevenue = {};\n        Object.keys(baseRevenue).forEach(periodIndex => {\n          const index = parseInt(periodIndex);\n          if (index === 0) {\n            modifiedRevenue[periodIndex] = baseRevenue[periodIndex]; // Base year unchanged\n          } else {\n            // Apply revenue growth for projection years\n            const growthRate = 1 + (scenario.revenueGrowth / 100);\n            modifiedRevenue[periodIndex] = baseRevenue[0] * Math.pow(growthRate, index);\n          }\n        });\n        \n        // Apply margin improvement to operating income\n        const baseOperating = incomeStatement.operatingIncome || {};\n        const modifiedOperating = {};\n        Object.keys(baseOperating).forEach(periodIndex => {\n          const index = parseInt(periodIndex);\n          if (index === 0) {\n            modifiedOperating[periodIndex] = baseOperating[periodIndex]; // Base year unchanged\n          } else {\n            // Apply margin improvement\n            const baseRevenueValue = baseRevenue[periodIndex] || 0;\n            const scenarioRevenue = modifiedRevenue[periodIndex] || 0;\n            const baseIncome = baseOperating[periodIndex] || 0;\n            \n            if (baseRevenueValue > 0) {\n              const baseMargin = baseIncome / baseRevenueValue;\n              const adjustedMargin = baseMargin + (scenario.marginImprovement / 100);\n              modifiedOperating[periodIndex] = scenarioRevenue * adjustedMargin;\n            } else {\n              modifiedOperating[periodIndex] = baseIncome;\n            }\n          }\n        });\n        \n        const scenarioData = {\n          ...data,\n          statements: {\n            ...data.statements,\n            incomeStatement: {\n              ...incomeStatement,\n              totalRevenue: modifiedRevenue,\n              operatingIncome: modifiedOperating\n            }\n          }\n        };\n\n      // Calculate DCF with scenario data\n      const dcfResult = calculateDCF(scenarioData);\n      \n      return {\n        ...scenario,\n        ...dcfResult,\n        weightedValue: dcfResult.enterpriseValue * (scenario.probability / 100)\n      };\n      } catch (error) {\n        console.error('Scenario calculation error:', error);\n        return {\n          ...scenario,\n          enterpriseValue: 0,\n          equityValue: 0,\n          weightedValue: 0\n        };\n      }\n    });\n  }, [scenarios, data, calculateDCF]);\n\n  // Calculate probability-weighted average\n  const weightedAverageValue = scenarioResults.reduce((sum, result) => sum + result.weightedValue, 0);\n\n  const addScenario = () => {\n    const newScenario = {\n      name: `Scenario ${scenarios.length + 1}`,\n      probability: Math.max(0, 100 - scenarios.reduce((sum, s) => sum + s.probability, 0)),\n      revenueGrowth: 10,\n      marginImprovement: 0\n    };\n    \n    onModelInputChange('scenario', 'scenarios', [...scenarios, newScenario]);\n    setShowAddForm(false);\n  };\n\n  const updateScenario = (index, field, value) => {\n    const updatedScenarios = scenarios.map((scenario, i) => \n      i === index ? { ...scenario, [field]: value } : scenario\n    );\n    onModelInputChange('scenario', 'scenarios', updatedScenarios);\n  };\n\n  const deleteScenario = (index) => {\n    const updatedScenarios = scenarios.filter((_, i) => i !== index);\n    onModelInputChange('scenario', 'scenarios', updatedScenarios);\n  };\n\n  const ScenarioForm = ({ scenario, index }) => (\n    <div className=\"border rounded-lg p-4 bg-white\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Scenario Name\n          </label>\n          <input\n            type=\"text\"\n            value={scenario.name}\n            onChange={(e) => updateScenario(index, 'name', e.target.value)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"Enter scenario name\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Probability (%)\n          </label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            value={scenario.probability}\n            onChange={(e) => updateScenario(index, 'probability', parseInt(e.target.value) || 0)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Revenue Growth (%)\n          </label>\n          <input\n            type=\"number\"\n            step=\"0.1\"\n            value={scenario.revenueGrowth}\n            onChange={(e) => updateScenario(index, 'revenueGrowth', parseFloat(e.target.value) || 0)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Margin Change (%)\n          </label>\n          <input\n            type=\"number\"\n            step=\"0.1\"\n            value={scenario.marginImprovement}\n            onChange={(e) => updateScenario(index, 'marginImprovement', parseFloat(e.target.value) || 0)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end mt-4 gap-2\">\n        <button\n          onClick={() => deleteScenario(index)}\n          className=\"px-3 py-1 text-red-600 hover:bg-red-50 rounded-lg transition-colors flex items-center gap-1\"\n        >\n          <Trash2 size={16} />\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Add Button */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <p className=\"text-gray-600\">\n            Create and compare multiple financial scenarios with different assumptions and probabilities.\n          </p>\n        </div>\n        <button\n          onClick={() => setShowAddForm(true)}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\n        >\n          <Plus size={16} />\n          Add Scenario\n        </button>\n      </div>\n\n      {/* Scenario Management */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-semibold text-lg\">Scenario Assumptions</h4>\n        \n        {scenarios.map((scenario, index) => (\n          <ScenarioForm key={index} scenario={scenario} index={index} />\n        ))}\n        \n        {showAddForm && (\n          <div className=\"border-2 border-dashed border-blue-300 rounded-lg p-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h5 className=\"font-medium\">Add New Scenario</h5>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={addScenario}\n                  className=\"px-3 py-1 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                >\n                  Add\n                </button>\n                <button\n                  onClick={() => setShowAddForm(false)}\n                  className=\"px-3 py-1 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Results Display */}\n      {scenarioResults.length > 0 && (\n        <div className=\"space-y-6\">\n          <h4 className=\"font-semibold text-lg\">Scenario Analysis Results</h4>\n          \n          {/* Probability-Weighted Summary */}\n          <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <BarChart3 size={20} className=\"text-blue-600\" />\n              <h5 className=\"font-semibold text-blue-800\">Probability-Weighted Valuation</h5>\n            </div>\n            <div className=\"text-3xl font-bold text-blue-800\">\n              {formatCurrency(weightedAverageValue)}\n            </div>\n            <p className=\"text-sm text-blue-600 mt-2\">\n              Expected value based on scenario probabilities\n            </p>\n          </div>\n\n          {/* Individual Scenario Results */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {scenarioResults.map((result, index) => (\n              <motion.div\n                key={index}\n                className=\"bg-white rounded-lg border p-4 hover:shadow-lg transition-shadow\"\n                whileHover={{ y: -2 }}\n              >\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div>\n                    <h6 className=\"font-semibold text-gray-800\">{result.name}</h6>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span>{result.probability}% probability</span>\n                      {result.revenueGrowth > 15 ? \n                        <TrendingUp size={14} className=\"text-green-500\" /> :\n                        result.revenueGrowth < 5 ?\n                        <TrendingDown size={14} className=\"text-red-500\" /> :\n                        <Minus size={14} className=\"text-gray-500\" />\n                      }\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"text-sm text-gray-600\">Enterprise Value</div>\n                    <div className=\"text-xl font-bold text-gray-800\">\n                      {formatCurrency(result.enterpriseValue)}\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-xs space-y-1 text-gray-600\">\n                    <div className=\"flex justify-between\">\n                      <span>Revenue Growth:</span>\n                      <span className=\"font-medium\">{formatPercent(result.revenueGrowth)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Margin Change:</span>\n                      <span className={`font-medium ${result.marginImprovement >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {result.marginImprovement >= 0 ? '+' : ''}{formatPercent(result.marginImprovement)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Weighted Value:</span>\n                      <span className=\"font-medium\">{formatCurrency(result.weightedValue)}</span>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Summary Statistics */}\n          <div className=\"bg-white rounded-lg border p-6\">\n            <h5 className=\"font-semibold mb-4\">Scenario Statistics</h5>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {formatCurrency(Math.max(...scenarioResults.map(r => r.enterpriseValue)))}\n                </div>\n                <div className=\"text-sm text-gray-600\">Best Case</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {formatCurrency(Math.min(...scenarioResults.map(r => r.enterpriseValue)))}\n                </div>\n                <div className=\"text-sm text-gray-600\">Worst Case</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {formatCurrency(weightedAverageValue)}\n                </div>\n                <div className=\"text-sm text-gray-600\">Expected Value</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-800\">\n                  {formatCurrency(Math.max(...scenarioResults.map(r => r.enterpriseValue)) - Math.min(...scenarioResults.map(r => r.enterpriseValue)))}\n                </div>\n                <div className=\"text-sm text-gray-600\">Value Range</div>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 pt-4 border-t\">\n              <div className=\"text-sm text-gray-600\">\n                <strong>Total Probability:</strong> {scenarios.reduce((sum, s) => sum + s.probability, 0)}%\n                {scenarios.reduce((sum, s) => sum + s.probability, 0) !== 100 && (\n                  <span className=\"text-orange-600 ml-2\">⚠ Probabilities should sum to 100%</span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {scenarios.length === 0 && (\n        <div className=\"text-center py-12 text-gray-500\">\n          <BarChart3 size={48} className=\"mx-auto mb-4 opacity-50\" />\n          <p>No scenarios created yet.</p>\n          <p className=\"text-sm mt-2\">Click \"Add Scenario\" to get started with scenario modeling.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScenarioModeling;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Activity, TrendingUp, TrendingDown, Settings, BarChart3, Plus, Minus } from 'lucide-react';\n\nconst SensitivityAnalysis = ({ data, modelInputs, onModelInputChange, calculateDCF, formatCurrency, formatPercent }) => {\n  const [selectedVariable, setSelectedVariable] = useState(null);\n  \n  const sensitivityConfig = modelInputs.sensitivity || {\n    variables: ['revenue', 'grossMargin', 'discountRate'],\n    ranges: {\n      revenue: { min: -20, max: 20 },\n      grossMargin: { min: -5, max: 5 },\n      discountRate: { min: 8, max: 15 }\n    }\n  };\n\n  // Variable definitions with display names and units\n  const variableDefinitions = {\n    revenue: { \n      name: 'Revenue Growth', \n      unit: '%', \n      description: 'Annual revenue growth rate',\n      baseValue: 15,\n      isPercentage: true\n    },\n    grossMargin: { \n      name: 'Gross Margin', \n      unit: '%', \n      description: 'Gross profit margin improvement',\n      baseValue: 45,\n      isPercentage: true\n    },\n    discountRate: { \n      name: 'Discount Rate (WACC)', \n      unit: '%', \n      description: 'Weighted average cost of capital',\n      baseValue: modelInputs.dcf?.discountRate || 10,\n      isPercentage: true\n    },\n    terminalGrowthRate: {\n      name: 'Terminal Growth Rate',\n      unit: '%',\n      description: 'Long-term growth rate assumption',\n      baseValue: modelInputs.dcf?.terminalGrowthRate || 2.5,\n      isPercentage: true\n    },\n    taxRate: {\n      name: 'Tax Rate',\n      unit: '%',\n      description: 'Corporate tax rate',\n      baseValue: modelInputs.dcf?.taxRate || 25,\n      isPercentage: true\n    }\n  };\n\n  // Calculate base case valuation\n  const baseValuation = useMemo(() => {\n    return calculateDCF();\n  }, [data, modelInputs, calculateDCF]);\n\n  // Generate sensitivity analysis data\n  const sensitivityResults = useMemo(() => {\n    const results = {};\n    \n    sensitivityConfig.variables.forEach(variable => {\n      const range = sensitivityConfig.ranges[variable];\n      const variableDef = variableDefinitions[variable];\n      \n      if (!range || !variableDef) return;\n      \n      const steps = 9; // Number of data points\n      const stepSize = (range.max - range.min) / (steps - 1);\n      const dataPoints = [];\n      \n      for (let i = 0; i < steps; i++) {\n        const value = range.min + (stepSize * i);\n        \n        // Create modified DCF inputs based on variable type\n        let modifiedData = { ...data };\n        let dcfInputs = {\n          ...modelInputs.dcf,\n          [variable]: variableDef.isPercentage ? value : value\n        };\n        \n        // For revenue and margin variables, we need to simulate the impact\n        if (variable === 'revenue' || variable === 'grossMargin') {\n          // Create a copy of the income statement with modified values\n          const incomeStatement = { ...data.statements.incomeStatement };\n          \n          if (variable === 'revenue') {\n            // Apply revenue growth change across periods\n            const baseRevenue = incomeStatement.totalRevenue || {};\n            const modifiedRevenue = {};\n            \n            Object.keys(baseRevenue).forEach(periodIndex => {\n              const index = parseInt(periodIndex);\n              if (index === 0) {\n                modifiedRevenue[periodIndex] = baseRevenue[periodIndex];\n              } else {\n                const growthRate = 1 + (value / 100);\n                modifiedRevenue[periodIndex] = baseRevenue[0] * Math.pow(growthRate, index);\n              }\n            });\n            \n            incomeStatement.totalRevenue = modifiedRevenue;\n          }\n          \n          if (variable === 'grossMargin') {\n            // Apply margin change to operating income\n            const baseOperating = incomeStatement.operatingIncome || {};\n            const baseRevenue = incomeStatement.totalRevenue || {};\n            const modifiedOperating = {};\n            \n            Object.keys(baseOperating).forEach(periodIndex => {\n              const revenue = baseRevenue[periodIndex] || 0;\n              const originalIncome = baseOperating[periodIndex] || 0;\n              if (revenue > 0) {\n                const baseMargin = originalIncome / revenue;\n                const adjustedMargin = baseMargin + (value / 100);\n                modifiedOperating[periodIndex] = revenue * adjustedMargin;\n              } else {\n                modifiedOperating[periodIndex] = originalIncome;\n              }\n            });\n            \n            incomeStatement.operatingIncome = modifiedOperating;\n          }\n          \n          modifiedData = {\n            ...data,\n            statements: {\n              ...data.statements,\n              incomeStatement\n            }\n          };\n        }\n        \n        // Use a temporary calculateDCF with modified inputs\n        const tempCalculateDCF = () => {\n          try {\n            const dcfParams = {\n              discountRate: dcfInputs.discountRate || 10,\n              terminalGrowthRate: dcfInputs.terminalGrowthRate || 2.5,\n              projectionYears: dcfInputs.projectionYears || 5,\n              taxRate: dcfInputs.taxRate || 25\n            };\n            \n            const sourceData = modifiedData;\n            const operatingIncomeData = sourceData.statements.incomeStatement.operatingIncome || {};\n            \n            // Extract operating incomes from object structure\n            let operatingIncomes = [];\n            Object.keys(operatingIncomeData).forEach(periodKey => {\n              const index = parseInt(periodKey);\n              if (index >= 0) {\n                operatingIncomes.push(operatingIncomeData[periodKey] || 0);\n              }\n            });\n            \n            if (operatingIncomes.length === 0) return { enterpriseValue: 0, equityValue: 0 };\n\n            let presentValue = 0;\n            const discountFactor = 1 + (dcfParams.discountRate / 100);\n\n            // Use available periods for projections\n            operatingIncomes.forEach((income, index) => {\n              if (index > 0 && index <= dcfParams.projectionYears) {\n                const afterTaxIncome = income * (1 - dcfParams.taxRate / 100);\n                const pv = afterTaxIncome / Math.pow(discountFactor, index);\n                presentValue += pv;\n              }\n            });\n\n            const lastYearIncome = operatingIncomes[operatingIncomes.length - 1] || 0;\n            const terminalCashFlow = lastYearIncome * (1 + dcfParams.terminalGrowthRate / 100) * (1 - dcfParams.taxRate / 100);\n            const terminalValue = terminalCashFlow / ((dcfParams.discountRate - dcfParams.terminalGrowthRate) / 100);\n            const presentTerminalValue = terminalValue / Math.pow(discountFactor, dcfParams.projectionYears);\n\n          const enterpriseValue = presentValue + presentTerminalValue;\n          \n          return {\n            enterpriseValue,\n            equityValue: enterpriseValue,\n            presentValueOperations: presentValue,\n            presentValueTerminal: presentTerminalValue,\n            terminalValue\n          };\n          } catch (error) {\n            console.error('DCF calculation error:', error);\n            return { enterpriseValue: 0, equityValue: 0 };\n          }\n        };\n        \n        const result = tempCalculateDCF();\n        \n        dataPoints.push({\n          variable: value,\n          valuation: result.enterpriseValue,\n          changeFromBase: ((result.enterpriseValue - baseValuation.enterpriseValue) / baseValuation.enterpriseValue) * 100\n        });\n      }\n      \n      results[variable] = {\n        definition: variableDef,\n        range: range,\n        dataPoints: dataPoints\n      };\n    });\n    \n    return results;\n  }, [data, modelInputs, sensitivityConfig, baseValuation, calculateDCF]);\n\n  // Tornado chart data (impact ranking)\n  const tornadoData = useMemo(() => {\n    return Object.entries(sensitivityResults).map(([variable, result]) => {\n      const maxImpact = Math.max(...result.dataPoints.map(d => Math.abs(d.changeFromBase)));\n      return {\n        variable,\n        definition: result.definition,\n        maxImpact,\n        positiveImpact: Math.max(...result.dataPoints.map(d => d.changeFromBase)),\n        negativeImpact: Math.min(...result.dataPoints.map(d => d.changeFromBase))\n      };\n    }).sort((a, b) => b.maxImpact - a.maxImpact);\n  }, [sensitivityResults]);\n\n  const updateSensitivityRange = (variable, field, value) => {\n    const updatedRanges = {\n      ...sensitivityConfig.ranges,\n      [variable]: {\n        ...sensitivityConfig.ranges[variable],\n        [field]: parseFloat(value)\n      }\n    };\n    onModelInputChange('sensitivity', 'ranges', updatedRanges);\n  };\n\n  const addVariable = (variableName) => {\n    if (!sensitivityConfig.variables.includes(variableName) && variableDefinitions[variableName]) {\n      const updatedVariables = [...sensitivityConfig.variables, variableName];\n      const updatedRanges = {\n        ...sensitivityConfig.ranges,\n        [variableName]: { min: -10, max: 10 }\n      };\n      onModelInputChange('sensitivity', 'variables', updatedVariables);\n      onModelInputChange('sensitivity', 'ranges', updatedRanges);\n    }\n  };\n\n  const removeVariable = (variableName) => {\n    const updatedVariables = sensitivityConfig.variables.filter(v => v !== variableName);\n    const { [variableName]: removed, ...updatedRanges } = sensitivityConfig.ranges;\n    onModelInputChange('sensitivity', 'variables', updatedVariables);\n    onModelInputChange('sensitivity', 'ranges', updatedRanges);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <p className=\"text-gray-600 mb-4\">\n            Analyze how changes in key variables impact enterprise valuation. \n            Higher sensitivity indicates greater risk and importance for due diligence.\n          </p>\n          <div className=\"flex items-center gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n              <span>Base Case: {formatCurrency(baseValuation.enterpriseValue)}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Activity size={14} />\n              <span>{sensitivityConfig.variables.length} variables analyzed</span>\n            </div>\n          </div>\n        </div>\n        <button\n          className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2\"\n        >\n          <Settings size={16} />\n          Configure\n        </button>\n      </div>\n\n      {/* Tornado Chart */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        <h4 className=\"font-semibold text-lg mb-4 flex items-center gap-2\">\n          <BarChart3 size={20} />\n          Impact Ranking (Tornado Chart)\n        </h4>\n        \n        <div className=\"space-y-3\">\n          {tornadoData.map((item, index) => (\n            <div key={item.variable} className=\"relative\">\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-sm font-medium\">{index + 1}. {item.definition.name}</span>\n                <span className=\"text-xs text-gray-500\">±{item.maxImpact.toFixed(1)}%</span>\n              </div>\n              \n              <div className=\"relative h-8 bg-gray-100 rounded\">\n                {/* Negative impact bar */}\n                <div \n                  className=\"absolute left-1/2 h-full bg-red-400 rounded-l\"\n                  style={{\n                    width: `${Math.abs(item.negativeImpact) / Math.max(Math.abs(item.negativeImpact), item.positiveImpact) * 50}%`,\n                    transform: 'translateX(-100%)'\n                  }}\n                />\n                \n                {/* Positive impact bar */}\n                <div \n                  className=\"absolute left-1/2 h-full bg-green-400 rounded-r\"\n                  style={{\n                    width: `${item.positiveImpact / Math.max(Math.abs(item.negativeImpact), item.positiveImpact) * 50}%`\n                  }}\n                />\n                \n                {/* Center line */}\n                <div className=\"absolute left-1/2 top-0 bottom-0 w-0.5 bg-gray-400 transform -translate-x-0.5\" />\n                \n                {/* Labels */}\n                <div className=\"absolute inset-0 flex items-center justify-between px-2 text-xs font-medium text-white\">\n                  <span>{item.negativeImpact.toFixed(1)}%</span>\n                  <span>+{item.positiveImpact.toFixed(1)}%</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Variable Configuration */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        <h4 className=\"font-semibold text-lg mb-4\">Variable Configuration</h4>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {sensitivityConfig.variables.map(variable => {\n            const result = sensitivityResults[variable];\n            if (!result) return null;\n            \n            return (\n              <div key={variable} className=\"border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <h6 className=\"font-medium\">{result.definition.name}</h6>\n                    <p className=\"text-xs text-gray-500\">{result.definition.description}</p>\n                  </div>\n                  <button\n                    onClick={() => removeVariable(variable)}\n                    className=\"text-red-500 hover:bg-red-50 p-1 rounded\"\n                  >\n                    <Minus size={16} />\n                  </button>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3 mb-3\">\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Min Value ({result.definition.unit})\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={result.range.min}\n                      onChange={(e) => updateSensitivityRange(variable, 'min', e.target.value)}\n                      className=\"w-full px-2 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Max Value ({result.definition.unit})\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={result.range.max}\n                      onChange={(e) => updateSensitivityRange(variable, 'max', e.target.value)}\n                      className=\"w-full px-2 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                    />\n                  </div>\n                </div>\n                \n                {/* Mini chart */}\n                <div className=\"h-16 bg-gray-50 rounded p-2\">\n                  <div className=\"text-xs text-gray-500 mb-1\">Valuation Sensitivity</div>\n                  <div className=\"flex items-end justify-between h-8\">\n                    {result.dataPoints.map((point, index) => (\n                      <div\n                        key={index}\n                        className={`w-1 rounded-t ${\n                          point.changeFromBase > 0 ? 'bg-green-400' : \n                          point.changeFromBase < 0 ? 'bg-red-400' : 'bg-blue-400'\n                        }`}\n                        style={{\n                          height: `${Math.abs(point.changeFromBase) / 50 * 100}%`,\n                          minHeight: '2px'\n                        }}\n                        title={`${point.variable}${result.definition.unit}: ${formatCurrency(point.valuation)}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {/* Add Variable */}\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Plus size={24} className=\"mx-auto mb-2 text-gray-400\" />\n              <p className=\"text-sm text-gray-500 mb-3\">Add Variable</p>\n              <div className=\"space-y-2\">\n                {Object.keys(variableDefinitions)\n                  .filter(v => !sensitivityConfig.variables.includes(v))\n                  .map(variable => (\n                    <button\n                      key={variable}\n                      onClick={() => addVariable(variable)}\n                      className=\"block w-full px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors\"\n                    >\n                      {variableDefinitions[variable].name}\n                    </button>\n                  ))\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Detailed Analysis */}\n      {selectedVariable && sensitivityResults[selectedVariable] && (\n        <div className=\"bg-white rounded-lg border p-6\">\n          <h4 className=\"font-semibold text-lg mb-4\">\n            Detailed Analysis: {sensitivityResults[selectedVariable].definition.name}\n          </h4>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div>\n              <h6 className=\"font-medium mb-3\">Data Points</h6>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {sensitivityResults[selectedVariable].dataPoints.map((point, index) => (\n                  <div key={index} className=\"flex justify-between items-center text-sm p-2 bg-gray-50 rounded\">\n                    <span>{point.variable}{sensitivityResults[selectedVariable].definition.unit}</span>\n                    <span className=\"font-medium\">{formatCurrency(point.valuation)}</span>\n                    <span className={`font-medium ${\n                      point.changeFromBase > 0 ? 'text-green-600' : \n                      point.changeFromBase < 0 ? 'text-red-600' : 'text-gray-600'\n                    }`}>\n                      {point.changeFromBase > 0 ? '+' : ''}{point.changeFromBase.toFixed(1)}%\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h6 className=\"font-medium mb-3\">Key Statistics</h6>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Range Impact:</span>\n                  <span className=\"font-medium\">\n                    ±{Math.max(...sensitivityResults[selectedVariable].dataPoints.map(d => Math.abs(d.changeFromBase))).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Max Upside:</span>\n                  <span className=\"font-medium text-green-600\">\n                    +{Math.max(...sensitivityResults[selectedVariable].dataPoints.map(d => d.changeFromBase)).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Max Downside:</span>\n                  <span className=\"font-medium text-red-600\">\n                    {Math.min(...sensitivityResults[selectedVariable].dataPoints.map(d => d.changeFromBase)).toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SensitivityAnalysis;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  LineChart, Line, BarChart, Bar, AreaChart, Area, PieChart, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer \n} from 'recharts';\nimport { TrendingUp, BarChart3, PieChart as PieChartIcon, Activity, Eye, EyeOff } from 'lucide-react';\n\nconst DataVisualization = ({ \n  dcfData, \n  sensitivityData, \n  scenarioData, \n  formatCurrency, \n  formatPercent \n}) => {\n  const [activeChart, setActiveChart] = useState('dcf-waterfall');\n  const [showDetails, setShowDetails] = useState(true);\n\n  // Chart configuration\n  const chartTypes = [\n    { id: 'dcf-waterfall', label: 'DCF Waterfall', icon: BarChart3, category: 'dcf' },\n    { id: 'cashflow-trend', label: 'Cash Flow Trend', icon: TrendingUp, category: 'dcf' },\n    { id: 'sensitivity-tornado', label: 'Sensitivity Tornado', icon: Activity, category: 'sensitivity' },\n    { id: 'scenario-distribution', label: 'Scenario Distribution', icon: PieChartIcon, category: 'scenario' },\n    { id: 'valuation-bridge', label: 'Valuation Bridge', icon: BarChart3, category: 'combined' }\n  ];\n\n  // Prepare DCF Waterfall Data\n  const dcfWaterfallData = useMemo(() => {\n    if (!dcfData?.years) return [];\n    \n    let cumulativeValue = 0;\n    const data = [];\n    \n    // Add each year's contribution\n    dcfData.years.forEach((year, index) => {\n      const startValue = cumulativeValue;\n      cumulativeValue += year.presentValue;\n      \n      data.push({\n        name: `Year ${year.year}`,\n        value: year.presentValue,\n        cumulative: cumulativeValue,\n        start: startValue,\n        freeCashFlow: year.freeCashFlow,\n        category: 'operations'\n      });\n    });\n    \n    // Add terminal value\n    const terminalStart = cumulativeValue;\n    cumulativeValue += dcfData.presentValueTerminal;\n    \n    data.push({\n      name: 'Terminal Value',\n      value: dcfData.presentValueTerminal,\n      cumulative: cumulativeValue,\n      start: terminalStart,\n      category: 'terminal'\n    });\n    \n    return data;\n  }, [dcfData]);\n\n  // Prepare Cash Flow Trend Data\n  const cashFlowTrendData = useMemo(() => {\n    if (!dcfData?.years) return [];\n    \n    return dcfData.years.map((year, index) => ({\n      year: `Year ${year.year}`,\n      freeCashFlow: year.freeCashFlow,\n      presentValue: year.presentValue,\n      revenue: year.revenue,\n      operatingIncome: year.operatingIncome,\n      workingCapitalChange: year.workingCapitalChange,\n      capex: Math.abs(year.capex)\n    }));\n  }, [dcfData]);\n\n  // Prepare Sensitivity Tornado Data\n  const sensitivityTornadoData = useMemo(() => {\n    if (!sensitivityData) return [];\n    \n    return Object.entries(sensitivityData).map(([variable, result]) => {\n      const maxUpside = Math.max(...result.dataPoints.map(d => d.changeFromBase));\n      const maxDownside = Math.min(...result.dataPoints.map(d => d.changeFromBase));\n      \n      return {\n        variable: result.definition.name,\n        upside: maxUpside,\n        downside: Math.abs(maxDownside),\n        range: maxUpside - maxDownside\n      };\n    }).sort((a, b) => b.range - a.range);\n  }, [sensitivityData]);\n\n  // Prepare Scenario Distribution Data\n  const scenarioDistributionData = useMemo(() => {\n    if (!scenarioData?.length) return [];\n    \n    return scenarioData.map((scenario, index) => ({\n      name: scenario.name,\n      value: scenario.enterpriseValue,\n      probability: scenario.probability,\n      weightedValue: scenario.weightedValue,\n      fill: `hsl(${(index * 137.5) % 360}, 70%, 50%)`\n    }));\n  }, [scenarioData]);\n\n  // Custom tooltip for different chart types\n  const CustomTooltip = ({ active, payload, label, chartType }) => {\n    if (!active || !payload || !payload.length) return null;\n\n    const formatValue = (value, key) => {\n      if (key?.includes('Percent') || key?.includes('Rate')) {\n        return formatPercent(value);\n      }\n      return formatCurrency(value);\n    };\n\n    return (\n      <div className=\"bg-white p-3 border rounded-lg shadow-lg\">\n        <p className=\"font-medium text-gray-800\">{label}</p>\n        {payload.map((entry, index) => (\n          <p key={index} style={{ color: entry.color }} className=\"text-sm\">\n            {`${entry.dataKey}: ${formatValue(entry.value, entry.dataKey)}`}\n          </p>\n        ))}\n      </div>\n    );\n  };\n\n  // DCF Waterfall Chart\n  const DCFWaterfallChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <BarChart data={dcfWaterfallData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis tickFormatter={(value) => formatCurrency(value)} />\n        <Tooltip content={<CustomTooltip chartType=\"waterfall\" />} />\n        <Bar dataKey=\"value\" fill=\"#3B82F6\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  // Cash Flow Trend Chart\n  const CashFlowTrendChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart data={cashFlowTrendData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"year\" />\n        <YAxis tickFormatter={(value) => formatCurrency(value)} />\n        <Tooltip content={<CustomTooltip chartType=\"trend\" />} />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"freeCashFlow\" stroke=\"#10B981\" strokeWidth={3} name=\"Free Cash Flow\" />\n        <Line type=\"monotone\" dataKey=\"presentValue\" stroke=\"#3B82F6\" strokeWidth={2} name=\"Present Value\" />\n        <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#8B5CF6\" strokeWidth={2} name=\"Revenue\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  // Sensitivity Tornado Chart\n  const SensitivityTornadoChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <BarChart \n        data={sensitivityTornadoData} \n        layout=\"horizontal\"\n        margin={{ top: 20, right: 30, left: 100, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis type=\"number\" tickFormatter={(value) => `${value.toFixed(1)}%`} />\n        <YAxis type=\"category\" dataKey=\"variable\" />\n        <Tooltip \n          formatter={(value, name) => [`${value.toFixed(1)}%`, name]}\n          labelFormatter={(label) => `Variable: ${label}`}\n        />\n        <Bar dataKey=\"upside\" fill=\"#10B981\" name=\"Upside Impact\" />\n        <Bar dataKey=\"downside\" fill=\"#EF4444\" name=\"Downside Impact\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  // Scenario Distribution Chart\n  const ScenarioDistributionChart = () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={scenarioDistributionData}\n            cx=\"50%\"\n            cy=\"50%\"\n            outerRadius={80}\n            dataKey=\"probability\"\n            label={({ name, probability }) => `${name}: ${probability}%`}\n          >\n            {scenarioDistributionData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.fill} />\n            ))}\n          </Pie>\n          <Tooltip formatter={(value) => `${value}%`} />\n        </PieChart>\n      </ResponsiveContainer>\n      \n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={scenarioDistributionData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis tickFormatter={(value) => formatCurrency(value)} />\n          <Tooltip content={<CustomTooltip chartType=\"scenario\" />} />\n          <Bar dataKey=\"value\" fill=\"#8B5CF6\" name=\"Enterprise Value\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n\n  // Valuation Bridge Chart\n  const ValuationBridgeChart = () => {\n    const bridgeData = [\n      { name: 'PV of Operations', value: dcfData?.cumulativePV || 0, type: 'positive' },\n      { name: 'PV of Terminal', value: dcfData?.presentValueTerminal || 0, type: 'positive' },\n      { name: 'Enterprise Value', value: dcfData?.enterpriseValue || 0, type: 'total' }\n    ];\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={bridgeData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis tickFormatter={(value) => formatCurrency(value)} />\n          <Tooltip content={<CustomTooltip chartType=\"bridge\" />} />\n          <Bar \n            dataKey=\"value\" \n            fill={(entry) => entry.type === 'total' ? '#1F2937' : '#3B82F6'}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderChart = () => {\n    switch (activeChart) {\n      case 'dcf-waterfall':\n        return <DCFWaterfallChart />;\n      case 'cashflow-trend':\n        return <CashFlowTrendChart />;\n      case 'sensitivity-tornado':\n        return <SensitivityTornadoChart />;\n      case 'scenario-distribution':\n        return <ScenarioDistributionChart />;\n      case 'valuation-bridge':\n        return <ValuationBridgeChart />;\n      default:\n        return <DCFWaterfallChart />;\n    }\n  };\n\n  const getChartDescription = () => {\n    switch (activeChart) {\n      case 'dcf-waterfall':\n        return 'Shows the contribution of each year\\'s cash flows and terminal value to total enterprise value.';\n      case 'cashflow-trend':\n        return 'Displays the trend of free cash flows, present values, and key financial metrics over time.';\n      case 'sensitivity-tornado':\n        return 'Illustrates how changes in key variables impact enterprise value, ranked by sensitivity.';\n      case 'scenario-distribution':\n        return 'Compares different scenarios by probability weights and resulting enterprise values.';\n      case 'valuation-bridge':\n        return 'Breaks down enterprise value into operating value and terminal value components.';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h3 className=\"text-xl font-semibold mb-2 flex items-center gap-2\">\n            <BarChart3 size={20} />\n            Data Visualization\n          </h3>\n          <p className=\"text-gray-600\">\n            Interactive charts and graphs to visualize valuation results and sensitivity analysis.\n          </p>\n        </div>\n        <button\n          onClick={() => setShowDetails(!showDetails)}\n          className={`px-3 py-2 rounded-lg text-sm transition-colors flex items-center gap-2 ${\n            showDetails ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'\n          }`}\n        >\n          {showDetails ? <EyeOff size={14} /> : <Eye size={14} />}\n          {showDetails ? 'Hide Details' : 'Show Details'}\n        </button>\n      </div>\n\n      {/* Chart Type Selector */}\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\n        {chartTypes.map((chart) => {\n          const Icon = chart.icon;\n          return (\n            <motion.button\n              key={chart.id}\n              onClick={() => setActiveChart(chart.id)}\n              className={`p-3 rounded-lg border-2 transition-all text-center ${\n                activeChart === chart.id\n                  ? 'border-blue-500 bg-blue-50 text-blue-700'\n                  : 'border-gray-200 bg-white hover:border-gray-300 text-gray-700'\n              }`}\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n            >\n              <Icon size={20} className=\"mx-auto mb-2\" />\n              <div className=\"text-xs font-medium\">{chart.label}</div>\n            </motion.button>\n          );\n        })}\n      </div>\n\n      {/* Chart Container */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h4 className=\"font-semibold text-lg\">\n            {chartTypes.find(c => c.id === activeChart)?.label}\n          </h4>\n          {showDetails && (\n            <span className=\"text-sm text-gray-500\">\n              {getChartDescription()}\n            </span>\n          )}\n        </div>\n        \n        <div className=\"min-h-[400px]\">\n          {renderChart()}\n        </div>\n      </div>\n\n      {/* Chart Insights */}\n      {showDetails && (\n        <div className=\"bg-white rounded-lg border p-6\">\n          <h4 className=\"font-semibold text-lg mb-4\">Key Insights</h4>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {activeChart === 'dcf-waterfall' && (\n              <>\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-sm text-blue-600 font-medium\">Operations Contribution</div>\n                  <div className=\"text-lg font-bold text-blue-800\">\n                    {dcfData?.cumulativePV ? \n                      `${((dcfData.cumulativePV / dcfData.enterpriseValue) * 100).toFixed(1)}%` : \n                      'N/A'\n                    }\n                  </div>\n                </div>\n                <div className=\"p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-sm text-purple-600 font-medium\">Terminal Contribution</div>\n                  <div className=\"text-lg font-bold text-purple-800\">\n                    {dcfData?.presentValueTerminal ? \n                      `${((dcfData.presentValueTerminal / dcfData.enterpriseValue) * 100).toFixed(1)}%` : \n                      'N/A'\n                    }\n                  </div>\n                </div>\n                <div className=\"p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-sm text-green-600 font-medium\">Avg. Annual FCF</div>\n                  <div className=\"text-lg font-bold text-green-800\">\n                    {dcfData?.freeCashFlows ? \n                      formatCurrency(dcfData.freeCashFlows.reduce((a, b) => a + b, 0) / dcfData.freeCashFlows.length) : \n                      'N/A'\n                    }\n                  </div>\n                </div>\n              </>\n            )}\n\n            {activeChart === 'sensitivity-tornado' && sensitivityTornadoData.length > 0 && (\n              <>\n                <div className=\"p-4 bg-red-50 rounded-lg\">\n                  <div className=\"text-sm text-red-600 font-medium\">Highest Risk Variable</div>\n                  <div className=\"text-lg font-bold text-red-800\">\n                    {sensitivityTornadoData[0]?.variable}\n                  </div>\n                  <div className=\"text-sm text-red-600\">\n                    ±{sensitivityTornadoData[0]?.range.toFixed(1)}% impact\n                  </div>\n                </div>\n                <div className=\"p-4 bg-yellow-50 rounded-lg\">\n                  <div className=\"text-sm text-yellow-600 font-medium\">Medium Risk Variables</div>\n                  <div className=\"text-lg font-bold text-yellow-800\">\n                    {sensitivityTornadoData.slice(1, 3).map(v => v.variable).join(', ')}\n                  </div>\n                </div>\n                <div className=\"p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-sm text-green-600 font-medium\">Lowest Risk Variable</div>\n                  <div className=\"text-lg font-bold text-green-800\">\n                    {sensitivityTornadoData[sensitivityTornadoData.length - 1]?.variable}\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DataVisualization;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Calculator, TrendingUp, DollarSign, Percent, Info, BookOpen, Settings } from 'lucide-react';\n\nconst WACCCalculator = ({ modelInputs, onModelInputChange, formatPercent }) => {\n  const [showDetails, setShowDetails] = useState(true);\n  const [activeTab, setActiveTab] = useState('inputs');\n\n  // WACC calculation inputs with defaults\n  const waccInputs = modelInputs.dcf.wacc || {\n    // Cost of Equity (CAPM)\n    riskFreeRate: 4.5,\n    marketRiskPremium: 6.0,\n    beta: 1.2,\n    smallCompanyPremium: 3.0,\n    companySpecificRisk: 2.0,\n    \n    // Cost of Debt\n    debtInterestRate: 6.5,\n    taxRate: 25,\n    \n    // Capital Structure\n    marketValueEquity: 100000,\n    marketValueDebt: 30000,\n    \n    // Alternative methods\n    buildUpMethod: {\n      riskFreeRate: 4.5,\n      equityRiskPremium: 6.0,\n      sizeRiskPremium: 3.0,\n      industryRiskPremium: 2.0,\n      companySpecificRisk: 2.0\n    },\n    \n    // Industry benchmarks\n    industryWACC: 10.5,\n    industryBeta: 1.1,\n    industryDebtEquityRatio: 0.3\n  };\n\n  // Calculate WACC components\n  const waccCalculation = useMemo(() => {\n    const inputs = { ...waccInputs, ...modelInputs.dcf.wacc };\n    \n    // Cost of Equity - CAPM Method\n    const costOfEquityCAPM = inputs.riskFreeRate + \n                            (inputs.beta * inputs.marketRiskPremium) + \n                            inputs.smallCompanyPremium + \n                            inputs.companySpecificRisk;\n    \n    // Cost of Equity - Build-up Method\n    const costOfEquityBuildUp = inputs.buildUpMethod.riskFreeRate +\n                               inputs.buildUpMethod.equityRiskPremium +\n                               inputs.buildUpMethod.sizeRiskPremium +\n                               inputs.buildUpMethod.industryRiskPremium +\n                               inputs.buildUpMethod.companySpecificRisk;\n    \n    // Cost of Debt (after-tax)\n    const costOfDebtAfterTax = inputs.debtInterestRate * (1 - inputs.taxRate / 100);\n    \n    // Capital structure weights\n    const totalCapital = inputs.marketValueEquity + inputs.marketValueDebt;\n    const equityWeight = inputs.marketValueEquity / totalCapital;\n    const debtWeight = inputs.marketValueDebt / totalCapital;\n    \n    // WACC calculations\n    const waccCAPM = (costOfEquityCAPM / 100 * equityWeight) + \n                     (costOfDebtAfterTax / 100 * debtWeight);\n    \n    const waccBuildUp = (costOfEquityBuildUp / 100 * equityWeight) + \n                        (costOfDebtAfterTax / 100 * debtWeight);\n    \n    // Risk-adjusted WACC (average of methods)\n    const finalWACC = (waccCAPM + waccBuildUp) / 2;\n    \n    return {\n      costOfEquityCAPM,\n      costOfEquityBuildUp,\n      costOfDebtAfterTax,\n      equityWeight: equityWeight * 100,\n      debtWeight: debtWeight * 100,\n      waccCAPM: waccCAPM * 100,\n      waccBuildUp: waccBuildUp * 100,\n      finalWACC: finalWACC * 100,\n      totalCapital,\n      debtToEquityRatio: inputs.marketValueDebt / inputs.marketValueEquity\n    };\n  }, [waccInputs, modelInputs.dcf.wacc]);\n\n  const updateWACCInput = (field, value) => {\n    const updatedWACC = {\n      ...waccInputs,\n      ...modelInputs.dcf.wacc,\n      [field]: parseFloat(value) || 0\n    };\n    onModelInputChange('dcf', 'wacc', updatedWACC);\n  };\n\n  const updateBuildUpInput = (field, value) => {\n    const updatedWACC = {\n      ...waccInputs,\n      ...modelInputs.dcf.wacc,\n      buildUpMethod: {\n        ...waccInputs.buildUpMethod,\n        ...modelInputs.dcf.wacc?.buildUpMethod,\n        [field]: parseFloat(value) || 0\n      }\n    };\n    onModelInputChange('dcf', 'wacc', updatedWACC);\n  };\n\n  const applyWACCToDCF = (waccValue) => {\n    onModelInputChange('dcf', 'discountRate', waccValue);\n  };\n\n  const tabs = [\n    { id: 'inputs', label: 'Inputs', icon: Settings },\n    { id: 'calculation', label: 'Calculation', icon: Calculator },\n    { id: 'benchmarks', label: 'Benchmarks', icon: TrendingUp }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h3 className=\"text-xl font-semibold mb-2 flex items-center gap-2\">\n            <Calculator size={20} />\n            WACC Calculator\n          </h3>\n          <p className=\"text-gray-600\">\n            Professional weighted average cost of capital calculation using CAPM and build-up methods.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => applyWACCToDCF(waccCalculation.finalWACC)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n          >\n            Apply to DCF\n          </button>\n          <button\n            onClick={() => setShowDetails(!showDetails)}\n            className={`px-3 py-2 rounded-lg text-sm transition-colors ${\n              showDetails ? 'bg-gray-200 text-gray-700' : 'bg-gray-100 text-gray-600'\n            }`}\n          >\n            {showDetails ? 'Hide Details' : 'Show Details'}\n          </button>\n        </div>\n      </div>\n\n      {/* Key Results */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <motion.div \n          className=\"bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <Percent size={20} className=\"text-blue-600\" />\n            <span className=\"text-xs text-blue-600 font-medium\">FINAL WACC</span>\n          </div>\n          <div className=\"text-2xl font-bold text-blue-800\">\n            {formatPercent(waccCalculation.finalWACC)}\n          </div>\n          <div className=\"text-sm text-blue-600 mt-1\">\n            Risk-adjusted average\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4 border border-green-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <TrendingUp size={20} className=\"text-green-600\" />\n            <span className=\"text-xs text-green-600 font-medium\">COST OF EQUITY</span>\n          </div>\n          <div className=\"text-2xl font-bold text-green-800\">\n            {formatPercent(waccCalculation.costOfEquityCAPM)}\n          </div>\n          <div className=\"text-sm text-green-600 mt-1\">\n            CAPM method\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <DollarSign size={20} className=\"text-purple-600\" />\n            <span className=\"text-xs text-purple-600 font-medium\">COST OF DEBT</span>\n          </div>\n          <div className=\"text-2xl font-bold text-purple-800\">\n            {formatPercent(waccCalculation.costOfDebtAfterTax)}\n          </div>\n          <div className=\"text-sm text-purple-600 mt-1\">\n            After-tax\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <Info size={20} className=\"text-orange-600\" />\n            <span className=\"text-xs text-orange-600 font-medium\">DEBT/EQUITY</span>\n          </div>\n          <div className=\"text-2xl font-bold text-orange-800\">\n            {waccCalculation.debtToEquityRatio.toFixed(2)}x\n          </div>\n          <div className=\"text-sm text-orange-600 mt-1\">\n            Capital structure\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex-1 flex items-center justify-center gap-2 py-2 px-4 rounded-md transition-all ${\n                activeTab === tab.id\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-800'\n              }`}\n            >\n              <Icon size={16} />\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        {activeTab === 'inputs' && (\n          <div className=\"space-y-6\">\n            <h4 className=\"font-semibold text-lg\">WACC Input Parameters</h4>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Cost of Equity - CAPM */}\n              <div>\n                <h5 className=\"font-medium mb-4 text-blue-800\">Cost of Equity (CAPM Method)</h5>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Risk-Free Rate (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.riskFreeRate || waccInputs.riskFreeRate}\n                      onChange={(e) => updateWACCInput('riskFreeRate', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">10-year Treasury rate</span>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Market Risk Premium (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.marketRiskPremium || waccInputs.marketRiskPremium}\n                      onChange={(e) => updateWACCInput('marketRiskPremium', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">Expected market return - risk-free rate</span>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Beta (β)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.beta || waccInputs.beta}\n                      onChange={(e) => updateWACCInput('beta', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">Systematic risk relative to market</span>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Small Company Premium (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.smallCompanyPremium || waccInputs.smallCompanyPremium}\n                      onChange={(e) => updateWACCInput('smallCompanyPremium', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">Size-related risk premium</span>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Company-Specific Risk (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.companySpecificRisk || waccInputs.companySpecificRisk}\n                      onChange={(e) => updateWACCInput('companySpecificRisk', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">Unsystematic risk premium</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Capital Structure & Debt */}\n              <div>\n                <h5 className=\"font-medium mb-4 text-purple-800\">Capital Structure & Cost of Debt</h5>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Market Value of Equity ($000s)\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={modelInputs.dcf.wacc?.marketValueEquity || waccInputs.marketValueEquity}\n                      onChange={(e) => updateWACCInput('marketValueEquity', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Market Value of Debt ($000s)\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={modelInputs.dcf.wacc?.marketValueDebt || waccInputs.marketValueDebt}\n                      onChange={(e) => updateWACCInput('marketValueDebt', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Pre-Tax Cost of Debt (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.debtInterestRate || waccInputs.debtInterestRate}\n                      onChange={(e) => updateWACCInput('debtInterestRate', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">Interest rate on debt</span>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Tax Rate (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={modelInputs.dcf.wacc?.taxRate || modelInputs.dcf.taxRate}\n                      onChange={(e) => updateWACCInput('taxRate', e.target.value)}\n                      className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-xs text-gray-500\">Corporate tax rate</span>\n                  </div>\n\n                  {/* Capital Structure Summary */}\n                  <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                    <h6 className=\"font-medium mb-2\">Capital Structure</h6>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Equity Weight:</span>\n                        <span className=\"font-medium\">{formatPercent(waccCalculation.equityWeight)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Debt Weight:</span>\n                        <span className=\"font-medium\">{formatPercent(waccCalculation.debtWeight)}</span>\n                      </div>\n                      <div className=\"flex justify-between border-t pt-2\">\n                        <span>Total Capital:</span>\n                        <span className=\"font-medium\">${(waccCalculation.totalCapital / 1000).toFixed(0)}M</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'calculation' && (\n          <div className=\"space-y-6\">\n            <h4 className=\"font-semibold text-lg\">WACC Calculation Breakdown</h4>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* CAPM Method */}\n              <div className=\"p-6 bg-blue-50 rounded-lg border border-blue-200\">\n                <h5 className=\"font-medium mb-4 text-blue-800\">CAPM Method</h5>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Risk-Free Rate:</span>\n                    <span className=\"font-medium\">{formatPercent(modelInputs.dcf.wacc?.riskFreeRate || waccInputs.riskFreeRate)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Beta × Market Risk Premium:</span>\n                    <span className=\"font-medium\">\n                      {formatPercent((modelInputs.dcf.wacc?.beta || waccInputs.beta) * (modelInputs.dcf.wacc?.marketRiskPremium || waccInputs.marketRiskPremium))}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Small Company Premium:</span>\n                    <span className=\"font-medium\">{formatPercent(modelInputs.dcf.wacc?.smallCompanyPremium || waccInputs.smallCompanyPremium)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Company-Specific Risk:</span>\n                    <span className=\"font-medium\">{formatPercent(modelInputs.dcf.wacc?.companySpecificRisk || waccInputs.companySpecificRisk)}</span>\n                  </div>\n                  <div className=\"flex justify-between border-t pt-2 font-semibold\">\n                    <span>Cost of Equity (CAPM):</span>\n                    <span>{formatPercent(waccCalculation.costOfEquityCAPM)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Build-up Method */}\n              <div className=\"p-6 bg-green-50 rounded-lg border border-green-200\">\n                <h5 className=\"font-medium mb-4 text-green-800\">Build-up Method</h5>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Risk-Free Rate:</span>\n                    <span className=\"font-medium\">{formatPercent(waccInputs.buildUpMethod.riskFreeRate)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Equity Risk Premium:</span>\n                    <span className=\"font-medium\">{formatPercent(waccInputs.buildUpMethod.equityRiskPremium)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Size Risk Premium:</span>\n                    <span className=\"font-medium\">{formatPercent(waccInputs.buildUpMethod.sizeRiskPremium)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Industry Risk Premium:</span>\n                    <span className=\"font-medium\">{formatPercent(waccInputs.buildUpMethod.industryRiskPremium)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Company-Specific Risk:</span>\n                    <span className=\"font-medium\">{formatPercent(waccInputs.buildUpMethod.companySpecificRisk)}</span>\n                  </div>\n                  <div className=\"flex justify-between border-t pt-2 font-semibold\">\n                    <span>Cost of Equity (Build-up):</span>\n                    <span>{formatPercent(waccCalculation.costOfEquityBuildUp)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Final WACC Calculation */}\n            <div className=\"p-6 bg-gray-50 rounded-lg border\">\n              <h5 className=\"font-medium mb-4\">Final WACC Calculation</h5>\n              <div className=\"space-y-4 text-sm\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <span>WACC (CAPM Method):</span>\n                      <span className=\"font-medium\">{formatPercent(waccCalculation.waccCAPM)}</span>\n                    </div>\n                    <div className=\"text-xs text-gray-600\">\n                      [{formatPercent(waccCalculation.costOfEquityCAPM)} × {formatPercent(waccCalculation.equityWeight)}] + \n                      [{formatPercent(waccCalculation.costOfDebtAfterTax)} × {formatPercent(waccCalculation.debtWeight)}]\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <span>WACC (Build-up Method):</span>\n                      <span className=\"font-medium\">{formatPercent(waccCalculation.waccBuildUp)}</span>\n                    </div>\n                    <div className=\"text-xs text-gray-600\">\n                      [{formatPercent(waccCalculation.costOfEquityBuildUp)} × {formatPercent(waccCalculation.equityWeight)}] + \n                      [{formatPercent(waccCalculation.costOfDebtAfterTax)} × {formatPercent(waccCalculation.debtWeight)}]\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"border-t pt-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-semibold\">Risk-Adjusted WACC:</span>\n                    <span className=\"text-2xl font-bold text-blue-600\">{formatPercent(waccCalculation.finalWACC)}</span>\n                  </div>\n                  <div className=\"text-xs text-gray-600 mt-1\">\n                    Average of CAPM and Build-up methods\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'benchmarks' && (\n          <div className=\"space-y-6\">\n            <h4 className=\"font-semibold text-lg\">Industry Benchmarks & Validation</h4>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"p-4 bg-blue-50 rounded-lg\">\n                <h6 className=\"font-medium text-blue-800 mb-2\">Your Company</h6>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>WACC:</span>\n                    <span className=\"font-semibold\">{formatPercent(waccCalculation.finalWACC)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Beta:</span>\n                    <span className=\"font-semibold\">{(modelInputs.dcf.wacc?.beta || waccInputs.beta).toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>D/E Ratio:</span>\n                    <span className=\"font-semibold\">{waccCalculation.debtToEquityRatio.toFixed(2)}x</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-4 bg-green-50 rounded-lg\">\n                <h6 className=\"font-medium text-green-800 mb-2\">Industry Average</h6>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>WACC:</span>\n                    <span className=\"font-semibold\">{formatPercent(waccInputs.industryWACC)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Beta:</span>\n                    <span className=\"font-semibold\">{waccInputs.industryBeta.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>D/E Ratio:</span>\n                    <span className=\"font-semibold\">{waccInputs.industryDebtEquityRatio.toFixed(2)}x</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-4 bg-yellow-50 rounded-lg\">\n                <h6 className=\"font-medium text-yellow-800 mb-2\">Variance</h6>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>WACC Diff:</span>\n                    <span className={`font-semibold ${\n                      waccCalculation.finalWACC > waccInputs.industryWACC ? 'text-red-600' : 'text-green-600'\n                    }`}>\n                      {waccCalculation.finalWACC > waccInputs.industryWACC ? '+' : ''}\n                      {formatPercent(waccCalculation.finalWACC - waccInputs.industryWACC)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Beta Diff:</span>\n                    <span className={`font-semibold ${\n                      (modelInputs.dcf.wacc?.beta || waccInputs.beta) > waccInputs.industryBeta ? 'text-red-600' : 'text-green-600'\n                    }`}>\n                      {(modelInputs.dcf.wacc?.beta || waccInputs.beta) > waccInputs.industryBeta ? '+' : ''}\n                      {((modelInputs.dcf.wacc?.beta || waccInputs.beta) - waccInputs.industryBeta).toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Validation Notes */}\n            <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n              <div className=\"flex items-start gap-2\">\n                <BookOpen size={16} className=\"text-blue-600 mt-0.5\" />\n                <div>\n                  <h6 className=\"font-medium text-blue-800 mb-2\">Validation Guidelines</h6>\n                  <ul className=\"text-sm text-blue-700 space-y-1\">\n                    <li>• WACC should be within ±2% of industry average for similar companies</li>\n                    <li>• Beta should reflect business risk relative to market (typically 0.8-1.5 for most companies)</li>\n                    <li>• Cost of equity should exceed risk-free rate by at least 4-6% for private companies</li>\n                    <li>• Debt/equity ratio should align with industry norms and company strategy</li>\n                    <li>• Consider economic conditions and company-specific factors</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WACCCalculator;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Calculator, TrendingUp, DollarSign, BarChart3, Info, Settings, PieChart } from 'lucide-react';\nimport DataVisualization from './DataVisualization';\nimport WACCCalculator from './WACCCalculator';\n\nconst AdvancedDCF = ({ data, modelInputs, onModelInputChange, formatCurrency, formatPercent }) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const [showAssumptions, setShowAssumptions] = useState(true);\n  const [activeTab, setActiveTab] = useState('results');\n\n  // Enhanced DCF calculation with working capital\n  const advancedDCFResults = useMemo(() => {\n    const { discountRate, terminalGrowthRate, projectionYears, taxRate } = modelInputs.dcf;\n    const statements = data.statements;\n    \n    // Working capital assumptions (if not provided, use defaults)\n    const workingCapitalAssumptions = modelInputs.dcf.workingCapital || {\n      receivablesDays: 45,\n      inventoryDays: 60,\n      payablesDays: 30,\n      receivablesGrowth: 2, // % of revenue\n      inventoryGrowth: 1.5, // % of revenue\n      payablesGrowth: 1.8 // % of revenue\n    };\n\n    // Capex assumptions\n    const capexAssumptions = modelInputs.dcf.capex || {\n      capexAsPercentOfRevenue: 3.5,\n      depreciationRate: 7, // years\n      maintenanceCapex: 2.0 // % of revenue\n    };\n\n    const results = {\n      years: [],\n      freeCashFlows: [],\n      presentValues: [],\n      workingCapitalChanges: [],\n      capexAmounts: [],\n      unleveredFreeCashFlow: [],\n      cumulativePV: 0,\n      terminalValue: 0,\n      presentValueTerminal: 0,\n      enterpriseValue: 0,\n      equityValue: 0,\n      impliedShare: 0\n    };\n\n    // Base year revenue for calculations\n    const baseRevenue = statements.incomeStatement.totalRevenue?.[0] || 100000;\n\n    for (let year = 1; year <= projectionYears; year++) {\n      const yearData = {\n        year,\n        revenue: statements.incomeStatement.totalRevenue?.[year] || 0,\n        operatingIncome: statements.incomeStatement.operatingIncome?.[year] || 0,\n        nopat: 0, // Net Operating Profit After Tax\n        workingCapitalChange: 0,\n        capex: 0,\n        depreciation: 0,\n        freeCashFlow: 0,\n        presentValue: 0\n      };\n\n      // NOPAT calculation\n      yearData.nopat = yearData.operatingIncome * (1 - taxRate / 100);\n\n      // Working capital calculation\n      const currentRevenue = yearData.revenue;\n      const previousRevenue = year > 1 ? (statements.incomeStatement.totalRevenue?.[year - 1] || 0) : baseRevenue;\n      \n      // Calculate working capital components\n      const currentReceivables = (currentRevenue * workingCapitalAssumptions.receivablesDays) / 365;\n      const currentInventory = (currentRevenue * workingCapitalAssumptions.inventoryDays) / 365;\n      const currentPayables = (currentRevenue * workingCapitalAssumptions.payablesDays) / 365;\n      \n      const previousReceivables = (previousRevenue * workingCapitalAssumptions.receivablesDays) / 365;\n      const previousInventory = (previousRevenue * workingCapitalAssumptions.inventoryDays) / 365;\n      const previousPayables = (previousRevenue * workingCapitalAssumptions.payablesDays) / 365;\n\n      const receivablesChange = currentReceivables - previousReceivables;\n      const inventoryChange = currentInventory - previousInventory;\n      const payablesChange = currentPayables - previousPayables;\n\n      // Working capital change (increase is negative for cash flow)\n      yearData.workingCapitalChange = -(receivablesChange + inventoryChange - payablesChange);\n\n      // Capex calculation\n      yearData.capex = -(currentRevenue * capexAssumptions.capexAsPercentOfRevenue / 100);\n      \n      // Depreciation (simplified - based on capex and depreciation rate)\n      yearData.depreciation = Math.abs(yearData.capex) / capexAssumptions.depreciationRate;\n\n      // Free Cash Flow = NOPAT + Depreciation - Capex - Change in Working Capital\n      yearData.freeCashFlow = yearData.nopat + yearData.depreciation + yearData.capex + yearData.workingCapitalChange;\n\n      // Present Value\n      const discountFactor = Math.pow(1 + discountRate / 100, year);\n      yearData.presentValue = yearData.freeCashFlow / discountFactor;\n\n      results.years.push(yearData);\n      results.freeCashFlows.push(yearData.freeCashFlow);\n      results.presentValues.push(yearData.presentValue);\n      results.workingCapitalChanges.push(yearData.workingCapitalChange);\n      results.capexAmounts.push(yearData.capex);\n      results.unleveredFreeCashFlow.push(yearData.freeCashFlow);\n      results.cumulativePV += yearData.presentValue;\n    }\n\n    // Terminal Value calculation\n    const finalYearFCF = results.years[results.years.length - 1]?.freeCashFlow || 0;\n    const terminalFCF = finalYearFCF * (1 + terminalGrowthRate / 100);\n    results.terminalValue = terminalFCF / ((discountRate - terminalGrowthRate) / 100);\n    \n    const terminalDiscountFactor = Math.pow(1 + discountRate / 100, projectionYears);\n    results.presentValueTerminal = results.terminalValue / terminalDiscountFactor;\n\n    // Enterprise Value\n    results.enterpriseValue = results.cumulativePV + results.presentValueTerminal;\n\n    // Simplified equity value (would subtract net debt in reality)\n    const netDebt = 0; // Could be calculated from balance sheet\n    results.equityValue = results.enterpriseValue - netDebt;\n\n    // Implied share price (assuming shares outstanding)\n    const sharesOutstanding = modelInputs.dcf.sharesOutstanding || 1000; // thousands\n    results.impliedShare = results.equityValue / sharesOutstanding;\n\n    return results;\n  }, [data, modelInputs]);\n\n  const updateDCFAssumption = (category, field, value) => {\n    const updatedDCF = {\n      ...modelInputs.dcf,\n      [category]: {\n        ...modelInputs.dcf[category],\n        [field]: parseFloat(value) || 0\n      }\n    };\n    onModelInputChange('dcf', category, updatedDCF[category]);\n  };\n\n  const updateBasicAssumption = (field, value) => {\n    onModelInputChange('dcf', field, parseFloat(value) || 0);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h3 className=\"text-xl font-semibold mb-2 flex items-center gap-2\">\n            <Calculator size={20} />\n            Advanced DCF Valuation\n          </h3>\n          <p className=\"text-gray-600\">\n            Professional-grade DCF with working capital analysis, capex modeling, and detailed cash flow projections.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {['results', 'charts', 'wacc', 'assumptions'].map((tab) => (\n            <button\n              key={tab}\n              onClick={() => setActiveTab(tab)}\n              className={`px-3 py-2 rounded-lg text-sm transition-colors flex items-center gap-1 ${\n                activeTab === tab ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'\n              }`}\n            >\n              {tab === 'results' && <DollarSign size={14} />}\n              {tab === 'charts' && <BarChart3 size={14} />}\n              {tab === 'wacc' && <Calculator size={14} />}\n              {tab === 'assumptions' && <Settings size={14} />}\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'results' && (\n        <>\n          {/* Key Results */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <motion.div \n          className=\"bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4 border border-green-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <DollarSign size={20} className=\"text-green-600\" />\n            <span className=\"text-xs text-green-600 font-medium\">ENTERPRISE VALUE</span>\n          </div>\n          <div className=\"text-2xl font-bold text-green-800\">\n            {formatCurrency(advancedDCFResults.enterpriseValue)}\n          </div>\n          <div className=\"text-sm text-green-600 mt-1\">\n            PV Operations: {formatCurrency(advancedDCFResults.cumulativePV)}\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <TrendingUp size={20} className=\"text-blue-600\" />\n            <span className=\"text-xs text-blue-600 font-medium\">EQUITY VALUE</span>\n          </div>\n          <div className=\"text-2xl font-bold text-blue-800\">\n            {formatCurrency(advancedDCFResults.equityValue)}\n          </div>\n          <div className=\"text-sm text-blue-600 mt-1\">\n            Per Share: {formatCurrency(advancedDCFResults.impliedShare)}\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <BarChart3 size={20} className=\"text-purple-600\" />\n            <span className=\"text-xs text-purple-600 font-medium\">TERMINAL VALUE</span>\n          </div>\n          <div className=\"text-2xl font-bold text-purple-800\">\n            {formatCurrency(advancedDCFResults.terminalValue)}\n          </div>\n          <div className=\"text-sm text-purple-600 mt-1\">\n            PV: {formatCurrency(advancedDCFResults.presentValueTerminal)}\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <Info size={20} className=\"text-orange-600\" />\n            <span className=\"text-xs text-orange-600 font-medium\">IMPLIED MULTIPLE</span>\n          </div>\n          <div className=\"text-2xl font-bold text-orange-800\">\n            {(advancedDCFResults.enterpriseValue / (data.statements.incomeStatement.totalRevenue?.[1] || 1)).toFixed(1)}x\n          </div>\n          <div className=\"text-sm text-orange-600 mt-1\">\n            EV/Revenue (Year 1)\n          </div>\n        </motion.div>\n      </div>\n\n          {/* Detailed Cash Flow Analysis */}\n        <div className=\"bg-white rounded-lg border p-6\">\n          <h4 className=\"font-semibold text-lg mb-4\">Detailed Cash Flow Analysis</h4>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"border-b bg-gray-50\">\n                  <th className=\"text-left p-3 font-medium\">Year</th>\n                  <th className=\"text-right p-3 font-medium\">Revenue</th>\n                  <th className=\"text-right p-3 font-medium\">Operating Income</th>\n                  <th className=\"text-right p-3 font-medium\">NOPAT</th>\n                  <th className=\"text-right p-3 font-medium\">Depreciation</th>\n                  <th className=\"text-right p-3 font-medium\">Capex</th>\n                  <th className=\"text-right p-3 font-medium\">ΔWorking Capital</th>\n                  <th className=\"text-right p-3 font-medium\">Free Cash Flow</th>\n                  <th className=\"text-right p-3 font-medium\">Present Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {advancedDCFResults.years.map((yearData, index) => (\n                  <tr key={index} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"p-3 font-medium\">{yearData.year}</td>\n                    <td className=\"p-3 text-right\">{formatCurrency(yearData.revenue)}</td>\n                    <td className=\"p-3 text-right\">{formatCurrency(yearData.operatingIncome)}</td>\n                    <td className=\"p-3 text-right\">{formatCurrency(yearData.nopat)}</td>\n                    <td className=\"p-3 text-right text-green-600\">+{formatCurrency(yearData.depreciation)}</td>\n                    <td className=\"p-3 text-right text-red-600\">{formatCurrency(yearData.capex)}</td>\n                    <td className={`p-3 text-right ${yearData.workingCapitalChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {yearData.workingCapitalChange >= 0 ? '+' : ''}{formatCurrency(yearData.workingCapitalChange)}\n                    </td>\n                    <td className=\"p-3 text-right font-medium\">{formatCurrency(yearData.freeCashFlow)}</td>\n                    <td className=\"p-3 text-right font-medium\">{formatCurrency(yearData.presentValue)}</td>\n                  </tr>\n                ))}\n                \n                {/* Terminal Value Row */}\n                <tr className=\"border-b-2 border-gray-300 bg-blue-50\">\n                  <td className=\"p-3 font-bold\">Terminal</td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3 text-right font-bold\">{formatCurrency(advancedDCFResults.terminalValue)}</td>\n                  <td className=\"p-3 text-right font-bold\">{formatCurrency(advancedDCFResults.presentValueTerminal)}</td>\n                </tr>\n                \n                {/* Total Row */}\n                <tr className=\"bg-gray-100 font-bold\">\n                  <td className=\"p-3\">TOTAL</td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3\"></td>\n                  <td className=\"p-3 text-right text-lg\">{formatCurrency(advancedDCFResults.enterpriseValue)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n        </>\n      )}\n      \n      {/* Charts Tab */}\n      {activeTab === 'charts' && (\n        <DataVisualization\n          dcfData={advancedDCFResults}\n          sensitivityData={null}\n          scenarioData={null}\n          formatCurrency={formatCurrency}\n          formatPercent={formatPercent}\n        />\n      )}\n      \n      {/* WACC Calculator Tab */}\n      {activeTab === 'wacc' && (\n        <WACCCalculator\n          modelInputs={modelInputs}\n          onModelInputChange={onModelInputChange}\n          formatPercent={formatPercent}\n        />\n      )}\n      \n      {/* Assumptions Tab */}\n      {activeTab === 'assumptions' && (\n        <div className=\"bg-white rounded-lg border p-6\">\n          <h4 className=\"font-semibold text-lg mb-4\">Model Assumptions</h4>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Basic DCF Assumptions */}\n            <div>\n              <h5 className=\"font-medium mb-3 text-gray-800\">Core Assumptions</h5>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Discount Rate (WACC) %\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={modelInputs.dcf.discountRate}\n                    onChange={(e) => updateBasicAssumption('discountRate', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Terminal Growth Rate %\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={modelInputs.dcf.terminalGrowthRate}\n                    onChange={(e) => updateBasicAssumption('terminalGrowthRate', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Tax Rate %\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={modelInputs.dcf.taxRate}\n                    onChange={(e) => updateBasicAssumption('taxRate', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Working Capital Assumptions */}\n            <div>\n              <h5 className=\"font-medium mb-3 text-gray-800\">Working Capital</h5>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Receivables (Days)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={modelInputs.dcf.workingCapital?.receivablesDays || 45}\n                    onChange={(e) => updateDCFAssumption('workingCapital', 'receivablesDays', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Inventory (Days)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={modelInputs.dcf.workingCapital?.inventoryDays || 60}\n                    onChange={(e) => updateDCFAssumption('workingCapital', 'inventoryDays', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Payables (Days)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={modelInputs.dcf.workingCapital?.payablesDays || 30}\n                    onChange={(e) => updateDCFAssumption('workingCapital', 'payablesDays', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Capex Assumptions */}\n            <div>\n              <h5 className=\"font-medium mb-3 text-gray-800\">Capital Expenditure</h5>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Capex (% of Revenue)\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={modelInputs.dcf.capex?.capexAsPercentOfRevenue || 3.5}\n                    onChange={(e) => updateDCFAssumption('capex', 'capexAsPercentOfRevenue', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Depreciation Period (Years)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={modelInputs.dcf.capex?.depreciationRate || 7}\n                    onChange={(e) => updateDCFAssumption('capex', 'depreciationRate', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Shares Outstanding (000s)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={modelInputs.dcf.sharesOutstanding || 1000}\n                    onChange={(e) => updateBasicAssumption('sharesOutstanding', e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedDCF;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Users, TrendingUp, BarChart3, Plus, Search, DollarSign, Percent, Target, Filter } from 'lucide-react';\n\nconst ComparableAnalysis = ({ data, formatCurrency, formatPercent }) => {\n  const [activeTab, setActiveTab] = useState('multiples');\n  const [selectedMultiple, setSelectedMultiple] = useState('ev_revenue');\n  const [showAddComp, setShowAddComp] = useState(false);\n  \n  // Sample comparable companies data (in practice, this would come from external API)\n  const [comparableCompanies, setComparableCompanies] = useState([\n    {\n      id: 1,\n      name: 'MedSpa Corp',\n      ticker: 'MSPA',\n      marketCap: 450000, // $450M\n      enterpriseValue: 520000, // $520M\n      revenue: 180000, // $180M\n      ebitda: 45000, // $45M\n      netIncome: 28000, // $28M\n      employees: 1200,\n      founded: 2015,\n      geography: 'US',\n      businessModel: 'B2C Medical Spa Chain'\n    },\n    {\n      id: 2,\n      name: 'Wellness Holdings',\n      ticker: 'WELL',\n      marketCap: 680000,\n      enterpriseValue: 750000,\n      revenue: 220000,\n      ebitda: 55000,\n      netIncome: 35000,\n      employees: 1800,\n      founded: 2012,\n      geography: 'US',\n      businessModel: 'Integrated Wellness Platform'\n    },\n    {\n      id: 3,\n      name: 'Aesthetic Solutions Inc',\n      ticker: 'AEST',\n      marketCap: 320000,\n      enterpriseValue: 380000,\n      revenue: 125000,\n      ebitda: 32000,\n      netIncome: 18000,\n      employees: 850,\n      founded: 2018,\n      geography: 'US',\n      businessModel: 'Medical Device & Services'\n    },\n    {\n      id: 4,\n      name: 'Premium Health Group',\n      ticker: 'PHG',\n      marketCap: 920000,\n      enterpriseValue: 1050000,\n      revenue: 310000,\n      ebitda: 78000,\n      netIncome: 48000,\n      employees: 2500,\n      founded: 2010,\n      geography: 'US',\n      businessModel: 'Premium Healthcare Services'\n    }\n  ]);\n\n  // Calculate multiples for comparable companies\n  const comparableMultiples = useMemo(() => {\n    return comparableCompanies.map(comp => ({\n      ...comp,\n      multiples: {\n        ev_revenue: comp.enterpriseValue / comp.revenue,\n        ev_ebitda: comp.enterpriseValue / comp.ebitda,\n        pe_ratio: comp.marketCap / comp.netIncome,\n        revenue_per_employee: comp.revenue / comp.employees,\n        market_cap_revenue: comp.marketCap / comp.revenue\n      }\n    }));\n  }, [comparableCompanies]);\n\n  // Calculate market statistics\n  const marketStats = useMemo(() => {\n    const multiples = comparableMultiples.map(c => c.multiples);\n    \n    const calculateStats = (values) => ({\n      mean: values.reduce((a, b) => a + b, 0) / values.length,\n      median: values.sort((a, b) => a - b)[Math.floor(values.length / 2)],\n      min: Math.min(...values),\n      max: Math.max(...values),\n      p25: values.sort((a, b) => a - b)[Math.floor(values.length * 0.25)],\n      p75: values.sort((a, b) => a - b)[Math.floor(values.length * 0.75)]\n    });\n\n    return {\n      ev_revenue: calculateStats(multiples.map(m => m.ev_revenue)),\n      ev_ebitda: calculateStats(multiples.map(m => m.ev_ebitda)),\n      pe_ratio: calculateStats(multiples.map(m => m.pe_ratio)),\n      revenue_per_employee: calculateStats(multiples.map(m => m.revenue_per_employee)),\n      market_cap_revenue: calculateStats(multiples.map(m => m.market_cap_revenue))\n    };\n  }, [comparableMultiples]);\n\n  // Calculate implied valuation for target company\n  const impliedValuation = useMemo(() => {\n    const targetRevenue = data.statements.incomeStatement.totalRevenue?.[1] || 100000; // Year 1 revenue\n    const targetEBITDA = (data.statements.incomeStatement.operatingIncome?.[1] || 50000) * 1.15; // Approx EBITDA\n    const targetNetIncome = (data.statements.incomeStatement.operatingIncome?.[1] || 50000) * 0.7; // Approx net income\n\n    return {\n      ev_revenue: {\n        mean: targetRevenue * marketStats.ev_revenue.mean,\n        median: targetRevenue * marketStats.ev_revenue.median,\n        p25: targetRevenue * marketStats.ev_revenue.p25,\n        p75: targetRevenue * marketStats.ev_revenue.p75\n      },\n      ev_ebitda: {\n        mean: targetEBITDA * marketStats.ev_ebitda.mean,\n        median: targetEBITDA * marketStats.ev_ebitda.median,\n        p25: targetEBITDA * marketStats.ev_ebitda.p25,\n        p75: targetEBITDA * marketStats.ev_ebitda.p75\n      },\n      pe_ratio: {\n        mean: targetNetIncome * marketStats.pe_ratio.mean,\n        median: targetNetIncome * marketStats.pe_ratio.median,\n        p25: targetNetIncome * marketStats.pe_ratio.p25,\n        p75: targetNetIncome * marketStats.pe_ratio.p75\n      }\n    };\n  }, [data, marketStats]);\n\n  const multipleDefinitions = {\n    ev_revenue: { name: 'EV/Revenue', description: 'Enterprise Value / Annual Revenue' },\n    ev_ebitda: { name: 'EV/EBITDA', description: 'Enterprise Value / EBITDA' },\n    pe_ratio: { name: 'P/E Ratio', description: 'Market Cap / Net Income' },\n    revenue_per_employee: { name: 'Revenue/Employee', description: 'Revenue per Employee' },\n    market_cap_revenue: { name: 'Market Cap/Revenue', description: 'Market Cap / Revenue' }\n  };\n\n  const addComparableCompany = (companyData) => {\n    const newCompany = {\n      id: Date.now(),\n      ...companyData,\n      marketCap: parseFloat(companyData.marketCap) || 0,\n      enterpriseValue: parseFloat(companyData.enterpriseValue) || 0,\n      revenue: parseFloat(companyData.revenue) || 0,\n      ebitda: parseFloat(companyData.ebitda) || 0,\n      netIncome: parseFloat(companyData.netIncome) || 0,\n      employees: parseInt(companyData.employees) || 0,\n      founded: parseInt(companyData.founded) || new Date().getFullYear()\n    };\n    setComparableCompanies([...comparableCompanies, newCompany]);\n    setShowAddComp(false);\n  };\n\n  const removeComparable = (id) => {\n    setComparableCompanies(comparableCompanies.filter(comp => comp.id !== id));\n  };\n\n  const tabs = [\n    { id: 'multiples', label: 'Trading Multiples', icon: BarChart3 },\n    { id: 'analysis', label: 'Valuation Analysis', icon: Target },\n    { id: 'companies', label: 'Comparable Set', icon: Users }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h3 className=\"text-xl font-semibold mb-2 flex items-center gap-2\">\n            <Users size={20} />\n            Comparable Company Analysis\n          </h3>\n          <p className=\"text-gray-600\">\n            Market-based valuation using trading multiples from similar public companies.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowAddComp(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 text-sm\"\n          >\n            <Plus size={16} />\n            Add Comparable\n          </button>\n        </div>\n      </div>\n\n      {/* Key Results Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <motion.div \n          className=\"bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <BarChart3 size={20} className=\"text-blue-600\" />\n            <span className=\"text-xs text-blue-600 font-medium\">EV/REVENUE</span>\n          </div>\n          <div className=\"text-2xl font-bold text-blue-800\">\n            {marketStats.ev_revenue.median.toFixed(1)}x\n          </div>\n          <div className=\"text-sm text-blue-600 mt-1\">\n            Median multiple\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4 border border-green-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <TrendingUp size={20} className=\"text-green-600\" />\n            <span className=\"text-xs text-green-600 font-medium\">IMPLIED VALUE</span>\n          </div>\n          <div className=\"text-2xl font-bold text-green-800\">\n            {formatCurrency(impliedValuation.ev_revenue.median)}\n          </div>\n          <div className=\"text-sm text-green-600 mt-1\">\n            EV/Revenue basis\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <DollarSign size={20} className=\"text-purple-600\" />\n            <span className=\"text-xs text-purple-600 font-medium\">VALUATION RANGE</span>\n          </div>\n          <div className=\"text-lg font-bold text-purple-800\">\n            {formatCurrency(impliedValuation.ev_revenue.p25)} - {formatCurrency(impliedValuation.ev_revenue.p75)}\n          </div>\n          <div className=\"text-sm text-purple-600 mt-1\">\n            25th - 75th percentile\n          </div>\n        </motion.div>\n\n        <motion.div \n          className=\"bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200\"\n          whileHover={{ y: -2 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <Users size={20} className=\"text-orange-600\" />\n            <span className=\"text-xs text-orange-600 font-medium\">PEER COUNT</span>\n          </div>\n          <div className=\"text-2xl font-bold text-orange-800\">\n            {comparableCompanies.length}\n          </div>\n          <div className=\"text-sm text-orange-600 mt-1\">\n            Comparable companies\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex-1 flex items-center justify-center gap-2 py-2 px-4 rounded-md transition-all ${\n                activeTab === tab.id\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-800'\n              }`}\n            >\n              <Icon size={16} />\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        {activeTab === 'multiples' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h4 className=\"font-semibold text-lg\">Trading Multiples Analysis</h4>\n              <select\n                value={selectedMultiple}\n                onChange={(e) => setSelectedMultiple(e.target.value)}\n                className=\"px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                {Object.entries(multipleDefinitions).map(([key, def]) => (\n                  <option key={key} value={key}>{def.name}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b bg-gray-50\">\n                    <th className=\"text-left p-3 font-medium\">Company</th>\n                    <th className=\"text-right p-3 font-medium\">Market Cap</th>\n                    <th className=\"text-right p-3 font-medium\">Enterprise Value</th>\n                    <th className=\"text-right p-3 font-medium\">Revenue</th>\n                    <th className=\"text-right p-3 font-medium\">EV/Revenue</th>\n                    <th className=\"text-right p-3 font-medium\">EV/EBITDA</th>\n                    <th className=\"text-right p-3 font-medium\">P/E Ratio</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {comparableMultiples.map((comp, index) => (\n                    <tr key={comp.id} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"p-3\">\n                        <div>\n                          <div className=\"font-medium\">{comp.name}</div>\n                          <div className=\"text-xs text-gray-500\">{comp.ticker}</div>\n                        </div>\n                      </td>\n                      <td className=\"p-3 text-right\">{formatCurrency(comp.marketCap)}</td>\n                      <td className=\"p-3 text-right\">{formatCurrency(comp.enterpriseValue)}</td>\n                      <td className=\"p-3 text-right\">{formatCurrency(comp.revenue)}</td>\n                      <td className=\"p-3 text-right font-medium\">{comp.multiples.ev_revenue.toFixed(1)}x</td>\n                      <td className=\"p-3 text-right font-medium\">{comp.multiples.ev_ebitda.toFixed(1)}x</td>\n                      <td className=\"p-3 text-right font-medium\">{comp.multiples.pe_ratio.toFixed(1)}x</td>\n                    </tr>\n                  ))}\n                  \n                  {/* Summary Statistics */}\n                  <tr className=\"border-t-2 border-gray-300 bg-blue-50 font-semibold\">\n                    <td className=\"p-3\">Market Statistics</td>\n                    <td className=\"p-3\"></td>\n                    <td className=\"p-3\"></td>\n                    <td className=\"p-3\"></td>\n                    <td className=\"p-3 text-right\">{marketStats.ev_revenue.median.toFixed(1)}x</td>\n                    <td className=\"p-3 text-right\">{marketStats.ev_ebitda.median.toFixed(1)}x</td>\n                    <td className=\"p-3 text-right\">{marketStats.pe_ratio.median.toFixed(1)}x</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            {/* Multiple Distribution Chart */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <h6 className=\"font-medium mb-3\">Multiple Distribution</h6>\n                <div className=\"space-y-3\">\n                  {Object.entries(marketStats).slice(0, 3).map(([key, stats]) => (\n                    <div key={key}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>{multipleDefinitions[key].name}</span>\n                        <span className=\"font-medium\">{stats.median.toFixed(1)}x</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div\n                          className=\"bg-blue-500 h-2 rounded-full\"\n                          style={{\n                            width: `${((stats.median - stats.min) / (stats.max - stats.min)) * 100}%`\n                          }}\n                        />\n                      </div>\n                      <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                        <span>{stats.min.toFixed(1)}x</span>\n                        <span>{stats.max.toFixed(1)}x</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <h6 className=\"font-medium mb-3\">Key Statistics</h6>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Companies Analyzed:</span>\n                    <span className=\"font-medium\">{comparableCompanies.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Median Market Cap:</span>\n                    <span className=\"font-medium\">{formatCurrency(comparableCompanies.sort((a, b) => a.marketCap - b.marketCap)[Math.floor(comparableCompanies.length / 2)]?.marketCap || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Median Revenue:</span>\n                    <span className=\"font-medium\">{formatCurrency(comparableCompanies.sort((a, b) => a.revenue - b.revenue)[Math.floor(comparableCompanies.length / 2)]?.revenue || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Avg Founded Year:</span>\n                    <span className=\"font-medium\">{Math.round(comparableCompanies.reduce((sum, c) => sum + c.founded, 0) / comparableCompanies.length)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'analysis' && (\n          <div className=\"space-y-6\">\n            <h4 className=\"font-semibold text-lg\">Valuation Analysis</h4>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Implied Valuation */}\n              <div>\n                <h5 className=\"font-medium mb-4\">Implied Valuation by Multiple</h5>\n                <div className=\"space-y-4\">\n                  {Object.entries(impliedValuation).map(([multiple, values]) => (\n                    <div key={multiple} className=\"p-4 border rounded-lg\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"font-medium\">{multipleDefinitions[multiple].name}</span>\n                        <span className=\"text-sm text-gray-500\">\n                          {marketStats[multiple].median.toFixed(1)}x median\n                        </span>\n                      </div>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>25th Percentile:</span>\n                          <span className=\"font-medium\">{formatCurrency(values.p25)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Median:</span>\n                          <span className=\"font-bold text-blue-600\">{formatCurrency(values.median)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>75th Percentile:</span>\n                          <span className=\"font-medium\">{formatCurrency(values.p75)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Mean:</span>\n                          <span className=\"font-medium\">{formatCurrency(values.mean)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Valuation Summary */}\n              <div>\n                <h5 className=\"font-medium mb-4\">Valuation Summary</h5>\n                <div className=\"p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"text-sm text-blue-600 font-medium mb-1\">Recommended Range</div>\n                      <div className=\"text-2xl font-bold text-blue-800\">\n                        {formatCurrency((impliedValuation.ev_revenue.p25 + impliedValuation.ev_ebitda.p25) / 2)} - \n                        {formatCurrency((impliedValuation.ev_revenue.p75 + impliedValuation.ev_ebitda.p75) / 2)}\n                      </div>\n                      <div className=\"text-sm text-blue-600\">Blended 25th-75th percentile</div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"text-sm text-blue-600 font-medium mb-1\">Midpoint Valuation</div>\n                      <div className=\"text-xl font-bold text-blue-800\">\n                        {formatCurrency((impliedValuation.ev_revenue.median + impliedValuation.ev_ebitda.median) / 2)}\n                      </div>\n                      <div className=\"text-sm text-blue-600\">Average of median multiples</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-4 p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n                  <div className=\"flex items-start gap-2\">\n                    <Target size={16} className=\"text-yellow-600 mt-0.5\" />\n                    <div>\n                      <h6 className=\"font-medium text-yellow-800 mb-1\">Valuation Considerations</h6>\n                      <ul className=\"text-sm text-yellow-700 space-y-1\">\n                        <li>• Consider company-specific growth and margin profiles</li>\n                        <li>• Adjust for differences in business model and scale</li>\n                        <li>• Factor in market conditions and sector trends</li>\n                        <li>• Apply appropriate discount for private company liquidity</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'companies' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h4 className=\"font-semibold text-lg\">Comparable Company Set</h4>\n              <div className=\"flex gap-2\">\n                <div className=\"relative\">\n                  <Search size={16} className=\"absolute left-3 top-3 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search companies...\"\n                    className=\"pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <button className=\"px-3 py-2 border rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n                  <Filter size={16} />\n                  Filter\n                </button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              {comparableCompanies.map((comp) => (\n                <motion.div\n                  key={comp.id}\n                  className=\"border rounded-lg p-4 hover:shadow-lg transition-shadow\"\n                  whileHover={{ y: -2 }}\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h6 className=\"font-semibold text-gray-800\">{comp.name}</h6>\n                      <div className=\"text-sm text-gray-500\">{comp.ticker} • {comp.geography}</div>\n                    </div>\n                    <button\n                      onClick={() => removeComparable(comp.id)}\n                      className=\"text-red-500 hover:bg-red-50 p-1 rounded\"\n                    >\n                      ×\n                    </button>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Market Cap:</span>\n                      <span className=\"font-medium\">{formatCurrency(comp.marketCap)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Revenue:</span>\n                      <span className=\"font-medium\">{formatCurrency(comp.revenue)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>EV/Revenue:</span>\n                      <span className=\"font-medium\">{(comp.enterpriseValue / comp.revenue).toFixed(1)}x</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Founded:</span>\n                      <span className=\"font-medium\">{comp.founded}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-3 pt-3 border-t\">\n                    <div className=\"text-xs text-gray-600\">{comp.businessModel}</div>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Add Comparable Modal */}\n      {showAddComp && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n            <h4 className=\"font-semibold text-lg mb-4\">Add Comparable Company</h4>\n            <form onSubmit={(e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target);\n              addComparableCompany(Object.fromEntries(formData));\n            }}>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Company Name</label>\n                  <input name=\"name\" type=\"text\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Ticker</label>\n                  <input name=\"ticker\" type=\"text\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Market Cap ($000s)</label>\n                    <input name=\"marketCap\" type=\"number\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Enterprise Value ($000s)</label>\n                    <input name=\"enterpriseValue\" type=\"number\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Revenue ($000s)</label>\n                    <input name=\"revenue\" type=\"number\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">EBITDA ($000s)</label>\n                    <input name=\"ebitda\" type=\"number\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Business Model</label>\n                  <input name=\"businessModel\" type=\"text\" required className=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3 mt-6\">\n                <button type=\"submit\" className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                  Add Company\n                </button>\n                <button \n                  type=\"button\" \n                  onClick={() => setShowAddComp(false)}\n                  className=\"flex-1 px-4 py-2 border rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ComparableAnalysis;","import React, { useState, useMemo, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { BarChart3, TrendingUp, AlertTriangle, Play, Square, Settings, Download, FileText } from 'lucide-react';\nimport { ComposedChart, Bar, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ScatterChart, Scatter, Cell, AreaChart, Area } from 'recharts';\nimport { monteCarloEngine } from '../../services/monteCarloEngine';\n\nconst MonteCarloSimulation = ({ data, onDataChange }) => {\n  const [activeTab, setActiveTab] = useState('setup');\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [simulationSettings, setSimulationSettings] = useState({\n    iterations: 10000,\n    confidenceLevel: 0.95,\n    randomSeed: null,\n    enableCorrelation: false\n  });\n\n  const [distributions, setDistributions] = useState({\n    revenueGrowthRate: {\n      type: 'normal',\n      parameters: { mean: 0.1, stdDev: 0.03 },\n      name: 'Revenue Growth Rate',\n      enabled: true\n    },\n    fcfMargin: {\n      type: 'triangular',\n      parameters: { min: 0.12, mode: 0.15, max: 0.18 },\n      name: 'FCF Margin',\n      enabled: true\n    },\n    wacc: {\n      type: 'normal',\n      parameters: { mean: 0.1, stdDev: 0.015 },\n      name: 'WACC',\n      enabled: true\n    },\n    terminalGrowthRate: {\n      type: 'uniform',\n      parameters: { min: 0.02, max: 0.03 },\n      name: 'Terminal Growth Rate',\n      enabled: true\n    }\n  });\n\n  const [correlationMatrix, setCorrelationMatrix] = useState([\n    [1.0, 0.3, -0.2, 0.1],\n    [0.3, 1.0, -0.4, 0.2],\n    [-0.2, -0.4, 1.0, -0.3],\n    [0.1, 0.2, -0.3, 1.0]\n  ]);\n\n  const distributionTypes = [\n    { value: 'normal', label: 'Normal', parameters: ['mean', 'stdDev'] },\n    { value: 'triangular', label: 'Triangular', parameters: ['min', 'mode', 'max'] },\n    { value: 'uniform', label: 'Uniform', parameters: ['min', 'max'] },\n    { value: 'lognormal', label: 'Log-Normal', parameters: ['mu', 'sigma'] },\n    { value: 'beta', label: 'Beta', parameters: ['alpha', 'beta'] }\n  ];\n\n  const runSimulation = useCallback(async () => {\n    try {\n      setIsRunning(true);\n      setProgress(0);\n\n      const enabledDistributions = Object.fromEntries(\n        Object.entries(distributions).filter(([_, dist]) => dist.enabled)\n      );\n\n      const options = {\n        iterations: simulationSettings.iterations,\n        confidenceLevel: simulationSettings.confidenceLevel,\n        randomSeed: simulationSettings.randomSeed,\n        correlationMatrix: simulationSettings.enableCorrelation ? correlationMatrix : null,\n        onProgress: setProgress\n      };\n\n      const baseInputs = {\n        currentRevenue: data?.dcf?.currentRevenue || 1000000000,\n        currentPrice: data?.dcf?.currentPrice || 100,\n        sharesOutstanding: data?.dcf?.sharesOutstanding || 100000000,\n        ...Object.fromEntries(\n          Object.entries(enabledDistributions).map(([key, dist]) => [\n            key,\n            dist.parameters.mean || dist.parameters.mode || (dist.parameters.min + dist.parameters.max) / 2\n          ])\n        )\n      };\n\n      const results = await monteCarloEngine.runDCFSimulation(\n        baseInputs,\n        enabledDistributions,\n        options\n      );\n\n      setSimulationResults(results);\n    } catch (error) {\n      console.error('Monte Carlo simulation failed:', error);\n    } finally {\n      setIsRunning(false);\n      setProgress(0);\n    }\n  }, [distributions, simulationSettings, correlationMatrix, data]);\n\n  const stopSimulation = useCallback(() => {\n    monteCarloEngine.stopSimulation();\n    setIsRunning(false);\n  }, []);\n\n  const updateDistribution = useCallback((variable, updates) => {\n    setDistributions(prev => ({\n      ...prev,\n      [variable]: { ...prev[variable], ...updates }\n    }));\n  }, []);\n\n  const updateCorrelation = useCallback((i, j, value) => {\n    setCorrelationMatrix(prev => {\n      const newMatrix = prev.map(row => [...row]);\n      newMatrix[i][j] = value;\n      newMatrix[j][i] = value; // Keep matrix symmetric\n      return newMatrix;\n    });\n  }, []);\n\n  const generateHistogramData = useMemo(() => {\n    if (!simulationResults?.results) return [];\n\n    const values = simulationResults.results.map(r => r.pricePerShare);\n    const bins = 50;\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    const binWidth = (max - min) / bins;\n\n    const histogram = Array(bins).fill(0).map((_, i) => ({\n      bin: min + i * binWidth,\n      count: 0,\n      frequency: 0\n    }));\n\n    values.forEach(value => {\n      const binIndex = Math.min(Math.floor((value - min) / binWidth), bins - 1);\n      histogram[binIndex].count++;\n    });\n\n    histogram.forEach(bin => {\n      bin.frequency = bin.count / values.length;\n    });\n\n    return histogram;\n  }, [simulationResults]);\n\n  const generateScatterData = useMemo(() => {\n    if (!simulationResults?.results) return [];\n\n    return simulationResults.results.slice(0, 1000).map((result, i) => ({\n      x: result.inputs.revenueGrowthRate * 100,\n      y: result.pricePerShare,\n      upside: result.upside\n    }));\n  }, [simulationResults]);\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatPercent = (value) => {\n    return `${(value * 100).toFixed(2)}%`;\n  };\n\n  const tabs = [\n    { id: 'setup', label: 'Setup', icon: Settings },\n    { id: 'run', label: 'Run Simulation', icon: Play },\n    { id: 'results', label: 'Results', icon: BarChart3 },\n    { id: 'analysis', label: 'Analysis', icon: TrendingUp }\n  ];\n\n  return (\n    <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n      <div className=\"mb-6\">\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>\n          <h2 className=\"text-2xl font-bold text-white mb-2 flex items-center\">\n            <Zap className=\"inline-block mr-2\" />\n            Monte Carlo Simulation\n          </h2>\n          <p className=\"text-gray-400 text-sm\">\n            Advanced risk analysis using probabilistic modeling • Generate thousands of scenarios • Measure uncertainty\n          </p>\n        </motion.div>\n      </div>\n\n      <div className=\"mb-6\">\n        {['setup', 'run', 'results', 'analysis'].map((tab) => (\n          <button\n            key={tab}\n            onClick={() => setActiveTab(tab)}\n            className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n              activeTab === tab \n                ? 'bg-blue-600 text-white' \n                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n            }`}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"mt-6\">\n        <AnimatePresence mode=\"wait\">\n          {activeTab === 'setup' && (\n            <motion.div\n              key=\"setup\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <div className=\"space-y-6\">\n                <div className=\"bg-gray-700 rounded-lg p-4\">\n                  <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center\">\n                    🎛️ Simulation Settings\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"block text-sm font-medium text-gray-200\">Iterations</label>\n                      <input\n                        type=\"number\"\n                        className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        value={simulationSettings.iterations}\n                        onChange={(e) => setSimulationSettings(prev => ({\n                          ...prev,\n                          iterations: parseInt(e.target.value)\n                        }))}\n                        min=\"1000\"\n                        max=\"100000\"\n                        step=\"1000\"\n                      />\n                      <small className=\"text-gray-400\">Leave empty for random</small>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"block text-sm font-medium text-gray-200\">Confidence Level</label>\n                      <select\n                        className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        value={simulationSettings.confidenceLevel}\n                        onChange={(e) => setSimulationSettings(prev => ({\n                          ...prev,\n                          confidenceLevel: parseFloat(e.target.value)\n                        }))}\n                      >\n                        <option value={0.90}>90%</option>\n                        <option value={0.95}>95%</option>\n                        <option value={0.99}>99%</option>\n                      </select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"block text-sm font-medium text-gray-200\">Random Seed (Optional)</label>\n                      <input\n                        type=\"number\"\n                        className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        value={simulationSettings.randomSeed || ''}\n                        onChange={(e) => setSimulationSettings(prev => ({\n                          ...prev,\n                          randomSeed: e.target.value ? parseInt(e.target.value) : null\n                        }))}\n                        placeholder=\"Leave empty for random\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"flex items-center space-x-2 text-gray-200\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"w-4 h-4 text-blue-600 bg-gray-800 border-gray-600 rounded focus:ring-blue-500\"\n                          checked={simulationSettings.enableCorrelation}\n                          onChange={(e) => setSimulationSettings(prev => ({\n                            ...prev,\n                            enableCorrelation: e.target.checked\n                          }))}\n                        />\n                        <span>Enable Variable Correlation</span>\n                      </label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-700 rounded-lg p-4\">\n                  <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center\">\n                    📊 Variable Distributions\n                  </h3>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    {Object.entries(distributions).map(([variable, dist]) => (\n                      <div key={variable} className=\"bg-gray-800 border border-gray-600 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <label className=\"flex items-center space-x-2 text-gray-200\">\n                            <input\n                              type=\"checkbox\"\n                              checked={dist.enabled}\n                              onChange={(e) => updateDistribution(variable, { enabled: e.target.checked })}\n                            />\n                            <span className=\"font-medium\">{dist.name}</span>\n                          </label>\n                        </div>\n                        \n                        {dist.enabled && (\n                          <div className=\"space-y-3\">\n                            <div className=\"space-y-2\">\n                              <label className=\"block text-sm font-medium text-gray-200\">Distribution Type</label>\n                              <select\n                                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                                value={dist.type}\n                                onChange={(e) => {\n                                  const newType = e.target.value;\n                                  const typeConfig = distributionTypes.find(t => t.value === newType);\n                                  const newParameters = {};\n                                  \n                                  // Set default parameters for new type\n                                  if (newType === 'normal') {\n                                    newParameters.mean = 0.1;\n                                    newParameters.stdDev = 0.02;\n                                  } else if (newType === 'triangular') {\n                                    newParameters.min = 0.05;\n                                    newParameters.mode = 0.1;\n                                    newParameters.max = 0.15;\n                                  } else if (newType === 'uniform') {\n                                    newParameters.min = 0.05;\n                                    newParameters.max = 0.15;\n                                  }\n                                  \n                                  updateDistribution(variable, { type: newType, parameters: newParameters });\n                                }}\n                              >\n                                {distributionTypes.map(type => (\n                                  <option key={type.value} value={type.value}>\n                                    {type.label}\n                                  </option>\n                                ))}\n                              </select>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-2 gap-3\">\n                              {distributionTypes\n                                .find(t => t.value === dist.type)\n                                ?.parameters.map(param => (\n                                  <div key={param} className=\"space-y-1\">\n                                    <label className=\"block text-xs font-medium text-gray-300\">{param.charAt(0).toUpperCase() + param.slice(1)}</label>\n                                    <input\n                                      className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                                      type=\"number\"\n                                      value={dist.parameters[param] || ''}\n                                      onChange={(e) => updateDistribution(variable, {\n                                        parameters: {\n                                          ...dist.parameters,\n                                          [param]: parseFloat(e.target.value)\n                                        }\n                                      })}\n                                      step=\"0.001\"\n                                    />\n                                  </div>\n                                ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {simulationSettings.enableCorrelation && (\n                  <div className={styles.correlationSection}>\n                    <h3>🔗 Correlation Matrix</h3>\n                    <div className={styles.correlationMatrix}>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th></th>\n                            {Object.keys(distributions).map(variable => (\n                              <th key={variable}>{distributions[variable].name}</th>\n                            ))}\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {Object.keys(distributions).map((variable, i) => (\n                            <tr key={variable}>\n                              <td className={styles.correlationLabel}>\n                                {distributions[variable].name}\n                              </td>\n                              {Object.keys(distributions).map((_, j) => (\n                                <td key={j}>\n                                  <input\n                                    type=\"number\"\n                                    value={correlationMatrix[i][j]}\n                                    onChange={(e) => updateCorrelation(i, j, parseFloat(e.target.value))}\n                                    min=\"-1\"\n                                    max=\"1\"\n                                    step=\"0.1\"\n                                    disabled={i === j}\n                                    className={styles.correlationInput}\n                                  />\n                                </td>\n                              ))}\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          )}\n\n          {activeTab === 'run' && (\n            <motion.div\n              key=\"run\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <div className={styles.runContainer}>\n                <div className={styles.runHeader}>\n                  <h3>🚀 Simulation Control</h3>\n                  <div className=\"flex items-center space-x-2\">\n                    {!isRunning ? (\n                      <button\n                        onClick={runSimulation}\n                        className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium flex items-center space-x-2 transition-colors\"\n                        disabled={Object.values(distributions).every(d => !d.enabled)}\n                      >\n                        <Play size={16} />\n                        <span>Run Simulation</span>\n                      </button>\n                    ) : (\n                      <button\n                        onClick={stopSimulation}\n                        className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium flex items-center space-x-2 transition-colors\"\n                      >\n                        <Square size={16} />\n                        <span>Stop Simulation</span>\n                      </button>\n                    )}\n                  </div>\n                </div>\n\n                {isRunning && (\n                  <div className=\"mt-4\">\n                    <div className=\"w-full bg-gray-700 rounded-full h-2 mb-2\">\n                      <div\n                        className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${progress}%` }}\n                      />\n                    </div>\n                    <div className=\"text-sm text-gray-400 text-center\">\n                      {progress.toFixed(1)}% Complete ({Math.floor(progress * simulationSettings.iterations / 100)} / {simulationSettings.iterations} iterations)\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"bg-gray-800 rounded-lg p-4 mt-4\">\n                  <h4>📋 Simulation Preview</h4>\n                  <div className={styles.previewGrid}>\n                    <div className={styles.previewCard}>\n                      <div className={styles.previewLabel}>Iterations</div>\n                      <div className={styles.previewValue}>\n                        {simulationSettings.iterations.toLocaleString()}\n                      </div>\n                    </div>\n                    <div className={styles.previewCard}>\n                      <div className={styles.previewLabel}>Variables</div>\n                      <div className={styles.previewValue}>\n                        {Object.values(distributions).filter(d => d.enabled).length}\n                      </div>\n                    </div>\n                    <div className={styles.previewCard}>\n                      <div className={styles.previewLabel}>Confidence Level</div>\n                      <div className={styles.previewValue}>\n                        {(simulationSettings.confidenceLevel * 100).toFixed(0)}%\n                      </div>\n                    </div>\n                    <div className={styles.previewCard}>\n                      <div className={styles.previewLabel}>Correlation</div>\n                      <div className={styles.previewValue}>\n                        {simulationSettings.enableCorrelation ? 'Enabled' : 'Disabled'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {activeTab === 'results' && (\n            <motion.div\n              key=\"results\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              {simulationResults ? (\n                <div className={styles.resultsContainer}>\n                  <div className={styles.resultsHeader}>\n                    <h3>📈 Simulation Results</h3>\n                    <div className={styles.resultsActions}>\n                      <button className={`${styles.button} ${styles.secondary}`}>\n                        <Download size={16} />\n                        Export Results\n                      </button>\n                      <button className={`${styles.button} ${styles.tertiary}`}>\n                        <FileText size={16} />\n                        Generate Report\n                      </button>\n                    </div>\n                  </div>\n\n                  <div className={styles.statisticsGrid}>\n                    {Object.entries(simulationResults.analysis.statistics).map(([metric, stats]) => (\n                      <div key={metric} className={styles.statisticCard}>\n                        <h4>{metric === 'pricePerShare' ? 'Price per Share' : \n                             metric === 'enterpriseValue' ? 'Enterprise Value' : \n                             'Upside %'}</h4>\n                        <div className={styles.statValue}>\n                          {metric === 'upside' ? \n                            `${stats.mean.toFixed(1)}%` :\n                            formatCurrency(stats.mean)\n                          }\n                        </div>\n                        <div className={styles.statDetails}>\n                          <div>Median: {metric === 'upside' ? `${stats.median.toFixed(1)}%` : formatCurrency(stats.median)}</div>\n                          <div>Std Dev: {metric === 'upside' ? `${stats.stdDev.toFixed(1)}%` : formatCurrency(stats.stdDev)}</div>\n                          <div>Min: {metric === 'upside' ? `${stats.min.toFixed(1)}%` : formatCurrency(stats.min)}</div>\n                          <div>Max: {metric === 'upside' ? `${stats.max.toFixed(1)}%` : formatCurrency(stats.max)}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className={styles.chartsSection}>\n                    <div className={styles.chartCard}>\n                      <h4>📊 Price Distribution</h4>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <AreaChart data={generateHistogramData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis \n                            dataKey=\"bin\" \n                            tickFormatter={formatCurrency}\n                          />\n                          <YAxis />\n                          <Tooltip \n                            formatter={(value, name) => [\n                              `${(value * 100).toFixed(2)}%`, \n                              'Frequency'\n                            ]}\n                            labelFormatter={(value) => `Price: ${formatCurrency(value)}`}\n                          />\n                          <Area \n                            type=\"monotone\" \n                            dataKey=\"frequency\" \n                            stroke=\"#3B82F6\" \n                            fill=\"#3B82F6\" \n                            fillOpacity={0.6}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n\n                    <div className={styles.chartCard}>\n                      <h4>🎯 Sensitivity Scatter Plot</h4>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <ScatterChart data={generateScatterData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis \n                            dataKey=\"x\" \n                            name=\"Revenue Growth Rate\"\n                            tickFormatter={(value) => `${value.toFixed(1)}%`}\n                          />\n                          <YAxis \n                            dataKey=\"y\" \n                            name=\"Price per Share\"\n                            tickFormatter={formatCurrency}\n                          />\n                          <Tooltip \n                            formatter={(value, name) => [\n                              name === 'Revenue Growth Rate' ? `${value.toFixed(2)}%` : formatCurrency(value),\n                              name\n                            ]}\n                          />\n                          <Scatter name=\"Scenarios\" fill=\"#10B981\">\n                            {generateScatterData.map((entry, index) => (\n                              <Cell \n                                key={`cell-${index}`}\n                                fill={entry.upside > 0 ? '#10B981' : '#EF4444'}\n                              />\n                            ))}\n                          </Scatter>\n                        </ScatterChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className={styles.noResults}>\n                  <AlertTriangle size={48} />\n                  <h3>No Results Available</h3>\n                  <p>Run a simulation to see results here.</p>\n                </div>\n              )}\n            </motion.div>\n          )}\n\n          {activeTab === 'analysis' && (\n            <motion.div\n              key=\"analysis\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              {simulationResults ? (\n                <div className={styles.analysisContainer}>\n                  <div className={styles.riskMetricsSection}>\n                    <h3>⚠️ Risk Metrics</h3>\n                    <div className={styles.riskMetricsGrid}>\n                      {Object.entries(simulationResults.analysis.riskMetrics).map(([metric, risks]) => (\n                        <div key={metric} className={styles.riskCard}>\n                          <h4>{metric === 'pricePerShare' ? 'Price per Share Risk' : \n                               metric === 'enterpriseValue' ? 'Enterprise Value Risk' : \n                               'Upside Risk'}</h4>\n                          <div className={styles.riskMetric}>\n                            <span>Value at Risk (5%):</span>\n                            <span>{metric === 'upside' ? `${risks.var.toFixed(1)}%` : formatCurrency(risks.var)}</span>\n                          </div>\n                          <div className={styles.riskMetric}>\n                            <span>Conditional VaR:</span>\n                            <span>{metric === 'upside' ? `${risks.cvar.toFixed(1)}%` : formatCurrency(risks.cvar)}</span>\n                          </div>\n                          <div className={styles.riskMetric}>\n                            <span>Skewness:</span>\n                            <span>{risks.skewness.toFixed(3)}</span>\n                          </div>\n                          <div className={styles.riskMetric}>\n                            <span>Kurtosis:</span>\n                            <span>{risks.kurtosis.toFixed(3)}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className={styles.confidenceIntervalsSection}>\n                    <h3>🎯 Confidence Intervals ({(simulationResults.analysis.confidenceIntervals.pricePerShare?.level * 100).toFixed(0)}%)</h3>\n                    <div className={styles.intervalsGrid}>\n                      {Object.entries(simulationResults.analysis.confidenceIntervals).map(([metric, interval]) => (\n                        <div key={metric} className={styles.intervalCard}>\n                          <h4>{metric === 'pricePerShare' ? 'Price per Share' : \n                               metric === 'enterpriseValue' ? 'Enterprise Value' : \n                               'Upside %'}</h4>\n                          <div className={styles.intervalRange}>\n                            <div className={styles.intervalBound}>\n                              <span>Lower Bound:</span>\n                              <span>{metric === 'upside' ? `${interval.lowerBound.toFixed(1)}%` : formatCurrency(interval.lowerBound)}</span>\n                            </div>\n                            <div className={styles.intervalBound}>\n                              <span>Upper Bound:</span>\n                              <span>{metric === 'upside' ? `${interval.upperBound.toFixed(1)}%` : formatCurrency(interval.upperBound)}</span>\n                            </div>\n                            <div className={styles.intervalWidth}>\n                              <span>Width:</span>\n                              <span>{metric === 'upside' ? `${interval.width.toFixed(1)}%` : formatCurrency(interval.width)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className={styles.percentilesSection}>\n                    <h3>📊 Percentile Analysis</h3>\n                    <div className={styles.percentilesTable}>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Metric</th>\n                            <th>5th %ile</th>\n                            <th>25th %ile</th>\n                            <th>50th %ile</th>\n                            <th>75th %ile</th>\n                            <th>95th %ile</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {Object.entries(simulationResults.analysis.percentiles).map(([metric, percentiles]) => (\n                            <tr key={metric}>\n                              <td>{metric === 'pricePerShare' ? 'Price per Share' : \n                                   metric === 'enterpriseValue' ? 'Enterprise Value' : \n                                   'Upside %'}</td>\n                              <td>{metric === 'upside' ? `${percentiles.p5.toFixed(1)}%` : formatCurrency(percentiles.p5)}</td>\n                              <td>{metric === 'upside' ? `${percentiles.p25.toFixed(1)}%` : formatCurrency(percentiles.p25)}</td>\n                              <td>{metric === 'upside' ? `${percentiles.p50.toFixed(1)}%` : formatCurrency(percentiles.p50)}</td>\n                              <td>{metric === 'upside' ? `${percentiles.p75.toFixed(1)}%` : formatCurrency(percentiles.p75)}</td>\n                              <td>{metric === 'upside' ? `${percentiles.p95.toFixed(1)}%` : formatCurrency(percentiles.p95)}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className={styles.noResults}>\n                  <AlertTriangle size={48} />\n                  <h3>No Analysis Available</h3>\n                  <p>Run a simulation to see analysis here.</p>\n                </div>\n              )}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nexport default MonteCarloSimulation;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Target, BarChart3, Activity, DollarSign, Users, Zap } from 'lucide-react';\nimport ScenarioModeling from './ScenarioModeling.jsx';\nimport SensitivityAnalysis from './SensitivityAnalysis.jsx';\nimport AdvancedDCF from './AdvancedDCF.jsx';\nimport ComparableAnalysis from './ComparableAnalysis.jsx';\nimport MonteCarloSimulation from './MonteCarloSimulation.jsx';\n\nconst ModelingTools = ({ data, adjustedValues, onDataChange }) => {\n  const [activeModel, setActiveModel] = useState('dcf');\n  const [modelInputs, setModelInputs] = useState({\n    dcf: {\n      discountRate: 10,\n      terminalGrowthRate: 2.5,\n      projectionYears: 5,\n      terminalValueMultiple: 10,\n      taxRate: 25,\n      sharesOutstanding: 1000,\n      workingCapital: {\n        receivablesDays: 45,\n        inventoryDays: 60,\n        payablesDays: 30,\n        receivablesGrowth: 2,\n        inventoryGrowth: 1.5,\n        payablesGrowth: 1.8\n      },\n      capex: {\n        capexAsPercentOfRevenue: 3.5,\n        depreciationRate: 7,\n        maintenanceCapex: 2.0\n      }\n    },\n    ratios: {\n      compareToIndustry: true,\n      industryAverages: {\n        grossMargin: 45,\n        operatingMargin: 15,\n        netMargin: 8,\n        currentRatio: 2.1,\n        debtToEquity: 0.5\n      }\n    },\n    sensitivity: {\n      variables: ['revenue', 'grossMargin', 'discountRate'],\n      ranges: {\n        revenue: { min: -20, max: 20 },\n        grossMargin: { min: -5, max: 5 },\n        discountRate: { min: 8, max: 15 }\n      }\n    },\n    scenario: {\n      scenarios: [\n        { name: 'Base Case', probability: 50, revenueGrowth: 15, marginImprovement: 0 },\n        { name: 'Bull Case', probability: 25, revenueGrowth: 25, marginImprovement: 2 },\n        { name: 'Bear Case', probability: 25, revenueGrowth: 5, marginImprovement: -2 }\n      ]\n    }\n  });\n\n  // Calculate financial metrics from the spreadsheet data\n  const calculatedMetrics = useMemo(() => {\n    const statements = data.statements.incomeStatement;\n    const periods = data.periods;\n    \n    const metrics = {\n      revenue: [],\n      grossProfit: [],\n      operatingIncome: [],\n      margins: {\n        gross: [],\n        operating: [],\n        net: []\n      },\n      growth: {\n        revenue: [],\n        operating: []\n      }\n    };\n\n    periods.forEach((_, index) => {\n      // Revenue metrics - Use adjusted values for latest period when available\n      const isLatestPeriod = index === periods.length - 1;\n      const revenue = isLatestPeriod && adjustedValues?.totalRevenue \n        ? adjustedValues.totalRevenue \n        : statements.totalRevenue?.[index] || 0;\n      const totalCOGS = isLatestPeriod && adjustedValues?.totalCostOfGoodsSold \n        ? adjustedValues.totalCostOfGoodsSold \n        : statements.totalCostOfGoodsSold?.[index] || 0;\n      const grossProfit = isLatestPeriod && adjustedValues?.grossProfit \n        ? adjustedValues.grossProfit \n        : statements.grossProfit?.[index] || (revenue - totalCOGS);\n      const operatingIncome = isLatestPeriod && adjustedValues?.operatingIncome \n        ? adjustedValues.operatingIncome \n        : statements.operatingIncome?.[index] || 0;\n      \n      metrics.revenue.push(revenue);\n      metrics.grossProfit.push(grossProfit);\n      metrics.operatingIncome.push(operatingIncome);\n      \n      // Margin calculations\n      metrics.margins.gross.push(revenue ? (grossProfit / revenue) * 100 : 0);\n      metrics.margins.operating.push(revenue ? (operatingIncome / revenue) * 100 : 0);\n      \n      // Growth calculations\n      if (index > 0) {\n        const prevRevenue = statements.totalRevenue?.[index - 1] || 0;\n        const prevOperating = statements.operatingIncome?.[index - 1] || 0;\n        \n        metrics.growth.revenue.push(prevRevenue ? ((revenue - prevRevenue) / prevRevenue) * 100 : 0);\n        metrics.growth.operating.push(prevOperating ? ((operatingIncome - prevOperating) / prevOperating) * 100 : 0);\n      }\n    });\n\n    return metrics;\n  }, [data]);\n\n  // DCF Calculation - Enhanced to work with scenario data\n  const calculateDCF = (inputData = null) => {\n    const { discountRate, terminalGrowthRate, projectionYears, taxRate } = modelInputs.dcf;\n    const sourceData = inputData || data;\n    \n    // Use either scenario data or calculated metrics\n    let operatingIncomes;\n    if (inputData) {\n      // For scenario data, extract operating incomes directly\n      operatingIncomes = [];\n      sourceData.periods.forEach((_, index) => {\n        if (index > 0 && index <= projectionYears) {\n          operatingIncomes.push(sourceData.statements.incomeStatement.operatingIncome?.[index] || 0);\n        }\n      });\n    } else {\n      // For regular calculation, use calculated metrics\n      operatingIncomes = calculatedMetrics.operatingIncome.slice(1, projectionYears + 1);\n    }\n    \n    if (operatingIncomes.length === 0) return { enterpriseValue: 0, equityValue: 0, sharePrice: 0 };\n\n    let presentValue = 0;\n    const discountFactor = 1 + (discountRate / 100);\n\n    // Calculate present value of cash flows\n    operatingIncomes.forEach((income, index) => {\n      const afterTaxIncome = income * (1 - taxRate / 100);\n      const pv = afterTaxIncome / Math.pow(discountFactor, index + 1);\n      presentValue += pv;\n    });\n\n    // Terminal value\n    const lastYearIncome = operatingIncomes[operatingIncomes.length - 1] || 0;\n    const terminalCashFlow = lastYearIncome * (1 + terminalGrowthRate / 100) * (1 - taxRate / 100);\n    const terminalValue = terminalCashFlow / ((discountRate - terminalGrowthRate) / 100);\n    const presentTerminalValue = terminalValue / Math.pow(discountFactor, projectionYears);\n\n    const enterpriseValue = presentValue + presentTerminalValue;\n    \n    return {\n      enterpriseValue,\n      equityValue: enterpriseValue, // Simplified - would subtract net debt\n      presentValueOperations: presentValue,\n      presentValueTerminal: presentTerminalValue,\n      terminalValue\n    };\n  };\n\n  const dcfResults = calculateDCF();\n\n  const modelTypes = [\n    { id: 'dcf', label: 'DCF Valuation', icon: DollarSign, description: 'Discounted Cash Flow analysis' },\n    { id: 'ratios', label: 'Ratio Analysis', icon: BarChart3, description: 'Financial ratio comparison' },\n    { id: 'sensitivity', label: 'Sensitivity Analysis', icon: Activity, description: 'Variable impact analysis' },\n    { id: 'scenario', label: 'Scenario Modeling', icon: Target, description: 'Multi-scenario projections' },\n    { id: 'comparable', label: 'Comparable Analysis', icon: Users, description: 'Market-based valuation' },\n    { id: 'montecarlo', label: 'Monte Carlo', icon: Zap, description: 'Probabilistic risk analysis' }\n  ];\n\n  const updateModelInput = (modelType, field, value) => {\n    setModelInputs(prev => ({\n      ...prev,\n      [modelType]: {\n        ...prev[modelType],\n        [field]: value\n      }\n    }));\n  };\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value * 1000); // Convert from thousands\n  };\n\n  const formatPercent = (value) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  return (\n    <div className=\"h-full bg-gray-900 text-white p-6\">\n      {/* Streamlined Model Selection */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-white\">Financial Modeling</h2>\n            <p className=\"text-gray-400 text-sm mt-1\">Select a modeling approach to analyze your financial data</p>\n          </div>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2 mb-6\">\n          {modelTypes.map((type) => {\n            const Icon = type.icon;\n            return (\n              <button\n                key={type.id}\n                onClick={() => setActiveModel(type.id)}\n                className={`${\n                  activeModel === type.id \n                    ? 'bg-blue-600 text-white border-blue-500 shadow-lg' \n                    : 'bg-gray-800 text-gray-300 border-gray-700 hover:bg-gray-700 hover:text-white hover:border-gray-600'\n                } flex items-center gap-3 px-4 py-3 rounded-lg border transition-all duration-200`}\n              >\n                <Icon size={18} className={activeModel === type.id ? 'text-white' : 'text-blue-400'} />\n                <span className=\"font-medium\">{type.label}</span>\n              </button>\n            );\n          })}\n        </div>\n        \n        {/* Active Model Description */}\n        <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-4\">\n          <div className=\"flex items-center gap-3\">\n            {React.createElement(modelTypes.find(t => t.id === activeModel)?.icon, { \n              size: 20, \n              className: \"text-blue-400\" \n            })}\n            <div>\n              <h3 className=\"font-medium text-white\">\n                {modelTypes.find(t => t.id === activeModel)?.label}\n              </h3>\n              <p className=\"text-gray-400 text-sm\">\n                {modelTypes.find(t => t.id === activeModel)?.description}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Model Content */}\n      <div>\n        {activeModel === 'dcf' && (\n          <div className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2 text-white\">\n              <DollarSign size={20} className=\"text-blue-400\" />\n              DCF Valuation Model\n            </h3>\n            \n            <AdvancedDCF\n              data={data}\n              modelInputs={modelInputs}\n              onModelInputChange={updateModelInput}\n              formatCurrency={formatCurrency}\n              formatPercent={formatPercent}\n            />\n          </div>\n        )}\n\n        {activeModel === 'ratios' && (\n          <div className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2 text-white\">\n              <BarChart3 size={20} />\n              Financial Ratio Analysis\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Profitability Ratios */}\n              <div>\n                <h4 className=\"font-semibold mb-3 text-gray-200\">Profitability Ratios</h4>\n                <div className=\"space-y-3\">\n                  {calculatedMetrics.margins.gross.map((margin, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span className=\"text-sm\">{data.periods[index + 1]} Gross Margin:</span>\n                      <span className=\"font-medium\">{formatPercent(margin)}</span>\n                    </div>\n                  ))}\n                  {calculatedMetrics.margins.operating.map((margin, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span className=\"text-sm\">{data.periods[index + 1]} Operating Margin:</span>\n                      <span className=\"font-medium\">{formatPercent(margin)}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Growth Ratios */}\n              <div>\n                <h4 className=\"font-semibold mb-3 text-gray-200\">Growth Rates</h4>\n                <div className=\"space-y-3\">\n                  {calculatedMetrics.growth.revenue.map((growth, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span className=\"text-sm\">{data.periods[index + 1]} Revenue Growth:</span>\n                      <span className={`font-medium ${growth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {formatPercent(growth)}\n                      </span>\n                    </div>\n                  ))}\n                  {calculatedMetrics.growth.operating.map((growth, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span className=\"text-sm\">{data.periods[index + 1]} Operating Growth:</span>\n                      <span className={`font-medium ${growth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {formatPercent(growth)}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Industry Comparison */}\n              <div>\n                <h4 className=\"font-semibold mb-3 text-gray-200\">Industry Comparison</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-gray-700 rounded-lg\">\n                    <div className=\"text-xs text-gray-400 uppercase tracking-wide\">Industry Avg</div>\n                    <div className=\"text-sm\">Gross Margin: {formatPercent(modelInputs.ratios.industryAverages.grossMargin)}</div>\n                    <div className=\"text-sm\">Operating Margin: {formatPercent(modelInputs.ratios.industryAverages.operatingMargin)}</div>\n                    <div className=\"text-sm\">Net Margin: {formatPercent(modelInputs.ratios.industryAverages.netMargin)}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeModel === 'sensitivity' && (\n          <div className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2 text-white\">\n              <Activity size={20} />\n              Sensitivity Analysis\n            </h3>\n            \n            <SensitivityAnalysis\n              data={data}\n              modelInputs={modelInputs}\n              onModelInputChange={updateModelInput}\n              calculateDCF={calculateDCF}\n              formatCurrency={formatCurrency}\n              formatPercent={formatPercent}\n            />\n          </div>\n        )}\n\n        {activeModel === 'scenario' && (\n          <div className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2 text-white\">\n              <Target size={20} />\n              Scenario Modeling\n            </h3>\n            \n            <ScenarioModeling\n              data={data}\n              modelInputs={modelInputs}\n              onModelInputChange={updateModelInput}\n              calculateDCF={calculateDCF}\n              formatCurrency={formatCurrency}\n              formatPercent={formatPercent}\n            />\n          </div>\n        )}\n\n        {activeModel === 'comparable' && (\n          <div className=\"p-6\">\n            <ComparableAnalysis\n              data={data}\n              formatCurrency={formatCurrency}\n              formatPercent={formatPercent}\n            />\n          </div>\n        )}\n\n        {activeModel === 'montecarlo' && (\n          <div className=\"p-6\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n              <Zap size={20} />\n              Monte Carlo Simulation\n            </h3>\n            \n            <MonteCarloSimulation\n              data={data}\n              onDataChange={onDataChange}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ModelingTools;\n","import React, { useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Percent, \n  BarChart3,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  Calculator,\n  PieChart,\n  Activity\n} from 'lucide-react';\n\nconst AnalysisResults = ({ \n  data, \n  adjustedValues,\n  modelInputs, \n  calculateDCF, \n  formatCurrency, \n  formatPercentage \n}) => {\n  // Calculate comprehensive financial metrics\n  const analysis = useMemo(() => {\n    if (!data?.statements?.incomeStatement) return null;\n\n    const income = data.statements.incomeStatement;\n    const periods = Object.keys(income.totalRevenue || {}).sort((a, b) => parseInt(a) - parseInt(b));\n    \n    if (periods.length < 2) return null;\n\n    const latest = periods[periods.length - 1];\n    const previous = periods[periods.length - 2];\n    const earliest = periods[0];\n\n    // Financial Performance Analysis - Use adjusted values for latest period when available\n    const revenueLatest = adjustedValues?.totalRevenue || income.totalRevenue?.[latest] || 0;\n    const revenuePrevious = income.totalRevenue?.[previous] || 0;\n    const revenueEarliest = income.totalRevenue?.[earliest] || 0;\n    \n    const grossProfitLatest = adjustedValues?.grossProfit || income.grossProfit?.[latest] || 0;\n    const grossProfitPrevious = income.grossProfit?.[previous] || 0;\n    \n    const operatingIncomeLatest = adjustedValues?.operatingIncome || income.operatingIncome?.[latest] || 0;\n    const operatingIncomePrevious = income.operatingIncome?.[previous] || 0;\n    \n    const totalCOGSLatest = adjustedValues?.totalCostOfGoodsSold || income.totalCostOfGoodsSold?.[latest] || 0;\n    const totalCOGSPrevious = income.totalCostOfGoodsSold?.[previous] || 0;\n\n    // Growth Calculations\n    const revenueGrowthYoY = revenuePrevious ? ((revenueLatest - revenuePrevious) / revenuePrevious) * 100 : 0;\n    const revenueCAGR = revenueEarliest && periods.length > 2 ? \n      (Math.pow(revenueLatest / revenueEarliest, 1 / (periods.length - 1)) - 1) * 100 : 0;\n    \n    const grossProfitGrowth = grossProfitPrevious ? ((grossProfitLatest - grossProfitPrevious) / grossProfitPrevious) * 100 : 0;\n    const operatingIncomeGrowth = operatingIncomePrevious ? ((operatingIncomeLatest - operatingIncomePrevious) / operatingIncomePrevious) * 100 : 0;\n\n    // Profitability Ratios\n    const grossMarginLatest = revenueLatest ? (grossProfitLatest / revenueLatest) * 100 : 0;\n    const grossMarginPrevious = revenuePrevious ? (grossProfitPrevious / revenuePrevious) * 100 : 0;\n    const operatingMarginLatest = revenueLatest ? (operatingIncomeLatest / revenueLatest) * 100 : 0;\n    const operatingMarginPrevious = revenuePrevious ? (operatingIncomePrevious / revenuePrevious) * 100 : 0;\n    \n    const marginImprovement = grossMarginLatest - grossMarginPrevious;\n    const operatingMarginChange = operatingMarginLatest - operatingMarginPrevious;\n\n    // DCF Analysis\n    let dcfResults = null;\n    if (calculateDCF) {\n      try {\n        dcfResults = calculateDCF(data);\n      } catch (error) {\n        console.error('DCF calculation error:', error);\n      }\n    }\n\n    // Business Unit Analysis (Revenue Breakdown)\n    const revenueBreakdown = [\n      { name: 'Energy Devices', value: income.energyDevices?.[latest] || 0 },\n      { name: 'Injectables', value: income.injectables?.[latest] || 0 },\n      { name: 'Wellness', value: income.wellness?.[latest] || 0 },\n      { name: 'Weightloss', value: income.weightloss?.[latest] || 0 },\n      { name: 'Retail Sales', value: income.retailSales?.[latest] || 0 },\n      { name: 'Surgery', value: income.surgery?.[latest] || 0 }\n    ].filter(item => item.value > 0);\n\n    // Key Performance Indicators\n    const kpis = [\n      {\n        title: 'Revenue Growth',\n        value: `${revenueGrowthYoY > 0 ? '+' : ''}${revenueGrowthYoY.toFixed(1)}%`,\n        trend: revenueGrowthYoY > 0 ? 'up' : 'down',\n        description: 'Year-over-year revenue growth rate'\n      },\n      {\n        title: 'Gross Margin',\n        value: `${grossMarginLatest.toFixed(1)}%`,\n        trend: marginImprovement > 0 ? 'up' : 'down',\n        description: `${marginImprovement > 0 ? '+' : ''}${marginImprovement.toFixed(1)}% vs prior year`\n      },\n      {\n        title: 'Operating Margin',\n        value: `${operatingMarginLatest.toFixed(1)}%`,\n        trend: operatingMarginChange > 0 ? 'up' : 'down',\n        description: `${operatingMarginChange > 0 ? '+' : ''}${operatingMarginChange.toFixed(1)}% vs prior year`\n      },\n      {\n        title: 'Revenue CAGR',\n        value: `${revenueCAGR > 0 ? '+' : ''}${revenueCAGR.toFixed(1)}%`,\n        trend: revenueCAGR > 5 ? 'up' : revenueCAGR > 0 ? 'neutral' : 'down',\n        description: `Compound annual growth rate over ${periods.length - 1} years`\n      }\n    ];\n\n    return {\n      periods,\n      latest,\n      previous,\n      revenue: {\n        latest: revenueLatest,\n        previous: revenuePrevious,\n        growth: revenueGrowthYoY,\n        cagr: revenueCAGR\n      },\n      profitability: {\n        grossMargin: grossMarginLatest,\n        grossMarginChange: marginImprovement,\n        operatingMargin: operatingMarginLatest,\n        operatingMarginChange\n      },\n      dcf: dcfResults,\n      revenueBreakdown,\n      kpis\n    };\n  }, [data, calculateDCF]);\n\n  if (!analysis) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"mx-auto h-12 w-12 text-yellow-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Insufficient Data</h3>\n          <p className=\"text-gray-500\">Please ensure financial data is loaded to generate analysis results.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const MetricCard = ({ title, value, trend, description, icon: Icon }) => (\n    <div className=\"bg-gray-800 rounded-xl p-6 border border-gray-700 hover:border-gray-600 transition-all duration-200\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`p-2 rounded-lg ${\n            trend === 'up' ? 'bg-green-900/30 text-green-400' : \n            trend === 'down' ? 'bg-red-900/30 text-red-400' : \n            'bg-gray-700 text-gray-400'\n          }`}>\n            <Icon className=\"h-5 w-5\" />\n          </div>\n          <div>\n            <div className=\"text-sm font-medium text-gray-300\">{title}</div>\n            <div className=\"text-xs text-gray-500 mt-1\">{description}</div>\n          </div>\n        </div>\n        {trend === 'up' && <TrendingUp className=\"h-5 w-5 text-green-400 flex-shrink-0\" />}\n        {trend === 'down' && <TrendingDown className=\"h-5 w-5 text-red-400 flex-shrink-0\" />}\n      </div>\n      <div className=\"text-3xl font-bold text-white\">{value}</div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6 p-6 bg-gray-900 text-white h-full\">\n      {/* Header */}\n      <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n          <BarChart3 className=\"h-6 w-6 text-blue-400 mr-3\" />\n          Financial Analysis Results\n        </h2>\n        <p className=\"text-gray-400\">\n          Comprehensive analysis of your company's financial performance and valuation\n        </p>\n      </div>\n\n      {/* Key Performance Indicators */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {analysis.kpis.map((kpi, index) => (\n          <MetricCard key={index} {...kpi} />\n        ))}\n      </div>\n\n      {/* Financial Performance Summary */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Financial Performance Trends */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center text-white\">\n            <Activity className=\"h-5 w-5 text-purple-400 mr-2\" />\n            Performance Trends\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-gray-200 mb-3\">Revenue Analysis</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">Latest Period:</span>\n                  <span className=\"font-semibold text-white\">{formatCurrency(analysis.revenue.latest)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">YoY Growth:</span>\n                  <span className={`font-semibold ${\n                    analysis.revenue.growth > 0 ? 'text-green-400' : 'text-red-400'\n                  }`}>\n                    {analysis.revenue.growth > 0 ? '+' : ''}{analysis.revenue.growth.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">CAGR:</span>\n                  <span className=\"font-semibold text-gray-200\">{analysis.revenue.cagr.toFixed(1)}%</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-200 mb-3\">Profitability Margins</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">Gross Margin:</span>\n                  <span className=\"font-semibold text-white\">{analysis.profitability.grossMargin.toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">Operating Margin:</span>\n                  <span className=\"font-semibold text-white\">{analysis.profitability.operatingMargin.toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">Margin Change:</span>\n                  <span className={`font-semibold ${\n                    analysis.profitability.grossMarginChange > 0 ? 'text-green-400' : 'text-red-400'\n                  }`}>\n                    {analysis.profitability.grossMarginChange > 0 ? '+' : ''}{analysis.profitability.grossMarginChange.toFixed(1)}pp\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Valuation Summary */}\n        {analysis.dcf && (\n          <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center text-white\">\n              <DollarSign className=\"h-5 w-5 text-green-400 mr-2\" />\n              DCF Valuation Summary\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-green-900/30 border border-green-700 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-400\">\n                  {formatCurrency(analysis.dcf.enterpriseValue)}\n                </div>\n                <div className=\"text-sm text-green-300\">Enterprise Value</div>\n              </div>\n              <div className=\"text-center p-4 bg-blue-900/30 border border-blue-700 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-400\">\n                  {formatCurrency(analysis.dcf.sharePrice)}\n                </div>\n                <div className=\"text-sm text-blue-300\">Price per Share</div>\n              </div>\n              <div className=\"text-center p-4 bg-gray-700 border border-gray-600 rounded-lg\">\n                <div className=\"text-2xl font-bold text-gray-300\">\n                  {formatCurrency(analysis.dcf.terminalValue)}\n                </div>\n                <div className=\"text-sm text-gray-400\">Terminal Value</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Revenue Breakdown */}\n      <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center text-white\">\n          <PieChart className=\"h-5 w-5 text-orange-400 mr-2\" />\n          Business Unit Performance\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {analysis.revenueBreakdown.map((unit, index) => {\n            const percentage = analysis.revenue.latest ? (unit.value / analysis.revenue.latest) * 100 : 0;\n            return (\n              <div key={index} className=\"p-4 bg-gray-700 border border-gray-600 rounded-lg\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"font-medium text-gray-200\">{unit.name}</span>\n                  <span className=\"text-sm text-gray-400\">{percentage.toFixed(1)}%</span>\n                </div>\n                <div className=\"text-lg font-semibold text-white mb-1\">\n                  {formatCurrency(unit.value)}\n                </div>\n                <div className=\"w-full bg-gray-600 rounded-full h-2\">\n                  <div \n                    className=\"bg-blue-500 h-2 rounded-full\" \n                    style={{ width: `${Math.min(percentage, 100)}%` }}\n                  ></div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Key Insights */}\n      <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center text-white\">\n          <CheckCircle className=\"h-5 w-5 text-green-400 mr-2\" />\n          Key Financial Insights\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-medium text-gray-200 mb-2\">Strengths</h4>\n            <ul className=\"space-y-1 text-sm text-gray-400\">\n              {analysis.revenue.growth > 0 && (\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                  Positive revenue growth trajectory\n                </li>\n              )}\n              {analysis.profitability.grossMargin > 60 && (\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                  Strong gross margin above 60%\n                </li>\n              )}\n              {analysis.profitability.grossMarginChange > 0 && (\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                  Improving profitability margins\n                </li>\n              )}\n              <li className=\"flex items-center\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                Diversified healthcare revenue streams\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-gray-200 mb-2\">Areas for Focus</h4>\n            <ul className=\"space-y-1 text-sm text-gray-400\">\n              {analysis.revenue.growth < 5 && (\n                <li className=\"flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n                  Revenue growth below industry benchmarks\n                </li>\n              )}\n              {analysis.profitability.operatingMargin < 20 && (\n                <li className=\"flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n                  Operating margin optimization opportunities\n                </li>\n              )}\n              <li className=\"flex items-center\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n                Monitor competitive positioning in key segments\n              </li>\n              <li className=\"flex items-center\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n                Consider strategic initiatives for growth acceleration\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalysisResults;\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  Database, \n  Calculator, \n  BarChart3, \n  CheckCircle, \n  AlertTriangle,\n  Clock,\n  ChevronRight,\n  HelpCircle,\n  TrendingUp,\n  FileSpreadsheet\n} from 'lucide-react';\n\nconst WorkflowNavigation = ({ \n  activeStep, \n  onStepChange, \n  dataCompleteness, \n  modelingProgress, \n  analysisProgress,\n  validationErrors = {}\n}) => {\n  const [showHelpFor, setShowHelpFor] = useState(null);\n\n  // Calculate step statuses based on progress\n  const getStepStatus = (stepId) => {\n    switch (stepId) {\n      case 'data':\n        if (dataCompleteness >= 80) return 'completed';\n        if (dataCompleteness > 0) return 'in-progress';\n        return 'pending';\n      \n      case 'modeling':\n        if (dataCompleteness < 50) return 'disabled';\n        if (modelingProgress >= 80) return 'completed';\n        if (modelingProgress > 0) return 'in-progress';\n        return 'available';\n      \n      case 'analysis':\n        if (dataCompleteness < 80 || modelingProgress < 50) return 'disabled';\n        if (analysisProgress >= 80) return 'completed';\n        if (analysisProgress > 0) return 'in-progress';\n        return 'available';\n      \n      default:\n        return 'pending';\n    }\n  };\n\n  const steps = [\n    {\n      id: 'data',\n      title: 'Data Entry',\n      subtitle: 'Financial statements & inputs',\n      icon: Database,\n      progress: dataCompleteness,\n      description: 'Import or manually input your company\\'s financial statements including income statement, balance sheet, and cash flow data.',\n      validationFields: ['revenue', 'expenses', 'assets'],\n      helpContent: {\n        title: 'Data Entry Guidelines',\n        items: [\n          'Ensure all financial figures are in the same currency',\n          'Use consistent time periods across all statements',\n          'Review data for obvious errors or inconsistencies',\n          'Include at least 3 years of historical data for better analysis'\n        ]\n      }\n    },\n    {\n      id: 'modeling',\n      title: 'Financial Modeling',\n      subtitle: 'DCF, LBO & scenario analysis',\n      icon: Calculator,\n      progress: modelingProgress,\n      description: 'Configure valuation parameters, build financial models, and run scenario analyses to understand value drivers.',\n      validationFields: ['discountRate', 'growthAssumptions', 'margins'],\n      helpContent: {\n        title: 'Modeling Best Practices',\n        items: [\n          'Set realistic discount rates based on industry benchmarks',\n          'Use conservative growth assumptions for terminal value',\n          'Consider multiple scenarios (base, bull, bear cases)',\n          'Validate model outputs against comparable companies'\n        ]\n      }\n    },\n    {\n      id: 'analysis',\n      title: 'Analysis & Results',\n      subtitle: 'Insights, reports & recommendations',\n      icon: BarChart3,\n      progress: analysisProgress,\n      description: 'Review valuation results, sensitivity analysis, and generate comprehensive reports with actionable insights.',\n      validationFields: ['valuation', 'sensitivity', 'recommendations'],\n      helpContent: {\n        title: 'Analysis Interpretation',\n        items: [\n          'Compare results across different valuation methods',\n          'Pay attention to key value drivers in sensitivity analysis',\n          'Consider qualitative factors not captured in models',\n          'Document assumptions and limitations in your analysis'\n        ]\n      }\n    }\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed': return 'text-emerald-400';\n      case 'in-progress': return 'text-blue-400';\n      case 'available': return 'text-slate-300';\n      case 'disabled': return 'text-slate-500';\n      default: return 'text-slate-400';\n    }\n  };\n\n  const getStatusBg = (status, isActive) => {\n    if (isActive) return 'bg-blue-600';\n    switch (status) {\n      case 'completed': return 'bg-emerald-500/10 border-emerald-400/20';\n      case 'in-progress': return 'bg-blue-500/10 border-blue-400/20';\n      case 'available': return 'bg-slate-700/30 border-slate-600/20';\n      case 'disabled': return 'bg-slate-800/30 border-slate-700/10';\n      default: return 'bg-slate-700/20 border-slate-600/10';\n    }\n  };\n\n  const renderStatusIcon = (step, status, isActive) => {\n    const Icon = step.icon;\n    \n    if (status === 'completed') {\n      return <CheckCircle size={20} className=\"text-emerald-400\" />;\n    }\n    \n    if (status === 'disabled') {\n      return <Icon size={20} className=\"text-slate-500\" />;\n    }\n    \n    if (validationErrors[step.id]?.length > 0) {\n      return <AlertTriangle size={20} className=\"text-amber-400\" />;\n    }\n    \n    if (status === 'in-progress') {\n      return <Clock size={20} className=\"text-blue-400\" />;\n    }\n    \n    return <Icon size={20} className={isActive ? 'text-white' : getStatusColor(status)} />;\n  };\n\n  const renderProgressRing = (progress, status) => {\n    const radius = 18;\n    const circumference = 2 * Math.PI * radius;\n    const strokeDasharray = circumference;\n    const strokeDashoffset = circumference - (progress / 100) * circumference;\n    \n    const getProgressColor = () => {\n      if (progress >= 80) return '#10b981'; // emerald-500\n      if (progress >= 50) return '#3b82f6'; // blue-500\n      if (progress > 0) return '#f59e0b'; // amber-500\n      return '#64748b'; // slate-500\n    };\n\n    return (\n      <div className=\"relative\">\n        <svg className=\"w-10 h-10 transform -rotate-90\" viewBox=\"0 0 40 40\">\n          <circle\n            cx=\"20\"\n            cy=\"20\"\n            r={radius}\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            fill=\"none\"\n            className=\"text-slate-700\"\n          />\n          <circle\n            cx=\"20\"\n            cy=\"20\"\n            r={radius}\n            stroke={getProgressColor()}\n            strokeWidth=\"2\"\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n            strokeDashoffset={strokeDashoffset}\n            className=\"transition-all duration-500 ease-in-out\"\n            strokeLinecap=\"round\"\n          />\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-slate-300\">\n            {Math.round(progress)}%\n          </span>\n        </div>\n      </div>\n    );\n  };\n\n  const HelpTooltip = ({ step, isVisible, onClose }) => {\n    if (!isVisible) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 10, scale: 0.95 }}\n        animate={{ opacity: 1, y: 0, scale: 1 }}\n        exit={{ opacity: 0, y: 10, scale: 0.95 }}\n        className=\"absolute top-full left-0 mt-2 w-80 bg-slate-800 border border-slate-600 rounded-lg p-4 shadow-xl z-50\"\n      >\n        <div className=\"flex items-center gap-2 mb-3\">\n          <HelpCircle size={16} className=\"text-blue-400\" />\n          <h4 className=\"font-medium text-white\">{step.helpContent.title}</h4>\n        </div>\n        <p className=\"text-sm text-slate-300 mb-3\">{step.description}</p>\n        <ul className=\"space-y-2\">\n          {step.helpContent.items.map((item, index) => (\n            <li key={index} className=\"flex items-start gap-2 text-sm text-slate-400\">\n              <ChevronRight size={14} className=\"text-blue-400 mt-0.5 flex-shrink-0\" />\n              <span>{item}</span>\n            </li>\n          ))}\n        </ul>\n        <button\n          onClick={onClose}\n          className=\"absolute top-2 right-2 text-slate-400 hover:text-white transition-colors\"\n        >\n          ×\n        </button>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Progress Overview */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 bg-blue-500/10 rounded-lg\">\n            <TrendingUp size={20} className=\"text-blue-400\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-white\">Analysis Workflow</h3>\n            <p className=\"text-sm text-slate-400\">Follow these steps to complete your analysis</p>\n          </div>\n        </div>\n        \n        {/* Overall Progress */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm font-medium text-slate-300\">Overall Progress</div>\n            <div className=\"text-xs text-slate-400\">\n              {Math.round((dataCompleteness + modelingProgress + analysisProgress) / 3)}% Complete\n            </div>\n          </div>\n          <div className=\"w-16 h-2 bg-slate-700 rounded-full overflow-hidden\">\n            <motion.div\n              className=\"h-full bg-gradient-to-r from-blue-500 to-emerald-500\"\n              initial={{ width: 0 }}\n              animate={{ \n                width: `${(dataCompleteness + modelingProgress + analysisProgress) / 3}%` \n              }}\n              transition={{ duration: 0.8, ease: 'easeOut' }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Step Navigation */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        {steps.map((step, index) => {\n          const status = getStepStatus(step.id);\n          const isActive = activeStep === step.id;\n          const isDisabled = status === 'disabled';\n          const hasErrors = validationErrors[step.id]?.length > 0;\n\n          return (\n            <div key={step.id} className=\"relative\">\n              <motion.button\n                onClick={() => !isDisabled && onStepChange(step.id)}\n                disabled={isDisabled}\n                className={`\n                  w-full p-4 rounded-xl border transition-all duration-200 text-left relative overflow-hidden\n                  ${isActive \n                    ? 'bg-blue-600 border-blue-500 shadow-lg shadow-blue-600/20' \n                    : getStatusBg(status, false)\n                  }\n                  ${!isDisabled && !isActive ? 'hover:border-slate-500 hover:bg-slate-700/40' : ''}\n                  ${isDisabled ? 'cursor-not-allowed opacity-60' : 'cursor-pointer'}\n                  ${hasErrors ? 'border-amber-400/40' : 'border-slate-600/30'}\n                `}\n                whileHover={!isDisabled && !isActive ? { scale: 1.02 } : {}}\n                whileTap={!isDisabled ? { scale: 0.98 } : {}}\n              >\n                {/* Step Number & Icon */}\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`\n                      flex items-center justify-center w-10 h-10 rounded-lg transition-all\n                      ${isActive \n                        ? 'bg-white/20' \n                        : status === 'completed' \n                        ? 'bg-emerald-500/20' \n                        : 'bg-slate-600/30'\n                      }\n                    `}>\n                      {renderStatusIcon(step, status, isActive)}\n                    </div>\n                    <div className=\"text-xs font-medium text-slate-400\">\n                      Step {index + 1}\n                    </div>\n                  </div>\n                  \n                  {step.progress > 0 && (\n                    <div className=\"flex-shrink-0\">\n                      {renderProgressRing(step.progress, status)}\n                    </div>\n                  )}\n                </div>\n\n                {/* Step Content */}\n                <div className=\"space-y-1\">\n                  <h4 className={`font-semibold ${\n                    isActive ? 'text-white' : getStatusColor(status)\n                  }`}>\n                    {step.title}\n                  </h4>\n                  <p className={`text-sm ${\n                    isActive ? 'text-blue-100' : 'text-slate-400'\n                  }`}>\n                    {step.subtitle}\n                  </p>\n                </div>\n\n                {/* Validation Errors */}\n                {hasErrors && (\n                  <div className=\"mt-2 text-xs text-amber-400\">\n                    {validationErrors[step.id].length} validation issue(s)\n                  </div>\n                )}\n\n                {/* Active Indicator */}\n                {isActive && (\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-white/30\"\n                    layoutId=\"activeIndicator\"\n                  />\n                )}\n              </motion.button>\n\n              {/* Help Button */}\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setShowHelpFor(showHelpFor === step.id ? null : step.id);\n                }}\n                className=\"absolute top-2 right-2 p-1.5 text-slate-400 hover:text-white transition-colors opacity-0 group-hover:opacity-100\"\n              >\n                <HelpCircle size={14} />\n              </button>\n\n              {/* Help Tooltip */}\n              <HelpTooltip\n                step={step}\n                isVisible={showHelpFor === step.id}\n                onClose={() => setShowHelpFor(null)}\n              />\n\n              {/* Connection Line */}\n              {index < steps.length - 1 && (\n                <div className=\"absolute top-1/2 -right-2 transform -translate-y-1/2 z-10\">\n                  <ChevronRight \n                    size={16} \n                    className={`\n                      ${getStepStatus(steps[index + 1].id) !== 'disabled' \n                        ? 'text-slate-400' \n                        : 'text-slate-600'\n                      }\n                    `} \n                  />\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"mt-6 grid grid-cols-3 gap-4\">\n        <div className=\"bg-slate-800/30 border border-slate-700/50 rounded-lg p-3\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <FileSpreadsheet size={14} className=\"text-slate-400\" />\n            <span className=\"text-xs font-medium text-slate-400\">Data Quality</span>\n          </div>\n          <div className=\"text-lg font-semibold text-white\">{dataCompleteness}%</div>\n        </div>\n        \n        <div className=\"bg-slate-800/30 border border-slate-700/50 rounded-lg p-3\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <Calculator size={14} className=\"text-slate-400\" />\n            <span className=\"text-xs font-medium text-slate-400\">Models Built</span>\n          </div>\n          <div className=\"text-lg font-semibold text-white\">{Math.round(modelingProgress)}%</div>\n        </div>\n        \n        <div className=\"bg-slate-800/30 border border-slate-700/50 rounded-lg p-3\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <BarChart3 size={14} className=\"text-slate-400\" />\n            <span className=\"text-xs font-medium text-slate-400\">Analysis Done</span>\n          </div>\n          <div className=\"text-lg font-semibold text-white\">{Math.round(analysisProgress)}%</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowNavigation;","import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Calculator, \n  Save, \n  Upload, \n  Download, \n  CheckCircle,\n  Activity,\n  FileText,\n  BarChart3,\n  AlertCircle,\n  Clock,\n  Database\n} from 'lucide-react';\nimport Header from '../components/ui/Header';\nimport Button from '../components/ui/Button';\nimport FinancialSpreadsheet from '../components/PrivateAnalysis/FinancialSpreadsheet';\nimport ModelingTools from '../components/PrivateAnalysis/ModelingTools';\nimport AnalysisResults from '../components/PrivateAnalysis/AnalysisResults';\nimport WorkflowNavigation from '../components/PrivateAnalysis/WorkflowNavigation';\nimport defaultFinancialData from '../data/defaultFinancialData';\nimport { formatCurrency, formatPercentage } from '../utils/dataTransformation';\n\nconst PrivateAnalysis = () => {\n  const [activeTab, setActiveTab] = useState('data');\n  const [financialData, setFinancialData] = useState(defaultFinancialData);\n  const [adjustedValues, setAdjustedValues] = useState({});\n  const [modelInputs, setModelInputs] = useState({\n    dcf: {\n      discountRate: 10,\n      terminalGrowthRate: 2.5,\n      projectionYears: 5,\n      taxRate: 25\n    },\n    scenario: {\n      scenarios: []\n    }\n  });\n\n  const [savedAnalyses, setSavedAnalyses] = useState(() => {\n    const saved = localStorage.getItem('privateAnalyses');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [dataStatus, setDataStatus] = useState('ready'); // ready, modified, saving, error\n  const [, setLastSaved] = useState(null);\n  \n  // Progress tracking for workflow navigation\n  const [modelingProgress, setModelingProgress] = useState(0);\n  const [analysisProgress, setAnalysisProgress] = useState(0);\n  const [validationErrors, setValidationErrors] = useState({});\n\n  // Enhanced data completeness tracking\n  const getDataCompleteness = () => {\n    if (!financialData.statements) return 0;\n    \n    const incomeFields = ['totalRevenue', 'totalCostOfGoodsSold', 'operatingIncome', 'netIncome'];\n    const balanceFields = ['totalAssets', 'totalLiabilities', 'totalEquity'];\n    const cashFlowFields = ['operatingCashFlow', 'investingCashFlow', 'financingCashFlow'];\n    \n    const allFields = [...incomeFields, ...balanceFields, ...cashFlowFields];\n    \n    let completedFields = 0;\n    \n    // Check income statement\n    incomeFields.forEach(field => {\n      if (financialData.statements.incomeStatement?.[field]?.[2] !== undefined) {\n        completedFields++;\n      }\n    });\n    \n    // Check balance sheet\n    balanceFields.forEach(field => {\n      if (financialData.statements.balanceSheet?.[field]?.[2] !== undefined) {\n        completedFields++;\n      }\n    });\n    \n    // Check cash flow statement\n    cashFlowFields.forEach(field => {\n      if (financialData.statements.cashFlowStatement?.[field]?.[2] !== undefined) {\n        completedFields++;\n      }\n    });\n    \n    return Math.round((completedFields / allFields.length) * 100);\n  };\n\n  // Calculate modeling progress based on configured models and assumptions\n  const calculateModelingProgress = () => {\n    let progress = 0;\n    \n    // DCF Model completion\n    if (modelInputs.dcf.discountRate && modelInputs.dcf.terminalGrowthRate) {\n      progress += 40;\n    }\n    \n    // Scenario analysis completion\n    if (modelInputs.scenario.scenarios && modelInputs.scenario.scenarios.length > 0) {\n      progress += 30;\n    }\n    \n    // Adjusted values completion\n    if (adjustedValues && Object.keys(adjustedValues).length > 0) {\n      progress += 30;\n    }\n    \n    return Math.min(progress, 100);\n  };\n\n  // Calculate analysis progress based on generated results\n  const calculateAnalysisProgress = () => {\n    let progress = 0;\n    \n    // Basic progress based on data and modeling completion\n    const dataComplete = getDataCompleteness();\n    const modelingComplete = calculateModelingProgress();\n    \n    if (dataComplete > 50 && modelingComplete > 30) {\n      progress = 60; // Base analysis available\n    }\n    \n    if (dataComplete > 80 && modelingComplete > 60) {\n      progress = 100; // Complete analysis available\n    }\n    \n    return progress;\n  };\n\n  const saveAnalysis = async (name) => {\n    if (!name) return;\n    \n    setIsLoading(true);\n    setDataStatus('saving');\n    \n    try {\n      const analysis = {\n        id: Date.now(),\n        name,\n        data: financialData,\n        adjustedValues,\n        modelInputs,\n        completeness: getDataCompleteness(),\n        createdAt: new Date().toISOString(),\n        lastModified: new Date().toISOString()\n      };\n      \n      const updated = [...savedAnalyses, analysis];\n      setSavedAnalyses(updated);\n      localStorage.setItem('privateAnalyses', JSON.stringify(updated));\n      \n      setDataStatus('ready');\n      setLastSaved(new Date());\n    } catch (error) {\n      setDataStatus('error');\n      console.error('Save failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadAnalysis = (analysisId) => {\n    const analysis = savedAnalyses.find(a => a.id === analysisId);\n    if (analysis) {\n      setFinancialData(analysis.data);\n      setAdjustedValues(analysis.adjustedValues || {});\n      setModelInputs(analysis.modelInputs || modelInputs);\n      setDataStatus('ready');\n    }\n  };\n\n  const deleteAnalysis = (analysisId) => {\n    const updated = savedAnalyses.filter(a => a.id !== analysisId);\n    setSavedAnalyses(updated);\n    localStorage.setItem('privateAnalyses', JSON.stringify(updated));\n  };\n\n  // Map activeTab values to new workflow step IDs\n  const mapTabToStep = (tab) => {\n    switch (tab) {\n      case 'data':\n      case 'spreadsheet':\n        return 'data';\n      case 'modeling':\n        return 'modeling';\n      case 'analysis':\n        return 'analysis';\n      default:\n        return 'data';\n    }\n  };\n\n  const handleStepChange = (stepId) => {\n    // Map new step IDs back to tab values for compatibility\n    switch (stepId) {\n      case 'data':\n        setActiveTab('spreadsheet');\n        break;\n      case 'modeling':\n        setActiveTab('modeling');\n        break;\n      case 'analysis':\n        setActiveTab('analysis');\n        break;\n      default:\n        setActiveTab('spreadsheet');\n    }\n  };\n\n  const handleSave = () => {\n    const name = prompt('Enter analysis name:');\n    if (name) saveAnalysis(name);\n  };\n\n  const handleImport = () => {\n    // Import data logic - placeholder\n    console.log('Import functionality to be implemented');\n  };\n\n  const handleExport = () => {\n    // Export analysis logic - placeholder\n    console.log('Export functionality to be implemented');\n  };\n\n  // Validate data and track errors for workflow navigation\n  const validateWorkflowData = () => {\n    const errors = {};\n    \n    // Data validation\n    const dataErrors = [];\n    if (!financialData.statements) {\n      dataErrors.push('No financial statements found');\n    } else {\n      if (!financialData.statements.incomeStatement?.totalRevenue) {\n        dataErrors.push('Missing revenue data');\n      }\n      if (!financialData.statements.balanceSheet?.totalAssets) {\n        dataErrors.push('Missing balance sheet data');\n      }\n      if (!financialData.statements.cashFlowStatement?.operatingCashFlow) {\n        dataErrors.push('Missing cash flow data');\n      }\n    }\n    if (dataErrors.length > 0) errors.data = dataErrors;\n    \n    // Modeling validation\n    const modelingErrors = [];\n    if (!modelInputs.dcf.discountRate || modelInputs.dcf.discountRate <= 0) {\n      modelingErrors.push('Invalid discount rate');\n    }\n    if (!modelInputs.dcf.terminalGrowthRate || modelInputs.dcf.terminalGrowthRate < 0) {\n      modelingErrors.push('Invalid terminal growth rate');\n    }\n    if (modelingErrors.length > 0) errors.modeling = modelingErrors;\n    \n    // Analysis validation\n    const analysisErrors = [];\n    const dataComplete = getDataCompleteness();\n    const modelingComplete = calculateModelingProgress();\n    if (dataComplete < 50) {\n      analysisErrors.push('Insufficient data for analysis');\n    }\n    if (modelingComplete < 30) {\n      analysisErrors.push('Models not configured');\n    }\n    if (analysisErrors.length > 0) errors.analysis = analysisErrors;\n    \n    return errors;\n  };\n\n  // Track data modifications and update progress\n  useEffect(() => {\n    setDataStatus('modified');\n    setModelingProgress(calculateModelingProgress());\n    setAnalysisProgress(calculateAnalysisProgress());\n    setValidationErrors(validateWorkflowData());\n  }, [financialData, adjustedValues, modelInputs]);\n\n  // Status indicators\n  const StatusIndicator = ({ status, label }) => {\n    const statusConfig = {\n      ready: { color: 'text-green-400', bg: 'bg-green-400/10', icon: CheckCircle },\n      modified: { color: 'text-yellow-400', bg: 'bg-yellow-400/10', icon: Clock },\n      saving: { color: 'text-blue-400', bg: 'bg-blue-400/10', icon: Activity },\n      error: { color: 'text-red-400', bg: 'bg-red-400/10', icon: AlertCircle }\n    };\n    \n    const config = statusConfig[status] || statusConfig.ready;\n    const Icon = config.icon;\n    \n    return (\n      <div className={`flex items-center gap-2 px-3 py-1.5 rounded-full ${config.bg}`}>\n        <Icon size={14} className={config.color} />\n        <span className={`text-sm ${config.color}`}>{label}</span>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      <Header />\n      \n      {/* Main Workspace Container */}\n      <div className=\"flex flex-col h-screen pt-16\">\n        \n        {/* Enhanced Header Section */}\n        <div className=\"bg-slate-800/80 backdrop-blur-sm border-b border-slate-700/50\">\n          <div className=\"px-8 py-6\">\n            {/* Title Row */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-2 bg-blue-500/10 rounded-lg\">\n                  <FileText size={24} className=\"text-blue-400\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-semibold text-white\">Private Analysis</h1>\n                  <p className=\"text-sm text-slate-400 mt-1\">Professional financial modeling and valuation</p>\n                </div>\n              </div>\n              \n              {/* Status and Actions */}\n              <div className=\"flex items-center gap-4\">\n                <StatusIndicator \n                  status={dataStatus} \n                  label={\n                    dataStatus === 'ready' ? 'Data Ready' :\n                    dataStatus === 'modified' ? 'Unsaved Changes' :\n                    dataStatus === 'saving' ? 'Saving...' :\n                    'Error'\n                  } \n                />\n                \n                <div className=\"flex items-center gap-3\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleSave}\n                    disabled={isLoading}\n                    className=\"text-slate-300 hover:text-white border border-slate-600 hover:border-slate-500\"\n                  >\n                    <Save size={16} />\n                    Save\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleImport}\n                    className=\"text-slate-300 hover:text-white border border-slate-600 hover:border-slate-500\"\n                  >\n                    <Upload size={16} />\n                    Import\n                  </Button>\n                  <Button\n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={handleExport}\n                    className=\"text-slate-300 hover:text-white border border-slate-600 hover:border-slate-500\"\n                  >\n                    <Download size={16} />\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Enhanced Workflow Navigation */}\n            <WorkflowNavigation\n              activeStep={mapTabToStep(activeTab)}\n              onStepChange={handleStepChange}\n              dataCompleteness={getDataCompleteness()}\n              modelingProgress={modelingProgress}\n              analysisProgress={analysisProgress}\n              validationErrors={validationErrors}\n            />\n          </div>\n        </div>\n\n        {/* Saved Analyses Panel */}\n        <AnimatePresence>\n          {savedAnalyses.length > 0 && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"bg-slate-800/50 border-b border-slate-700/50 px-8 py-4\"\n            >\n              <div className=\"flex items-center gap-4 mb-3\">\n                <Database size={16} className=\"text-slate-400\" />\n                <h3 className=\"text-sm font-medium text-slate-300\">Recent Analyses</h3>\n              </div>\n              <div className=\"flex gap-3 flex-wrap\">\n                {savedAnalyses.slice(-5).map((analysis) => (\n                  <div key={analysis.id} className=\"flex items-center gap-2 px-3 py-2 bg-slate-700/50 rounded-lg border border-slate-600/50\">\n                    <button\n                      onClick={() => loadAnalysis(analysis.id)}\n                      className=\"text-slate-200 hover:text-white font-medium text-sm\"\n                    >\n                      {analysis.name}\n                    </button>\n                    <div className=\"w-px h-4 bg-slate-600\" />\n                    <button\n                      onClick={() => deleteAnalysis(analysis.id)}\n                      className=\"text-slate-400 hover:text-red-400 transition-colors\"\n                    >\n                      ×\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 bg-slate-900 overflow-hidden\">\n          <motion.div\n            key={activeTab}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.2, ease: 'easeOut' }}\n            className=\"h-full\"\n          >\n            {activeTab === 'spreadsheet' && (\n              <FinancialSpreadsheet\n                data={financialData}\n                onDataChange={setFinancialData}\n                onAdjustedValuesChange={setAdjustedValues}\n              />\n            )}\n            \n            {activeTab === 'modeling' && (\n              <ModelingTools\n                data={financialData}\n                adjustedValues={adjustedValues}\n                onDataChange={setFinancialData}\n              />\n            )}\n            \n            {activeTab === 'analysis' && (\n              <AnalysisResults\n                data={financialData}\n                adjustedValues={adjustedValues}\n                modelInputs={modelInputs}\n                calculateDCF={null}\n                formatCurrency={formatCurrency}\n                formatPercentage={formatPercentage}\n              />\n            )}\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrivateAnalysis;\n"],"names":["monteCarloEngine","constructor","this","workers","isRunning","currentSimulation","runDCFSimulation","baseInputs","distributions","options","iterations","confidenceLevel","correlationMatrix","randomSeed","apiLogger","log","variables","Object","keys","length","startTime","Date","now","setSeed","samples","generateCorrelatedSamples","results","progressCallback","onProgress","i","Error","scenarioInputs","createScenarioInputs","dcfResult","calculateDCFScenario","push","iteration","pricePerShare","enterpriseValue","upside","inputs","Math","floor","analysis","analyzeResults","endTime","duration","meanPrice","statistics","mean","type","timestamp","toISOString","parameters","error","message","runLBOSimulation","lboResult","calculateLBOScenario","irr","moic","totalReturn","meanIRR","numVars","independentSamples","sample","forEach","variable","dist","sampleFromDistribution","choleskyMatrix","choleskyDecomposition","correlatedSample","independentValues","map","v","correlatedValues","applyCorrelation","index","distribution","normalRandom","stdDev","normalSample","mu","sigma","exp","min","random","max","triangularRandom","mode","betaRandom","alpha","beta","exponentialRandom","lambda","weibullRandom","shape","scale","paretoRandom","studentTRandom","df","chiSquaredRandom","u","pow","normal","chiSq","sqrt","gammaRandom","undefined","spareNormal","spare","u1","u2","z0","cos","PI","z1","sin","x","d","c","matrix","n","L","Array","fill","j","sum","k","entries","applyTo","currentRevenue","revenueGrowthRate","fcfMargin","wacc","terminalGrowthRate","sharesOutstanding","currentPrice","totalPV","revenue","year","ebitda","ebitdaGrowthRate","exitMultiple","debtMultiple","holdingPeriod","debt","equity","exitProceeds","metrics","percentiles","confidenceIntervals","riskMetrics","distributionTests","correlations","metric","values","r","filter","isNaN","sort","a","b","reduce","variance","sampleStdDev","median","percentile","calculateMode","range","count","trimmedMean","calculateTrimmedMean","mad","calculateMAD","iqr","p1","p5","p10","p25","p50","p75","p90","p95","p99","lowerBound","upperBound","level","width","bootstrapCI","calculateBootstrapCI","var95","var99","cvar95","slice","cvar99","skewness","calculateSkewness","kurtosis","calculateKurtosis","excessKurtosis","expectedShortfall","maxDrawdown","calculateMaxDrawdown","sharpeRatio","calculateSharpeRatio","sortinoRatio","calculateSortinoRatio","jarqueBera","jarqueBeraTest","kolmogorovSmirnov","ksTestNormality","shapiroWilk","shapiroWilkTest","calculateCorrelationMatrix","frequency","rounded","round","maxFreq","modes","parseFloat","sortedValues","trimProportion","trimCount","trimmedValues","deviations","abs","bootstrapSamples","bootstrapMeans","peak","value","drawdown","riskFreeRate","targetReturn","excessReturns","negativeReturns","Infinity","downsideDeviation","meanExcessReturn","jb","pValue","chiSquaredCDF","statistic","isNormal","incompleteGamma","term","logGamma","coef","ser","xx","y","tmp","maxD","empirical","theoretical","normalCDF","critical","erf","sign","t","denominator","w","valuesI","valuesJ","calculateCorrelation","meanX","meanY","numerator","sumXX","sumYY","dx","dy","p","lower","upper","ceil","weight","seed","stopSimulation","isSimulationRunning","FinancialSpreadsheet","data","onDataChange","onAdjustedValuesChange","activeStatement","setActiveStatement","useState","adjustedValues","setAdjustedValues","expandedSections","setExpandedSections","costOfGoodsSold","operatingExpenses","salariesBenefits","grossProfit","operatingIncome","incomeBeforeTax","otherIncomeExpense","currentAssets","nonCurrentAssets","currentLiabilities","nonCurrentLiabilities","operatingActivities","investingActivities","financingActivities","editingCell","setEditingCell","cellValue","setCellValue","inputRef","useRef","useEffect","statements","incomeStatement","newAdjustedValues","key","incomeStatementTemplate","title","color","headerBg","textColor","items","label","bold","formula","balanceSheetTemplate","totalAssets","totalLiabilities","totalLiabilitiesEquity","cashFlowTemplate","netCashFlow","currentTemplate","getCurrentTemplate","handleCellClick","rowKey","periodIndex","isAdjusted","currentValue","toString","handleCellBlur","newValue","newData","handleKeyPress","e","preventDefault","validateNumericInput","test","formatNumber","numValue","absValue","formattedValue","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","current","focus","select","jsxs","className","children","jsx","TrendingUp","onClick","newPeriodLabel","prompt","periods","Plus","size","onChange","target","FileText","period","Calculator","sectionKey","section","React","Fragment","colSpan","prev","toggleSection","ChevronDown","ChevronRight","stopPropagation","addNewRow","item","indentClass","textWeight","rowBg","borderColor","_","Edit2","ref","onBlur","onKeyDown","placeholder","renderRow","ScenarioModeling","modelInputs","onModelInputChange","calculateDCF","formatCurrency","formatPercent","showAddForm","setShowAddForm","scenarios","scenario","scenarioResults","useMemo","baseRevenue","totalRevenue","modifiedRevenue","parseInt","growthRate","revenueGrowth","baseOperating","modifiedOperating","baseRevenueValue","scenarioRevenue","baseIncome","adjustedMargin","marginImprovement","scenarioData","weightedValue","probability","equityValue","weightedAverageValue","result","updateScenario","field","updatedScenarios","ScenarioForm","name","step","deleteScenario","Trash2","newScenario","s","BarChart3","motion","div","whileHover","TrendingDown","Minus","SensitivityAnalysis","selectedVariable","setSelectedVariable","sensitivityConfig","sensitivity","ranges","grossMargin","discountRate","variableDefinitions","unit","description","baseValue","isPercentage","dcf","taxRate","baseValuation","sensitivityResults","variableDef","stepSize","dataPoints","modifiedData","dcfInputs","originalIncome","dcfParams","projectionYears","operatingIncomeData","operatingIncomes","periodKey","presentValue","discountFactor","income","pv","lastYearIncome","terminalValue","presentTerminalValue","presentValueOperations","presentValueTerminal","tempCalculateDCF","valuation","changeFromBase","definition","tornadoData","maxImpact","positiveImpact","negativeImpact","updateSensitivityRange","updatedRanges","Activity","Settings","toFixed","style","transform","variableName","updatedVariables","removed","removeVariable","point","height","minHeight","includes","addVariable","DataVisualization","dcfData","sensitivityData","activeChart","setActiveChart","showDetails","setShowDetails","chartTypes","id","icon","category","PieChartIcon","dcfWaterfallData","years","cumulativeValue","startValue","cumulative","start","freeCashFlow","terminalStart","cashFlowTrendData","workingCapitalChange","capex","sensitivityTornadoData","maxUpside","maxDownside","downside","scenarioDistributionData","CustomTooltip","active","payload","chartType","entry","dataKey","DCFWaterfallChart","ResponsiveContainer","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","tickFormatter","Tooltip","content","Bar","CashFlowTrendChart","LineChart","Legend","Line","stroke","strokeWidth","SensitivityTornadoChart","layout","formatter","labelFormatter","ScenarioDistributionChart","PieChart","Pie","cx","cy","outerRadius","Cell","ValuationBridgeChart","bridgeData","cumulativePV","EyeOff","Eye","chart","Icon","button","whileTap","find","freeCashFlows","join","WACCCalculator","activeTab","setActiveTab","waccInputs","marketRiskPremium","smallCompanyPremium","companySpecificRisk","debtInterestRate","marketValueEquity","marketValueDebt","buildUpMethod","equityRiskPremium","sizeRiskPremium","industryRiskPremium","industryWACC","industryBeta","industryDebtEquityRatio","waccCalculation","costOfEquityCAPM","costOfEquityBuildUp","costOfDebtAfterTax","totalCapital","equityWeight","debtWeight","waccCAPM","waccBuildUp","finalWACC","debtToEquityRatio","updateWACCInput","updatedWACC","tabs","applyWACCToDCF","waccValue","Percent","DollarSign","Info","tab","BookOpen","AdvancedDCF","showAssumptions","setShowAssumptions","advancedDCFResults","workingCapitalAssumptions","workingCapital","receivablesDays","inventoryDays","payablesDays","capexAssumptions","capexAsPercentOfRevenue","depreciationRate","presentValues","workingCapitalChanges","capexAmounts","unleveredFreeCashFlow","impliedShare","yearData","nopat","depreciation","previousRevenue","currentReceivables","currentInventory","currentPayables","receivablesChange","inventoryChange","payablesChange","terminalFCF","terminalDiscountFactor","updateDCFAssumption","updatedDCF","updateBasicAssumption","charAt","toUpperCase","ComparableAnalysis","selectedMultiple","setSelectedMultiple","showAddComp","setShowAddComp","comparableCompanies","setComparableCompanies","ticker","marketCap","netIncome","employees","founded","geography","businessModel","comparableMultiples","comp","multiples","ev_revenue","ev_ebitda","pe_ratio","revenue_per_employee","market_cap_revenue","marketStats","calculateStats","m","impliedValuation","targetRevenue","targetEBITDA","targetNetIncome","multipleDefinitions","Target","Users","def","stats","multiple","Search","Filter","removeComparable","onSubmit","formData","FormData","companyData","newCompany","getFullYear","addComparableCompany","fromEntries","required","MonteCarloSimulation","simulationResults","setSimulationResults","setIsRunning","progress","setProgress","simulationSettings","setSimulationSettings","enableCorrelation","setDistributions","enabled","setCorrelationMatrix","distributionTypes","runSimulation","useCallback","async","enabledDistributions","updateDistribution","updates","updateCorrelation","newMatrix","row","generateHistogramData","binWidth","histogram","bin","binIndex","bins","generateScatterData","currency","initial","opacity","animate","Zap","AnimatePresence","exit","transition","checked","newType","newParameters","param","styles","correlationSection","correlationLabel","disabled","correlationInput","runContainer","runHeader","Square","every","Play","previewGrid","previewCard","previewLabel","previewValue","toLocaleString","resultsContainer","resultsHeader","resultsActions","secondary","Download","tertiary","statisticsGrid","statisticCard","statValue","statDetails","chartsSection","chartCard","AreaChart","Area","fillOpacity","ScatterChart","Scatter","noResults","AlertTriangle","analysisContainer","riskMetricsSection","riskMetricsGrid","risks","riskCard","riskMetric","var","cvar","confidenceIntervalsSection","intervalsGrid","interval","intervalCard","intervalRange","intervalBound","intervalWidth","percentilesSection","percentilesTable","ModelingTools","activeModel","setActiveModel","setModelInputs","terminalValueMultiple","receivablesGrowth","inventoryGrowth","payablesGrowth","maintenanceCapex","ratios","compareToIndustry","industryAverages","operatingMargin","netMargin","currentRatio","debtToEquity","calculatedMetrics","margins","gross","operating","net","growth","isLatestPeriod","totalCOGS","totalCostOfGoodsSold","prevRevenue","prevOperating","inputData","sourceData","sharePrice","modelTypes","updateModelInput","modelType","createElement","AnalysisResults","formatPercentage","latest","previous","earliest","revenueLatest","revenuePrevious","revenueEarliest","grossProfitLatest","grossProfitPrevious","operatingIncomeLatest","operatingIncomePrevious","revenueGrowthYoY","revenueCAGR","grossMarginLatest","operatingMarginLatest","operatingMarginChange","dcfResults","revenueBreakdown","energyDevices","injectables","wellness","weightloss","retailSales","surgery","kpis","trend","cagr","profitability","grossMarginChange","MetricCard","kpi","percentage","CheckCircle","WorkflowNavigation","activeStep","onStepChange","dataCompleteness","modelingProgress","analysisProgress","validationErrors","showHelpFor","setShowHelpFor","getStepStatus","stepId","steps","subtitle","Database","validationFields","helpContent","getStatusColor","status","getStatusBg","isActive","renderStatusIcon","Clock","renderProgressRing","circumference","strokeDashoffset","viewBox","strokeLinecap","HelpTooltip","isVisible","onClose","HelpCircle","ease","isDisabled","hasErrors","layoutId","FileSpreadsheet","PrivateAnalysis","financialData","setFinancialData","defaultFinancialData","savedAnalyses","setSavedAnalyses","saved","localStorage","getItem","JSON","parse","isLoading","setIsLoading","dataStatus","setDataStatus","setLastSaved","setModelingProgress","setAnalysisProgress","setValidationErrors","getDataCompleteness","incomeFields","balanceFields","cashFlowFields","allFields","completedFields","balanceSheet","cashFlowStatement","calculateModelingProgress","dataComplete","modelingComplete","calculateAnalysisProgress","errors","dataErrors","operatingCashFlow","modelingErrors","modeling","analysisErrors","validateWorkflowData","StatusIndicator","statusConfig","ready","bg","modified","saving","AlertCircle","config","Header","Button","variant","completeness","createdAt","lastModified","updated","setItem","stringify","Save","Upload","mapTabToStep","analysisId","loadAnalysis","deleteAnalysis"],"mappings":"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"}
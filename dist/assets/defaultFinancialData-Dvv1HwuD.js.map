{"version":3,"file":"defaultFinancialData-Dvv1HwuD.js","sources":["../../src/utils/dataTransformation.js","../../src/data/defaultFinancialData.js"],"sourcesContent":["// Data transformation utilities for financial calculations\n\nexport const formatCurrency = (value, currency = 'USD', compact = false) => {\n  if (value === null || value === undefined || isNaN(value)) return 'N/A';\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    notation: compact ? 'compact' : 'standard',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  });\n\n  return formatter.format(value);\n};\n\nexport const formatPercentage = (value, decimals = 1) => {\n  if (value === null || value === undefined || isNaN(value)) return 'N/A';\n  return `${(value * 100).toFixed(decimals)}%`;\n};\n\nexport const formatNumber = (value, decimals = 2, compact = false) => {\n  if (value === null || value === undefined || isNaN(value)) return 'N/A';\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    notation: compact ? 'compact' : 'standard',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: decimals\n  });\n\n  return formatter.format(value);\n};\n\nexport const calculateCAGR = (beginningValue, endingValue, years) => {\n  if (beginningValue <= 0 || endingValue <= 0 || years <= 0) return 0;\n  return Math.pow(endingValue / beginningValue, 1 / years) - 1;\n};\n\nexport const calculateNPV = (cashFlows, discountRate) => {\n  return cashFlows.reduce((npv, cashFlow, index) => {\n    return npv + cashFlow / Math.pow(1 + discountRate, index + 1);\n  }, 0);\n};\n\nexport const calculateIRR = (cashFlows, guess = 0.1) => {\n  // Handle edge cases\n  if (!cashFlows || cashFlows.length === 0 || cashFlows.length === 1) {\n    return 0;\n  }\n\n  const maxIterations = 100;\n  const tolerance = 1e-6;\n\n  let rate = guess;\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = cashFlows[0]; // Initial investment (negative)\n    let derivative = 0;\n\n    for (let j = 1; j < cashFlows.length; j++) {\n      const factor = Math.pow(1 + rate, j);\n      npv += cashFlows[j] / factor;\n      derivative -= (j * cashFlows[j]) / (factor * (1 + rate));\n    }\n\n    if (Math.abs(npv) < tolerance) {\n      return rate;\n    }\n\n    if (Math.abs(derivative) < tolerance) {\n      break; // Avoid division by zero\n    }\n\n    rate = rate - npv / derivative;\n  }\n\n  return rate;\n};\n\nexport const calculateWACC = (costOfEquity, costOfDebt, taxRate, debtRatio) => {\n  const equityWeight = 1 - debtRatio;\n  return costOfEquity * equityWeight + costOfDebt * debtRatio * (1 - taxRate);\n};\n\nexport const calculateTerminalValue = (finalCashFlow, terminalGrowthRate, discountRate) => {\n  return (finalCashFlow * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n};\n\nexport const projectCashFlows = (baseCashFlow, growthRates, years = 5) => {\n  const cashFlows = [];\n  let currentCashFlow = baseCashFlow;\n\n  for (let i = 0; i < years; i++) {\n    const growthRate = Array.isArray(growthRates)\n      ? growthRates[i] || growthRates[growthRates.length - 1]\n      : growthRates;\n    currentCashFlow *= 1 + growthRate;\n    cashFlows.push(currentCashFlow);\n  }\n\n  return cashFlows;\n};\n\nexport const calculateDCFValuation = inputs => {\n  const {\n    currentRevenue,\n    revenueGrowthRate,\n    fcfMargin,\n    wacc,\n    terminalGrowthRate,\n    sharesOutstanding,\n    totalDebt,\n    cash,\n    projectionYears = 5\n  } = inputs;\n\n  // Project revenues\n  const projectedRevenues = projectCashFlows(currentRevenue, revenueGrowthRate, projectionYears);\n\n  // Calculate free cash flows\n  const projectedFCFs = projectedRevenues.map(revenue => revenue * fcfMargin);\n\n  // Calculate terminal value\n  const terminalValue = calculateTerminalValue(\n    projectedFCFs[projectedFCFs.length - 1],\n    terminalGrowthRate,\n    wacc\n  );\n\n  // Calculate present values\n  const pvOfCashFlows = calculateNPV(projectedFCFs, wacc);\n  const pvOfTerminalValue = terminalValue / Math.pow(1 + wacc, projectionYears);\n\n  // Calculate enterprise and equity value\n  const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n  const equityValue = enterpriseValue - totalDebt + cash;\n  const pricePerShare = equityValue / sharesOutstanding;\n\n  return {\n    enterpriseValue,\n    equityValue,\n    pricePerShare,\n    pvOfCashFlows,\n    pvOfTerminalValue,\n    terminalValue,\n    projectedRevenues,\n    projectedFCFs,\n    wacc,\n    terminalGrowthRate\n  };\n};\n\nexport const calculateLBOReturns = inputs => {\n  const {\n    purchasePrice,\n    ebitda,\n    debtMultiple = 5,\n    exitMultiple,\n    exitYear = 5,\n    managementFeeRate = 0.02,\n    carriedInterestRate = 0.2\n  } = inputs;\n\n  // Calculate purchase structure\n  const totalDebt = ebitda * debtMultiple;\n  const equityInvestment = purchasePrice - totalDebt;\n\n  // Project EBITDA growth (simplified)\n  const ebitdaGrowthRate = 0.05; // 5% annual growth assumption\n  const exitEbitda = ebitda * Math.pow(1 + ebitdaGrowthRate, exitYear);\n\n  // Calculate exit value\n  const exitEnterpriseValue = exitEbitda * exitMultiple;\n  const remainingDebt = totalDebt * 0.5; // Assume 50% debt paydown\n  const exitEquityValue = exitEnterpriseValue - remainingDebt;\n\n  // Calculate returns\n  const totalReturn = exitEquityValue / equityInvestment;\n  const irr = Math.pow(totalReturn, 1 / exitYear) - 1;\n  const moic = totalReturn; // Multiple of Invested Capital\n\n  // Calculate fees (simplified)\n  const totalManagementFees = equityInvestment * managementFeeRate * exitYear;\n  const carriedInterest = Math.max(0, (exitEquityValue - equityInvestment) * carriedInterestRate);\n\n  return {\n    equityInvestment,\n    totalDebt,\n    exitEquityValue,\n    totalReturn,\n    irr,\n    moic,\n    exitEbitda,\n    exitEnterpriseValue,\n    managementFees: totalManagementFees,\n    carriedInterest,\n    netReturn: exitEquityValue - totalManagementFees - carriedInterest\n  };\n};\n\nexport const calculateComparableMetrics = (companyData, peerData) => {\n  const calculateStatistics = values => {\n    const validValues = values.filter(v => v !== null && v !== undefined && !isNaN(v));\n    if (validValues.length === 0) return { median: null, mean: null, min: null, max: null };\n\n    validValues.sort((a, b) => a - b);\n    const median =\n      validValues.length % 2 === 0\n        ? (validValues[validValues.length / 2 - 1] + validValues[validValues.length / 2]) / 2\n        : validValues[Math.floor(validValues.length / 2)];\n\n    const mean = validValues.reduce((sum, v) => sum + v, 0) / validValues.length;\n\n    return {\n      median,\n      mean,\n      min: Math.min(...validValues),\n      max: Math.max(...validValues),\n      count: validValues.length\n    };\n  };\n\n  const metrics = ['marketCap', 'peRatio', 'evToEbitda', 'priceToBook', 'debtToEquity'];\n  const peerStats = {};\n\n  metrics.forEach(metric => {\n    const peerValues = peerData.map(peer => peer[metric]);\n    peerStats[metric] = calculateStatistics(peerValues);\n  });\n\n  return {\n    company: companyData,\n    peerStatistics: peerStats,\n    relativeValuation: {\n      marketCapPercentile: calculatePercentile(\n        companyData.marketCap,\n        peerData.map(p => p.marketCap)\n      ),\n      peRatioRelative: companyData.peRatio / peerStats.peRatio.median,\n      evEbitdaRelative: companyData.evToEbitda / peerStats.evToEbitda.median,\n      priceToBookRelative: companyData.priceToBook / peerStats.priceToBook.median\n    }\n  };\n};\n\nexport const calculatePercentile = (value, dataset) => {\n  const validDataset = dataset.filter(v => v !== null && v !== undefined && !isNaN(v));\n  if (validDataset.length === 0 || value === null || value === undefined || isNaN(value))\n    return null;\n\n  validDataset.sort((a, b) => a - b);\n  const belowCount = validDataset.filter(v => v < value).length;\n  return belowCount / validDataset.length;\n};\n\nexport const generateMonteCarloScenarios = (baseInputs, variableRanges, iterations = 1000) => {\n  const scenarios = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const scenario = { ...baseInputs };\n\n    Object.keys(variableRanges).forEach(variable => {\n      const range = variableRanges[variable];\n      const randomValue = range.min + Math.random() * (range.max - range.min);\n      scenario[variable] = randomValue;\n    });\n\n    scenarios.push(scenario);\n  }\n\n  return scenarios;\n};\n\nexport const calculateSensitivityAnalysis = (\n  baseInputs,\n  sensitivityVariable,\n  range,\n  steps = 10\n) => {\n  const results = [];\n  const stepSize = (range.max - range.min) / (steps - 1);\n\n  for (let i = 0; i < steps; i++) {\n    const variableValue = range.min + stepSize * i;\n    const inputs = { ...baseInputs, [sensitivityVariable]: variableValue };\n\n    results.push({\n      [sensitivityVariable]: variableValue,\n      inputs\n    });\n  }\n\n  return results;\n};\n","// Auto-generated default financial data derived from spreadsheet_data.md\n// Periods represent December fiscal year-end values.\n// Values are in thousands of dollars (matching \"$ 000s\" from the spreadsheet).\n// Only Income Statement data is populated for now â€“ other statements can be filled in later.\n\nconst defaultFinancialData = {\n  periods: ['Dec-22', 'Dec-23', 'Dec-24'],\n  \n  // Enhanced medispa operational metrics for advanced analysis\n  operationalMetrics: {\n    squareFootage: 2500,\n    providers: 3,\n    scheduledHours: { 0: 6240, 1: 6240, 2: 6240 },\n    availableHours: { 0: 7800, 1: 7800, 2: 7800 },\n    utilization: { 0: 0.80, 1: 0.80, 2: 0.80 }\n  },\n\n  // Customer and treatment metrics for CLV analysis\n  customerMetrics: {\n    avgSpend: { 0: 625, 1: 640, 2: 650 },\n    treatmentsPerYear: { 0: 3.2, 1: 3.4, 2: 3.5 },\n    retentionRate: { 0: 0.68, 1: 0.70, 2: 0.72 },\n    newCustomers: { 0: 420, 1: 435, 2: 450 },\n    totalActiveCustomers: { 0: 5700, 1: 5650, 2: 5730 }\n  },\n\n  statements: {\n    incomeStatement: {\n      // ---- Revenue ----\n      energyDevices: { 0: 317.82, 1: 270.15, 2: 245.84 },\n      injectables: { 0: 1123.65, 1: 1044.99, 2: 930.04 },\n      wellness: { 0: 567.67, 1: 652.82, 2: 763.79 },\n      weightloss: { 0: 617.21, 1: 635.73, 2: 718.37 },\n      retailSales: { 0: 322.79, 1: 331.66, 2: 334.98 },\n      surgery: { 0: 617.23, 1: 685.12, 2: 733.08 },\n      totalRevenue: { 0: 3566.37, 1: 3620.47, 2: 3726.10 },\n\n      // ---- Cost of Goods Sold ----\n      energyDeviceSupplies: { 0: 22.25, 1: 14.14, 2: 23.73 },\n      injectablesCogs: { 0: 370.80, 1: 326.59, 2: 277.83 },\n      wellnessCogs: { 0: 188.24, 1: 204.20, 2: 268.78 },\n      weightlossCogs: { 0: 261.33, 1: 253.45, 2: 266.70 },\n      retailProducts: { 0: 157.91, 1: 169.91, 2: 129.70 },\n      surgicalSupplies: { 0: 77.15, 1: 103.45, 2: 136.35 },\n      totalCostOfGoodsSold: { 0: 1077.68, 1: 1071.74, 2: 1103.10 },\n\n      // ---- Gross Profit ----\n      grossProfit: { 0: 2488.69, 1: 2548.72, 2: 2623.00 },\n\n      // ---- Salaries & Benefits ----\n      employeeBenefits: { 0: 39.55, 1: 36.14, 2: 31.43 },\n      payroll: { 0: 1217.00, 1: 1112.00, 2: 967.00 },\n      payrollTaxes: { 0: 51.84, 1: 47.37, 2: 41.19 },\n      totalSalariesBenefits: { 0: 1308.40, 1: 1195.51, 2: 1039.62 },\n\n      // ---- Operating Expenses ----\n      marketing: { 0: 499.29, 1: 253.43, 2: 37.26 },\n      automobile: { 0: 21.25, 1: 21.50, 2: 21.76 },\n      creditCardBankCharges: { 0: 111.27, 1: 96.67, 2: 92.78 },\n      donations: { 0: 1.25, 1: 1.25, 2: 1.25 },\n      computerTelephoneUtilities: { 0: 92.73, 1: 78.93, 2: 92.41 },\n      depreciation: { 0: 167.14, 1: 150.43, 2: 135.38 },\n      duesSubscriptions: { 0: 39.94, 1: 40.55, 2: 41.73 },\n      education: { 0: 23.00, 1: 26.18, 2: 24.63 },\n      equipmentRental: { 0: 17.62, 1: 0, 2: 0 },\n      insurance: { 0: 44.22, 1: 44.89, 2: 46.20 },\n      interestExpense: { 0: 220.14, 1: 212.17, 2: 194.81 },\n      travelMealsEntertainment: { 0: 12.66, 1: 15.45, 2: 11.67 },\n      rent: { 0: 199.13, 1: 205.10, 2: 211.25 },\n      officeExpenses: { 0: 74.89, 1: 76.03, 2: 78.25 },\n      professionalFees: { 0: 35.66, 1: 36.20, 2: 37.26 },\n      repairsMaintenance: { 0: 164.05, 1: 43.45, 2: 44.71 },\n      localTax: { 0: 35.66, 1: 36.20, 2: 37.26 },\n      stateTax: { 0: 78.46, 1: 79.65, 2: 81.97 },\n      totalOperatingExpense: { 0: 1838.38, 1: 1418.07, 2: 1190.60 },\n\n      // ---- Operating Income ----\n      operatingIncome: { 0: -658.09, 1: -64.86, 2: 392.78 },\n\n      // ---- Other Income / Expense ----\n      gainOnAssetSale: { 0: 0, 1: 0, 2: 42.20 },\n      interestIncome: { 0: 4.89, 1: 0, 2: 9.46 },\n      otherExpenses: { 0: 0, 1: 6.13, 2: 5.33 },\n      totalOtherIncomeExpense: { 0: 4.89, 1: 6.13, 2: 56.99 },\n\n      // ---- Income Before Tax ----\n      incomeBeforeTax: { 0: -653.21, 1: -58.73, 2: 449.77 },\n\n      // ---- Net Income ----\n      netIncome: { 0: -653.21, 1: -58.73, 2: 449.77 }\n\n    },\n\n    // Placeholders for future Balance Sheet & Cash Flow data\n    balanceSheet: {\n      assets: {},\n      liabilities: {},\n      equity: {}\n    },\n    cashFlow: {\n      operating: {},\n      investing: {},\n      financing: {}\n    }\n  },\n\n  // Medispa-specific assumptions and adjustment factors\n  assumptions: {\n    marketingTarget: 0.10, // 10% of revenue for sustainable marketing\n    ownerCompensationAddback: 300.0, // $300K owner compensation normalization\n    industryBenchmarks: {\n      revenuePerSqFt: { min: 800, target: 1200, current: 1490.44 }, // $3.726M / 2500 sqft\n      revenuePerProvider: { min: 300, target: 400, current: 1242.03 }, // $3.726M / 3 providers\n      injectableMargin: { min: 0.75, target: 0.80, current: 0.70 }, // 70% vs 80% target\n      ebitdaMargin: { min: 0.20, target: 0.25, current: 0.185 }, // 18.5% vs 25% target\n      customerRetention: { min: 0.65, target: 0.75, current: 0.72 }\n    },\n    riskFactors: {\n      regulatoryRisk: 'Medium',\n      keyPersonDependency: 'High',\n      competitionDensity: 'Medium',\n      technologyObsolescence: 'Medium',\n      reimbursementRisk: 'Low'\n    }\n  },\n\n  // Financial modeling parameters\n  models: {\n    dcf: {\n      discountRate: 0.12, // 12% WACC for medispa business\n      terminalGrowthRate: 0.025, // 2.5% terminal growth\n      projectionYears: 5,\n      taxRate: 0.25\n    },\n    adjustments: {\n      2024: {\n        marketing: 372.61, // Normalized to 10% of revenue\n        ownerAddback: 300.0, // Replace owner draws with market compensation\n        adjustedOperatingIncome: 357.43,\n        adjustedEbitda: 687.63, // Operating Income + Depreciation + Interest\n        adjustmentRationale: [\n          \"Marketing normalized to sustainable 10% of revenue\",\n          \"Owner compensation replaced with market-rate management\",\n          \"EBITDA calculation includes depreciation and interest add-backs\",\n          \"One-time gains excluded from operating performance\"\n        ]\n      }\n    }\n  }\n};\n\nexport default defaultFinancialData;\n"],"names":["formatCurrency","value","currency","compact","isNaN","Intl","NumberFormat","style","notation","minimumFractionDigits","maximumFractionDigits","format","formatPercentage","decimals","toFixed","formatNumber","calculateDCFValuation","inputs","currentRevenue","revenueGrowthRate","fcfMargin","wacc","terminalGrowthRate","sharesOutstanding","totalDebt","cash","projectionYears","projectedRevenues","baseCashFlow","growthRates","years","cashFlows","currentCashFlow","i","Array","isArray","length","push","projectCashFlows","projectedFCFs","map","revenue","terminalValue","finalCashFlow","discountRate","calculateTerminalValue","pvOfCashFlows","reduce","npv","cashFlow","index","Math","pow","pvOfTerminalValue","enterpriseValue","equityValue","pricePerShare","calculateLBOReturns","purchasePrice","ebitda","debtMultiple","exitMultiple","exitYear","managementFeeRate","carriedInterestRate","equityInvestment","exitEbitda","exitEnterpriseValue","exitEquityValue","totalReturn","irr","moic","totalManagementFees","carriedInterest","max","managementFees","netReturn","calculateComparableMetrics","companyData","peerData","peerStats","forEach","metric","peerValues","peer","values","validValues","filter","v","median","mean","min","sort","a","b","floor","sum","count","calculateStatistics","company","peerStatistics","relativeValuation","marketCapPercentile","calculatePercentile","marketCap","p","peRatioRelative","peRatio","evEbitdaRelative","evToEbitda","priceToBookRelative","priceToBook","dataset","validDataset","defaultFinancialData","periods","operationalMetrics","squareFootage","providers","scheduledHours","availableHours","utilization","customerMetrics","avgSpend","treatmentsPerYear","retentionRate","newCustomers","totalActiveCustomers","statements","incomeStatement","energyDevices","injectables","wellness","weightloss","retailSales","surgery","totalRevenue","energyDeviceSupplies","injectablesCogs","wellnessCogs","weightlossCogs","retailProducts","surgicalSupplies","totalCostOfGoodsSold","grossProfit","employeeBenefits","payroll","payrollTaxes","totalSalariesBenefits","marketing","automobile","creditCardBankCharges","donations","computerTelephoneUtilities","depreciation","duesSubscriptions","education","equipmentRental","insurance","interestExpense","travelMealsEntertainment","rent","officeExpenses","professionalFees","repairsMaintenance","localTax","stateTax","totalOperatingExpense","operatingIncome","gainOnAssetSale","interestIncome","otherExpenses","totalOtherIncomeExpense","incomeBeforeTax","netIncome","balanceSheet","assets","liabilities","equity","operating","investing","financing","assumptions","marketingTarget","ownerCompensationAddback","industryBenchmarks","revenuePerSqFt","target","current","revenuePerProvider","injectableMargin","ebitdaMargin","customerRetention","riskFactors","regulatoryRisk","keyPersonDependency","competitionDensity","technologyObsolescence","reimbursementRisk","models","dcf","taxRate","adjustments","ownerAddback","adjustedOperatingIncome","adjustedEbitda","adjustmentRationale"],"mappings":"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"}
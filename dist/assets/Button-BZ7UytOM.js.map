{"version":3,"file":"Button-BZ7UytOM.js","sources":["../../node_modules/@radix-ui/react-compose-refs/dist/index.mjs","../../node_modules/@radix-ui/react-slot/dist/index.mjs","../../src/components/ui/Button.jsx"],"sourcesContent":["// packages/react/compose-refs/src/compose-refs.tsx\nimport * as React from \"react\";\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  } else if (ref !== null && ref !== void 0) {\n    ref.current = value;\n  }\n}\nfunction composeRefs(...refs) {\n  return (node) => {\n    let hasCleanup = false;\n    const cleanups = refs.map((ref) => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup == \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup == \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\nfunction useComposedRefs(...refs) {\n  return React.useCallback(composeRefs(...refs), refs);\n}\nexport {\n  composeRefs,\n  useComposedRefs\n};\n//# sourceMappingURL=index.mjs.map\n","// src/slot.tsx\nimport * as React from \"react\";\nimport { composeRefs } from \"@radix-ui/react-compose-refs\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\n// @__NO_SIDE_EFFECTS__\nfunction createSlot(ownerName) {\n  const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);\n  const Slot2 = React.forwardRef((props, forwardedRef) => {\n    const { children, ...slotProps } = props;\n    const childrenArray = React.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n    if (slottable) {\n      const newElement = slottable.props.children;\n      const newChildren = childrenArray.map((child) => {\n        if (child === slottable) {\n          if (React.Children.count(newElement) > 1) return React.Children.only(null);\n          return React.isValidElement(newElement) ? newElement.props.children : null;\n        } else {\n          return child;\n        }\n      });\n      return /* @__PURE__ */ jsx(SlotClone, { ...slotProps, ref: forwardedRef, children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null });\n    }\n    return /* @__PURE__ */ jsx(SlotClone, { ...slotProps, ref: forwardedRef, children });\n  });\n  Slot2.displayName = `${ownerName}.Slot`;\n  return Slot2;\n}\nvar Slot = /* @__PURE__ */ createSlot(\"Slot\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlotClone(ownerName) {\n  const SlotClone = React.forwardRef((props, forwardedRef) => {\n    const { children, ...slotProps } = props;\n    if (React.isValidElement(children)) {\n      const childrenRef = getElementRef(children);\n      const props2 = mergeProps(slotProps, children.props);\n      if (children.type !== React.Fragment) {\n        props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n      }\n      return React.cloneElement(children, props2);\n    }\n    return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n  });\n  SlotClone.displayName = `${ownerName}.SlotClone`;\n  return SlotClone;\n}\nvar SLOTTABLE_IDENTIFIER = Symbol(\"radix.slottable\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlottable(ownerName) {\n  const Slottable2 = ({ children }) => {\n    return /* @__PURE__ */ jsx(Fragment2, { children });\n  };\n  Slottable2.displayName = `${ownerName}.Slottable`;\n  Slottable2.__radixId = SLOTTABLE_IDENTIFIER;\n  return Slottable2;\n}\nvar Slottable = /* @__PURE__ */ createSlottable(\"Slottable\");\nfunction isSlottable(child) {\n  return React.isValidElement(child) && typeof child.type === \"function\" && \"__radixId\" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = { ...childProps };\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args) => {\n          const result = childPropValue(...args);\n          slotPropValue(...args);\n          return result;\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return { ...slotProps, ...overrideProps };\n}\nfunction getElementRef(element) {\n  let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\nexport {\n  Slot as Root,\n  Slot,\n  Slottable,\n  createSlot,\n  createSlottable\n};\n//# sourceMappingURL=index.mjs.map\n","import { Slot } from '@radix-ui/react-slot';\nimport { cva } from 'class-variance-authority';\nimport React from 'react';\n\nimport { cn } from '../../utils/cn';\nimport Icon from '../AppIcon';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        success: 'bg-success text-success-foreground hover:bg-success/90',\n        warning: 'bg-warning text-warning-foreground hover:bg-warning/90',\n        danger: 'bg-error text-error-foreground hover:bg-error/90'\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n        xs: 'h-8 rounded-md px-2 text-xs',\n        xl: 'h-12 rounded-md px-10 text-base'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default'\n    }\n  }\n);\n\nconst Button = React.forwardRef(\n  (\n    {\n      className,\n      variant,\n      size,\n      asChild = false,\n      children,\n      loading = false,\n      iconName = null,\n      iconPosition = 'left',\n      iconSize = null,\n      fullWidth = false,\n      disabled = false,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : 'button';\n\n    // Icon size mapping based on button size\n    const iconSizeMap = {\n      xs: 12,\n      sm: 14,\n      default: 16,\n      lg: 18,\n      xl: 20,\n      icon: 16\n    };\n\n    const calculatedIconSize = iconSize || iconSizeMap[size] || 16;\n\n    // Loading spinner\n    const LoadingSpinner = () => (\n      <svg\n        className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        data-loading=\"true\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          strokeWidth=\"4\"\n        />\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    );\n\n    // Icon rendering\n    const renderIcon = () => {\n      if (!iconName) return null;\n\n      return (\n        <Icon\n          name={iconName}\n          size={calculatedIconSize}\n          className={cn(\n            children && iconPosition === 'left' && 'mr-2',\n            children && iconPosition === 'right' && 'ml-2'\n          )}\n        />\n      );\n    };\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }), fullWidth && 'w-full')}\n        ref={ref}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading && <LoadingSpinner />}\n        {iconName && iconPosition === 'left' && renderIcon()}\n        {children}\n        {iconName && iconPosition === 'right' && renderIcon()}\n      </Comp>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport default Button;\n"],"names":["setRef","ref","value","current","createSlot","ownerName","SlotClone","createSlotClone","Slot2","React.forwardRef","props","forwardedRef","children","slotProps","childrenArray","React.Children","toArray","slottable","find","isSlottable","newElement","newChildren","map","child","count","only","React.isValidElement","jsx","React.cloneElement","displayName","Slot","childrenRef","element","getter","Object","getOwnPropertyDescriptor","get","mayWarn","isReactWarning","getElementRef","props2","childProps","overrideProps","propName","slotPropValue","childPropValue","test","args","result","filter","Boolean","join","mergeProps","type","React.Fragment","refs","node","hasCleanup","cleanups","cleanup","i","length","composeRefs","SLOTTABLE_IDENTIFIER","Symbol","__radixId","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","success","warning","danger","size","sm","lg","icon","xs","xl","defaultVariants","Button","React","forwardRef","className","asChild","loading","iconName","iconPosition","iconSize","fullWidth","disabled","Comp","calculatedIconSize","LoadingSpinner","jsxs","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","renderIcon","Icon","name","cn"],"mappings":"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","x_google_ignoreList":[0,1]}
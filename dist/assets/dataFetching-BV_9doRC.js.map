{"version":3,"file":"dataFetching-BV_9doRC.js","sources":["../../src/utils/apiKeyValidator.js","../../src/services/financialModelingEngine.js","../../src/services/dataFetching.js"],"sourcesContent":["// API Key Validation Utility\n// Validates API keys and provides helpful feedback for setup\n\nimport axios from 'axios';\n\nexport class ApiKeyValidator {\n  constructor() {\n    this.validationResults = new Map();\n    this.lastValidation = null;\n  }\n\n  /**\n   * Validate all configured API keys\n   * @returns {Promise<Object>} Validation results for all services\n   */\n  async validateAllKeys() {\n    const results = {\n      timestamp: new Date(),\n      overall: 'unknown',\n      services: {},\n      recommendations: []\n    };\n\n    // Get all API keys from environment\n    const apiKeys = {\n      alphaVantage: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY,\n      fmp: import.meta.env.VITE_FMP_API_KEY,\n      quandl: import.meta.env.VITE_QUANDL_API_KEY,\n      fred: import.meta.env.VITE_FRED_API_KEY\n    };\n\n    // Validate each service\n    const validationPromises = [\n      this.validateAlphaVantage(apiKeys.alphaVantage),\n      this.validateFMP(apiKeys.fmp),\n      this.validateQuandl(apiKeys.quandl),\n      this.validateFRED(apiKeys.fred)\n    ];\n\n    try {\n      const [alphaVantage, fmp, quandl, fred] = await Promise.allSettled(validationPromises);\n\n      results.services = {\n        alphaVantage: this.processValidationResult(alphaVantage),\n        fmp: this.processValidationResult(fmp),\n        quandl: this.processValidationResult(quandl),\n        fred: this.processValidationResult(fred)\n      };\n\n      // Determine overall status\n      const validServices = Object.values(results.services).filter(\n        s => s.status === 'valid'\n      ).length;\n      const configuredServices = Object.values(results.services).filter(\n        s => s.status !== 'missing'\n      ).length;\n      const totalServices = Object.keys(results.services).length;\n\n      if (validServices === 0) {\n        results.overall = 'demo';\n        results.recommendations.push(\n          'No valid API keys found. Running in demo mode with mock data.'\n        );\n        results.recommendations.push(\n          'Add at least one API key (Alpha Vantage or FMP recommended) for live data.'\n        );\n      } else if (validServices < configuredServices || configuredServices < totalServices) {\n        results.overall = 'partial';\n        results.recommendations.push(\n          `${validServices}/${configuredServices} configured API keys are valid. Some features may use demo data.`\n        );\n      } else {\n        results.overall = 'complete';\n        results.recommendations.push('All API keys are valid. Full functionality available.');\n      }\n\n      this.lastValidation = results;\n      return results;\n    } catch (error) {\n      results.overall = 'error';\n      results.error = error.message;\n      results.recommendations.push('Error validating API keys. Check your internet connection.');\n      return results;\n    }\n  }\n\n  /**\n   * Validate Alpha Vantage API key\n   */\n  async validateAlphaVantage(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://www.alphavantage.co/query', {\n        params: {\n          function: 'GLOBAL_QUOTE',\n          symbol: 'AAPL',\n          apikey: apiKey\n        },\n        timeout: 10000\n      });\n\n      if (response.data['Error Message']) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data['Note']) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n\n      if (response.data['Global Quote']) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Financial Modeling Prep API key\n   */\n  async validateFMP(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://financialmodelingprep.com/api/v3/profile/AAPL', {\n        params: { apikey: apiKey },\n        timeout: 10000\n      });\n\n      if (response.data.error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate Quandl API key\n   */\n  async validateQuandl(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://data.nasdaq.com/api/v3/datasets/WIKI/AAPL.json', {\n        params: { api_key: apiKey, rows: 1 },\n        timeout: 10000\n      });\n\n      if (response.data.quandl_error) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.dataset) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 401) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Validate FRED API key\n   */\n  async validateFRED(apiKey) {\n    if (!apiKey || apiKey === 'demo') {\n      return { status: 'missing', message: 'API key not configured' };\n    }\n\n    try {\n      const response = await axios.get('https://api.stlouisfed.org/fred/series', {\n        params: {\n          series_id: 'GDP',\n          api_key: apiKey,\n          file_type: 'json'\n        },\n        timeout: 10000\n      });\n\n      if (response.data.error_message) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n\n      if (response.data.seriess) {\n        return { status: 'valid', message: 'API key is valid and working' };\n      }\n\n      return { status: 'unknown', message: 'Unexpected response format' };\n    } catch (error) {\n      if (error.response?.status === 400) {\n        return { status: 'invalid', message: 'Invalid API key' };\n      }\n      if (error.response?.status === 429) {\n        return { status: 'rate_limited', message: 'API key valid but rate limited' };\n      }\n      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n        return { status: 'network_error', message: 'Network connection failed' };\n      }\n      return { status: 'error', message: error.message };\n    }\n  }\n\n  /**\n   * Process validation result from Promise.allSettled\n   */\n  processValidationResult(result) {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return { status: 'error', message: result.reason.message };\n    }\n  }\n\n  /**\n   * Get validation status for a specific service\n   */\n  getServiceStatus(serviceName) {\n    if (!this.lastValidation) {\n      return { status: 'unknown', message: 'Validation not run yet' };\n    }\n    return (\n      this.lastValidation.services[serviceName] || {\n        status: 'unknown',\n        message: 'Service not found'\n      }\n    );\n  }\n\n  /**\n   * Get overall validation status\n   */\n  getOverallStatus() {\n    if (!this.lastValidation) {\n      return 'unknown';\n    }\n    return this.lastValidation.overall;\n  }\n\n  /**\n   * Get recommendations for improving API setup\n   */\n  getRecommendations() {\n    if (!this.lastValidation) {\n      return ['Run API key validation first'];\n    }\n    return this.lastValidation.recommendations;\n  }\n\n  /**\n   * Check if demo mode should be used\n   */\n  shouldUseDemoMode() {\n    const status = this.getOverallStatus();\n    return status === 'demo' || status === 'unknown';\n  }\n}\n\n// Export singleton instance\nexport const apiKeyValidator = new ApiKeyValidator();\nexport default ApiKeyValidator;\n","import { apiLogger } from '../utils/apiLogger.js';\n\n/**\n * Advanced Financial Modeling Engine\n * Provides comprehensive DCF, LBO, and valuation modeling capabilities\n */\nclass FinancialModelingEngine {\n  constructor() {\n    this.modelCache = new Map();\n    this.assumptions = this.getDefaultAssumptions();\n  }\n\n  /**\n   * Get default financial modeling assumptions\n   */\n  getDefaultAssumptions() {\n    return {\n      dcf: {\n        projectionYears: 5,\n        terminalGrowthRate: 0.025,\n        riskFreeRate: 0.045,\n        marketPremium: 0.065,\n        taxRate: 0.21,\n        capexAsPercentOfRevenue: 0.03,\n        nwcAsPercentOfRevenue: 0.05,\n        depreciationAsPercentOfRevenue: 0.025,\n        // Enhanced DCF parameters\n        normalizedMarginTarget: null, // For margin normalization\n        cyclicalAdjustment: false,\n        industryBeta: 1.0,\n        sizeAdjustment: 0.0, // Small company premium\n        countryRiskPremium: 0.0,\n        liquidityDiscount: 0.0\n      },\n      lbo: {\n        holdingPeriod: 5,\n        debtMultiples: { senior: 4.0, subordinated: 1.5, total: 5.5 },\n        interestRates: { senior: 0.055, subordinated: 0.095 },\n        managementFeeRate: 0.02,\n        carriedInterestRate: 0.2,\n        ebitdaGrowthRate: 0.05,\n        debtPaydownRate: 0.5\n      },\n      monte_carlo: {\n        iterations: 10000,\n        confidenceIntervals: [0.05, 0.25, 0.5, 0.75, 0.95],\n        correlationMatrix: null\n      }\n    };\n  }\n\n  /**\n   * Build comprehensive DCF model with multiple scenarios\n   * @param {Object} inputs - DCF model inputs\n   * @param {Object} scenarios - Different scenario assumptions\n   * @returns {Object} Complete DCF analysis\n   */\n  buildDCFModel(inputs, scenarios = {}) {\n    const {\n      symbol,\n      companyName,\n      currentRevenue,\n      historicalGrowthRates = [],\n      margins = {},\n      balanceSheetData = {},\n      marketData = {},\n      assumptions = {}\n    } = inputs;\n\n    // Merge with default assumptions\n    const modelAssumptions = { ...this.assumptions.dcf, ...assumptions };\n\n    // Build base case scenario\n    const baseCase = this.calculateDCFScenario(inputs, modelAssumptions, 'Base Case');\n\n    // Build additional scenarios\n    const scenarioResults = {};\n\n    // Bull case: Higher growth, lower discount rate\n    if (scenarios.bull !== false) {\n      const bullAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 1.3,\n        terminalGrowthRate: Math.min(modelAssumptions.terminalGrowthRate * 1.2, 0.04),\n        wacc: (modelAssumptions.wacc || 0.1) * 0.9\n      };\n      scenarioResults.bull = this.calculateDCFScenario(inputs, bullAssumptions, 'Bull Case');\n    }\n\n    // Bear case: Lower growth, higher discount rate\n    if (scenarios.bear !== false) {\n      const bearAssumptions = {\n        ...modelAssumptions,\n        revenueGrowthRate: (modelAssumptions.revenueGrowthRate || 0.1) * 0.7,\n        terminalGrowthRate: Math.max(modelAssumptions.terminalGrowthRate * 0.8, 0.015),\n        wacc: (modelAssumptions.wacc || 0.1) * 1.1\n      };\n      scenarioResults.bear = this.calculateDCFScenario(inputs, bearAssumptions, 'Bear Case');\n    }\n\n    // Calculate sensitivity analysis\n    const sensitivityAnalysis = this.performDCFSensitivityAnalysis(inputs, modelAssumptions);\n\n    return {\n      symbol,\n      companyName,\n      modelType: 'DCF',\n      timestamp: new Date().toISOString(),\n      baseCase,\n      scenarios: scenarioResults,\n      sensitivityAnalysis,\n      assumptions: modelAssumptions,\n      summary: this.generateDCFSummary(baseCase, scenarioResults, inputs.currentPrice)\n    };\n  }\n\n  /**\n   * Calculate DCF for a specific scenario\n   * @param {Object} inputs - Model inputs\n   * @param {Object} assumptions - Scenario assumptions\n   * @param {string} scenarioName - Name of the scenario\n   * @returns {Object} DCF calculation results\n   */\n  calculateDCFScenario(inputs, assumptions, scenarioName) {\n    const {\n      currentRevenue,\n      currentPrice,\n      sharesOutstanding,\n      totalDebt = 0,\n      cash = 0\n    } = inputs;\n\n    // Project revenues\n    const revenueProjections = this.projectRevenues(\n      currentRevenue,\n      assumptions.revenueGrowthRate || 0.1,\n      assumptions.projectionYears\n    );\n\n    // Project operating metrics\n    const operatingProjections = this.projectOperatingMetrics(\n      revenueProjections,\n      assumptions\n    );\n\n    // Calculate free cash flows\n    const fcfProjections = this.calculateFreeCashFlows(\n      operatingProjections,\n      assumptions\n    );\n\n    // Calculate terminal value\n    const terminalValue = this.calculateTerminalValue(\n      fcfProjections[fcfProjections.length - 1],\n      assumptions.terminalGrowthRate,\n      assumptions.wacc\n    );\n\n    // Calculate present values\n    const pvOfCashFlows = this.calculatePresentValue(fcfProjections, assumptions.wacc);\n    const pvOfTerminalValue = this.calculatePresentValue([terminalValue], assumptions.wacc, assumptions.projectionYears);\n\n    // Calculate enterprise and equity values\n    const enterpriseValue = pvOfCashFlows + pvOfTerminalValue;\n    const equityValue = enterpriseValue - totalDebt + cash;\n    const pricePerShare = equityValue / sharesOutstanding;\n\n    // Calculate valuation metrics\n    const upside = currentPrice ? ((pricePerShare - currentPrice) / currentPrice) * 100 : null;\n\n    return {\n      scenarioName,\n      revenueProjections,\n      operatingProjections,\n      fcfProjections,\n      terminalValue,\n      pvOfCashFlows,\n      pvOfTerminalValue,\n      enterpriseValue,\n      equityValue,\n      pricePerShare,\n      currentPrice,\n      upside,\n      wacc: assumptions.wacc,\n      terminalGrowthRate: assumptions.terminalGrowthRate,\n      impliedMultiples: this.calculateImpliedMultiples(enterpriseValue, operatingProjections)\n    };\n  }\n\n  /**\n   * Project revenue growth over multiple years\n   * @param {number} baseRevenue - Starting revenue\n   * @param {number|Array} growthRates - Growth rate(s)\n   * @param {number} years - Number of years to project\n   * @returns {Array} Revenue projections\n   */\n  projectRevenues(baseRevenue, growthRates, years) {\n    const projections = [];\n    let currentRevenue = baseRevenue;\n\n    for (let i = 0; i < years; i++) {\n      const growthRate = Array.isArray(growthRates)\n        ? growthRates[i] || growthRates[growthRates.length - 1]\n        : growthRates * Math.pow(0.95, i); // Declining growth rate\n\n      currentRevenue *= (1 + growthRate);\n      projections.push({\n        year: i + 1,\n        revenue: currentRevenue,\n        growthRate\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Project operating metrics (EBITDA, margins, etc.)\n   * @param {Array} revenueProjections - Revenue projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Operating projections\n   */\n  projectOperatingMetrics(revenueProjections, assumptions) {\n    return revenueProjections.map((projection, index) => {\n      const ebitdaMargin = assumptions.ebitdaMargin || 0.2;\n      const ebitda = projection.revenue * ebitdaMargin;\n      const depreciation = projection.revenue * assumptions.depreciationAsPercentOfRevenue;\n      const ebit = ebitda - depreciation;\n      const taxes = ebit * assumptions.taxRate;\n      const nopat = ebit - taxes;\n\n      return {\n        ...projection,\n        ebitda,\n        ebitdaMargin,\n        depreciation,\n        ebit,\n        taxes,\n        nopat\n      };\n    });\n  }\n\n  /**\n   * Calculate free cash flows with enhanced methodology\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Object} assumptions - Model assumptions\n   * @returns {Array} Free cash flow projections with detailed breakdown\n   */\n  calculateFreeCashFlows(operatingProjections, assumptions) {\n    return operatingProjections.map((projection, index) => {\n      // More sophisticated CapEx modeling\n      const maintenanceCapex = projection.revenue * (assumptions.maintenanceCapexRate || 0.015);\n      const growthCapex = index > 0 ? \n        (projection.revenue - operatingProjections[index - 1].revenue) * (assumptions.growthCapexRate || 0.8) : 0;\n      const totalCapex = maintenanceCapex + growthCapex;\n      \n      // Enhanced working capital calculation\n      const nwcChange = this.calculateWorkingCapitalChange(projection, operatingProjections[index - 1], assumptions);\n      \n      // Add non-cash charges beyond depreciation\n      const stockBasedComp = projection.revenue * (assumptions.stockBasedCompRate || 0.005);\n      const otherNonCash = projection.revenue * (assumptions.otherNonCashRate || 0.001);\n      const totalNonCash = projection.depreciation + stockBasedComp + otherNonCash;\n      \n      // Calculate unlevered FCF\n      const fcf = projection.nopat + totalNonCash - totalCapex - nwcChange;\n      \n      return {\n        year: index + 1,\n        nopat: projection.nopat,\n        depreciation: projection.depreciation,\n        stockBasedComp,\n        otherNonCash,\n        totalNonCash,\n        maintenanceCapex,\n        growthCapex,\n        totalCapex,\n        nwcChange,\n        unleveredFCF: fcf,\n        fcfMargin: projection.revenue > 0 ? fcf / projection.revenue : 0\n      };\n    });\n  }\n  \n  /**\n   * Calculate working capital change with detailed components\n   * @param {Object} currentProjection - Current year projection\n   * @param {Object} priorProjection - Prior year projection\n   * @param {Object} assumptions - Model assumptions\n   * @returns {number} Working capital change\n   */\n  calculateWorkingCapitalChange(currentProjection, priorProjection, assumptions) {\n    if (!priorProjection) {\n      return currentProjection.revenue * assumptions.nwcAsPercentOfRevenue;\n    }\n    \n    // Component-based NWC calculation\n    const receivablesDays = assumptions.receivablesDays || 45;\n    const inventoryDays = assumptions.inventoryDays || 30;\n    const payablesDays = assumptions.payablesDays || 35;\n    \n    const currentReceivables = (currentProjection.revenue * receivablesDays) / 365;\n    const currentInventory = (currentProjection.revenue * inventoryDays) / 365 * (assumptions.cogsPct || 0.6);\n    const currentPayables = (currentProjection.revenue * payablesDays) / 365 * (assumptions.cogsPct || 0.6);\n    const currentNWC = currentReceivables + currentInventory - currentPayables;\n    \n    const priorReceivables = (priorProjection.revenue * receivablesDays) / 365;\n    const priorInventory = (priorProjection.revenue * inventoryDays) / 365 * (assumptions.cogsPct || 0.6);\n    const priorPayables = (priorProjection.revenue * payablesDays) / 365 * (assumptions.cogsPct || 0.6);\n    const priorNWC = priorReceivables + priorInventory - priorPayables;\n    \n    return currentNWC - priorNWC;\n  }\n\n  /**\n   * Calculate terminal value using Gordon Growth Model with validation\n   * @param {number} finalFCF - Final year free cash flow\n   * @param {number} terminalGrowthRate - Terminal growth rate\n   * @param {number} discountRate - Discount rate (WACC)\n   * @param {Object} options - Additional options for terminal value calculation\n   * @returns {number} Terminal value\n   */\n  calculateTerminalValue(finalFCF, terminalGrowthRate, discountRate, options = {}) {\n    // Enhanced validation\n    if (discountRate <= terminalGrowthRate) {\n      throw new Error(`Discount rate (${(discountRate * 100).toFixed(2)}%) must be greater than terminal growth rate (${(terminalGrowthRate * 100).toFixed(2)}%)`);\n    }\n    \n    if (terminalGrowthRate < 0 || terminalGrowthRate > 0.05) {\n      console.warn(`Terminal growth rate ${(terminalGrowthRate * 100).toFixed(2)}% is outside typical range (0-5%)`);\n    }\n    \n    if (finalFCF <= 0) {\n      console.warn('Final year FCF is negative or zero, terminal value calculation may be unreliable');\n    }\n    \n    // Multiple terminal value methods\n    const { method = 'gordon', exitMultiple = null, fadeToGrowth = false } = options;\n    \n    switch (method) {\n      case 'gordon':\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        \n      case 'exit_multiple':\n        if (exitMultiple && finalFCF > 0) {\n          // Assume FCF approximates EBITDA for multiple calculation\n          return finalFCF * exitMultiple;\n        }\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n        \n      case 'fade_to_growth':\n        // Implement fade-to-growth model where high growth fades to long-term rate\n        const fadeYears = options.fadeYears || 5;\n        const longTermGrowth = options.longTermGrowth || 0.025;\n        let terminalValue = 0;\n        \n        for (let year = 1; year <= fadeYears; year++) {\n          const fadeRate = terminalGrowthRate * Math.pow((fadeYears - year + 1) / fadeYears, 2) + \n                          longTermGrowth * Math.pow(year / fadeYears, 2);\n          const yearFCF = finalFCF * Math.pow(1 + fadeRate, year);\n          terminalValue += yearFCF / Math.pow(1 + discountRate, year);\n        }\n        \n        // Add perpetual value after fade period\n        const finalFadeFCF = finalFCF * Math.pow(1 + longTermGrowth, fadeYears);\n        const perpetualValue = finalFadeFCF / (discountRate - longTermGrowth);\n        terminalValue += perpetualValue / Math.pow(1 + discountRate, fadeYears);\n        \n        return terminalValue;\n        \n      default:\n        return (finalFCF * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);\n    }\n  }\n\n  /**\n   * Calculate present value of cash flows\n   * @param {Array} cashFlows - Array of cash flows\n   * @param {number} discountRate - Discount rate\n   * @param {number} startYear - Starting year for discounting\n   * @returns {number} Present value\n   */\n  calculatePresentValue(cashFlows, discountRate, startYear = 0) {\n    return cashFlows.reduce((pv, cf, index) => {\n      const year = startYear + index + 1;\n      return pv + cf / Math.pow(1 + discountRate, year);\n    }, 0);\n  }\n\n  /**\n   * Calculate comprehensive implied valuation multiples\n   * @param {number} enterpriseValue - Enterprise value\n   * @param {Array} operatingProjections - Operating projections\n   * @param {Array} fcfProjections - Free cash flow projections  \n   * @param {number} currentRevenue - Current year revenue\n   * @returns {Object} Comprehensive implied multiples\n   */\n  calculateImpliedMultiples(enterpriseValue, operatingProjections, fcfProjections = [], currentRevenue = 0) {\n    const currentYearEbitda = operatingProjections[0]?.ebitda || 0;\n    const nextYearEbitda = operatingProjections[1]?.ebitda || 0;\n    const currentYearEbit = operatingProjections[0]?.ebit || 0;\n    const nextYearEbit = operatingProjections[1]?.ebit || 0;\n    const nextYearRevenue = operatingProjections[1]?.revenue || 0;\n    const currentYearFCF = fcfProjections[0]?.unleveredFCF || 0;\n    const nextYearFCF = fcfProjections[1]?.unleveredFCF || 0;\n\n    return {\n      // Revenue multiples\n      evToCurrentRevenue: currentRevenue ? enterpriseValue / currentRevenue : null,\n      evToForwardRevenue: nextYearRevenue ? enterpriseValue / nextYearRevenue : null,\n      \n      // EBITDA multiples\n      evToCurrentEbitda: currentYearEbitda ? enterpriseValue / currentYearEbitda : null,\n      evToForwardEbitda: nextYearEbitda ? enterpriseValue / nextYearEbitda : null,\n      \n      // EBIT multiples\n      evToCurrentEbit: currentYearEbit ? enterpriseValue / currentYearEbit : null,\n      evToForwardEbit: nextYearEbit ? enterpriseValue / nextYearEbit : null,\n      \n      // FCF multiples\n      evToCurrentFCF: currentYearFCF ? enterpriseValue / currentYearFCF : null,\n      evToForwardFCF: nextYearFCF ? enterpriseValue / nextYearFCF : null,\n      \n      // PEG ratio approximation (P/E to Growth)\n      pegRatio: this.calculatePEGRatio(operatingProjections, enterpriseValue)\n    };\n  }\n  \n  /**\n   * Calculate PEG ratio approximation\n   * @param {Array} operatingProjections - Operating projections\n   * @param {number} enterpriseValue - Enterprise value\n   * @returns {number} PEG ratio\n   */\n  calculatePEGRatio(operatingProjections, enterpriseValue) {\n    if (operatingProjections.length < 2) return null;\n    \n    const currentEarnings = operatingProjections[0]?.nopat || 0;\n    const futureEarnings = operatingProjections[operatingProjections.length - 1]?.nopat || 0;\n    \n    if (currentEarnings <= 0 || futureEarnings <= 0) return null;\n    \n    const growthRate = Math.pow(futureEarnings / currentEarnings, 1 / (operatingProjections.length - 1)) - 1;\n    const peRatio = enterpriseValue / currentEarnings;\n    \n    return growthRate > 0 ? peRatio / (growthRate * 100) : null;\n  }\n\n  /**\n   * Perform sensitivity analysis on key variables\n   * @param {Object} inputs - Model inputs\n   * @param {Object} baseAssumptions - Base case assumptions\n   * @returns {Object} Sensitivity analysis results\n   */\n  performDCFSensitivityAnalysis(inputs, baseAssumptions) {\n    const sensitivityVars = {\n      revenueGrowthRate: [-0.02, -0.01, 0, 0.01, 0.02],\n      wacc: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      terminalGrowthRate: [-0.005, -0.0025, 0, 0.0025, 0.005],\n      ebitdaMargin: [-0.02, -0.01, 0, 0.01, 0.02]\n    };\n\n    const results = {};\n\n    Object.entries(sensitivityVars).forEach(([variable, variations]) => {\n      results[variable] = variations.map(variation => {\n        const adjustedAssumptions = {\n          ...baseAssumptions,\n          [variable]: (baseAssumptions[variable] || 0) + variation\n        };\n\n        try {\n          const scenario = this.calculateDCFScenario(inputs, adjustedAssumptions, `${variable}_${variation}`);\n          return {\n            variation,\n            pricePerShare: scenario.pricePerShare,\n            upside: scenario.upside\n          };\n        } catch (error) {\n          return {\n            variation,\n            pricePerShare: null,\n            upside: null,\n            error: error.message\n          };\n        }\n      });\n    });\n\n    return results;\n  }\n\n  /**\n   * Generate DCF model summary\n   * @param {Object} baseCase - Base case results\n   * @param {Object} scenarios - Scenario results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Model summary\n   */\n  generateDCFSummary(baseCase, scenarios, currentPrice) {\n    const allScenarios = [baseCase, ...Object.values(scenarios)];\n    const pricesPerShare = allScenarios.map(s => s.pricePerShare).filter(p => p !== null);\n\n    return {\n      priceRange: {\n        min: Math.min(...pricesPerShare),\n        max: Math.max(...pricesPerShare),\n        average: pricesPerShare.reduce((sum, p) => sum + p, 0) / pricesPerShare.length\n      },\n      recommendation: this.generateRecommendation(baseCase, currentPrice),\n      keyMetrics: {\n        baseCase: {\n          pricePerShare: baseCase.pricePerShare,\n          upside: baseCase.upside,\n          enterpriseValue: baseCase.enterpriseValue\n        },\n        currentPrice,\n        impliedReturn: baseCase.upside\n      }\n    };\n  }\n\n  /**\n   * Generate investment recommendation\n   * @param {Object} baseCase - Base case DCF results\n   * @param {number} currentPrice - Current stock price\n   * @returns {Object} Investment recommendation\n   */\n  generateRecommendation(baseCase, currentPrice) {\n    if (!currentPrice || !baseCase.pricePerShare) {\n      return { rating: 'INSUFFICIENT_DATA', confidence: 0 };\n    }\n\n    const upside = baseCase.upside;\n    let rating, confidence;\n\n    if (upside > 20) {\n      rating = 'STRONG_BUY';\n      confidence = Math.min(95, 70 + (upside - 20) * 1.25);\n    } else if (upside > 10) {\n      rating = 'BUY';\n      confidence = Math.min(85, 60 + (upside - 10) * 2);\n    } else if (upside > -10) {\n      rating = 'HOLD';\n      confidence = Math.min(75, 50 + Math.abs(upside) * 2.5);\n    } else if (upside > -20) {\n      rating = 'SELL';\n      confidence = Math.min(85, 60 + Math.abs(upside + 10) * 2);\n    } else {\n      rating = 'STRONG_SELL';\n      confidence = Math.min(95, 70 + Math.abs(upside + 20) * 1.25);\n    }\n\n    return {\n      rating,\n      confidence: Math.round(confidence),\n      upside,\n      reasoning: this.generateRecommendationReasoning(rating, upside)\n    };\n  }\n\n  /**\n   * Generate reasoning for investment recommendation\n   * @param {string} rating - Investment rating\n   * @param {number} upside - Upside percentage\n   * @returns {string} Recommendation reasoning\n   */\n  generateRecommendationReasoning(rating, upside) {\n    const upsideAbs = Math.abs(upside);\n\n    switch (rating) {\n      case 'STRONG_BUY':\n        return `Strong upside potential of ${upside.toFixed(1)}% suggests significant undervaluation based on DCF analysis.`;\n      case 'BUY':\n        return `Moderate upside of ${upside.toFixed(1)}% indicates the stock is undervalued relative to intrinsic value.`;\n      case 'HOLD':\n        return `Fair valuation with ${upside >= 0 ? 'limited upside' : 'modest downside'} of ${upsideAbs.toFixed(1)}%.`;\n      case 'SELL':\n        return `Downside risk of ${upsideAbs.toFixed(1)}% suggests the stock is overvalued based on fundamental analysis.`;\n      case 'STRONG_SELL':\n        return `Significant downside of ${upsideAbs.toFixed(1)}% indicates substantial overvaluation.`;\n      default:\n        return 'Insufficient data for reliable recommendation.';\n    }\n  }\n}\n\n// Export singleton instance\nexport const financialModelingEngine = new FinancialModelingEngine();\nexport default FinancialModelingEngine;\n","import axios from 'axios';\n\nimport { apiKeyValidator } from '../utils/apiKeyValidator.js';\nimport { apiLogger } from '../utils/apiLogger.js';\n\nimport { financialModelingEngine } from './financialModelingEngine.js';\nimport { lboModelingEngine } from './lboModelingEngine.js';\nimport { monteCarloEngine } from './monteCarloEngine.js';\n\n// Data source configurations - Updated for Vite environment variables\nconst DATA_SOURCES = {\n  ALPHA_VANTAGE: {\n    baseURL: 'https://www.alphavantage.co/query',\n    apiKey: import.meta.env.VITE_ALPHA_VANTAGE_API_KEY || 'demo'\n  },\n  FMP: {\n    baseURL: 'https://financialmodelingprep.com/api/v3',\n    apiKey: import.meta.env.VITE_FMP_API_KEY || 'demo'\n  },\n  SEC_EDGAR: {\n    baseURL: 'https://data.sec.gov',\n    headers: {\n      'User-Agent': 'FinanceAnalyst-Pro (contact@financeanalyst.com)'\n    }\n  },\n  YAHOO_FINANCE: {\n    baseURL: 'https://query1.finance.yahoo.com/v8/finance/chart',\n    fallbackURL: 'https://query2.finance.yahoo.com/v8/finance/chart'\n  }\n};\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  ALPHA_VANTAGE: { requests: 5, period: 60000 }, // 5 requests per minute\n  FMP: { requests: 250, period: 86400000 }, // 250 requests per day\n  SEC_EDGAR: { requests: 10, period: 1000 } // 10 requests per second\n};\n\n// Advanced retry configuration\nconst RETRY_CONFIG = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second base delay\n  maxDelay: 30000, // 30 seconds max delay\n  exponentialBase: 2,\n  jitterFactor: 0.1, // 10% jitter\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT']\n};\n\n/**\n * Circuit breaker configuration\n */\nconst CIRCUIT_BREAKER_CONFIG = {\n  failureThreshold: 5, // Number of failures before opening circuit\n  recoveryTimeout: 30000, // 30 seconds before attempting to close circuit\n  monitoringPeriod: 60000, // 1 minute monitoring window\n  halfOpenMaxCalls: 3 // Max calls to test in half-open state\n};\n\n/**\n * Circuit breaker states\n */\nconst CIRCUIT_STATES = {\n  CLOSED: 'CLOSED', // Normal operation\n  OPEN: 'OPEN', // Circuit is open, failing fast\n  HALF_OPEN: 'HALF_OPEN' // Testing if service has recovered\n};\n\n/**\n * Circuit breaker implementation to prevent cascading failures\n */\nclass CircuitBreaker {\n  constructor(name, config = CIRCUIT_BREAKER_CONFIG) {\n    this.name = name;\n    this.config = { ...CIRCUIT_BREAKER_CONFIG, ...config };\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.halfOpenCallCount = 0;\n    this.successCount = 0;\n    this.totalCalls = 0;\n  }\n\n  /**\n   * Check if circuit breaker allows the call\n   * @returns {boolean} Whether the call is allowed\n   */\n  canExecute() {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        return true;\n\n      case CIRCUIT_STATES.OPEN:\n        // Check if recovery timeout has passed\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.state = CIRCUIT_STATES.HALF_OPEN;\n          this.halfOpenCallCount = 0;\n          console.log(`🔄 Circuit breaker ${this.name} transitioning to HALF_OPEN`);\n          return true;\n        }\n        return false;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        return this.halfOpenCallCount < this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Record a successful call\n   */\n  recordSuccess() {\n    this.successCount++;\n    this.totalCalls++;\n\n    switch (this.state) {\n      case CIRCUIT_STATES.HALF_OPEN:\n        this.halfOpenCallCount++;\n        // If we've successfully completed enough calls in half-open, close the circuit\n        if (this.halfOpenCallCount >= this.config.halfOpenMaxCalls) {\n          this.state = CIRCUIT_STATES.CLOSED;\n          this.failureCount = 0;\n          this.halfOpenCallCount = 0;\n          console.log(`✅ Circuit breaker ${this.name} closed - service recovered`);\n        }\n        break;\n\n      case CIRCUIT_STATES.CLOSED:\n        // Reset failure count on success\n        this.failureCount = 0;\n        break;\n    }\n  }\n\n  /**\n   * Record a failed call\n   */\n  recordFailure() {\n    this.failureCount++;\n    this.totalCalls++;\n    this.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case CIRCUIT_STATES.CLOSED:\n        if (this.failureCount >= this.config.failureThreshold) {\n          this.state = CIRCUIT_STATES.OPEN;\n          console.warn(\n            `🚨 Circuit breaker ${this.name} opened - too many failures (${this.failureCount})`\n          );\n        }\n        break;\n\n      case CIRCUIT_STATES.HALF_OPEN:\n        // Any failure in half-open state reopens the circuit\n        this.state = CIRCUIT_STATES.OPEN;\n        this.halfOpenCallCount = 0;\n        console.warn(`🚨 Circuit breaker ${this.name} reopened - failure during recovery test`);\n        break;\n    }\n  }\n\n  /**\n   * Get circuit breaker status\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls: this.totalCalls,\n      failureRate: this.totalCalls > 0 ? this.failureCount / this.totalCalls : 0,\n      lastFailureTime: this.lastFailureTime,\n      isOpen: this.state === CIRCUIT_STATES.OPEN,\n      nextRetryTime:\n        this.state === CIRCUIT_STATES.OPEN\n          ? this.lastFailureTime + this.config.recoveryTimeout\n          : null\n    };\n  }\n\n  /**\n   * Execute function with circuit breaker protection\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    if (!this.canExecute()) {\n      const error = new Error(`Circuit breaker ${this.name} is OPEN - failing fast`);\n      error.circuitBreakerOpen = true;\n      throw error;\n    }\n\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (error) {\n      this.recordFailure();\n      throw error;\n    }\n  }\n}\n\n/**\n * Advanced retry utility with exponential backoff and jitter\n */\nclass RetryManager {\n  constructor(config = RETRY_CONFIG) {\n    this.config = { ...RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Calculate delay with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    const exponentialDelay = this.config.baseDelay * Math.pow(this.config.exponentialBase, attempt);\n    const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n    const delay = exponentialDelay + jitter;\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  /**\n   * Check if error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error is retryable\n   */\n  isRetryableError(error) {\n    // Check for network errors\n    if (error.code && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    // Check for HTTP status codes\n    if (\n      error.response?.status &&\n      this.config.retryableStatusCodes.includes(error.response.status)\n    ) {\n      return true;\n    }\n\n    // Check for timeout errors\n    if (error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute function with retry logic\n   * @param {Function} fn - Async function to execute\n   * @param {string} operation - Operation name for logging\n   * @returns {Promise} Result of the function\n   */\n  async executeWithRetry(fn, operation = 'API call') {\n    let lastError;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const result = await fn();\n\n        // Log successful retry if this wasn't the first attempt\n        if (attempt > 0) {\n          console.log(`✅ ${operation} succeeded on attempt ${attempt + 1}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error)) {\n          console.warn(`❌ ${operation} failed with non-retryable error:`, error.message);\n          throw error;\n        }\n\n        const delay = this.calculateDelay(attempt);\n        console.warn(\n          `⚠️ ${operation} failed (attempt ${attempt + 1}/${this.config.maxRetries + 1}), retrying in ${delay}ms:`,\n          error.message\n        );\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    // All retries exhausted\n    console.error(\n      `❌ ${operation} failed after ${this.config.maxRetries + 1} attempts:`,\n      lastError.message\n    );\n    throw lastError;\n  }\n}\n\nclass DataFetchingService {\n  constructor(\n    env = import.meta.env,\n    customRateLimits = null,\n    retryConfig = null,\n    circuitBreakerConfig = null\n  ) {\n    this.rateLimiters = {};\n    this.cache = new Map();\n    this.cacheExpiry = new Map();\n    this.env = env;\n    this.customRateLimits = customRateLimits;\n    this.demoMode = this.isDemoMode(env);\n    this.retryManager = new RetryManager(retryConfig);\n    this.circuitBreakers = this.initializeCircuitBreakers(circuitBreakerConfig);\n    this.logger = apiLogger;\n    this.initializeRateLimiters();\n\n    // Log service initialization\n    this.logger.log('INFO', '🚀 DataFetchingService initialized', {\n      demoMode: this.demoMode,\n      environment: env.VITE_APP_ENV || 'development'\n    });\n  }\n\n  isDemoMode(env = import.meta.env) {\n    // Check if we're forcing demo mode\n    if (env.VITE_FORCE_DEMO_MODE === 'true') {\n      return true;\n    }\n\n    // Check if we're using demo API keys\n    const hasValidKeys =\n      (env.VITE_ALPHA_VANTAGE_API_KEY && env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo') ||\n      (env.VITE_FMP_API_KEY && env.VITE_FMP_API_KEY !== 'demo');\n    return !hasValidKeys;\n  }\n\n  initializeCircuitBreakers(config) {\n    const circuitBreakers = {};\n    const sources = ['ALPHA_VANTAGE', 'FMP', 'SEC_EDGAR', 'YAHOO_FINANCE'];\n\n    sources.forEach(source => {\n      circuitBreakers[source] = new CircuitBreaker(source, config);\n    });\n\n    return circuitBreakers;\n  }\n\n  initializeRateLimiters() {\n    const rateLimits = this.customRateLimits || RATE_LIMITS;\n    Object.keys(rateLimits).forEach(source => {\n      this.rateLimiters[source] = {\n        requests: [],\n        limit: rateLimits[source].requests,\n        period: rateLimits[source].period\n      };\n    });\n  }\n\n  async checkRateLimit(source) {\n    const limiter = this.rateLimiters[source];\n    if (!limiter) return true;\n\n    const now = Date.now();\n    limiter.requests = limiter.requests.filter(time => now - time < limiter.period);\n\n    if (limiter.requests.length >= limiter.limit) {\n      const oldestRequest = Math.min(...limiter.requests);\n      const waitTime = limiter.period - (now - oldestRequest);\n\n      // Log rate limiting event\n      this.logger.logRateLimit(source, waitTime, limiter.limit - limiter.requests.length);\n\n      throw new Error(\n        `Rate limit exceeded for ${source}. Please wait ${Math.ceil(waitTime / 1000)} seconds.`\n      );\n    }\n\n    limiter.requests.push(now);\n    return true;\n  }\n\n  getCacheKey(method, params) {\n    return `${method}_${JSON.stringify(params)}`;\n  }\n\n  getFromCache(key) {\n    const expiry = this.cacheExpiry.get(key);\n    if (expiry && Date.now() > expiry) {\n      this.cache.delete(key);\n      this.cacheExpiry.delete(key);\n      this.logger.logCache('miss', key, { reason: 'expired' });\n      return null;\n    }\n    const cached = this.cache.get(key);\n    if (cached !== undefined) {\n      this.logger.logCache('hit', key, { size: JSON.stringify(cached).length });\n      return cached;\n    }\n    this.logger.logCache('miss', key, { reason: 'not_found' });\n    return null;\n  }\n\n  setCache(key, data, ttlMinutes = 60) {\n    this.cache.set(key, data);\n    this.cacheExpiry.set(key, Date.now() + ttlMinutes * 60 * 1000);\n    this.logger.logCache('set', key, {\n      ttlMinutes,\n      size: JSON.stringify(data).length,\n      expiresAt: new Date(Date.now() + ttlMinutes * 60 * 1000).toISOString()\n    });\n  }\n\n  generateMockData(ticker, dataType) {\n    // Generate realistic mock data for demo purposes\n    const basePrice = 100 + Math.random() * 200;\n    const marketCap = 1000000000 + Math.random() * 10000000000;\n\n    // Map common tickers to realistic company names\n    const companyNames = {\n      AAPL: 'Apple Inc.',\n      MSFT: 'Microsoft Corporation',\n      GOOGL: 'Alphabet Inc.',\n      AMZN: 'Amazon.com Inc.',\n      META: 'Meta Platforms Inc.',\n      TSLA: 'Tesla Inc.',\n      NVDA: 'NVIDIA Corporation'\n    };\n\n    switch (dataType) {\n      case 'profile':\n        return {\n          symbol: ticker,\n          companyName: companyNames[ticker] || `${ticker} Corporation`,\n          mktCap: marketCap,\n          pe: 15 + Math.random() * 20,\n          pb: 1 + Math.random() * 4,\n          beta: 0.8 + Math.random() * 0.8,\n          sector: 'Technology',\n          industry: 'Software',\n          sharesOutstanding: marketCap / basePrice,\n          enterpriseValueOverEBITDA: 10 + Math.random() * 15,\n          debtToEquity: Math.random() * 2,\n          revenueTTM: marketCap * 0.8,\n          grossProfitMargin: 0.3 + Math.random() * 0.4,\n          netProfitMargin: 0.1 + Math.random() * 0.2,\n          returnOnEquityTTM: 0.1 + Math.random() * 0.2,\n          returnOnAssetsTTM: 0.05 + Math.random() * 0.15,\n          effectiveTaxRateTTM: 0.21,\n          fullTimeEmployees: 1000 + Math.random() * 50000,\n          ipoDate: '2010-01-01',\n          range: `$${(basePrice * 0.8).toFixed(2)} - $${(basePrice * 1.3).toFixed(2)}`\n        };\n\n      case 'marketData':\n        return {\n          symbol: ticker,\n          currentPrice: basePrice,\n          previousClose: basePrice * (0.98 + Math.random() * 0.04),\n          marketCap,\n          volume: 1000000 + Math.random() * 5000000,\n          currency: 'USD'\n        };\n\n      case 'incomeStatement':\n      case 'income':\n        const revenue = marketCap * 0.8;\n        return [\n          {\n            revenue,\n            ebitda: revenue * 0.25,\n            netIncome: revenue * 0.15,\n            capex: revenue * 0.05,\n            interestExpense: revenue * 0.02,\n            grossProfitMargin: 0.6\n          }\n        ];\n\n      case 'balanceSheet':\n        return [\n          {\n            totalDebt: marketCap * 0.3,\n            cashAndCashEquivalents: marketCap * 0.1,\n            totalCurrentAssets: marketCap * 0.4,\n            totalCurrentLiabilities: marketCap * 0.2\n          }\n        ];\n\n      case 'cashFlow':\n        return [\n          {\n            freeCashFlow: marketCap * 0.12\n          }\n        ];\n\n      default:\n        return null;\n    }\n  }\n\n  async fetchCompanyProfile(ticker) {\n    const cacheKey = this.getCacheKey('profile', { ticker });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock data for', ticker);\n      const mockData = this.generateMockData(ticker, 'profile');\n      this.setCache(cacheKey, mockData, 1440);\n      return mockData;\n    }\n\n    return this.circuitBreakers.FMP.execute(async() => {\n      return this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        // Log API request start\n        const requestId = this.logger.logApiRequest('FMP', `/profile/${ticker}`, { ticker });\n\n        try {\n          const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/profile/${ticker}`, {\n            params: { apikey: DATA_SOURCES.FMP.apiKey },\n            timeout: 10000\n          });\n\n          if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          const profile = response.data[0];\n          if (!profile || typeof profile !== 'object') {\n            throw new Error(`Company profile not found for ticker: ${ticker}`);\n          }\n\n          // Log successful API response\n          this.logger.logApiResponse(requestId, true, {\n            profileFound: true,\n            ticker: profile.symbol\n          });\n\n          this.setCache(cacheKey, profile, 1440); // Cache for 24 hours\n          return profile;\n        } catch (error) {\n          // Log failed API response\n          this.logger.logApiResponse(requestId, false, null, error);\n          throw error;\n        }\n      }, `Company profile fetch for ${ticker}`);\n    }).catch(error => {\n      // Handle circuit breaker errors - preserve the circuitBreakerOpen property\n      if (error.circuitBreakerOpen) {\n        throw error;\n      }\n\n      // Handle authentication errors with fallback to demo mode\n      if (error.response?.status === 403 || error.response?.status === 401) {\n        console.warn('API key invalid, falling back to demo mode');\n        const mockData = this.generateMockData(ticker, 'profile');\n        this.setCache(cacheKey, mockData, 1440);\n        return mockData;\n      }\n      throw new Error(`Failed to fetch company profile: ${error.message}`);\n    });\n  }\n\n  async fetchFinancialStatements(\n    ticker,\n    statement = 'income-statement',\n    period = 'annual',\n    limit = 5\n  ) {\n    const cacheKey = this.getCacheKey('financials', { ticker, statement, period, limit });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock financial data for', ticker);\n      const mockData = this.generateMockData(\n        ticker,\n        statement.replace('-statement', '').replace('-', '')\n      );\n      this.setCache(cacheKey, mockData, 360);\n      return mockData;\n    }\n\n    return this.retryManager\n      .executeWithRetry(async() => {\n        await this.checkRateLimit('FMP');\n\n        const response = await axios.get(`${DATA_SOURCES.FMP.baseURL}/${statement}/${ticker}`, {\n          params: {\n            apikey: DATA_SOURCES.FMP.apiKey,\n            period,\n            limit\n          },\n          timeout: 15000\n        });\n\n        if (!response.data || response.data.length === 0) {\n          throw new Error(`No ${statement} data found for ${ticker}`);\n        }\n\n        this.setCache(cacheKey, response.data, 360); // Cache for 6 hours\n        return response.data;\n      }, `Financial statements fetch for ${ticker} (${statement})`)\n      .catch(error => {\n        // Handle authentication errors with fallback to demo mode\n        if (error.response?.status === 403 || error.response?.status === 401) {\n          console.warn('API key invalid, falling back to demo mode');\n          const mockData = this.generateMockData(\n            ticker,\n            statement.replace('-statement', '').replace('-', '')\n          );\n          this.setCache(cacheKey, mockData, 360);\n          return mockData;\n        }\n        throw new Error(`Failed to fetch ${statement}: ${error.message}`);\n      });\n  }\n\n  async fetchMarketData(ticker, range = '1y') {\n    const cacheKey = this.getCacheKey('market', { ticker, range });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    if (this.demoMode) {\n      console.warn('Using demo mode - generating mock market data for', ticker);\n      const mockData = this.generateMockData(ticker, 'marketData');\n      this.setCache(cacheKey, mockData, 15);\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        // Try Yahoo Finance first (no API key required)\n        const response = await axios.get(`${DATA_SOURCES.YAHOO_FINANCE.baseURL}/${ticker}`, {\n          params: { range, interval: '1d' },\n          timeout: 10000\n        });\n\n        const result = response.data.chart.result[0];\n        if (!result) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        const marketData = {\n          symbol: result.meta.symbol,\n          currentPrice: result.meta.regularMarketPrice,\n          previousClose: result.meta.previousClose,\n          marketCap: result.meta.marketCap,\n          volume: result.meta.regularMarketVolume,\n          timestamps: result.timestamp,\n          prices: result.indicators.quote[0],\n          currency: result.meta.currency\n        };\n\n        this.setCache(cacheKey, marketData, 15); // Cache for 15 minutes\n        return marketData;\n      }, `Market data fetch for ${ticker}`);\n    } catch (error) {\n      // Fallback to Alpha Vantage or demo mode\n      console.warn(`Primary market data source failed for ${ticker}, trying alternative`);\n      return this.fetchMarketDataAlternative(ticker);\n    }\n  }\n\n  async fetchMarketDataAlternative(ticker) {\n    if (this.demoMode) {\n      const mockData = this.generateMockData(ticker, 'marketData');\n      return mockData;\n    }\n\n    try {\n      return await this.retryManager.executeWithRetry(async() => {\n        await this.checkRateLimit('ALPHA_VANTAGE');\n\n        const response = await axios.get(DATA_SOURCES.ALPHA_VANTAGE.baseURL, {\n          params: {\n            function: 'GLOBAL_QUOTE',\n            symbol: ticker,\n            apikey: DATA_SOURCES.ALPHA_VANTAGE.apiKey\n          },\n          timeout: 10000\n        });\n\n        const quote = response.data['Global Quote'];\n        if (!quote || Object.keys(quote).length === 0) {\n          throw new Error(`No market data found for ticker: ${ticker}`);\n        }\n\n        return {\n          symbol: quote['01. symbol'],\n          currentPrice: parseFloat(quote['05. price']),\n          previousClose: parseFloat(quote['08. previous close']),\n          volume: parseInt(quote['06. volume']),\n          change: parseFloat(quote['09. change']),\n          changePercent: quote['10. change percent']\n        };\n      }, `Alternative market data fetch for ${ticker}`);\n    } catch (error) {\n      console.warn('Alternative market data API failed, using demo data');\n      return this.generateMockData(ticker, 'marketData');\n    }\n  }\n\n  async fetchSECFilings(ticker, filingType = '10-K', count = 5) {\n    const cacheKey = this.getCacheKey('sec', { ticker, filingType, count });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('SEC filings not available in demo mode');\n        return [\n          {\n            form: filingType,\n            filingDate: '2023-12-31',\n            accessionNumber: '0000000000-00-000000',\n            reportDate: '2023-12-31',\n            acceptanceDateTime: '2024-01-15T16:30:00',\n            act: '34',\n            primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n            url: '#demo-filing'\n          }\n        ];\n      }\n\n      await this.checkRateLimit('SEC_EDGAR');\n\n      // This would need proper CIK lookup implementation\n      // For now, return demo data\n      return [\n        {\n          form: filingType,\n          filingDate: '2023-12-31',\n          accessionNumber: '0000000000-00-000000',\n          reportDate: '2023-12-31',\n          acceptanceDateTime: '2024-01-15T16:30:00',\n          act: '34',\n          primaryDocument: `${ticker.toLowerCase()}-${filingType.toLowerCase()}.htm`,\n          url: '#demo-filing'\n        }\n      ];\n    } catch (error) {\n      throw new Error(`Failed to fetch SEC filings: ${error.message}`);\n    }\n  }\n\n  async fetchPeerComparables(ticker, industryCode = null) {\n    const cacheKey = this.getCacheKey('peers', { ticker, industryCode });\n    const cached = this.getFromCache(cacheKey);\n    if (cached) return cached;\n\n    try {\n      if (this.demoMode) {\n        console.warn('Using demo peer data');\n        const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n        const peers = peerTickers.slice(0, 5).map(peerTicker => {\n          const basePrice = 100 + Math.random() * 200;\n          const marketCap = 1000000000 + Math.random() * 2000000000;\n          return {\n            symbol: peerTicker,\n            name: `${peerTicker} Corporation`,\n            marketCap,\n            currentPrice: basePrice,\n            sector: 'Technology',\n            industry: 'Software',\n            peRatio: 15 + Math.random() * 20,\n            evToEbitda: 10 + Math.random() * 15,\n            priceToBook: 1 + Math.random() * 4,\n            debtToEquity: Math.random() * 2\n          };\n        });\n        this.setCache(cacheKey, peers, 240);\n        return peers;\n      }\n\n      await this.checkRateLimit('FMP');\n\n      // Get company profile first to determine industry\n      const profile = await this.fetchCompanyProfile(ticker);\n\n      // For demo, use hardcoded peer list\n      const peerTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META'].filter(t => t !== ticker);\n\n      // Fetch key metrics for peer analysis\n      const peerData = await Promise.allSettled(\n        peerTickers.slice(0, 5).map(async peerTicker => {\n          const peerProfile = await this.fetchCompanyProfile(peerTicker);\n          const peerMarket = await this.fetchMarketData(peerTicker);\n\n          return {\n            symbol: peerTicker,\n            name: peerProfile.companyName,\n            marketCap: peerProfile.mktCap,\n            currentPrice: peerMarket.currentPrice,\n            sector: peerProfile.sector,\n            industry: peerProfile.industry,\n            peRatio: peerProfile.pe,\n            evToEbitda: peerProfile.enterpriseValueOverEBITDA,\n            priceToBook: peerProfile.pb,\n            debtToEquity: peerProfile.debtToEquity\n          };\n        })\n      );\n\n      const validPeers = peerData\n        .filter(result => result.status === 'fulfilled')\n        .map(result => result.value);\n\n      this.setCache(cacheKey, validPeers, 240); // Cache for 4 hours\n      return validPeers;\n    } catch (error) {\n      throw new Error(`Failed to fetch peer comparables: ${error.message}`);\n    }\n  }\n\n  async fetchDCFInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, cashFlows, marketData] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 5),\n        this.fetchFinancialStatements(ticker, 'cash-flow-statement', 'annual', 5),\n        this.fetchMarketData(ticker)\n      ]);\n\n      // Calculate historical growth rates\n      const revenues = Array.isArray(incomeStatements)\n        ? incomeStatements.map(stmt => stmt.revenue).reverse()\n        : [incomeStatements.revenue];\n      const revenueGrowthRates = [];\n      for (let i = 1; i < revenues.length; i++) {\n        if (revenues[i - 1] && revenues[i]) {\n          revenueGrowthRates.push((revenues[i] - revenues[i - 1]) / revenues[i - 1]);\n        }\n      }\n      const avgRevenueGrowth =\n        revenueGrowthRates.length > 0\n          ? revenueGrowthRates.reduce((a, b) => a + b, 0) / revenueGrowthRates.length\n          : 0.05; // Default 5% growth\n\n      // Calculate free cash flow margin\n      const latestCashFlow = Array.isArray(cashFlows) ? cashFlows[0] : cashFlows;\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const fcfMargin = latestCashFlow.freeCashFlow / latestIncome.revenue;\n\n      // Estimate WACC components\n      const riskFreeRate = 0.045; // 4.5% - this should come from treasury rates API\n      const marketPremium = 0.065; // 6.5% historical market premium\n      const beta = profile.beta || 1.0;\n      const costOfEquity = riskFreeRate + beta * marketPremium;\n\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n      const totalDebt = latestBalance.totalDebt || 0;\n      const marketCap = marketData.marketCap || marketData.currentPrice * profile.sharesOutstanding;\n      const debtRatio = totalDebt / (totalDebt + marketCap);\n      const taxRate = profile.effectiveTaxRateTTM || 0.21;\n\n      const wacc = costOfEquity * (1 - debtRatio) + 0.04 * debtRatio * (1 - taxRate); // Assuming 4% cost of debt\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentRevenue: latestIncome.revenue,\n        revenueGrowthRate: avgRevenueGrowth,\n        fcfMargin,\n        wacc,\n        terminalGrowthRate: 0.025, // 2.5% long-term GDP growth assumption\n        currentPrice: marketData.currentPrice,\n        sharesOutstanding: profile.sharesOutstanding,\n        marketCap,\n        totalDebt,\n        cash: latestBalance.cashAndCashEquivalents || 0,\n        beta,\n        peRatio: profile.pe,\n        historicalData: {\n          revenues,\n          revenueGrowthRates,\n          freeCashFlows: Array.isArray(cashFlows)\n            ? cashFlows.map(cf => cf.freeCashFlow).reverse()\n            : [latestCashFlow.freeCashFlow],\n          margins: Array.isArray(incomeStatements)\n            ? incomeStatements.map(stmt => stmt.grossProfitMargin).reverse()\n            : [latestIncome.grossProfitMargin]\n        }\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch DCF inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async fetchLBOInputs(ticker) {\n    try {\n      const [profile, incomeStatements, balanceSheets, marketData, peers] = await Promise.all([\n        this.fetchCompanyProfile(ticker),\n        this.fetchFinancialStatements(ticker, 'income-statement', 'annual', 3),\n        this.fetchFinancialStatements(ticker, 'balance-sheet-statement', 'annual', 3),\n        this.fetchMarketData(ticker),\n        this.fetchPeerComparables(ticker)\n      ]);\n\n      const latestIncome = Array.isArray(incomeStatements) ? incomeStatements[0] : incomeStatements;\n      const latestBalance = Array.isArray(balanceSheets) ? balanceSheets[0] : balanceSheets;\n\n      // Calculate key LBO metrics\n      const ebitda = latestIncome.ebitda;\n      const currentEV =\n        marketData.marketCap + latestBalance.totalDebt - latestBalance.cashAndCashEquivalents;\n      const evEbitdaMultiple = currentEV / ebitda;\n\n      // Peer multiples for exit assumptions\n      const peerEvEbitdaMultiples = peers\n        .filter(peer => peer.evToEbitda && peer.evToEbitda > 0)\n        .map(peer => peer.evToEbitda);\n      const avgPeerMultiple =\n        peerEvEbitdaMultiples.length > 0\n          ? peerEvEbitdaMultiples.reduce((a, b) => a + b, 0) / peerEvEbitdaMultiples.length\n          : evEbitdaMultiple;\n\n      return {\n        symbol: ticker,\n        companyName: profile.companyName,\n        currentPrice: marketData.currentPrice,\n        marketCap: marketData.marketCap,\n        enterpriseValue: currentEV,\n        ebitda,\n        evEbitdaMultiple,\n        revenue: latestIncome.revenue,\n        netIncome: latestIncome.netIncome,\n        totalDebt: latestBalance.totalDebt,\n        cash: latestBalance.cashAndCashEquivalents,\n        workingCapital: latestBalance.totalCurrentAssets - latestBalance.totalCurrentLiabilities,\n        capex: Math.abs(latestIncome.capex || 0),\n        debtToEbitda: latestBalance.totalDebt / ebitda,\n        interestCoverage: ebitda / (latestIncome.interestExpense || 1),\n        avgPeerMultiple,\n        suggestedPurchasePrice: ebitda * avgPeerMultiple,\n        maxDebtCapacity: ebitda * 6, // 6x EBITDA debt capacity assumption\n        sharesOutstanding: profile.sharesOutstanding\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch LBO inputs for ${ticker}: ${error.message}`);\n    }\n  }\n\n  async validateTicker(ticker) {\n    try {\n      // In demo mode, only validate known tickers\n      if (this.demoMode) {\n        const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA'];\n        return knownTickers.includes(ticker);\n      }\n\n      await this.fetchCompanyProfile(ticker);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Add method to check API status\n  async getApiStatus() {\n    const validationResults = await apiKeyValidator.validateAllKeys();\n    const metrics = this.logger.getMetrics();\n\n    return {\n      demoMode: this.demoMode,\n      cacheSize: this.cache.size,\n      validation: validationResults,\n      circuitBreakers: this.getCircuitBreakerStatus(),\n      metrics,\n      performance: {\n        uptime: metrics.uptime,\n        totalRequests: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.requests?.total || 0),\n          0\n        ),\n        totalErrors: Object.values(metrics.services).reduce(\n          (total, service) => total + (service.error?.total || 0),\n          0\n        ),\n        averageResponseTime: this.calculateAverageResponseTime(metrics.services),\n        cacheHitRate: this.calculateCacheHitRate(metrics.cache)\n      },\n      availableKeys: {\n        alphaVantage: !!(\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY &&\n          import.meta.env.VITE_ALPHA_VANTAGE_API_KEY !== 'demo'\n        ),\n        fmp: !!(import.meta.env.VITE_FMP_API_KEY && import.meta.env.VITE_FMP_API_KEY !== 'demo'),\n        quandl: !!(\n          import.meta.env.VITE_QUANDL_API_KEY && import.meta.env.VITE_QUANDL_API_KEY !== 'demo'\n        ),\n        fred: !!(import.meta.env.VITE_FRED_API_KEY && import.meta.env.VITE_FRED_API_KEY !== 'demo')\n      },\n      recommendations: validationResults.recommendations\n    };\n  }\n\n  // Get circuit breaker status for all services\n  getCircuitBreakerStatus() {\n    const status = {};\n    Object.keys(this.circuitBreakers).forEach(service => {\n      status[service] = this.circuitBreakers[service].getStatus();\n    });\n    return status;\n  }\n\n  // Calculate average response time across all services\n  calculateAverageResponseTime(services) {\n    let totalDuration = 0;\n    let totalRequests = 0;\n\n    Object.values(services).forEach(service => {\n      if (service.duration) {\n        totalDuration += service.duration.total;\n        totalRequests += service.duration.count;\n      }\n    });\n\n    return totalRequests > 0 ? Math.round(totalDuration / totalRequests) : 0;\n  }\n\n  // Calculate cache hit rate\n  calculateCacheHitRate(cache) {\n    const hits = cache.hit?.total || 0;\n    const misses = cache.miss?.total || 0;\n    const total = hits + misses;\n\n    return total > 0 ? Math.round((hits / total) * 100) : 0;\n  }\n\n  // Get recent logs for debugging\n  getRecentLogs(limit = 50, level = null) {\n    return this.logger.getRecentLogs(limit, level);\n  }\n\n  // Clear all metrics and logs\n  clearMetrics() {\n    this.logger.clear();\n  }\n\n  // Add method to validate API keys on demand\n  async validateApiKeys() {\n    return await apiKeyValidator.validateAllKeys();\n  }\n\n  /**\n   * Build comprehensive DCF model with advanced scenarios\n   * @param {string} symbol - Stock symbol\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete DCF analysis\n   */\n  async buildAdvancedDCFModel(symbol, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol)\n      ]);\n\n      // Prepare DCF inputs\n      const dcfInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        currentRevenue: financials.revenue || 0,\n        currentPrice: marketData.price || 0,\n        sharesOutstanding: profile.sharesOutstanding || 0,\n        totalDebt: profile.totalDebt || 0,\n        cash: profile.cash || 0,\n        historicalGrowthRates: this.calculateHistoricalGrowthRates(financials),\n        margins: {\n          ebitdaMargin: (financials.ebitda || 0) / (financials.revenue || 1)\n        },\n        balanceSheetData: financials,\n        marketData,\n        assumptions: {\n          ...assumptions,\n          wacc: assumptions.wacc || this.calculateWACC(profile, marketData),\n          revenueGrowthRate: assumptions.revenueGrowthRate || this.estimateGrowthRate(financials)\n        }\n      };\n\n      // Build comprehensive DCF model\n      const dcfModel = financialModelingEngine.buildDCFModel(dcfInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced DCF model built for ${symbol}`, {\n        baseCase: dcfModel.baseCase.pricePerShare,\n        scenarios: Object.keys(dcfModel.scenarios).length\n      });\n\n      return dcfModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build DCF model for ${symbol}`, { error: error.message });\n      throw new Error(`DCF modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Build comprehensive LBO model\n   * @param {string} symbol - Stock symbol\n   * @param {Object} transactionInputs - Transaction parameters\n   * @param {Object} assumptions - Custom assumptions\n   * @param {Object} scenarios - Scenario options\n   * @returns {Promise<Object>} Complete LBO analysis\n   */\n  async buildAdvancedLBOModel(symbol, transactionInputs, assumptions = {}, scenarios = {}) {\n    try {\n      // Fetch comprehensive company data\n      const [profile, financials, marketData, peerData] = await Promise.all([\n        this.fetchCompanyProfile(symbol),\n        this.fetchFinancialStatements(symbol, 'income-statement'),\n        this.fetchMarketData(symbol),\n        this.fetchPeerComparison(symbol)\n      ]);\n\n      // Prepare LBO inputs\n      const lboInputs = {\n        symbol,\n        companyName: profile.companyName || symbol,\n        purchasePrice: transactionInputs.purchasePrice || marketData.marketCap,\n        ebitda: financials.ebitda || 0,\n        revenue: financials.revenue || 0,\n        marketData,\n        peerData,\n        assumptions: {\n          ...assumptions,\n          exit: {\n            ...assumptions.exit,\n            exitMultiple: assumptions.exit?.exitMultiple || this.calculatePeerAverageMultiple(peerData)\n          }\n        }\n      };\n\n      // Build comprehensive LBO model\n      const lboModel = lboModelingEngine.buildLBOModel(lboInputs, scenarios);\n\n      apiLogger.log('INFO', `Advanced LBO model built for ${symbol}`, {\n        baseCase: lboModel.baseCase.returnsAnalysis.irr,\n        scenarios: Object.keys(lboModel.scenarios).length\n      });\n\n      return lboModel;\n\n    } catch (error) {\n      apiLogger.log('ERROR', `Failed to build LBO model for ${symbol}`, { error: error.message });\n      throw new Error(`LBO modeling failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate historical growth rates from financial data\n   * @param {Object} financials - Financial statements data\n   * @returns {Array} Historical growth rates\n   */\n  calculateHistoricalGrowthRates(financials) {\n    // This would analyze historical financial data to calculate growth rates\n    // Simplified implementation for now\n    return [0.15, 0.12, 0.10, 0.08, 0.06]; // Example declining growth rates\n  }\n\n  /**\n   * Estimate growth rate based on historical data\n   * @param {Object} financials - Financial statements data\n   * @returns {number} Estimated growth rate\n   */\n  estimateGrowthRate(financials) {\n    // Simplified growth rate estimation\n    // In practice, this would analyze multiple years of data\n    return 0.10; // 10% default growth rate\n  }\n\n  /**\n   * Calculate peer average multiple\n   * @param {Object} peerData - Peer comparison data\n   * @returns {number} Average peer multiple\n   */\n  calculatePeerAverageMultiple(peerData) {\n    if (!peerData || !peerData.peers) {\n      return 10; // Default multiple\n    }\n\n    const multiples = peerData.peers\n      .map(peer => peer.evToEbitda)\n      .filter(multiple => multiple && multiple > 0);\n\n    if (multiples.length === 0) {\n      return 10;\n    }\n\n    return multiples.reduce((sum, multiple) => sum + multiple, 0) / multiples.length;\n  }\n}\n\n// Export singleton instance\nexport const dataFetchingService = new DataFetchingService();\nexport default DataFetchingService;\n"],"names":["apiKeyValidator","constructor","this","validationResults","Map","lastValidation","validateAllKeys","results","timestamp","Date","overall","services","recommendations","apiKeys","alphaVantage","fmp","quandl","undefined","fred","validationPromises","validateAlphaVantage","validateFMP","validateQuandl","validateFRED","Promise","allSettled","processValidationResult","validServices","Object","values","filter","s","status","length","configuredServices","totalServices","keys","push","error","message","apiKey","response","axios","get","params","function","symbol","apikey","timeout","data","code","Array","isArray","api_key","rows","quandl_error","dataset","series_id","file_type","error_message","seriess","result","value","reason","getServiceStatus","serviceName","getOverallStatus","getRecommendations","shouldUseDemoMode","financialModelingEngine","modelCache","assumptions","getDefaultAssumptions","dcf","projectionYears","terminalGrowthRate","riskFreeRate","marketPremium","taxRate","capexAsPercentOfRevenue","nwcAsPercentOfRevenue","depreciationAsPercentOfRevenue","normalizedMarginTarget","cyclicalAdjustment","industryBeta","sizeAdjustment","countryRiskPremium","liquidityDiscount","lbo","holdingPeriod","debtMultiples","senior","subordinated","total","interestRates","managementFeeRate","carriedInterestRate","ebitdaGrowthRate","debtPaydownRate","monte_carlo","iterations","confidenceIntervals","correlationMatrix","buildDCFModel","inputs","scenarios","companyName","currentRevenue","historicalGrowthRates","margins","balanceSheetData","marketData","modelAssumptions","baseCase","calculateDCFScenario","scenarioResults","bull","bullAssumptions","revenueGrowthRate","Math","min","wacc","bear","bearAssumptions","max","sensitivityAnalysis","performDCFSensitivityAnalysis","modelType","toISOString","summary","generateDCFSummary","currentPrice","scenarioName","sharesOutstanding","totalDebt","cash","revenueProjections","projectRevenues","operatingProjections","projectOperatingMetrics","fcfProjections","calculateFreeCashFlows","terminalValue","calculateTerminalValue","pvOfCashFlows","calculatePresentValue","pvOfTerminalValue","enterpriseValue","equityValue","pricePerShare","upside","impliedMultiples","calculateImpliedMultiples","baseRevenue","growthRates","years","projections","i","growthRate","pow","year","revenue","map","projection","index","ebitdaMargin","ebitda","depreciation","ebit","taxes","nopat","maintenanceCapex","maintenanceCapexRate","growthCapex","growthCapexRate","totalCapex","nwcChange","calculateWorkingCapitalChange","stockBasedComp","stockBasedCompRate","otherNonCash","otherNonCashRate","totalNonCash","fcf","unleveredFCF","fcfMargin","currentProjection","priorProjection","receivablesDays","inventoryDays","payablesDays","cogsPct","finalFCF","discountRate","options","Error","toFixed","method","exitMultiple","fadeToGrowth","fadeYears","longTermGrowth","fadeRate","cashFlows","startYear","reduce","pv","cf","currentYearEbitda","nextYearEbitda","currentYearEbit","nextYearEbit","nextYearRevenue","currentYearFCF","nextYearFCF","evToCurrentRevenue","evToForwardRevenue","evToCurrentEbitda","evToForwardEbitda","evToCurrentEbit","evToForwardEbit","evToCurrentFCF","evToForwardFCF","pegRatio","calculatePEGRatio","currentEarnings","futureEarnings","baseAssumptions","entries","forEach","variable","variations","variation","adjustedAssumptions","scenario","pricesPerShare","p","priceRange","average","sum","recommendation","generateRecommendation","keyMetrics","impliedReturn","rating","confidence","abs","round","reasoning","generateRecommendationReasoning","upsideAbs","DATA_SOURCES","baseURL","fallbackURL","RATE_LIMITS","ALPHA_VANTAGE","requests","period","FMP","SEC_EDGAR","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","exponentialBase","jitterFactor","retryableStatusCodes","retryableErrors","CIRCUIT_BREAKER_CONFIG","failureThreshold","recoveryTimeout","monitoringPeriod","halfOpenMaxCalls","CIRCUIT_STATES","CircuitBreaker","name","config","state","failureCount","lastFailureTime","halfOpenCallCount","successCount","totalCalls","canExecute","now","recordSuccess","recordFailure","getStatus","failureRate","isOpen","nextRetryTime","execute","fn","circuitBreakerOpen","RetryManager","calculateDelay","attempt","exponentialDelay","delay","random","isRetryableError","includes","executeWithRetry","operation","lastError","resolve","setTimeout","dataFetchingService","env","__vite_import_meta_env__","customRateLimits","retryConfig","circuitBreakerConfig","rateLimiters","cache","cacheExpiry","demoMode","isDemoMode","retryManager","circuitBreakers","initializeCircuitBreakers","logger","apiLogger","initializeRateLimiters","log","environment","VITE_APP_ENV","VITE_FORCE_DEMO_MODE","VITE_ALPHA_VANTAGE_API_KEY","VITE_FMP_API_KEY","source","rateLimits","limit","checkRateLimit","limiter","time","oldestRequest","waitTime","logRateLimit","ceil","getCacheKey","JSON","stringify","getFromCache","key","expiry","delete","logCache","cached","size","setCache","ttlMinutes","set","expiresAt","generateMockData","ticker","dataType","basePrice","marketCap","companyNames","AAPL","MSFT","GOOGL","AMZN","META","TSLA","NVDA","mktCap","pe","pb","beta","sector","industry","enterpriseValueOverEBITDA","debtToEquity","revenueTTM","grossProfitMargin","netProfitMargin","returnOnEquityTTM","returnOnAssetsTTM","effectiveTaxRateTTM","fullTimeEmployees","ipoDate","range","previousClose","volume","currency","netIncome","capex","interestExpense","cashAndCashEquivalents","totalCurrentAssets","totalCurrentLiabilities","freeCashFlow","fetchCompanyProfile","cacheKey","mockData","async","requestId","logApiRequest","profile","logApiResponse","profileFound","catch","fetchFinancialStatements","statement","replace","fetchMarketData","interval","chart","meta","regularMarketPrice","regularMarketVolume","timestamps","prices","indicators","quote","fetchMarketDataAlternative","parseFloat","parseInt","change","changePercent","fetchSECFilings","filingType","count","form","filingDate","accessionNumber","reportDate","acceptanceDateTime","act","primaryDocument","toLowerCase","url","fetchPeerComparables","industryCode","peers","t","slice","peerTicker","peRatio","evToEbitda","priceToBook","peerTickers","validPeers","peerProfile","peerMarket","fetchDCFInputs","incomeStatements","balanceSheets","all","revenues","stmt","reverse","revenueGrowthRates","avgRevenueGrowth","a","b","latestCashFlow","latestIncome","costOfEquity","latestBalance","debtRatio","historicalData","freeCashFlows","fetchLBOInputs","currentEV","evEbitdaMultiple","peerEvEbitdaMultiples","peer","avgPeerMultiple","workingCapital","debtToEbitda","interestCoverage","suggestedPurchasePrice","maxDebtCapacity","validateTicker","getApiStatus","metrics","getMetrics","cacheSize","validation","getCircuitBreakerStatus","performance","uptime","totalRequests","service","totalErrors","averageResponseTime","calculateAverageResponseTime","cacheHitRate","calculateCacheHitRate","availableKeys","totalDuration","duration","hits","hit","miss","getRecentLogs","level","clearMetrics","clear","validateApiKeys","buildAdvancedDCFModel","financials","dcfInputs","price","calculateHistoricalGrowthRates","calculateWACC","estimateGrowthRate","dcfModel","buildAdvancedLBOModel","transactionInputs","peerData","fetchPeerComparison","lboInputs","purchasePrice","exit","calculatePeerAverageMultiple","lboModel","lboModelingEngine","buildLBOModel","returnsAnalysis","irr","multiples","multiple"],"mappings":"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"}
{"version":3,"file":"PortfolioManagement-4gonq3lo.js","sources":["../../src/components/PortfolioBuilder/PortfolioBuilder.jsx","../../src/components/PortfolioAnalytics/PortfolioAnalytics.jsx","../../src/pages/PortfolioManagement.jsx"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { \n  Target, \n  Plus, \n  Trash2, \n  Search, \n  TrendingUp, \n  TrendingDown, \n  BarChart3, \n  PieChart, \n  RefreshCw,\n  Save,\n  RotateCcw,\n  AlertTriangle,\n  CheckCircle\n} from 'lucide-react';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { \n  arrayMove, \n  SortableContext, \n  sortableKeyboardCoordinates, \n  verticalListSortingStrategy \n} from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\nimport secureApiClient from '../../services/secureApiClient';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/formatters';\n\nconst PortfolioBuilder = ({ portfolio, onPortfolioUpdate, marketData }) => {\n  const [builderMode, setBuilderMode] = useState('allocation'); // allocation, optimization, rebalancing\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [targetAllocation, setTargetAllocation] = useState({});\n  const [optimizationSettings, setOptimizationSettings] = useState({\n    objective: 'max_sharpe', // max_sharpe, min_risk, max_return\n    constraints: {\n      maxWeight: 50,\n      minWeight: 0,\n      maxSectorWeight: 30\n    }\n  });\n  const [rebalanceSettings, setRebalanceSettings] = useState({\n    threshold: 5, // 5% deviation threshold\n    cashBuffer: 2000,\n    minimumTrade: 100\n  });\n  const [isDirty, setIsDirty] = useState(false);\n\n  // Initialize target allocation from current holdings\n  React.useEffect(() => {\n    if (portfolio && !Object.keys(targetAllocation).length) {\n      const currentAllocation = {};\n      portfolio.holdings.forEach(holding => {\n        currentAllocation[holding.symbol] = holding.allocation || 0;\n      });\n      setTargetAllocation(currentAllocation);\n    }\n  }, [portfolio, targetAllocation]);\n\n  // Search for stocks to add to portfolio\n  const searchStocks = useCallback(async (query) => {\n    if (!query || query.length < 2) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      // Mock search results - in real implementation, this would search a stock database\n      const mockResults = [\n        { symbol: 'AAPL', name: 'Apple Inc.', sector: 'Technology', marketCap: 3000000000000 },\n        { symbol: 'MSFT', name: 'Microsoft Corporation', sector: 'Technology', marketCap: 2800000000000 },\n        { symbol: 'GOOGL', name: 'Alphabet Inc.', sector: 'Technology', marketCap: 1700000000000 },\n        { symbol: 'AMZN', name: 'Amazon.com Inc.', sector: 'Consumer Discretionary', marketCap: 1500000000000 },\n        { symbol: 'TSLA', name: 'Tesla Inc.', sector: 'Consumer Discretionary', marketCap: 800000000000 },\n        { symbol: 'NVDA', name: 'NVIDIA Corporation', sector: 'Technology', marketCap: 1200000000000 },\n        { symbol: 'META', name: 'Meta Platforms Inc.', sector: 'Technology', marketCap: 900000000000 },\n        { symbol: 'JPM', name: 'JPMorgan Chase & Co.', sector: 'Financials', marketCap: 500000000000 },\n        { symbol: 'JNJ', name: 'Johnson & Johnson', sector: 'Healthcare', marketCap: 450000000000 },\n        { symbol: 'V', name: 'Visa Inc.', sector: 'Technology', marketCap: 500000000000 }\n      ];\n\n      const filtered = mockResults.filter(stock => \n        stock.symbol.toLowerCase().includes(query.toLowerCase()) ||\n        stock.name.toLowerCase().includes(query.toLowerCase())\n      );\n\n      setSearchResults(filtered);\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  }, []);\n\n  // Debounced search\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => searchStocks(searchTerm), 300);\n    return () => clearTimeout(timeoutId);\n  }, [searchTerm, searchStocks]);\n\n  // Calculate allocation totals and validation\n  const allocationAnalysis = useMemo(() => {\n    const holdings = portfolio?.holdings || [];\n    const totalTarget = Object.values(targetAllocation).reduce((sum, val) => sum + (val || 0), 0);\n    const cashAllocation = Math.max(0, 100 - totalTarget);\n    \n    const deviations = holdings.map(holding => {\n      const currentAllocation = holding.allocation || 0;\n      const targetVal = targetAllocation[holding.symbol] || 0;\n      const deviation = Math.abs(currentAllocation - targetVal);\n      return { symbol: holding.symbol, current: currentAllocation, target: targetVal, deviation };\n    });\n\n    const maxDeviation = Math.max(...deviations.map(d => d.deviation), 0);\n    const avgDeviation = deviations.reduce((sum, d) => sum + d.deviation, 0) / Math.max(deviations.length, 1);\n\n    return {\n      totalTarget,\n      cashAllocation,\n      deviations,\n      maxDeviation,\n      avgDeviation,\n      isValid: totalTarget <= 100,\n      needsRebalancing: maxDeviation > rebalanceSettings.threshold\n    };\n  }, [portfolio, targetAllocation, rebalanceSettings.threshold]);\n\n  // Add stock to portfolio\n  const addStock = useCallback(async (stock) => {\n    try {\n      const quote = await secureApiClient.getQuote(stock.symbol);\n      const newHolding = {\n        symbol: stock.symbol,\n        name: stock.name,\n        shares: 0,\n        currentPrice: quote.currentPrice || 100,\n        allocation: 0,\n        value: 0,\n        costBasis: quote.currentPrice || 100\n      };\n\n      const updatedPortfolio = {\n        ...portfolio,\n        holdings: [...portfolio.holdings, newHolding]\n      };\n\n      onPortfolioUpdate(updatedPortfolio);\n      setTargetAllocation(prev => ({ ...prev, [stock.symbol]: 0 }));\n      setIsDirty(true);\n      setSearchTerm('');\n      setSearchResults([]);\n    } catch (error) {\n      console.error('Failed to add stock:', error);\n    }\n  }, [portfolio, onPortfolioUpdate]);\n\n  // Remove stock from portfolio\n  const removeStock = useCallback((symbol) => {\n    const updatedPortfolio = {\n      ...portfolio,\n      holdings: portfolio.holdings.filter(h => h.symbol !== symbol)\n    };\n    \n    onPortfolioUpdate(updatedPortfolio);\n    setTargetAllocation(prev => {\n      const updated = { ...prev };\n      delete updated[symbol];\n      return updated;\n    });\n    setIsDirty(true);\n  }, [portfolio, onPortfolioUpdate]);\n\n  // Update target allocation\n  const updateTargetAllocation = useCallback((symbol, value) => {\n    setTargetAllocation(prev => ({ ...prev, [symbol]: Math.max(0, Math.min(100, value)) }));\n    setIsDirty(true);\n  }, []);\n\n  // Generate rebalancing trades\n  const generateRebalancingTrades = useCallback(() => {\n    if (!portfolio || !allocationAnalysis.needsRebalancing) return [];\n\n    const trades = [];\n    const totalValue = portfolio.totalValue || 100000;\n\n    allocationAnalysis.deviations.forEach(({ symbol, current, target, deviation }) => {\n      if (deviation > rebalanceSettings.threshold) {\n        const holding = portfolio.holdings.find(h => h.symbol === symbol);\n        if (!holding) return;\n\n        const targetValue = (target / 100) * totalValue;\n        const currentValue = holding.value;\n        const tradeDollarAmount = targetValue - currentValue;\n        const tradeShares = Math.round(tradeDollarAmount / holding.currentPrice);\n\n        if (Math.abs(tradeDollarAmount) >= rebalanceSettings.minimumTrade) {\n          trades.push({\n            symbol,\n            action: tradeDollarAmount > 0 ? 'BUY' : 'SELL',\n            shares: Math.abs(tradeShares),\n            dollarAmount: Math.abs(tradeDollarAmount),\n            currentPrice: holding.currentPrice,\n            reason: `Rebalance from ${current.toFixed(1)}% to ${target.toFixed(1)}%`\n          });\n        }\n      }\n    });\n\n    return trades;\n  }, [portfolio, allocationAnalysis, rebalanceSettings]);\n\n  // DnD setup\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      const oldIndex = portfolio.holdings.findIndex(h => h.symbol === active.id);\n      const newIndex = portfolio.holdings.findIndex(h => h.symbol === over.id);\n      \n      const updatedPortfolio = {\n        ...portfolio,\n        holdings: arrayMove(portfolio.holdings, oldIndex, newIndex)\n      };\n      \n      onPortfolioUpdate(updatedPortfolio);\n      setIsDirty(true);\n    }\n  };\n\n  if (!portfolio) {\n    return <div className=\"text-center py-8\">No portfolio selected</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Mode Switcher */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          {[\n            { value: 'allocation', label: 'Allocation', icon: PieChart },\n            { value: 'optimization', label: 'Optimization', icon: Target },\n            { value: 'rebalancing', label: 'Rebalancing', icon: BarChart3 }\n          ].map(({ value, label, icon: Icon }) => (\n            <button\n              key={value}\n              onClick={() => setBuilderMode(value)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                builderMode === value\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {isDirty && (\n            <span className=\"flex items-center space-x-1 text-sm text-orange-600\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span>Unsaved changes</span>\n            </span>\n          )}\n          <button\n            onClick={() => setIsDirty(false)}\n            className=\"flex items-center space-x-2 px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n            <span>Reset</span>\n          </button>\n          <button\n            className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700\"\n          >\n            <Save className=\"w-4 h-4\" />\n            <span>Save</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Left Panel - Portfolio Holdings */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {builderMode === 'allocation' && (\n            <AllocationBuilder\n              portfolio={portfolio}\n              targetAllocation={targetAllocation}\n              onUpdateAllocation={updateTargetAllocation}\n              onRemoveStock={removeStock}\n              allocationAnalysis={allocationAnalysis}\n              handleDragEnd={handleDragEnd}\n              sensors={sensors}\n            />\n          )}\n          \n          {builderMode === 'optimization' && (\n            <OptimizationBuilder\n              portfolio={portfolio}\n              optimizationSettings={optimizationSettings}\n              onSettingsChange={setOptimizationSettings}\n            />\n          )}\n          \n          {builderMode === 'rebalancing' && (\n            <RebalancingBuilder\n              portfolio={portfolio}\n              rebalanceSettings={rebalanceSettings}\n              onSettingsChange={setRebalanceSettings}\n              allocationAnalysis={allocationAnalysis}\n              generateTrades={generateRebalancingTrades}\n            />\n          )}\n        </div>\n\n        {/* Right Panel - Tools & Search */}\n        <div className=\"space-y-6\">\n          {/* Stock Search & Add */}\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Add Securities</h3>\n            \n            <div className=\"relative mb-4\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search stocks by symbol or name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              {isSearching && (\n                <RefreshCw className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 animate-spin\" />\n              )}\n            </div>\n\n            {searchResults.length > 0 && (\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {searchResults.map((stock) => (\n                  <div\n                    key={stock.symbol}\n                    className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                  >\n                    <div>\n                      <div className=\"font-medium text-gray-900\">{stock.symbol}</div>\n                      <div className=\"text-sm text-gray-500\">{stock.name}</div>\n                      <div className=\"text-xs text-gray-400\">{stock.sector}</div>\n                    </div>\n                    <button\n                      onClick={() => addStock(stock)}\n                      disabled={portfolio.holdings.some(h => h.symbol === stock.symbol)}\n                      className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Allocation Summary */}\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Allocation Summary</h3>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Total Allocated:</span>\n                <span className={`font-medium ${allocationAnalysis.isValid ? 'text-gray-900' : 'text-red-600'}`}>\n                  {formatPercentage(allocationAnalysis.totalTarget)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Cash:</span>\n                <span className=\"font-medium text-gray-900\">\n                  {formatPercentage(allocationAnalysis.cashAllocation)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Max Deviation:</span>\n                <span className={`font-medium ${allocationAnalysis.maxDeviation > rebalanceSettings.threshold ? 'text-red-600' : 'text-green-600'}`}>\n                  {formatPercentage(allocationAnalysis.maxDeviation)}\n                </span>\n              </div>\n              \n              {!allocationAnalysis.isValid && (\n                <div className=\"flex items-center space-x-2 p-3 bg-red-50 rounded-lg\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                  <span className=\"text-sm text-red-700\">Total allocation exceeds 100%</span>\n                </div>\n              )}\n              \n              {allocationAnalysis.needsRebalancing && (\n                <div className=\"flex items-center space-x-2 p-3 bg-orange-50 rounded-lg\">\n                  <AlertTriangle className=\"w-4 h-4 text-orange-600\" />\n                  <span className=\"text-sm text-orange-700\">Portfolio needs rebalancing</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Allocation Builder Component\nconst AllocationBuilder = ({ \n  portfolio, \n  targetAllocation, \n  onUpdateAllocation, \n  onRemoveStock, \n  allocationAnalysis,\n  handleDragEnd,\n  sensors \n}) => {\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border\">\n      <div className=\"px-6 py-4 border-b\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Target Allocation</h3>\n        <p className=\"text-sm text-gray-500\">Drag to reorder • Set target percentages for each holding</p>\n      </div>\n\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext\n          items={portfolio.holdings.map(h => h.symbol)}\n          strategy={verticalListSortingStrategy}\n        >\n          <div className=\"p-6 space-y-4\">\n            {portfolio.holdings.map((holding) => (\n              <SortableHoldingRow\n                key={holding.symbol}\n                holding={holding}\n                targetAllocation={targetAllocation[holding.symbol] || 0}\n                onUpdateAllocation={onUpdateAllocation}\n                onRemove={onRemoveStock}\n                deviation={allocationAnalysis.deviations.find(d => d.symbol === holding.symbol)?.deviation || 0}\n              />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n    </div>\n  );\n};\n\n// Sortable Holding Row Component\nconst SortableHoldingRow = ({ holding, targetAllocation, onUpdateAllocation, onRemove, deviation }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: holding.symbol });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className=\"flex items-center space-x-4 p-4 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors\"\n    >\n      <div\n        {...attributes}\n        {...listeners}\n        className=\"cursor-grab active:cursor-grabbing p-1\"\n      >\n        <div className=\"w-2 h-8 bg-gray-300 rounded-full\"></div>\n      </div>\n\n      <div className=\"flex-1\">\n        <div className=\"font-medium text-gray-900\">{holding.symbol}</div>\n        <div className=\"text-sm text-gray-500\">{holding.name}</div>\n      </div>\n\n      <div className=\"text-right\">\n        <div className=\"text-sm text-gray-600\">Current: {formatPercentage(holding.allocation || 0)}</div>\n        {deviation > 0 && (\n          <div className={`text-xs ${deviation > 5 ? 'text-red-600' : 'text-orange-600'}`}>\n            Deviation: {formatPercentage(deviation)}\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"number\"\n          value={targetAllocation}\n          onChange={(e) => onUpdateAllocation(holding.symbol, parseFloat(e.target.value) || 0)}\n          className=\"w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          min=\"0\"\n          max=\"100\"\n          step=\"0.1\"\n        />\n        <span className=\"text-sm text-gray-500\">%</span>\n      </div>\n\n      <button\n        onClick={() => onRemove(holding.symbol)}\n        className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg\"\n      >\n        <Trash2 className=\"w-4 h-4\" />\n      </button>\n    </div>\n  );\n};\n\n// Optimization Builder Component (placeholder)\nconst OptimizationBuilder = ({ portfolio, optimizationSettings, onSettingsChange }) => {\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n      <div className=\"text-center py-12\">\n        <Target className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Portfolio Optimization</h3>\n        <p className=\"text-gray-600 mb-4\">Advanced optimization algorithms coming soon</p>\n        <div className=\"text-sm text-gray-500\">\n          Features: Mean-variance optimization, risk parity, factor-based optimization\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Rebalancing Builder Component\nconst RebalancingBuilder = ({ \n  portfolio, \n  rebalanceSettings, \n  onSettingsChange, \n  allocationAnalysis, \n  generateTrades \n}) => {\n  const trades = generateTrades();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Rebalancing Settings */}\n      <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Rebalancing Settings</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Deviation Threshold\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"number\"\n                value={rebalanceSettings.threshold}\n                onChange={(e) => onSettingsChange(prev => ({ \n                  ...prev, \n                  threshold: parseFloat(e.target.value) || 0 \n                }))}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0.1\"\n                max=\"20\"\n                step=\"0.1\"\n              />\n              <span className=\"text-sm text-gray-500\">%</span>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Cash Buffer\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-500\">$</span>\n              <input\n                type=\"number\"\n                value={rebalanceSettings.cashBuffer}\n                onChange={(e) => onSettingsChange(prev => ({ \n                  ...prev, \n                  cashBuffer: parseFloat(e.target.value) || 0 \n                }))}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0\"\n                step=\"100\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Minimum Trade\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-500\">$</span>\n              <input\n                type=\"number\"\n                value={rebalanceSettings.minimumTrade}\n                onChange={(e) => onSettingsChange(prev => ({ \n                  ...prev, \n                  minimumTrade: parseFloat(e.target.value) || 0 \n                }))}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0\"\n                step=\"50\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Rebalancing Trades */}\n      <div className=\"bg-white rounded-xl shadow-sm border\">\n        <div className=\"px-6 py-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Suggested Trades</h3>\n            {trades.length > 0 && (\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\">\n                {trades.length} trades\n              </span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {trades.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto mb-3\" />\n              <p className=\"text-gray-600\">Portfolio is within rebalancing thresholds</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {trades.map((trade, index) => (\n                <div key={index} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`p-2 rounded-lg ${trade.action === 'BUY' ? 'bg-green-100' : 'bg-red-100'}`}>\n                      {trade.action === 'BUY' ? (\n                        <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                      ) : (\n                        <TrendingDown className=\"w-4 h-4 text-red-600\" />\n                      )}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">\n                        {trade.action} {formatNumber(trade.shares)} shares of {trade.symbol}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">{trade.reason}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium text-gray-900\">\n                      {formatCurrency(trade.dollarAmount)}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      @ {formatCurrency(trade.currentPrice)}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PortfolioBuilder;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  BarChart3, \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  Shield, \n  Target, \n  Activity, \n  Download,\n  RefreshCw\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar\n} from 'recharts';\n\nimport { portfolioCommands } from '../../services/commands/portfolioCommands';\nimport { formatCurrency, formatPercentage, formatNumber } from '../../utils/formatters';\n\nconst PortfolioAnalytics = ({ \n  portfolio, \n  metrics, \n  selectedTimeframe, \n  onTimeframeChange, \n  timeframeOptions \n}) => {\n  const [analyticsData, setAnalyticsData] = useState({\n    riskMetrics: null,\n    correlationMatrix: null,\n    performanceAttribution: null,\n    historicalPerformance: null\n  });\n  const [loading, setLoading] = useState({\n    risk: false,\n    correlation: false,\n    performance: false\n  });\n  const [activeChart, setActiveChart] = useState('performance');\n  const [riskTimeframe, setRiskTimeframe] = useState('252');\n\n  // Calculate portfolio risk metrics using existing portfolio commands\n  const calculateRiskMetrics = useCallback(async () => {\n    if (!portfolio || !portfolio.holdings.length || loading.risk) return;\n\n    setLoading(prev => ({ ...prev, risk: true }));\n    try {\n      const symbols = portfolio.holdings.map(h => h.symbol);\n      const weights = portfolio.holdings.map(h => (h.allocation || 0) / 100);\n\n      // Calculate individual stock risk metrics\n      const individualRiskPromises = symbols.map(async (symbol) => {\n        try {\n          const riskCommand = portfolioCommands.RISK_METRICS;\n          const mockCommand = { parameters: [symbol, parseInt(riskTimeframe)] };\n          const result = await riskCommand.execute(mockCommand, {}, null);\n          return result.data?.metrics || null;\n        } catch (error) {\n          console.warn(`Risk calculation failed for ${symbol}:`, error);\n          return null;\n        }\n      });\n\n      const individualRiskResults = await Promise.all(individualRiskPromises);\n\n      // Aggregate risk metrics\n      const validRisks = individualRiskResults.filter(r => r);\n      const aggregatedMetrics = {\n        portfolioVolatility: calculateWeightedAverage(validRisks.map(r => r.volatility || 0), weights),\n        portfolioBeta: calculateWeightedAverage(validRisks.map(r => r.beta || 1), weights),\n        portfolioSharpe: calculateWeightedAverage(validRisks.map(r => r.sharpeRatio || 0), weights),\n        portfolioVar95: calculateWeightedAverage(validRisks.map(r => r.var95 || 0), weights),\n        portfolioVar99: calculateWeightedAverage(validRisks.map(r => r.var99 || 0), weights),\n        maxDrawdown: Math.max(...validRisks.map(r => r.maxDrawdown || 0)),\n        concentrationRisk: calculateConcentrationRisk(weights),\n        individualMetrics: symbols.map((symbol, index) => ({\n          symbol,\n          weight: weights[index],\n          ...individualRiskResults[index]\n        })).filter(item => item.symbol)\n      };\n\n      setAnalyticsData(prev => ({ \n        ...prev, \n        riskMetrics: aggregatedMetrics \n      }));\n\n    } catch (error) {\n      console.error('Risk metrics calculation failed:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, risk: false }));\n    }\n  }, [portfolio, loading.risk, riskTimeframe]);\n\n  // Calculate correlation matrix\n  const calculateCorrelationMatrix = useCallback(async () => {\n    if (!portfolio || !portfolio.holdings.length || loading.correlation) return;\n\n    setLoading(prev => ({ ...prev, correlation: true }));\n    try {\n      const symbols = portfolio.holdings.map(h => h.symbol);\n      \n      if (symbols.length < 2) {\n        setAnalyticsData(prev => ({ \n          ...prev, \n          correlationMatrix: { message: 'Need at least 2 holdings for correlation analysis' }\n        }));\n        return;\n      }\n\n      const correlationCommand = portfolioCommands.CORRELATION_MATRIX;\n      const mockCommand = { parameters: [symbols] };\n      const result = await correlationCommand.execute(mockCommand, {}, null);\n\n      if (result.type === 'success') {\n        setAnalyticsData(prev => ({ \n          ...prev, \n          correlationMatrix: result.data \n        }));\n      }\n\n    } catch (error) {\n      console.error('Correlation calculation failed:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, correlation: false }));\n    }\n  }, [portfolio, loading.correlation]);\n\n  // Generate historical performance data\n  const generateHistoricalPerformance = useCallback(() => {\n    if (!metrics) return;\n\n    const days = getDaysFromTimeframe(selectedTimeframe);\n    const data = [];\n    const startValue = metrics.totalValue * 0.9;\n    \n    for (let i = 0; i < days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (days - i));\n      \n      const trend = i / days;\n      const volatility = Math.sin(i * 0.1) * 0.02 + Math.random() * 0.01 - 0.005;\n      const value = startValue * (1 + trend * 0.15 + volatility);\n      \n      data.push({\n        date: date.toISOString().split('T')[0],\n        portfolioValue: value,\n        benchmark: startValue * (1 + trend * 0.12)\n      });\n    }\n\n    setAnalyticsData(prev => ({ \n      ...prev, \n      historicalPerformance: data \n    }));\n  }, [metrics, selectedTimeframe]);\n\n  // Calculate performance attribution\n  const calculatePerformanceAttribution = useCallback(() => {\n    if (!portfolio || !metrics) return;\n\n    const attribution = portfolio.holdings.map(holding => {\n      const contribution = (holding.allocation || 0) * (holding.gainLossPercent || 0) / 100;\n      return {\n        symbol: holding.symbol,\n        name: holding.name,\n        allocation: holding.allocation || 0,\n        return: holding.gainLossPercent || 0,\n        contribution,\n        value: holding.value || 0\n      };\n    });\n\n    attribution.sort((a, b) => Math.abs(b.contribution) - Math.abs(a.contribution));\n\n    setAnalyticsData(prev => ({ \n      ...prev, \n      performanceAttribution: attribution \n    }));\n  }, [portfolio, metrics]);\n\n  // Run calculations when dependencies change\n  useEffect(() => {\n    calculateRiskMetrics();\n  }, [calculateRiskMetrics]);\n\n  useEffect(() => {\n    calculateCorrelationMatrix();\n  }, [calculateCorrelationMatrix]);\n\n  useEffect(() => {\n    generateHistoricalPerformance();\n  }, [generateHistoricalPerformance]);\n\n  useEffect(() => {\n    calculatePerformanceAttribution();\n  }, [calculatePerformanceAttribution]);\n\n  if (!portfolio || !metrics) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Analytics Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          {[\n            { value: 'performance', label: 'Performance', icon: TrendingUp },\n            { value: 'risk', label: 'Risk', icon: Shield },\n            { value: 'correlation', label: 'Correlation', icon: Activity },\n            { value: 'attribution', label: 'Attribution', icon: Target }\n          ].map(({ value, label, icon: Icon }) => (\n            <button\n              key={value}\n              onClick={() => setActiveChart(value)}\n              className={`flex items-center space-x-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                activeChart === value\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <label className=\"text-sm font-medium text-gray-600\">Timeframe:</label>\n            <select\n              value={selectedTimeframe}\n              onChange={(e) => onTimeframeChange(e.target.value)}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {timeframeOptions.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <button className=\"flex items-center space-x-2 px-3 py-1.5 border border-gray-300 rounded-md text-sm hover:bg-gray-50\">\n            <Download className=\"w-4 h-4\" />\n            <span>Export</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Performance Chart */}\n      {activeChart === 'performance' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Portfolio Performance</h3>\n              \n              {analyticsData.historicalPerformance && (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={analyticsData.historicalPerformance}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke=\"#6b7280\"\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <YAxis \n                      stroke=\"#6b7280\"\n                      fontSize={12}\n                      tickFormatter={(value) => formatCurrency(value, 0)}\n                    />\n                    <Tooltip \n                      formatter={(value, name) => [formatCurrency(value), name === 'portfolioValue' ? 'Portfolio' : 'Benchmark']}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"portfolioValue\" \n                      stroke=\"#3B82F6\" \n                      strokeWidth={2}\n                      dot={false}\n                      name=\"Portfolio\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"benchmark\" \n                      stroke=\"#10B981\" \n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      dot={false}\n                      name=\"Benchmark\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <PerformanceMetricsCard metrics={metrics} />\n            {analyticsData.performanceAttribution && (\n              <PerformanceAttributionCard attribution={analyticsData.performanceAttribution} />\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Risk Analysis */}\n      {activeChart === 'risk' && analyticsData.riskMetrics && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <RiskMetricsCard riskMetrics={analyticsData.riskMetrics} loading={loading.risk} />\n          <RiskDecompositionCard riskMetrics={analyticsData.riskMetrics} />\n        </div>\n      )}\n\n      {/* Correlation Analysis */}\n      {activeChart === 'correlation' && (\n        <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Correlation Matrix</h3>\n            {loading.correlation && (\n              <RefreshCw className=\"w-4 h-4 text-gray-400 animate-spin\" />\n            )}\n          </div>\n          \n          {analyticsData.correlationMatrix && (\n            <CorrelationMatrix data={analyticsData.correlationMatrix} />\n          )}\n        </div>\n      )}\n\n      {/* Performance Attribution */}\n      {activeChart === 'attribution' && analyticsData.performanceAttribution && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Performance Attribution</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analyticsData.performanceAttribution}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis dataKey=\"symbol\" stroke=\"#6b7280\" fontSize={12} />\n                <YAxis stroke=\"#6b7280\" fontSize={12} tickFormatter={(value) => formatPercentage(value)} />\n                <Tooltip formatter={(value) => [formatPercentage(value), 'Contribution']} />\n                <Bar dataKey=\"contribution\" fill=\"#3B82F6\" radius={[2, 2, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          <AttributionBreakdownCard attribution={analyticsData.performanceAttribution} />\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Component definitions\nconst PerformanceMetricsCard = ({ metrics }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Key Metrics</h3>\n    <div className=\"space-y-3\">\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Total Return:</span>\n        <span className={`font-medium ${metrics.totalGainLossPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n          {formatPercentage(metrics.totalGainLossPercent)}\n        </span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Day Change:</span>\n        <span className={`font-medium ${metrics.dailyChangePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n          {formatPercentage(metrics.dailyChangePercent)}\n        </span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Dividend Yield:</span>\n        <span className=\"font-medium text-gray-900\">\n          {formatPercentage(metrics.dividendYield)}\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nconst PerformanceAttributionCard = ({ attribution }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Top Contributors</h3>\n    <div className=\"space-y-2\">\n      {attribution.slice(0, 5).map((item) => (\n        <div key={item.symbol} className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">{item.symbol}</span>\n          <span className={`text-sm font-medium ${item.contribution >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n            {formatPercentage(item.contribution)}\n          </span>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nconst RiskMetricsCard = ({ riskMetrics, loading }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <div className=\"flex items-center justify-between mb-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">Risk Metrics</h3>\n      {loading && <RefreshCw className=\"w-4 h-4 text-gray-400 animate-spin\" />}\n    </div>\n    \n    <div className=\"grid grid-cols-2 gap-4\">\n      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-blue-600\">\n          {formatPercentage((riskMetrics.portfolioVolatility || 0) * 100)}\n        </div>\n        <div className=\"text-sm text-blue-700\">Volatility</div>\n      </div>\n      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-green-600\">\n          {formatNumber(riskMetrics.portfolioBeta || 0, 2)}\n        </div>\n        <div className=\"text-sm text-green-700\">Beta</div>\n      </div>\n      <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-purple-600\">\n          {formatNumber(riskMetrics.portfolioSharpe || 0, 2)}\n        </div>\n        <div className=\"text-sm text-purple-700\">Sharpe Ratio</div>\n      </div>\n      <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n        <div className=\"text-2xl font-bold text-orange-600\">\n          {formatPercentage(riskMetrics.maxDrawdown || 0)}\n        </div>\n        <div className=\"text-sm text-orange-700\">Max Drawdown</div>\n      </div>\n    </div>\n  </div>\n);\n\nconst RiskDecompositionCard = ({ riskMetrics }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Risk Decomposition</h3>\n    {riskMetrics?.individualMetrics && (\n      <div className=\"space-y-3\">\n        {riskMetrics.individualMetrics.slice(0, 5).map((item) => (\n          <div key={item.symbol} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <div>\n              <div className=\"font-medium text-gray-900\">{item.symbol}</div>\n              <div className=\"text-sm text-gray-500\">Weight: {formatPercentage(item.weight * 100)}</div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm font-medium text-gray-900\">\n                Vol: {formatPercentage((item.volatility || 0) * 100)}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                Beta: {formatNumber(item.beta || 0, 2)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    )}\n  </div>\n);\n\nconst CorrelationMatrix = ({ data }) => {\n  if (!data.correlationMatrix) {\n    return <div className=\"text-center py-8 text-gray-500\">Insufficient data for correlation analysis</div>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {data.correlationMatrix.slice(0, 6).map((correlation, index) => (\n          <div key={index} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <span className=\"text-sm text-gray-600\">{correlation.pair}</span>\n            <div className=\"text-right\">\n              <div className={`text-sm font-medium ${Math.abs(correlation.correlation) > 0.7 ? 'text-red-600' : 'text-green-600'}`}>\n                {formatNumber(correlation.correlation, 2)}\n              </div>\n              <div className=\"text-xs text-gray-500\">{correlation.strength}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst AttributionBreakdownCard = ({ attribution }) => (\n  <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Attribution Breakdown</h3>\n    <div className=\"space-y-3\">\n      {attribution.map((item) => (\n        <div key={item.symbol} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n          <div>\n            <div className=\"font-medium text-gray-900\">{item.symbol}</div>\n            <div className=\"text-sm text-gray-500\">{formatPercentage(item.allocation)} allocation</div>\n          </div>\n          <div className=\"text-right\">\n            <div className={`font-medium ${item.contribution >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {formatPercentage(item.contribution)}\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              {formatPercentage(item.return)} return\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Helper functions\nconst getDaysFromTimeframe = (timeframe) => {\n  const timeframes = {\n    '1D': 1, '1W': 7, '1M': 30, '3M': 90, '6M': 180, '1Y': 365,\n    'YTD': Math.floor((new Date() - new Date(new Date().getFullYear(), 0, 1)) / (1000 * 60 * 60 * 24))\n  };\n  return timeframes[timeframe] || 30;\n};\n\nconst calculateWeightedAverage = (values, weights) => {\n  return values.reduce((sum, value, index) => sum + value * (weights[index] || 0), 0);\n};\n\nconst calculateConcentrationRisk = (weights) => {\n  return Math.max(...weights);\n};\n\nexport default PortfolioAnalytics;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  PieChart, \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  BarChart3, \n  Target, \n  AlertTriangle, \n  Plus, \n  Edit, \n  Trash2,\n  Download,\n  Upload,\n  Settings,\n  Eye,\n  EyeOff\n} from 'lucide-react';\n\nimport SEOHead from '../components/SEO/SEOHead';\nimport secureApiClient from '../services/secureApiClient';\nimport { formatCurrency, formatPercentage, formatNumber } from '../utils/formatters';\nimport PortfolioBuilder from '../components/PortfolioBuilder/PortfolioBuilder';\nimport PortfolioAnalytics from '../components/PortfolioAnalytics/PortfolioAnalytics';\n\nconst PortfolioManagement = () => {\n  const [portfolios, setPortfolios] = useState([]);\n  const [activePortfolio, setActivePortfolio] = useState(null);\n  const [portfolioPerformance, setPortfolioPerformance] = useState(null);\n  const [riskMetrics, setRiskMetrics] = useState(null);\n  const [marketData, setMarketData] = useState({});\n  const [loading, setLoading] = useState({\n    portfolios: false,\n    performance: false,\n    risk: false,\n    market: false\n  });\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedTimeframe, setSelectedTimeframe] = useState('1M');\n  const [viewMode, setViewMode] = useState('overview'); // overview, builder, analytics\n\n  // Initialize with sample portfolio if none exist\n  useEffect(() => {\n    const samplePortfolio = {\n      id: 'sample-portfolio',\n      name: 'Growth Portfolio',\n      description: 'Technology-focused growth portfolio',\n      totalValue: 100000,\n      cash: 5000,\n      holdings: [\n        { symbol: 'AAPL', name: 'Apple Inc.', shares: 100, currentPrice: 175.50, allocation: 35.0, value: 17550, costBasis: 160.00 },\n        { symbol: 'MSFT', name: 'Microsoft Corporation', shares: 80, currentPrice: 335.20, allocation: 30.0, value: 26816, costBasis: 300.00 },\n        { symbol: 'GOOGL', name: 'Alphabet Inc.', shares: 50, currentPrice: 128.45, allocation: 15.0, value: 6422.50, costBasis: 120.00 },\n        { symbol: 'TSLA', name: 'Tesla Inc.', shares: 30, currentPrice: 245.80, allocation: 10.0, value: 7374, costBasis: 200.00 },\n        { symbol: 'NVDA', name: 'NVIDIA Corporation', shares: 25, currentPrice: 425.30, allocation: 10.0, value: 10632.50, costBasis: 400.00 }\n      ]\n    };\n    \n    setPortfolios([samplePortfolio]);\n    setActivePortfolio(samplePortfolio);\n  }, []);\n\n  // Fetch real-time market data for portfolio holdings\n  const fetchMarketData = useCallback(async () => {\n    if (!activePortfolio || loading.market) return;\n    \n    setLoading(prev => ({ ...prev, market: true }));\n    try {\n      const symbols = activePortfolio.holdings.map(h => h.symbol);\n      const marketPromises = symbols.map(symbol => \n        secureApiClient.getQuote(symbol).catch(error => {\n          console.warn(`Failed to fetch data for ${symbol}:`, error);\n          return null;\n        })\n      );\n      \n      const results = await Promise.all(marketPromises);\n      const marketDataMap = {};\n      \n      results.forEach((data, index) => {\n        if (data) {\n          marketDataMap[symbols[index]] = data;\n        }\n      });\n      \n      setMarketData(marketDataMap);\n    } catch (error) {\n      console.error('Failed to fetch market data:', error);\n    } finally {\n      setLoading(prev => ({ ...prev, market: false }));\n    }\n  }, [activePortfolio, loading.market]);\n\n  // Calculate portfolio performance metrics\n  const portfolioMetrics = useMemo(() => {\n    if (!activePortfolio || !marketData) return null;\n\n    let totalValue = activePortfolio.cash || 0;\n    let totalCostBasis = 0;\n    let dailyChange = 0;\n    let dividendYield = 0;\n\n    const updatedHoldings = activePortfolio.holdings.map(holding => {\n      const marketQuote = marketData[holding.symbol];\n      const currentPrice = marketQuote?.currentPrice || holding.currentPrice;\n      const previousClose = marketQuote?.previousClose || holding.currentPrice;\n      const change = marketQuote?.change || 0;\n      \n      const currentValue = holding.shares * currentPrice;\n      const costBasisValue = holding.shares * holding.costBasis;\n      const holdingDailyChange = holding.shares * change;\n      \n      totalValue += currentValue;\n      totalCostBasis += costBasisValue;\n      dailyChange += holdingDailyChange;\n      dividendYield += (marketQuote?.dividendYield || 0) * (currentValue / 100000); // Weighted by portfolio allocation\n      \n      return {\n        ...holding,\n        currentPrice,\n        previousClose,\n        change,\n        value: currentValue,\n        costBasisValue,\n        gainLoss: currentValue - costBasisValue,\n        gainLossPercent: ((currentValue - costBasisValue) / costBasisValue) * 100,\n        allocation: (currentValue / totalValue) * 100,\n        dayChange: holdingDailyChange\n      };\n    });\n\n    const totalGainLoss = totalValue - totalCostBasis;\n    const totalGainLossPercent = (totalGainLoss / totalCostBasis) * 100;\n    const dailyChangePercent = (dailyChange / (totalValue - dailyChange)) * 100;\n\n    return {\n      totalValue,\n      totalCostBasis,\n      totalGainLoss,\n      totalGainLossPercent,\n      dailyChange,\n      dailyChangePercent,\n      dividendYield,\n      holdings: updatedHoldings,\n      cashAllocation: ((activePortfolio.cash || 0) / totalValue) * 100\n    };\n  }, [activePortfolio, marketData]);\n\n  // Fetch market data when active portfolio changes\n  useEffect(() => {\n    fetchMarketData();\n  }, [fetchMarketData]);\n\n  // Auto-refresh market data every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(fetchMarketData, 30000);\n    return () => clearInterval(interval);\n  }, [fetchMarketData]);\n\n  const timeframeOptions = [\n    { value: '1D', label: '1 Day' },\n    { value: '1W', label: '1 Week' },\n    { value: '1M', label: '1 Month' },\n    { value: '3M', label: '3 Months' },\n    { value: '6M', label: '6 Months' },\n    { value: '1Y', label: '1 Year' },\n    { value: 'YTD', label: 'YTD' }\n  ];\n\n  if (!activePortfolio) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <PieChart className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Portfolio Selected</h3>\n          <p className=\"text-gray-600 mb-4\">Create or select a portfolio to get started</p>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Create Portfolio\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <SEOHead\n        title=\"Portfolio Management | FinanceAnalyst Pro\"\n        description=\"Professional portfolio management tools with real-time tracking, risk analysis, and performance analytics\"\n        keywords=\"portfolio management, investment tracking, risk analysis, asset allocation\"\n      />\n\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <PieChart className=\"w-8 h-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Portfolio Management</h1>\n                <p className=\"text-sm text-gray-500\">Real-time portfolio tracking & analysis</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* View Mode Switcher */}\n              <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                {[\n                  { value: 'overview', label: 'Overview', icon: Eye },\n                  { value: 'builder', label: 'Builder', icon: Target },\n                  { value: 'analytics', label: 'Analytics', icon: BarChart3 }\n                ].map(({ value, label, icon: Icon }) => (\n                  <button\n                    key={value}\n                    onClick={() => setViewMode(value)}\n                    className={`flex items-center space-x-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                      viewMode === value\n                        ? 'bg-white text-blue-600 shadow-sm'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    <span>{label}</span>\n                  </button>\n                ))}\n              </div>\n\n              <button\n                onClick={() => setShowCreateModal(true)}\n                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                <span>New Portfolio</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {viewMode === 'overview' && (\n          <PortfolioOverview\n            portfolio={activePortfolio}\n            metrics={portfolioMetrics}\n            marketData={marketData}\n            loading={loading}\n            selectedTimeframe={selectedTimeframe}\n            onTimeframeChange={setSelectedTimeframe}\n            timeframeOptions={timeframeOptions}\n          />\n        )}\n        \n        {viewMode === 'builder' && (\n          <PortfolioBuilder\n            portfolio={activePortfolio}\n            onPortfolioUpdate={setActivePortfolio}\n            marketData={marketData}\n          />\n        )}\n        \n        {viewMode === 'analytics' && (\n          <PortfolioAnalytics\n            portfolio={activePortfolio}\n            metrics={portfolioMetrics}\n            selectedTimeframe={selectedTimeframe}\n            onTimeframeChange={setSelectedTimeframe}\n            timeframeOptions={timeframeOptions}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Portfolio Overview Component\nconst PortfolioOverview = ({ \n  portfolio, \n  metrics, \n  marketData, \n  loading, \n  selectedTimeframe, \n  onTimeframeChange, \n  timeframeOptions \n}) => {\n  if (!metrics) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Portfolio Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Portfolio Value</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(metrics.totalValue)}\n              </p>\n            </div>\n            <div className=\"p-3 bg-blue-100 rounded-lg\">\n              <DollarSign className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Gain/Loss</p>\n              <p className={`text-2xl font-bold ${metrics.totalGainLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatCurrency(metrics.totalGainLoss)}\n              </p>\n              <p className={`text-sm ${metrics.totalGainLossPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatPercentage(metrics.totalGainLossPercent)}\n              </p>\n            </div>\n            <div className={`p-3 rounded-lg ${metrics.totalGainLoss >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n              {metrics.totalGainLoss >= 0 ? (\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-6 h-6 text-red-600\" />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Day Change</p>\n              <p className={`text-2xl font-bold ${metrics.dailyChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatCurrency(metrics.dailyChange)}\n              </p>\n              <p className={`text-sm ${metrics.dailyChangePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {formatPercentage(metrics.dailyChangePercent)}\n              </p>\n            </div>\n            <div className={`p-3 rounded-lg ${metrics.dailyChange >= 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n              {metrics.dailyChange >= 0 ? (\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-6 h-6 text-red-600\" />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Dividend Yield</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatPercentage(metrics.dividendYield)}\n              </p>\n              <p className=\"text-sm text-gray-500\">Weighted Average</p>\n            </div>\n            <div className=\"p-3 bg-purple-100 rounded-lg\">\n              <Target className=\"w-6 h-6 text-purple-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Holdings Table */}\n      <div className=\"bg-white rounded-xl shadow-sm border\">\n        <div className=\"px-6 py-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Holdings</h3>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm font-medium text-gray-600\">Timeframe:</label>\n                <select\n                  value={selectedTimeframe}\n                  onChange={(e) => onTimeframeChange(e.target.value)}\n                  className=\"px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  {timeframeOptions.map(option => (\n                    <option key={option.value} value={option.value}>\n                      {option.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              {loading.market && (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Symbol / Name\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Shares\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Price\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Market Value\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Allocation\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Day Change\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Total Gain/Loss\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {metrics.holdings.map((holding) => (\n                <tr key={holding.symbol} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">{holding.symbol}</div>\n                      <div className=\"text-sm text-gray-500\">{holding.name}</div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">\n                    {formatNumber(holding.shares)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">\n                    {formatCurrency(holding.currentPrice)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">\n                    {formatCurrency(holding.value)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">\n                    {formatPercentage(holding.allocation)}\n                  </td>\n                  <td className={`px-6 py-4 whitespace-nowrap text-right text-sm ${holding.dayChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {formatCurrency(holding.dayChange)}\n                  </td>\n                  <td className={`px-6 py-4 whitespace-nowrap text-right text-sm ${holding.gainLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    <div>{formatCurrency(holding.gainLoss)}</div>\n                    <div className=\"text-xs\">({formatPercentage(holding.gainLossPercent)})</div>\n                  </td>\n                </tr>\n              ))}\n              \n              {/* Cash Row */}\n              {portfolio.cash > 0 && (\n                <tr className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">CASH</div>\n                      <div className=\"text-sm text-gray-500\">Cash & Cash Equivalents</div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">-</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">-</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">\n                    {formatCurrency(portfolio.cash)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900\">\n                    {formatPercentage(metrics.cashAllocation)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-500\">-</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-500\">-</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default PortfolioManagement;\n"],"names":["PortfolioBuilder","portfolio","onPortfolioUpdate","marketData","builderMode","setBuilderMode","useState","searchTerm","setSearchTerm","searchResults","setSearchResults","isSearching","setIsSearching","targetAllocation","setTargetAllocation","optimizationSettings","setOptimizationSettings","objective","constraints","maxWeight","minWeight","maxSectorWeight","rebalanceSettings","setRebalanceSettings","threshold","cashBuffer","minimumTrade","isDirty","setIsDirty","React","useEffect","Object","keys","length","currentAllocation","holdings","forEach","holding","symbol","allocation","searchStocks","useCallback","async","query","filtered","name","sector","marketCap","filter","stock","toLowerCase","includes","error","timeoutId","setTimeout","clearTimeout","allocationAnalysis","useMemo","totalTarget","values","reduce","sum","val","cashAllocation","Math","max","deviations","map","targetVal","deviation","abs","current","target","maxDeviation","d","avgDeviation","isValid","needsRebalancing","addStock","quote","secureApiClient","getQuote","newHolding","shares","currentPrice","value","costBasis","updatedPortfolio","prev","removeStock","h","updated","updateTargetAllocation","min","generateRebalancingTrades","trades","totalValue","find","tradeDollarAmount","tradeShares","round","push","action","dollarAmount","reason","toFixed","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","jsxs","className","children","jsx","label","icon","PieChart","Target","BarChart3","Icon","onClick","AlertTriangle","RotateCcw","Save","AllocationBuilder","onUpdateAllocation","onRemoveStock","handleDragEnd","event","active","over","id","oldIndex","findIndex","newIndex","arrayMove","OptimizationBuilder","onSettingsChange","RebalancingBuilder","generateTrades","Search","type","placeholder","onChange","e","RefreshCw","disabled","some","Plus","formatPercentage","DndContext","collisionDetection","closestCenter","onDragEnd","SortableContext","items","strategy","verticalListSortingStrategy","SortableHoldingRow","onRemove","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","style","CSS","Transform","toString","opacity","ref","parseFloat","step","Trash2","CheckCircle","trade","index","TrendingUp","TrendingDown","formatNumber","formatCurrency","PortfolioAnalytics","metrics","selectedTimeframe","onTimeframeChange","timeframeOptions","analyticsData","setAnalyticsData","riskMetrics","correlationMatrix","performanceAttribution","historicalPerformance","loading","setLoading","risk","correlation","performance","activeChart","setActiveChart","riskTimeframe","setRiskTimeframe","calculateRiskMetrics","symbols","weights","individualRiskPromises","riskCommand","portfolioCommands","RISK_METRICS","mockCommand","parameters","parseInt","result","execute","data","individualRiskResults","Promise","all","validRisks","r","aggregatedMetrics","portfolioVolatility","calculateWeightedAverage","volatility","portfolioBeta","beta","portfolioSharpe","sharpeRatio","portfolioVar95","var95","portfolioVar99","var99","maxDrawdown","concentrationRisk","calculateConcentrationRisk","individualMetrics","weight","item","calculateCorrelationMatrix","message","correlationCommand","CORRELATION_MATRIX","generateHistoricalPerformance","days","getDaysFromTimeframe","startValue","i","date","Date","setDate","getDate","trend","sin","random","toISOString","split","portfolioValue","benchmark","calculatePerformanceAttribution","attribution","contribution","gainLossPercent","return","sort","a","b","Shield","Activity","option","Download","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","tickFormatter","toLocaleDateString","YAxis","Tooltip","formatter","labelFormatter","Line","strokeWidth","dot","PerformanceMetricsCard","PerformanceAttributionCard","RiskMetricsCard","RiskDecompositionCard","CorrelationMatrix","BarChart","Bar","fill","radius","AttributionBreakdownCard","totalGainLossPercent","dailyChangePercent","dividendYield","slice","pair","strength","timeframe","YTD","floor","getFullYear","PortfolioManagement","portfolios","setPortfolios","activePortfolio","setActivePortfolio","portfolioPerformance","setPortfolioPerformance","setRiskMetrics","setMarketData","market","showCreateModal","setShowCreateModal","setSelectedTimeframe","viewMode","setViewMode","samplePortfolio","description","cash","fetchMarketData","marketPromises","catch","results","marketDataMap","portfolioMetrics","totalCostBasis","dailyChange","updatedHoldings","marketQuote","previousClose","change","currentValue","costBasisValue","holdingDailyChange","gainLoss","dayChange","totalGainLoss","interval","setInterval","clearInterval","SEOHead","title","keywords","Eye","PortfolioOverview","DollarSign"],"mappings":"u0BA6BA,MAAMA,EAAmB,EAAGC,YAAWC,oBAAmBC,iBACxD,MAAOC,EAAaC,GAAkBC,EAAAA,SAAS,eACxCC,EAAYC,GAAiBF,EAAAA,SAAS,KACtCG,EAAeC,GAAoBJ,EAAAA,SAAS,KAC5CK,EAAaC,GAAkBN,EAAAA,UAAS,IACxCO,EAAkBC,GAAuBR,EAAAA,SAAS,CAAA,IAClDS,EAAsBC,GAA2BV,WAAS,CAC/DW,UAAW,aACXC,YAAa,CACXC,UAAW,GACXC,UAAW,EACXC,gBAAiB,OAGdC,EAAmBC,GAAwBjB,WAAS,CACzDkB,UAAW,EACXC,WAAY,IACZC,aAAc,OAETC,EAASC,GAActB,EAAAA,UAAS,GAGvCuB,EAAMC,UAAU,KACd,GAAI7B,IAAc8B,OAAOC,KAAKnB,GAAkBoB,OAAQ,CACtD,MAAMC,EAAoB,CAAA,EAC1BjC,EAAUkC,SAASC,QAAQC,IACzBH,EAAkBG,EAAQC,QAAUD,EAAQE,YAAc,IAE5DzB,EAAoBoB,EACtB,GACC,CAACjC,EAAWY,IAGf,MAAM2B,EAAeC,cAAYC,MAAOC,IACtC,IAAKA,GAASA,EAAMV,OAAS,EAC3BvB,EAAiB,QADnB,CAKAE,GAAe,GACf,IAEE,MAaMgC,EAbc,CAClB,CAAEN,OAAQ,OAAQO,KAAM,aAAcC,OAAQ,aAAcC,UAAW,MACvE,CAAET,OAAQ,OAAQO,KAAM,wBAAyBC,OAAQ,aAAcC,UAAW,OAClF,CAAET,OAAQ,QAASO,KAAM,gBAAiBC,OAAQ,aAAcC,UAAW,OAC3E,CAAET,OAAQ,OAAQO,KAAM,kBAAmBC,OAAQ,yBAA0BC,UAAW,OACxF,CAAET,OAAQ,OAAQO,KAAM,aAAcC,OAAQ,yBAA0BC,UAAW,MACnF,CAAET,OAAQ,OAAQO,KAAM,qBAAsBC,OAAQ,aAAcC,UAAW,OAC/E,CAAET,OAAQ,OAAQO,KAAM,sBAAuBC,OAAQ,aAAcC,UAAW,MAChF,CAAET,OAAQ,MAAOO,KAAM,uBAAwBC,OAAQ,aAAcC,UAAW,MAChF,CAAET,OAAQ,MAAOO,KAAM,oBAAqBC,OAAQ,aAAcC,UAAW,OAC7E,CAAET,OAAQ,IAAKO,KAAM,YAAaC,OAAQ,aAAcC,UAAW,OAGxCC,UAC3BC,EAAMX,OAAOY,cAAcC,SAASR,EAAMO,gBAC1CD,EAAMJ,KAAKK,cAAcC,SAASR,EAAMO,gBAG1CxC,EAAiBkC,EACnB,OAASQ,GAEP1C,EAAiB,GACnB,CAAA,QACEE,GAAe,EACjB,CA7BA,GA8BC,IAGHiB,EAAMC,UAAU,KACd,MAAMuB,EAAYC,WAAW,IAAMd,EAAajC,GAAa,KAC7D,MAAO,IAAMgD,aAAaF,IACzB,CAAC9C,EAAYiC,IAGhB,MAAMgB,EAAqBC,EAAAA,QAAQ,KACjC,MAAMtB,EAAWlC,GAAWkC,UAAY,GAClCuB,EAAc3B,OAAO4B,OAAO9C,GAAkB+C,OAAO,CAACC,EAAKC,IAAQD,GAAOC,GAAO,GAAI,GACrFC,EAAiBC,KAAKC,IAAI,EAAG,IAAMP,GAEnCQ,EAAa/B,EAASgC,IAAI9B,IAC9B,MAAMH,EAAoBG,EAAQE,YAAc,EAC1C6B,EAAYvD,EAAiBwB,EAAQC,SAAW,EAChD+B,EAAYL,KAAKM,IAAIpC,EAAoBkC,GAC/C,MAAO,CAAE9B,OAAQD,EAAQC,OAAQiC,QAASrC,EAAmBsC,OAAQJ,EAAWC,eAG5EI,EAAeT,KAAKC,OAAOC,EAAWC,IAAIO,GAAKA,EAAEL,WAAY,GAC7DM,EAAeT,EAAWN,OAAO,CAACC,EAAKa,IAAMb,EAAMa,EAAEL,UAAW,GAAKL,KAAKC,IAAIC,EAAWjC,OAAQ,GAEvG,MAAO,CACLyB,cACAK,iBACAG,aACAO,eACAE,eACAC,QAASlB,GAAe,IACxBmB,iBAAkBJ,EAAenD,EAAkBE,YAEpD,CAACvB,EAAWY,EAAkBS,EAAkBE,YAG7CsD,EAAWrC,cAAYC,MAAOO,IAClC,IACE,MAAM8B,QAAcC,EAAgBC,SAAShC,EAAMX,QAC7C4C,EAAa,CACjB5C,OAAQW,EAAMX,OACdO,KAAMI,EAAMJ,KACZsC,OAAQ,EACRC,aAAcL,EAAMK,cAAgB,IACpC7C,WAAY,EACZ8C,MAAO,EACPC,UAAWP,EAAMK,cAAgB,KAG7BG,EAAmB,IACpBtF,EACHkC,SAAU,IAAIlC,EAAUkC,SAAU+C,IAGpChF,EAAkBqF,GAClBzE,EAAoB0E,IAAA,IAAcA,EAAM,CAACvC,EAAMX,QAAS,KACxDV,GAAW,GACXpB,EAAc,IACdE,EAAiB,GACnB,OAAS0C,GAET,GACC,CAACnD,EAAWC,IAGTuF,EAAchD,cAAaH,IAC/B,MAAMiD,EAAmB,IACpBtF,EACHkC,SAAUlC,EAAUkC,SAASa,OAAO0C,GAAKA,EAAEpD,SAAWA,IAGxDpC,EAAkBqF,GAClBzE,EAAoB0E,IAClB,MAAMG,EAAU,IAAKH,GAErB,cADOG,EAAQrD,GACRqD,IAET/D,GAAW,IACV,CAAC3B,EAAWC,IAGT0F,EAAyBnD,EAAAA,YAAY,CAACH,EAAQ+C,KAClDvE,UAAkC0E,EAAMlD,CAACA,GAAS0B,KAAKC,IAAI,EAAGD,KAAK6B,IAAI,IAAKR,OAC5EzD,GAAW,IACV,IAGGkE,EAA4BrD,EAAAA,YAAY,KAC5C,IAAKxC,IAAcuD,EAAmBqB,uBAAyB,GAE/D,MAAMkB,EAAS,GACTC,EAAa/F,EAAU+F,YAAc,IAyB3C,OAvBAxC,EAAmBU,WAAW9B,QAAQ,EAAGE,SAAQiC,UAASC,SAAQH,gBAChE,GAAIA,EAAY/C,EAAkBE,UAAW,CAC3C,MAAMa,EAAUpC,EAAUkC,SAAS8D,KAAKP,GAAKA,EAAEpD,SAAWA,GAC1D,IAAKD,EAAS,OAEd,MAEM6D,EAFe1B,EAAS,IAAOwB,EAChB3D,EAAQgD,MAEvBc,EAAcnC,KAAKoC,MAAMF,EAAoB7D,EAAQ+C,cAEvDpB,KAAKM,IAAI4B,IAAsB5E,EAAkBI,cACnDqE,EAAOM,KAAK,CACV/D,SACAgE,OAAQJ,EAAoB,EAAI,MAAQ,OACxCf,OAAQnB,KAAKM,IAAI6B,GACjBI,aAAcvC,KAAKM,IAAI4B,GACvBd,aAAc/C,EAAQ+C,aACtBoB,OAAQ,kBAAkBjC,EAAQkC,QAAQ,UAAUjC,EAAOiC,QAAQ,OAGzE,IAGKV,GACN,CAAC9F,EAAWuD,EAAoBlC,IAG7BoF,EAAUC,EACdC,EAAUC,GACVD,EAAUE,EAAgB,CACxBC,iBAAkBC,KAoBtB,OAAK/G,EAKHgH,EAAAA,KAAC,MAAA,CAAIC,UAAU,YAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,kCACZC,SAAA,CACC,CAAE9B,MAAO,aAAcgC,MAAO,aAAcC,KAAMC,GAClD,CAAElC,MAAO,eAAgBgC,MAAO,eAAgBC,KAAME,GACtD,CAAEnC,MAAO,cAAegC,MAAO,cAAeC,KAAMG,IACpDtD,IAAI,EAAGkB,QAAOgC,QAAOC,KAAMI,KAC3BT,EAAAA,KAAC,SAAA,CAECU,QAAS,IAAMtH,EAAegF,GAC9B6B,UAAW,2FACT9G,IAAgBiF,EACZ,mCACA,qCAGN8B,SAAA,CAAAC,EAAAA,IAACM,EAAA,CAAKR,UAAU,YAChBE,EAAAA,IAAC,QAAMD,SAAAE,MATFhC,MAcX4B,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACZC,SAAA,CAAAxF,GACCsF,EAAAA,KAAC,OAAA,CAAKC,UAAU,sDACdC,SAAA,CAAAC,EAAAA,IAACQ,EAAA,CAAcV,UAAU,YACzBE,EAAAA,IAAC,QAAKD,SAAA,uBAGVF,EAAAA,KAAC,SAAA,CACCU,QAAS,IAAM/F,GAAW,GAC1BsF,UAAU,qGAEVC,SAAA,CAAAC,EAAAA,IAACS,EAAA,CAAUX,UAAU,YACrBE,EAAAA,IAAC,QAAKD,SAAA,aAERF,EAAAA,KAAC,SAAA,CACCC,UAAU,sGAEVC,SAAA,CAAAC,EAAAA,IAACU,EAAA,CAAKZ,UAAU,YAChBE,EAAAA,IAAC,QAAKD,SAAA,kBAKZF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wCAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,0BACZC,SAAA,CAAgB,eAAhB/G,GACCgH,EAAAA,IAACW,EAAA,CACC9H,YACAY,mBACAmH,mBAAoBpC,EACpBqC,cAAexC,EACfjC,qBACA0E,cA9EWC,IACrB,MAAMC,OAAEA,EAAAC,KAAQA,GAASF,EACzB,GAAIC,EAAOE,KAAOD,EAAKC,GAAI,CACzB,MAAMC,EAAWtI,EAAUkC,SAASqG,aAAe9C,EAAEpD,SAAW8F,EAAOE,IACjEG,EAAWxI,EAAUkC,SAASqG,aAAe9C,EAAEpD,SAAW+F,EAAKC,IAE/D/C,EAAmB,IACpBtF,EACHkC,SAAUuG,EAAUzI,EAAUkC,SAAUoG,EAAUE,IAGpDvI,EAAkBqF,GAClB3D,GAAW,EACb,GAkEU8E,YAIa,iBAAhBtG,GACCgH,EAAAA,IAACuB,EAAA,CACC1I,YACAc,uBACA6H,iBAAkB5H,IAIL,gBAAhBZ,GACCgH,EAAAA,IAACyB,EAAA,CACC5I,YACAqB,oBACAsH,iBAAkBrH,EAClBiC,qBACAsF,eAAgBhD,OAMtBmB,EAAAA,KAAC,MAAA,CAAIC,UAAU,YAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,mBAEzDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,gBACbC,SAAA,CAAAC,EAAAA,IAAC2B,EAAA,CAAO7B,UAAU,6EAClBE,EAAAA,IAAC,QAAA,CACC4B,KAAK,OACLC,YAAY,qCACZ5D,MAAO9E,EACP2I,SAAWC,GAAM3I,EAAc2I,EAAE3E,OAAOa,OACxC6B,UAAU,iHAEXvG,GACCyG,EAAAA,IAACgC,EAAA,CAAUlC,UAAU,8FAIxBzG,EAAcwB,OAAS,GACtBmF,EAAAA,IAAC,MAAA,CAAIF,UAAU,qCACZC,SAAA1G,EAAc0D,IAAKlB,GAClBgE,EAAAA,KAAC,MAAA,CAECC,UAAU,2FAEVC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,4BAA6BC,SAAAlE,EAAMX,SAClD8E,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAyBC,WAAMtE,OAC9CuE,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAyBC,WAAMrE,YAEhDsE,EAAAA,IAAC,SAAA,CACCO,QAAS,IAAM7C,EAAS7B,GACxBoG,SAAUpJ,EAAUkC,SAASmH,QAAU5D,EAAEpD,SAAWW,EAAMX,QAC1D4E,UAAU,gGAEVC,SAAAC,EAAAA,IAACmC,EAAA,CAAKrC,UAAU,gBAbbjE,EAAMX,cAsBrB2E,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,uBAEzDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gBAAgBC,SAAA,qBAChCC,EAAAA,IAAC,OAAA,CAAKF,UAAW,gBAAe1D,EAAmBoB,QAAU,gBAAkB,gBAC5EuC,SAAAqC,EAAiBhG,EAAmBE,kBAGzCuD,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gBAAgBC,SAAA,gBAC/B,OAAA,CAAKD,UAAU,4BACbC,SAAAqC,EAAiBhG,EAAmBO,qBAGzCkD,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gBAAgBC,SAAA,mBAChCC,EAAAA,IAAC,OAAA,CAAKF,UAAW,gBAAe1D,EAAmBiB,aAAenD,EAAkBE,UAAY,eAAiB,kBAC9G2F,SAAAqC,EAAiBhG,EAAmBiB,oBAIvCjB,EAAmBoB,SACnBqC,EAAAA,KAAC,MAAA,CAAIC,UAAU,uDACbC,SAAA,CAAAC,EAAAA,IAACQ,EAAA,CAAcV,UAAU,yBACzBE,EAAAA,IAAC,OAAA,CAAKF,UAAU,uBAAuBC,SAAA,qCAI1C3D,EAAmBqB,kBAClBoC,OAAC,MAAA,CAAIC,UAAU,0DACbC,SAAA,CAAAC,EAAAA,IAACQ,EAAA,CAAcV,UAAU,4BACzBE,EAAAA,IAAC,OAAA,CAAKF,UAAU,0BAA0BC,SAAA,kDApKjDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,mBAAmBC,SAAA,2BAgLvCY,EAAoB,EACxB9H,YACAY,mBACAmH,qBACAC,gBACAzE,qBACA0E,gBACAxB,aAGEO,EAAAA,KAAC,MAAA,CAAIC,UAAU,uCACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,sCAAsCC,SAAA,sBACpDC,EAAAA,IAAC,IAAA,CAAEF,UAAU,wBAAwBC,SAAA,iEAGvCC,EAAAA,IAACqC,EAAA,CACC/C,UACAgD,mBAAoBC,EACpBC,UAAW1B,EAEXf,SAAAC,EAAAA,IAACyC,EAAA,CACCC,MAAO7J,EAAUkC,SAASgC,IAAIuB,GAAKA,EAAEpD,QACrCyH,SAAUC,EAEV7C,SAAAC,EAAAA,IAAC,OAAIF,UAAU,gBACZC,WAAUhF,SAASgC,IAAK9B,GACvB+E,EAAAA,IAAC6C,EAAA,CAEC5H,UACAxB,iBAAkBA,EAAiBwB,EAAQC,SAAW,EACtD0F,qBACAkC,SAAUjC,EACV5D,UAAWb,EAAmBU,WAAW+B,KAAKvB,GAAKA,EAAEpC,SAAWD,EAAQC,SAAS+B,WAAa,GALzFhC,EAAQC,kBAgBvB2H,EAAqB,EAAG5H,UAASxB,mBAAkBmH,qBAAoBkC,WAAU7F,gBACrF,MAAM8F,WACJA,EAAAC,UACAA,EAAAC,WACAA,EAAAC,UACAA,EAAAC,WACAA,EAAAC,WACAA,GACEC,EAAY,CAAEnC,GAAIjG,EAAQC,SAExBoI,EAAQ,CACZJ,UAAWK,EAAIC,UAAUC,SAASP,GAClCC,aACAO,QAASN,EAAa,GAAM,GAG9B,OACEvD,EAAAA,KAAC,MAAA,CACC8D,IAAKV,EACLK,QACAxD,UAAU,4GAEVC,SAAA,CAAAC,EAAAA,IAAC,MAAA,IACK+C,KACAC,EACJlD,UAAU,yCAEVC,SAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,uCAGjBD,EAAAA,KAAC,MAAA,CAAIC,UAAU,SACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,4BAA6BC,SAAA9E,EAAQC,SACpD8E,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAyBC,WAAQtE,UAGlDoE,EAAAA,KAAC,MAAA,CAAIC,UAAU,aACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBAAwBC,SAAA,CAAA,YAAUqC,EAAiBnH,EAAQE,YAAc,MACvF8B,EAAY,GACX4C,EAAAA,KAAC,MAAA,CAAIC,UAAW,YAAW7C,EAAY,EAAI,eAAiB,mBAAqB8C,SAAA,CAAA,cACnEqC,EAAiBnF,SAKnC4C,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,QAAA,CACC4B,KAAK,SACL3D,MAAOxE,EACPqI,SAAWC,GAAMnB,EAAmB3F,EAAQC,OAAQ0I,WAAW7B,EAAE3E,OAAOa,QAAU,GAClF6B,UAAU,4GACVrB,IAAI,IACJ5B,IAAI,MACJgH,KAAK,QAEP7D,EAAAA,IAAC,OAAA,CAAKF,UAAU,wBAAwBC,SAAA,SAG1CC,EAAAA,IAAC,SAAA,CACCO,QAAS,IAAMuC,EAAS7H,EAAQC,QAChC4E,UAAU,8CAEVC,SAAAC,EAAAA,IAAC8D,EAAA,CAAOhE,UAAU,kBAOpByB,EAAsB,EAAG1I,YAAWc,uBAAsB6H,4BAE3D,MAAA,CAAI1B,UAAU,2CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oBACbC,SAAA,CAAAC,EAAAA,IAACI,EAAA,CAAON,UAAU,yCAClBE,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,2BACzDC,EAAAA,IAAC,IAAA,CAAEF,UAAU,qBAAqBC,SAAA,iDAClCC,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAwBC,SAAA,sFASzC0B,EAAqB,EACzB5I,YACAqB,oBACAsH,mBACApF,qBACAsF,qBAEA,MAAM/C,EAAS+C,IAEf,OACE7B,EAAAA,KAAC,MAAA,CAAIC,UAAU,YAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,yBAEzDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wCACbC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAMF,UAAU,+CAA+CC,SAAA,wBAGhEF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,QAAA,CACC4B,KAAK,SACL3D,MAAO/D,EAAkBE,UACzB0H,SAAWC,GAAMP,EAAiBpD,IAAA,IAC7BA,EACHhE,UAAWwJ,WAAW7B,EAAE3E,OAAOa,QAAU,KAE3C6B,UAAU,yGACVrB,IAAI,MACJ5B,IAAI,KACJgH,KAAK,QAEP7D,EAAAA,IAAC,OAAA,CAAKF,UAAU,wBAAwBC,SAAA,mBAI3C,MAAA,CACCA,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAMF,UAAU,+CAA+CC,SAAA,gBAGhEF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,wBAAwBC,SAAA,MACxCC,EAAAA,IAAC,QAAA,CACC4B,KAAK,SACL3D,MAAO/D,EAAkBG,WACzByH,SAAWC,GAAMP,EAAiBpD,IAAA,IAC7BA,EACH/D,WAAYuJ,WAAW7B,EAAE3E,OAAOa,QAAU,KAE5C6B,UAAU,yGACVrB,IAAI,IACJoF,KAAK,qBAKV,MAAA,CACC9D,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAMF,UAAU,+CAA+CC,SAAA,kBAGhEF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,wBAAwBC,SAAA,MACxCC,EAAAA,IAAC,QAAA,CACC4B,KAAK,SACL3D,MAAO/D,EAAkBI,aACzBwH,SAAWC,GAAMP,EAAiBpD,IAAA,IAC7BA,EACH9D,aAAcsJ,WAAW7B,EAAE3E,OAAOa,QAAU,KAE9C6B,UAAU,yGACVrB,IAAI,IACJoF,KAAK,mBAQfhE,EAAAA,KAAC,MAAA,CAAIC,UAAU,uCACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,qBACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,sCAAsCC,SAAA,qBACnDpB,EAAO9D,OAAS,GACfgF,EAAAA,KAAC,OAAA,CAAKC,UAAU,2DACbC,SAAA,CAAApB,EAAO9D,OAAO,kBAMvBmF,EAAAA,IAAC,MAAA,CAAIF,UAAU,MACZC,SAAkB,IAAlBpB,EAAO9D,OACNgF,EAAAA,KAAC,MAAA,CAAIC,UAAU,mBACbC,SAAA,CAAAC,EAAAA,IAAC+D,EAAA,CAAYjE,UAAU,0CACvBE,EAAAA,IAAC,IAAA,CAAEF,UAAU,gBAAgBC,SAAA,kDAG/BC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,SAAApB,EAAO5B,IAAI,CAACiH,EAAOC,IAClBpE,EAAAA,KAAC,MAAA,CAAgBC,UAAU,0EACzBC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAW,mBAAmC,QAAjBkE,EAAM9E,OAAmB,eAAiB,cACzEa,SAAiB,QAAjBiE,EAAM9E,OACLc,EAAAA,IAACkE,GAAWpE,UAAU,2BAEtBE,EAAAA,IAACmE,EAAA,CAAarE,UAAU,kCAG3B,MAAA,CACCC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4BACZC,SAAA,CAAAiE,EAAM9E,OAAO,IAAEkF,EAAaJ,EAAMjG,QAAQ,cAAYiG,EAAM9I,UAE/D8E,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAyBC,WAAMX,eAGlDS,EAAAA,KAAC,MAAA,CAAIC,UAAU,aACbC,SAAA,CAAAC,MAAC,OAAIF,UAAU,4BACZC,SAAAsE,EAAeL,EAAM7E,gBAExBU,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBAAwBC,SAAA,CAAA,KAClCsE,EAAeL,EAAMhG,sBArBpBiG,eC1mBpBK,EAAqB,EACzBzL,YACA0L,UACAC,oBACAC,oBACAC,uBAEA,MAAOC,EAAeC,GAAoB1L,WAAS,CACjD2L,YAAa,KACbC,kBAAmB,KACnBC,uBAAwB,KACxBC,sBAAuB,QAElBC,EAASC,GAAchM,WAAS,CACrCiM,MAAM,EACNC,aAAa,EACbC,aAAa,KAERC,EAAaC,GAAkBrM,EAAAA,SAAS,gBACxCsM,EAAeC,GAAoBvM,EAAAA,SAAS,OAG7CwM,EAAuBrK,EAAAA,YAAYC,UACvC,GAAKzC,GAAcA,EAAUkC,SAASF,SAAUoK,EAAQE,KAAxD,CAEAD,UAAyB9G,EAAM+G,MAAM,KACrC,IACE,MAAMQ,EAAU9M,EAAUkC,SAASgC,IAAIuB,GAAKA,EAAEpD,QACxC0K,EAAU/M,EAAUkC,SAASgC,QAAUuB,EAAEnD,YAAc,GAAK,KAG5D0K,EAAyBF,EAAQ5I,IAAIzB,MAAOJ,IAChD,IACE,MAAM4K,EAAcC,EAAkBC,aAChCC,EAAc,CAAEC,WAAY,CAAChL,EAAQiL,SAASX,KAC9CY,QAAeN,EAAYO,QAAQJ,EAAa,CAAA,EAAI,MAC1D,OAAOG,EAAOE,MAAM/B,SAAW,IACjC,OAASvI,GAEP,OAAO,IACT,IAGIuK,QAA8BC,QAAQC,IAAIZ,GAG1Ca,EAAaH,EAAsB3K,OAAO+K,GAAKA,GAC/CC,EAAoB,CACxBC,oBAAqBC,GAAyBJ,EAAW3J,OAAS4J,EAAEI,YAAc,GAAInB,GACtFoB,cAAeF,GAAyBJ,EAAW3J,OAAS4J,EAAEM,MAAQ,GAAIrB,GAC1EsB,gBAAiBJ,GAAyBJ,EAAW3J,OAAS4J,EAAEQ,aAAe,GAAIvB,GACnFwB,eAAgBN,GAAyBJ,EAAW3J,OAAS4J,EAAEU,OAAS,GAAIzB,GAC5E0B,eAAgBR,GAAyBJ,EAAW3J,OAAS4J,EAAEY,OAAS,GAAI3B,GAC5E4B,YAAa5K,KAAKC,OAAO6J,EAAW3J,IAAI4J,GAAKA,EAAEa,aAAe,IAC9DC,kBAAmBC,GAA2B9B,GAC9C+B,kBAAmBhC,EAAQ5I,IAAI,CAAC7B,EAAQ+I,KAAA,CACtC/I,SACA0M,OAAQhC,EAAQ3B,MACbsC,EAAsBtC,MACvBrI,OAAOiM,GAAQA,EAAK3M,SAG1B0J,EAAiBxG,IAAA,IACZA,EACHyG,YAAa+B,IAGjB,OAAS5K,GAET,CAAA,QACEkJ,UAAyB9G,EAAM+G,MAAM,IACvC,CAhD8D,GAiD7D,CAACtM,EAAWoM,EAAQE,KAAMK,IAGvBsC,EAA6BzM,EAAAA,YAAYC,UAC7C,GAAKzC,GAAcA,EAAUkC,SAASF,SAAUoK,EAAQG,YAAxD,CAEAF,UAAyB9G,EAAMgH,aAAa,KAC5C,IACE,MAAMO,EAAU9M,EAAUkC,SAASgC,IAAIuB,GAAKA,EAAEpD,QAE9C,GAAIyK,EAAQ9K,OAAS,EAKnB,YAJA+J,EAAiBxG,IAAA,IACZA,EACH0G,kBAAmB,CAAEiD,QAAS,wDAKlC,MAAMC,EAAqBjC,EAAkBkC,mBACvChC,EAAc,CAAEC,WAAY,CAACP,IAC7BS,QAAe4B,EAAmB3B,QAAQJ,EAAa,CAAA,EAAI,MAE7C,YAAhBG,EAAOxE,MACTgD,EAAiBxG,IAAA,IACZA,EACH0G,kBAAmBsB,EAAOE,OAIhC,OAAStK,GAET,CAAA,QACEkJ,UAAyB9G,EAAMgH,aAAa,IAC9C,CA7BqE,GA8BpE,CAACvM,EAAWoM,EAAQG,cAGjB8C,EAAgC7M,EAAAA,YAAY,KAChD,IAAKkJ,EAAS,OAEd,MAAM4D,EAAOC,GAAqB5D,GAC5B8B,EAAO,GACP+B,EAAkC,GAArB9D,EAAQ3F,WAE3B,IAAA,IAAS0J,EAAI,EAAGA,EAAIH,EAAMG,IAAK,CAC7B,MAAMC,MAAWC,KACjBD,EAAKE,QAAQF,EAAKG,WAAaP,EAAOG,IAEtC,MAAMK,EAAQL,EAAIH,EAEZlK,EAAQoK,GAAc,EAAY,IAARM,GADO,IAApB/L,KAAKgM,IAAQ,GAAJN,GAAkC,IAAhB1L,KAAKiM,SAAkB,OAGrEvC,EAAKrH,KAAK,CACRsJ,KAAMA,EAAKO,cAAcC,MAAM,KAAK,GACpCC,eAAgB/K,EAChBgL,UAAWZ,GAAc,EAAY,IAARM,IAEjC,CAEA/D,EAAiBxG,IAAA,IACZA,EACH4G,sBAAuBsB,MAExB,CAAC/B,EAASC,IAGP0E,EAAkC7N,EAAAA,YAAY,KAClD,IAAKxC,IAAc0L,EAAS,OAE5B,MAAM4E,EAActQ,EAAUkC,SAASgC,IAAI9B,IACzC,MAAMmO,GAAgBnO,EAAQE,YAAc,IAAMF,EAAQoO,iBAAmB,GAAK,IAClF,MAAO,CACLnO,OAAQD,EAAQC,OAChBO,KAAMR,EAAQQ,KACdN,WAAYF,EAAQE,YAAc,EAClCmO,OAAQrO,EAAQoO,iBAAmB,EACnCD,eACAnL,MAAOhD,EAAQgD,OAAS,KAI5BkL,EAAYI,KAAK,CAACC,EAAGC,IAAM7M,KAAKM,IAAIuM,EAAEL,cAAgBxM,KAAKM,IAAIsM,EAAEJ,eAEjExE,EAAiBxG,IAAA,IACZA,EACH2G,uBAAwBoE,MAEzB,CAACtQ,EAAW0L,IAmBf,OAhBA7J,EAAAA,UAAU,KACRgL,KACC,CAACA,IAEJhL,EAAAA,UAAU,KACRoN,KACC,CAACA,IAEJpN,EAAAA,UAAU,KACRwN,KACC,CAACA,IAEJxN,EAAAA,UAAU,KACRwO,KACC,CAACA,IAECrQ,GAAc0L,EASjB1E,EAAAA,KAAC,MAAA,CAAIC,UAAU,YAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,kCACZC,SAAA,CACC,CAAE9B,MAAO,cAAegC,MAAO,cAAeC,KAAMgE,GACpD,CAAEjG,MAAO,OAAQgC,MAAO,OAAQC,KAAMwJ,GACtC,CAAEzL,MAAO,cAAegC,MAAO,cAAeC,KAAMyJ,GACpD,CAAE1L,MAAO,cAAegC,MAAO,cAAeC,KAAME,IACpDrD,IAAI,EAAGkB,QAAOgC,QAAOC,KAAMI,KAC3BT,EAAAA,KAAC,SAAA,CAECU,QAAS,IAAMgF,EAAetH,GAC9B6B,UAAW,6FACTwF,IAAgBrH,EACZ,mCACA,qCAGN8B,SAAA,CAAAC,EAAAA,IAACM,EAAA,CAAKR,UAAU,YAChBE,EAAAA,IAAC,QAAMD,SAAAE,MATFhC,MAcX4B,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAMF,UAAU,oCAAoCC,SAAA,eACrDC,EAAAA,IAAC,SAAA,CACC/B,MAAOuG,EACP1C,SAAWC,GAAM0C,EAAkB1C,EAAE3E,OAAOa,OAC5C6B,UAAU,0GAETC,SAAA2E,EAAiB3H,IAAI6M,GACpB5J,EAAAA,IAAC,SAAA,CAA0B/B,MAAO2L,EAAO3L,MACtC8B,SAAA6J,EAAO3J,OADG2J,EAAO3L,aAO1B4B,EAAAA,KAAC,SAAA,CAAOC,UAAU,qGAChBC,SAAA,CAAAC,EAAAA,IAAC6J,EAAA,CAAS/J,UAAU,YACpBE,EAAAA,IAAC,QAAKD,SAAA,oBAMK,gBAAhBuF,GACCzF,OAAC,MAAA,CAAIC,UAAU,wCACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,gBACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,0BAExD4E,EAAcK,uBACbhF,EAAAA,IAAC8J,EAAA,CAAoBC,MAAM,OAAOC,OAAQ,IACxCjK,SAAAF,EAAAA,KAACoK,EAAA,CAAU3D,KAAM3B,EAAcK,sBAC7BjF,SAAA,CAAAC,EAAAA,IAACkK,EAAA,CAAcC,gBAAgB,MAAMC,OAAO,YAC5CpK,EAAAA,IAACqK,EAAA,CACCC,QAAQ,OACRF,OAAO,UACPG,SAAU,GACVC,cAAgBvM,GAAU,IAAIuK,KAAKvK,GAAOwM,uBAE5CzK,EAAAA,IAAC0K,EAAA,CACCN,OAAO,UACPG,SAAU,GACVC,cAAgBvM,GAAUoG,EAAepG,EAAO,KAElD+B,EAAAA,IAAC2K,EAAA,CACCC,UAAW,CAAC3M,EAAOxC,IAAS,CAAC4I,EAAepG,GAAiB,mBAATxC,EAA4B,YAAc,aAC9FoP,eAAiB5M,GAAU,IAAIuK,KAAKvK,GAAOwM,uBAE7CzK,EAAAA,IAAC8K,EAAA,CACClJ,KAAK,WACL0I,QAAQ,iBACRF,OAAO,UACPW,YAAa,EACbC,KAAK,EACLvP,KAAK,cAEPuE,EAAAA,IAAC8K,EAAA,CACClJ,KAAK,WACL0I,QAAQ,YACRF,OAAO,UACPW,YAAa,EACbZ,gBAAgB,MAChBa,KAAK,EACLvP,KAAK,wBAQjBoE,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAC,MAACiL,IAAuB1G,YACvBI,EAAcI,wBACb/E,MAACkL,GAAA,CAA2B/B,YAAaxE,EAAcI,+BAO9C,SAAhBO,GAA0BX,EAAcE,aACvChF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wCACbC,SAAA,CAAAC,MAACmL,IAAgBtG,YAAaF,EAAcE,YAAaI,QAASA,EAAQE,OAC1EnF,EAAAA,IAACoL,GAAA,CAAsBvG,YAAaF,EAAcE,iBAKrC,gBAAhBS,GACCzF,OAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,sCAAsCC,SAAA,uBACnDkF,EAAQG,aACPpF,EAAAA,IAACgC,EAAA,CAAUlC,UAAU,0CAIxB6E,EAAcG,mBACb9E,MAACqL,GAAA,CAAkB/E,KAAM3B,EAAcG,uBAM5B,gBAAhBQ,GAAiCX,EAAcI,wBAC9ClF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wCACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,4BACzDC,EAAAA,IAAC8J,EAAA,CAAoBC,MAAM,OAAOC,OAAQ,IACxCjK,SAAAF,EAAAA,KAACyL,EAAA,CAAShF,KAAM3B,EAAcI,uBAC5BhF,SAAA,CAAAC,EAAAA,IAACkK,EAAA,CAAcC,gBAAgB,MAAMC,OAAO,kBAC3CC,EAAA,CAAMC,QAAQ,SAASF,OAAO,UAAUG,SAAU,KACnDvK,EAAAA,IAAC0K,EAAA,CAAMN,OAAO,UAAUG,SAAU,GAAIC,cAAgBvM,GAAUmE,EAAiBnE,KACjF+B,MAAC2K,EAAA,CAAQC,UAAY3M,GAAU,CAACmE,EAAiBnE,GAAQ,kBACzD+B,EAAAA,IAACuL,EAAA,CAAIjB,QAAQ,eAAekB,KAAK,UAAUC,OAAQ,CAAC,EAAG,EAAG,EAAG,aAKnEzL,EAAAA,IAAC0L,GAAA,CAAyBvC,YAAaxE,EAAcI,+BAzJzD/E,MAAC,OAAIF,UAAU,yCACbC,eAAC,MAAA,CAAID,UAAU,oEAgKjBmL,GAAyB,EAAG1G,aAChC1E,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,gBACzDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,YACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gBAAgBC,SAAA,kBAChCC,EAAAA,IAAC,OAAA,CAAKF,UAAW,gBAAeyE,EAAQoH,sBAAwB,EAAI,iBAAmB,gBACpF5L,SAAAqC,EAAiBmC,EAAQoH,2BAG9B9L,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gBAAgBC,SAAA,gBAChCC,EAAAA,IAAC,OAAA,CAAKF,UAAW,gBAAeyE,EAAQqH,oBAAsB,EAAI,iBAAmB,gBAClF7L,SAAAqC,EAAiBmC,EAAQqH,yBAG9B/L,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gBAAgBC,SAAA,0BAC/B,OAAA,CAAKD,UAAU,4BACbC,SAAAqC,EAAiBmC,EAAQsH,0BAO9BX,GAA6B,EAAG/B,iBACpCtJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,qBACzDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,WAAY+L,MAAM,EAAG,GAAG/O,IAAK8K,GAC5BhI,EAAAA,KAAC,MAAA,CAAsBC,UAAU,oCAC/BC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,wBAAyBC,SAAA8H,EAAK3M,SAC9C8E,EAAAA,IAAC,OAAA,CAAKF,UAAW,wBAAuB+H,EAAKuB,cAAgB,EAAI,iBAAmB,gBACjFrJ,SAAAqC,EAAiByF,EAAKuB,kBAHjBvB,EAAK3M,cAWjBiQ,GAAkB,EAAGtG,cAAaI,aACtCpF,OAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,sCAAsCC,SAAA,iBACnDkF,GAAWjF,EAAAA,IAACgC,EAAA,CAAUlC,UAAU,0CAGnCD,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,wCACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,mCACZC,SAAAqC,EAA0D,KAAxCyC,EAAYgC,qBAAuB,MAExD7G,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAwBC,SAAA,kBAEzCF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yCACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,oCACZC,SAAAqE,EAAaS,EAAYmC,eAAiB,EAAG,KAEhDhH,EAAAA,IAAC,MAAA,CAAIF,UAAU,yBAAyBC,SAAA,YAE1CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,0CACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,qCACZC,SAAAqE,EAAaS,EAAYqC,iBAAmB,EAAG,KAElDlH,EAAAA,IAAC,MAAA,CAAIF,UAAU,0BAA0BC,SAAA,oBAE3CF,EAAAA,KAAC,MAAA,CAAIC,UAAU,0CACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,qCACZC,WAAiB8E,EAAY2C,aAAe,KAE/CxH,EAAAA,IAAC,MAAA,CAAIF,UAAU,0BAA0BC,SAAA,0BAM3CqL,GAAwB,EAAGvG,iBAC/BhF,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,uBACxD8E,GAAa8C,mBACZ3H,EAAAA,IAAC,OAAIF,UAAU,YACZC,WAAY4H,kBAAkBmE,MAAM,EAAG,GAAG/O,IAAK8K,GAC9ChI,OAAC,MAAA,CAAsBC,UAAU,0EAC/BC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,4BAA6BC,SAAA8H,EAAK3M,SACjD2E,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBAAwBC,SAAA,CAAA,WAASqC,EAA+B,IAAdyF,EAAKD,cAExE/H,EAAAA,KAAC,MAAA,CAAIC,UAAU,aACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCAAoCC,SAAA,CAAA,QAC3CqC,EAA0C,KAAxByF,EAAKd,YAAc,OAE7ClH,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBAAwBC,SAAA,CAAA,SAC9BqE,EAAayD,EAAKZ,MAAQ,EAAG,WAVhCY,EAAK3M,cAoBnBmQ,GAAoB,EAAG/E,UACtBA,EAAKxB,kBAKR9E,MAAC,OAAIF,UAAU,YACbC,eAAC,MAAA,CAAID,UAAU,wCACZC,SAAAuG,EAAKxB,kBAAkBgH,MAAM,EAAG,GAAG/O,IAAI,CAACqI,EAAanB,IACpDpE,EAAAA,KAAC,MAAA,CAAgBC,UAAU,0EACzBC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,wBAAyBC,SAAAqF,EAAY2G,OACrDlM,EAAAA,KAAC,MAAA,CAAIC,UAAU,aACbC,SAAA,CAAAC,MAAC,OAAIF,UAAW,wBAAuBlD,KAAKM,IAAIkI,EAAYA,aAAe,GAAM,eAAiB,kBAC/FrF,SAAAqE,EAAagB,EAAYA,YAAa,KAEzCpF,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAyBC,WAAYiM,gBAN9C/H,QAPTjE,EAAAA,IAAC,MAAA,CAAIF,UAAU,iCAAiCC,SAAA,+CAsBrD2L,GAA2B,EAAGvC,iBAClCtJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,0BACzDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,YACZC,SAAAoJ,EAAYpM,IAAK8K,GAChBhI,EAAAA,KAAC,MAAA,CAAsBC,UAAU,0EAC/BC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,4BAA6BC,SAAA8H,EAAK3M,SACjD2E,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBAAyBC,SAAA,CAAAqC,EAAiByF,EAAK1M,YAAY,oBAE5E0E,EAAAA,KAAC,MAAA,CAAIC,UAAU,aACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAW,gBAAe+H,EAAKuB,cAAgB,EAAI,iBAAmB,gBACxErJ,SAAAqC,EAAiByF,EAAKuB,gBAEzBvJ,EAAAA,KAAC,MAAA,CAAIC,UAAU,wBACZC,SAAA,CAAAqC,EAAiByF,EAAKyB,QAAQ,kBAV3BzB,EAAK3M,cAoBjBkN,GAAwB6D,IACT,CACjB,KAAM,EAAG,KAAM,EAAG,KAAM,GAAI,KAAM,GAAI,KAAM,IAAK,KAAM,IACvDC,IAAOtP,KAAKuP,WAAW3D,KAAS,IAAIA,MAAA,IAASA,MAAO4D,cAAe,EAAG,YAEtDH,IAAc,IAG5BnF,GAA2B,CAACvK,EAAQqJ,IACjCrJ,EAAOC,OAAO,CAACC,EAAKwB,EAAOgG,IAAUxH,EAAMwB,GAAS2H,EAAQ3B,IAAU,GAAI,GAG7EyD,GAA8B9B,GAC3BhJ,KAAKC,OAAO+I,GC7ffyG,GAAsB,KAC1B,MAAOC,EAAYC,GAAiBrT,EAAAA,SAAS,KACtCsT,EAAiBC,GAAsBvT,EAAAA,SAAS,OAChDwT,EAAsBC,GAA2BzT,EAAAA,SAAS,OAC1D2L,EAAa+H,GAAkB1T,EAAAA,SAAS,OACxCH,EAAY8T,GAAiB3T,EAAAA,SAAS,CAAA,IACtC+L,EAASC,GAAchM,WAAS,CACrCoT,YAAY,EACZjH,aAAa,EACbF,MAAM,EACN2H,QAAQ,KAEHC,EAAiBC,GAAsB9T,EAAAA,UAAS,IAChDsL,EAAmByI,GAAwB/T,EAAAA,SAAS,OACpDgU,EAAUC,GAAejU,EAAAA,SAAS,YAGzCwB,EAAAA,UAAU,KACR,MAAM0S,EAAkB,CACtBlM,GAAI,mBACJzF,KAAM,mBACN4R,YAAa,sCACbzO,WAAY,IACZ0O,KAAM,IACNvS,SAAU,CACR,CAAEG,OAAQ,OAAQO,KAAM,aAAcsC,OAAQ,IAAKC,aAAc,MAAQ7C,WAAY,GAAM8C,MAAO,MAAOC,UAAW,KACpH,CAAEhD,OAAQ,OAAQO,KAAM,wBAAyBsC,OAAQ,GAAIC,aAAc,MAAQ7C,WAAY,GAAM8C,MAAO,MAAOC,UAAW,KAC9H,CAAEhD,OAAQ,QAASO,KAAM,gBAAiBsC,OAAQ,GAAIC,aAAc,OAAQ7C,WAAY,GAAM8C,MAAO,OAASC,UAAW,KACzH,CAAEhD,OAAQ,OAAQO,KAAM,aAAcsC,OAAQ,GAAIC,aAAc,MAAQ7C,WAAY,GAAM8C,MAAO,KAAMC,UAAW,KAClH,CAAEhD,OAAQ,OAAQO,KAAM,qBAAsBsC,OAAQ,GAAIC,aAAc,MAAQ7C,WAAY,GAAM8C,MAAO,QAAUC,UAAW,OAIlIqO,EAAc,CAACa,IACfX,EAAmBW,IAClB,IAGH,MAAMG,EAAkBlS,EAAAA,YAAYC,UAClC,GAAKkR,IAAmBvH,EAAQ6H,OAAhC,CAEA5H,UAAyB9G,EAAM0O,QAAQ,KACvC,IACE,MAAMnH,EAAU6G,EAAgBzR,SAASgC,IAAIuB,GAAKA,EAAEpD,QAC9CsS,EAAiB7H,EAAQ5I,OAC7Ba,EAAgBC,SAAS3C,GAAQuS,MAAMzR,GAE9B,OAIL0R,QAAgBlH,QAAQC,IAAI+G,GAC5BG,EAAgB,CAAA,EAEtBD,EAAQ1S,QAAQ,CAACsL,EAAMrC,KACjBqC,IACFqH,EAAchI,EAAQ1B,IAAUqC,KAIpCuG,EAAcc,EAChB,OAAS3R,GAET,CAAA,QACEkJ,UAAyB9G,EAAM0O,QAAQ,IACzC,CA1BwC,GA2BvC,CAACN,EAAiBvH,EAAQ6H,SAGvBc,EAAmBvR,EAAAA,QAAQ,KAC/B,IAAKmQ,IAAoBzT,EAAY,OAAO,KAE5C,IAAI6F,EAAa4N,EAAgBc,MAAQ,EACrCO,EAAiB,EACjBC,EAAc,EACdjC,EAAgB,EAEpB,MAAMkC,EAAkBvB,EAAgBzR,SAASgC,IAAI9B,IACnD,MAAM+S,EAAcjV,EAAWkC,EAAQC,QACjC8C,EAAegQ,GAAahQ,cAAgB/C,EAAQ+C,aACpDiQ,EAAgBD,GAAaC,eAAiBhT,EAAQ+C,aACtDkQ,EAASF,GAAaE,QAAU,EAEhCC,EAAelT,EAAQ8C,OAASC,EAChCoQ,EAAiBnT,EAAQ8C,OAAS9C,EAAQiD,UAC1CmQ,EAAqBpT,EAAQ8C,OAASmQ,EAO5C,OALAtP,GAAcuP,EACdN,GAAkBO,EAClBN,GAAeO,EACfxC,IAAkBmC,GAAanC,eAAiB,IAAMsC,EAAe,KAE9D,IACFlT,EACH+C,eACAiQ,gBACAC,SACAjQ,MAAOkQ,EACPC,iBACAE,SAAUH,EAAeC,EACzB/E,iBAAmB8E,EAAeC,GAAkBA,EAAkB,IACtEjT,WAAagT,EAAevP,EAAc,IAC1C2P,UAAWF,KAITG,EAAgB5P,EAAaiP,EAInC,MAAO,CACLjP,aACAiP,iBACAW,gBACA7C,qBAP4B6C,EAAgBX,EAAkB,IAQ9DC,cACAlC,mBAR0BkC,GAAelP,EAAakP,GAAgB,IAStEjC,gBACA9Q,SAAUgT,EACVpR,gBAAkB6P,EAAgBc,MAAQ,GAAK1O,EAAc,MAE9D,CAAC4N,EAAiBzT,IAGrB2B,EAAAA,UAAU,KACR6S,KACC,CAACA,IAGJ7S,EAAAA,UAAU,KACR,MAAM+T,EAAWC,YAAYnB,EAAiB,KAC9C,MAAO,IAAMoB,cAAcF,IAC1B,CAAClB,IAEJ,MAAM7I,EAAmB,CACvB,CAAEzG,MAAO,KAAMgC,MAAO,SACtB,CAAEhC,MAAO,KAAMgC,MAAO,UACtB,CAAEhC,MAAO,KAAMgC,MAAO,WACtB,CAAEhC,MAAO,KAAMgC,MAAO,YACtB,CAAEhC,MAAO,KAAMgC,MAAO,YACtB,CAAEhC,MAAO,KAAMgC,MAAO,UACtB,CAAEhC,MAAO,MAAOgC,MAAO,QAGzB,OAAKuM,EAmBH3M,EAAAA,KAAC,MAAA,CAAIC,UAAU,0BACbC,SAAA,CAAAC,EAAAA,IAAC4O,EAAA,CACCC,MAAM,4CACNxB,YAAY,4GACZyB,SAAS,+EAIX9O,EAAAA,IAAC,MAAA,CAAIF,UAAU,8BACbC,SAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yCACbC,SAAAF,OAAC,MAAA,CAAIC,UAAU,yCACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAACG,EAAA,CAASL,UAAU,iCACnB,MAAA,CACCC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kCAAkCC,SAAA,yBAChDC,EAAAA,IAAC,IAAA,CAAEF,UAAU,wBAAwBC,SAAA,kDAIzCF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BAEbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,kCACZC,SAAA,CACC,CAAE9B,MAAO,WAAYgC,MAAO,WAAYC,KAAM6O,GAC9C,CAAE9Q,MAAO,UAAWgC,MAAO,UAAWC,KAAME,GAC5C,CAAEnC,MAAO,YAAagC,MAAO,YAAaC,KAAMG,IAChDtD,IAAI,EAAGkB,QAAOgC,QAAOC,KAAMI,KAC3BT,EAAAA,KAAC,SAAA,CAECU,QAAS,IAAM4M,EAAYlP,GAC3B6B,UAAW,6FACToN,IAAajP,EACT,mCACA,qCAGN8B,SAAA,CAAAC,EAAAA,IAACM,EAAA,CAAKR,UAAU,YAChBE,EAAAA,IAAC,QAAMD,SAAAE,MATFhC,MAcX4B,EAAAA,KAAC,SAAA,CACCU,QAAS,IAAMyM,GAAmB,GAClClN,UAAU,8GAEVC,SAAA,CAAAC,EAAAA,IAACmC,EAAA,CAAKrC,UAAU,YAChBE,EAAAA,IAAC,QAAKD,SAAA,+BAQhBF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8CACZC,SAAA,CAAa,aAAbmN,GACClN,EAAAA,IAACgP,GAAA,CACCnW,UAAW2T,EACXjI,QAASqJ,EACT7U,aACAkM,UACAT,oBACAC,kBAAmBwI,EACnBvI,qBAIU,YAAbwI,GACClN,EAAAA,IAACpH,EAAA,CACCC,UAAW2T,EACX1T,kBAAmB2T,EACnB1T,eAIU,cAAbmU,GACClN,EAAAA,IAACsE,EAAA,CACCzL,UAAW2T,EACXjI,QAASqJ,EACTpJ,oBACAC,kBAAmBwI,EACnBvI,iCAnGL,MAAA,CAAI5E,UAAU,2DACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACbC,SAAA,CAAAC,EAAAA,IAACG,EAAA,CAASL,UAAU,yCACpBE,EAAAA,IAAC,KAAA,CAAGF,UAAU,2CAA2CC,SAAA,0BACzDC,EAAAA,IAAC,IAAA,CAAEF,UAAU,qBAAqBC,SAAA,gDAClCC,EAAAA,IAAC,SAAA,CACCO,QAAS,IAAMyM,GAAmB,GAClClN,UAAU,kFACXC,SAAA,2BAoGLiP,GAAoB,EACxBnW,YACA0L,UACAxL,aACAkM,UACAT,oBACAC,oBACAC,sBAEKH,EASH1E,EAAAA,KAAC,MAAA,CAAIC,UAAU,YAEbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,uDACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,2CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,oCAAoCC,SAAA,0BAChD,IAAA,CAAED,UAAU,mCACVC,SAAAsE,EAAeE,EAAQ3F,iBAG5BoB,EAAAA,IAAC,OAAIF,UAAU,6BACbC,eAACkP,EAAA,CAAWnP,UAAU,uCAK3B,MAAA,CAAIA,UAAU,2CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,oCAAoCC,SAAA,oBACjDC,EAAAA,IAAC,IAAA,CAAEF,UAAW,uBAAsByE,EAAQiK,eAAiB,EAAI,iBAAmB,gBACjFzO,SAAAsE,EAAeE,EAAQiK,iBAE1BxO,EAAAA,IAAC,IAAA,CAAEF,UAAW,YAAWyE,EAAQoH,sBAAwB,EAAI,iBAAmB,gBAC7E5L,SAAAqC,EAAiBmC,EAAQoH,2BAG9B3L,EAAAA,IAAC,OAAIF,UAAW,mBAAkByE,EAAQiK,eAAiB,EAAI,eAAiB,cAC7EzO,SAAAwE,EAAQiK,eAAiB,EACxBxO,EAAAA,IAACkE,GAAWpE,UAAU,2BAEtBE,EAAAA,IAACmE,EAAA,CAAarE,UAAU,sCAM/B,MAAA,CAAIA,UAAU,2CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,oCAAoCC,SAAA,eACjDC,EAAAA,IAAC,IAAA,CAAEF,UAAW,uBAAsByE,EAAQuJ,aAAe,EAAI,iBAAmB,gBAC/E/N,SAAAsE,EAAeE,EAAQuJ,eAE1B9N,EAAAA,IAAC,IAAA,CAAEF,UAAW,YAAWyE,EAAQqH,oBAAsB,EAAI,iBAAmB,gBAC3E7L,SAAAqC,EAAiBmC,EAAQqH,yBAG9B5L,EAAAA,IAAC,OAAIF,UAAW,mBAAkByE,EAAQuJ,aAAe,EAAI,eAAiB,cAC3E/N,SAAAwE,EAAQuJ,aAAe,EACtB9N,EAAAA,IAACkE,GAAWpE,UAAU,2BAEtBE,EAAAA,IAACmE,EAAA,CAAarE,UAAU,sCAM/B,MAAA,CAAIA,UAAU,2CACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAF,OAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,oCAAoCC,SAAA,yBAChD,IAAA,CAAED,UAAU,mCACVC,SAAAqC,EAAiBmC,EAAQsH,iBAE5B7L,EAAAA,IAAC,IAAA,CAAEF,UAAU,wBAAwBC,SAAA,wBAEvCC,EAAAA,IAAC,OAAIF,UAAU,+BACbC,eAACK,EAAA,CAAON,UAAU,sCAO1BD,EAAAA,KAAC,MAAA,CAAIC,UAAU,uCACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,qBACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,sCAAsCC,SAAA,aACpDF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BACbC,SAAA,CAAAC,EAAAA,IAAC,QAAA,CAAMF,UAAU,oCAAoCC,SAAA,eACrDC,EAAAA,IAAC,SAAA,CACC/B,MAAOuG,EACP1C,SAAWC,GAAM0C,EAAkB1C,EAAE3E,OAAOa,OAC5C6B,UAAU,0GAETC,SAAA2E,EAAiB3H,IAAI6M,GACpB5J,EAAAA,IAAC,SAAA,CAA0B/B,MAAO2L,EAAO3L,MACtC8B,SAAA6J,EAAO3J,OADG2J,EAAO3L,aAMzBgH,EAAQ6H,QACP9M,EAAAA,IAAC,MAAA,CAAIF,UAAU,+EAMtB,MAAA,CAAIA,UAAU,kBACbC,SAAAF,EAAAA,KAAC,QAAA,CAAMC,UAAU,SACfC,SAAA,CAAAC,MAAC,QAAA,CAAMF,UAAU,aACfC,SAAAF,EAAAA,KAAC,KAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,iFAAiFC,SAAA,kBAG/FC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kFAAkFC,SAAA,WAGhGC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kFAAkFC,SAAA,UAGhGC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kFAAkFC,SAAA,iBAGhGC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kFAAkFC,SAAA,eAGhGC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kFAAkFC,SAAA,eAGhGC,EAAAA,IAAC,KAAA,CAAGF,UAAU,kFAAkFC,SAAA,yBAKpGF,EAAAA,KAAC,QAAA,CAAMC,UAAU,oCACdC,SAAA,CAAAwE,EAAQxJ,SAASgC,IAAK9B,GACrB4E,OAAC,KAAA,CAAwBC,UAAU,mBACjCC,SAAA,CAAAC,MAAC,KAAA,CAAGF,UAAU,8BACZC,SAAAF,EAAAA,KAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,oCAAqCC,SAAA9E,EAAQC,SAC5D8E,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAyBC,WAAQtE,kBAGnD,KAAA,CAAGqE,UAAU,+DACXC,SAAAqE,EAAanJ,EAAQ8C,gBAEvB,KAAA,CAAG+B,UAAU,+DACXC,SAAAsE,EAAepJ,EAAQ+C,sBAEzB,KAAA,CAAG8B,UAAU,+DACXC,SAAAsE,EAAepJ,EAAQgD,eAEzB,KAAA,CAAG6B,UAAU,+DACXC,SAAAqC,EAAiBnH,EAAQE,cAE5B6E,EAAAA,IAAC,KAAA,CAAGF,UAAW,mDAAkD7E,EAAQsT,WAAa,EAAI,iBAAmB,gBAC1GxO,SAAAsE,EAAepJ,EAAQsT,aAE1B1O,EAAAA,KAAC,MAAGC,UAAW,mDAAkD7E,EAAQqT,UAAY,EAAI,iBAAmB,gBAC1GvO,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAKD,SAAAsE,EAAepJ,EAAQqT,YAC7BzO,EAAAA,KAAC,MAAA,CAAIC,UAAU,UAAUC,SAAA,CAAA,IAAEqC,EAAiBnH,EAAQoO,iBAAiB,YAxBhEpO,EAAQC,SA8BlBrC,EAAUyU,KAAO,GAChBzN,EAAAA,KAAC,KAAA,CAAGC,UAAU,mBACZC,SAAA,CAAAC,MAAC,KAAA,CAAGF,UAAU,8BACZC,SAAAF,EAAAA,KAAC,MAAA,CACCE,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,oCAAoCC,SAAA,SACnDC,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBAAwBC,SAAA,iCAG3CC,EAAAA,IAAC,KAAA,CAAGF,UAAU,+DAA+DC,SAAA,MAC7EC,EAAAA,IAAC,KAAA,CAAGF,UAAU,+DAA+DC,SAAA,YAC5E,KAAA,CAAGD,UAAU,+DACXC,SAAAsE,EAAexL,EAAUyU,cAE3B,KAAA,CAAGxN,UAAU,+DACXC,SAAAqC,EAAiBmC,EAAQ5H,kBAE5BqD,EAAAA,IAAC,KAAA,CAAGF,UAAU,+DAA+DC,SAAA,MAC7EC,EAAAA,IAAC,KAAA,CAAGF,UAAU,+DAA+DC,SAAA,uBAzLzFC,MAAC,OAAIF,UAAU,yCACbC,eAAC,MAAA,CAAID,UAAU"}
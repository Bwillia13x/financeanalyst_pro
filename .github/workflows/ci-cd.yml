name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Gates
  security-scan:
    name: 'üîê Security Scan'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    name: 'üì¶ Dependency Analysis'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for outdated dependencies
      run: npm outdated || true

    - name: Check for security vulnerabilities
      run: |
        if npm audit --audit-level=moderate; then
          echo "‚úÖ No critical security vulnerabilities found"
        else
          echo "‚ö†Ô∏è Security vulnerabilities detected - review required"
          npm audit --audit-level=moderate || true
        fi

    - name: Check bundle size
      run: |
        npm run build
        npx bundlesize --enable-github-checks

  # Unit and Integration Tests
  test:
    name: 'üß™ Test Suite'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE financeanalyst_test;"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE USER test_user WITH PASSWORD 'test_pass';"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE financeanalyst_test TO test_user;"

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/financeanalyst_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/financeanalyst_test
        REDIS_URL: redis://localhost:6379

    - name: Run core functionality tests
      run: npm run test:core
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/financeanalyst_test
        REDIS_URL: redis://localhost:6379

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/
          *.log

  # Performance Testing
  performance-test:
    name: '‚ö° Performance Test'
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run performance tests
      run: npm run test:performance

    - name: Lighthouse CI
      run: |
        npm install -g lighthouse
        lighthouse --output=json --output-path=./lighthouse-results.json http://localhost:3000 || true

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          lighthouse-results.json
          performance-results/

  # Build and Push Docker Image
  build-and-push:
    name: 'üê≥ Build & Push Docker Image'
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Deploy to Staging
  deploy-staging:
    name: 'üöÄ Deploy to Staging'
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster financeanalyst-staging \
          --service financeanalyst-service \
          --force-new-deployment \
          --region us-east-1

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster financeanalyst-staging \
          --services financeanalyst-service \
          --region us-east-1

    - name: Run health checks
      run: |
        # Wait for load balancer to be ready
        sleep 60

        # Check application health
        curl -f -s https://staging-api.yourdomain.com/health || exit 1

        # Run smoke tests
        npm run test:smoke -- --baseUrl=https://staging.yourdomain.com

    - name: Notify deployment success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ Staging deployment successful!","color":"good"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå Staging deployment failed!","color":"danger"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: 'üéØ Deploy to Production'
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create backup before deployment
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        aws rds create-db-snapshot \
          --db-instance-identifier financeanalyst-prod \
          --db-snapshot-identifier backup-pre-deployment-$TIMESTAMP \
          --region us-east-1

    - name: Deploy to production ECS
      run: |
        aws ecs update-service \
          --cluster financeanalyst-production \
          --service financeanalyst-service \
          --force-new-deployment \
          --region us-east-1

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster financeanalyst-production \
          --services financeanalyst-service \
          --region us-east-1

    - name: Run production health checks
      run: |
        # Wait for load balancer to be ready
        sleep 120

        # Check application health
        for i in {1..10}; do
          if curl -f -s https://api.yourdomain.com/health; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          fi
        done

        # Run critical functionality tests
        npm run test:critical -- --baseUrl=https://yourdomain.com

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."

        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster financeanalyst-production \
          --services financeanalyst-service \
          --region us-east-1 \
          --query 'services[0].taskDefinition' \
          --output text)

        # Rollback to previous version
        aws ecs update-service \
          --cluster financeanalyst-production \
          --service financeanalyst-service \
          --task-definition $PREVIOUS_TASK_DEF \
          --region us-east-1

    - name: Notify production deployment success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üéâ Production deployment successful!","color":"good"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify production deployment failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® Production deployment failed and rolled back!","color":"danger"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment verification
  post-deployment-verification:
    name: '‚úÖ Post-Deployment Verification'
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run end-to-end tests
      run: npm run test:e2e
      env:
        BASE_URL: ${{ github.ref == 'refs/heads/main' && 'https://yourdomain.com' || 'https://staging.yourdomain.com' }}

    - name: Performance regression check
      run: |
        # Compare current performance with baseline
        npm run test:performance:compare

    - name: Generate deployment report
      run: |
        echo "## üöÄ Deployment Report" > deployment-report.md
        echo "- **Branch:** ${{ github.ref }}" >> deployment-report.md
        echo "- **Commit:** ${{ github.sha }}" >> deployment-report.md
        echo "- **Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}" >> deployment-report.md
        echo "- **Timestamp:** $(date)" >> deployment-report.md
        echo "- **Status:** ${{ job.status }}" >> deployment-report.md

        if [ "${{ job.status }}" = "success" ]; then
          echo "- **‚úÖ All checks passed**" >> deployment-report.md
        else
          echo "- **‚ùå Deployment issues detected**" >> deployment-report.md
        fi

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md

  # Rollback job (manual trigger)
  rollback:
    name: 'üîÑ Rollback Deployment'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Rollback to previous deployment
      run: |
        # Get current task definition
        CURRENT_TASK_DEF=$(aws ecs describe-services \
          --cluster financeanalyst-production \
          --services financeanalyst-service \
          --region us-east-1 \
          --query 'services[0].taskDefinition' \
          --output text)

        # List previous task definitions
        PREVIOUS_TASK_DEFS=$(aws ecs list-task-definitions \
          --family-prefix financeanalyst \
          --sort DESC \
          --max-items 5 \
          --region us-east-1 \
          --query 'taskDefinitionArns[1]' \
          --output text)

        # Rollback to previous version
        aws ecs update-service \
          --cluster financeanalyst-production \
          --service financeanalyst-service \
          --task-definition $PREVIOUS_TASK_DEFS \
          --region us-east-1

    - name: Verify rollback
      run: |
        aws ecs wait services-stable \
          --cluster financeanalyst-production \
          --services financeanalyst-service \
          --region us-east-1

        # Health check
        sleep 60
        curl -f -s https://api.yourdomain.com/health

    - name: Notify rollback completion
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üîÑ Rollback completed successfully","color":"warning"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
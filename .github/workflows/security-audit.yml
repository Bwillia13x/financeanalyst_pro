name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  dependency-audit:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          npm audit --audit-level=moderate

      - name: Run npm audit fix
        run: npm audit fix --dry-run

      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_VULNS=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(npm audit --audit-level=critical --json | jq '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found!"
            exit 1
          fi

          if [ "$HIGH_VULNS" -gt 5 ]; then
            echo "‚ö†Ô∏è Too many high severity vulnerabilities found!"
            exit 1
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: audit-results.json

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    needs: dependency-audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start local server
        run: |
          npx serve -s dist -p 3000 &
          sleep 5

      - name: Test security headers
        run: |
          echo "Testing security headers..."

          # Test Content Security Policy
          CSP=$(curl -s -I http://localhost:3000 | grep -i "content-security-policy" || echo "Missing")
          echo "CSP: $CSP"

          # Test X-Frame-Options
          XFO=$(curl -s -I http://localhost:3000 | grep -i "x-frame-options" || echo "Missing")
          echo "X-Frame-Options: $XFO"

          # Test X-Content-Type-Options
          XCTO=$(curl -s -I http://localhost:3000 | grep -i "x-content-type-options" || echo "Missing")
          echo "X-Content-Type-Options: $XCTO"

          # Test Strict-Transport-Security (HSTS)
          HSTS=$(curl -s -I http://localhost:3000 | grep -i "strict-transport-security" || echo "Missing")
          echo "HSTS: $HSTS"

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ESLint security plugin
        run: npm install --save-dev eslint-plugin-security

      - name: Run ESLint security scan
        run: |
          npx eslint --ext .js,.jsx,.ts,.tsx src/ \
            --config ./.eslintrc-security.js \
            --format json > eslint-security-results.json || true

      - name: Scan for hardcoded secrets
        run: |
          echo "Scanning for potential secrets..."

          # Check for API keys
          if grep -r "api[_-]key" src/ --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx"; then
            echo "‚ö†Ô∏è Potential API key found in source code"
          fi

          # Check for passwords
          if grep -r "password.*=" src/ --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx"; then
            echo "‚ö†Ô∏è Potential password found in source code"
          fi

          # Check for tokens
          if grep -r "token.*=" src/ --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx"; then
            echo "‚ö†Ô∏è Potential token found in source code"
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-security-results
          path: eslint-security-results.json

  penetration-test-checklist:
    name: Pen Test Checklist Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate pen test checklist exists
        run: |
          if [ ! -f "docs/PENETRATION_TEST_CHECKLIST.md" ]; then
            echo "‚ùå Penetration test checklist not found!"
            echo "Please create docs/PENETRATION_TEST_CHECKLIST.md"
            exit 1
          fi

          echo "‚úÖ Penetration test checklist found"

      - name: Check security documentation completeness
        run: |
          REQUIRED_DOCS=(
            "docs/SECURITY_ARCHITECTURE.md"
            "docs/PENETRATION_TEST_CHECKLIST.md"
            "docs/INCIDENT_RESPONSE.md"
          )

          MISSING_DOCS=()

          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ ! -f "$doc" ]; then
              MISSING_DOCS+=("$doc")
            fi
          done

          if [ ${#MISSING_DOCS[@]} -gt 0 ]; then
            echo "‚ùå Missing security documentation:"
            printf '%s\n' "${MISSING_DOCS[@]}"
            exit 1
          fi

          echo "‚úÖ All required security documentation present"

  notify-security-issues:
    name: Security Issue Notification
    runs-on: ubuntu-latest
    needs: [dependency-audit, security-headers, code-security-scan]
    if: failure()
    steps:
      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Security audit failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            **Security audit failure detected**

            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha}
            **Branch:** ${context.ref}

            **Failed Jobs:**
            - Check the workflow run for detailed results
            - Review dependency vulnerabilities
            - Validate security headers
            - Check code security scan results

            **Action Required:**
            1. Review and fix dependency vulnerabilities
            2. Update security configurations
            3. Address code security issues
            4. Re-run security audit

            **Resources:**
            - [Security Documentation](./docs/SECURITY_ARCHITECTURE.md)
            - [Penetration Test Checklist](./docs/PENETRATION_TEST_CHECKLIST.md)
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'bug']
            });
